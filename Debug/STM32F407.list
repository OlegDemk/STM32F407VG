
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800adac  0800adac  0001adac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b280  0800b280  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  0800b280  0800b280  0001b280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b288  0800b288  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b288  0800b288  0001b288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b28c  0800b28c  0001b28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800b290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000984  20000104  0800b394  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a88  0800b394  00020a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023ca6  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c12  00000000  00000000  00043dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  000489f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001710  00000000  00000000  0004a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cd2  00000000  00000000  0004b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c60  00000000  00000000  000716b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4f29  00000000  00000000  00094312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016923b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aac  00000000  00000000  00169290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000104 	.word	0x20000104
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ad94 	.word	0x0800ad94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000108 	.word	0x20000108
 80001c4:	0800ad94 	.word	0x0800ad94

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b089      	sub	sp, #36	; 0x24
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4604      	mov	r4, r0
 80004c8:	4608      	mov	r0, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	461a      	mov	r2, r3
 80004ce:	4623      	mov	r3, r4
 80004d0:	71fb      	strb	r3, [r7, #7]
 80004d2:	4603      	mov	r3, r0
 80004d4:	80bb      	strh	r3, [r7, #4]
 80004d6:	460b      	mov	r3, r1
 80004d8:	71bb      	strb	r3, [r7, #6]
 80004da:	4613      	mov	r3, r2
 80004dc:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80004e2:	7dfb      	ldrb	r3, [r7, #23]
 80004e4:	2b1f      	cmp	r3, #31
 80004e6:	d902      	bls.n	80004ee <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 80004e8:	7dfb      	ldrb	r3, [r7, #23]
 80004ea:	3b20      	subs	r3, #32
 80004ec:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80004ee:	2300      	movs	r3, #0
 80004f0:	753b      	strb	r3, [r7, #20]
 80004f2:	e012      	b.n	800051a <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 80004f4:	7dfa      	ldrb	r2, [r7, #23]
 80004f6:	7d38      	ldrb	r0, [r7, #20]
 80004f8:	7d39      	ldrb	r1, [r7, #20]
 80004fa:	4c3b      	ldr	r4, [pc, #236]	; (80005e8 <ILI9341_Draw_Char+0x128>)
 80004fc:	4613      	mov	r3, r2
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	4413      	add	r3, r2
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	4423      	add	r3, r4
 8000506:	4403      	add	r3, r0
 8000508:	781a      	ldrb	r2, [r3, #0]
 800050a:	f107 0318 	add.w	r3, r7, #24
 800050e:	440b      	add	r3, r1
 8000510:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000514:	7d3b      	ldrb	r3, [r7, #20]
 8000516:	3301      	adds	r3, #1
 8000518:	753b      	strb	r3, [r7, #20]
 800051a:	7d3b      	ldrb	r3, [r7, #20]
 800051c:	2b05      	cmp	r3, #5
 800051e:	d9e9      	bls.n	80004f4 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	b299      	uxth	r1, r3
 8000524:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000526:	461a      	mov	r2, r3
 8000528:	0052      	lsls	r2, r2, #1
 800052a:	4413      	add	r3, r2
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	b29a      	uxth	r2, r3
 8000530:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	b29c      	uxth	r4, r3
 8000536:	88b8      	ldrh	r0, [r7, #4]
 8000538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	4623      	mov	r3, r4
 800053e:	f000 fc37 	bl	8000db0 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000542:	2300      	movs	r3, #0
 8000544:	757b      	strb	r3, [r7, #21]
 8000546:	e046      	b.n	80005d6 <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000548:	2300      	movs	r3, #0
 800054a:	75bb      	strb	r3, [r7, #22]
 800054c:	e03d      	b.n	80005ca <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 800054e:	7d7b      	ldrb	r3, [r7, #21]
 8000550:	f107 0218 	add.w	r2, r7, #24
 8000554:	4413      	add	r3, r2
 8000556:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800055a:	461a      	mov	r2, r3
 800055c:	7dbb      	ldrb	r3, [r7, #22]
 800055e:	fa42 f303 	asr.w	r3, r2, r3
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	2b00      	cmp	r3, #0
 8000568:	d02c      	beq.n	80005c4 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 800056a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800056c:	2b01      	cmp	r3, #1
 800056e:	d10f      	bne.n	8000590 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000570:	7d7b      	ldrb	r3, [r7, #21]
 8000572:	b29a      	uxth	r2, r3
 8000574:	88bb      	ldrh	r3, [r7, #4]
 8000576:	4413      	add	r3, r2
 8000578:	b298      	uxth	r0, r3
 800057a:	79bb      	ldrb	r3, [r7, #6]
 800057c:	b29a      	uxth	r2, r3
 800057e:	7dbb      	ldrb	r3, [r7, #22]
 8000580:	b29b      	uxth	r3, r3
 8000582:	4413      	add	r3, r2
 8000584:	b29b      	uxth	r3, r3
 8000586:	887a      	ldrh	r2, [r7, #2]
 8000588:	4619      	mov	r1, r3
 800058a:	f000 fb49 	bl	8000c20 <ILI9341_Draw_Pixel>
 800058e:	e019      	b.n	80005c4 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000590:	7d7b      	ldrb	r3, [r7, #21]
 8000592:	b29b      	uxth	r3, r3
 8000594:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000596:	fb12 f303 	smulbb	r3, r2, r3
 800059a:	b29a      	uxth	r2, r3
 800059c:	88bb      	ldrh	r3, [r7, #4]
 800059e:	4413      	add	r3, r2
 80005a0:	b298      	uxth	r0, r3
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	7dbb      	ldrb	r3, [r7, #22]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80005ac:	fb11 f303 	smulbb	r3, r1, r3
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	4413      	add	r3, r2
 80005b4:	b299      	uxth	r1, r3
 80005b6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80005b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80005ba:	887b      	ldrh	r3, [r7, #2]
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4623      	mov	r3, r4
 80005c0:	f000 fbf6 	bl	8000db0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80005c4:	7dbb      	ldrb	r3, [r7, #22]
 80005c6:	3301      	adds	r3, #1
 80005c8:	75bb      	strb	r3, [r7, #22]
 80005ca:	7dbb      	ldrb	r3, [r7, #22]
 80005cc:	2b07      	cmp	r3, #7
 80005ce:	d9be      	bls.n	800054e <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 80005d0:	7d7b      	ldrb	r3, [r7, #21]
 80005d2:	3301      	adds	r3, #1
 80005d4:	757b      	strb	r3, [r7, #21]
 80005d6:	7d7b      	ldrb	r3, [r7, #21]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d9b5      	bls.n	8000548 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	371c      	adds	r7, #28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd90      	pop	{r4, r7, pc}
 80005e6:	bf00      	nop
 80005e8:	0800ae90 	.word	0x0800ae90

080005ec <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b087      	sub	sp, #28
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	4608      	mov	r0, r1
 80005f6:	4611      	mov	r1, r2
 80005f8:	461a      	mov	r2, r3
 80005fa:	4603      	mov	r3, r0
 80005fc:	817b      	strh	r3, [r7, #10]
 80005fe:	460b      	mov	r3, r1
 8000600:	727b      	strb	r3, [r7, #9]
 8000602:	4613      	mov	r3, r2
 8000604:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8000606:	e016      	b.n	8000636 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	60fa      	str	r2, [r7, #12]
 800060e:	7818      	ldrb	r0, [r3, #0]
 8000610:	88fc      	ldrh	r4, [r7, #6]
 8000612:	7a7a      	ldrb	r2, [r7, #9]
 8000614:	8979      	ldrh	r1, [r7, #10]
 8000616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	8c3b      	ldrh	r3, [r7, #32]
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	4623      	mov	r3, r4
 8000620:	f7ff ff4e 	bl	80004c0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000624:	8c3b      	ldrh	r3, [r7, #32]
 8000626:	461a      	mov	r2, r3
 8000628:	0052      	lsls	r2, r2, #1
 800062a:	4413      	add	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	b29a      	uxth	r2, r3
 8000630:	897b      	ldrh	r3, [r7, #10]
 8000632:	4413      	add	r3, r2
 8000634:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1e4      	bne.n	8000608 <ILI9341_Draw_Text+0x1c>
    }
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bd90      	pop	{r4, r7, pc}

08000648 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <ILI9341_SPI_Init+0x14>)
 8000652:	f002 fc19 	bl	8002e88 <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800066a:	1df9      	adds	r1, r7, #7
 800066c:	2301      	movs	r3, #1
 800066e:	2201      	movs	r2, #1
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <ILI9341_SPI_Send+0x20>)
 8000672:	f005 fdd8 	bl	8006226 <HAL_SPI_Transmit>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200001b8 	.word	0x200001b8

08000684 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2110      	movs	r1, #16
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <ILI9341_Write_Command+0x38>)
 8000694:	f002 fbf8 	bl	8002e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000698:	2200      	movs	r2, #0
 800069a:	2140      	movs	r1, #64	; 0x40
 800069c:	4807      	ldr	r0, [pc, #28]	; (80006bc <ILI9341_Write_Command+0x38>)
 800069e:	f002 fbf3 	bl	8002e88 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffdb 	bl	8000660 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80006aa:	2201      	movs	r2, #1
 80006ac:	2110      	movs	r1, #16
 80006ae:	4803      	ldr	r0, [pc, #12]	; (80006bc <ILI9341_Write_Command+0x38>)
 80006b0:	f002 fbea 	bl	8002e88 <HAL_GPIO_WritePin>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000

080006c0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80006ca:	2201      	movs	r2, #1
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	480a      	ldr	r0, [pc, #40]	; (80006f8 <ILI9341_Write_Data+0x38>)
 80006d0:	f002 fbda 	bl	8002e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2110      	movs	r1, #16
 80006d8:	4807      	ldr	r0, [pc, #28]	; (80006f8 <ILI9341_Write_Data+0x38>)
 80006da:	f002 fbd5 	bl	8002e88 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ffbd 	bl	8000660 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2110      	movs	r1, #16
 80006ea:	4803      	ldr	r0, [pc, #12]	; (80006f8 <ILI9341_Write_Data+0x38>)
 80006ec:	f002 fbcc 	bl	8002e88 <HAL_GPIO_WritePin>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000

080006fc <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4604      	mov	r4, r0
 8000704:	4608      	mov	r0, r1
 8000706:	4611      	mov	r1, r2
 8000708:	461a      	mov	r2, r3
 800070a:	4623      	mov	r3, r4
 800070c:	80fb      	strh	r3, [r7, #6]
 800070e:	4603      	mov	r3, r0
 8000710:	80bb      	strh	r3, [r7, #4]
 8000712:	460b      	mov	r3, r1
 8000714:	807b      	strh	r3, [r7, #2]
 8000716:	4613      	mov	r3, r2
 8000718:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800071a:	202a      	movs	r0, #42	; 0x2a
 800071c:	f7ff ffb2 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	0a1b      	lsrs	r3, r3, #8
 8000724:	b29b      	uxth	r3, r3
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ffc9 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ffc4 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000738:	887b      	ldrh	r3, [r7, #2]
 800073a:	0a1b      	lsrs	r3, r3, #8
 800073c:	b29b      	uxth	r3, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ffbd 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000746:	887b      	ldrh	r3, [r7, #2]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ffb8 	bl	80006c0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000750:	202b      	movs	r0, #43	; 0x2b
 8000752:	f7ff ff97 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000756:	88bb      	ldrh	r3, [r7, #4]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	b29b      	uxth	r3, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ffae 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ffa9 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800076e:	883b      	ldrh	r3, [r7, #0]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	b29b      	uxth	r3, r3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffa2 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800077c:	883b      	ldrh	r3, [r7, #0]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff9d 	bl	80006c0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000786:	202c      	movs	r0, #44	; 0x2c
 8000788:	f7ff ff7c 	bl	8000684 <ILI9341_Write_Command>
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bd90      	pop	{r4, r7, pc}

08000794 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2120      	movs	r1, #32
 800079c:	480a      	ldr	r0, [pc, #40]	; (80007c8 <ILI9341_Reset+0x34>)
 800079e:	f002 fb73 	bl	8002e88 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80007a2:	20c8      	movs	r0, #200	; 0xc8
 80007a4:	f002 f886 	bl	80028b4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2110      	movs	r1, #16
 80007ac:	4806      	ldr	r0, [pc, #24]	; (80007c8 <ILI9341_Reset+0x34>)
 80007ae:	f002 fb6b 	bl	8002e88 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80007b2:	20c8      	movs	r0, #200	; 0xc8
 80007b4:	f002 f87e 	bl	80028b4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80007b8:	2201      	movs	r2, #1
 80007ba:	2120      	movs	r1, #32
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <ILI9341_Reset+0x34>)
 80007be:	f002 fb63 	bl	8002e88 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80007da:	2036      	movs	r0, #54	; 0x36
 80007dc:	f7ff ff52 	bl	8000684 <ILI9341_Write_Command>
HAL_Delay(1);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f002 f867 	bl	80028b4 <HAL_Delay>
	
switch(screen_rotation) 
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	2b03      	cmp	r3, #3
 80007ea:	d837      	bhi.n	800085c <ILI9341_Set_Rotation+0x90>
 80007ec:	a201      	add	r2, pc, #4	; (adr r2, 80007f4 <ILI9341_Set_Rotation+0x28>)
 80007ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f2:	bf00      	nop
 80007f4:	08000805 	.word	0x08000805
 80007f8:	0800081b 	.word	0x0800081b
 80007fc:	08000831 	.word	0x08000831
 8000800:	08000847 	.word	0x08000847
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000804:	2048      	movs	r0, #72	; 0x48
 8000806:	f7ff ff5b 	bl	80006c0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <ILI9341_Set_Rotation+0x9c>)
 800080c:	22f0      	movs	r2, #240	; 0xf0
 800080e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <ILI9341_Set_Rotation+0xa0>)
 8000812:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000816:	801a      	strh	r2, [r3, #0]
			break;
 8000818:	e021      	b.n	800085e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800081a:	2028      	movs	r0, #40	; 0x28
 800081c:	f7ff ff50 	bl	80006c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <ILI9341_Set_Rotation+0x9c>)
 8000822:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000826:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <ILI9341_Set_Rotation+0xa0>)
 800082a:	22f0      	movs	r2, #240	; 0xf0
 800082c:	801a      	strh	r2, [r3, #0]
			break;
 800082e:	e016      	b.n	800085e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000830:	2088      	movs	r0, #136	; 0x88
 8000832:	f7ff ff45 	bl	80006c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <ILI9341_Set_Rotation+0x9c>)
 8000838:	22f0      	movs	r2, #240	; 0xf0
 800083a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <ILI9341_Set_Rotation+0xa0>)
 800083e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000842:	801a      	strh	r2, [r3, #0]
			break;
 8000844:	e00b      	b.n	800085e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000846:	20e8      	movs	r0, #232	; 0xe8
 8000848:	f7ff ff3a 	bl	80006c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <ILI9341_Set_Rotation+0x9c>)
 800084e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000852:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <ILI9341_Set_Rotation+0xa0>)
 8000856:	22f0      	movs	r2, #240	; 0xf0
 8000858:	801a      	strh	r2, [r3, #0]
			break;
 800085a:	e000      	b.n	800085e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800085c:	bf00      	nop
	}
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000002 	.word	0x20000002
 800086c:	20000000 	.word	0x20000000

08000870 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2120      	movs	r1, #32
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <ILI9341_Enable+0x14>)
 800087a:	f002 fb05 	bl	8002e88 <HAL_GPIO_WritePin>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000

08000888 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800088c:	f7ff fff0 	bl	8000870 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000890:	f7ff feda 	bl	8000648 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000894:	f7ff ff7e 	bl	8000794 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000898:	2001      	movs	r0, #1
 800089a:	f7ff fef3 	bl	8000684 <ILI9341_Write_Command>
HAL_Delay(1000);
 800089e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a2:	f002 f807 	bl	80028b4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80008a6:	20cb      	movs	r0, #203	; 0xcb
 80008a8:	f7ff feec 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80008ac:	2039      	movs	r0, #57	; 0x39
 80008ae:	f7ff ff07 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80008b2:	202c      	movs	r0, #44	; 0x2c
 80008b4:	f7ff ff04 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff ff01 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80008be:	2034      	movs	r0, #52	; 0x34
 80008c0:	f7ff fefe 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80008c4:	2002      	movs	r0, #2
 80008c6:	f7ff fefb 	bl	80006c0 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80008ca:	20cf      	movs	r0, #207	; 0xcf
 80008cc:	f7ff feda 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80008d0:	2000      	movs	r0, #0
 80008d2:	f7ff fef5 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80008d6:	20c1      	movs	r0, #193	; 0xc1
 80008d8:	f7ff fef2 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80008dc:	2030      	movs	r0, #48	; 0x30
 80008de:	f7ff feef 	bl	80006c0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80008e2:	20e8      	movs	r0, #232	; 0xe8
 80008e4:	f7ff fece 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80008e8:	2085      	movs	r0, #133	; 0x85
 80008ea:	f7ff fee9 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff fee6 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80008f4:	2078      	movs	r0, #120	; 0x78
 80008f6:	f7ff fee3 	bl	80006c0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80008fa:	20ea      	movs	r0, #234	; 0xea
 80008fc:	f7ff fec2 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fedd 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff feda 	bl	80006c0 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800090c:	20ed      	movs	r0, #237	; 0xed
 800090e:	f7ff feb9 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000912:	2064      	movs	r0, #100	; 0x64
 8000914:	f7ff fed4 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000918:	2003      	movs	r0, #3
 800091a:	f7ff fed1 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800091e:	2012      	movs	r0, #18
 8000920:	f7ff fece 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000924:	2081      	movs	r0, #129	; 0x81
 8000926:	f7ff fecb 	bl	80006c0 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800092a:	20f7      	movs	r0, #247	; 0xf7
 800092c:	f7ff feaa 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000930:	2020      	movs	r0, #32
 8000932:	f7ff fec5 	bl	80006c0 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000936:	20c0      	movs	r0, #192	; 0xc0
 8000938:	f7ff fea4 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800093c:	2023      	movs	r0, #35	; 0x23
 800093e:	f7ff febf 	bl	80006c0 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000942:	20c1      	movs	r0, #193	; 0xc1
 8000944:	f7ff fe9e 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000948:	2010      	movs	r0, #16
 800094a:	f7ff feb9 	bl	80006c0 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800094e:	20c5      	movs	r0, #197	; 0xc5
 8000950:	f7ff fe98 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000954:	203e      	movs	r0, #62	; 0x3e
 8000956:	f7ff feb3 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800095a:	2028      	movs	r0, #40	; 0x28
 800095c:	f7ff feb0 	bl	80006c0 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000960:	20c7      	movs	r0, #199	; 0xc7
 8000962:	f7ff fe8f 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000966:	2086      	movs	r0, #134	; 0x86
 8000968:	f7ff feaa 	bl	80006c0 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800096c:	2036      	movs	r0, #54	; 0x36
 800096e:	f7ff fe89 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000972:	2048      	movs	r0, #72	; 0x48
 8000974:	f7ff fea4 	bl	80006c0 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000978:	203a      	movs	r0, #58	; 0x3a
 800097a:	f7ff fe83 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800097e:	2055      	movs	r0, #85	; 0x55
 8000980:	f7ff fe9e 	bl	80006c0 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000984:	20b1      	movs	r0, #177	; 0xb1
 8000986:	f7ff fe7d 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fe98 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000990:	2018      	movs	r0, #24
 8000992:	f7ff fe95 	bl	80006c0 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000996:	20b6      	movs	r0, #182	; 0xb6
 8000998:	f7ff fe74 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800099c:	2008      	movs	r0, #8
 800099e:	f7ff fe8f 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80009a2:	2082      	movs	r0, #130	; 0x82
 80009a4:	f7ff fe8c 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80009a8:	2027      	movs	r0, #39	; 0x27
 80009aa:	f7ff fe89 	bl	80006c0 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80009ae:	20f2      	movs	r0, #242	; 0xf2
 80009b0:	f7ff fe68 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff fe83 	bl	80006c0 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80009ba:	2026      	movs	r0, #38	; 0x26
 80009bc:	f7ff fe62 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff fe7d 	bl	80006c0 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80009c6:	20e0      	movs	r0, #224	; 0xe0
 80009c8:	f7ff fe5c 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80009cc:	200f      	movs	r0, #15
 80009ce:	f7ff fe77 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80009d2:	2031      	movs	r0, #49	; 0x31
 80009d4:	f7ff fe74 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80009d8:	202b      	movs	r0, #43	; 0x2b
 80009da:	f7ff fe71 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80009de:	200c      	movs	r0, #12
 80009e0:	f7ff fe6e 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80009e4:	200e      	movs	r0, #14
 80009e6:	f7ff fe6b 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80009ea:	2008      	movs	r0, #8
 80009ec:	f7ff fe68 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80009f0:	204e      	movs	r0, #78	; 0x4e
 80009f2:	f7ff fe65 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80009f6:	20f1      	movs	r0, #241	; 0xf1
 80009f8:	f7ff fe62 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80009fc:	2037      	movs	r0, #55	; 0x37
 80009fe:	f7ff fe5f 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000a02:	2007      	movs	r0, #7
 8000a04:	f7ff fe5c 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000a08:	2010      	movs	r0, #16
 8000a0a:	f7ff fe59 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f7ff fe56 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000a14:	200e      	movs	r0, #14
 8000a16:	f7ff fe53 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000a1a:	2009      	movs	r0, #9
 8000a1c:	f7ff fe50 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fe4d 	bl	80006c0 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000a26:	20e1      	movs	r0, #225	; 0xe1
 8000a28:	f7ff fe2c 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff fe47 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000a32:	200e      	movs	r0, #14
 8000a34:	f7ff fe44 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000a38:	2014      	movs	r0, #20
 8000a3a:	f7ff fe41 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000a3e:	2003      	movs	r0, #3
 8000a40:	f7ff fe3e 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000a44:	2011      	movs	r0, #17
 8000a46:	f7ff fe3b 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f7ff fe38 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000a50:	2031      	movs	r0, #49	; 0x31
 8000a52:	f7ff fe35 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000a56:	20c1      	movs	r0, #193	; 0xc1
 8000a58:	f7ff fe32 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000a5c:	2048      	movs	r0, #72	; 0x48
 8000a5e:	f7ff fe2f 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000a62:	2008      	movs	r0, #8
 8000a64:	f7ff fe2c 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000a68:	200f      	movs	r0, #15
 8000a6a:	f7ff fe29 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000a6e:	200c      	movs	r0, #12
 8000a70:	f7ff fe26 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000a74:	2031      	movs	r0, #49	; 0x31
 8000a76:	f7ff fe23 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000a7a:	2036      	movs	r0, #54	; 0x36
 8000a7c:	f7ff fe20 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000a80:	200f      	movs	r0, #15
 8000a82:	f7ff fe1d 	bl	80006c0 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000a86:	2011      	movs	r0, #17
 8000a88:	f7ff fdfc 	bl	8000684 <ILI9341_Write_Command>
HAL_Delay(120);
 8000a8c:	2078      	movs	r0, #120	; 0x78
 8000a8e:	f001 ff11 	bl	80028b4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000a92:	2029      	movs	r0, #41	; 0x29
 8000a94:	f7ff fdf6 	bl	8000684 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f7ff fe97 	bl	80007cc <ILI9341_Set_Rotation>

HAL_Delay(10);
 8000a9e:	200a      	movs	r0, #10
 8000aa0:	f001 ff08 	bl	80028b4 <HAL_Delay>
//
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000aa8:	b5b0      	push	{r4, r5, r7, lr}
 8000aaa:	b08c      	sub	sp, #48	; 0x30
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	80fb      	strh	r3, [r7, #6]
 8000ab4:	466b      	mov	r3, sp
 8000ab6:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ac4:	d202      	bcs.n	8000acc <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aca:	e002      	b.n	8000ad2 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000acc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	483d      	ldr	r0, [pc, #244]	; (8000bcc <ILI9341_Draw_Colour_Burst+0x124>)
 8000ad8:	f002 f9d6 	bl	8002e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2110      	movs	r1, #16
 8000ae0:	483a      	ldr	r0, [pc, #232]	; (8000bcc <ILI9341_Draw_Colour_Burst+0x124>)
 8000ae2:	f002 f9d1 	bl	8002e88 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000af0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000af2:	4623      	mov	r3, r4
 8000af4:	3b01      	subs	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	4620      	mov	r0, r4
 8000afa:	f04f 0100 	mov.w	r1, #0
 8000afe:	f04f 0200 	mov.w	r2, #0
 8000b02:	f04f 0300 	mov.w	r3, #0
 8000b06:	00cb      	lsls	r3, r1, #3
 8000b08:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b0c:	00c2      	lsls	r2, r0, #3
 8000b0e:	4620      	mov	r0, r4
 8000b10:	f04f 0100 	mov.w	r1, #0
 8000b14:	f04f 0200 	mov.w	r2, #0
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	00cb      	lsls	r3, r1, #3
 8000b1e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b22:	00c2      	lsls	r2, r0, #3
 8000b24:	1de3      	adds	r3, r4, #7
 8000b26:	08db      	lsrs	r3, r3, #3
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	ebad 0d03 	sub.w	sp, sp, r3
 8000b2e:	466b      	mov	r3, sp
 8000b30:	3300      	adds	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b38:	e00e      	b.n	8000b58 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3e:	4413      	add	r3, r2
 8000b40:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000b44:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b48:	3301      	adds	r3, #1
 8000b4a:	88fa      	ldrh	r2, [r7, #6]
 8000b4c:	b2d1      	uxtb	r1, r2
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b54:	3302      	adds	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d3ec      	bcc.n	8000b3a <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000b66:	697a      	ldr	r2, [r7, #20]
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b74:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b7a:	fb01 f202 	mul.w	r2, r1, r2
 8000b7e:	1a9b      	subs	r3, r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d010      	beq.n	8000baa <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b8c:	e009      	b.n	8000ba2 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000b8e:	69b9      	ldr	r1, [r7, #24]
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	230a      	movs	r3, #10
 8000b96:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <ILI9341_Draw_Colour_Burst+0x128>)
 8000b98:	f005 fb45 	bl	8006226 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d3f1      	bcc.n	8000b8e <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000baa:	69b9      	ldr	r1, [r7, #24]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <ILI9341_Draw_Colour_Burst+0x128>)
 8000bb4:	f005 fb37 	bl	8006226 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2110      	movs	r1, #16
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <ILI9341_Draw_Colour_Burst+0x124>)
 8000bbe:	f002 f963 	bl	8002e88 <HAL_GPIO_WritePin>
 8000bc2:	46ad      	mov	sp, r5
}
 8000bc4:	bf00      	nop
 8000bc6:	3730      	adds	r7, #48	; 0x30
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bdb0      	pop	{r4, r5, r7, pc}
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	200001b8 	.word	0x200001b8

08000bd4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <ILI9341_Fill_Screen+0x44>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <ILI9341_Fill_Screen+0x48>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fd85 	bl	80006fc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <ILI9341_Fill_Screen+0x44>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <ILI9341_Fill_Screen+0x48>)
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	fb03 f302 	mul.w	r3, r3, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff4c 	bl	8000aa8 <ILI9341_Draw_Colour_Burst>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000002 	.word	0x20000002
 8000c1c:	20000000 	.word	0x20000000

08000c20 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	80bb      	strh	r3, [r7, #4]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000c32:	4b5b      	ldr	r3, [pc, #364]	; (8000da0 <ILI9341_Draw_Pixel+0x180>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	88fa      	ldrh	r2, [r7, #6]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	f080 80ac 	bcs.w	8000d98 <ILI9341_Draw_Pixel+0x178>
 8000c40:	4b58      	ldr	r3, [pc, #352]	; (8000da4 <ILI9341_Draw_Pixel+0x184>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	88ba      	ldrh	r2, [r7, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	f080 80a5 	bcs.w	8000d98 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2140      	movs	r1, #64	; 0x40
 8000c52:	4855      	ldr	r0, [pc, #340]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000c54:	f002 f918 	bl	8002e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	4852      	ldr	r0, [pc, #328]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000c5e:	f002 f913 	bl	8002e88 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000c62:	202a      	movs	r0, #42	; 0x2a
 8000c64:	f7ff fcfc 	bl	8000660 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2140      	movs	r1, #64	; 0x40
 8000c6c:	484e      	ldr	r0, [pc, #312]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000c6e:	f002 f90b 	bl	8002e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000c72:	2201      	movs	r2, #1
 8000c74:	2110      	movs	r1, #16
 8000c76:	484c      	ldr	r0, [pc, #304]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000c78:	f002 f906 	bl	8002e88 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4849      	ldr	r0, [pc, #292]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000c82:	f002 f901 	bl	8002e88 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	753b      	strb	r3, [r7, #20]
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	757b      	strb	r3, [r7, #21]
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	121b      	asrs	r3, r3, #8
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	75bb      	strb	r3, [r7, #22]
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000caa:	f107 0114 	add.w	r1, r7, #20
 8000cae:	2301      	movs	r3, #1
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	483e      	ldr	r0, [pc, #248]	; (8000dac <ILI9341_Draw_Pixel+0x18c>)
 8000cb4:	f005 fab7 	bl	8006226 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2110      	movs	r1, #16
 8000cbc:	483a      	ldr	r0, [pc, #232]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000cbe:	f002 f8e3 	bl	8002e88 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2140      	movs	r1, #64	; 0x40
 8000cc6:	4838      	ldr	r0, [pc, #224]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000cc8:	f002 f8de 	bl	8002e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2110      	movs	r1, #16
 8000cd0:	4835      	ldr	r0, [pc, #212]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000cd2:	f002 f8d9 	bl	8002e88 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000cd6:	202b      	movs	r0, #43	; 0x2b
 8000cd8:	f7ff fcc2 	bl	8000660 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2140      	movs	r1, #64	; 0x40
 8000ce0:	4831      	ldr	r0, [pc, #196]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000ce2:	f002 f8d1 	bl	8002e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2110      	movs	r1, #16
 8000cea:	482f      	ldr	r0, [pc, #188]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000cec:	f002 f8cc 	bl	8002e88 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	482c      	ldr	r0, [pc, #176]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000cf6:	f002 f8c7 	bl	8002e88 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000cfa:	88bb      	ldrh	r3, [r7, #4]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	743b      	strb	r3, [r7, #16]
 8000d04:	88bb      	ldrh	r3, [r7, #4]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	747b      	strb	r3, [r7, #17]
 8000d0a:	88bb      	ldrh	r3, [r7, #4]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	121b      	asrs	r3, r3, #8
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	74bb      	strb	r3, [r7, #18]
 8000d14:	88bb      	ldrh	r3, [r7, #4]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	3301      	adds	r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000d1e:	f107 0110 	add.w	r1, r7, #16
 8000d22:	2301      	movs	r3, #1
 8000d24:	2204      	movs	r2, #4
 8000d26:	4821      	ldr	r0, [pc, #132]	; (8000dac <ILI9341_Draw_Pixel+0x18c>)
 8000d28:	f005 fa7d 	bl	8006226 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2110      	movs	r1, #16
 8000d30:	481d      	ldr	r0, [pc, #116]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d32:	f002 f8a9 	bl	8002e88 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000d36:	2200      	movs	r2, #0
 8000d38:	2140      	movs	r1, #64	; 0x40
 8000d3a:	481b      	ldr	r0, [pc, #108]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d3c:	f002 f8a4 	bl	8002e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000d40:	2200      	movs	r2, #0
 8000d42:	2110      	movs	r1, #16
 8000d44:	4818      	ldr	r0, [pc, #96]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d46:	f002 f89f 	bl	8002e88 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000d4a:	202c      	movs	r0, #44	; 0x2c
 8000d4c:	f7ff fc88 	bl	8000660 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000d50:	2201      	movs	r2, #1
 8000d52:	2140      	movs	r1, #64	; 0x40
 8000d54:	4814      	ldr	r0, [pc, #80]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d56:	f002 f897 	bl	8002e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	4812      	ldr	r0, [pc, #72]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d60:	f002 f892 	bl	8002e88 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2110      	movs	r1, #16
 8000d68:	480f      	ldr	r0, [pc, #60]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d6a:	f002 f88d 	bl	8002e88 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	733b      	strb	r3, [r7, #12]
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000d7e:	f107 010c 	add.w	r1, r7, #12
 8000d82:	2301      	movs	r3, #1
 8000d84:	2202      	movs	r2, #2
 8000d86:	4809      	ldr	r0, [pc, #36]	; (8000dac <ILI9341_Draw_Pixel+0x18c>)
 8000d88:	f005 fa4d 	bl	8006226 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d92:	f002 f879 	bl	8002e88 <HAL_GPIO_WritePin>
 8000d96:	e000      	b.n	8000d9a <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000d98:	bf00      	nop
	
}
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000002 	.word	0x20000002
 8000da4:	20000000 	.word	0x20000000
 8000da8:	40021000 	.word	0x40021000
 8000dac:	200001b8 	.word	0x200001b8

08000db0 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4604      	mov	r4, r0
 8000db8:	4608      	mov	r0, r1
 8000dba:	4611      	mov	r1, r2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4623      	mov	r3, r4
 8000dc0:	80fb      	strh	r3, [r7, #6]
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80bb      	strh	r3, [r7, #4]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	807b      	strh	r3, [r7, #2]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <ILI9341_Draw_Rectangle+0xb0>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	88fa      	ldrh	r2, [r7, #6]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d23d      	bcs.n	8000e56 <ILI9341_Draw_Rectangle+0xa6>
 8000dda:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <ILI9341_Draw_Rectangle+0xb4>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	88ba      	ldrh	r2, [r7, #4]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d237      	bcs.n	8000e56 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8000de6:	88fa      	ldrh	r2, [r7, #6]
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <ILI9341_Draw_Rectangle+0xb0>)
 8000dee:	8812      	ldrh	r2, [r2, #0]
 8000df0:	b292      	uxth	r2, r2
 8000df2:	4293      	cmp	r3, r2
 8000df4:	dd05      	ble.n	8000e02 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <ILI9341_Draw_Rectangle+0xb0>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8000e02:	88ba      	ldrh	r2, [r7, #4]
 8000e04:	883b      	ldrh	r3, [r7, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <ILI9341_Draw_Rectangle+0xb4>)
 8000e0a:	8812      	ldrh	r2, [r2, #0]
 8000e0c:	b292      	uxth	r2, r2
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	dd05      	ble.n	8000e1e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <ILI9341_Draw_Rectangle+0xb4>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	88bb      	ldrh	r3, [r7, #4]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000e1e:	88fa      	ldrh	r2, [r7, #6]
 8000e20:	887b      	ldrh	r3, [r7, #2]
 8000e22:	4413      	add	r3, r2
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b29c      	uxth	r4, r3
 8000e2a:	88ba      	ldrh	r2, [r7, #4]
 8000e2c:	883b      	ldrh	r3, [r7, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	3b01      	subs	r3, #1
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	88b9      	ldrh	r1, [r7, #4]
 8000e38:	88f8      	ldrh	r0, [r7, #6]
 8000e3a:	4622      	mov	r2, r4
 8000e3c:	f7ff fc5e 	bl	80006fc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000e40:	883b      	ldrh	r3, [r7, #0]
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	fb02 f303 	mul.w	r3, r2, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	8b3b      	ldrh	r3, [r7, #24]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fe2a 	bl	8000aa8 <ILI9341_Draw_Colour_Burst>
 8000e54:	e000      	b.n	8000e58 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000e56:	bf00      	nop
}
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000002 	.word	0x20000002
 8000e64:	20000000 	.word	0x20000000

08000e68 <menu>:
uint8_t pointer_on_selected_menu =1;
//uint8_t p =0;
//void print_sign(p);

void menu()
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
	Menu_SetGenericWriteCallback(Generic_Write);  //передача показника на Generic_Write функцію  point in Menu_SetGenericWriteCallback
 8000e6e:	4832      	ldr	r0, [pc, #200]	; (8000f38 <menu+0xd0>)
 8000e70:	f000 fae6 	bl	8001440 <Menu_SetGenericWriteCallback>

	//print_all_top_menu();
	Menu_Navigate(&Menu_1);
 8000e74:	4831      	ldr	r0, [pc, #196]	; (8000f3c <menu+0xd4>)
 8000e76:	f000 fab5 	bl	80013e4 <Menu_Navigate>
//	print_sign(p);
//	Menu_Navigate(&Menu_2);
//	Menu_Navigate(&Menu_3);
	while (1)
	  {
	   uint8_t pressed_key = getPressKey();
 8000e7a:	f000 f9eb 	bl	8001254 <getPressKey>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]

	   if (pressed_key != BUTTON_NOTHING && !flagPressed)
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	2bff      	cmp	r3, #255	; 0xff
 8000e86:	d04a      	beq.n	8000f1e <menu+0xb6>
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <menu+0xd8>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	f083 0301 	eor.w	r3, r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d043      	beq.n	8000f1e <menu+0xb6>
	   {
			flagPressed = true;
 8000e96:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <menu+0xd8>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
			switch(pressed_key)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d83b      	bhi.n	8000f1a <menu+0xb2>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <menu+0x40>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000ebd 	.word	0x08000ebd
 8000eac:	08000ecd 	.word	0x08000ecd
 8000eb0:	08000ee9 	.word	0x08000ee9
 8000eb4:	08000f05 	.word	0x08000f05
 8000eb8:	08000f15 	.word	0x08000f15
			{
				case BUTTON_LEFT:
					Menu_Navigate(MENU_PARENT);	// Перейти на MENU_PARENT
 8000ebc:	f000 fa86 	bl	80013cc <Menu_GetCurrentMenu>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fa8d 	bl	80013e4 <Menu_Navigate>
					break;
 8000eca:	e027      	b.n	8000f1c <menu+0xb4>

				case BUTTON_UP:
					pointer_on_selected_menu--;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <menu+0xdc>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <menu+0xdc>)
 8000ed6:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_PREVIOUS);  // Перейти на MENU_PREVIOUS
 8000ed8:	f000 fa78 	bl	80013cc <Menu_GetCurrentMenu>
 8000edc:	4603      	mov	r3, r0
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fa7f 	bl	80013e4 <Menu_Navigate>
					break;
 8000ee6:	e019      	b.n	8000f1c <menu+0xb4>

				case BUTTON_DOWN:
					pointer_on_selected_menu++;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <menu+0xdc>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <menu+0xdc>)
 8000ef2:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_NEXT);      // Перейти на MENU_NEXT
 8000ef4:	f000 fa6a 	bl	80013cc <Menu_GetCurrentMenu>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 fa71 	bl	80013e4 <Menu_Navigate>
					break;
 8000f02:	e00b      	b.n	8000f1c <menu+0xb4>

				case BUTTON_RIGHT:
					Menu_Navigate(MENU_CHILD);
 8000f04:	f000 fa62 	bl	80013cc <Menu_GetCurrentMenu>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fa69 	bl	80013e4 <Menu_Navigate>
					break;
 8000f12:	e003      	b.n	8000f1c <menu+0xb4>

				case BUTTON_SELECT:
					Menu_EnterCurrentItem();
 8000f14:	f000 faa8 	bl	8001468 <Menu_EnterCurrentItem>
					break;
 8000f18:	e000      	b.n	8000f1c <menu+0xb4>

			 default:
			  break;
 8000f1a:	bf00      	nop
			switch(pressed_key)
 8000f1c:	e00b      	b.n	8000f36 <menu+0xce>
			}
	   }
	   else if (getPressKey() == BUTTON_NOTHING && flagPressed)
 8000f1e:	f000 f999 	bl	8001254 <getPressKey>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2bff      	cmp	r3, #255	; 0xff
 8000f26:	d1a8      	bne.n	8000e7a <menu+0x12>
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <menu+0xd8>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0a4      	beq.n	8000e7a <menu+0x12>
	   {
		   flagPressed = false;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <menu+0xd8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
	  {
 8000f36:	e7a0      	b.n	8000e7a <menu+0x12>
 8000f38:	08001385 	.word	0x08001385
 8000f3c:	0800b0e8 	.word	0x0800b0e8
 8000f40:	20000124 	.word	0x20000124
 8000f44:	2000006c 	.word	0x2000006c

08000f48 <print_all_top_menu>:
	  }
}
// -----------------------------------------------------------------------
//// TEST PRINT FUNCTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void print_all_top_menu(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af02      	add	r7, sp, #8
	// Print all main menus
	ILI9341_Draw_Text(main_menus[0], 40, 110, WHITE, 2, BLACK);
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	2302      	movs	r3, #2
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f5a:	226e      	movs	r2, #110	; 0x6e
 8000f5c:	2128      	movs	r1, #40	; 0x28
 8000f5e:	4863      	ldr	r0, [pc, #396]	; (80010ec <print_all_top_menu+0x1a4>)
 8000f60:	f7ff fb44 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[1], 40, 130, WHITE, 2, BLACK);
 8000f64:	2300      	movs	r3, #0
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	2302      	movs	r3, #2
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f70:	2282      	movs	r2, #130	; 0x82
 8000f72:	2128      	movs	r1, #40	; 0x28
 8000f74:	485e      	ldr	r0, [pc, #376]	; (80010f0 <print_all_top_menu+0x1a8>)
 8000f76:	f7ff fb39 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[2], 40, 150, WHITE, 2, BLACK);
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	2302      	movs	r3, #2
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f86:	2296      	movs	r2, #150	; 0x96
 8000f88:	2128      	movs	r1, #40	; 0x28
 8000f8a:	485a      	ldr	r0, [pc, #360]	; (80010f4 <print_all_top_menu+0x1ac>)
 8000f8c:	f7ff fb2e 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[3], 40, 170, WHITE, 2, BLACK);
 8000f90:	2300      	movs	r3, #0
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	2302      	movs	r3, #2
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f9c:	22aa      	movs	r2, #170	; 0xaa
 8000f9e:	2128      	movs	r1, #40	; 0x28
 8000fa0:	4855      	ldr	r0, [pc, #340]	; (80010f8 <print_all_top_menu+0x1b0>)
 8000fa2:	f7ff fb23 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[4], 40, 190, WHITE, 2, BLACK);
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	2302      	movs	r3, #2
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb2:	22be      	movs	r2, #190	; 0xbe
 8000fb4:	2128      	movs	r1, #40	; 0x28
 8000fb6:	4851      	ldr	r0, [pc, #324]	; (80010fc <print_all_top_menu+0x1b4>)
 8000fb8:	f7ff fb18 	bl	80005ec <ILI9341_Draw_Text>

	//
	if(pointer_on_selected_menu <= 0)
 8000fbc:	4b50      	ldr	r3, [pc, #320]	; (8001100 <print_all_top_menu+0x1b8>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <print_all_top_menu+0x82>
	{
		pointer_on_selected_menu = 5;
 8000fc4:	4b4e      	ldr	r3, [pc, #312]	; (8001100 <print_all_top_menu+0x1b8>)
 8000fc6:	2205      	movs	r2, #5
 8000fc8:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 6)
 8000fca:	4b4d      	ldr	r3, [pc, #308]	; (8001100 <print_all_top_menu+0x1b8>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b05      	cmp	r3, #5
 8000fd0:	d902      	bls.n	8000fd8 <print_all_top_menu+0x90>
	{
		pointer_on_selected_menu = 1;
 8000fd2:	4b4b      	ldr	r3, [pc, #300]	; (8001100 <print_all_top_menu+0x1b8>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
	}
	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	2302      	movs	r3, #2
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fe4:	226e      	movs	r2, #110	; 0x6e
 8000fe6:	2105      	movs	r1, #5
 8000fe8:	4846      	ldr	r0, [pc, #280]	; (8001104 <print_all_top_menu+0x1bc>)
 8000fea:	f7ff faff 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8000fee:	2300      	movs	r3, #0
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ffa:	2282      	movs	r2, #130	; 0x82
 8000ffc:	2105      	movs	r1, #5
 8000ffe:	4841      	ldr	r0, [pc, #260]	; (8001104 <print_all_top_menu+0x1bc>)
 8001000:	f7ff faf4 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 8001004:	2300      	movs	r3, #0
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	2302      	movs	r3, #2
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001010:	2296      	movs	r2, #150	; 0x96
 8001012:	2105      	movs	r1, #5
 8001014:	483b      	ldr	r0, [pc, #236]	; (8001104 <print_all_top_menu+0x1bc>)
 8001016:	f7ff fae9 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 800101a:	2300      	movs	r3, #0
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	2302      	movs	r3, #2
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001026:	22aa      	movs	r2, #170	; 0xaa
 8001028:	2105      	movs	r1, #5
 800102a:	4836      	ldr	r0, [pc, #216]	; (8001104 <print_all_top_menu+0x1bc>)
 800102c:	f7ff fade 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 8001030:	2300      	movs	r3, #0
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	2302      	movs	r3, #2
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800103c:	22be      	movs	r2, #190	; 0xbe
 800103e:	2105      	movs	r1, #5
 8001040:	4830      	ldr	r0, [pc, #192]	; (8001104 <print_all_top_menu+0x1bc>)
 8001042:	f7ff fad3 	bl	80005ec <ILI9341_Draw_Text>

	// Point pointer on menu
	switch (pointer_on_selected_menu)
 8001046:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <print_all_top_menu+0x1b8>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	3b01      	subs	r3, #1
 800104c:	2b04      	cmp	r3, #4
 800104e:	d849      	bhi.n	80010e4 <print_all_top_menu+0x19c>
 8001050:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <print_all_top_menu+0x110>)
 8001052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001056:	bf00      	nop
 8001058:	0800106d 	.word	0x0800106d
 800105c:	08001085 	.word	0x08001085
 8001060:	0800109d 	.word	0x0800109d
 8001064:	080010b5 	.word	0x080010b5
 8001068:	080010cd 	.word	0x080010cd
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 800106c:	2300      	movs	r3, #0
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	2302      	movs	r3, #2
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001078:	226e      	movs	r2, #110	; 0x6e
 800107a:	2105      	movs	r1, #5
 800107c:	4822      	ldr	r0, [pc, #136]	; (8001108 <print_all_top_menu+0x1c0>)
 800107e:	f7ff fab5 	bl	80005ec <ILI9341_Draw_Text>
			break;
 8001082:	e02f      	b.n	80010e4 <print_all_top_menu+0x19c>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8001084:	2300      	movs	r3, #0
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	2302      	movs	r3, #2
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001090:	2282      	movs	r2, #130	; 0x82
 8001092:	2105      	movs	r1, #5
 8001094:	481c      	ldr	r0, [pc, #112]	; (8001108 <print_all_top_menu+0x1c0>)
 8001096:	f7ff faa9 	bl	80005ec <ILI9341_Draw_Text>
			break;
 800109a:	e023      	b.n	80010e4 <print_all_top_menu+0x19c>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 800109c:	2300      	movs	r3, #0
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	2302      	movs	r3, #2
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010a8:	2296      	movs	r2, #150	; 0x96
 80010aa:	2105      	movs	r1, #5
 80010ac:	4816      	ldr	r0, [pc, #88]	; (8001108 <print_all_top_menu+0x1c0>)
 80010ae:	f7ff fa9d 	bl	80005ec <ILI9341_Draw_Text>
			break;
 80010b2:	e017      	b.n	80010e4 <print_all_top_menu+0x19c>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 80010b4:	2300      	movs	r3, #0
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2302      	movs	r3, #2
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010c0:	22aa      	movs	r2, #170	; 0xaa
 80010c2:	2105      	movs	r1, #5
 80010c4:	4810      	ldr	r0, [pc, #64]	; (8001108 <print_all_top_menu+0x1c0>)
 80010c6:	f7ff fa91 	bl	80005ec <ILI9341_Draw_Text>
			break;
 80010ca:	e00b      	b.n	80010e4 <print_all_top_menu+0x19c>
		case 5:
			ILI9341_Draw_Text( "->", 5, 190, RED, 2, BLACK);
 80010cc:	2300      	movs	r3, #0
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	2302      	movs	r3, #2
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010d8:	22be      	movs	r2, #190	; 0xbe
 80010da:	2105      	movs	r1, #5
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <print_all_top_menu+0x1c0>)
 80010de:	f7ff fa85 	bl	80005ec <ILI9341_Draw_Text>
			break;
 80010e2:	bf00      	nop
	// 4. Вибраний menu_4 - Вивести біля нього значок що я на ньому

	//print_main_menus(&Menu_1);
	//print_main_menus(&Menu_2);
//	print_main_menus(&Menu_3);
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008
 80010f0:	2000001c 	.word	0x2000001c
 80010f4:	20000030 	.word	0x20000030
 80010f8:	20000044 	.word	0x20000044
 80010fc:	20000058 	.word	0x20000058
 8001100:	2000006c 	.word	0x2000006c
 8001104:	0800adac 	.word	0x0800adac
 8001108:	0800adb0 	.word	0x0800adb0

0800110c <RED_LED_ON>:
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------
void RED_LED_ON(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001116:	4802      	ldr	r0, [pc, #8]	; (8001120 <RED_LED_ON+0x14>)
 8001118:	f001 feb6 	bl	8002e88 <HAL_GPIO_WritePin>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40020c00 	.word	0x40020c00

08001124 <RED_LED_OFF>:
// -----------------------------------------------------------------------
void RED_LED_OFF(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800112e:	4802      	ldr	r0, [pc, #8]	; (8001138 <RED_LED_OFF+0x14>)
 8001130:	f001 feaa 	bl	8002e88 <HAL_GPIO_WritePin>
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40020c00 	.word	0x40020c00

0800113c <Level1Item3_Enter>:
// -----------------------------------------------------------------------
static void Level1Item3_Enter(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af02      	add	r7, sp, #8
 bool flagPressed = false;
 8001142:	2300      	movs	r3, #0
 8001144:	71fb      	strb	r3, [r7, #7]

 ILI9341_Draw_Text( "                          ", 10, 60, WHITE, 2, BLACK);   // Clearn lcd
 8001146:	2300      	movs	r3, #0
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	2302      	movs	r3, #2
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001152:	223c      	movs	r2, #60	; 0x3c
 8001154:	210a      	movs	r1, #10
 8001156:	4838      	ldr	r0, [pc, #224]	; (8001238 <Level1Item3_Enter+0xfc>)
 8001158:	f7ff fa48 	bl	80005ec <ILI9341_Draw_Text>

 ILI9341_Draw_Text( "Red LED is:", 10, 60, WHITE, 2, BLACK);
 800115c:	2300      	movs	r3, #0
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	2302      	movs	r3, #2
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001168:	223c      	movs	r2, #60	; 0x3c
 800116a:	210a      	movs	r1, #10
 800116c:	4833      	ldr	r0, [pc, #204]	; (800123c <Level1Item3_Enter+0x100>)
 800116e:	f7ff fa3d 	bl	80005ec <ILI9341_Draw_Text>

 while(getPressKey() != BUTTON_LEFT)
 8001172:	e049      	b.n	8001208 <Level1Item3_Enter+0xcc>
 {
	 // Read PIN
	 int led_status =  HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14);
 8001174:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001178:	4831      	ldr	r0, [pc, #196]	; (8001240 <Level1Item3_Enter+0x104>)
 800117a:	f001 fe6d 	bl	8002e58 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	603b      	str	r3, [r7, #0]

	 if(flagPressed == true)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d019      	beq.n	80011bc <Level1Item3_Enter+0x80>
	 {
		 if(led_status == GPIO_PIN_SET)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d10b      	bne.n	80011a6 <Level1Item3_Enter+0x6a>
		 {
			 ILI9341_Draw_Text( "ON ", 150, 60, WHITE, 2, BLACK);
 800118e:	2300      	movs	r3, #0
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	2302      	movs	r3, #2
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800119a:	223c      	movs	r2, #60	; 0x3c
 800119c:	2196      	movs	r1, #150	; 0x96
 800119e:	4829      	ldr	r0, [pc, #164]	; (8001244 <Level1Item3_Enter+0x108>)
 80011a0:	f7ff fa24 	bl	80005ec <ILI9341_Draw_Text>
 80011a4:	e00a      	b.n	80011bc <Level1Item3_Enter+0x80>
		 }
		 else
		 {
		 	 ILI9341_Draw_Text( "OFF", 150, 60, WHITE, 2, BLACK);
 80011a6:	2300      	movs	r3, #0
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	2302      	movs	r3, #2
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b2:	223c      	movs	r2, #60	; 0x3c
 80011b4:	2196      	movs	r1, #150	; 0x96
 80011b6:	4824      	ldr	r0, [pc, #144]	; (8001248 <Level1Item3_Enter+0x10c>)
 80011b8:	f7ff fa18 	bl	80005ec <ILI9341_Draw_Text>
		 }
	 }


	 if(getPressKey() != BUTTON_NOTHING && !flagPressed)
 80011bc:	f000 f84a 	bl	8001254 <getPressKey>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2bff      	cmp	r3, #255	; 0xff
 80011c4:	d016      	beq.n	80011f4 <Level1Item3_Enter+0xb8>
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f083 0301 	eor.w	r3, r3, #1
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d010      	beq.n	80011f4 <Level1Item3_Enter+0xb8>
	 {
		 flagPressed = true;
 80011d2:	2301      	movs	r3, #1
 80011d4:	71fb      	strb	r3, [r7, #7]

		 switch(getPressKey())  // If press any key
 80011d6:	f000 f83d 	bl	8001254 <getPressKey>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d002      	beq.n	80011e6 <Level1Item3_Enter+0xaa>
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d003      	beq.n	80011ec <Level1Item3_Enter+0xb0>
	  	  		  break;
	  	  	  case BUTTON_DOWN:
	  	  		  RED_LED_OFF();
	  	  		  break;
	  	  	  default:
	  	  		  break;
 80011e4:	e005      	b.n	80011f2 <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_ON();
 80011e6:	f7ff ff91 	bl	800110c <RED_LED_ON>
	  	  		  break;
 80011ea:	e002      	b.n	80011f2 <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_OFF();
 80011ec:	f7ff ff9a 	bl	8001124 <RED_LED_OFF>
	  	  		  break;
 80011f0:	bf00      	nop
		 switch(getPressKey())  // If press any key
 80011f2:	e009      	b.n	8001208 <Level1Item3_Enter+0xcc>
		 }
	 }
	 else if(getPressKey() == BUTTON_NOTHING && flagPressed)
 80011f4:	f000 f82e 	bl	8001254 <getPressKey>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2bff      	cmp	r3, #255	; 0xff
 80011fc:	d104      	bne.n	8001208 <Level1Item3_Enter+0xcc>
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <Level1Item3_Enter+0xcc>
	 {
		 flagPressed = false; 	// if button was release
 8001204:	2300      	movs	r3, #0
 8001206:	71fb      	strb	r3, [r7, #7]
 while(getPressKey() != BUTTON_LEFT)
 8001208:	f000 f824 	bl	8001254 <getPressKey>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1b0      	bne.n	8001174 <Level1Item3_Enter+0x38>
	 }
 }

 ILI9341_Draw_Text( "                           ", 10, 60, WHITE, 2, BLACK); // Cleaning one row LCD
 8001212:	2300      	movs	r3, #0
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	2302      	movs	r3, #2
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800121e:	223c      	movs	r2, #60	; 0x3c
 8001220:	210a      	movs	r1, #10
 8001222:	480a      	ldr	r0, [pc, #40]	; (800124c <Level1Item3_Enter+0x110>)
 8001224:	f7ff f9e2 	bl	80005ec <ILI9341_Draw_Text>
 Menu_Navigate(&Menu_3);  // Back to menu 3
 8001228:	4809      	ldr	r0, [pc, #36]	; (8001250 <Level1Item3_Enter+0x114>)
 800122a:	f000 f8db 	bl	80013e4 <Menu_Navigate>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	0800adb4 	.word	0x0800adb4
 800123c:	0800add0 	.word	0x0800add0
 8001240:	40020c00 	.word	0x40020c00
 8001244:	0800addc 	.word	0x0800addc
 8001248:	0800ade0 	.word	0x0800ade0
 800124c:	0800ade4 	.word	0x0800ade4
 8001250:	0800b128 	.word	0x0800b128

08001254 <getPressKey>:
// -----------------------------------------------------------------------
static uint8_t getPressKey()		// 3x4 keyboard
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af02      	add	r7, sp, #8
	char digit = '\0';
 800125a:	2300      	movs	r3, #0
 800125c:	75fb      	strb	r3, [r7, #23]
	char buff_lcd[20] = "KEY: ";
 800125e:	4a48      	ldr	r2, [pc, #288]	; (8001380 <getPressKey+0x12c>)
 8001260:	463b      	mov	r3, r7
 8001262:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001266:	6018      	str	r0, [r3, #0]
 8001268:	3304      	adds	r3, #4
 800126a:	8019      	strh	r1, [r3, #0]
 800126c:	1dbb      	adds	r3, r7, #6
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	819a      	strh	r2, [r3, #12]
	digit = read_one_digit_from_keyboard();
 8001278:	f000 f96e 	bl	8001558 <read_one_digit_from_keyboard>
 800127c:	4603      	mov	r3, r0
 800127e:	75fb      	strb	r3, [r7, #23]
	switch(digit)
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	3b32      	subs	r3, #50	; 0x32
 8001284:	2b06      	cmp	r3, #6
 8001286:	d875      	bhi.n	8001374 <getPressKey+0x120>
 8001288:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <getPressKey+0x3c>)
 800128a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128e:	bf00      	nop
 8001290:	080012d5 	.word	0x080012d5
 8001294:	08001375 	.word	0x08001375
 8001298:	080012ad 	.word	0x080012ad
 800129c:	0800134d 	.word	0x0800134d
 80012a0:	08001325 	.word	0x08001325
 80012a4:	08001375 	.word	0x08001375
 80012a8:	080012fd 	.word	0x080012fd
	{
		case '4':
		{
			strncat(buff_lcd, &digit, 1);
 80012ac:	f107 0117 	add.w	r1, r7, #23
 80012b0:	463b      	mov	r3, r7
 80012b2:	2201      	movs	r2, #1
 80012b4:	4618      	mov	r0, r3
 80012b6:	f009 fd4b 	bl	800ad50 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80012ba:	4638      	mov	r0, r7
 80012bc:	2300      	movs	r3, #0
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	2302      	movs	r3, #2
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	f7ff f98e 	bl	80005ec <ILI9341_Draw_Text>
			return BUTTON_LEFT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	e050      	b.n	8001376 <getPressKey+0x122>
		}
		case '2':
		{
			strncat(buff_lcd, &digit, 1);
 80012d4:	f107 0117 	add.w	r1, r7, #23
 80012d8:	463b      	mov	r3, r7
 80012da:	2201      	movs	r2, #1
 80012dc:	4618      	mov	r0, r3
 80012de:	f009 fd37 	bl	800ad50 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80012e2:	4638      	mov	r0, r7
 80012e4:	2300      	movs	r3, #0
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	2302      	movs	r3, #2
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	f7ff f97a 	bl	80005ec <ILI9341_Draw_Text>
			return BUTTON_UP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e03c      	b.n	8001376 <getPressKey+0x122>
		}
		case '8':
		{
			strncat(buff_lcd, &digit, 1);
 80012fc:	f107 0117 	add.w	r1, r7, #23
 8001300:	463b      	mov	r3, r7
 8001302:	2201      	movs	r2, #1
 8001304:	4618      	mov	r0, r3
 8001306:	f009 fd23 	bl	800ad50 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 800130a:	4638      	mov	r0, r7
 800130c:	2300      	movs	r3, #0
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	2302      	movs	r3, #2
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001318:	2200      	movs	r2, #0
 800131a:	2100      	movs	r1, #0
 800131c:	f7ff f966 	bl	80005ec <ILI9341_Draw_Text>
			return BUTTON_DOWN;
 8001320:	2302      	movs	r3, #2
 8001322:	e028      	b.n	8001376 <getPressKey+0x122>
		}
		case '6':
		{
			strncat(buff_lcd, &digit, 1);
 8001324:	f107 0117 	add.w	r1, r7, #23
 8001328:	463b      	mov	r3, r7
 800132a:	2201      	movs	r2, #1
 800132c:	4618      	mov	r0, r3
 800132e:	f009 fd0f 	bl	800ad50 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8001332:	4638      	mov	r0, r7
 8001334:	2300      	movs	r3, #0
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	2302      	movs	r3, #2
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	f7ff f952 	bl	80005ec <ILI9341_Draw_Text>
			return BUTTON_RIGHT;
 8001348:	2303      	movs	r3, #3
 800134a:	e014      	b.n	8001376 <getPressKey+0x122>
		}
		case '5':
		{
			strncat(buff_lcd, &digit, 1);
 800134c:	f107 0117 	add.w	r1, r7, #23
 8001350:	463b      	mov	r3, r7
 8001352:	2201      	movs	r2, #1
 8001354:	4618      	mov	r0, r3
 8001356:	f009 fcfb 	bl	800ad50 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 800135a:	4638      	mov	r0, r7
 800135c:	2300      	movs	r3, #0
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	2302      	movs	r3, #2
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	f7ff f93e 	bl	80005ec <ILI9341_Draw_Text>
			return BUTTON_SELECT;
 8001370:	2304      	movs	r3, #4
 8001372:	e000      	b.n	8001376 <getPressKey+0x122>
		}
		default:
			return BUTTON_NOTHING;
 8001374:	23ff      	movs	r3, #255	; 0xff
			break;


	}
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	0800ae00 	.word	0x0800ae00

08001384 <Generic_Write>:
// -----------------------------------------------------------------------
void Generic_Write(const char* Text)		// Print "Text" data on LCD
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af02      	add	r7, sp, #8
 800138a:	6078      	str	r0, [r7, #4]
	if (Text)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d015      	beq.n	80013be <Generic_Write+0x3a>
	{
		ILI9341_Draw_Text( "                   ", 10, 60, WHITE, 2, BLACK);
 8001392:	2300      	movs	r3, #0
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	2302      	movs	r3, #2
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800139e:	223c      	movs	r2, #60	; 0x3c
 80013a0:	210a      	movs	r1, #10
 80013a2:	4809      	ldr	r0, [pc, #36]	; (80013c8 <Generic_Write+0x44>)
 80013a4:	f7ff f922 	bl	80005ec <ILI9341_Draw_Text>
		ILI9341_Draw_Text( Text, 10, 60, WHITE, 2, BLACK);
 80013a8:	2300      	movs	r3, #0
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	2302      	movs	r3, #2
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b4:	223c      	movs	r2, #60	; 0x3c
 80013b6:	210a      	movs	r1, #10
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff f917 	bl	80005ec <ILI9341_Draw_Text>
	}
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	0800ae14 	.word	0x0800ae14

080013cc <Menu_GetCurrentMenu>:
// -----------------------------------------------------------------------
Menu_Item_t* Menu_GetCurrentMenu(void)		// Повертає поточни вибраний пункт меню
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	return CurrentMenuItem;
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <Menu_GetCurrentMenu+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000004 	.word	0x20000004

080013e4 <Menu_Navigate>:
// -----------------------------------------------------------------------
// Переходи по меню
// in: ПОказник на апсолютний пункт меню, для вибору
// MENU_PARENT, MENU_CHILD, MENU_NEXT або  MENU_PREVIOUS
void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))  // What it mean???
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a11      	ldr	r2, [pc, #68]	; (8001434 <Menu_Navigate+0x50>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d01a      	beq.n	800142a <Menu_Navigate+0x46>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d017      	beq.n	800142a <Menu_Navigate+0x46>
	{
		return;		// Exit
	}

	CurrentMenuItem = NewMenu;    // Передане маню стає вибране
 80013fa:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <Menu_Navigate+0x54>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6013      	str	r3, [r2, #0]

	if (MenuWriteFunc)    // If   MenuWriteFunc  != NULL  ???????
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <Menu_Navigate+0x58>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d006      	beq.n	8001416 <Menu_Navigate+0x32>
	{
		MenuWriteFunc(CurrentMenuItem->Text);			// Print Text string on LCD
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <Menu_Navigate+0x58>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <Menu_Navigate+0x54>)
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	3218      	adds	r2, #24
 8001412:	4610      	mov	r0, r2
 8001414:	4798      	blx	r3
	}

	//   void (*SelectCallback)(void) - Creating pointer on function
	// Write  CurrentMenuItem->SelectCallback in  void (*SelectCallback)(void) pinter
	void (*SelectCallback)(void) = CurrentMenuItem->SelectCallback;
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <Menu_Navigate+0x54>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	60fb      	str	r3, [r7, #12]

	if (SelectCallback)		// If SelectCallback != NULL
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <Menu_Navigate+0x48>
	{
		SelectCallback();   // It does - CurrentMenuItem->SelectCallback;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4798      	blx	r3
 8001428:	e000      	b.n	800142c <Menu_Navigate+0x48>
		return;		// Exit
 800142a:	bf00      	nop
	}
}
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	0800b0d0 	.word	0x0800b0d0
 8001438:	20000004 	.word	0x20000004
 800143c:	20000120 	.word	0x20000120

08001440 <Menu_SetGenericWriteCallback>:
 пунктів меню. В рамках цієї функції зворотного виклику користувач повинен
 реалізувати код для відображення поточного тексту меню, що зберігається
 в  ref MENU_ITEM_STORAGE пам'яті.. */
// In: вказівник на функцію зворотного виклику для виконання кожного вибраного пункту меню.
void Menu_SetGenericWriteCallback(void (*WriteFunc)(const char* Text))    //  What doing this function??????? <<<<<<<<<<<
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	MenuWriteFunc = WriteFunc;  		// Запис показника функції WriteFunc в
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <Menu_SetGenericWriteCallback+0x20>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
	//  показник на функцію під назвою MenuWriteFunc
	Menu_Navigate(CurrentMenuItem);      // Передача цього показника в функцію Menu_Navigate
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <Menu_SetGenericWriteCallback+0x24>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ffc6 	bl	80013e4 <Menu_Navigate>
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000120 	.word	0x20000120
 8001464:	20000004 	.word	0x20000004

08001468 <Menu_EnterCurrentItem>:
// -----------------------------------------------------------------------
/* Функція входить у вибраний на даний момент пункт меню, виконуючи налаштовану
   функцію зворотного дзвінка (якщо така є) */
void Menu_EnterCurrentItem(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <Menu_EnterCurrentItem+0x34>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <Menu_EnterCurrentItem+0x38>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d00d      	beq.n	8001494 <Menu_EnterCurrentItem+0x2c>
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <Menu_EnterCurrentItem+0x34>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d009      	beq.n	8001494 <Menu_EnterCurrentItem+0x2c>
	{
		return;
	}

	void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <Menu_EnterCurrentItem+0x34>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	607b      	str	r3, [r7, #4]
	if (EnterCallback)		// If EnterCallback != NULL
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <Menu_EnterCurrentItem+0x2e>
	{
		EnterCallback();
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4798      	blx	r3
 8001492:	e000      	b.n	8001496 <Menu_EnterCurrentItem+0x2e>
		return;
 8001494:	bf00      	nop
	}

}// -----------------------------------------------------------------------
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000004 	.word	0x20000004
 80014a0:	0800b0d0 	.word	0x0800b0d0

080014a4 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
	char digith = 0;;
 80014aa:	2300      	movs	r3, #0
 80014ac:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 80014ae:	f000 f853 	bl	8001558 <read_one_digit_from_keyboard>
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b23      	cmp	r3, #35	; 0x23
 80014ba:	d10a      	bne.n	80014d2 <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 80014bc:	221e      	movs	r2, #30
 80014be:	2100      	movs	r1, #0
 80014c0:	4824      	ldr	r0, [pc, #144]	; (8001554 <read_digits+0xb0>)
 80014c2:	f009 fb83 	bl	800abcc <memset>
		keyboard.read_digits_position = 0;
 80014c6:	4b23      	ldr	r3, [pc, #140]	; (8001554 <read_digits+0xb0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <read_digits+0xb0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b2a      	cmp	r3, #42	; 0x2a
 80014d6:	d109      	bne.n	80014ec <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <read_digits+0xb0>)
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <read_digits+0xb0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <read_digits+0xb0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d028      	beq.n	8001544 <read_digits+0xa0>
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b23      	cmp	r3, #35	; 0x23
 80014f6:	d025      	beq.n	8001544 <read_digits+0xa0>
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	2b2a      	cmp	r3, #42	; 0x2a
 80014fc:	d022      	beq.n	8001544 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <read_digits+0xb0>)
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	4a14      	ldr	r2, [pc, #80]	; (8001554 <read_digits+0xb0>)
 8001504:	7f92      	ldrb	r2, [r2, #30]
 8001506:	4293      	cmp	r3, r2
 8001508:	dc11      	bgt.n	800152e <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <read_digits+0xb0>)
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	4911      	ldr	r1, [pc, #68]	; (8001554 <read_digits+0xb0>)
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <read_digits+0xb0>)
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	3301      	adds	r3, #1
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <read_digits+0xb0>)
 800151c:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <read_digits+0xb0>)
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <read_digits+0xb0>)
 8001528:	2201      	movs	r2, #1
 800152a:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800152c:	e00e      	b.n	800154c <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <read_digits+0xb0>)
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <read_digits+0xb0>)
 8001538:	2200      	movs	r2, #0
 800153a:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <read_digits+0xb0>)
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8001542:	e003      	b.n	800154c <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <read_digits+0xb0>)
 8001546:	2200      	movs	r2, #0
 8001548:	77da      	strb	r2, [r3, #31]
	}
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	2000013c 	.word	0x2000013c

08001558 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
	char digit = '\0';
 800155e:	2300      	movs	r3, #0
 8001560:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001568:	48cf      	ldr	r0, [pc, #828]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 800156a:	f001 fc8d 	bl	8002e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001574:	48cc      	ldr	r0, [pc, #816]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 8001576:	f001 fc87 	bl	8002e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001580:	48c9      	ldr	r0, [pc, #804]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 8001582:	f001 fc81 	bl	8002e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158c:	48c6      	ldr	r0, [pc, #792]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 800158e:	f001 fc7b 	bl	8002e88 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001596:	48c5      	ldr	r0, [pc, #788]	; (80018ac <read_one_digit_from_keyboard+0x354>)
 8001598:	f001 fc5e 	bl	8002e58 <HAL_GPIO_ReadPin>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d169      	bne.n	8001676 <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a8:	48bf      	ldr	r0, [pc, #764]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80015aa:	f001 fc6d 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b4:	48bc      	ldr	r0, [pc, #752]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80015b6:	f001 fc67 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c0:	48b9      	ldr	r0, [pc, #740]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80015c2:	f001 fc61 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015cc:	48b6      	ldr	r0, [pc, #728]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80015ce:	f001 fc5b 	bl	8002e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80015d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d6:	48b5      	ldr	r0, [pc, #724]	; (80018ac <read_one_digit_from_keyboard+0x354>)
 80015d8:	f001 fc3e 	bl	8002e58 <HAL_GPIO_ReadPin>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 80015e2:	2331      	movs	r3, #49	; 0x31
 80015e4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80015e6:	2201      	movs	r2, #1
 80015e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ec:	48ae      	ldr	r0, [pc, #696]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80015ee:	f001 fc4b 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f8:	48ab      	ldr	r0, [pc, #684]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80015fa:	f001 fc45 	bl	8002e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80015fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001602:	48aa      	ldr	r0, [pc, #680]	; (80018ac <read_one_digit_from_keyboard+0x354>)
 8001604:	f001 fc28 	bl	8002e58 <HAL_GPIO_ReadPin>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 800160e:	2334      	movs	r3, #52	; 0x34
 8001610:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001612:	2201      	movs	r2, #1
 8001614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001618:	48a3      	ldr	r0, [pc, #652]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 800161a:	f001 fc35 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001624:	48a0      	ldr	r0, [pc, #640]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 8001626:	f001 fc2f 	bl	8002e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800162a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800162e:	489f      	ldr	r0, [pc, #636]	; (80018ac <read_one_digit_from_keyboard+0x354>)
 8001630:	f001 fc12 	bl	8002e58 <HAL_GPIO_ReadPin>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 800163a:	2337      	movs	r3, #55	; 0x37
 800163c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800163e:	2201      	movs	r2, #1
 8001640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001644:	4898      	ldr	r0, [pc, #608]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 8001646:	f001 fc1f 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001650:	4895      	ldr	r0, [pc, #596]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 8001652:	f001 fc19 	bl	8002e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800165a:	4894      	ldr	r0, [pc, #592]	; (80018ac <read_one_digit_from_keyboard+0x354>)
 800165c:	f001 fbfc 	bl	8002e58 <HAL_GPIO_ReadPin>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 8001666:	232a      	movs	r3, #42	; 0x2a
 8001668:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800166a:	2201      	movs	r2, #1
 800166c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001670:	488d      	ldr	r0, [pc, #564]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 8001672:	f001 fc09 	bl	8002e88 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800167c:	488a      	ldr	r0, [pc, #552]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 800167e:	f001 fc03 	bl	8002e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001688:	4887      	ldr	r0, [pc, #540]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 800168a:	f001 fbfd 	bl	8002e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001694:	4884      	ldr	r0, [pc, #528]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 8001696:	f001 fbf7 	bl	8002e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	4881      	ldr	r0, [pc, #516]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80016a2:	f001 fbf1 	bl	8002e88 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 80016a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016aa:	4880      	ldr	r0, [pc, #512]	; (80018ac <read_one_digit_from_keyboard+0x354>)
 80016ac:	f001 fbd4 	bl	8002e58 <HAL_GPIO_ReadPin>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d169      	bne.n	800178a <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016bc:	487a      	ldr	r0, [pc, #488]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80016be:	f001 fbe3 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c8:	4877      	ldr	r0, [pc, #476]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80016ca:	f001 fbdd 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80016ce:	2201      	movs	r2, #1
 80016d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d4:	4874      	ldr	r0, [pc, #464]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80016d6:	f001 fbd7 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e0:	4871      	ldr	r0, [pc, #452]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80016e2:	f001 fbd1 	bl	8002e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80016e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ea:	4870      	ldr	r0, [pc, #448]	; (80018ac <read_one_digit_from_keyboard+0x354>)
 80016ec:	f001 fbb4 	bl	8002e58 <HAL_GPIO_ReadPin>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 80016f6:	2332      	movs	r3, #50	; 0x32
 80016f8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80016fa:	2201      	movs	r2, #1
 80016fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001700:	4869      	ldr	r0, [pc, #420]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 8001702:	f001 fbc1 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800170c:	4866      	ldr	r0, [pc, #408]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 800170e:	f001 fbbb 	bl	8002e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001716:	4865      	ldr	r0, [pc, #404]	; (80018ac <read_one_digit_from_keyboard+0x354>)
 8001718:	f001 fb9e 	bl	8002e58 <HAL_GPIO_ReadPin>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 8001722:	2335      	movs	r3, #53	; 0x35
 8001724:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800172c:	485e      	ldr	r0, [pc, #376]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 800172e:	f001 fbab 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001738:	485b      	ldr	r0, [pc, #364]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 800173a:	f001 fba5 	bl	8002e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800173e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001742:	485a      	ldr	r0, [pc, #360]	; (80018ac <read_one_digit_from_keyboard+0x354>)
 8001744:	f001 fb88 	bl	8002e58 <HAL_GPIO_ReadPin>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 800174e:	2338      	movs	r3, #56	; 0x38
 8001750:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001758:	4853      	ldr	r0, [pc, #332]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 800175a:	f001 fb95 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001764:	4850      	ldr	r0, [pc, #320]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 8001766:	f001 fb8f 	bl	8002e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800176a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176e:	484f      	ldr	r0, [pc, #316]	; (80018ac <read_one_digit_from_keyboard+0x354>)
 8001770:	f001 fb72 	bl	8002e58 <HAL_GPIO_ReadPin>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 800177a:	2330      	movs	r3, #48	; 0x30
 800177c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001784:	4848      	ldr	r0, [pc, #288]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 8001786:	f001 fb7f 	bl	8002e88 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001790:	4845      	ldr	r0, [pc, #276]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 8001792:	f001 fb79 	bl	8002e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800179c:	4842      	ldr	r0, [pc, #264]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 800179e:	f001 fb73 	bl	8002e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017a8:	483f      	ldr	r0, [pc, #252]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80017aa:	f001 fb6d 	bl	8002e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b4:	483c      	ldr	r0, [pc, #240]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80017b6:	f001 fb67 	bl	8002e88 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №
 80017ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017be:	483b      	ldr	r0, [pc, #236]	; (80018ac <read_one_digit_from_keyboard+0x354>)
 80017c0:	f001 fb4a 	bl	8002e58 <HAL_GPIO_ReadPin>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d169      	bne.n	800189e <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017d0:	4835      	ldr	r0, [pc, #212]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80017d2:	f001 fb59 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80017d6:	2201      	movs	r2, #1
 80017d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017dc:	4832      	ldr	r0, [pc, #200]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80017de:	f001 fb53 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80017e2:	2201      	movs	r2, #1
 80017e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e8:	482f      	ldr	r0, [pc, #188]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80017ea:	f001 fb4d 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80017ee:	2201      	movs	r2, #1
 80017f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f4:	482c      	ldr	r0, [pc, #176]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 80017f6:	f001 fb47 	bl	8002e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80017fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017fe:	482b      	ldr	r0, [pc, #172]	; (80018ac <read_one_digit_from_keyboard+0x354>)
 8001800:	f001 fb2a 	bl	8002e58 <HAL_GPIO_ReadPin>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 800180a:	2333      	movs	r3, #51	; 0x33
 800180c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001814:	4824      	ldr	r0, [pc, #144]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 8001816:	f001 fb37 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001820:	4821      	ldr	r0, [pc, #132]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 8001822:	f001 fb31 	bl	8002e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001826:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800182a:	4820      	ldr	r0, [pc, #128]	; (80018ac <read_one_digit_from_keyboard+0x354>)
 800182c:	f001 fb14 	bl	8002e58 <HAL_GPIO_ReadPin>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 8001836:	2336      	movs	r3, #54	; 0x36
 8001838:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800183a:	2201      	movs	r2, #1
 800183c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001840:	4819      	ldr	r0, [pc, #100]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 8001842:	f001 fb21 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	f44f 7100 	mov.w	r1, #512	; 0x200
 800184c:	4816      	ldr	r0, [pc, #88]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 800184e:	f001 fb1b 	bl	8002e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001856:	4815      	ldr	r0, [pc, #84]	; (80018ac <read_one_digit_from_keyboard+0x354>)
 8001858:	f001 fafe 	bl	8002e58 <HAL_GPIO_ReadPin>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 8001862:	2339      	movs	r3, #57	; 0x39
 8001864:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001866:	2201      	movs	r2, #1
 8001868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800186c:	480e      	ldr	r0, [pc, #56]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 800186e:	f001 fb0b 	bl	8002e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001878:	480b      	ldr	r0, [pc, #44]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 800187a:	f001 fb05 	bl	8002e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800187e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001882:	480a      	ldr	r0, [pc, #40]	; (80018ac <read_one_digit_from_keyboard+0x354>)
 8001884:	f001 fae8 	bl	8002e58 <HAL_GPIO_ReadPin>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 800188e:	2323      	movs	r3, #35	; 0x23
 8001890:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001892:	2201      	movs	r2, #1
 8001894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001898:	4803      	ldr	r0, [pc, #12]	; (80018a8 <read_one_digit_from_keyboard+0x350>)
 800189a:	f001 faf5 	bl	8002e88 <HAL_GPIO_WritePin>
	}
	return digit;
 800189e:	79fb      	ldrb	r3, [r7, #7]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40020c00 	.word	0x40020c00
 80018ac:	40020400 	.word	0x40020400

080018b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b6:	f000 ff8b 	bl	80027d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ba:	f000 f839 	bl	8001930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018be:	f000 fabd 	bl	8001e3c <MX_GPIO_Init>
  MX_I2S3_Init();
 80018c2:	f000 f8f1 	bl	8001aa8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80018c6:	f000 f933 	bl	8001b30 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80018ca:	f008 fe3d 	bl	800a548 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80018ce:	f000 f9f3 	bl	8001cb8 <MX_TIM2_Init>
  MX_SPI2_Init();
 80018d2:	f000 f963 	bl	8001b9c <MX_SPI2_Init>
  MX_RNG_Init();
 80018d6:	f000 f917 	bl	8001b08 <MX_RNG_Init>
  MX_TIM3_Init();
 80018da:	f000 fa3b 	bl	8001d54 <MX_TIM3_Init>
  MX_TIM1_Init();
 80018de:	f000 f993 	bl	8001c08 <MX_TIM1_Init>
  MX_I2C3_Init();
 80018e2:	f000 f8b3 	bl	8001a4c <MX_I2C3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80018e6:	f000 f8a5 	bl	8001a34 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80018ea:	f7fe ffcd 	bl	8000888 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff f970 	bl	8000bd4 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 80018f4:	2003      	movs	r0, #3
 80018f6:	f7fe ff69 	bl	80007cc <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f7ff f96a 	bl	8000bd4 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 8001900:	2364      	movs	r3, #100	; 0x64
 8001902:	607b      	str	r3, [r7, #4]
  //speed_test_LCD(number_of_tests);

  ILI9341_Fill_Screen(BLACK);
 8001904:	2000      	movs	r0, #0
 8001906:	f7ff f965 	bl	8000bd4 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 800190a:	4807      	ldr	r0, [pc, #28]	; (8001928 <main+0x78>)
 800190c:	f004 fee2 	bl	80066d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001910:	2100      	movs	r1, #0
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <main+0x78>)
 8001914:	f004 ff4e 	bl	80067b4 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <main+0x7c>)
 800191a:	220a      	movs	r2, #10
 800191c:	779a      	strb	r2, [r3, #30]
  ////////////////////////////////////////////////////
  while (1)
  {
	  /////////////////////////////////////////////////////////////////

	 menu();
 800191e:	f7ff faa3 	bl	8000e68 <menu>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001922:	f008 fe37 	bl	800a594 <MX_USB_HOST_Process>
	 menu();
 8001926:	e7fa      	b.n	800191e <main+0x6e>
 8001928:	20000210 	.word	0x20000210
 800192c:	2000013c 	.word	0x2000013c

08001930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b098      	sub	sp, #96	; 0x60
 8001934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001936:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800193a:	2230      	movs	r2, #48	; 0x30
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f009 f944 	bl	800abcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	4b31      	ldr	r3, [pc, #196]	; (8001a2c <SystemClock_Config+0xfc>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a30      	ldr	r2, [pc, #192]	; (8001a2c <SystemClock_Config+0xfc>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	4b2e      	ldr	r3, [pc, #184]	; (8001a2c <SystemClock_Config+0xfc>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <SystemClock_Config+0x100>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a2a      	ldr	r2, [pc, #168]	; (8001a30 <SystemClock_Config+0x100>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <SystemClock_Config+0x100>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800199a:	2301      	movs	r3, #1
 800199c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800199e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a4:	2302      	movs	r3, #2
 80019a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019ae:	2308      	movs	r3, #8
 80019b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019b2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019b6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019b8:	2302      	movs	r3, #2
 80019ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019bc:	2307      	movs	r3, #7
 80019be:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 fddb 	bl	8005580 <HAL_RCC_OscConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80019d0:	f000 fbae 	bl	8002130 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d4:	230f      	movs	r3, #15
 80019d6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d8:	2302      	movs	r3, #2
 80019da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	2105      	movs	r1, #5
 80019f2:	4618      	mov	r0, r3
 80019f4:	f004 f83c 	bl	8005a70 <HAL_RCC_ClockConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80019fe:	f000 fb97 	bl	8002130 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001a02:	2301      	movs	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001a06:	23c0      	movs	r3, #192	; 0xc0
 8001a08:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4618      	mov	r0, r3
 8001a14:	f004 fa14 	bl	8005e40 <HAL_RCCEx_PeriphCLKConfig>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001a1e:	f000 fb87 	bl	8002130 <Error_Handler>
  }
}
 8001a22:	bf00      	nop
 8001a24:	3760      	adds	r7, #96	; 0x60
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40007000 	.word	0x40007000

08001a34 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	201c      	movs	r0, #28
 8001a3e:	f001 f838 	bl	8002ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a42:	201c      	movs	r0, #28
 8001a44:	f001 f851 	bl	8002aea <HAL_NVIC_EnableIRQ>
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <MX_I2C3_Init+0x50>)
 8001a52:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <MX_I2C3_Init+0x54>)
 8001a54:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_I2C3_Init+0x50>)
 8001a58:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <MX_I2C3_Init+0x58>)
 8001a5a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <MX_I2C3_Init+0x50>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_I2C3_Init+0x50>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <MX_I2C3_Init+0x50>)
 8001a6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a6e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <MX_I2C3_Init+0x50>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MX_I2C3_Init+0x50>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <MX_I2C3_Init+0x50>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_I2C3_Init+0x50>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a88:	4804      	ldr	r0, [pc, #16]	; (8001a9c <MX_I2C3_Init+0x50>)
 8001a8a:	f002 ff95 	bl	80049b8 <HAL_I2C_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a94:	f000 fb4c 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000164 	.word	0x20000164
 8001aa0:	40005c00 	.word	0x40005c00
 8001aa4:	000186a0 	.word	0x000186a0

08001aa8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <MX_I2S3_Init+0x54>)
 8001aae:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <MX_I2S3_Init+0x58>)
 8001ab0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <MX_I2S3_Init+0x54>)
 8001ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <MX_I2S3_Init+0x54>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_I2S3_Init+0x54>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <MX_I2S3_Init+0x54>)
 8001ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001acc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <MX_I2S3_Init+0x54>)
 8001ad0:	4a0c      	ldr	r2, [pc, #48]	; (8001b04 <MX_I2S3_Init+0x5c>)
 8001ad2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_I2S3_Init+0x54>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <MX_I2S3_Init+0x54>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_I2S3_Init+0x54>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_I2S3_Init+0x54>)
 8001ae8:	f003 f8aa 	bl	8004c40 <HAL_I2S_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001af2:	f000 fb1d 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000350 	.word	0x20000350
 8001b00:	40003c00 	.word	0x40003c00
 8001b04:	00017700 	.word	0x00017700

08001b08 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <MX_RNG_Init+0x20>)
 8001b0e:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <MX_RNG_Init+0x24>)
 8001b10:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001b12:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_RNG_Init+0x20>)
 8001b14:	f004 fad4 	bl	80060c0 <HAL_RNG_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001b1e:	f000 fb07 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200002a0 	.word	0x200002a0
 8001b2c:	50060800 	.word	0x50060800

08001b30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b34:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <MX_SPI1_Init+0x64>)
 8001b36:	4a18      	ldr	r2, [pc, #96]	; (8001b98 <MX_SPI1_Init+0x68>)
 8001b38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b3a:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <MX_SPI1_Init+0x64>)
 8001b3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <MX_SPI1_Init+0x64>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <MX_SPI1_Init+0x64>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_SPI1_Init+0x64>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <MX_SPI1_Init+0x64>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <MX_SPI1_Init+0x64>)
 8001b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <MX_SPI1_Init+0x64>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <MX_SPI1_Init+0x64>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <MX_SPI1_Init+0x64>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b74:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <MX_SPI1_Init+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <MX_SPI1_Init+0x64>)
 8001b7c:	220a      	movs	r2, #10
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b80:	4804      	ldr	r0, [pc, #16]	; (8001b94 <MX_SPI1_Init+0x64>)
 8001b82:	f004 fac7 	bl	8006114 <HAL_SPI_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b8c:	f000 fad0 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200002b0 	.word	0x200002b0
 8001b98:	40013000 	.word	0x40013000

08001b9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001ba2:	4a18      	ldr	r2, [pc, #96]	; (8001c04 <MX_SPI2_Init+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bcc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001be8:	220a      	movs	r2, #10
 8001bea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bee:	f004 fa91 	bl	8006114 <HAL_SPI_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001bf8:	f000 fa9a 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200001b8 	.word	0x200001b8
 8001c04:	40003800 	.word	0x40003800

08001c08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08c      	sub	sp, #48	; 0x30
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	2224      	movs	r2, #36	; 0x24
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f008 ffd8 	bl	800abcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c24:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <MX_TIM1_Init+0xa8>)
 8001c26:	4a23      	ldr	r2, [pc, #140]	; (8001cb4 <MX_TIM1_Init+0xac>)
 8001c28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c2a:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <MX_TIM1_Init+0xa8>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c30:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <MX_TIM1_Init+0xa8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <MX_TIM1_Init+0xa8>)
 8001c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3e:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <MX_TIM1_Init+0xa8>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <MX_TIM1_Init+0xa8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <MX_TIM1_Init+0xa8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c50:	2301      	movs	r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <MX_TIM1_Init+0xa8>)
 8001c7c:	f004 ff01 	bl	8006a82 <HAL_TIM_Encoder_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001c86:	f000 fa53 	bl	8002130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <MX_TIM1_Init+0xa8>)
 8001c98:	f005 fd66 	bl	8007768 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001ca2:	f000 fa45 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	3730      	adds	r7, #48	; 0x30
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000258 	.word	0x20000258
 8001cb4:	40010000 	.word	0x40010000

08001cb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ccc:	463b      	mov	r3, r7
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <MX_TIM2_Init+0x98>)
 8001cd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <MX_TIM2_Init+0x98>)
 8001cde:	f240 3247 	movw	r2, #839	; 0x347
 8001ce2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <MX_TIM2_Init+0x98>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <MX_TIM2_Init+0x98>)
 8001cec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001cf0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <MX_TIM2_Init+0x98>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <MX_TIM2_Init+0x98>)
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cfe:	4814      	ldr	r0, [pc, #80]	; (8001d50 <MX_TIM2_Init+0x98>)
 8001d00:	f004 fc98 	bl	8006634 <HAL_TIM_Base_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d0a:	f000 fa11 	bl	8002130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d14:	f107 0308 	add.w	r3, r7, #8
 8001d18:	4619      	mov	r1, r3
 8001d1a:	480d      	ldr	r0, [pc, #52]	; (8001d50 <MX_TIM2_Init+0x98>)
 8001d1c:	f005 f91e 	bl	8006f5c <HAL_TIM_ConfigClockSource>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d26:	f000 fa03 	bl	8002130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001d2a:	2310      	movs	r3, #16
 8001d2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d32:	463b      	mov	r3, r7
 8001d34:	4619      	mov	r1, r3
 8001d36:	4806      	ldr	r0, [pc, #24]	; (8001d50 <MX_TIM2_Init+0x98>)
 8001d38:	f005 fd16 	bl	8007768 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d42:	f000 f9f5 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000308 	.word	0x20000308

08001d54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08e      	sub	sp, #56	; 0x38
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d68:	f107 0320 	add.w	r3, r7, #32
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
 8001d80:	615a      	str	r2, [r3, #20]
 8001d82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d84:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <MX_TIM3_Init+0xe0>)
 8001d86:	4a2c      	ldr	r2, [pc, #176]	; (8001e38 <MX_TIM3_Init+0xe4>)
 8001d88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <MX_TIM3_Init+0xe0>)
 8001d8c:	f640 0233 	movw	r2, #2099	; 0x833
 8001d90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d92:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <MX_TIM3_Init+0xe0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001d98:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <MX_TIM3_Init+0xe0>)
 8001d9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <MX_TIM3_Init+0xe0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <MX_TIM3_Init+0xe0>)
 8001da8:	2280      	movs	r2, #128	; 0x80
 8001daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dac:	4821      	ldr	r0, [pc, #132]	; (8001e34 <MX_TIM3_Init+0xe0>)
 8001dae:	f004 fc41 	bl	8006634 <HAL_TIM_Base_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001db8:	f000 f9ba 	bl	8002130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	481a      	ldr	r0, [pc, #104]	; (8001e34 <MX_TIM3_Init+0xe0>)
 8001dca:	f005 f8c7 	bl	8006f5c <HAL_TIM_ConfigClockSource>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001dd4:	f000 f9ac 	bl	8002130 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dd8:	4816      	ldr	r0, [pc, #88]	; (8001e34 <MX_TIM3_Init+0xe0>)
 8001dda:	f004 fdf9 	bl	80069d0 <HAL_TIM_PWM_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001de4:	f000 f9a4 	bl	8002130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001df0:	f107 0320 	add.w	r3, r7, #32
 8001df4:	4619      	mov	r1, r3
 8001df6:	480f      	ldr	r0, [pc, #60]	; (8001e34 <MX_TIM3_Init+0xe0>)
 8001df8:	f005 fcb6 	bl	8007768 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001e02:	f000 f995 	bl	8002130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e06:	2360      	movs	r3, #96	; 0x60
 8001e08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_TIM3_Init+0xe0>)
 8001e1e:	f004 ffdf 	bl	8006de0 <HAL_TIM_PWM_ConfigChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001e28:	f000 f982 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e2c:	bf00      	nop
 8001e2e:	3738      	adds	r7, #56	; 0x38
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000210 	.word	0x20000210
 8001e38:	40000400 	.word	0x40000400

08001e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	; 0x30
 8001e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e42:	f107 031c 	add.w	r3, r7, #28
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	4baf      	ldr	r3, [pc, #700]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4aae      	ldr	r2, [pc, #696]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001e5c:	f043 0310 	orr.w	r3, r3, #16
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4bac      	ldr	r3, [pc, #688]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	4ba8      	ldr	r3, [pc, #672]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4aa7      	ldr	r2, [pc, #668]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4ba5      	ldr	r3, [pc, #660]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	4ba1      	ldr	r3, [pc, #644]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4aa0      	ldr	r2, [pc, #640]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b9e      	ldr	r3, [pc, #632]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b9a      	ldr	r3, [pc, #616]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a99      	ldr	r2, [pc, #612]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b97      	ldr	r3, [pc, #604]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	4b93      	ldr	r3, [pc, #588]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a92      	ldr	r2, [pc, #584]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b90      	ldr	r3, [pc, #576]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	4b8c      	ldr	r3, [pc, #560]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a8b      	ldr	r2, [pc, #556]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b89      	ldr	r3, [pc, #548]	; (8002114 <MX_GPIO_Init+0x2d8>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001efa:	2200      	movs	r2, #0
 8001efc:	217c      	movs	r1, #124	; 0x7c
 8001efe:	4886      	ldr	r0, [pc, #536]	; (8002118 <MX_GPIO_Init+0x2dc>)
 8001f00:	f000 ffc2 	bl	8002e88 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001f04:	2201      	movs	r2, #1
 8001f06:	2101      	movs	r1, #1
 8001f08:	4884      	ldr	r0, [pc, #528]	; (800211c <MX_GPIO_Init+0x2e0>)
 8001f0a:	f000 ffbd 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001f14:	4882      	ldr	r0, [pc, #520]	; (8002120 <MX_GPIO_Init+0x2e4>)
 8001f16:	f000 ffb7 	bl	8002e88 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001f20:	487e      	ldr	r0, [pc, #504]	; (800211c <MX_GPIO_Init+0x2e0>)
 8001f22:	f000 ffb1 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001f2c:	487d      	ldr	r0, [pc, #500]	; (8002124 <MX_GPIO_Init+0x2e8>)
 8001f2e:	f000 ffab 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001f32:	2374      	movs	r3, #116	; 0x74
 8001f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	4873      	ldr	r0, [pc, #460]	; (8002118 <MX_GPIO_Init+0x2dc>)
 8001f4a:	f000 fde9 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001f4e:	2308      	movs	r3, #8
 8001f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f52:	2301      	movs	r3, #1
 8001f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	4619      	mov	r1, r3
 8001f64:	486c      	ldr	r0, [pc, #432]	; (8002118 <MX_GPIO_Init+0x2dc>)
 8001f66:	f000 fddb 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001f6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4867      	ldr	r0, [pc, #412]	; (800211c <MX_GPIO_Init+0x2e0>)
 8001f80:	f000 fdce 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 8001f84:	f640 0341 	movw	r3, #2113	; 0x841
 8001f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f96:	f107 031c 	add.w	r3, r7, #28
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	485f      	ldr	r0, [pc, #380]	; (800211c <MX_GPIO_Init+0x2e0>)
 8001f9e:	f000 fdbf 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001fa2:	2308      	movs	r3, #8
 8001fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fb2:	2305      	movs	r3, #5
 8001fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001fb6:	f107 031c 	add.w	r3, r7, #28
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4857      	ldr	r0, [pc, #348]	; (800211c <MX_GPIO_Init+0x2e0>)
 8001fbe:	f000 fdaf 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fc6:	4b58      	ldr	r3, [pc, #352]	; (8002128 <MX_GPIO_Init+0x2ec>)
 8001fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4855      	ldr	r0, [pc, #340]	; (800212c <MX_GPIO_Init+0x2f0>)
 8001fd6:	f000 fda3 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001fe6:	f107 031c 	add.w	r3, r7, #28
 8001fea:	4619      	mov	r1, r3
 8001fec:	484d      	ldr	r0, [pc, #308]	; (8002124 <MX_GPIO_Init+0x2e8>)
 8001fee:	f000 fd97 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 8001ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	4619      	mov	r1, r3
 8002006:	4844      	ldr	r0, [pc, #272]	; (8002118 <MX_GPIO_Init+0x2dc>)
 8002008:	f000 fd8a 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800200c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800201e:	2305      	movs	r3, #5
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002022:	f107 031c 	add.w	r3, r7, #28
 8002026:	4619      	mov	r1, r3
 8002028:	483e      	ldr	r0, [pc, #248]	; (8002124 <MX_GPIO_Init+0x2e8>)
 800202a:	f000 fd79 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 800202e:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8002032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002034:	2300      	movs	r3, #0
 8002036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002038:	2301      	movs	r3, #1
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	4619      	mov	r1, r3
 8002042:	4838      	ldr	r0, [pc, #224]	; (8002124 <MX_GPIO_Init+0x2e8>)
 8002044:	f000 fd6c 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8002048:	f64f 7310 	movw	r3, #65296	; 0xff10
 800204c:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204e:	2301      	movs	r3, #1
 8002050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4619      	mov	r1, r3
 8002060:	482f      	ldr	r0, [pc, #188]	; (8002120 <MX_GPIO_Init+0x2e4>)
 8002062:	f000 fd5d 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002066:	2320      	movs	r3, #32
 8002068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	4619      	mov	r1, r3
 8002078:	4829      	ldr	r0, [pc, #164]	; (8002120 <MX_GPIO_Init+0x2e4>)
 800207a:	f000 fd51 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800207e:	2340      	movs	r3, #64	; 0x40
 8002080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002082:	2301      	movs	r3, #1
 8002084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	4619      	mov	r1, r3
 8002094:	4823      	ldr	r0, [pc, #140]	; (8002124 <MX_GPIO_Init+0x2e8>)
 8002096:	f000 fd43 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 800209a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800209e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a8:	2303      	movs	r3, #3
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	4619      	mov	r1, r3
 80020b2:	481c      	ldr	r0, [pc, #112]	; (8002124 <MX_GPIO_Init+0x2e8>)
 80020b4:	f000 fd34 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 80020b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020be:	2312      	movs	r3, #18
 80020c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020c2:	2301      	movs	r3, #1
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020ca:	2304      	movs	r3, #4
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	4619      	mov	r1, r3
 80020d4:	4813      	ldr	r0, [pc, #76]	; (8002124 <MX_GPIO_Init+0x2e8>)
 80020d6:	f000 fd23 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 80020da:	2301      	movs	r3, #1
 80020dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020de:	2300      	movs	r3, #0
 80020e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 80020e6:	f107 031c 	add.w	r3, r7, #28
 80020ea:	4619      	mov	r1, r3
 80020ec:	480a      	ldr	r0, [pc, #40]	; (8002118 <MX_GPIO_Init+0x2dc>)
 80020ee:	f000 fd17 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80020f2:	2302      	movs	r3, #2
 80020f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <MX_GPIO_Init+0x2ec>)
 80020f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80020fe:	f107 031c 	add.w	r3, r7, #28
 8002102:	4619      	mov	r1, r3
 8002104:	4804      	ldr	r0, [pc, #16]	; (8002118 <MX_GPIO_Init+0x2dc>)
 8002106:	f000 fd0b 	bl	8002b20 <HAL_GPIO_Init>

}
 800210a:	bf00      	nop
 800210c:	3730      	adds	r7, #48	; 0x30
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	40021000 	.word	0x40021000
 800211c:	40020800 	.word	0x40020800
 8002120:	40020c00 	.word	0x40020c00
 8002124:	40020400 	.word	0x40020400
 8002128:	10120000 	.word	0x10120000
 800212c:	40020000 	.word	0x40020000

08002130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002134:	b672      	cpsid	i
}
 8002136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002138:	e7fe      	b.n	8002138 <Error_Handler+0x8>
	...

0800213c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <HAL_MspInit+0x5c>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	4a13      	ldr	r2, [pc, #76]	; (8002198 <HAL_MspInit+0x5c>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002150:	6453      	str	r3, [r2, #68]	; 0x44
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_MspInit+0x5c>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <HAL_MspInit+0x5c>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	4a0c      	ldr	r2, [pc, #48]	; (8002198 <HAL_MspInit+0x5c>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216c:	6413      	str	r3, [r2, #64]	; 0x40
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_MspInit+0x5c>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800217a:	2007      	movs	r0, #7
 800217c:	f000 fc8e 	bl	8002a9c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2100      	movs	r1, #0
 8002184:	2005      	movs	r0, #5
 8002186:	f000 fc94 	bl	8002ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800218a:	2005      	movs	r0, #5
 800218c:	f000 fcad 	bl	8002aea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40023800 	.word	0x40023800

0800219c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a29      	ldr	r2, [pc, #164]	; (8002260 <HAL_I2C_MspInit+0xc4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d14b      	bne.n	8002256 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	4b28      	ldr	r3, [pc, #160]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a27      	ldr	r2, [pc, #156]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b25      	ldr	r3, [pc, #148]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b21      	ldr	r3, [pc, #132]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a20      	ldr	r2, [pc, #128]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021fc:	2312      	movs	r3, #18
 80021fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002200:	2301      	movs	r3, #1
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002208:	2304      	movs	r3, #4
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4619      	mov	r1, r3
 8002212:	4815      	ldr	r0, [pc, #84]	; (8002268 <HAL_I2C_MspInit+0xcc>)
 8002214:	f000 fc84 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800221e:	2312      	movs	r3, #18
 8002220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002222:	2301      	movs	r3, #1
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002226:	2303      	movs	r3, #3
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800222a:	2304      	movs	r3, #4
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	480d      	ldr	r0, [pc, #52]	; (800226c <HAL_I2C_MspInit+0xd0>)
 8002236:	f000 fc73 	bl	8002b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a08      	ldr	r2, [pc, #32]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 8002244:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_I2C_MspInit+0xc8>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002256:	bf00      	nop
 8002258:	3728      	adds	r7, #40	; 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40005c00 	.word	0x40005c00
 8002264:	40023800 	.word	0x40023800
 8002268:	40020800 	.word	0x40020800
 800226c:	40020000 	.word	0x40020000

08002270 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	; 0x28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a28      	ldr	r2, [pc, #160]	; (8002330 <HAL_I2S_MspInit+0xc0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d14a      	bne.n	8002328 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	4b27      	ldr	r3, [pc, #156]	; (8002334 <HAL_I2S_MspInit+0xc4>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a26      	ldr	r2, [pc, #152]	; (8002334 <HAL_I2S_MspInit+0xc4>)
 800229c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <HAL_I2S_MspInit+0xc4>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <HAL_I2S_MspInit+0xc4>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a1f      	ldr	r2, [pc, #124]	; (8002334 <HAL_I2S_MspInit+0xc4>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <HAL_I2S_MspInit+0xc4>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_I2S_MspInit+0xc4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a18      	ldr	r2, [pc, #96]	; (8002334 <HAL_I2S_MspInit+0xc4>)
 80022d4:	f043 0304 	orr.w	r3, r3, #4
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_I2S_MspInit+0xc4>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80022e6:	2310      	movs	r3, #16
 80022e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022f6:	2306      	movs	r3, #6
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	4619      	mov	r1, r3
 8002300:	480d      	ldr	r0, [pc, #52]	; (8002338 <HAL_I2S_MspInit+0xc8>)
 8002302:	f000 fc0d 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002306:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800230a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002314:	2300      	movs	r3, #0
 8002316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002318:	2306      	movs	r3, #6
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	4619      	mov	r1, r3
 8002322:	4806      	ldr	r0, [pc, #24]	; (800233c <HAL_I2S_MspInit+0xcc>)
 8002324:	f000 fbfc 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002328:	bf00      	nop
 800232a:	3728      	adds	r7, #40	; 0x28
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40003c00 	.word	0x40003c00
 8002334:	40023800 	.word	0x40023800
 8002338:	40020000 	.word	0x40020000
 800233c:	40020800 	.word	0x40020800

08002340 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0b      	ldr	r2, [pc, #44]	; (800237c <HAL_RNG_MspInit+0x3c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d10d      	bne.n	800236e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_RNG_MspInit+0x40>)
 8002358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235a:	4a09      	ldr	r2, [pc, #36]	; (8002380 <HAL_RNG_MspInit+0x40>)
 800235c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002360:	6353      	str	r3, [r2, #52]	; 0x34
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <HAL_RNG_MspInit+0x40>)
 8002364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	50060800 	.word	0x50060800
 8002380:	40023800 	.word	0x40023800

08002384 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	; 0x30
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a41      	ldr	r2, [pc, #260]	; (80024a8 <HAL_SPI_MspInit+0x124>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d12c      	bne.n	8002400 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	4b40      	ldr	r3, [pc, #256]	; (80024ac <HAL_SPI_MspInit+0x128>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a3f      	ldr	r2, [pc, #252]	; (80024ac <HAL_SPI_MspInit+0x128>)
 80023b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <HAL_SPI_MspInit+0x128>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	4b39      	ldr	r3, [pc, #228]	; (80024ac <HAL_SPI_MspInit+0x128>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a38      	ldr	r2, [pc, #224]	; (80024ac <HAL_SPI_MspInit+0x128>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b36      	ldr	r3, [pc, #216]	; (80024ac <HAL_SPI_MspInit+0x128>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80023de:	23e0      	movs	r3, #224	; 0xe0
 80023e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ea:	2303      	movs	r3, #3
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023ee:	2305      	movs	r3, #5
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f2:	f107 031c 	add.w	r3, r7, #28
 80023f6:	4619      	mov	r1, r3
 80023f8:	482d      	ldr	r0, [pc, #180]	; (80024b0 <HAL_SPI_MspInit+0x12c>)
 80023fa:	f000 fb91 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023fe:	e04f      	b.n	80024a0 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a2b      	ldr	r2, [pc, #172]	; (80024b4 <HAL_SPI_MspInit+0x130>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d14a      	bne.n	80024a0 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	4b27      	ldr	r3, [pc, #156]	; (80024ac <HAL_SPI_MspInit+0x128>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a26      	ldr	r2, [pc, #152]	; (80024ac <HAL_SPI_MspInit+0x128>)
 8002414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_SPI_MspInit+0x128>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <HAL_SPI_MspInit+0x128>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a1f      	ldr	r2, [pc, #124]	; (80024ac <HAL_SPI_MspInit+0x128>)
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_SPI_MspInit+0x128>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_SPI_MspInit+0x128>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a18      	ldr	r2, [pc, #96]	; (80024ac <HAL_SPI_MspInit+0x128>)
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <HAL_SPI_MspInit+0x128>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800245e:	2304      	movs	r3, #4
 8002460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800246e:	2305      	movs	r3, #5
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002472:	f107 031c 	add.w	r3, r7, #28
 8002476:	4619      	mov	r1, r3
 8002478:	480f      	ldr	r0, [pc, #60]	; (80024b8 <HAL_SPI_MspInit+0x134>)
 800247a:	f000 fb51 	bl	8002b20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800247e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002490:	2305      	movs	r3, #5
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002494:	f107 031c 	add.w	r3, r7, #28
 8002498:	4619      	mov	r1, r3
 800249a:	4808      	ldr	r0, [pc, #32]	; (80024bc <HAL_SPI_MspInit+0x138>)
 800249c:	f000 fb40 	bl	8002b20 <HAL_GPIO_Init>
}
 80024a0:	bf00      	nop
 80024a2:	3730      	adds	r7, #48	; 0x30
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40013000 	.word	0x40013000
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40020000 	.word	0x40020000
 80024b4:	40003800 	.word	0x40003800
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020400 	.word	0x40020400

080024c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a19      	ldr	r2, [pc, #100]	; (8002544 <HAL_TIM_Encoder_MspInit+0x84>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d12c      	bne.n	800253c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_TIM_Encoder_MspInit+0x88>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	4a17      	ldr	r2, [pc, #92]	; (8002548 <HAL_TIM_Encoder_MspInit+0x88>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6453      	str	r3, [r2, #68]	; 0x44
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_TIM_Encoder_MspInit+0x88>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <HAL_TIM_Encoder_MspInit+0x88>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a10      	ldr	r2, [pc, #64]	; (8002548 <HAL_TIM_Encoder_MspInit+0x88>)
 8002508:	f043 0310 	orr.w	r3, r3, #16
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <HAL_TIM_Encoder_MspInit+0x88>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800251a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800251e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002524:	2301      	movs	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	2300      	movs	r3, #0
 800252a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800252c:	2301      	movs	r3, #1
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	4619      	mov	r1, r3
 8002536:	4805      	ldr	r0, [pc, #20]	; (800254c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002538:	f000 faf2 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800253c:	bf00      	nop
 800253e:	3728      	adds	r7, #40	; 0x28
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40010000 	.word	0x40010000
 8002548:	40023800 	.word	0x40023800
 800254c:	40021000 	.word	0x40021000

08002550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002560:	d10e      	bne.n	8002580 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <HAL_TIM_Base_MspInit+0x70>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <HAL_TIM_Base_MspInit+0x70>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <HAL_TIM_Base_MspInit+0x70>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800257e:	e01a      	b.n	80025b6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0f      	ldr	r2, [pc, #60]	; (80025c4 <HAL_TIM_Base_MspInit+0x74>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d115      	bne.n	80025b6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <HAL_TIM_Base_MspInit+0x70>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <HAL_TIM_Base_MspInit+0x70>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_TIM_Base_MspInit+0x70>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	201d      	movs	r0, #29
 80025ac:	f000 fa81 	bl	8002ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025b0:	201d      	movs	r0, #29
 80025b2:	f000 fa9a 	bl	8002aea <HAL_NVIC_EnableIRQ>
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40000400 	.word	0x40000400

080025c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <NMI_Handler+0x4>

080025ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <HardFault_Handler+0x4>

080025d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <MemManage_Handler+0x4>

080025da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025de:	e7fe      	b.n	80025de <BusFault_Handler+0x4>

080025e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <UsageFault_Handler+0x4>

080025e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002614:	f000 f92e 	bl	8002874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}

0800261c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 8002630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002634:	481b      	ldr	r0, [pc, #108]	; (80026a4 <TIM2_IRQHandler+0x78>)
 8002636:	f000 fc40 	bl	8002eba <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 800263a:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <TIM2_IRQHandler+0x7c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d111      	bne.n	8002666 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 8002642:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <TIM2_IRQHandler+0x80>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2bc8      	cmp	r3, #200	; 0xc8
 8002648:	dc0a      	bgt.n	8002660 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <TIM2_IRQHandler+0x80>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <TIM2_IRQHandler+0x84>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 8002654:	4b15      	ldr	r3, [pc, #84]	; (80026ac <TIM2_IRQHandler+0x80>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3301      	adds	r3, #1
 800265a:	4a14      	ldr	r2, [pc, #80]	; (80026ac <TIM2_IRQHandler+0x80>)
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e002      	b.n	8002666 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <TIM2_IRQHandler+0x7c>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <TIM2_IRQHandler+0x7c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d114      	bne.n	8002698 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <TIM2_IRQHandler+0x80>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b63      	cmp	r3, #99	; 0x63
 8002674:	dd0a      	ble.n	800268c <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <TIM2_IRQHandler+0x80>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <TIM2_IRQHandler+0x84>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <TIM2_IRQHandler+0x80>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3b01      	subs	r3, #1
 8002686:	4a09      	ldr	r2, [pc, #36]	; (80026ac <TIM2_IRQHandler+0x80>)
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e005      	b.n	8002698 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <TIM2_IRQHandler+0x7c>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
		  i = 100;
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <TIM2_IRQHandler+0x80>)
 8002694:	2264      	movs	r2, #100	; 0x64
 8002696:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002698:	4805      	ldr	r0, [pc, #20]	; (80026b0 <TIM2_IRQHandler+0x84>)
 800269a:	f004 fa98 	bl	8006bce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40020c00 	.word	0x40020c00
 80026a8:	20000128 	.word	0x20000128
 80026ac:	20000070 	.word	0x20000070
 80026b0:	20000308 	.word	0x20000308

080026b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80026b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026bc:	4804      	ldr	r0, [pc, #16]	; (80026d0 <TIM3_IRQHandler+0x1c>)
 80026be:	f000 fbfc 	bl	8002eba <HAL_GPIO_TogglePin>
  read_digits();
 80026c2:	f7fe feef 	bl	80014a4 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026c6:	4803      	ldr	r0, [pc, #12]	; (80026d4 <TIM3_IRQHandler+0x20>)
 80026c8:	f004 fa81 	bl	8006bce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40020c00 	.word	0x40020c00
 80026d4:	20000210 	.word	0x20000210

080026d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80026dc:	4802      	ldr	r0, [pc, #8]	; (80026e8 <OTG_FS_IRQHandler+0x10>)
 80026de:	f000 fe71 	bl	80033c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000774 	.word	0x20000774

080026ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <_sbrk+0x5c>)
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <_sbrk+0x60>)
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002700:	4b13      	ldr	r3, [pc, #76]	; (8002750 <_sbrk+0x64>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <_sbrk+0x64>)
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <_sbrk+0x68>)
 800270c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <_sbrk+0x64>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	429a      	cmp	r2, r3
 800271a:	d207      	bcs.n	800272c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800271c:	f008 fa1c 	bl	800ab58 <__errno>
 8002720:	4603      	mov	r3, r0
 8002722:	220c      	movs	r2, #12
 8002724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800272a:	e009      	b.n	8002740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <_sbrk+0x64>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <_sbrk+0x64>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <_sbrk+0x64>)
 800273c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800273e:	68fb      	ldr	r3, [r7, #12]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20020000 	.word	0x20020000
 800274c:	00000400 	.word	0x00000400
 8002750:	2000012c 	.word	0x2000012c
 8002754:	20000a88 	.word	0x20000a88

08002758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <SystemInit+0x20>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002762:	4a05      	ldr	r2, [pc, #20]	; (8002778 <SystemInit+0x20>)
 8002764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800277c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002780:	480d      	ldr	r0, [pc, #52]	; (80027b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002782:	490e      	ldr	r1, [pc, #56]	; (80027bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002784:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002788:	e002      	b.n	8002790 <LoopCopyDataInit>

0800278a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800278a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800278c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800278e:	3304      	adds	r3, #4

08002790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002794:	d3f9      	bcc.n	800278a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002796:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002798:	4c0b      	ldr	r4, [pc, #44]	; (80027c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800279c:	e001      	b.n	80027a2 <LoopFillZerobss>

0800279e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800279e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a0:	3204      	adds	r2, #4

080027a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a4:	d3fb      	bcc.n	800279e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027a6:	f7ff ffd7 	bl	8002758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027aa:	f008 f9db 	bl	800ab64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ae:	f7ff f87f 	bl	80018b0 <main>
  bx  lr    
 80027b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027bc:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80027c0:	0800b290 	.word	0x0800b290
  ldr r2, =_sbss
 80027c4:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 80027c8:	20000a88 	.word	0x20000a88

080027cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027cc:	e7fe      	b.n	80027cc <ADC_IRQHandler>
	...

080027d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <HAL_Init+0x40>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <HAL_Init+0x40>)
 80027da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_Init+0x40>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <HAL_Init+0x40>)
 80027e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ec:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_Init+0x40>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a07      	ldr	r2, [pc, #28]	; (8002810 <HAL_Init+0x40>)
 80027f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f8:	2003      	movs	r0, #3
 80027fa:	f000 f94f 	bl	8002a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027fe:	2000      	movs	r0, #0
 8002800:	f000 f808 	bl	8002814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002804:	f7ff fc9a 	bl	800213c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023c00 	.word	0x40023c00

08002814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_InitTick+0x54>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_InitTick+0x58>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800282a:	fbb3 f3f1 	udiv	r3, r3, r1
 800282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f967 	bl	8002b06 <HAL_SYSTICK_Config>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e00e      	b.n	8002860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b0f      	cmp	r3, #15
 8002846:	d80a      	bhi.n	800285e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002848:	2200      	movs	r2, #0
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002850:	f000 f92f 	bl	8002ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002854:	4a06      	ldr	r2, [pc, #24]	; (8002870 <HAL_InitTick+0x5c>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000074 	.word	0x20000074
 800286c:	2000007c 	.word	0x2000007c
 8002870:	20000078 	.word	0x20000078

08002874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_IncTick+0x20>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_IncTick+0x24>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4413      	add	r3, r2
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <HAL_IncTick+0x24>)
 8002886:	6013      	str	r3, [r2, #0]
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	2000007c 	.word	0x2000007c
 8002898:	20000398 	.word	0x20000398

0800289c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return uwTick;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_GetTick+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000398 	.word	0x20000398

080028b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028bc:	f7ff ffee 	bl	800289c <HAL_GetTick>
 80028c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028cc:	d005      	beq.n	80028da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <HAL_Delay+0x44>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028da:	bf00      	nop
 80028dc:	f7ff ffde 	bl	800289c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d8f7      	bhi.n	80028dc <HAL_Delay+0x28>
  {
  }
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	2000007c 	.word	0x2000007c

080028fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002918:	4013      	ands	r3, r2
 800291a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800292c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292e:	4a04      	ldr	r2, [pc, #16]	; (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	60d3      	str	r3, [r2, #12]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002948:	4b04      	ldr	r3, [pc, #16]	; (800295c <__NVIC_GetPriorityGrouping+0x18>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	0a1b      	lsrs	r3, r3, #8
 800294e:	f003 0307 	and.w	r3, r3, #7
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	2b00      	cmp	r3, #0
 8002970:	db0b      	blt.n	800298a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	f003 021f 	and.w	r2, r3, #31
 8002978:	4907      	ldr	r1, [pc, #28]	; (8002998 <__NVIC_EnableIRQ+0x38>)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	2001      	movs	r0, #1
 8002982:	fa00 f202 	lsl.w	r2, r0, r2
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000e100 	.word	0xe000e100

0800299c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	6039      	str	r1, [r7, #0]
 80029a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	db0a      	blt.n	80029c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	490c      	ldr	r1, [pc, #48]	; (80029e8 <__NVIC_SetPriority+0x4c>)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	0112      	lsls	r2, r2, #4
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	440b      	add	r3, r1
 80029c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c4:	e00a      	b.n	80029dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	4908      	ldr	r1, [pc, #32]	; (80029ec <__NVIC_SetPriority+0x50>)
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	3b04      	subs	r3, #4
 80029d4:	0112      	lsls	r2, r2, #4
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	440b      	add	r3, r1
 80029da:	761a      	strb	r2, [r3, #24]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000e100 	.word	0xe000e100
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f1c3 0307 	rsb	r3, r3, #7
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	bf28      	it	cs
 8002a0e:	2304      	movcs	r3, #4
 8002a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3304      	adds	r3, #4
 8002a16:	2b06      	cmp	r3, #6
 8002a18:	d902      	bls.n	8002a20 <NVIC_EncodePriority+0x30>
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3b03      	subs	r3, #3
 8002a1e:	e000      	b.n	8002a22 <NVIC_EncodePriority+0x32>
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	401a      	ands	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	43d9      	mvns	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a48:	4313      	orrs	r3, r2
         );
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3724      	adds	r7, #36	; 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a68:	d301      	bcc.n	8002a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e00f      	b.n	8002a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <SysTick_Config+0x40>)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a76:	210f      	movs	r1, #15
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a7c:	f7ff ff8e 	bl	800299c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <SysTick_Config+0x40>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a86:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <SysTick_Config+0x40>)
 8002a88:	2207      	movs	r2, #7
 8002a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	e000e010 	.word	0xe000e010

08002a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff ff29 	bl	80028fc <__NVIC_SetPriorityGrouping>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b086      	sub	sp, #24
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac4:	f7ff ff3e 	bl	8002944 <__NVIC_GetPriorityGrouping>
 8002ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	6978      	ldr	r0, [r7, #20]
 8002ad0:	f7ff ff8e 	bl	80029f0 <NVIC_EncodePriority>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff5d 	bl	800299c <__NVIC_SetPriority>
}
 8002ae2:	bf00      	nop
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff31 	bl	8002960 <__NVIC_EnableIRQ>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ffa2 	bl	8002a58 <SysTick_Config>
 8002b14:	4603      	mov	r3, r0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	e16b      	b.n	8002e14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	f040 815a 	bne.w	8002e0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d005      	beq.n	8002b72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d130      	bne.n	8002bd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba8:	2201      	movs	r2, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 0201 	and.w	r2, r3, #1
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d017      	beq.n	8002c10 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	2203      	movs	r2, #3
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d123      	bne.n	8002c64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	08da      	lsrs	r2, r3, #3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3208      	adds	r2, #8
 8002c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	220f      	movs	r2, #15
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	08da      	lsrs	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3208      	adds	r2, #8
 8002c5e:	69b9      	ldr	r1, [r7, #24]
 8002c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0203 	and.w	r2, r3, #3
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80b4 	beq.w	8002e0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	4b60      	ldr	r3, [pc, #384]	; (8002e2c <HAL_GPIO_Init+0x30c>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	4a5f      	ldr	r2, [pc, #380]	; (8002e2c <HAL_GPIO_Init+0x30c>)
 8002cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb6:	4b5d      	ldr	r3, [pc, #372]	; (8002e2c <HAL_GPIO_Init+0x30c>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cc2:	4a5b      	ldr	r2, [pc, #364]	; (8002e30 <HAL_GPIO_Init+0x310>)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	220f      	movs	r2, #15
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a52      	ldr	r2, [pc, #328]	; (8002e34 <HAL_GPIO_Init+0x314>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d02b      	beq.n	8002d46 <HAL_GPIO_Init+0x226>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a51      	ldr	r2, [pc, #324]	; (8002e38 <HAL_GPIO_Init+0x318>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d025      	beq.n	8002d42 <HAL_GPIO_Init+0x222>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a50      	ldr	r2, [pc, #320]	; (8002e3c <HAL_GPIO_Init+0x31c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01f      	beq.n	8002d3e <HAL_GPIO_Init+0x21e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a4f      	ldr	r2, [pc, #316]	; (8002e40 <HAL_GPIO_Init+0x320>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d019      	beq.n	8002d3a <HAL_GPIO_Init+0x21a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a4e      	ldr	r2, [pc, #312]	; (8002e44 <HAL_GPIO_Init+0x324>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d013      	beq.n	8002d36 <HAL_GPIO_Init+0x216>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a4d      	ldr	r2, [pc, #308]	; (8002e48 <HAL_GPIO_Init+0x328>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00d      	beq.n	8002d32 <HAL_GPIO_Init+0x212>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a4c      	ldr	r2, [pc, #304]	; (8002e4c <HAL_GPIO_Init+0x32c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d007      	beq.n	8002d2e <HAL_GPIO_Init+0x20e>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a4b      	ldr	r2, [pc, #300]	; (8002e50 <HAL_GPIO_Init+0x330>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d101      	bne.n	8002d2a <HAL_GPIO_Init+0x20a>
 8002d26:	2307      	movs	r3, #7
 8002d28:	e00e      	b.n	8002d48 <HAL_GPIO_Init+0x228>
 8002d2a:	2308      	movs	r3, #8
 8002d2c:	e00c      	b.n	8002d48 <HAL_GPIO_Init+0x228>
 8002d2e:	2306      	movs	r3, #6
 8002d30:	e00a      	b.n	8002d48 <HAL_GPIO_Init+0x228>
 8002d32:	2305      	movs	r3, #5
 8002d34:	e008      	b.n	8002d48 <HAL_GPIO_Init+0x228>
 8002d36:	2304      	movs	r3, #4
 8002d38:	e006      	b.n	8002d48 <HAL_GPIO_Init+0x228>
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e004      	b.n	8002d48 <HAL_GPIO_Init+0x228>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e002      	b.n	8002d48 <HAL_GPIO_Init+0x228>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_GPIO_Init+0x228>
 8002d46:	2300      	movs	r3, #0
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	f002 0203 	and.w	r2, r2, #3
 8002d4e:	0092      	lsls	r2, r2, #2
 8002d50:	4093      	lsls	r3, r2
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d58:	4935      	ldr	r1, [pc, #212]	; (8002e30 <HAL_GPIO_Init+0x310>)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	089b      	lsrs	r3, r3, #2
 8002d5e:	3302      	adds	r3, #2
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_GPIO_Init+0x334>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d8a:	4a32      	ldr	r2, [pc, #200]	; (8002e54 <HAL_GPIO_Init+0x334>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d90:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <HAL_GPIO_Init+0x334>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002db4:	4a27      	ldr	r2, [pc, #156]	; (8002e54 <HAL_GPIO_Init+0x334>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dba:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <HAL_GPIO_Init+0x334>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dde:	4a1d      	ldr	r2, [pc, #116]	; (8002e54 <HAL_GPIO_Init+0x334>)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002de4:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_GPIO_Init+0x334>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e08:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <HAL_GPIO_Init+0x334>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3301      	adds	r3, #1
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b0f      	cmp	r3, #15
 8002e18:	f67f ae90 	bls.w	8002b3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	3724      	adds	r7, #36	; 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40013800 	.word	0x40013800
 8002e34:	40020000 	.word	0x40020000
 8002e38:	40020400 	.word	0x40020400
 8002e3c:	40020800 	.word	0x40020800
 8002e40:	40020c00 	.word	0x40020c00
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40021400 	.word	0x40021400
 8002e4c:	40021800 	.word	0x40021800
 8002e50:	40021c00 	.word	0x40021c00
 8002e54:	40013c00 	.word	0x40013c00

08002e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	887b      	ldrh	r3, [r7, #2]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
 8002e74:	e001      	b.n	8002e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]
 8002e94:	4613      	mov	r3, r2
 8002e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e98:	787b      	ldrb	r3, [r7, #1]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e9e:	887a      	ldrh	r2, [r7, #2]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ea4:	e003      	b.n	8002eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	041a      	lsls	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	619a      	str	r2, [r3, #24]
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ecc:	887a      	ldrh	r2, [r7, #2]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	041a      	lsls	r2, r3, #16
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	43d9      	mvns	r1, r3
 8002ed8:	887b      	ldrh	r3, [r7, #2]
 8002eda:	400b      	ands	r3, r1
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	619a      	str	r2, [r3, #24]
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002eee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef0:	b08f      	sub	sp, #60	; 0x3c
 8002ef2:	af0a      	add	r7, sp, #40	; 0x28
 8002ef4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e054      	b.n	8002faa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f007 fb72 	bl	800a604 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2203      	movs	r2, #3
 8002f24:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d102      	bne.n	8002f3a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f004 fd14 	bl	800796c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	687e      	ldr	r6, [r7, #4]
 8002f4c:	466d      	mov	r5, sp
 8002f4e:	f106 0410 	add.w	r4, r6, #16
 8002f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f62:	1d33      	adds	r3, r6, #4
 8002f64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f66:	6838      	ldr	r0, [r7, #0]
 8002f68:	f004 fc8e 	bl	8007888 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2101      	movs	r1, #1
 8002f72:	4618      	mov	r0, r3
 8002f74:	f004 fd0b 	bl	800798e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	687e      	ldr	r6, [r7, #4]
 8002f80:	466d      	mov	r5, sp
 8002f82:	f106 0410 	add.w	r4, r6, #16
 8002f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f92:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f96:	1d33      	adds	r3, r6, #4
 8002f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f9a:	6838      	ldr	r0, [r7, #0]
 8002f9c:	f004 fe1e 	bl	8007bdc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fb2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002fb2:	b590      	push	{r4, r7, lr}
 8002fb4:	b089      	sub	sp, #36	; 0x24
 8002fb6:	af04      	add	r7, sp, #16
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	4608      	mov	r0, r1
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	70fb      	strb	r3, [r7, #3]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	70bb      	strb	r3, [r7, #2]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_HCD_HC_Init+0x28>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e076      	b.n	80030c8 <HAL_HCD_HC_Init+0x116>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	212c      	movs	r1, #44	; 0x2c
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	333d      	adds	r3, #61	; 0x3d
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	212c      	movs	r1, #44	; 0x2c
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	3338      	adds	r3, #56	; 0x38
 8003002:	787a      	ldrb	r2, [r7, #1]
 8003004:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	3340      	adds	r3, #64	; 0x40
 8003014:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003016:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	212c      	movs	r1, #44	; 0x2c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	3339      	adds	r3, #57	; 0x39
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	333f      	adds	r3, #63	; 0x3f
 8003038:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800303c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	78ba      	ldrb	r2, [r7, #2]
 8003042:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003046:	b2d0      	uxtb	r0, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	333a      	adds	r3, #58	; 0x3a
 8003054:	4602      	mov	r2, r0
 8003056:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003058:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800305c:	2b00      	cmp	r3, #0
 800305e:	da09      	bge.n	8003074 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	333b      	adds	r3, #59	; 0x3b
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
 8003072:	e008      	b.n	8003086 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	333b      	adds	r3, #59	; 0x3b
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	333c      	adds	r3, #60	; 0x3c
 8003094:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003098:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	787c      	ldrb	r4, [r7, #1]
 80030a0:	78ba      	ldrb	r2, [r7, #2]
 80030a2:	78f9      	ldrb	r1, [r7, #3]
 80030a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030a6:	9302      	str	r3, [sp, #8]
 80030a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	4623      	mov	r3, r4
 80030b6:	f004 ff13 	bl	8007ee0 <USB_HC_Init>
 80030ba:	4603      	mov	r3, r0
 80030bc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd90      	pop	{r4, r7, pc}

080030d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_HCD_HC_Halt+0x1e>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e00f      	b.n	800310e <HAL_HCD_HC_Halt+0x3e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f005 f94f 	bl	80083a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	4608      	mov	r0, r1
 8003122:	4611      	mov	r1, r2
 8003124:	461a      	mov	r2, r3
 8003126:	4603      	mov	r3, r0
 8003128:	70fb      	strb	r3, [r7, #3]
 800312a:	460b      	mov	r3, r1
 800312c:	70bb      	strb	r3, [r7, #2]
 800312e:	4613      	mov	r3, r2
 8003130:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	212c      	movs	r1, #44	; 0x2c
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	4413      	add	r3, r2
 800313e:	333b      	adds	r3, #59	; 0x3b
 8003140:	78ba      	ldrb	r2, [r7, #2]
 8003142:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	212c      	movs	r1, #44	; 0x2c
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	4413      	add	r3, r2
 8003150:	333f      	adds	r3, #63	; 0x3f
 8003152:	787a      	ldrb	r2, [r7, #1]
 8003154:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003156:	7c3b      	ldrb	r3, [r7, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d112      	bne.n	8003182 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	212c      	movs	r1, #44	; 0x2c
 8003162:	fb01 f303 	mul.w	r3, r1, r3
 8003166:	4413      	add	r3, r2
 8003168:	3342      	adds	r3, #66	; 0x42
 800316a:	2203      	movs	r2, #3
 800316c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	212c      	movs	r1, #44	; 0x2c
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4413      	add	r3, r2
 800317a:	333d      	adds	r3, #61	; 0x3d
 800317c:	7f3a      	ldrb	r2, [r7, #28]
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	e008      	b.n	8003194 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	3342      	adds	r3, #66	; 0x42
 8003190:	2202      	movs	r2, #2
 8003192:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003194:	787b      	ldrb	r3, [r7, #1]
 8003196:	2b03      	cmp	r3, #3
 8003198:	f200 80c6 	bhi.w	8003328 <HAL_HCD_HC_SubmitRequest+0x210>
 800319c:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080031b5 	.word	0x080031b5
 80031a8:	08003315 	.word	0x08003315
 80031ac:	08003219 	.word	0x08003219
 80031b0:	08003297 	.word	0x08003297
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80031b4:	7c3b      	ldrb	r3, [r7, #16]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	f040 80b8 	bne.w	800332c <HAL_HCD_HC_SubmitRequest+0x214>
 80031bc:	78bb      	ldrb	r3, [r7, #2]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f040 80b4 	bne.w	800332c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80031c4:	8b3b      	ldrh	r3, [r7, #24]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d108      	bne.n	80031dc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	212c      	movs	r1, #44	; 0x2c
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	3355      	adds	r3, #85	; 0x55
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	212c      	movs	r1, #44	; 0x2c
 80031e2:	fb01 f303 	mul.w	r3, r1, r3
 80031e6:	4413      	add	r3, r2
 80031e8:	3355      	adds	r3, #85	; 0x55
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d109      	bne.n	8003204 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	3342      	adds	r3, #66	; 0x42
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003202:	e093      	b.n	800332c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	3342      	adds	r3, #66	; 0x42
 8003212:	2202      	movs	r2, #2
 8003214:	701a      	strb	r2, [r3, #0]
      break;
 8003216:	e089      	b.n	800332c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003218:	78bb      	ldrb	r3, [r7, #2]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d11d      	bne.n	800325a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	212c      	movs	r1, #44	; 0x2c
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	4413      	add	r3, r2
 800322a:	3355      	adds	r3, #85	; 0x55
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	212c      	movs	r1, #44	; 0x2c
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	3342      	adds	r3, #66	; 0x42
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003244:	e073      	b.n	800332e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	3342      	adds	r3, #66	; 0x42
 8003254:	2202      	movs	r2, #2
 8003256:	701a      	strb	r2, [r3, #0]
      break;
 8003258:	e069      	b.n	800332e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	212c      	movs	r1, #44	; 0x2c
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	3354      	adds	r3, #84	; 0x54
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	212c      	movs	r1, #44	; 0x2c
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	4413      	add	r3, r2
 800327a:	3342      	adds	r3, #66	; 0x42
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
      break;
 8003280:	e055      	b.n	800332e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	212c      	movs	r1, #44	; 0x2c
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	4413      	add	r3, r2
 800328e:	3342      	adds	r3, #66	; 0x42
 8003290:	2202      	movs	r2, #2
 8003292:	701a      	strb	r2, [r3, #0]
      break;
 8003294:	e04b      	b.n	800332e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003296:	78bb      	ldrb	r3, [r7, #2]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d11d      	bne.n	80032d8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	3355      	adds	r3, #85	; 0x55
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d109      	bne.n	80032c4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	3342      	adds	r3, #66	; 0x42
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80032c2:	e034      	b.n	800332e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	212c      	movs	r1, #44	; 0x2c
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	3342      	adds	r3, #66	; 0x42
 80032d2:	2202      	movs	r2, #2
 80032d4:	701a      	strb	r2, [r3, #0]
      break;
 80032d6:	e02a      	b.n	800332e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3354      	adds	r3, #84	; 0x54
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	3342      	adds	r3, #66	; 0x42
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]
      break;
 80032fe:	e016      	b.n	800332e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	3342      	adds	r3, #66	; 0x42
 800330e:	2202      	movs	r2, #2
 8003310:	701a      	strb	r2, [r3, #0]
      break;
 8003312:	e00c      	b.n	800332e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003314:	78fb      	ldrb	r3, [r7, #3]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	212c      	movs	r1, #44	; 0x2c
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	4413      	add	r3, r2
 8003320:	3342      	adds	r3, #66	; 0x42
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
      break;
 8003326:	e002      	b.n	800332e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003328:	bf00      	nop
 800332a:	e000      	b.n	800332e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800332c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	212c      	movs	r1, #44	; 0x2c
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	4413      	add	r3, r2
 800333a:	3344      	adds	r3, #68	; 0x44
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	8b3a      	ldrh	r2, [r7, #24]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	202c      	movs	r0, #44	; 0x2c
 8003348:	fb00 f303 	mul.w	r3, r0, r3
 800334c:	440b      	add	r3, r1
 800334e:	334c      	adds	r3, #76	; 0x4c
 8003350:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	3360      	adds	r3, #96	; 0x60
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	3350      	adds	r3, #80	; 0x50
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	3339      	adds	r3, #57	; 0x39
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	212c      	movs	r1, #44	; 0x2c
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	4413      	add	r3, r2
 8003394:	3361      	adds	r3, #97	; 0x61
 8003396:	2200      	movs	r2, #0
 8003398:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	222c      	movs	r2, #44	; 0x2c
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	3338      	adds	r3, #56	; 0x38
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	18d1      	adds	r1, r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	f004 fea2 	bl	80080fc <USB_HC_StartXfer>
 80033b8:	4603      	mov	r3, r0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop

080033c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f004 fbbb 	bl	8007b56 <USB_GetMode>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	f040 80ef 	bne.w	80035c6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f004 fb9f 	bl	8007b30 <USB_ReadInterrupts>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80e5 	beq.w	80035c4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 fb96 	bl	8007b30 <USB_ReadInterrupts>
 8003404:	4603      	mov	r3, r0
 8003406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800340e:	d104      	bne.n	800341a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003418:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f004 fb86 	bl	8007b30 <USB_ReadInterrupts>
 8003424:	4603      	mov	r3, r0
 8003426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800342e:	d104      	bne.n	800343a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003438:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f004 fb76 	bl	8007b30 <USB_ReadInterrupts>
 8003444:	4603      	mov	r3, r0
 8003446:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800344a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800344e:	d104      	bne.n	800345a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003458:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f004 fb66 	bl	8007b30 <USB_ReadInterrupts>
 8003464:	4603      	mov	r3, r0
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b02      	cmp	r3, #2
 800346c:	d103      	bne.n	8003476 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2202      	movs	r2, #2
 8003474:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f004 fb58 	bl	8007b30 <USB_ReadInterrupts>
 8003480:	4603      	mov	r3, r0
 8003482:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800348a:	d115      	bne.n	80034b8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003494:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d108      	bne.n	80034b8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f007 f92a 	bl	800a700 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2101      	movs	r1, #1
 80034b2:	4618      	mov	r0, r3
 80034b4:	f004 fc4e 	bl	8007d54 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f004 fb37 	bl	8007b30 <USB_ReadInterrupts>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034cc:	d102      	bne.n	80034d4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f001 f9ff 	bl	80048d2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f004 fb29 	bl	8007b30 <USB_ReadInterrupts>
 80034de:	4603      	mov	r3, r0
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d106      	bne.n	80034f6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f007 f8ed 	bl	800a6c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2208      	movs	r2, #8
 80034f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f004 fb18 	bl	8007b30 <USB_ReadInterrupts>
 8003500:	4603      	mov	r3, r0
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b10      	cmp	r3, #16
 8003508:	d101      	bne.n	800350e <HAL_HCD_IRQHandler+0x14a>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_HCD_IRQHandler+0x14c>
 800350e:	2300      	movs	r3, #0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d012      	beq.n	800353a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0210 	bic.w	r2, r2, #16
 8003522:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f001 f902 	bl	800472e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699a      	ldr	r2, [r3, #24]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0210 	orr.w	r2, r2, #16
 8003538:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f004 faf6 	bl	8007b30 <USB_ReadInterrupts>
 8003544:	4603      	mov	r3, r0
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800354e:	d13a      	bne.n	80035c6 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f004 ff13 	bl	8008380 <USB_HC_ReadInterrupt>
 800355a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	e025      	b.n	80035ae <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	fa22 f303 	lsr.w	r3, r2, r3
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d018      	beq.n	80035a8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4413      	add	r3, r2
 800357e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800358c:	d106      	bne.n	800359c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f8ab 	bl	80036f0 <HCD_HC_IN_IRQHandler>
 800359a:	e005      	b.n	80035a8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	4619      	mov	r1, r3
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fcc6 	bl	8003f34 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	3301      	adds	r3, #1
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d3d4      	bcc.n	8003562 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035c0:	615a      	str	r2, [r3, #20]
 80035c2:	e000      	b.n	80035c6 <HAL_HCD_IRQHandler+0x202>
      return;
 80035c4:	bf00      	nop
    }
  }
}
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_HCD_Start+0x16>
 80035de:	2302      	movs	r3, #2
 80035e0:	e013      	b.n	800360a <HAL_HCD_Start+0x3e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f004 f9ab 	bl	800794a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2101      	movs	r1, #1
 80035fa:	4618      	mov	r0, r3
 80035fc:	f004 fc0e 	bl	8007e1c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_HCD_Stop+0x16>
 8003624:	2302      	movs	r3, #2
 8003626:	e00d      	b.n	8003644 <HAL_HCD_Stop+0x32>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f005 f80d 	bl	8008654 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f004 fbb5 	bl	8007dc8 <USB_ResetPort>
 800365e:	4603      	mov	r3, r0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	212c      	movs	r1, #44	; 0x2c
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	4413      	add	r3, r2
 8003680:	3360      	adds	r3, #96	; 0x60
 8003682:	781b      	ldrb	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	212c      	movs	r1, #44	; 0x2c
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	3350      	adds	r3, #80	; 0x50
 80036aa:	681b      	ldr	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f004 fbf9 	bl	8007ebc <USB_GetCurrentFrame>
 80036ca:	4603      	mov	r3, r0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f004 fbd4 	bl	8007e8e <USB_GetHostSpeed>
 80036e6:	4603      	mov	r3, r0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4413      	add	r3, r2
 8003712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b04      	cmp	r3, #4
 800371e:	d119      	bne.n	8003754 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4413      	add	r3, r2
 8003728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372c:	461a      	mov	r2, r3
 800372e:	2304      	movs	r3, #4
 8003730:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4413      	add	r3, r2
 800373a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	0151      	lsls	r1, r2, #5
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	440a      	add	r2, r1
 8003748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800374c:	f043 0302 	orr.w	r3, r3, #2
 8003750:	60d3      	str	r3, [r2, #12]
 8003752:	e101      	b.n	8003958 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4413      	add	r3, r2
 800375c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376a:	d12b      	bne.n	80037c4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4413      	add	r3, r2
 8003774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003778:	461a      	mov	r2, r3
 800377a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800377e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	212c      	movs	r1, #44	; 0x2c
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	4413      	add	r3, r2
 800378c:	3361      	adds	r3, #97	; 0x61
 800378e:	2207      	movs	r2, #7
 8003790:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	0151      	lsls	r1, r2, #5
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	440a      	add	r2, r1
 80037a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037ac:	f043 0302 	orr.w	r3, r3, #2
 80037b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f004 fdf0 	bl	80083a2 <USB_HC_Halt>
 80037c2:	e0c9      	b.n	8003958 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d109      	bne.n	80037ee <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e6:	461a      	mov	r2, r3
 80037e8:	2320      	movs	r3, #32
 80037ea:	6093      	str	r3, [r2, #8]
 80037ec:	e0b4      	b.n	8003958 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b08      	cmp	r3, #8
 8003802:	d133      	bne.n	800386c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	4413      	add	r3, r2
 800380c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	0151      	lsls	r1, r2, #5
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	440a      	add	r2, r1
 800381a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800381e:	f043 0302 	orr.w	r3, r3, #2
 8003822:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	212c      	movs	r1, #44	; 0x2c
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	4413      	add	r3, r2
 8003830:	3361      	adds	r3, #97	; 0x61
 8003832:	2205      	movs	r2, #5
 8003834:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4413      	add	r3, r2
 800383e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003842:	461a      	mov	r2, r3
 8003844:	2310      	movs	r3, #16
 8003846:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4413      	add	r3, r2
 8003850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003854:	461a      	mov	r2, r3
 8003856:	2308      	movs	r3, #8
 8003858:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f004 fd9c 	bl	80083a2 <USB_HC_Halt>
 800386a:	e075      	b.n	8003958 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003882:	d134      	bne.n	80038ee <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4413      	add	r3, r2
 800388c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	0151      	lsls	r1, r2, #5
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	440a      	add	r2, r1
 800389a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800389e:	f043 0302 	orr.w	r3, r3, #2
 80038a2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	212c      	movs	r1, #44	; 0x2c
 80038aa:	fb01 f303 	mul.w	r3, r1, r3
 80038ae:	4413      	add	r3, r2
 80038b0:	3361      	adds	r3, #97	; 0x61
 80038b2:	2208      	movs	r2, #8
 80038b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c2:	461a      	mov	r2, r3
 80038c4:	2310      	movs	r3, #16
 80038c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d4:	461a      	mov	r2, r3
 80038d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038da:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	4611      	mov	r1, r2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f004 fd5b 	bl	80083a2 <USB_HC_Halt>
 80038ec:	e034      	b.n	8003958 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003900:	2b80      	cmp	r3, #128	; 0x80
 8003902:	d129      	bne.n	8003958 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	0151      	lsls	r1, r2, #5
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	440a      	add	r2, r1
 800391a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800391e:	f043 0302 	orr.w	r3, r3, #2
 8003922:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	212c      	movs	r1, #44	; 0x2c
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	3361      	adds	r3, #97	; 0x61
 8003932:	2206      	movs	r2, #6
 8003934:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f004 fd2e 	bl	80083a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003952:	461a      	mov	r2, r3
 8003954:	2380      	movs	r3, #128	; 0x80
 8003956:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4413      	add	r3, r2
 8003960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800396a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800396e:	d122      	bne.n	80039b6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4413      	add	r3, r2
 8003978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	0151      	lsls	r1, r2, #5
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	440a      	add	r2, r1
 8003986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800398a:	f043 0302 	orr.w	r3, r3, #2
 800398e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	4611      	mov	r1, r2
 800399a:	4618      	mov	r0, r3
 800399c:	f004 fd01 	bl	80083a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ac:	461a      	mov	r2, r3
 80039ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039b2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80039b4:	e2ba      	b.n	8003f2c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	f040 811b 	bne.w	8003c04 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d019      	beq.n	8003a0a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	212c      	movs	r1, #44	; 0x2c
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	3348      	adds	r3, #72	; 0x48
 80039e4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	0159      	lsls	r1, r3, #5
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	440b      	add	r3, r1
 80039ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80039f8:	1ad2      	subs	r2, r2, r3
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	202c      	movs	r0, #44	; 0x2c
 8003a00:	fb00 f303 	mul.w	r3, r0, r3
 8003a04:	440b      	add	r3, r1
 8003a06:	3350      	adds	r3, #80	; 0x50
 8003a08:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	212c      	movs	r1, #44	; 0x2c
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	4413      	add	r3, r2
 8003a16:	3361      	adds	r3, #97	; 0x61
 8003a18:	2201      	movs	r2, #1
 8003a1a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	212c      	movs	r1, #44	; 0x2c
 8003a22:	fb01 f303 	mul.w	r3, r1, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	335c      	adds	r3, #92	; 0x5c
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	212c      	movs	r1, #44	; 0x2c
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	333f      	adds	r3, #63	; 0x3f
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d009      	beq.n	8003a68 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	212c      	movs	r1, #44	; 0x2c
 8003a5a:	fb01 f303 	mul.w	r3, r1, r3
 8003a5e:	4413      	add	r3, r2
 8003a60:	333f      	adds	r3, #63	; 0x3f
 8003a62:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d121      	bne.n	8003aac <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	0151      	lsls	r1, r2, #5
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	440a      	add	r2, r1
 8003a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a82:	f043 0302 	orr.w	r3, r3, #2
 8003a86:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f004 fc85 	bl	80083a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2310      	movs	r3, #16
 8003aa8:	6093      	str	r3, [r2, #8]
 8003aaa:	e066      	b.n	8003b7a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	212c      	movs	r1, #44	; 0x2c
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	333f      	adds	r3, #63	; 0x3f
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d127      	bne.n	8003b10 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	0151      	lsls	r1, r2, #5
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	440a      	add	r2, r1
 8003ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ada:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ade:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	212c      	movs	r1, #44	; 0x2c
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	4413      	add	r3, r2
 8003aec:	3360      	adds	r3, #96	; 0x60
 8003aee:	2201      	movs	r2, #1
 8003af0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	b2d9      	uxtb	r1, r3
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	202c      	movs	r0, #44	; 0x2c
 8003afc:	fb00 f303 	mul.w	r3, r0, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	3360      	adds	r3, #96	; 0x60
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f006 fe07 	bl	800a71c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b0e:	e034      	b.n	8003b7a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	212c      	movs	r1, #44	; 0x2c
 8003b16:	fb01 f303 	mul.w	r3, r1, r3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	333f      	adds	r3, #63	; 0x3f
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d12a      	bne.n	8003b7a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	212c      	movs	r1, #44	; 0x2c
 8003b2a:	fb01 f303 	mul.w	r3, r1, r3
 8003b2e:	4413      	add	r3, r2
 8003b30:	3360      	adds	r3, #96	; 0x60
 8003b32:	2201      	movs	r2, #1
 8003b34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	212c      	movs	r1, #44	; 0x2c
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	3354      	adds	r3, #84	; 0x54
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	f083 0301 	eor.w	r3, r3, #1
 8003b4a:	b2d8      	uxtb	r0, r3
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	212c      	movs	r1, #44	; 0x2c
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	3354      	adds	r3, #84	; 0x54
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	b2d9      	uxtb	r1, r3
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	202c      	movs	r0, #44	; 0x2c
 8003b68:	fb00 f303 	mul.w	r3, r0, r3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3360      	adds	r3, #96	; 0x60
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f006 fdd1 	bl	800a71c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d12b      	bne.n	8003bda <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	212c      	movs	r1, #44	; 0x2c
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3348      	adds	r3, #72	; 0x48
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	202c      	movs	r0, #44	; 0x2c
 8003b98:	fb00 f202 	mul.w	r2, r0, r2
 8003b9c:	440a      	add	r2, r1
 8003b9e:	3240      	adds	r2, #64	; 0x40
 8003ba0:	8812      	ldrh	r2, [r2, #0]
 8003ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 81be 	beq.w	8003f2c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	3354      	adds	r3, #84	; 0x54
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	f083 0301 	eor.w	r3, r3, #1
 8003bc4:	b2d8      	uxtb	r0, r3
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	212c      	movs	r1, #44	; 0x2c
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3354      	adds	r3, #84	; 0x54
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	701a      	strb	r2, [r3, #0]
}
 8003bd8:	e1a8      	b.n	8003f2c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	212c      	movs	r1, #44	; 0x2c
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	3354      	adds	r3, #84	; 0x54
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	f083 0301 	eor.w	r3, r3, #1
 8003bee:	b2d8      	uxtb	r0, r3
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	212c      	movs	r1, #44	; 0x2c
 8003bf6:	fb01 f303 	mul.w	r3, r1, r3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3354      	adds	r3, #84	; 0x54
 8003bfe:	4602      	mov	r2, r0
 8003c00:	701a      	strb	r2, [r3, #0]
}
 8003c02:	e193      	b.n	8003f2c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	f040 8106 	bne.w	8003e28 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	0151      	lsls	r1, r2, #5
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	440a      	add	r2, r1
 8003c32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c36:	f023 0302 	bic.w	r3, r3, #2
 8003c3a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	3361      	adds	r3, #97	; 0x61
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d109      	bne.n	8003c64 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3360      	adds	r3, #96	; 0x60
 8003c5e:	2201      	movs	r2, #1
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	e0c9      	b.n	8003df8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	3361      	adds	r3, #97	; 0x61
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b05      	cmp	r3, #5
 8003c76:	d109      	bne.n	8003c8c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	212c      	movs	r1, #44	; 0x2c
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	3360      	adds	r3, #96	; 0x60
 8003c86:	2205      	movs	r2, #5
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e0b5      	b.n	8003df8 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	212c      	movs	r1, #44	; 0x2c
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	3361      	adds	r3, #97	; 0x61
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b06      	cmp	r3, #6
 8003c9e:	d009      	beq.n	8003cb4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	212c      	movs	r1, #44	; 0x2c
 8003ca6:	fb01 f303 	mul.w	r3, r1, r3
 8003caa:	4413      	add	r3, r2
 8003cac:	3361      	adds	r3, #97	; 0x61
 8003cae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d150      	bne.n	8003d56 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	212c      	movs	r1, #44	; 0x2c
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	335c      	adds	r3, #92	; 0x5c
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	202c      	movs	r0, #44	; 0x2c
 8003ccc:	fb00 f303 	mul.w	r3, r0, r3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	335c      	adds	r3, #92	; 0x5c
 8003cd4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	335c      	adds	r3, #92	; 0x5c
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d912      	bls.n	8003d10 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	335c      	adds	r3, #92	; 0x5c
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	212c      	movs	r1, #44	; 0x2c
 8003d02:	fb01 f303 	mul.w	r3, r1, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	3360      	adds	r3, #96	; 0x60
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d0e:	e073      	b.n	8003df8 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	212c      	movs	r1, #44	; 0x2c
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3360      	adds	r3, #96	; 0x60
 8003d1e:	2202      	movs	r2, #2
 8003d20:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d38:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d40:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d54:	e050      	b.n	8003df8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	212c      	movs	r1, #44	; 0x2c
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	4413      	add	r3, r2
 8003d62:	3361      	adds	r3, #97	; 0x61
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d122      	bne.n	8003db0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	212c      	movs	r1, #44	; 0x2c
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	4413      	add	r3, r2
 8003d76:	3360      	adds	r3, #96	; 0x60
 8003d78:	2202      	movs	r2, #2
 8003d7a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d92:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d9a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da8:	461a      	mov	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e023      	b.n	8003df8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	212c      	movs	r1, #44	; 0x2c
 8003db6:	fb01 f303 	mul.w	r3, r1, r3
 8003dba:	4413      	add	r3, r2
 8003dbc:	3361      	adds	r3, #97	; 0x61
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b07      	cmp	r3, #7
 8003dc2:	d119      	bne.n	8003df8 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	212c      	movs	r1, #44	; 0x2c
 8003dca:	fb01 f303 	mul.w	r3, r1, r3
 8003dce:	4413      	add	r3, r2
 8003dd0:	335c      	adds	r3, #92	; 0x5c
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	202c      	movs	r0, #44	; 0x2c
 8003ddc:	fb00 f303 	mul.w	r3, r0, r3
 8003de0:	440b      	add	r3, r1
 8003de2:	335c      	adds	r3, #92	; 0x5c
 8003de4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	212c      	movs	r1, #44	; 0x2c
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	4413      	add	r3, r2
 8003df2:	3360      	adds	r3, #96	; 0x60
 8003df4:	2204      	movs	r2, #4
 8003df6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e04:	461a      	mov	r2, r3
 8003e06:	2302      	movs	r3, #2
 8003e08:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	b2d9      	uxtb	r1, r3
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	202c      	movs	r0, #44	; 0x2c
 8003e14:	fb00 f303 	mul.w	r3, r0, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	3360      	adds	r3, #96	; 0x60
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f006 fc7b 	bl	800a71c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e26:	e081      	b.n	8003f2c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b10      	cmp	r3, #16
 8003e3c:	d176      	bne.n	8003f2c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	212c      	movs	r1, #44	; 0x2c
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	4413      	add	r3, r2
 8003e4a:	333f      	adds	r3, #63	; 0x3f
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d121      	bne.n	8003e96 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	212c      	movs	r1, #44	; 0x2c
 8003e58:	fb01 f303 	mul.w	r3, r1, r3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	335c      	adds	r3, #92	; 0x5c
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e7e:	f043 0302 	orr.w	r3, r3, #2
 8003e82:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f004 fa87 	bl	80083a2 <USB_HC_Halt>
 8003e94:	e041      	b.n	8003f1a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	212c      	movs	r1, #44	; 0x2c
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	333f      	adds	r3, #63	; 0x3f
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	212c      	movs	r1, #44	; 0x2c
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	333f      	adds	r3, #63	; 0x3f
 8003eb8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d12d      	bne.n	8003f1a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	212c      	movs	r1, #44	; 0x2c
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	4413      	add	r3, r2
 8003eca:	335c      	adds	r3, #92	; 0x5c
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d120      	bne.n	8003f1a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	212c      	movs	r1, #44	; 0x2c
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3361      	adds	r3, #97	; 0x61
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	0151      	lsls	r1, r2, #5
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	440a      	add	r2, r1
 8003f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f04:	f043 0302 	orr.w	r3, r3, #2
 8003f08:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	4611      	mov	r1, r2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f004 fa44 	bl	80083a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f26:	461a      	mov	r2, r3
 8003f28:	2310      	movs	r3, #16
 8003f2a:	6093      	str	r3, [r2, #8]
}
 8003f2c:	bf00      	nop
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003f4a:	78fb      	ldrb	r3, [r7, #3]
 8003f4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d119      	bne.n	8003f98 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f70:	461a      	mov	r2, r3
 8003f72:	2304      	movs	r3, #4
 8003f74:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	0151      	lsls	r1, r2, #5
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f90:	f043 0302 	orr.w	r3, r3, #2
 8003f94:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003f96:	e3c6      	b.n	8004726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d13e      	bne.n	800402c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fba:	461a      	mov	r2, r3
 8003fbc:	2320      	movs	r3, #32
 8003fbe:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	212c      	movs	r1, #44	; 0x2c
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	333d      	adds	r3, #61	; 0x3d
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	f040 83a8 	bne.w	8004726 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	212c      	movs	r1, #44	; 0x2c
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	333d      	adds	r3, #61	; 0x3d
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	212c      	movs	r1, #44	; 0x2c
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3360      	adds	r3, #96	; 0x60
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	4413      	add	r3, r2
 8004002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	0151      	lsls	r1, r2, #5
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	440a      	add	r2, r1
 8004010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004014:	f043 0302 	orr.w	r3, r3, #2
 8004018:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	4611      	mov	r1, r2
 8004024:	4618      	mov	r0, r3
 8004026:	f004 f9bc 	bl	80083a2 <USB_HC_Halt>
}
 800402a:	e37c      	b.n	8004726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	4413      	add	r3, r2
 8004034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004042:	d122      	bne.n	800408a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	4413      	add	r3, r2
 800404c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	0151      	lsls	r1, r2, #5
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	440a      	add	r2, r1
 800405a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800405e:	f043 0302 	orr.w	r3, r3, #2
 8004062:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	4611      	mov	r1, r2
 800406e:	4618      	mov	r0, r3
 8004070:	f004 f997 	bl	80083a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	4413      	add	r3, r2
 800407c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004080:	461a      	mov	r2, r3
 8004082:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004086:	6093      	str	r3, [r2, #8]
}
 8004088:	e34d      	b.n	8004726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	4413      	add	r3, r2
 8004092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d150      	bne.n	8004142 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	212c      	movs	r1, #44	; 0x2c
 80040a6:	fb01 f303 	mul.w	r3, r1, r3
 80040aa:	4413      	add	r3, r2
 80040ac:	335c      	adds	r3, #92	; 0x5c
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d111      	bne.n	80040ec <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	212c      	movs	r1, #44	; 0x2c
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	333d      	adds	r3, #61	; 0x3d
 80040d6:	2201      	movs	r2, #1
 80040d8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e6:	461a      	mov	r2, r3
 80040e8:	2340      	movs	r3, #64	; 0x40
 80040ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	0151      	lsls	r1, r2, #5
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	440a      	add	r2, r1
 8004102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004106:	f043 0302 	orr.w	r3, r3, #2
 800410a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	4611      	mov	r1, r2
 8004116:	4618      	mov	r0, r3
 8004118:	f004 f943 	bl	80083a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	4413      	add	r3, r2
 8004124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004128:	461a      	mov	r2, r3
 800412a:	2301      	movs	r3, #1
 800412c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	212c      	movs	r1, #44	; 0x2c
 8004134:	fb01 f303 	mul.w	r3, r1, r3
 8004138:	4413      	add	r3, r2
 800413a:	3361      	adds	r3, #97	; 0x61
 800413c:	2201      	movs	r2, #1
 800413e:	701a      	strb	r2, [r3, #0]
}
 8004140:	e2f1      	b.n	8004726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	4413      	add	r3, r2
 800414a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004154:	2b40      	cmp	r3, #64	; 0x40
 8004156:	d13c      	bne.n	80041d2 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	212c      	movs	r1, #44	; 0x2c
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	3361      	adds	r3, #97	; 0x61
 8004166:	2204      	movs	r2, #4
 8004168:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	212c      	movs	r1, #44	; 0x2c
 8004170:	fb01 f303 	mul.w	r3, r1, r3
 8004174:	4413      	add	r3, r2
 8004176:	333d      	adds	r3, #61	; 0x3d
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	212c      	movs	r1, #44	; 0x2c
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	4413      	add	r3, r2
 8004188:	335c      	adds	r3, #92	; 0x5c
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	4413      	add	r3, r2
 8004196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	0151      	lsls	r1, r2, #5
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	440a      	add	r2, r1
 80041a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041a8:	f043 0302 	orr.w	r3, r3, #2
 80041ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	4611      	mov	r1, r2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f004 f8f2 	bl	80083a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ca:	461a      	mov	r2, r3
 80041cc:	2340      	movs	r3, #64	; 0x40
 80041ce:	6093      	str	r3, [r2, #8]
}
 80041d0:	e2a9      	b.n	8004726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d12a      	bne.n	800423e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f4:	461a      	mov	r2, r3
 80041f6:	2308      	movs	r3, #8
 80041f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	4413      	add	r3, r2
 8004202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	0151      	lsls	r1, r2, #5
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	440a      	add	r2, r1
 8004210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004214:	f043 0302 	orr.w	r3, r3, #2
 8004218:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	4611      	mov	r1, r2
 8004224:	4618      	mov	r0, r3
 8004226:	f004 f8bc 	bl	80083a2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	212c      	movs	r1, #44	; 0x2c
 8004230:	fb01 f303 	mul.w	r3, r1, r3
 8004234:	4413      	add	r3, r2
 8004236:	3361      	adds	r3, #97	; 0x61
 8004238:	2205      	movs	r2, #5
 800423a:	701a      	strb	r2, [r3, #0]
}
 800423c:	e273      	b.n	8004726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	4413      	add	r3, r2
 8004246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	2b10      	cmp	r3, #16
 8004252:	d150      	bne.n	80042f6 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	212c      	movs	r1, #44	; 0x2c
 800425a:	fb01 f303 	mul.w	r3, r1, r3
 800425e:	4413      	add	r3, r2
 8004260:	335c      	adds	r3, #92	; 0x5c
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	212c      	movs	r1, #44	; 0x2c
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	4413      	add	r3, r2
 8004272:	3361      	adds	r3, #97	; 0x61
 8004274:	2203      	movs	r2, #3
 8004276:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	212c      	movs	r1, #44	; 0x2c
 800427e:	fb01 f303 	mul.w	r3, r1, r3
 8004282:	4413      	add	r3, r2
 8004284:	333d      	adds	r3, #61	; 0x3d
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d112      	bne.n	80042b2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	212c      	movs	r1, #44	; 0x2c
 8004292:	fb01 f303 	mul.w	r3, r1, r3
 8004296:	4413      	add	r3, r2
 8004298:	333c      	adds	r3, #60	; 0x3c
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d108      	bne.n	80042b2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	212c      	movs	r1, #44	; 0x2c
 80042a6:	fb01 f303 	mul.w	r3, r1, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	333d      	adds	r3, #61	; 0x3d
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	0151      	lsls	r1, r2, #5
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	440a      	add	r2, r1
 80042c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042cc:	f043 0302 	orr.w	r3, r3, #2
 80042d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	4611      	mov	r1, r2
 80042dc:	4618      	mov	r0, r3
 80042de:	f004 f860 	bl	80083a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ee:	461a      	mov	r2, r3
 80042f0:	2310      	movs	r3, #16
 80042f2:	6093      	str	r3, [r2, #8]
}
 80042f4:	e217      	b.n	8004726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004308:	2b80      	cmp	r3, #128	; 0x80
 800430a:	d174      	bne.n	80043f6 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d121      	bne.n	8004358 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	212c      	movs	r1, #44	; 0x2c
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	4413      	add	r3, r2
 8004320:	3361      	adds	r3, #97	; 0x61
 8004322:	2206      	movs	r2, #6
 8004324:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	4413      	add	r3, r2
 800432e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	0151      	lsls	r1, r2, #5
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	440a      	add	r2, r1
 800433c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004340:	f043 0302 	orr.w	r3, r3, #2
 8004344:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	4611      	mov	r1, r2
 8004350:	4618      	mov	r0, r3
 8004352:	f004 f826 	bl	80083a2 <USB_HC_Halt>
 8004356:	e044      	b.n	80043e2 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	212c      	movs	r1, #44	; 0x2c
 800435e:	fb01 f303 	mul.w	r3, r1, r3
 8004362:	4413      	add	r3, r2
 8004364:	335c      	adds	r3, #92	; 0x5c
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	202c      	movs	r0, #44	; 0x2c
 8004370:	fb00 f303 	mul.w	r3, r0, r3
 8004374:	440b      	add	r3, r1
 8004376:	335c      	adds	r3, #92	; 0x5c
 8004378:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	212c      	movs	r1, #44	; 0x2c
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	4413      	add	r3, r2
 8004386:	335c      	adds	r3, #92	; 0x5c
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d920      	bls.n	80043d0 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	212c      	movs	r1, #44	; 0x2c
 8004394:	fb01 f303 	mul.w	r3, r1, r3
 8004398:	4413      	add	r3, r2
 800439a:	335c      	adds	r3, #92	; 0x5c
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	212c      	movs	r1, #44	; 0x2c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	3360      	adds	r3, #96	; 0x60
 80043ae:	2204      	movs	r2, #4
 80043b0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	b2d9      	uxtb	r1, r3
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	202c      	movs	r0, #44	; 0x2c
 80043bc:	fb00 f303 	mul.w	r3, r0, r3
 80043c0:	4413      	add	r3, r2
 80043c2:	3360      	adds	r3, #96	; 0x60
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f006 f9a7 	bl	800a71c <HAL_HCD_HC_NotifyURBChange_Callback>
 80043ce:	e008      	b.n	80043e2 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	212c      	movs	r1, #44	; 0x2c
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	4413      	add	r3, r2
 80043dc:	3360      	adds	r3, #96	; 0x60
 80043de:	2202      	movs	r2, #2
 80043e0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ee:	461a      	mov	r2, r3
 80043f0:	2380      	movs	r3, #128	; 0x80
 80043f2:	6093      	str	r3, [r2, #8]
}
 80043f4:	e197      	b.n	8004726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440c:	d134      	bne.n	8004478 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	4413      	add	r3, r2
 8004416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	0151      	lsls	r1, r2, #5
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	440a      	add	r2, r1
 8004424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004428:	f043 0302 	orr.w	r3, r3, #2
 800442c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f003 ffb2 	bl	80083a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	4413      	add	r3, r2
 8004446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444a:	461a      	mov	r2, r3
 800444c:	2310      	movs	r3, #16
 800444e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	4413      	add	r3, r2
 8004458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445c:	461a      	mov	r2, r3
 800445e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004462:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	212c      	movs	r1, #44	; 0x2c
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	4413      	add	r3, r2
 8004470:	3361      	adds	r3, #97	; 0x61
 8004472:	2208      	movs	r2, #8
 8004474:	701a      	strb	r2, [r3, #0]
}
 8004476:	e156      	b.n	8004726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	4413      	add	r3, r2
 8004480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b02      	cmp	r3, #2
 800448c:	f040 814b 	bne.w	8004726 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	4413      	add	r3, r2
 8004498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044aa:	f023 0302 	bic.w	r3, r3, #2
 80044ae:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	212c      	movs	r1, #44	; 0x2c
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	4413      	add	r3, r2
 80044bc:	3361      	adds	r3, #97	; 0x61
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d179      	bne.n	80045b8 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	212c      	movs	r1, #44	; 0x2c
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	4413      	add	r3, r2
 80044d0:	3360      	adds	r3, #96	; 0x60
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	212c      	movs	r1, #44	; 0x2c
 80044dc:	fb01 f303 	mul.w	r3, r1, r3
 80044e0:	4413      	add	r3, r2
 80044e2:	333f      	adds	r3, #63	; 0x3f
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d00a      	beq.n	8004500 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	212c      	movs	r1, #44	; 0x2c
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	4413      	add	r3, r2
 80044f6:	333f      	adds	r3, #63	; 0x3f
 80044f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	f040 80fc 	bne.w	80046f8 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d142      	bne.n	800458e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	212c      	movs	r1, #44	; 0x2c
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	4413      	add	r3, r2
 8004514:	334c      	adds	r3, #76	; 0x4c
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80ed 	beq.w	80046f8 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	212c      	movs	r1, #44	; 0x2c
 8004524:	fb01 f303 	mul.w	r3, r1, r3
 8004528:	4413      	add	r3, r2
 800452a:	334c      	adds	r3, #76	; 0x4c
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	202c      	movs	r0, #44	; 0x2c
 8004534:	fb00 f202 	mul.w	r2, r0, r2
 8004538:	440a      	add	r2, r1
 800453a:	3240      	adds	r2, #64	; 0x40
 800453c:	8812      	ldrh	r2, [r2, #0]
 800453e:	4413      	add	r3, r2
 8004540:	3b01      	subs	r3, #1
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	202c      	movs	r0, #44	; 0x2c
 8004548:	fb00 f202 	mul.w	r2, r0, r2
 800454c:	440a      	add	r2, r1
 800454e:	3240      	adds	r2, #64	; 0x40
 8004550:	8812      	ldrh	r2, [r2, #0]
 8004552:	fbb3 f3f2 	udiv	r3, r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 80ca 	beq.w	80046f8 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	212c      	movs	r1, #44	; 0x2c
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	4413      	add	r3, r2
 8004570:	3355      	adds	r3, #85	; 0x55
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	f083 0301 	eor.w	r3, r3, #1
 8004578:	b2d8      	uxtb	r0, r3
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	212c      	movs	r1, #44	; 0x2c
 8004580:	fb01 f303 	mul.w	r3, r1, r3
 8004584:	4413      	add	r3, r2
 8004586:	3355      	adds	r3, #85	; 0x55
 8004588:	4602      	mov	r2, r0
 800458a:	701a      	strb	r2, [r3, #0]
 800458c:	e0b4      	b.n	80046f8 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	212c      	movs	r1, #44	; 0x2c
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	4413      	add	r3, r2
 800459a:	3355      	adds	r3, #85	; 0x55
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	f083 0301 	eor.w	r3, r3, #1
 80045a2:	b2d8      	uxtb	r0, r3
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	212c      	movs	r1, #44	; 0x2c
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	4413      	add	r3, r2
 80045b0:	3355      	adds	r3, #85	; 0x55
 80045b2:	4602      	mov	r2, r0
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	e09f      	b.n	80046f8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	212c      	movs	r1, #44	; 0x2c
 80045be:	fb01 f303 	mul.w	r3, r1, r3
 80045c2:	4413      	add	r3, r2
 80045c4:	3361      	adds	r3, #97	; 0x61
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d109      	bne.n	80045e0 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	212c      	movs	r1, #44	; 0x2c
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	4413      	add	r3, r2
 80045d8:	3360      	adds	r3, #96	; 0x60
 80045da:	2202      	movs	r2, #2
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	e08b      	b.n	80046f8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	212c      	movs	r1, #44	; 0x2c
 80045e6:	fb01 f303 	mul.w	r3, r1, r3
 80045ea:	4413      	add	r3, r2
 80045ec:	3361      	adds	r3, #97	; 0x61
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d109      	bne.n	8004608 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	212c      	movs	r1, #44	; 0x2c
 80045fa:	fb01 f303 	mul.w	r3, r1, r3
 80045fe:	4413      	add	r3, r2
 8004600:	3360      	adds	r3, #96	; 0x60
 8004602:	2202      	movs	r2, #2
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	e077      	b.n	80046f8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	212c      	movs	r1, #44	; 0x2c
 800460e:	fb01 f303 	mul.w	r3, r1, r3
 8004612:	4413      	add	r3, r2
 8004614:	3361      	adds	r3, #97	; 0x61
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b05      	cmp	r3, #5
 800461a:	d109      	bne.n	8004630 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	212c      	movs	r1, #44	; 0x2c
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	4413      	add	r3, r2
 8004628:	3360      	adds	r3, #96	; 0x60
 800462a:	2205      	movs	r2, #5
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	e063      	b.n	80046f8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	212c      	movs	r1, #44	; 0x2c
 8004636:	fb01 f303 	mul.w	r3, r1, r3
 800463a:	4413      	add	r3, r2
 800463c:	3361      	adds	r3, #97	; 0x61
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b06      	cmp	r3, #6
 8004642:	d009      	beq.n	8004658 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	212c      	movs	r1, #44	; 0x2c
 800464a:	fb01 f303 	mul.w	r3, r1, r3
 800464e:	4413      	add	r3, r2
 8004650:	3361      	adds	r3, #97	; 0x61
 8004652:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004654:	2b08      	cmp	r3, #8
 8004656:	d14f      	bne.n	80046f8 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	212c      	movs	r1, #44	; 0x2c
 800465e:	fb01 f303 	mul.w	r3, r1, r3
 8004662:	4413      	add	r3, r2
 8004664:	335c      	adds	r3, #92	; 0x5c
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	202c      	movs	r0, #44	; 0x2c
 8004670:	fb00 f303 	mul.w	r3, r0, r3
 8004674:	440b      	add	r3, r1
 8004676:	335c      	adds	r3, #92	; 0x5c
 8004678:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	212c      	movs	r1, #44	; 0x2c
 8004680:	fb01 f303 	mul.w	r3, r1, r3
 8004684:	4413      	add	r3, r2
 8004686:	335c      	adds	r3, #92	; 0x5c
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d912      	bls.n	80046b4 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	212c      	movs	r1, #44	; 0x2c
 8004694:	fb01 f303 	mul.w	r3, r1, r3
 8004698:	4413      	add	r3, r2
 800469a:	335c      	adds	r3, #92	; 0x5c
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	212c      	movs	r1, #44	; 0x2c
 80046a6:	fb01 f303 	mul.w	r3, r1, r3
 80046aa:	4413      	add	r3, r2
 80046ac:	3360      	adds	r3, #96	; 0x60
 80046ae:	2204      	movs	r2, #4
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	e021      	b.n	80046f8 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	212c      	movs	r1, #44	; 0x2c
 80046ba:	fb01 f303 	mul.w	r3, r1, r3
 80046be:	4413      	add	r3, r2
 80046c0:	3360      	adds	r3, #96	; 0x60
 80046c2:	2202      	movs	r2, #2
 80046c4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046dc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046e4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f2:	461a      	mov	r2, r3
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004704:	461a      	mov	r2, r3
 8004706:	2302      	movs	r3, #2
 8004708:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	b2d9      	uxtb	r1, r3
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	202c      	movs	r0, #44	; 0x2c
 8004714:	fb00 f303 	mul.w	r3, r0, r3
 8004718:	4413      	add	r3, r2
 800471a:	3360      	adds	r3, #96	; 0x60
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f005 fffb 	bl	800a71c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004726:	bf00      	nop
 8004728:	3720      	adds	r7, #32
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b08a      	sub	sp, #40	; 0x28
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	0c5b      	lsrs	r3, r3, #17
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004762:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d004      	beq.n	8004774 <HCD_RXQLVL_IRQHandler+0x46>
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b05      	cmp	r3, #5
 800476e:	f000 80a9 	beq.w	80048c4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004772:	e0aa      	b.n	80048ca <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 80a6 	beq.w	80048c8 <HCD_RXQLVL_IRQHandler+0x19a>
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	212c      	movs	r1, #44	; 0x2c
 8004782:	fb01 f303 	mul.w	r3, r1, r3
 8004786:	4413      	add	r3, r2
 8004788:	3344      	adds	r3, #68	; 0x44
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 809b 	beq.w	80048c8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	212c      	movs	r1, #44	; 0x2c
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	4413      	add	r3, r2
 800479e:	3350      	adds	r3, #80	; 0x50
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	441a      	add	r2, r3
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	202c      	movs	r0, #44	; 0x2c
 80047ac:	fb00 f303 	mul.w	r3, r0, r3
 80047b0:	440b      	add	r3, r1
 80047b2:	334c      	adds	r3, #76	; 0x4c
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d87a      	bhi.n	80048b0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	212c      	movs	r1, #44	; 0x2c
 80047c4:	fb01 f303 	mul.w	r3, r1, r3
 80047c8:	4413      	add	r3, r2
 80047ca:	3344      	adds	r3, #68	; 0x44
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	b292      	uxth	r2, r2
 80047d2:	4619      	mov	r1, r3
 80047d4:	f003 f983 	bl	8007ade <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	212c      	movs	r1, #44	; 0x2c
 80047de:	fb01 f303 	mul.w	r3, r1, r3
 80047e2:	4413      	add	r3, r2
 80047e4:	3344      	adds	r3, #68	; 0x44
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	441a      	add	r2, r3
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	202c      	movs	r0, #44	; 0x2c
 80047f2:	fb00 f303 	mul.w	r3, r0, r3
 80047f6:	440b      	add	r3, r1
 80047f8:	3344      	adds	r3, #68	; 0x44
 80047fa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	212c      	movs	r1, #44	; 0x2c
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	4413      	add	r3, r2
 8004808:	3350      	adds	r3, #80	; 0x50
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	441a      	add	r2, r3
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	202c      	movs	r0, #44	; 0x2c
 8004816:	fb00 f303 	mul.w	r3, r0, r3
 800481a:	440b      	add	r3, r1
 800481c:	3350      	adds	r3, #80	; 0x50
 800481e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	4413      	add	r3, r2
 8004828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	0cdb      	lsrs	r3, r3, #19
 8004830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004834:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	212c      	movs	r1, #44	; 0x2c
 800483c:	fb01 f303 	mul.w	r3, r1, r3
 8004840:	4413      	add	r3, r2
 8004842:	3340      	adds	r3, #64	; 0x40
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	4293      	cmp	r3, r2
 800484c:	d13c      	bne.n	80048c8 <HCD_RXQLVL_IRQHandler+0x19a>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d039      	beq.n	80048c8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	4413      	add	r3, r2
 800485c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800486a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004872:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	4413      	add	r3, r2
 800487c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004880:	461a      	mov	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	212c      	movs	r1, #44	; 0x2c
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	4413      	add	r3, r2
 8004892:	3354      	adds	r3, #84	; 0x54
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	f083 0301 	eor.w	r3, r3, #1
 800489a:	b2d8      	uxtb	r0, r3
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	212c      	movs	r1, #44	; 0x2c
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	3354      	adds	r3, #84	; 0x54
 80048aa:	4602      	mov	r2, r0
 80048ac:	701a      	strb	r2, [r3, #0]
      break;
 80048ae:	e00b      	b.n	80048c8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	212c      	movs	r1, #44	; 0x2c
 80048b6:	fb01 f303 	mul.w	r3, r1, r3
 80048ba:	4413      	add	r3, r2
 80048bc:	3360      	adds	r3, #96	; 0x60
 80048be:	2204      	movs	r2, #4
 80048c0:	701a      	strb	r2, [r3, #0]
      break;
 80048c2:	e001      	b.n	80048c8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80048c4:	bf00      	nop
 80048c6:	e000      	b.n	80048ca <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80048c8:	bf00      	nop
  }
}
 80048ca:	bf00      	nop
 80048cc:	3728      	adds	r7, #40	; 0x28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b086      	sub	sp, #24
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80048fe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b02      	cmp	r3, #2
 8004908:	d10b      	bne.n	8004922 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b01      	cmp	r3, #1
 8004912:	d102      	bne.n	800491a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f005 fee5 	bl	800a6e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f043 0302 	orr.w	r3, r3, #2
 8004920:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b08      	cmp	r3, #8
 800492a:	d132      	bne.n	8004992 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f043 0308 	orr.w	r3, r3, #8
 8004932:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b04      	cmp	r3, #4
 800493c:	d126      	bne.n	800498c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d113      	bne.n	800496e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800494c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004950:	d106      	bne.n	8004960 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2102      	movs	r1, #2
 8004958:	4618      	mov	r0, r3
 800495a:	f003 f9fb 	bl	8007d54 <USB_InitFSLSPClkSel>
 800495e:	e011      	b.n	8004984 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2101      	movs	r1, #1
 8004966:	4618      	mov	r0, r3
 8004968:	f003 f9f4 	bl	8007d54 <USB_InitFSLSPClkSel>
 800496c:	e00a      	b.n	8004984 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d106      	bne.n	8004984 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800497c:	461a      	mov	r2, r3
 800497e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004982:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f005 fed7 	bl	800a738 <HAL_HCD_PortEnabled_Callback>
 800498a:	e002      	b.n	8004992 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f005 fee1 	bl	800a754 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b20      	cmp	r3, #32
 800499a:	d103      	bne.n	80049a4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f043 0320 	orr.w	r3, r3, #32
 80049a2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049aa:	461a      	mov	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6013      	str	r3, [r2, #0]
}
 80049b0:	bf00      	nop
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e12b      	b.n	8004c22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fd fbdc 	bl	800219c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2224      	movs	r2, #36	; 0x24
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0201 	bic.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a1c:	f001 f9fc 	bl	8005e18 <HAL_RCC_GetPCLK1Freq>
 8004a20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	4a81      	ldr	r2, [pc, #516]	; (8004c2c <HAL_I2C_Init+0x274>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d807      	bhi.n	8004a3c <HAL_I2C_Init+0x84>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4a80      	ldr	r2, [pc, #512]	; (8004c30 <HAL_I2C_Init+0x278>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	bf94      	ite	ls
 8004a34:	2301      	movls	r3, #1
 8004a36:	2300      	movhi	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	e006      	b.n	8004a4a <HAL_I2C_Init+0x92>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4a7d      	ldr	r2, [pc, #500]	; (8004c34 <HAL_I2C_Init+0x27c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	bf94      	ite	ls
 8004a44:	2301      	movls	r3, #1
 8004a46:	2300      	movhi	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e0e7      	b.n	8004c22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4a78      	ldr	r2, [pc, #480]	; (8004c38 <HAL_I2C_Init+0x280>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	0c9b      	lsrs	r3, r3, #18
 8004a5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4a6a      	ldr	r2, [pc, #424]	; (8004c2c <HAL_I2C_Init+0x274>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d802      	bhi.n	8004a8c <HAL_I2C_Init+0xd4>
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	e009      	b.n	8004aa0 <HAL_I2C_Init+0xe8>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
 8004a96:	4a69      	ldr	r2, [pc, #420]	; (8004c3c <HAL_I2C_Init+0x284>)
 8004a98:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9c:	099b      	lsrs	r3, r3, #6
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6812      	ldr	r2, [r2, #0]
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ab2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	495c      	ldr	r1, [pc, #368]	; (8004c2c <HAL_I2C_Init+0x274>)
 8004abc:	428b      	cmp	r3, r1
 8004abe:	d819      	bhi.n	8004af4 <HAL_I2C_Init+0x13c>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	1e59      	subs	r1, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ace:	1c59      	adds	r1, r3, #1
 8004ad0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ad4:	400b      	ands	r3, r1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <HAL_I2C_Init+0x138>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	1e59      	subs	r1, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ae8:	3301      	adds	r3, #1
 8004aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aee:	e051      	b.n	8004b94 <HAL_I2C_Init+0x1dc>
 8004af0:	2304      	movs	r3, #4
 8004af2:	e04f      	b.n	8004b94 <HAL_I2C_Init+0x1dc>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d111      	bne.n	8004b20 <HAL_I2C_Init+0x168>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	1e58      	subs	r0, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6859      	ldr	r1, [r3, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	440b      	add	r3, r1
 8004b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b0e:	3301      	adds	r3, #1
 8004b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bf0c      	ite	eq
 8004b18:	2301      	moveq	r3, #1
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	e012      	b.n	8004b46 <HAL_I2C_Init+0x18e>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	1e58      	subs	r0, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6859      	ldr	r1, [r3, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	0099      	lsls	r1, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b36:	3301      	adds	r3, #1
 8004b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	bf0c      	ite	eq
 8004b40:	2301      	moveq	r3, #1
 8004b42:	2300      	movne	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_I2C_Init+0x196>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e022      	b.n	8004b94 <HAL_I2C_Init+0x1dc>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10e      	bne.n	8004b74 <HAL_I2C_Init+0x1bc>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1e58      	subs	r0, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6859      	ldr	r1, [r3, #4]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	440b      	add	r3, r1
 8004b64:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b68:	3301      	adds	r3, #1
 8004b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b72:	e00f      	b.n	8004b94 <HAL_I2C_Init+0x1dc>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1e58      	subs	r0, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	0099      	lsls	r1, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	6809      	ldr	r1, [r1, #0]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69da      	ldr	r2, [r3, #28]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6911      	ldr	r1, [r2, #16]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68d2      	ldr	r2, [r2, #12]
 8004bce:	4311      	orrs	r1, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695a      	ldr	r2, [r3, #20]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	000186a0 	.word	0x000186a0
 8004c30:	001e847f 	.word	0x001e847f
 8004c34:	003d08ff 	.word	0x003d08ff
 8004c38:	431bde83 	.word	0x431bde83
 8004c3c:	10624dd3 	.word	0x10624dd3

08004c40 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e128      	b.n	8004ea4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a90      	ldr	r2, [pc, #576]	; (8004eac <HAL_I2S_Init+0x26c>)
 8004c6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7fd faff 	bl	8002270 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2202      	movs	r2, #2
 8004c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6812      	ldr	r2, [r2, #0]
 8004c84:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c88:	f023 030f 	bic.w	r3, r3, #15
 8004c8c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2202      	movs	r2, #2
 8004c94:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d060      	beq.n	8004d60 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d102      	bne.n	8004cac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004ca6:	2310      	movs	r3, #16
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	e001      	b.n	8004cb0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004cac:	2320      	movs	r3, #32
 8004cae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d802      	bhi.n	8004cbe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	f001 f9a0 	bl	8006004 <HAL_RCCEx_GetPeriphCLKFreq>
 8004cc4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cce:	d125      	bne.n	8004d1c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d010      	beq.n	8004cfa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	461a      	mov	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	3305      	adds	r3, #5
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	e01f      	b.n	8004d3a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d16:	3305      	adds	r3, #5
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	e00e      	b.n	8004d3a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d36:	3305      	adds	r3, #5
 8004d38:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	4a5c      	ldr	r2, [pc, #368]	; (8004eb0 <HAL_I2S_Init+0x270>)
 8004d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d42:	08db      	lsrs	r3, r3, #3
 8004d44:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	085b      	lsrs	r3, r3, #1
 8004d56:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	021b      	lsls	r3, r3, #8
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	e003      	b.n	8004d68 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004d60:	2302      	movs	r3, #2
 8004d62:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d902      	bls.n	8004d74 <HAL_I2S_Init+0x134>
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	2bff      	cmp	r3, #255	; 0xff
 8004d72:	d907      	bls.n	8004d84 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d78:	f043 0210 	orr.w	r2, r3, #16
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e08f      	b.n	8004ea4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691a      	ldr	r2, [r3, #16]
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	ea42 0103 	orr.w	r1, r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004da2:	f023 030f 	bic.w	r3, r3, #15
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6851      	ldr	r1, [r2, #4]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6892      	ldr	r2, [r2, #8]
 8004dae:	4311      	orrs	r1, r2
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	68d2      	ldr	r2, [r2, #12]
 8004db4:	4311      	orrs	r1, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6992      	ldr	r2, [r2, #24]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dc6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d161      	bne.n	8004e94 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a38      	ldr	r2, [pc, #224]	; (8004eb4 <HAL_I2S_Init+0x274>)
 8004dd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a37      	ldr	r2, [pc, #220]	; (8004eb8 <HAL_I2S_Init+0x278>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d101      	bne.n	8004de4 <HAL_I2S_Init+0x1a4>
 8004de0:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <HAL_I2S_Init+0x27c>)
 8004de2:	e001      	b.n	8004de8 <HAL_I2S_Init+0x1a8>
 8004de4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	4932      	ldr	r1, [pc, #200]	; (8004eb8 <HAL_I2S_Init+0x278>)
 8004df0:	428a      	cmp	r2, r1
 8004df2:	d101      	bne.n	8004df8 <HAL_I2S_Init+0x1b8>
 8004df4:	4a31      	ldr	r2, [pc, #196]	; (8004ebc <HAL_I2S_Init+0x27c>)
 8004df6:	e001      	b.n	8004dfc <HAL_I2S_Init+0x1bc>
 8004df8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004dfc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004e00:	f023 030f 	bic.w	r3, r3, #15
 8004e04:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a2b      	ldr	r2, [pc, #172]	; (8004eb8 <HAL_I2S_Init+0x278>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d101      	bne.n	8004e14 <HAL_I2S_Init+0x1d4>
 8004e10:	4b2a      	ldr	r3, [pc, #168]	; (8004ebc <HAL_I2S_Init+0x27c>)
 8004e12:	e001      	b.n	8004e18 <HAL_I2S_Init+0x1d8>
 8004e14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e18:	2202      	movs	r2, #2
 8004e1a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a25      	ldr	r2, [pc, #148]	; (8004eb8 <HAL_I2S_Init+0x278>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d101      	bne.n	8004e2a <HAL_I2S_Init+0x1ea>
 8004e26:	4b25      	ldr	r3, [pc, #148]	; (8004ebc <HAL_I2S_Init+0x27c>)
 8004e28:	e001      	b.n	8004e2e <HAL_I2S_Init+0x1ee>
 8004e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3a:	d003      	beq.n	8004e44 <HAL_I2S_Init+0x204>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d103      	bne.n	8004e4c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	e001      	b.n	8004e50 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e64:	4313      	orrs	r3, r2
 8004e66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	897b      	ldrh	r3, [r7, #10]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e7c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a0d      	ldr	r2, [pc, #52]	; (8004eb8 <HAL_I2S_Init+0x278>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d101      	bne.n	8004e8c <HAL_I2S_Init+0x24c>
 8004e88:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <HAL_I2S_Init+0x27c>)
 8004e8a:	e001      	b.n	8004e90 <HAL_I2S_Init+0x250>
 8004e8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e90:	897a      	ldrh	r2, [r7, #10]
 8004e92:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	08004fb7 	.word	0x08004fb7
 8004eb0:	cccccccd 	.word	0xcccccccd
 8004eb4:	080050cd 	.word	0x080050cd
 8004eb8:	40003800 	.word	0x40003800
 8004ebc:	40003400 	.word	0x40003400

08004ec0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	881a      	ldrh	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	1c9a      	adds	r2, r3, #2
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10e      	bne.n	8004f50 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f40:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff ffb8 	bl	8004ec0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	b292      	uxth	r2, r2
 8004f6c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	1c9a      	adds	r2, r3, #2
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10e      	bne.n	8004fae <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f9e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff ff93 	bl	8004ed4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004fae:	bf00      	nop
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b086      	sub	sp, #24
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d13a      	bne.n	8005048 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d109      	bne.n	8004ff0 <I2S_IRQHandler+0x3a>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b40      	cmp	r3, #64	; 0x40
 8004fe8:	d102      	bne.n	8004ff0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff ffb4 	bl	8004f58 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b40      	cmp	r3, #64	; 0x40
 8004ff8:	d126      	bne.n	8005048 <I2S_IRQHandler+0x92>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b20      	cmp	r3, #32
 8005006:	d11f      	bne.n	8005048 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005016:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005018:	2300      	movs	r3, #0
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503a:	f043 0202 	orr.w	r2, r3, #2
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff ff50 	bl	8004ee8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b03      	cmp	r3, #3
 8005052:	d136      	bne.n	80050c2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b02      	cmp	r3, #2
 800505c:	d109      	bne.n	8005072 <I2S_IRQHandler+0xbc>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005068:	2b80      	cmp	r3, #128	; 0x80
 800506a:	d102      	bne.n	8005072 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff ff45 	bl	8004efc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b08      	cmp	r3, #8
 800507a:	d122      	bne.n	80050c2 <I2S_IRQHandler+0x10c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b20      	cmp	r3, #32
 8005088:	d11b      	bne.n	80050c2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005098:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b4:	f043 0204 	orr.w	r2, r3, #4
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff ff13 	bl	8004ee8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050c2:	bf00      	nop
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4aa2      	ldr	r2, [pc, #648]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d101      	bne.n	80050ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80050e6:	4ba2      	ldr	r3, [pc, #648]	; (8005370 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050e8:	e001      	b.n	80050ee <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80050ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a9b      	ldr	r2, [pc, #620]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d101      	bne.n	8005108 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005104:	4b9a      	ldr	r3, [pc, #616]	; (8005370 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005106:	e001      	b.n	800510c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005108:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005118:	d004      	beq.n	8005124 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	f040 8099 	bne.w	8005256 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b02      	cmp	r3, #2
 800512c:	d107      	bne.n	800513e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f925 	bl	8005388 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b01      	cmp	r3, #1
 8005146:	d107      	bne.n	8005158 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f9c8 	bl	80054e8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515e:	2b40      	cmp	r3, #64	; 0x40
 8005160:	d13a      	bne.n	80051d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b00      	cmp	r3, #0
 800516a:	d035      	beq.n	80051d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a7e      	ldr	r2, [pc, #504]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d101      	bne.n	800517a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005176:	4b7e      	ldr	r3, [pc, #504]	; (8005370 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005178:	e001      	b.n	800517e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800517a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4979      	ldr	r1, [pc, #484]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005186:	428b      	cmp	r3, r1
 8005188:	d101      	bne.n	800518e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800518a:	4b79      	ldr	r3, [pc, #484]	; (8005370 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800518c:	e001      	b.n	8005192 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800518e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005192:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005196:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ca:	f043 0202 	orr.w	r2, r3, #2
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff fe88 	bl	8004ee8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b08      	cmp	r3, #8
 80051e0:	f040 80be 	bne.w	8005360 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 80b8 	beq.w	8005360 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051fe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a59      	ldr	r2, [pc, #356]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d101      	bne.n	800520e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800520a:	4b59      	ldr	r3, [pc, #356]	; (8005370 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800520c:	e001      	b.n	8005212 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800520e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4954      	ldr	r1, [pc, #336]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800521a:	428b      	cmp	r3, r1
 800521c:	d101      	bne.n	8005222 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800521e:	4b54      	ldr	r3, [pc, #336]	; (8005370 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005220:	e001      	b.n	8005226 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005222:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005226:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800522a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800522c:	2300      	movs	r3, #0
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	60bb      	str	r3, [r7, #8]
 8005238:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005246:	f043 0204 	orr.w	r2, r3, #4
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff fe4a 	bl	8004ee8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005254:	e084      	b.n	8005360 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b02      	cmp	r3, #2
 800525e:	d107      	bne.n	8005270 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f8be 	bl	80053ec <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b01      	cmp	r3, #1
 8005278:	d107      	bne.n	800528a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f8fd 	bl	8005484 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005290:	2b40      	cmp	r3, #64	; 0x40
 8005292:	d12f      	bne.n	80052f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b00      	cmp	r3, #0
 800529c:	d02a      	beq.n	80052f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052ac:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a2e      	ldr	r2, [pc, #184]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d101      	bne.n	80052bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80052b8:	4b2d      	ldr	r3, [pc, #180]	; (8005370 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052ba:	e001      	b.n	80052c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80052bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4929      	ldr	r1, [pc, #164]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052c8:	428b      	cmp	r3, r1
 80052ca:	d101      	bne.n	80052d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80052cc:	4b28      	ldr	r3, [pc, #160]	; (8005370 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052ce:	e001      	b.n	80052d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80052d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052d8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	f043 0202 	orr.w	r2, r3, #2
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff fdfa 	bl	8004ee8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d131      	bne.n	8005362 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d02c      	beq.n	8005362 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a17      	ldr	r2, [pc, #92]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d101      	bne.n	8005316 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005312:	4b17      	ldr	r3, [pc, #92]	; (8005370 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005314:	e001      	b.n	800531a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005316:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4912      	ldr	r1, [pc, #72]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005322:	428b      	cmp	r3, r1
 8005324:	d101      	bne.n	800532a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005326:	4b12      	ldr	r3, [pc, #72]	; (8005370 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005328:	e001      	b.n	800532e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800532a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800532e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005332:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005342:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005350:	f043 0204 	orr.w	r2, r3, #4
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff fdc5 	bl	8004ee8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800535e:	e000      	b.n	8005362 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005360:	bf00      	nop
}
 8005362:	bf00      	nop
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40003800 	.word	0x40003800
 8005370:	40003400 	.word	0x40003400

08005374 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	1c99      	adds	r1, r3, #2
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6251      	str	r1, [r2, #36]	; 0x24
 800539a:	881a      	ldrh	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d113      	bne.n	80053e2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff ffc9 	bl	8005374 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	1c99      	adds	r1, r3, #2
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6251      	str	r1, [r2, #36]	; 0x24
 80053fe:	8819      	ldrh	r1, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a1d      	ldr	r2, [pc, #116]	; (800547c <I2SEx_TxISR_I2SExt+0x90>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d101      	bne.n	800540e <I2SEx_TxISR_I2SExt+0x22>
 800540a:	4b1d      	ldr	r3, [pc, #116]	; (8005480 <I2SEx_TxISR_I2SExt+0x94>)
 800540c:	e001      	b.n	8005412 <I2SEx_TxISR_I2SExt+0x26>
 800540e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005412:	460a      	mov	r2, r1
 8005414:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d121      	bne.n	8005472 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a12      	ldr	r2, [pc, #72]	; (800547c <I2SEx_TxISR_I2SExt+0x90>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d101      	bne.n	800543c <I2SEx_TxISR_I2SExt+0x50>
 8005438:	4b11      	ldr	r3, [pc, #68]	; (8005480 <I2SEx_TxISR_I2SExt+0x94>)
 800543a:	e001      	b.n	8005440 <I2SEx_TxISR_I2SExt+0x54>
 800543c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	490d      	ldr	r1, [pc, #52]	; (800547c <I2SEx_TxISR_I2SExt+0x90>)
 8005448:	428b      	cmp	r3, r1
 800544a:	d101      	bne.n	8005450 <I2SEx_TxISR_I2SExt+0x64>
 800544c:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <I2SEx_TxISR_I2SExt+0x94>)
 800544e:	e001      	b.n	8005454 <I2SEx_TxISR_I2SExt+0x68>
 8005450:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005454:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005458:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d106      	bne.n	8005472 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff ff81 	bl	8005374 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40003800 	.word	0x40003800
 8005480:	40003400 	.word	0x40003400

08005484 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68d8      	ldr	r0, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005496:	1c99      	adds	r1, r3, #2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800549c:	b282      	uxth	r2, r0
 800549e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d113      	bne.n	80054e0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054c6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff ff4a 	bl	8005374 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a20      	ldr	r2, [pc, #128]	; (8005578 <I2SEx_RxISR_I2SExt+0x90>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d101      	bne.n	80054fe <I2SEx_RxISR_I2SExt+0x16>
 80054fa:	4b20      	ldr	r3, [pc, #128]	; (800557c <I2SEx_RxISR_I2SExt+0x94>)
 80054fc:	e001      	b.n	8005502 <I2SEx_RxISR_I2SExt+0x1a>
 80054fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005502:	68d8      	ldr	r0, [r3, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	1c99      	adds	r1, r3, #2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800550e:	b282      	uxth	r2, r0
 8005510:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d121      	bne.n	800556e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a12      	ldr	r2, [pc, #72]	; (8005578 <I2SEx_RxISR_I2SExt+0x90>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d101      	bne.n	8005538 <I2SEx_RxISR_I2SExt+0x50>
 8005534:	4b11      	ldr	r3, [pc, #68]	; (800557c <I2SEx_RxISR_I2SExt+0x94>)
 8005536:	e001      	b.n	800553c <I2SEx_RxISR_I2SExt+0x54>
 8005538:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	490d      	ldr	r1, [pc, #52]	; (8005578 <I2SEx_RxISR_I2SExt+0x90>)
 8005544:	428b      	cmp	r3, r1
 8005546:	d101      	bne.n	800554c <I2SEx_RxISR_I2SExt+0x64>
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <I2SEx_RxISR_I2SExt+0x94>)
 800554a:	e001      	b.n	8005550 <I2SEx_RxISR_I2SExt+0x68>
 800554c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005550:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005554:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d106      	bne.n	800556e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff ff03 	bl	8005374 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40003800 	.word	0x40003800
 800557c:	40003400 	.word	0x40003400

08005580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e264      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d075      	beq.n	800568a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800559e:	4ba3      	ldr	r3, [pc, #652]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 030c 	and.w	r3, r3, #12
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d00c      	beq.n	80055c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055aa:	4ba0      	ldr	r3, [pc, #640]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d112      	bne.n	80055dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055b6:	4b9d      	ldr	r3, [pc, #628]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c2:	d10b      	bne.n	80055dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c4:	4b99      	ldr	r3, [pc, #612]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d05b      	beq.n	8005688 <HAL_RCC_OscConfig+0x108>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d157      	bne.n	8005688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e23f      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e4:	d106      	bne.n	80055f4 <HAL_RCC_OscConfig+0x74>
 80055e6:	4b91      	ldr	r3, [pc, #580]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a90      	ldr	r2, [pc, #576]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80055ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	e01d      	b.n	8005630 <HAL_RCC_OscConfig+0xb0>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055fc:	d10c      	bne.n	8005618 <HAL_RCC_OscConfig+0x98>
 80055fe:	4b8b      	ldr	r3, [pc, #556]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a8a      	ldr	r2, [pc, #552]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	4b88      	ldr	r3, [pc, #544]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a87      	ldr	r2, [pc, #540]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	e00b      	b.n	8005630 <HAL_RCC_OscConfig+0xb0>
 8005618:	4b84      	ldr	r3, [pc, #528]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a83      	ldr	r2, [pc, #524]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 800561e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005622:	6013      	str	r3, [r2, #0]
 8005624:	4b81      	ldr	r3, [pc, #516]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a80      	ldr	r2, [pc, #512]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 800562a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800562e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d013      	beq.n	8005660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005638:	f7fd f930 	bl	800289c <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005640:	f7fd f92c 	bl	800289c <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b64      	cmp	r3, #100	; 0x64
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e204      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005652:	4b76      	ldr	r3, [pc, #472]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0f0      	beq.n	8005640 <HAL_RCC_OscConfig+0xc0>
 800565e:	e014      	b.n	800568a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005660:	f7fd f91c 	bl	800289c <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005668:	f7fd f918 	bl	800289c <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b64      	cmp	r3, #100	; 0x64
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e1f0      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800567a:	4b6c      	ldr	r3, [pc, #432]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f0      	bne.n	8005668 <HAL_RCC_OscConfig+0xe8>
 8005686:	e000      	b.n	800568a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d063      	beq.n	800575e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005696:	4b65      	ldr	r3, [pc, #404]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 030c 	and.w	r3, r3, #12
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00b      	beq.n	80056ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056a2:	4b62      	ldr	r3, [pc, #392]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	d11c      	bne.n	80056e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ae:	4b5f      	ldr	r3, [pc, #380]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d116      	bne.n	80056e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ba:	4b5c      	ldr	r3, [pc, #368]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <HAL_RCC_OscConfig+0x152>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d001      	beq.n	80056d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e1c4      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d2:	4b56      	ldr	r3, [pc, #344]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	4952      	ldr	r1, [pc, #328]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056e6:	e03a      	b.n	800575e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d020      	beq.n	8005732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056f0:	4b4f      	ldr	r3, [pc, #316]	; (8005830 <HAL_RCC_OscConfig+0x2b0>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f6:	f7fd f8d1 	bl	800289c <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056fc:	e008      	b.n	8005710 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056fe:	f7fd f8cd 	bl	800289c <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e1a5      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005710:	4b46      	ldr	r3, [pc, #280]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0f0      	beq.n	80056fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800571c:	4b43      	ldr	r3, [pc, #268]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	4940      	ldr	r1, [pc, #256]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 800572c:	4313      	orrs	r3, r2
 800572e:	600b      	str	r3, [r1, #0]
 8005730:	e015      	b.n	800575e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005732:	4b3f      	ldr	r3, [pc, #252]	; (8005830 <HAL_RCC_OscConfig+0x2b0>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005738:	f7fd f8b0 	bl	800289c <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005740:	f7fd f8ac 	bl	800289c <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e184      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005752:	4b36      	ldr	r3, [pc, #216]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d030      	beq.n	80057cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d016      	beq.n	80057a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005772:	4b30      	ldr	r3, [pc, #192]	; (8005834 <HAL_RCC_OscConfig+0x2b4>)
 8005774:	2201      	movs	r2, #1
 8005776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005778:	f7fd f890 	bl	800289c <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005780:	f7fd f88c 	bl	800289c <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e164      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005792:	4b26      	ldr	r3, [pc, #152]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 8005794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0x200>
 800579e:	e015      	b.n	80057cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057a0:	4b24      	ldr	r3, [pc, #144]	; (8005834 <HAL_RCC_OscConfig+0x2b4>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057a6:	f7fd f879 	bl	800289c <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057ae:	f7fd f875 	bl	800289c <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e14d      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057c0:	4b1a      	ldr	r3, [pc, #104]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80057c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1f0      	bne.n	80057ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80a0 	beq.w	800591a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057da:	2300      	movs	r3, #0
 80057dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057de:	4b13      	ldr	r3, [pc, #76]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10f      	bne.n	800580a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ea:	2300      	movs	r3, #0
 80057ec:	60bb      	str	r3, [r7, #8]
 80057ee:	4b0f      	ldr	r3, [pc, #60]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	4a0e      	ldr	r2, [pc, #56]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80057f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f8:	6413      	str	r3, [r2, #64]	; 0x40
 80057fa:	4b0c      	ldr	r3, [pc, #48]	; (800582c <HAL_RCC_OscConfig+0x2ac>)
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005802:	60bb      	str	r3, [r7, #8]
 8005804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005806:	2301      	movs	r3, #1
 8005808:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800580a:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <HAL_RCC_OscConfig+0x2b8>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005812:	2b00      	cmp	r3, #0
 8005814:	d121      	bne.n	800585a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005816:	4b08      	ldr	r3, [pc, #32]	; (8005838 <HAL_RCC_OscConfig+0x2b8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a07      	ldr	r2, [pc, #28]	; (8005838 <HAL_RCC_OscConfig+0x2b8>)
 800581c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005822:	f7fd f83b 	bl	800289c <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005828:	e011      	b.n	800584e <HAL_RCC_OscConfig+0x2ce>
 800582a:	bf00      	nop
 800582c:	40023800 	.word	0x40023800
 8005830:	42470000 	.word	0x42470000
 8005834:	42470e80 	.word	0x42470e80
 8005838:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800583c:	f7fd f82e 	bl	800289c <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e106      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800584e:	4b85      	ldr	r3, [pc, #532]	; (8005a64 <HAL_RCC_OscConfig+0x4e4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d106      	bne.n	8005870 <HAL_RCC_OscConfig+0x2f0>
 8005862:	4b81      	ldr	r3, [pc, #516]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	4a80      	ldr	r2, [pc, #512]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	6713      	str	r3, [r2, #112]	; 0x70
 800586e:	e01c      	b.n	80058aa <HAL_RCC_OscConfig+0x32a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b05      	cmp	r3, #5
 8005876:	d10c      	bne.n	8005892 <HAL_RCC_OscConfig+0x312>
 8005878:	4b7b      	ldr	r3, [pc, #492]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 800587a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587c:	4a7a      	ldr	r2, [pc, #488]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 800587e:	f043 0304 	orr.w	r3, r3, #4
 8005882:	6713      	str	r3, [r2, #112]	; 0x70
 8005884:	4b78      	ldr	r3, [pc, #480]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 8005886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005888:	4a77      	ldr	r2, [pc, #476]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	6713      	str	r3, [r2, #112]	; 0x70
 8005890:	e00b      	b.n	80058aa <HAL_RCC_OscConfig+0x32a>
 8005892:	4b75      	ldr	r3, [pc, #468]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 8005894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005896:	4a74      	ldr	r2, [pc, #464]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 8005898:	f023 0301 	bic.w	r3, r3, #1
 800589c:	6713      	str	r3, [r2, #112]	; 0x70
 800589e:	4b72      	ldr	r3, [pc, #456]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 80058a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a2:	4a71      	ldr	r2, [pc, #452]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 80058a4:	f023 0304 	bic.w	r3, r3, #4
 80058a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d015      	beq.n	80058de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b2:	f7fc fff3 	bl	800289c <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b8:	e00a      	b.n	80058d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ba:	f7fc ffef 	bl	800289c <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e0c5      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d0:	4b65      	ldr	r3, [pc, #404]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0ee      	beq.n	80058ba <HAL_RCC_OscConfig+0x33a>
 80058dc:	e014      	b.n	8005908 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058de:	f7fc ffdd 	bl	800289c <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058e4:	e00a      	b.n	80058fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058e6:	f7fc ffd9 	bl	800289c <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e0af      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058fc:	4b5a      	ldr	r3, [pc, #360]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ee      	bne.n	80058e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d105      	bne.n	800591a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800590e:	4b56      	ldr	r3, [pc, #344]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	4a55      	ldr	r2, [pc, #340]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 8005914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005918:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 809b 	beq.w	8005a5a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005924:	4b50      	ldr	r3, [pc, #320]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 030c 	and.w	r3, r3, #12
 800592c:	2b08      	cmp	r3, #8
 800592e:	d05c      	beq.n	80059ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d141      	bne.n	80059bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005938:	4b4c      	ldr	r3, [pc, #304]	; (8005a6c <HAL_RCC_OscConfig+0x4ec>)
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593e:	f7fc ffad 	bl	800289c <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005944:	e008      	b.n	8005958 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005946:	f7fc ffa9 	bl	800289c <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e081      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005958:	4b43      	ldr	r3, [pc, #268]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1f0      	bne.n	8005946 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	019b      	lsls	r3, r3, #6
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597a:	085b      	lsrs	r3, r3, #1
 800597c:	3b01      	subs	r3, #1
 800597e:	041b      	lsls	r3, r3, #16
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	061b      	lsls	r3, r3, #24
 8005988:	4937      	ldr	r1, [pc, #220]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 800598a:	4313      	orrs	r3, r2
 800598c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800598e:	4b37      	ldr	r3, [pc, #220]	; (8005a6c <HAL_RCC_OscConfig+0x4ec>)
 8005990:	2201      	movs	r2, #1
 8005992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005994:	f7fc ff82 	bl	800289c <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800599c:	f7fc ff7e 	bl	800289c <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e056      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ae:	4b2e      	ldr	r3, [pc, #184]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0f0      	beq.n	800599c <HAL_RCC_OscConfig+0x41c>
 80059ba:	e04e      	b.n	8005a5a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059bc:	4b2b      	ldr	r3, [pc, #172]	; (8005a6c <HAL_RCC_OscConfig+0x4ec>)
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c2:	f7fc ff6b 	bl	800289c <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ca:	f7fc ff67 	bl	800289c <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e03f      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059dc:	4b22      	ldr	r3, [pc, #136]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1f0      	bne.n	80059ca <HAL_RCC_OscConfig+0x44a>
 80059e8:	e037      	b.n	8005a5a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e032      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059f6:	4b1c      	ldr	r3, [pc, #112]	; (8005a68 <HAL_RCC_OscConfig+0x4e8>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d028      	beq.n	8005a56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d121      	bne.n	8005a56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d11a      	bne.n	8005a56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a26:	4013      	ands	r3, r2
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d111      	bne.n	8005a56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	085b      	lsrs	r3, r3, #1
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d107      	bne.n	8005a56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d001      	beq.n	8005a5a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	40007000 	.word	0x40007000
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	42470060 	.word	0x42470060

08005a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0cc      	b.n	8005c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a84:	4b68      	ldr	r3, [pc, #416]	; (8005c28 <HAL_RCC_ClockConfig+0x1b8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d90c      	bls.n	8005aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a92:	4b65      	ldr	r3, [pc, #404]	; (8005c28 <HAL_RCC_ClockConfig+0x1b8>)
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a9a:	4b63      	ldr	r3, [pc, #396]	; (8005c28 <HAL_RCC_ClockConfig+0x1b8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d001      	beq.n	8005aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e0b8      	b.n	8005c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d020      	beq.n	8005afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d005      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ac4:	4b59      	ldr	r3, [pc, #356]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	4a58      	ldr	r2, [pc, #352]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005adc:	4b53      	ldr	r3, [pc, #332]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	4a52      	ldr	r2, [pc, #328]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ae8:	4b50      	ldr	r3, [pc, #320]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	494d      	ldr	r1, [pc, #308]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d044      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d107      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b0e:	4b47      	ldr	r3, [pc, #284]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d119      	bne.n	8005b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e07f      	b.n	8005c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d003      	beq.n	8005b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d107      	bne.n	8005b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b2e:	4b3f      	ldr	r3, [pc, #252]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d109      	bne.n	8005b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e06f      	b.n	8005c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b3e:	4b3b      	ldr	r3, [pc, #236]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e067      	b.n	8005c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b4e:	4b37      	ldr	r3, [pc, #220]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f023 0203 	bic.w	r2, r3, #3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	4934      	ldr	r1, [pc, #208]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b60:	f7fc fe9c 	bl	800289c <HAL_GetTick>
 8005b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b66:	e00a      	b.n	8005b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b68:	f7fc fe98 	bl	800289c <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e04f      	b.n	8005c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7e:	4b2b      	ldr	r3, [pc, #172]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 020c 	and.w	r2, r3, #12
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d1eb      	bne.n	8005b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b90:	4b25      	ldr	r3, [pc, #148]	; (8005c28 <HAL_RCC_ClockConfig+0x1b8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0307 	and.w	r3, r3, #7
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d20c      	bcs.n	8005bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9e:	4b22      	ldr	r3, [pc, #136]	; (8005c28 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba6:	4b20      	ldr	r3, [pc, #128]	; (8005c28 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d001      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e032      	b.n	8005c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d008      	beq.n	8005bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bc4:	4b19      	ldr	r3, [pc, #100]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	4916      	ldr	r1, [pc, #88]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005be2:	4b12      	ldr	r3, [pc, #72]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	490e      	ldr	r1, [pc, #56]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bf6:	f000 f821 	bl	8005c3c <HAL_RCC_GetSysClockFreq>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <HAL_RCC_ClockConfig+0x1bc>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	091b      	lsrs	r3, r3, #4
 8005c02:	f003 030f 	and.w	r3, r3, #15
 8005c06:	490a      	ldr	r1, [pc, #40]	; (8005c30 <HAL_RCC_ClockConfig+0x1c0>)
 8005c08:	5ccb      	ldrb	r3, [r1, r3]
 8005c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c0e:	4a09      	ldr	r2, [pc, #36]	; (8005c34 <HAL_RCC_ClockConfig+0x1c4>)
 8005c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c12:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <HAL_RCC_ClockConfig+0x1c8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fc fdfc 	bl	8002814 <HAL_InitTick>

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40023c00 	.word	0x40023c00
 8005c2c:	40023800 	.word	0x40023800
 8005c30:	0800b268 	.word	0x0800b268
 8005c34:	20000074 	.word	0x20000074
 8005c38:	20000078 	.word	0x20000078

08005c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	607b      	str	r3, [r7, #4]
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c54:	4b67      	ldr	r3, [pc, #412]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 030c 	and.w	r3, r3, #12
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d00d      	beq.n	8005c7c <HAL_RCC_GetSysClockFreq+0x40>
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	f200 80bd 	bhi.w	8005de0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_RCC_GetSysClockFreq+0x34>
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d003      	beq.n	8005c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c6e:	e0b7      	b.n	8005de0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c70:	4b61      	ldr	r3, [pc, #388]	; (8005df8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c72:	60bb      	str	r3, [r7, #8]
       break;
 8005c74:	e0b7      	b.n	8005de6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c76:	4b61      	ldr	r3, [pc, #388]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005c78:	60bb      	str	r3, [r7, #8]
      break;
 8005c7a:	e0b4      	b.n	8005de6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c7c:	4b5d      	ldr	r3, [pc, #372]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c86:	4b5b      	ldr	r3, [pc, #364]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d04d      	beq.n	8005d2e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c92:	4b58      	ldr	r3, [pc, #352]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	099b      	lsrs	r3, r3, #6
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ca2:	f04f 0100 	mov.w	r1, #0
 8005ca6:	ea02 0800 	and.w	r8, r2, r0
 8005caa:	ea03 0901 	and.w	r9, r3, r1
 8005cae:	4640      	mov	r0, r8
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	f04f 0300 	mov.w	r3, #0
 8005cba:	014b      	lsls	r3, r1, #5
 8005cbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005cc0:	0142      	lsls	r2, r0, #5
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	ebb0 0008 	subs.w	r0, r0, r8
 8005cca:	eb61 0109 	sbc.w	r1, r1, r9
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	f04f 0300 	mov.w	r3, #0
 8005cd6:	018b      	lsls	r3, r1, #6
 8005cd8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005cdc:	0182      	lsls	r2, r0, #6
 8005cde:	1a12      	subs	r2, r2, r0
 8005ce0:	eb63 0301 	sbc.w	r3, r3, r1
 8005ce4:	f04f 0000 	mov.w	r0, #0
 8005ce8:	f04f 0100 	mov.w	r1, #0
 8005cec:	00d9      	lsls	r1, r3, #3
 8005cee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cf2:	00d0      	lsls	r0, r2, #3
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	eb12 0208 	adds.w	r2, r2, r8
 8005cfc:	eb43 0309 	adc.w	r3, r3, r9
 8005d00:	f04f 0000 	mov.w	r0, #0
 8005d04:	f04f 0100 	mov.w	r1, #0
 8005d08:	0259      	lsls	r1, r3, #9
 8005d0a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005d0e:	0250      	lsls	r0, r2, #9
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4610      	mov	r0, r2
 8005d16:	4619      	mov	r1, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	f7fa fa52 	bl	80001c8 <__aeabi_uldivmod>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4613      	mov	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	e04a      	b.n	8005dc4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d2e:	4b31      	ldr	r3, [pc, #196]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	099b      	lsrs	r3, r3, #6
 8005d34:	461a      	mov	r2, r3
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d3e:	f04f 0100 	mov.w	r1, #0
 8005d42:	ea02 0400 	and.w	r4, r2, r0
 8005d46:	ea03 0501 	and.w	r5, r3, r1
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	f04f 0200 	mov.w	r2, #0
 8005d52:	f04f 0300 	mov.w	r3, #0
 8005d56:	014b      	lsls	r3, r1, #5
 8005d58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d5c:	0142      	lsls	r2, r0, #5
 8005d5e:	4610      	mov	r0, r2
 8005d60:	4619      	mov	r1, r3
 8005d62:	1b00      	subs	r0, r0, r4
 8005d64:	eb61 0105 	sbc.w	r1, r1, r5
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	f04f 0300 	mov.w	r3, #0
 8005d70:	018b      	lsls	r3, r1, #6
 8005d72:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d76:	0182      	lsls	r2, r0, #6
 8005d78:	1a12      	subs	r2, r2, r0
 8005d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8005d7e:	f04f 0000 	mov.w	r0, #0
 8005d82:	f04f 0100 	mov.w	r1, #0
 8005d86:	00d9      	lsls	r1, r3, #3
 8005d88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d8c:	00d0      	lsls	r0, r2, #3
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	1912      	adds	r2, r2, r4
 8005d94:	eb45 0303 	adc.w	r3, r5, r3
 8005d98:	f04f 0000 	mov.w	r0, #0
 8005d9c:	f04f 0100 	mov.w	r1, #0
 8005da0:	0299      	lsls	r1, r3, #10
 8005da2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005da6:	0290      	lsls	r0, r2, #10
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4610      	mov	r0, r2
 8005dae:	4619      	mov	r1, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	461a      	mov	r2, r3
 8005db4:	f04f 0300 	mov.w	r3, #0
 8005db8:	f7fa fa06 	bl	80001c8 <__aeabi_uldivmod>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	0c1b      	lsrs	r3, r3, #16
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	3301      	adds	r3, #1
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ddc:	60bb      	str	r3, [r7, #8]
      break;
 8005dde:	e002      	b.n	8005de6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005de0:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005de2:	60bb      	str	r3, [r7, #8]
      break;
 8005de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005de6:	68bb      	ldr	r3, [r7, #8]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005df2:	bf00      	nop
 8005df4:	40023800 	.word	0x40023800
 8005df8:	00f42400 	.word	0x00f42400
 8005dfc:	007a1200 	.word	0x007a1200

08005e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e04:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e06:	681b      	ldr	r3, [r3, #0]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000074 	.word	0x20000074

08005e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e1c:	f7ff fff0 	bl	8005e00 <HAL_RCC_GetHCLKFreq>
 8005e20:	4602      	mov	r2, r0
 8005e22:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	0a9b      	lsrs	r3, r3, #10
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	4903      	ldr	r1, [pc, #12]	; (8005e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e2e:	5ccb      	ldrb	r3, [r1, r3]
 8005e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40023800 	.word	0x40023800
 8005e3c:	0800b278 	.word	0x0800b278

08005e40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d105      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d035      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e68:	4b62      	ldr	r3, [pc, #392]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e6e:	f7fc fd15 	bl	800289c <HAL_GetTick>
 8005e72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e74:	e008      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e76:	f7fc fd11 	bl	800289c <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e0b0      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e88:	4b5b      	ldr	r3, [pc, #364]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f0      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	019a      	lsls	r2, r3, #6
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	071b      	lsls	r3, r3, #28
 8005ea0:	4955      	ldr	r1, [pc, #340]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ea8:	4b52      	ldr	r3, [pc, #328]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005eae:	f7fc fcf5 	bl	800289c <HAL_GetTick>
 8005eb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005eb6:	f7fc fcf1 	bl	800289c <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e090      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ec8:	4b4b      	ldr	r3, [pc, #300]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0f0      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8083 	beq.w	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	4b44      	ldr	r3, [pc, #272]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	4a43      	ldr	r2, [pc, #268]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ef2:	4b41      	ldr	r3, [pc, #260]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005efe:	4b3f      	ldr	r3, [pc, #252]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a3e      	ldr	r2, [pc, #248]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f0a:	f7fc fcc7 	bl	800289c <HAL_GetTick>
 8005f0e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f10:	e008      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f12:	f7fc fcc3 	bl	800289c <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e062      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f24:	4b35      	ldr	r3, [pc, #212]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0f0      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f30:	4b31      	ldr	r3, [pc, #196]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f38:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d02f      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d028      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f4e:	4b2a      	ldr	r3, [pc, #168]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f58:	4b29      	ldr	r3, [pc, #164]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f5e:	4b28      	ldr	r3, [pc, #160]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f64:	4a24      	ldr	r2, [pc, #144]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f6a:	4b23      	ldr	r3, [pc, #140]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d114      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f76:	f7fc fc91 	bl	800289c <HAL_GetTick>
 8005f7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f7c:	e00a      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f7e:	f7fc fc8d 	bl	800289c <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e02a      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f94:	4b18      	ldr	r3, [pc, #96]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0ee      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fac:	d10d      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005fae:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc2:	490d      	ldr	r1, [pc, #52]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	608b      	str	r3, [r1, #8]
 8005fc8:	e005      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005fca:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	4a0a      	ldr	r2, [pc, #40]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fd0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005fd4:	6093      	str	r3, [r2, #8]
 8005fd6:	4b08      	ldr	r3, [pc, #32]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe2:	4905      	ldr	r1, [pc, #20]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	42470068 	.word	0x42470068
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	40007000 	.word	0x40007000
 8006000:	42470e40 	.word	0x42470e40

08006004 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d13e      	bne.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006022:	4b23      	ldr	r3, [pc, #140]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d005      	beq.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d12f      	bne.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006038:	4b1e      	ldr	r3, [pc, #120]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800603a:	617b      	str	r3, [r7, #20]
          break;
 800603c:	e02f      	b.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800603e:	4b1c      	ldr	r3, [pc, #112]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800604a:	d108      	bne.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800604c:	4b18      	ldr	r3, [pc, #96]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006054:	4a18      	ldr	r2, [pc, #96]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006056:	fbb2 f3f3 	udiv	r3, r2, r3
 800605a:	613b      	str	r3, [r7, #16]
 800605c:	e007      	b.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800605e:	4b14      	ldr	r3, [pc, #80]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006066:	4a15      	ldr	r2, [pc, #84]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006068:	fbb2 f3f3 	udiv	r3, r2, r3
 800606c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800606e:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006074:	099b      	lsrs	r3, r3, #6
 8006076:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	fb02 f303 	mul.w	r3, r2, r3
 8006080:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006082:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006088:	0f1b      	lsrs	r3, r3, #28
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	fbb2 f3f3 	udiv	r3, r2, r3
 8006094:	617b      	str	r3, [r7, #20]
          break;
 8006096:	e002      	b.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	617b      	str	r3, [r7, #20]
          break;
 800609c:	bf00      	nop
        }
      }
      break;
 800609e:	bf00      	nop
    }
  }
  return frequency;
 80060a0:	697b      	ldr	r3, [r7, #20]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40023800 	.word	0x40023800
 80060b4:	00bb8000 	.word	0x00bb8000
 80060b8:	007a1200 	.word	0x007a1200
 80060bc:	00f42400 	.word	0x00f42400

080060c0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e01c      	b.n	800610c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	795b      	ldrb	r3, [r3, #5]
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d105      	bne.n	80060e8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fc f92c 	bl	8002340 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0204 	orr.w	r2, r2, #4
 80060fc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e07b      	b.n	800621e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	2b00      	cmp	r3, #0
 800612c:	d108      	bne.n	8006140 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006136:	d009      	beq.n	800614c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	61da      	str	r2, [r3, #28]
 800613e:	e005      	b.n	800614c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fc f90c 	bl	8002384 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006182:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	431a      	orrs	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d0:	ea42 0103 	orr.w	r1, r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	f003 0104 	and.w	r1, r3, #4
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	f003 0210 	and.w	r2, r3, #16
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800620c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b088      	sub	sp, #32
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	603b      	str	r3, [r7, #0]
 8006232:	4613      	mov	r3, r2
 8006234:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_SPI_Transmit+0x22>
 8006244:	2302      	movs	r3, #2
 8006246:	e126      	b.n	8006496 <HAL_SPI_Transmit+0x270>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006250:	f7fc fb24 	bl	800289c <HAL_GetTick>
 8006254:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006256:	88fb      	ldrh	r3, [r7, #6]
 8006258:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b01      	cmp	r3, #1
 8006264:	d002      	beq.n	800626c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006266:	2302      	movs	r3, #2
 8006268:	77fb      	strb	r3, [r7, #31]
    goto error;
 800626a:	e10b      	b.n	8006484 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_SPI_Transmit+0x52>
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d102      	bne.n	800627e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800627c:	e102      	b.n	8006484 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2203      	movs	r2, #3
 8006282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	88fa      	ldrh	r2, [r7, #6]
 8006296:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	88fa      	ldrh	r2, [r7, #6]
 800629c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c4:	d10f      	bne.n	80062e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f0:	2b40      	cmp	r3, #64	; 0x40
 80062f2:	d007      	beq.n	8006304 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006302:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800630c:	d14b      	bne.n	80063a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <HAL_SPI_Transmit+0xf6>
 8006316:	8afb      	ldrh	r3, [r7, #22]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d13e      	bne.n	800639a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006320:	881a      	ldrh	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632c:	1c9a      	adds	r2, r3, #2
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006336:	b29b      	uxth	r3, r3
 8006338:	3b01      	subs	r3, #1
 800633a:	b29a      	uxth	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006340:	e02b      	b.n	800639a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b02      	cmp	r3, #2
 800634e:	d112      	bne.n	8006376 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	881a      	ldrh	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006360:	1c9a      	adds	r2, r3, #2
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	86da      	strh	r2, [r3, #54]	; 0x36
 8006374:	e011      	b.n	800639a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006376:	f7fc fa91 	bl	800289c <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d803      	bhi.n	800638e <HAL_SPI_Transmit+0x168>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800638c:	d102      	bne.n	8006394 <HAL_SPI_Transmit+0x16e>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d102      	bne.n	800639a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006398:	e074      	b.n	8006484 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1ce      	bne.n	8006342 <HAL_SPI_Transmit+0x11c>
 80063a4:	e04c      	b.n	8006440 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <HAL_SPI_Transmit+0x18e>
 80063ae:	8afb      	ldrh	r3, [r7, #22]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d140      	bne.n	8006436 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	330c      	adds	r3, #12
 80063be:	7812      	ldrb	r2, [r2, #0]
 80063c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063da:	e02c      	b.n	8006436 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d113      	bne.n	8006412 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	330c      	adds	r3, #12
 80063f4:	7812      	ldrb	r2, [r2, #0]
 80063f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006410:	e011      	b.n	8006436 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006412:	f7fc fa43 	bl	800289c <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d803      	bhi.n	800642a <HAL_SPI_Transmit+0x204>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006428:	d102      	bne.n	8006430 <HAL_SPI_Transmit+0x20a>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d102      	bne.n	8006436 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006434:	e026      	b.n	8006484 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1cd      	bne.n	80063dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f8b3 	bl	80065b0 <SPI_EndRxTxTransaction>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2220      	movs	r2, #32
 8006454:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800645e:	2300      	movs	r3, #0
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	77fb      	strb	r3, [r7, #31]
 8006480:	e000      	b.n	8006484 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006482:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006494:	7ffb      	ldrb	r3, [r7, #31]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b088      	sub	sp, #32
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	603b      	str	r3, [r7, #0]
 80064ac:	4613      	mov	r3, r2
 80064ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064b0:	f7fc f9f4 	bl	800289c <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	1a9b      	subs	r3, r3, r2
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	4413      	add	r3, r2
 80064be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064c0:	f7fc f9ec 	bl	800289c <HAL_GetTick>
 80064c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064c6:	4b39      	ldr	r3, [pc, #228]	; (80065ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	015b      	lsls	r3, r3, #5
 80064cc:	0d1b      	lsrs	r3, r3, #20
 80064ce:	69fa      	ldr	r2, [r7, #28]
 80064d0:	fb02 f303 	mul.w	r3, r2, r3
 80064d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064d6:	e054      	b.n	8006582 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064de:	d050      	beq.n	8006582 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064e0:	f7fc f9dc 	bl	800289c <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d902      	bls.n	80064f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d13d      	bne.n	8006572 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006504:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800650e:	d111      	bne.n	8006534 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006518:	d004      	beq.n	8006524 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006522:	d107      	bne.n	8006534 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006532:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800653c:	d10f      	bne.n	800655e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800655c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e017      	b.n	80065a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	3b01      	subs	r3, #1
 8006580:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4013      	ands	r3, r2
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	429a      	cmp	r2, r3
 8006590:	bf0c      	ite	eq
 8006592:	2301      	moveq	r3, #1
 8006594:	2300      	movne	r3, #0
 8006596:	b2db      	uxtb	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	429a      	cmp	r2, r3
 800659e:	d19b      	bne.n	80064d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3720      	adds	r7, #32
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000074 	.word	0x20000074

080065b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80065bc:	4b1b      	ldr	r3, [pc, #108]	; (800662c <SPI_EndRxTxTransaction+0x7c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <SPI_EndRxTxTransaction+0x80>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	0d5b      	lsrs	r3, r3, #21
 80065c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065cc:	fb02 f303 	mul.w	r3, r2, r3
 80065d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065da:	d112      	bne.n	8006602 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2200      	movs	r2, #0
 80065e4:	2180      	movs	r1, #128	; 0x80
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f7ff ff5a 	bl	80064a0 <SPI_WaitFlagStateUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d016      	beq.n	8006620 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f6:	f043 0220 	orr.w	r2, r3, #32
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e00f      	b.n	8006622 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	3b01      	subs	r3, #1
 800660c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006618:	2b80      	cmp	r3, #128	; 0x80
 800661a:	d0f2      	beq.n	8006602 <SPI_EndRxTxTransaction+0x52>
 800661c:	e000      	b.n	8006620 <SPI_EndRxTxTransaction+0x70>
        break;
 800661e:	bf00      	nop
  }

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20000074 	.word	0x20000074
 8006630:	165e9f81 	.word	0x165e9f81

08006634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e041      	b.n	80066ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fb ff78 	bl	8002550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3304      	adds	r3, #4
 8006670:	4619      	mov	r1, r3
 8006672:	4610      	mov	r0, r2
 8006674:	f000 fd68 	bl	8007148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d001      	beq.n	80066ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e04e      	b.n	800678a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0201 	orr.w	r2, r2, #1
 8006702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a23      	ldr	r2, [pc, #140]	; (8006798 <HAL_TIM_Base_Start_IT+0xc4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d022      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x80>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006716:	d01d      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x80>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1f      	ldr	r2, [pc, #124]	; (800679c <HAL_TIM_Base_Start_IT+0xc8>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d018      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x80>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a1e      	ldr	r2, [pc, #120]	; (80067a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d013      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x80>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a1c      	ldr	r2, [pc, #112]	; (80067a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00e      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x80>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a1b      	ldr	r2, [pc, #108]	; (80067a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d009      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x80>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a19      	ldr	r2, [pc, #100]	; (80067ac <HAL_TIM_Base_Start_IT+0xd8>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d004      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x80>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a18      	ldr	r2, [pc, #96]	; (80067b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d111      	bne.n	8006778 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 0307 	and.w	r3, r3, #7
 800675e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b06      	cmp	r3, #6
 8006764:	d010      	beq.n	8006788 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0201 	orr.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006776:	e007      	b.n	8006788 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0201 	orr.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40010000 	.word	0x40010000
 800679c:	40000400 	.word	0x40000400
 80067a0:	40000800 	.word	0x40000800
 80067a4:	40000c00 	.word	0x40000c00
 80067a8:	40010400 	.word	0x40010400
 80067ac:	40014000 	.word	0x40014000
 80067b0:	40001800 	.word	0x40001800

080067b4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d109      	bne.n	80067d8 <HAL_TIM_OC_Start_IT+0x24>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	bf14      	ite	ne
 80067d0:	2301      	movne	r3, #1
 80067d2:	2300      	moveq	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	e022      	b.n	800681e <HAL_TIM_OC_Start_IT+0x6a>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d109      	bne.n	80067f2 <HAL_TIM_OC_Start_IT+0x3e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	bf14      	ite	ne
 80067ea:	2301      	movne	r3, #1
 80067ec:	2300      	moveq	r3, #0
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	e015      	b.n	800681e <HAL_TIM_OC_Start_IT+0x6a>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d109      	bne.n	800680c <HAL_TIM_OC_Start_IT+0x58>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b01      	cmp	r3, #1
 8006802:	bf14      	ite	ne
 8006804:	2301      	movne	r3, #1
 8006806:	2300      	moveq	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	e008      	b.n	800681e <HAL_TIM_OC_Start_IT+0x6a>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b01      	cmp	r3, #1
 8006816:	bf14      	ite	ne
 8006818:	2301      	movne	r3, #1
 800681a:	2300      	moveq	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e0c2      	b.n	80069ac <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <HAL_TIM_OC_Start_IT+0x82>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006834:	e013      	b.n	800685e <HAL_TIM_OC_Start_IT+0xaa>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b04      	cmp	r3, #4
 800683a:	d104      	bne.n	8006846 <HAL_TIM_OC_Start_IT+0x92>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006844:	e00b      	b.n	800685e <HAL_TIM_OC_Start_IT+0xaa>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b08      	cmp	r3, #8
 800684a:	d104      	bne.n	8006856 <HAL_TIM_OC_Start_IT+0xa2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006854:	e003      	b.n	800685e <HAL_TIM_OC_Start_IT+0xaa>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b0c      	cmp	r3, #12
 8006862:	d841      	bhi.n	80068e8 <HAL_TIM_OC_Start_IT+0x134>
 8006864:	a201      	add	r2, pc, #4	; (adr r2, 800686c <HAL_TIM_OC_Start_IT+0xb8>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	080068a1 	.word	0x080068a1
 8006870:	080068e9 	.word	0x080068e9
 8006874:	080068e9 	.word	0x080068e9
 8006878:	080068e9 	.word	0x080068e9
 800687c:	080068b3 	.word	0x080068b3
 8006880:	080068e9 	.word	0x080068e9
 8006884:	080068e9 	.word	0x080068e9
 8006888:	080068e9 	.word	0x080068e9
 800688c:	080068c5 	.word	0x080068c5
 8006890:	080068e9 	.word	0x080068e9
 8006894:	080068e9 	.word	0x080068e9
 8006898:	080068e9 	.word	0x080068e9
 800689c:	080068d7 	.word	0x080068d7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0202 	orr.w	r2, r2, #2
 80068ae:	60da      	str	r2, [r3, #12]
      break;
 80068b0:	e01b      	b.n	80068ea <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0204 	orr.w	r2, r2, #4
 80068c0:	60da      	str	r2, [r3, #12]
      break;
 80068c2:	e012      	b.n	80068ea <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0208 	orr.w	r2, r2, #8
 80068d2:	60da      	str	r2, [r3, #12]
      break;
 80068d4:	e009      	b.n	80068ea <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f042 0210 	orr.w	r2, r2, #16
 80068e4:	60da      	str	r2, [r3, #12]
      break;
 80068e6:	e000      	b.n	80068ea <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 80068e8:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2201      	movs	r2, #1
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 ff12 	bl	800771c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a2d      	ldr	r2, [pc, #180]	; (80069b4 <HAL_TIM_OC_Start_IT+0x200>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d004      	beq.n	800690c <HAL_TIM_OC_Start_IT+0x158>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a2c      	ldr	r2, [pc, #176]	; (80069b8 <HAL_TIM_OC_Start_IT+0x204>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d101      	bne.n	8006910 <HAL_TIM_OC_Start_IT+0x15c>
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <HAL_TIM_OC_Start_IT+0x15e>
 8006910:	2300      	movs	r3, #0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d007      	beq.n	8006926 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006924:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a22      	ldr	r2, [pc, #136]	; (80069b4 <HAL_TIM_OC_Start_IT+0x200>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d022      	beq.n	8006976 <HAL_TIM_OC_Start_IT+0x1c2>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006938:	d01d      	beq.n	8006976 <HAL_TIM_OC_Start_IT+0x1c2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a1f      	ldr	r2, [pc, #124]	; (80069bc <HAL_TIM_OC_Start_IT+0x208>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d018      	beq.n	8006976 <HAL_TIM_OC_Start_IT+0x1c2>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a1d      	ldr	r2, [pc, #116]	; (80069c0 <HAL_TIM_OC_Start_IT+0x20c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d013      	beq.n	8006976 <HAL_TIM_OC_Start_IT+0x1c2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1c      	ldr	r2, [pc, #112]	; (80069c4 <HAL_TIM_OC_Start_IT+0x210>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00e      	beq.n	8006976 <HAL_TIM_OC_Start_IT+0x1c2>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a16      	ldr	r2, [pc, #88]	; (80069b8 <HAL_TIM_OC_Start_IT+0x204>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d009      	beq.n	8006976 <HAL_TIM_OC_Start_IT+0x1c2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <HAL_TIM_OC_Start_IT+0x214>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d004      	beq.n	8006976 <HAL_TIM_OC_Start_IT+0x1c2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a16      	ldr	r2, [pc, #88]	; (80069cc <HAL_TIM_OC_Start_IT+0x218>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d111      	bne.n	800699a <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b06      	cmp	r3, #6
 8006986:	d010      	beq.n	80069aa <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006998:	e007      	b.n	80069aa <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f042 0201 	orr.w	r2, r2, #1
 80069a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40010400 	.word	0x40010400
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40000c00 	.word	0x40000c00
 80069c8:	40014000 	.word	0x40014000
 80069cc:	40001800 	.word	0x40001800

080069d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e041      	b.n	8006a66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f839 	bl	8006a6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	f000 fb9a 	bl	8007148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b083      	sub	sp, #12
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b086      	sub	sp, #24
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e097      	b.n	8006bc6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fb fd08 	bl	80024c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6812      	ldr	r2, [r2, #0]
 8006ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ac6:	f023 0307 	bic.w	r3, r3, #7
 8006aca:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f000 fb36 	bl	8007148 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b04:	f023 0303 	bic.w	r3, r3, #3
 8006b08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	4313      	orrs	r3, r2
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006b22:	f023 030c 	bic.w	r3, r3, #12
 8006b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	021b      	lsls	r3, r3, #8
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	011a      	lsls	r2, r3, #4
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	031b      	lsls	r3, r3, #12
 8006b52:	4313      	orrs	r3, r2
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006b60:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006b68:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	011b      	lsls	r3, r3, #4
 8006b74:	4313      	orrs	r3, r2
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d122      	bne.n	8006c2a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d11b      	bne.n	8006c2a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f06f 0202 	mvn.w	r2, #2
 8006bfa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	f003 0303 	and.w	r3, r3, #3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fa7b 	bl	800710c <HAL_TIM_IC_CaptureCallback>
 8006c16:	e005      	b.n	8006c24 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fa6d 	bl	80070f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fa7e 	bl	8007120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d122      	bne.n	8006c7e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f003 0304 	and.w	r3, r3, #4
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d11b      	bne.n	8006c7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f06f 0204 	mvn.w	r2, #4
 8006c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fa51 	bl	800710c <HAL_TIM_IC_CaptureCallback>
 8006c6a:	e005      	b.n	8006c78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fa43 	bl	80070f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fa54 	bl	8007120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	f003 0308 	and.w	r3, r3, #8
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d122      	bne.n	8006cd2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f003 0308 	and.w	r3, r3, #8
 8006c96:	2b08      	cmp	r3, #8
 8006c98:	d11b      	bne.n	8006cd2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f06f 0208 	mvn.w	r2, #8
 8006ca2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2204      	movs	r2, #4
 8006ca8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	f003 0303 	and.w	r3, r3, #3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fa27 	bl	800710c <HAL_TIM_IC_CaptureCallback>
 8006cbe:	e005      	b.n	8006ccc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fa19 	bl	80070f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fa2a 	bl	8007120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b10      	cmp	r3, #16
 8006cde:	d122      	bne.n	8006d26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f003 0310 	and.w	r3, r3, #16
 8006cea:	2b10      	cmp	r3, #16
 8006cec:	d11b      	bne.n	8006d26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f06f 0210 	mvn.w	r2, #16
 8006cf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2208      	movs	r2, #8
 8006cfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f9fd 	bl	800710c <HAL_TIM_IC_CaptureCallback>
 8006d12:	e005      	b.n	8006d20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f9ef 	bl	80070f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fa00 	bl	8007120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d10e      	bne.n	8006d52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d107      	bne.n	8006d52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f06f 0201 	mvn.w	r2, #1
 8006d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f9c9 	bl	80070e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d5c:	2b80      	cmp	r3, #128	; 0x80
 8006d5e:	d10e      	bne.n	8006d7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6a:	2b80      	cmp	r3, #128	; 0x80
 8006d6c:	d107      	bne.n	8006d7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fd7b 	bl	8007874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d88:	2b40      	cmp	r3, #64	; 0x40
 8006d8a:	d10e      	bne.n	8006daa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d96:	2b40      	cmp	r3, #64	; 0x40
 8006d98:	d107      	bne.n	8006daa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f9c5 	bl	8007134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	f003 0320 	and.w	r3, r3, #32
 8006db4:	2b20      	cmp	r3, #32
 8006db6:	d10e      	bne.n	8006dd6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	d107      	bne.n	8006dd6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f06f 0220 	mvn.w	r2, #32
 8006dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fd45 	bl	8007860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dd6:	bf00      	nop
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d101      	bne.n	8006dfa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006df6:	2302      	movs	r3, #2
 8006df8:	e0ac      	b.n	8006f54 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b0c      	cmp	r3, #12
 8006e06:	f200 809f 	bhi.w	8006f48 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006e0a:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e45 	.word	0x08006e45
 8006e14:	08006f49 	.word	0x08006f49
 8006e18:	08006f49 	.word	0x08006f49
 8006e1c:	08006f49 	.word	0x08006f49
 8006e20:	08006e85 	.word	0x08006e85
 8006e24:	08006f49 	.word	0x08006f49
 8006e28:	08006f49 	.word	0x08006f49
 8006e2c:	08006f49 	.word	0x08006f49
 8006e30:	08006ec7 	.word	0x08006ec7
 8006e34:	08006f49 	.word	0x08006f49
 8006e38:	08006f49 	.word	0x08006f49
 8006e3c:	08006f49 	.word	0x08006f49
 8006e40:	08006f07 	.word	0x08006f07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68b9      	ldr	r1, [r7, #8]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fa1c 	bl	8007288 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0208 	orr.w	r2, r2, #8
 8006e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0204 	bic.w	r2, r2, #4
 8006e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6999      	ldr	r1, [r3, #24]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	619a      	str	r2, [r3, #24]
      break;
 8006e82:	e062      	b.n	8006f4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fa6c 	bl	8007368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6999      	ldr	r1, [r3, #24]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	021a      	lsls	r2, r3, #8
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	619a      	str	r2, [r3, #24]
      break;
 8006ec4:	e041      	b.n	8006f4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68b9      	ldr	r1, [r7, #8]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fac1 	bl	8007454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69da      	ldr	r2, [r3, #28]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0208 	orr.w	r2, r2, #8
 8006ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69da      	ldr	r2, [r3, #28]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0204 	bic.w	r2, r2, #4
 8006ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69d9      	ldr	r1, [r3, #28]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	61da      	str	r2, [r3, #28]
      break;
 8006f04:	e021      	b.n	8006f4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fb15 	bl	800753c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69da      	ldr	r2, [r3, #28]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	69da      	ldr	r2, [r3, #28]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69d9      	ldr	r1, [r3, #28]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	021a      	lsls	r2, r3, #8
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	61da      	str	r2, [r3, #28]
      break;
 8006f46:	e000      	b.n	8006f4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006f48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_TIM_ConfigClockSource+0x18>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e0b3      	b.n	80070dc <HAL_TIM_ConfigClockSource+0x180>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fac:	d03e      	beq.n	800702c <HAL_TIM_ConfigClockSource+0xd0>
 8006fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb2:	f200 8087 	bhi.w	80070c4 <HAL_TIM_ConfigClockSource+0x168>
 8006fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fba:	f000 8085 	beq.w	80070c8 <HAL_TIM_ConfigClockSource+0x16c>
 8006fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc2:	d87f      	bhi.n	80070c4 <HAL_TIM_ConfigClockSource+0x168>
 8006fc4:	2b70      	cmp	r3, #112	; 0x70
 8006fc6:	d01a      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0xa2>
 8006fc8:	2b70      	cmp	r3, #112	; 0x70
 8006fca:	d87b      	bhi.n	80070c4 <HAL_TIM_ConfigClockSource+0x168>
 8006fcc:	2b60      	cmp	r3, #96	; 0x60
 8006fce:	d050      	beq.n	8007072 <HAL_TIM_ConfigClockSource+0x116>
 8006fd0:	2b60      	cmp	r3, #96	; 0x60
 8006fd2:	d877      	bhi.n	80070c4 <HAL_TIM_ConfigClockSource+0x168>
 8006fd4:	2b50      	cmp	r3, #80	; 0x50
 8006fd6:	d03c      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0xf6>
 8006fd8:	2b50      	cmp	r3, #80	; 0x50
 8006fda:	d873      	bhi.n	80070c4 <HAL_TIM_ConfigClockSource+0x168>
 8006fdc:	2b40      	cmp	r3, #64	; 0x40
 8006fde:	d058      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0x136>
 8006fe0:	2b40      	cmp	r3, #64	; 0x40
 8006fe2:	d86f      	bhi.n	80070c4 <HAL_TIM_ConfigClockSource+0x168>
 8006fe4:	2b30      	cmp	r3, #48	; 0x30
 8006fe6:	d064      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0x156>
 8006fe8:	2b30      	cmp	r3, #48	; 0x30
 8006fea:	d86b      	bhi.n	80070c4 <HAL_TIM_ConfigClockSource+0x168>
 8006fec:	2b20      	cmp	r3, #32
 8006fee:	d060      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0x156>
 8006ff0:	2b20      	cmp	r3, #32
 8006ff2:	d867      	bhi.n	80070c4 <HAL_TIM_ConfigClockSource+0x168>
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d05c      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0x156>
 8006ff8:	2b10      	cmp	r3, #16
 8006ffa:	d05a      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006ffc:	e062      	b.n	80070c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	6899      	ldr	r1, [r3, #8]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f000 fb65 	bl	80076dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007020:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	609a      	str	r2, [r3, #8]
      break;
 800702a:	e04e      	b.n	80070ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6818      	ldr	r0, [r3, #0]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	6899      	ldr	r1, [r3, #8]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f000 fb4e 	bl	80076dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689a      	ldr	r2, [r3, #8]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800704e:	609a      	str	r2, [r3, #8]
      break;
 8007050:	e03b      	b.n	80070ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6818      	ldr	r0, [r3, #0]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	6859      	ldr	r1, [r3, #4]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	461a      	mov	r2, r3
 8007060:	f000 fac2 	bl	80075e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2150      	movs	r1, #80	; 0x50
 800706a:	4618      	mov	r0, r3
 800706c:	f000 fb1b 	bl	80076a6 <TIM_ITRx_SetConfig>
      break;
 8007070:	e02b      	b.n	80070ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6818      	ldr	r0, [r3, #0]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	6859      	ldr	r1, [r3, #4]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	461a      	mov	r2, r3
 8007080:	f000 fae1 	bl	8007646 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2160      	movs	r1, #96	; 0x60
 800708a:	4618      	mov	r0, r3
 800708c:	f000 fb0b 	bl	80076a6 <TIM_ITRx_SetConfig>
      break;
 8007090:	e01b      	b.n	80070ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	6859      	ldr	r1, [r3, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	461a      	mov	r2, r3
 80070a0:	f000 faa2 	bl	80075e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2140      	movs	r1, #64	; 0x40
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fafb 	bl	80076a6 <TIM_ITRx_SetConfig>
      break;
 80070b0:	e00b      	b.n	80070ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4619      	mov	r1, r3
 80070bc:	4610      	mov	r0, r2
 80070be:	f000 faf2 	bl	80076a6 <TIM_ITRx_SetConfig>
        break;
 80070c2:	e002      	b.n	80070ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80070c4:	bf00      	nop
 80070c6:	e000      	b.n	80070ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80070c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a40      	ldr	r2, [pc, #256]	; (800725c <TIM_Base_SetConfig+0x114>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d013      	beq.n	8007188 <TIM_Base_SetConfig+0x40>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007166:	d00f      	beq.n	8007188 <TIM_Base_SetConfig+0x40>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a3d      	ldr	r2, [pc, #244]	; (8007260 <TIM_Base_SetConfig+0x118>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d00b      	beq.n	8007188 <TIM_Base_SetConfig+0x40>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a3c      	ldr	r2, [pc, #240]	; (8007264 <TIM_Base_SetConfig+0x11c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d007      	beq.n	8007188 <TIM_Base_SetConfig+0x40>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a3b      	ldr	r2, [pc, #236]	; (8007268 <TIM_Base_SetConfig+0x120>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <TIM_Base_SetConfig+0x40>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a3a      	ldr	r2, [pc, #232]	; (800726c <TIM_Base_SetConfig+0x124>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d108      	bne.n	800719a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a2f      	ldr	r2, [pc, #188]	; (800725c <TIM_Base_SetConfig+0x114>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d02b      	beq.n	80071fa <TIM_Base_SetConfig+0xb2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a8:	d027      	beq.n	80071fa <TIM_Base_SetConfig+0xb2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a2c      	ldr	r2, [pc, #176]	; (8007260 <TIM_Base_SetConfig+0x118>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d023      	beq.n	80071fa <TIM_Base_SetConfig+0xb2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a2b      	ldr	r2, [pc, #172]	; (8007264 <TIM_Base_SetConfig+0x11c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d01f      	beq.n	80071fa <TIM_Base_SetConfig+0xb2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a2a      	ldr	r2, [pc, #168]	; (8007268 <TIM_Base_SetConfig+0x120>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d01b      	beq.n	80071fa <TIM_Base_SetConfig+0xb2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a29      	ldr	r2, [pc, #164]	; (800726c <TIM_Base_SetConfig+0x124>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d017      	beq.n	80071fa <TIM_Base_SetConfig+0xb2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a28      	ldr	r2, [pc, #160]	; (8007270 <TIM_Base_SetConfig+0x128>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d013      	beq.n	80071fa <TIM_Base_SetConfig+0xb2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a27      	ldr	r2, [pc, #156]	; (8007274 <TIM_Base_SetConfig+0x12c>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d00f      	beq.n	80071fa <TIM_Base_SetConfig+0xb2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a26      	ldr	r2, [pc, #152]	; (8007278 <TIM_Base_SetConfig+0x130>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00b      	beq.n	80071fa <TIM_Base_SetConfig+0xb2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a25      	ldr	r2, [pc, #148]	; (800727c <TIM_Base_SetConfig+0x134>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d007      	beq.n	80071fa <TIM_Base_SetConfig+0xb2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a24      	ldr	r2, [pc, #144]	; (8007280 <TIM_Base_SetConfig+0x138>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d003      	beq.n	80071fa <TIM_Base_SetConfig+0xb2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a23      	ldr	r2, [pc, #140]	; (8007284 <TIM_Base_SetConfig+0x13c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d108      	bne.n	800720c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	4313      	orrs	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a0a      	ldr	r2, [pc, #40]	; (800725c <TIM_Base_SetConfig+0x114>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d003      	beq.n	8007240 <TIM_Base_SetConfig+0xf8>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a0c      	ldr	r2, [pc, #48]	; (800726c <TIM_Base_SetConfig+0x124>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d103      	bne.n	8007248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	691a      	ldr	r2, [r3, #16]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	615a      	str	r2, [r3, #20]
}
 800724e:	bf00      	nop
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40010000 	.word	0x40010000
 8007260:	40000400 	.word	0x40000400
 8007264:	40000800 	.word	0x40000800
 8007268:	40000c00 	.word	0x40000c00
 800726c:	40010400 	.word	0x40010400
 8007270:	40014000 	.word	0x40014000
 8007274:	40014400 	.word	0x40014400
 8007278:	40014800 	.word	0x40014800
 800727c:	40001800 	.word	0x40001800
 8007280:	40001c00 	.word	0x40001c00
 8007284:	40002000 	.word	0x40002000

08007288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	f023 0201 	bic.w	r2, r3, #1
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f023 0303 	bic.w	r3, r3, #3
 80072be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f023 0302 	bic.w	r3, r3, #2
 80072d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	4313      	orrs	r3, r2
 80072da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a20      	ldr	r2, [pc, #128]	; (8007360 <TIM_OC1_SetConfig+0xd8>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d003      	beq.n	80072ec <TIM_OC1_SetConfig+0x64>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a1f      	ldr	r2, [pc, #124]	; (8007364 <TIM_OC1_SetConfig+0xdc>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d10c      	bne.n	8007306 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f023 0308 	bic.w	r3, r3, #8
 80072f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f023 0304 	bic.w	r3, r3, #4
 8007304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a15      	ldr	r2, [pc, #84]	; (8007360 <TIM_OC1_SetConfig+0xd8>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d003      	beq.n	8007316 <TIM_OC1_SetConfig+0x8e>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a14      	ldr	r2, [pc, #80]	; (8007364 <TIM_OC1_SetConfig+0xdc>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d111      	bne.n	800733a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800731c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	4313      	orrs	r3, r2
 800732e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4313      	orrs	r3, r2
 8007338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	621a      	str	r2, [r3, #32]
}
 8007354:	bf00      	nop
 8007356:	371c      	adds	r7, #28
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	40010000 	.word	0x40010000
 8007364:	40010400 	.word	0x40010400

08007368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	f023 0210 	bic.w	r2, r3, #16
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800739e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	021b      	lsls	r3, r3, #8
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f023 0320 	bic.w	r3, r3, #32
 80073b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	011b      	lsls	r3, r3, #4
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	4313      	orrs	r3, r2
 80073be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a22      	ldr	r2, [pc, #136]	; (800744c <TIM_OC2_SetConfig+0xe4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d003      	beq.n	80073d0 <TIM_OC2_SetConfig+0x68>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a21      	ldr	r2, [pc, #132]	; (8007450 <TIM_OC2_SetConfig+0xe8>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d10d      	bne.n	80073ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	011b      	lsls	r3, r3, #4
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a17      	ldr	r2, [pc, #92]	; (800744c <TIM_OC2_SetConfig+0xe4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d003      	beq.n	80073fc <TIM_OC2_SetConfig+0x94>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a16      	ldr	r2, [pc, #88]	; (8007450 <TIM_OC2_SetConfig+0xe8>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d113      	bne.n	8007424 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800740a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	621a      	str	r2, [r3, #32]
}
 800743e:	bf00      	nop
 8007440:	371c      	adds	r7, #28
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	40010000 	.word	0x40010000
 8007450:	40010400 	.word	0x40010400

08007454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f023 0303 	bic.w	r3, r3, #3
 800748a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800749c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	021b      	lsls	r3, r3, #8
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a21      	ldr	r2, [pc, #132]	; (8007534 <TIM_OC3_SetConfig+0xe0>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d003      	beq.n	80074ba <TIM_OC3_SetConfig+0x66>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a20      	ldr	r2, [pc, #128]	; (8007538 <TIM_OC3_SetConfig+0xe4>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d10d      	bne.n	80074d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	021b      	lsls	r3, r3, #8
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a16      	ldr	r2, [pc, #88]	; (8007534 <TIM_OC3_SetConfig+0xe0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d003      	beq.n	80074e6 <TIM_OC3_SetConfig+0x92>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a15      	ldr	r2, [pc, #84]	; (8007538 <TIM_OC3_SetConfig+0xe4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d113      	bne.n	800750e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	4313      	orrs	r3, r2
 8007500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	4313      	orrs	r3, r2
 800750c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	621a      	str	r2, [r3, #32]
}
 8007528:	bf00      	nop
 800752a:	371c      	adds	r7, #28
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	40010000 	.word	0x40010000
 8007538:	40010400 	.word	0x40010400

0800753c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800756a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	021b      	lsls	r3, r3, #8
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	031b      	lsls	r3, r3, #12
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	4313      	orrs	r3, r2
 8007592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a12      	ldr	r2, [pc, #72]	; (80075e0 <TIM_OC4_SetConfig+0xa4>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d003      	beq.n	80075a4 <TIM_OC4_SetConfig+0x68>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a11      	ldr	r2, [pc, #68]	; (80075e4 <TIM_OC4_SetConfig+0xa8>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d109      	bne.n	80075b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	019b      	lsls	r3, r3, #6
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	621a      	str	r2, [r3, #32]
}
 80075d2:	bf00      	nop
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	40010000 	.word	0x40010000
 80075e4:	40010400 	.word	0x40010400

080075e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	f023 0201 	bic.w	r2, r3, #1
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	4313      	orrs	r3, r2
 800761c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f023 030a 	bic.w	r3, r3, #10
 8007624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	4313      	orrs	r3, r2
 800762c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	621a      	str	r2, [r3, #32]
}
 800763a:	bf00      	nop
 800763c:	371c      	adds	r7, #28
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007646:	b480      	push	{r7}
 8007648:	b087      	sub	sp, #28
 800764a:	af00      	add	r7, sp, #0
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f023 0210 	bic.w	r2, r3, #16
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	031b      	lsls	r3, r3, #12
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	4313      	orrs	r3, r2
 800767a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007682:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	011b      	lsls	r3, r3, #4
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	4313      	orrs	r3, r2
 800768c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	621a      	str	r2, [r3, #32]
}
 800769a:	bf00      	nop
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b085      	sub	sp, #20
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	f043 0307 	orr.w	r3, r3, #7
 80076c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	609a      	str	r2, [r3, #8]
}
 80076d0:	bf00      	nop
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	021a      	lsls	r2, r3, #8
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	431a      	orrs	r2, r3
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	4313      	orrs	r3, r2
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	4313      	orrs	r3, r2
 8007708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	609a      	str	r2, [r3, #8]
}
 8007710:	bf00      	nop
 8007712:	371c      	adds	r7, #28
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	2201      	movs	r2, #1
 8007730:	fa02 f303 	lsl.w	r3, r2, r3
 8007734:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6a1a      	ldr	r2, [r3, #32]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	43db      	mvns	r3, r3
 800773e:	401a      	ands	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a1a      	ldr	r2, [r3, #32]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f003 031f 	and.w	r3, r3, #31
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	fa01 f303 	lsl.w	r3, r1, r3
 8007754:	431a      	orrs	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	621a      	str	r2, [r3, #32]
}
 800775a:	bf00      	nop
 800775c:	371c      	adds	r7, #28
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
	...

08007768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800777c:	2302      	movs	r3, #2
 800777e:	e05a      	b.n	8007836 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a21      	ldr	r2, [pc, #132]	; (8007844 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d022      	beq.n	800780a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077cc:	d01d      	beq.n	800780a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a1d      	ldr	r2, [pc, #116]	; (8007848 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d018      	beq.n	800780a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a1b      	ldr	r2, [pc, #108]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d013      	beq.n	800780a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a1a      	ldr	r2, [pc, #104]	; (8007850 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d00e      	beq.n	800780a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a18      	ldr	r2, [pc, #96]	; (8007854 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d009      	beq.n	800780a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a17      	ldr	r2, [pc, #92]	; (8007858 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d004      	beq.n	800780a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a15      	ldr	r2, [pc, #84]	; (800785c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d10c      	bne.n	8007824 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	4313      	orrs	r3, r2
 800781a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	40010000 	.word	0x40010000
 8007848:	40000400 	.word	0x40000400
 800784c:	40000800 	.word	0x40000800
 8007850:	40000c00 	.word	0x40000c00
 8007854:	40010400 	.word	0x40010400
 8007858:	40014000 	.word	0x40014000
 800785c:	40001800 	.word	0x40001800

08007860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007888:	b084      	sub	sp, #16
 800788a:	b580      	push	{r7, lr}
 800788c:	b084      	sub	sp, #16
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	f107 001c 	add.w	r0, r7, #28
 8007896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	2b01      	cmp	r3, #1
 800789e:	d122      	bne.n	80078e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80078b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d105      	bne.n	80078da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f94a 	bl	8007b74 <USB_CoreReset>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73fb      	strb	r3, [r7, #15]
 80078e4:	e01a      	b.n	800791c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f93e 	bl	8007b74 <USB_CoreReset>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80078fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d106      	bne.n	8007910 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007906:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	639a      	str	r2, [r3, #56]	; 0x38
 800790e:	e005      	b.n	800791c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007914:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791e:	2b01      	cmp	r3, #1
 8007920:	d10b      	bne.n	800793a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f043 0206 	orr.w	r2, r3, #6
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f043 0220 	orr.w	r2, r3, #32
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800793a:	7bfb      	ldrb	r3, [r7, #15]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007946:	b004      	add	sp, #16
 8007948:	4770      	bx	lr

0800794a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f043 0201 	orr.w	r2, r3, #1
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f023 0201 	bic.w	r2, r3, #1
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	460b      	mov	r3, r1
 8007998:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079a6:	78fb      	ldrb	r3, [r7, #3]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d106      	bne.n	80079ba <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	60da      	str	r2, [r3, #12]
 80079b8:	e00b      	b.n	80079d2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d106      	bne.n	80079ce <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	60da      	str	r2, [r3, #12]
 80079cc:	e001      	b.n	80079d2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e003      	b.n	80079da <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80079d2:	2032      	movs	r0, #50	; 0x32
 80079d4:	f7fa ff6e 	bl	80028b4 <HAL_Delay>

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	019b      	lsls	r3, r3, #6
 80079f6:	f043 0220 	orr.w	r2, r3, #32
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3301      	adds	r3, #1
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4a09      	ldr	r2, [pc, #36]	; (8007a2c <USB_FlushTxFifo+0x48>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d901      	bls.n	8007a10 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e006      	b.n	8007a1e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	f003 0320 	and.w	r3, r3, #32
 8007a18:	2b20      	cmp	r3, #32
 8007a1a:	d0f0      	beq.n	80079fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	00030d40 	.word	0x00030d40

08007a30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2210      	movs	r2, #16
 8007a40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	3301      	adds	r3, #1
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	4a09      	ldr	r2, [pc, #36]	; (8007a70 <USB_FlushRxFifo+0x40>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d901      	bls.n	8007a54 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e006      	b.n	8007a62 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	f003 0310 	and.w	r3, r3, #16
 8007a5c:	2b10      	cmp	r3, #16
 8007a5e:	d0f0      	beq.n	8007a42 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	00030d40 	.word	0x00030d40

08007a74 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b089      	sub	sp, #36	; 0x24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	4611      	mov	r1, r2
 8007a80:	461a      	mov	r2, r3
 8007a82:	460b      	mov	r3, r1
 8007a84:	71fb      	strb	r3, [r7, #7]
 8007a86:	4613      	mov	r3, r2
 8007a88:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007a92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d11a      	bne.n	8007ad0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a9a:	88bb      	ldrh	r3, [r7, #4]
 8007a9c:	3303      	adds	r3, #3
 8007a9e:	089b      	lsrs	r3, r3, #2
 8007aa0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	61bb      	str	r3, [r7, #24]
 8007aa6:	e00f      	b.n	8007ac8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007aa8:	79fb      	ldrb	r3, [r7, #7]
 8007aaa:	031a      	lsls	r2, r3, #12
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	3304      	adds	r3, #4
 8007ac0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	61bb      	str	r3, [r7, #24]
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d3eb      	bcc.n	8007aa8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3724      	adds	r7, #36	; 0x24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b089      	sub	sp, #36	; 0x24
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007af4:	88fb      	ldrh	r3, [r7, #6]
 8007af6:	3303      	adds	r3, #3
 8007af8:	089b      	lsrs	r3, r3, #2
 8007afa:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007afc:	2300      	movs	r3, #0
 8007afe:	61bb      	str	r3, [r7, #24]
 8007b00:	e00b      	b.n	8007b1a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	3304      	adds	r3, #4
 8007b12:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	3301      	adds	r3, #1
 8007b18:	61bb      	str	r3, [r7, #24]
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d3ef      	bcc.n	8007b02 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007b22:	69fb      	ldr	r3, [r7, #28]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3724      	adds	r7, #36	; 0x24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4013      	ands	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b48:	68fb      	ldr	r3, [r7, #12]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	f003 0301 	and.w	r3, r3, #1
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
	...

08007b74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3301      	adds	r3, #1
 8007b84:	60fb      	str	r3, [r7, #12]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4a13      	ldr	r2, [pc, #76]	; (8007bd8 <USB_CoreReset+0x64>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d901      	bls.n	8007b92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e01b      	b.n	8007bca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	daf2      	bge.n	8007b80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f043 0201 	orr.w	r2, r3, #1
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3301      	adds	r3, #1
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4a09      	ldr	r2, [pc, #36]	; (8007bd8 <USB_CoreReset+0x64>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d901      	bls.n	8007bbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e006      	b.n	8007bca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d0f0      	beq.n	8007baa <USB_CoreReset+0x36>

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	00030d40 	.word	0x00030d40

08007bdc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bdc:	b084      	sub	sp, #16
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	f107 001c 	add.w	r0, r7, #28
 8007bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d018      	beq.n	8007c60 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d10a      	bne.n	8007c4a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c42:	f043 0304 	orr.w	r3, r3, #4
 8007c46:	6013      	str	r3, [r2, #0]
 8007c48:	e014      	b.n	8007c74 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c58:	f023 0304 	bic.w	r3, r3, #4
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	e009      	b.n	8007c74 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c6e:	f023 0304 	bic.w	r3, r3, #4
 8007c72:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007c74:	2110      	movs	r1, #16
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7ff feb4 	bl	80079e4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff fed7 	bl	8007a30 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007c82:	2300      	movs	r3, #0
 8007c84:	60fb      	str	r3, [r7, #12]
 8007c86:	e015      	b.n	8007cb4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c94:	461a      	mov	r2, r3
 8007c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c9a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca8:	461a      	mov	r2, r3
 8007caa:	2300      	movs	r3, #0
 8007cac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d3e5      	bcc.n	8007c88 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f8ac 	bl	8007e1c <USB_DriveVbus>

  HAL_Delay(200U);
 8007cc4:	20c8      	movs	r0, #200	; 0xc8
 8007cc6:	f7fa fdf5 	bl	80028b4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cd6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00b      	beq.n	8007cfc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a14      	ldr	r2, [pc, #80]	; (8007d40 <USB_HostInit+0x164>)
 8007cf0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a13      	ldr	r2, [pc, #76]	; (8007d44 <USB_HostInit+0x168>)
 8007cf6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007cfa:	e009      	b.n	8007d10 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2280      	movs	r2, #128	; 0x80
 8007d00:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a10      	ldr	r2, [pc, #64]	; (8007d48 <USB_HostInit+0x16c>)
 8007d06:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a10      	ldr	r2, [pc, #64]	; (8007d4c <USB_HostInit+0x170>)
 8007d0c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d105      	bne.n	8007d22 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	f043 0210 	orr.w	r2, r3, #16
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	699a      	ldr	r2, [r3, #24]
 8007d26:	4b0a      	ldr	r3, [pc, #40]	; (8007d50 <USB_HostInit+0x174>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d3a:	b004      	add	sp, #16
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	01000200 	.word	0x01000200
 8007d44:	00e00300 	.word	0x00e00300
 8007d48:	00600080 	.word	0x00600080
 8007d4c:	004000e0 	.word	0x004000e0
 8007d50:	a3200008 	.word	0xa3200008

08007d54 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d72:	f023 0303 	bic.w	r3, r3, #3
 8007d76:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	78fb      	ldrb	r3, [r7, #3]
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	68f9      	ldr	r1, [r7, #12]
 8007d88:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d107      	bne.n	8007da6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007da2:	6053      	str	r3, [r2, #4]
 8007da4:	e009      	b.n	8007dba <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d106      	bne.n	8007dba <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007db2:	461a      	mov	r2, r3
 8007db4:	f241 7370 	movw	r3, #6000	; 0x1770
 8007db8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007de8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007df6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007df8:	2064      	movs	r0, #100	; 0x64
 8007dfa:	f7fa fd5b 	bl	80028b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e0a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007e0c:	200a      	movs	r0, #10
 8007e0e:	f7fa fd51 	bl	80028b4 <HAL_Delay>

  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007e40:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d109      	bne.n	8007e60 <USB_DriveVbus+0x44>
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d106      	bne.n	8007e60 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e5e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e6a:	d109      	bne.n	8007e80 <USB_DriveVbus+0x64>
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d106      	bne.n	8007e80 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e7e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	0c5b      	lsrs	r3, r3, #17
 8007eac:	f003 0303 	and.w	r3, r3, #3
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	b29b      	uxth	r3, r3
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
	...

08007ee0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	4608      	mov	r0, r1
 8007eea:	4611      	mov	r1, r2
 8007eec:	461a      	mov	r2, r3
 8007eee:	4603      	mov	r3, r0
 8007ef0:	70fb      	strb	r3, [r7, #3]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	70bb      	strb	r3, [r7, #2]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007f02:	78fb      	ldrb	r3, [r7, #3]
 8007f04:	015a      	lsls	r2, r3, #5
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	4413      	add	r3, r2
 8007f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f14:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007f16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d87e      	bhi.n	800801c <USB_HC_Init+0x13c>
 8007f1e:	a201      	add	r2, pc, #4	; (adr r2, 8007f24 <USB_HC_Init+0x44>)
 8007f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f24:	08007f35 	.word	0x08007f35
 8007f28:	08007fdf 	.word	0x08007fdf
 8007f2c:	08007f35 	.word	0x08007f35
 8007f30:	08007fa1 	.word	0x08007fa1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f40:	461a      	mov	r2, r3
 8007f42:	f240 439d 	movw	r3, #1181	; 0x49d
 8007f46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007f48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	da10      	bge.n	8007f72 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	78fa      	ldrb	r2, [r7, #3]
 8007f60:	0151      	lsls	r1, r2, #5
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	440a      	add	r2, r1
 8007f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f6e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007f70:	e057      	b.n	8008022 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d051      	beq.n	8008022 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007f7e:	78fb      	ldrb	r3, [r7, #3]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	78fa      	ldrb	r2, [r7, #3]
 8007f8e:	0151      	lsls	r1, r2, #5
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	440a      	add	r2, r1
 8007f94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f98:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f9c:	60d3      	str	r3, [r2, #12]
      break;
 8007f9e:	e040      	b.n	8008022 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fac:	461a      	mov	r2, r3
 8007fae:	f240 639d 	movw	r3, #1693	; 0x69d
 8007fb2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007fb4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	da34      	bge.n	8008026 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	78fa      	ldrb	r2, [r7, #3]
 8007fcc:	0151      	lsls	r1, r2, #5
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	440a      	add	r2, r1
 8007fd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fda:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007fdc:	e023      	b.n	8008026 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007fde:	78fb      	ldrb	r3, [r7, #3]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fea:	461a      	mov	r2, r3
 8007fec:	f240 2325 	movw	r3, #549	; 0x225
 8007ff0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007ff2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	da17      	bge.n	800802a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007ffa:	78fb      	ldrb	r3, [r7, #3]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	4413      	add	r3, r2
 8008002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	78fa      	ldrb	r2, [r7, #3]
 800800a:	0151      	lsls	r1, r2, #5
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	440a      	add	r2, r1
 8008010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008014:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008018:	60d3      	str	r3, [r2, #12]
      }
      break;
 800801a:	e006      	b.n	800802a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	77fb      	strb	r3, [r7, #31]
      break;
 8008020:	e004      	b.n	800802c <USB_HC_Init+0x14c>
      break;
 8008022:	bf00      	nop
 8008024:	e002      	b.n	800802c <USB_HC_Init+0x14c>
      break;
 8008026:	bf00      	nop
 8008028:	e000      	b.n	800802c <USB_HC_Init+0x14c>
      break;
 800802a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008032:	699a      	ldr	r2, [r3, #24]
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	f003 030f 	and.w	r3, r3, #15
 800803a:	2101      	movs	r1, #1
 800803c:	fa01 f303 	lsl.w	r3, r1, r3
 8008040:	6939      	ldr	r1, [r7, #16]
 8008042:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008046:	4313      	orrs	r3, r2
 8008048:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008056:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800805a:	2b00      	cmp	r3, #0
 800805c:	da03      	bge.n	8008066 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800805e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008062:	61bb      	str	r3, [r7, #24]
 8008064:	e001      	b.n	800806a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7ff ff0f 	bl	8007e8e <USB_GetHostSpeed>
 8008070:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008072:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008076:	2b02      	cmp	r3, #2
 8008078:	d106      	bne.n	8008088 <USB_HC_Init+0x1a8>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b02      	cmp	r3, #2
 800807e:	d003      	beq.n	8008088 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008084:	617b      	str	r3, [r7, #20]
 8008086:	e001      	b.n	800808c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800808c:	787b      	ldrb	r3, [r7, #1]
 800808e:	059b      	lsls	r3, r3, #22
 8008090:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008094:	78bb      	ldrb	r3, [r7, #2]
 8008096:	02db      	lsls	r3, r3, #11
 8008098:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800809c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800809e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80080a2:	049b      	lsls	r3, r3, #18
 80080a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80080a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80080aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80080ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80080b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080b6:	78fb      	ldrb	r3, [r7, #3]
 80080b8:	0159      	lsls	r1, r3, #5
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	440b      	add	r3, r1
 80080be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80080c8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80080ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d10f      	bne.n	80080f2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80080d2:	78fb      	ldrb	r3, [r7, #3]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	78fa      	ldrb	r2, [r7, #3]
 80080e2:	0151      	lsls	r1, r2, #5
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	440a      	add	r2, r1
 80080e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080f0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80080f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3720      	adds	r7, #32
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08c      	sub	sp, #48	; 0x30
 8008100:	af02      	add	r7, sp, #8
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	4613      	mov	r3, r2
 8008108:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	785b      	ldrb	r3, [r3, #1]
 8008112:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008114:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008118:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800811e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008122:	2b00      	cmp	r3, #0
 8008124:	d02d      	beq.n	8008182 <USB_HC_StartXfer+0x86>
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	791b      	ldrb	r3, [r3, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d129      	bne.n	8008182 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800812e:	79fb      	ldrb	r3, [r7, #7]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d117      	bne.n	8008164 <USB_HC_StartXfer+0x68>
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	79db      	ldrb	r3, [r3, #7]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <USB_HC_StartXfer+0x48>
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	79db      	ldrb	r3, [r3, #7]
 8008140:	2b02      	cmp	r3, #2
 8008142:	d10f      	bne.n	8008164 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	6a3b      	ldr	r3, [r7, #32]
 800814a:	4413      	add	r3, r2
 800814c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	69fa      	ldr	r2, [r7, #28]
 8008154:	0151      	lsls	r1, r2, #5
 8008156:	6a3a      	ldr	r2, [r7, #32]
 8008158:	440a      	add	r2, r1
 800815a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800815e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008162:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10b      	bne.n	8008182 <USB_HC_StartXfer+0x86>
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	795b      	ldrb	r3, [r3, #5]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d107      	bne.n	8008182 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	785b      	ldrb	r3, [r3, #1]
 8008176:	4619      	mov	r1, r3
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 fa2f 	bl	80085dc <USB_DoPing>
      return HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	e0f8      	b.n	8008374 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d018      	beq.n	80081bc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	8912      	ldrh	r2, [r2, #8]
 8008192:	4413      	add	r3, r2
 8008194:	3b01      	subs	r3, #1
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	8912      	ldrh	r2, [r2, #8]
 800819a:	fbb3 f3f2 	udiv	r3, r3, r2
 800819e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80081a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80081a2:	8b7b      	ldrh	r3, [r7, #26]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d90b      	bls.n	80081c0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80081a8:	8b7b      	ldrh	r3, [r7, #26]
 80081aa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80081ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	8912      	ldrh	r2, [r2, #8]
 80081b2:	fb02 f203 	mul.w	r2, r2, r3
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	611a      	str	r2, [r3, #16]
 80081ba:	e001      	b.n	80081c0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80081bc:	2301      	movs	r3, #1
 80081be:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	78db      	ldrb	r3, [r3, #3]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d007      	beq.n	80081d8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80081c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	8912      	ldrh	r2, [r2, #8]
 80081ce:	fb02 f203 	mul.w	r2, r2, r3
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	611a      	str	r2, [r3, #16]
 80081d6:	e003      	b.n	80081e0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	695a      	ldr	r2, [r3, #20]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80081e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081ea:	04d9      	lsls	r1, r3, #19
 80081ec:	4b63      	ldr	r3, [pc, #396]	; (800837c <USB_HC_StartXfer+0x280>)
 80081ee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081f0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	7a9b      	ldrb	r3, [r3, #10]
 80081f6:	075b      	lsls	r3, r3, #29
 80081f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081fc:	69f9      	ldr	r1, [r7, #28]
 80081fe:	0148      	lsls	r0, r1, #5
 8008200:	6a39      	ldr	r1, [r7, #32]
 8008202:	4401      	add	r1, r0
 8008204:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008208:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800820a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800820c:	79fb      	ldrb	r3, [r7, #7]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d009      	beq.n	8008226 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	68d9      	ldr	r1, [r3, #12]
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	4413      	add	r3, r2
 800821e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008222:	460a      	mov	r2, r1
 8008224:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b00      	cmp	r3, #0
 8008234:	bf0c      	ite	eq
 8008236:	2301      	moveq	r3, #1
 8008238:	2300      	movne	r3, #0
 800823a:	b2db      	uxtb	r3, r3
 800823c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	4413      	add	r3, r2
 8008246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	69fa      	ldr	r2, [r7, #28]
 800824e:	0151      	lsls	r1, r2, #5
 8008250:	6a3a      	ldr	r2, [r7, #32]
 8008252:	440a      	add	r2, r1
 8008254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008258:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800825c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	015a      	lsls	r2, r3, #5
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	4413      	add	r3, r2
 8008266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	7e7b      	ldrb	r3, [r7, #25]
 800826e:	075b      	lsls	r3, r3, #29
 8008270:	69f9      	ldr	r1, [r7, #28]
 8008272:	0148      	lsls	r0, r1, #5
 8008274:	6a39      	ldr	r1, [r7, #32]
 8008276:	4401      	add	r1, r0
 8008278:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800827c:	4313      	orrs	r3, r2
 800827e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	015a      	lsls	r2, r3, #5
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	4413      	add	r3, r2
 8008288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008296:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	78db      	ldrb	r3, [r3, #3]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d004      	beq.n	80082aa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082a6:	613b      	str	r3, [r7, #16]
 80082a8:	e003      	b.n	80082b2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082b0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082b8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082c6:	461a      	mov	r2, r3
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80082cc:	79fb      	ldrb	r3, [r7, #7]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	e04e      	b.n	8008374 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	78db      	ldrb	r3, [r3, #3]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d149      	bne.n	8008372 <USB_HC_StartXfer+0x276>
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d045      	beq.n	8008372 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	79db      	ldrb	r3, [r3, #7]
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d830      	bhi.n	8008350 <USB_HC_StartXfer+0x254>
 80082ee:	a201      	add	r2, pc, #4	; (adr r2, 80082f4 <USB_HC_StartXfer+0x1f8>)
 80082f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f4:	08008305 	.word	0x08008305
 80082f8:	08008329 	.word	0x08008329
 80082fc:	08008305 	.word	0x08008305
 8008300:	08008329 	.word	0x08008329
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	3303      	adds	r3, #3
 800830a:	089b      	lsrs	r3, r3, #2
 800830c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800830e:	8afa      	ldrh	r2, [r7, #22]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008314:	b29b      	uxth	r3, r3
 8008316:	429a      	cmp	r2, r3
 8008318:	d91c      	bls.n	8008354 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	f043 0220 	orr.w	r2, r3, #32
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	619a      	str	r2, [r3, #24]
        }
        break;
 8008326:	e015      	b.n	8008354 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	3303      	adds	r3, #3
 800832e:	089b      	lsrs	r3, r3, #2
 8008330:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008332:	8afa      	ldrh	r2, [r7, #22]
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	b29b      	uxth	r3, r3
 800833e:	429a      	cmp	r2, r3
 8008340:	d90a      	bls.n	8008358 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	619a      	str	r2, [r3, #24]
        }
        break;
 800834e:	e003      	b.n	8008358 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008350:	bf00      	nop
 8008352:	e002      	b.n	800835a <USB_HC_StartXfer+0x25e>
        break;
 8008354:	bf00      	nop
 8008356:	e000      	b.n	800835a <USB_HC_StartXfer+0x25e>
        break;
 8008358:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	68d9      	ldr	r1, [r3, #12]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	785a      	ldrb	r2, [r3, #1]
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	b29b      	uxth	r3, r3
 8008368:	2000      	movs	r0, #0
 800836a:	9000      	str	r0, [sp, #0]
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f7ff fb81 	bl	8007a74 <USB_WritePacket>
  }

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3728      	adds	r7, #40	; 0x28
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	1ff80000 	.word	0x1ff80000

08008380 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	b29b      	uxth	r3, r3
}
 8008396:	4618      	mov	r0, r3
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b089      	sub	sp, #36	; 0x24
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	460b      	mov	r3, r1
 80083ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80083b2:	78fb      	ldrb	r3, [r7, #3]
 80083b4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	0c9b      	lsrs	r3, r3, #18
 80083ca:	f003 0303 	and.w	r3, r3, #3
 80083ce:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	0fdb      	lsrs	r3, r3, #31
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f003 0320 	and.w	r3, r3, #32
 80083ee:	2b20      	cmp	r3, #32
 80083f0:	d104      	bne.n	80083fc <USB_HC_Halt+0x5a>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	e0e8      	b.n	80085ce <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <USB_HC_Halt+0x66>
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	2b02      	cmp	r3, #2
 8008406:	d173      	bne.n	80084f0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	4413      	add	r3, r2
 8008410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	0151      	lsls	r1, r2, #5
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	440a      	add	r2, r1
 800841e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008422:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008426:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f003 0320 	and.w	r3, r3, #32
 8008430:	2b00      	cmp	r3, #0
 8008432:	f040 80cb 	bne.w	80085cc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d143      	bne.n	80084ca <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	4413      	add	r3, r2
 800844a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	0151      	lsls	r1, r2, #5
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	440a      	add	r2, r1
 8008458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800845c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008460:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	4413      	add	r3, r2
 800846a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	0151      	lsls	r1, r2, #5
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	440a      	add	r2, r1
 8008478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800847c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008480:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	4413      	add	r3, r2
 800848a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	0151      	lsls	r1, r2, #5
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	440a      	add	r2, r1
 8008498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800849c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084a0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	3301      	adds	r3, #1
 80084a6:	61fb      	str	r3, [r7, #28]
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084ae:	d81d      	bhi.n	80084ec <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084c6:	d0ec      	beq.n	80084a2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084c8:	e080      	b.n	80085cc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	0151      	lsls	r1, r2, #5
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	440a      	add	r2, r1
 80084e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084e8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084ea:	e06f      	b.n	80085cc <USB_HC_Halt+0x22a>
            break;
 80084ec:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084ee:	e06d      	b.n	80085cc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	0151      	lsls	r1, r2, #5
 8008502:	69ba      	ldr	r2, [r7, #24]
 8008504:	440a      	add	r2, r1
 8008506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800850a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800850e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d143      	bne.n	80085a8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	4413      	add	r3, r2
 8008528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	0151      	lsls	r1, r2, #5
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	440a      	add	r2, r1
 8008536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800853a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800853e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	4413      	add	r3, r2
 8008548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	0151      	lsls	r1, r2, #5
 8008552:	69ba      	ldr	r2, [r7, #24]
 8008554:	440a      	add	r2, r1
 8008556:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800855a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800855e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	4413      	add	r3, r2
 8008568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	0151      	lsls	r1, r2, #5
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	440a      	add	r2, r1
 8008576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800857a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800857e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	3301      	adds	r3, #1
 8008584:	61fb      	str	r3, [r7, #28]
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800858c:	d81d      	bhi.n	80085ca <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	015a      	lsls	r2, r3, #5
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	4413      	add	r3, r2
 8008596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085a4:	d0ec      	beq.n	8008580 <USB_HC_Halt+0x1de>
 80085a6:	e011      	b.n	80085cc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	0151      	lsls	r1, r2, #5
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	440a      	add	r2, r1
 80085be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085c6:	6013      	str	r3, [r2, #0]
 80085c8:	e000      	b.n	80085cc <USB_HC_Halt+0x22a>
          break;
 80085ca:	bf00      	nop
    }
  }

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3724      	adds	r7, #36	; 0x24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
	...

080085dc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80085ec:	78fb      	ldrb	r3, [r7, #3]
 80085ee:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80085f0:	2301      	movs	r3, #1
 80085f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	04da      	lsls	r2, r3, #19
 80085f8:	4b15      	ldr	r3, [pc, #84]	; (8008650 <USB_DoPing+0x74>)
 80085fa:	4013      	ands	r3, r2
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	0151      	lsls	r1, r2, #5
 8008600:	697a      	ldr	r2, [r7, #20]
 8008602:	440a      	add	r2, r1
 8008604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008608:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800860c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	4413      	add	r3, r2
 8008616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008624:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800862c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	4413      	add	r3, r2
 8008636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863a:	461a      	mov	r2, r3
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	371c      	adds	r7, #28
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	1ff80000 	.word	0x1ff80000

08008654 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7ff f981 	bl	800796c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800866a:	2110      	movs	r1, #16
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff f9b9 	bl	80079e4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7ff f9dc 	bl	8007a30 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008678:	2300      	movs	r3, #0
 800867a:	613b      	str	r3, [r7, #16]
 800867c:	e01f      	b.n	80086be <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	4413      	add	r3, r2
 8008686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008694:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800869c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086a4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	015a      	lsls	r2, r3, #5
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	4413      	add	r3, r2
 80086ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b2:	461a      	mov	r2, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	3301      	adds	r3, #1
 80086bc:	613b      	str	r3, [r7, #16]
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	2b0f      	cmp	r3, #15
 80086c2:	d9dc      	bls.n	800867e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80086c4:	2300      	movs	r3, #0
 80086c6:	613b      	str	r3, [r7, #16]
 80086c8:	e034      	b.n	8008734 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	015a      	lsls	r2, r3, #5
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086e0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086f0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086fe:	461a      	mov	r2, r3
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	3301      	adds	r3, #1
 8008708:	617b      	str	r3, [r7, #20]
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008710:	d80c      	bhi.n	800872c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4413      	add	r3, r2
 800871a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008728:	d0ec      	beq.n	8008704 <USB_StopHost+0xb0>
 800872a:	e000      	b.n	800872e <USB_StopHost+0xda>
        break;
 800872c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	3301      	adds	r3, #1
 8008732:	613b      	str	r3, [r7, #16]
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	2b0f      	cmp	r3, #15
 8008738:	d9c7      	bls.n	80086ca <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008740:	461a      	mov	r2, r3
 8008742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008746:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800874e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7ff f8fa 	bl	800794a <USB_EnableGlobalInt>

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3718      	adds	r7, #24
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008760:	b590      	push	{r4, r7, lr}
 8008762:	b089      	sub	sp, #36	; 0x24
 8008764:	af04      	add	r7, sp, #16
 8008766:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008768:	2301      	movs	r3, #1
 800876a:	2202      	movs	r2, #2
 800876c:	2102      	movs	r1, #2
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fc66 	bl	8009040 <USBH_FindInterface>
 8008774:	4603      	mov	r3, r0
 8008776:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008778:	7bfb      	ldrb	r3, [r7, #15]
 800877a:	2bff      	cmp	r3, #255	; 0xff
 800877c:	d002      	beq.n	8008784 <USBH_CDC_InterfaceInit+0x24>
 800877e:	7bfb      	ldrb	r3, [r7, #15]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d901      	bls.n	8008788 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008784:	2302      	movs	r3, #2
 8008786:	e13d      	b.n	8008a04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fc3b 	bl	8009008 <USBH_SelectInterface>
 8008792:	4603      	mov	r3, r0
 8008794:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008796:	7bbb      	ldrb	r3, [r7, #14]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800879c:	2302      	movs	r3, #2
 800879e:	e131      	b.n	8008a04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80087a6:	2050      	movs	r0, #80	; 0x50
 80087a8:	f002 fa00 	bl	800abac <malloc>
 80087ac:	4603      	mov	r3, r0
 80087ae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80087c0:	2302      	movs	r3, #2
 80087c2:	e11f      	b.n	8008a04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80087c4:	2250      	movs	r2, #80	; 0x50
 80087c6:	2100      	movs	r1, #0
 80087c8:	68b8      	ldr	r0, [r7, #8]
 80087ca:	f002 f9ff 	bl	800abcc <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	211a      	movs	r1, #26
 80087d4:	fb01 f303 	mul.w	r3, r1, r3
 80087d8:	4413      	add	r3, r2
 80087da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	b25b      	sxtb	r3, r3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	da15      	bge.n	8008812 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	211a      	movs	r1, #26
 80087ec:	fb01 f303 	mul.w	r3, r1, r3
 80087f0:	4413      	add	r3, r2
 80087f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80087f6:	781a      	ldrb	r2, [r3, #0]
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	211a      	movs	r1, #26
 8008802:	fb01 f303 	mul.w	r3, r1, r3
 8008806:	4413      	add	r3, r2
 8008808:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800880c:	881a      	ldrh	r2, [r3, #0]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	785b      	ldrb	r3, [r3, #1]
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f001 fe32 	bl	800a482 <USBH_AllocPipe>
 800881e:	4603      	mov	r3, r0
 8008820:	461a      	mov	r2, r3
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	7819      	ldrb	r1, [r3, #0]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	7858      	ldrb	r0, [r3, #1]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	8952      	ldrh	r2, [r2, #10]
 800883e:	9202      	str	r2, [sp, #8]
 8008840:	2203      	movs	r2, #3
 8008842:	9201      	str	r2, [sp, #4]
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	4623      	mov	r3, r4
 8008848:	4602      	mov	r2, r0
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f001 fdea 	bl	800a424 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2200      	movs	r2, #0
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f002 f8f9 	bl	800aa50 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800885e:	2300      	movs	r3, #0
 8008860:	2200      	movs	r2, #0
 8008862:	210a      	movs	r1, #10
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fbeb 	bl	8009040 <USBH_FindInterface>
 800886a:	4603      	mov	r3, r0
 800886c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	2bff      	cmp	r3, #255	; 0xff
 8008872:	d002      	beq.n	800887a <USBH_CDC_InterfaceInit+0x11a>
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d901      	bls.n	800887e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800887a:	2302      	movs	r3, #2
 800887c:	e0c2      	b.n	8008a04 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800887e:	7bfb      	ldrb	r3, [r7, #15]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	211a      	movs	r1, #26
 8008884:	fb01 f303 	mul.w	r3, r1, r3
 8008888:	4413      	add	r3, r2
 800888a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	b25b      	sxtb	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	da16      	bge.n	80088c4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008896:	7bfb      	ldrb	r3, [r7, #15]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	211a      	movs	r1, #26
 800889c:	fb01 f303 	mul.w	r3, r1, r3
 80088a0:	4413      	add	r3, r2
 80088a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80088a6:	781a      	ldrb	r2, [r3, #0]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	211a      	movs	r1, #26
 80088b2:	fb01 f303 	mul.w	r3, r1, r3
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80088bc:	881a      	ldrh	r2, [r3, #0]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	835a      	strh	r2, [r3, #26]
 80088c2:	e015      	b.n	80088f0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	211a      	movs	r1, #26
 80088ca:	fb01 f303 	mul.w	r3, r1, r3
 80088ce:	4413      	add	r3, r2
 80088d0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80088d4:	781a      	ldrb	r2, [r3, #0]
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	211a      	movs	r1, #26
 80088e0:	fb01 f303 	mul.w	r3, r1, r3
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80088ea:	881a      	ldrh	r2, [r3, #0]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	211a      	movs	r1, #26
 80088f6:	fb01 f303 	mul.w	r3, r1, r3
 80088fa:	4413      	add	r3, r2
 80088fc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	b25b      	sxtb	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	da16      	bge.n	8008936 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	211a      	movs	r1, #26
 800890e:	fb01 f303 	mul.w	r3, r1, r3
 8008912:	4413      	add	r3, r2
 8008914:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008918:	781a      	ldrb	r2, [r3, #0]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	211a      	movs	r1, #26
 8008924:	fb01 f303 	mul.w	r3, r1, r3
 8008928:	4413      	add	r3, r2
 800892a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800892e:	881a      	ldrh	r2, [r3, #0]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	835a      	strh	r2, [r3, #26]
 8008934:	e015      	b.n	8008962 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008936:	7bfb      	ldrb	r3, [r7, #15]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	211a      	movs	r1, #26
 800893c:	fb01 f303 	mul.w	r3, r1, r3
 8008940:	4413      	add	r3, r2
 8008942:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008946:	781a      	ldrb	r2, [r3, #0]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	211a      	movs	r1, #26
 8008952:	fb01 f303 	mul.w	r3, r1, r3
 8008956:	4413      	add	r3, r2
 8008958:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800895c:	881a      	ldrh	r2, [r3, #0]
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	7b9b      	ldrb	r3, [r3, #14]
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f001 fd8a 	bl	800a482 <USBH_AllocPipe>
 800896e:	4603      	mov	r3, r0
 8008970:	461a      	mov	r2, r3
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	7bdb      	ldrb	r3, [r3, #15]
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f001 fd80 	bl	800a482 <USBH_AllocPipe>
 8008982:	4603      	mov	r3, r0
 8008984:	461a      	mov	r2, r3
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	7b59      	ldrb	r1, [r3, #13]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	7b98      	ldrb	r0, [r3, #14]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	8b12      	ldrh	r2, [r2, #24]
 80089a2:	9202      	str	r2, [sp, #8]
 80089a4:	2202      	movs	r2, #2
 80089a6:	9201      	str	r2, [sp, #4]
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	4623      	mov	r3, r4
 80089ac:	4602      	mov	r2, r0
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f001 fd38 	bl	800a424 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	7b19      	ldrb	r1, [r3, #12]
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	7bd8      	ldrb	r0, [r3, #15]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	8b52      	ldrh	r2, [r2, #26]
 80089cc:	9202      	str	r2, [sp, #8]
 80089ce:	2202      	movs	r2, #2
 80089d0:	9201      	str	r2, [sp, #4]
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	4623      	mov	r3, r4
 80089d6:	4602      	mov	r2, r0
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 fd23 	bl	800a424 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	7b5b      	ldrb	r3, [r3, #13]
 80089ea:	2200      	movs	r2, #0
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f002 f82e 	bl	800aa50 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	7b1b      	ldrb	r3, [r3, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f002 f827 	bl	800aa50 <USBH_LL_SetToggle>

  return USBH_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd90      	pop	{r4, r7, pc}

08008a0c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00e      	beq.n	8008a44 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 fd18 	bl	800a462 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f001 fd43 	bl	800a4c4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	7b1b      	ldrb	r3, [r3, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00e      	beq.n	8008a6a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	7b1b      	ldrb	r3, [r3, #12]
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f001 fd05 	bl	800a462 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	7b1b      	ldrb	r3, [r3, #12]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 fd30 	bl	800a4c4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	7b5b      	ldrb	r3, [r3, #13]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00e      	beq.n	8008a90 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	7b5b      	ldrb	r3, [r3, #13]
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f001 fcf2 	bl	800a462 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	7b5b      	ldrb	r3, [r3, #13]
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f001 fd1d 	bl	800a4c4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a96:	69db      	ldr	r3, [r3, #28]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00b      	beq.n	8008ab4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f002 f889 	bl	800abbc <free>
    phost->pActiveClass->pData = 0U;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	3340      	adds	r3, #64	; 0x40
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f8b1 	bl	8008c3e <GetLineCoding>
 8008adc:	4603      	mov	r3, r0
 8008ade:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008ae0:	7afb      	ldrb	r3, [r7, #11]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d105      	bne.n	8008af2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008aec:	2102      	movs	r1, #2
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008af2:	7afb      	ldrb	r3, [r7, #11]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b04:	2301      	movs	r3, #1
 8008b06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008b1c:	2b04      	cmp	r3, #4
 8008b1e:	d877      	bhi.n	8008c10 <USBH_CDC_Process+0x114>
 8008b20:	a201      	add	r2, pc, #4	; (adr r2, 8008b28 <USBH_CDC_Process+0x2c>)
 8008b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b26:	bf00      	nop
 8008b28:	08008b3d 	.word	0x08008b3d
 8008b2c:	08008b43 	.word	0x08008b43
 8008b30:	08008b73 	.word	0x08008b73
 8008b34:	08008be7 	.word	0x08008be7
 8008b38:	08008bf5 	.word	0x08008bf5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b40:	e06d      	b.n	8008c1e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f897 	bl	8008c7c <SetLineCoding>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d104      	bne.n	8008b62 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008b60:	e058      	b.n	8008c14 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008b62:	7bbb      	ldrb	r3, [r7, #14]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d055      	beq.n	8008c14 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2204      	movs	r2, #4
 8008b6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008b70:	e050      	b.n	8008c14 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	3340      	adds	r3, #64	; 0x40
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f860 	bl	8008c3e <GetLineCoding>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d126      	bne.n	8008bd6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b9a:	791b      	ldrb	r3, [r3, #4]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d13b      	bne.n	8008c18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008baa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d133      	bne.n	8008c18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d12b      	bne.n	8008c18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bc8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d124      	bne.n	8008c18 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f958 	bl	8008e84 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008bd4:	e020      	b.n	8008c18 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008bd6:	7bbb      	ldrb	r3, [r7, #14]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d01d      	beq.n	8008c18 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2204      	movs	r2, #4
 8008be0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008be4:	e018      	b.n	8008c18 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f867 	bl	8008cba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f8da 	bl	8008da6 <CDC_ProcessReception>
      break;
 8008bf2:	e014      	b.n	8008c1e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 ffe3 	bl	8009bc2 <USBH_ClrFeature>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10a      	bne.n	8008c1c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008c0e:	e005      	b.n	8008c1c <USBH_CDC_Process+0x120>

    default:
      break;
 8008c10:	bf00      	nop
 8008c12:	e004      	b.n	8008c1e <USBH_CDC_Process+0x122>
      break;
 8008c14:	bf00      	nop
 8008c16:	e002      	b.n	8008c1e <USBH_CDC_Process+0x122>
      break;
 8008c18:	bf00      	nop
 8008c1a:	e000      	b.n	8008c1e <USBH_CDC_Process+0x122>
      break;
 8008c1c:	bf00      	nop

  }

  return status;
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b082      	sub	sp, #8
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	22a1      	movs	r2, #161	; 0xa1
 8008c4c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2221      	movs	r2, #33	; 0x21
 8008c52:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2207      	movs	r2, #7
 8008c64:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2207      	movs	r2, #7
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f001 f988 	bl	8009f82 <USBH_CtlReq>
 8008c72:	4603      	mov	r3, r0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2221      	movs	r2, #33	; 0x21
 8008c8a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2220      	movs	r2, #32
 8008c90:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2207      	movs	r2, #7
 8008ca2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	2207      	movs	r2, #7
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f001 f969 	bl	8009f82 <USBH_CtlReq>
 8008cb0:	4603      	mov	r3, r0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b086      	sub	sp, #24
 8008cbe:	af02      	add	r7, sp, #8
 8008cc0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d002      	beq.n	8008ce0 <CDC_ProcessTransmission+0x26>
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d023      	beq.n	8008d26 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008cde:	e05e      	b.n	8008d9e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	8b12      	ldrh	r2, [r2, #24]
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d90b      	bls.n	8008d04 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	69d9      	ldr	r1, [r3, #28]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	8b1a      	ldrh	r2, [r3, #24]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	7b5b      	ldrb	r3, [r3, #13]
 8008cf8:	2001      	movs	r0, #1
 8008cfa:	9000      	str	r0, [sp, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 fb4e 	bl	800a39e <USBH_BulkSendData>
 8008d02:	e00b      	b.n	8008d1c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	7b5b      	ldrb	r3, [r3, #13]
 8008d12:	2001      	movs	r0, #1
 8008d14:	9000      	str	r0, [sp, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f001 fb41 	bl	800a39e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008d24:	e03b      	b.n	8008d9e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	7b5b      	ldrb	r3, [r3, #13]
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 fe65 	bl	800a9fc <USBH_LL_GetURBState>
 8008d32:	4603      	mov	r3, r0
 8008d34:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008d36:	7afb      	ldrb	r3, [r7, #11]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d128      	bne.n	8008d8e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	8b12      	ldrh	r2, [r2, #24]
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d90e      	bls.n	8008d66 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	8b12      	ldrh	r2, [r2, #24]
 8008d50:	1a9a      	subs	r2, r3, r2
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	8b12      	ldrh	r2, [r2, #24]
 8008d5e:	441a      	add	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	61da      	str	r2, [r3, #28]
 8008d64:	e002      	b.n	8008d6c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d004      	beq.n	8008d7e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008d7c:	e00e      	b.n	8008d9c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f868 	bl	8008e5c <USBH_CDC_TransmitCallback>
      break;
 8008d8c:	e006      	b.n	8008d9c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008d8e:	7afb      	ldrb	r3, [r7, #11]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d103      	bne.n	8008d9c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008d9c:	bf00      	nop
  }
}
 8008d9e:	bf00      	nop
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b086      	sub	sp, #24
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008db8:	2300      	movs	r3, #0
 8008dba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d002      	beq.n	8008dcc <CDC_ProcessReception+0x26>
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d00e      	beq.n	8008de8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008dca:	e043      	b.n	8008e54 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	6a19      	ldr	r1, [r3, #32]
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	8b5a      	ldrh	r2, [r3, #26]
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	7b1b      	ldrb	r3, [r3, #12]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f001 fb05 	bl	800a3e8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	2204      	movs	r2, #4
 8008de2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008de6:	e035      	b.n	8008e54 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	7b1b      	ldrb	r3, [r3, #12]
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f001 fe04 	bl	800a9fc <USBH_LL_GetURBState>
 8008df4:	4603      	mov	r3, r0
 8008df6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008df8:	7cfb      	ldrb	r3, [r7, #19]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d129      	bne.n	8008e52 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	7b1b      	ldrb	r3, [r3, #12]
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 fd67 	bl	800a8d8 <USBH_LL_GetLastXferSize>
 8008e0a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d016      	beq.n	8008e44 <CDC_ProcessReception+0x9e>
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	8b5b      	ldrh	r3, [r3, #26]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d910      	bls.n	8008e44 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	1ad2      	subs	r2, r2, r3
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	6a1a      	ldr	r2, [r3, #32]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	441a      	add	r2, r3
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	2203      	movs	r2, #3
 8008e3e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008e42:	e006      	b.n	8008e52 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f80f 	bl	8008e70 <USBH_CDC_ReceiveCallback>
      break;
 8008e52:	bf00      	nop
  }
}
 8008e54:	bf00      	nop
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d101      	bne.n	8008eb0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008eac:	2302      	movs	r3, #2
 8008eae:	e029      	b.n	8008f04 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	79fa      	ldrb	r2, [r7, #7]
 8008eb4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f000 f81f 	bl	8008f0c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d003      	beq.n	8008efc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f001 fc37 	bl	800a770 <USBH_LL_Init>

  return USBH_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008f18:	2300      	movs	r3, #0
 8008f1a:	60fb      	str	r3, [r7, #12]
 8008f1c:	e009      	b.n	8008f32 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	33e0      	adds	r3, #224	; 0xe0
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	2200      	movs	r2, #0
 8008f2a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	60fb      	str	r3, [r7, #12]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b0e      	cmp	r3, #14
 8008f36:	d9f2      	bls.n	8008f1e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008f38:	2300      	movs	r3, #0
 8008f3a:	60fb      	str	r3, [r7, #12]
 8008f3c:	e009      	b.n	8008f52 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f48:	2200      	movs	r2, #0
 8008f4a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	60fb      	str	r3, [r7, #12]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f58:	d3f1      	bcc.n	8008f3e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2240      	movs	r2, #64	; 0x40
 8008f7e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d016      	beq.n	8008ff6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10e      	bne.n	8008ff0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008fd8:	1c59      	adds	r1, r3, #1
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	33de      	adds	r3, #222	; 0xde
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	73fb      	strb	r3, [r7, #15]
 8008fee:	e004      	b.n	8008ffa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	73fb      	strb	r3, [r7, #15]
 8008ff4:	e001      	b.n	8008ffa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009014:	2300      	movs	r3, #0
 8009016:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800901e:	78fa      	ldrb	r2, [r7, #3]
 8009020:	429a      	cmp	r2, r3
 8009022:	d204      	bcs.n	800902e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	78fa      	ldrb	r2, [r7, #3]
 8009028:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800902c:	e001      	b.n	8009032 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800902e:	2302      	movs	r3, #2
 8009030:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009032:	7bfb      	ldrb	r3, [r7, #15]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	4608      	mov	r0, r1
 800904a:	4611      	mov	r1, r2
 800904c:	461a      	mov	r2, r3
 800904e:	4603      	mov	r3, r0
 8009050:	70fb      	strb	r3, [r7, #3]
 8009052:	460b      	mov	r3, r1
 8009054:	70bb      	strb	r3, [r7, #2]
 8009056:	4613      	mov	r3, r2
 8009058:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800905e:	2300      	movs	r3, #0
 8009060:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009068:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800906a:	e025      	b.n	80090b8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	221a      	movs	r2, #26
 8009070:	fb02 f303 	mul.w	r3, r2, r3
 8009074:	3308      	adds	r3, #8
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	4413      	add	r3, r2
 800907a:	3302      	adds	r3, #2
 800907c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	795b      	ldrb	r3, [r3, #5]
 8009082:	78fa      	ldrb	r2, [r7, #3]
 8009084:	429a      	cmp	r2, r3
 8009086:	d002      	beq.n	800908e <USBH_FindInterface+0x4e>
 8009088:	78fb      	ldrb	r3, [r7, #3]
 800908a:	2bff      	cmp	r3, #255	; 0xff
 800908c:	d111      	bne.n	80090b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009092:	78ba      	ldrb	r2, [r7, #2]
 8009094:	429a      	cmp	r2, r3
 8009096:	d002      	beq.n	800909e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009098:	78bb      	ldrb	r3, [r7, #2]
 800909a:	2bff      	cmp	r3, #255	; 0xff
 800909c:	d109      	bne.n	80090b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80090a2:	787a      	ldrb	r2, [r7, #1]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d002      	beq.n	80090ae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80090a8:	787b      	ldrb	r3, [r7, #1]
 80090aa:	2bff      	cmp	r3, #255	; 0xff
 80090ac:	d101      	bne.n	80090b2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80090ae:	7dfb      	ldrb	r3, [r7, #23]
 80090b0:	e006      	b.n	80090c0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	3301      	adds	r3, #1
 80090b6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d9d6      	bls.n	800906c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80090be:	23ff      	movs	r3, #255	; 0xff
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	371c      	adds	r7, #28
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f001 fb87 	bl	800a7e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80090da:	2101      	movs	r1, #1
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f001 fca0 	bl	800aa22 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b088      	sub	sp, #32
 80090f0:	af04      	add	r7, sp, #16
 80090f2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80090f4:	2302      	movs	r3, #2
 80090f6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b01      	cmp	r3, #1
 8009106:	d102      	bne.n	800910e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2203      	movs	r2, #3
 800910c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b0b      	cmp	r3, #11
 8009116:	f200 81b3 	bhi.w	8009480 <USBH_Process+0x394>
 800911a:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <USBH_Process+0x34>)
 800911c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009120:	08009151 	.word	0x08009151
 8009124:	08009183 	.word	0x08009183
 8009128:	080091eb 	.word	0x080091eb
 800912c:	0800941b 	.word	0x0800941b
 8009130:	08009481 	.word	0x08009481
 8009134:	0800928f 	.word	0x0800928f
 8009138:	080093c1 	.word	0x080093c1
 800913c:	080092c5 	.word	0x080092c5
 8009140:	080092e5 	.word	0x080092e5
 8009144:	08009305 	.word	0x08009305
 8009148:	08009333 	.word	0x08009333
 800914c:	08009403 	.word	0x08009403
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 8193 	beq.w	8009484 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2201      	movs	r2, #1
 8009162:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009164:	20c8      	movs	r0, #200	; 0xc8
 8009166:	f001 fca3 	bl	800aab0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 fb99 	bl	800a8a2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009180:	e180      	b.n	8009484 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009188:	2b01      	cmp	r3, #1
 800918a:	d107      	bne.n	800919c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800919a:	e182      	b.n	80094a2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80091a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091a6:	d914      	bls.n	80091d2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80091ae:	3301      	adds	r3, #1
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d903      	bls.n	80091ca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	220d      	movs	r2, #13
 80091c6:	701a      	strb	r2, [r3, #0]
      break;
 80091c8:	e16b      	b.n	80094a2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	701a      	strb	r2, [r3, #0]
      break;
 80091d0:	e167      	b.n	80094a2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80091d8:	f103 020a 	add.w	r2, r3, #10
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80091e2:	200a      	movs	r0, #10
 80091e4:	f001 fc64 	bl	800aab0 <USBH_Delay>
      break;
 80091e8:	e15b      	b.n	80094a2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d005      	beq.n	8009200 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80091fa:	2104      	movs	r1, #4
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009200:	2064      	movs	r0, #100	; 0x64
 8009202:	f001 fc55 	bl	800aab0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f001 fb24 	bl	800a854 <USBH_LL_GetSpeed>
 800920c:	4603      	mov	r3, r0
 800920e:	461a      	mov	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2205      	movs	r2, #5
 800921a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800921c:	2100      	movs	r1, #0
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f001 f92f 	bl	800a482 <USBH_AllocPipe>
 8009224:	4603      	mov	r3, r0
 8009226:	461a      	mov	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800922c:	2180      	movs	r1, #128	; 0x80
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f001 f927 	bl	800a482 <USBH_AllocPipe>
 8009234:	4603      	mov	r3, r0
 8009236:	461a      	mov	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	7919      	ldrb	r1, [r3, #4]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009250:	b292      	uxth	r2, r2
 8009252:	9202      	str	r2, [sp, #8]
 8009254:	2200      	movs	r2, #0
 8009256:	9201      	str	r2, [sp, #4]
 8009258:	9300      	str	r3, [sp, #0]
 800925a:	4603      	mov	r3, r0
 800925c:	2280      	movs	r2, #128	; 0x80
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f001 f8e0 	bl	800a424 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	7959      	ldrb	r1, [r3, #5]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009278:	b292      	uxth	r2, r2
 800927a:	9202      	str	r2, [sp, #8]
 800927c:	2200      	movs	r2, #0
 800927e:	9201      	str	r2, [sp, #4]
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	4603      	mov	r3, r0
 8009284:	2200      	movs	r2, #0
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f001 f8cc 	bl	800a424 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800928c:	e109      	b.n	80094a2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f90c 	bl	80094ac <USBH_HandleEnum>
 8009294:	4603      	mov	r3, r0
 8009296:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009298:	7bbb      	ldrb	r3, [r7, #14]
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b00      	cmp	r3, #0
 800929e:	f040 80f3 	bne.w	8009488 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d103      	bne.n	80092bc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2208      	movs	r2, #8
 80092b8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80092ba:	e0e5      	b.n	8009488 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2207      	movs	r2, #7
 80092c0:	701a      	strb	r2, [r3, #0]
      break;
 80092c2:	e0e1      	b.n	8009488 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f000 80de 	beq.w	800948c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092d6:	2101      	movs	r1, #1
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2208      	movs	r2, #8
 80092e0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80092e2:	e0d3      	b.n	800948c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fc20 	bl	8009b34 <USBH_SetCfg>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f040 80ca 	bne.w	8009490 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2209      	movs	r2, #9
 8009300:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009302:	e0c5      	b.n	8009490 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800930a:	f003 0320 	and.w	r3, r3, #32
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00b      	beq.n	800932a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009312:	2101      	movs	r1, #1
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fc30 	bl	8009b7a <USBH_SetFeature>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	f040 80b9 	bne.w	8009494 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	220a      	movs	r2, #10
 8009326:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009328:	e0b4      	b.n	8009494 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	220a      	movs	r2, #10
 800932e:	701a      	strb	r2, [r3, #0]
      break;
 8009330:	e0b0      	b.n	8009494 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 80ad 	beq.w	8009498 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009346:	2300      	movs	r3, #0
 8009348:	73fb      	strb	r3, [r7, #15]
 800934a:	e016      	b.n	800937a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800934c:	7bfa      	ldrb	r2, [r7, #15]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	32de      	adds	r2, #222	; 0xde
 8009352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009356:	791a      	ldrb	r2, [r3, #4]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800935e:	429a      	cmp	r2, r3
 8009360:	d108      	bne.n	8009374 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009362:	7bfa      	ldrb	r2, [r7, #15]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	32de      	adds	r2, #222	; 0xde
 8009368:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009372:	e005      	b.n	8009380 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009374:	7bfb      	ldrb	r3, [r7, #15]
 8009376:	3301      	adds	r3, #1
 8009378:	73fb      	strb	r3, [r7, #15]
 800937a:	7bfb      	ldrb	r3, [r7, #15]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0e5      	beq.n	800934c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009386:	2b00      	cmp	r3, #0
 8009388:	d016      	beq.n	80093b8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	4798      	blx	r3
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d109      	bne.n	80093b0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2206      	movs	r2, #6
 80093a0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80093a8:	2103      	movs	r1, #3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80093ae:	e073      	b.n	8009498 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	220d      	movs	r2, #13
 80093b4:	701a      	strb	r2, [r3, #0]
      break;
 80093b6:	e06f      	b.n	8009498 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	220d      	movs	r2, #13
 80093bc:	701a      	strb	r2, [r3, #0]
      break;
 80093be:	e06b      	b.n	8009498 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d017      	beq.n	80093fa <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	4798      	blx	r3
 80093d6:	4603      	mov	r3, r0
 80093d8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80093da:	7bbb      	ldrb	r3, [r7, #14]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d103      	bne.n	80093ea <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	220b      	movs	r2, #11
 80093e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80093e8:	e058      	b.n	800949c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d154      	bne.n	800949c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	220d      	movs	r2, #13
 80093f6:	701a      	strb	r2, [r3, #0]
      break;
 80093f8:	e050      	b.n	800949c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	220d      	movs	r2, #13
 80093fe:	701a      	strb	r2, [r3, #0]
      break;
 8009400:	e04c      	b.n	800949c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009408:	2b00      	cmp	r3, #0
 800940a:	d049      	beq.n	80094a0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	4798      	blx	r3
      }
      break;
 8009418:	e042      	b.n	80094a0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7ff fd72 	bl	8008f0c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800942e:	2b00      	cmp	r3, #0
 8009430:	d009      	beq.n	8009446 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800944c:	2b00      	cmp	r3, #0
 800944e:	d005      	beq.n	800945c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009456:	2105      	movs	r1, #5
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b01      	cmp	r3, #1
 8009466:	d107      	bne.n	8009478 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff fe2b 	bl	80090cc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009476:	e014      	b.n	80094a2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f001 f9b5 	bl	800a7e8 <USBH_LL_Start>
      break;
 800947e:	e010      	b.n	80094a2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009480:	bf00      	nop
 8009482:	e00e      	b.n	80094a2 <USBH_Process+0x3b6>
      break;
 8009484:	bf00      	nop
 8009486:	e00c      	b.n	80094a2 <USBH_Process+0x3b6>
      break;
 8009488:	bf00      	nop
 800948a:	e00a      	b.n	80094a2 <USBH_Process+0x3b6>
    break;
 800948c:	bf00      	nop
 800948e:	e008      	b.n	80094a2 <USBH_Process+0x3b6>
      break;
 8009490:	bf00      	nop
 8009492:	e006      	b.n	80094a2 <USBH_Process+0x3b6>
      break;
 8009494:	bf00      	nop
 8009496:	e004      	b.n	80094a2 <USBH_Process+0x3b6>
      break;
 8009498:	bf00      	nop
 800949a:	e002      	b.n	80094a2 <USBH_Process+0x3b6>
      break;
 800949c:	bf00      	nop
 800949e:	e000      	b.n	80094a2 <USBH_Process+0x3b6>
      break;
 80094a0:	bf00      	nop
  }
  return USBH_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af04      	add	r7, sp, #16
 80094b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80094b4:	2301      	movs	r3, #1
 80094b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80094b8:	2301      	movs	r3, #1
 80094ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	785b      	ldrb	r3, [r3, #1]
 80094c0:	2b07      	cmp	r3, #7
 80094c2:	f200 81c1 	bhi.w	8009848 <USBH_HandleEnum+0x39c>
 80094c6:	a201      	add	r2, pc, #4	; (adr r2, 80094cc <USBH_HandleEnum+0x20>)
 80094c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094cc:	080094ed 	.word	0x080094ed
 80094d0:	080095ab 	.word	0x080095ab
 80094d4:	08009615 	.word	0x08009615
 80094d8:	080096a3 	.word	0x080096a3
 80094dc:	0800970d 	.word	0x0800970d
 80094e0:	0800977d 	.word	0x0800977d
 80094e4:	080097c3 	.word	0x080097c3
 80094e8:	08009809 	.word	0x08009809
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80094ec:	2108      	movs	r1, #8
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fa50 	bl	8009994 <USBH_Get_DevDesc>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094f8:	7bbb      	ldrb	r3, [r7, #14]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d130      	bne.n	8009560 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	7919      	ldrb	r1, [r3, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009522:	b292      	uxth	r2, r2
 8009524:	9202      	str	r2, [sp, #8]
 8009526:	2200      	movs	r2, #0
 8009528:	9201      	str	r2, [sp, #4]
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	4603      	mov	r3, r0
 800952e:	2280      	movs	r2, #128	; 0x80
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 ff77 	bl	800a424 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	7959      	ldrb	r1, [r3, #5]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800954a:	b292      	uxth	r2, r2
 800954c:	9202      	str	r2, [sp, #8]
 800954e:	2200      	movs	r2, #0
 8009550:	9201      	str	r2, [sp, #4]
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	4603      	mov	r3, r0
 8009556:	2200      	movs	r2, #0
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 ff63 	bl	800a424 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800955e:	e175      	b.n	800984c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009560:	7bbb      	ldrb	r3, [r7, #14]
 8009562:	2b03      	cmp	r3, #3
 8009564:	f040 8172 	bne.w	800984c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800956e:	3301      	adds	r3, #1
 8009570:	b2da      	uxtb	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800957e:	2b03      	cmp	r3, #3
 8009580:	d903      	bls.n	800958a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	220d      	movs	r2, #13
 8009586:	701a      	strb	r2, [r3, #0]
      break;
 8009588:	e160      	b.n	800984c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	795b      	ldrb	r3, [r3, #5]
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 ff97 	bl	800a4c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	791b      	ldrb	r3, [r3, #4]
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 ff91 	bl	800a4c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	701a      	strb	r2, [r3, #0]
      break;
 80095a8:	e150      	b.n	800984c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80095aa:	2112      	movs	r1, #18
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f9f1 	bl	8009994 <USBH_Get_DevDesc>
 80095b2:	4603      	mov	r3, r0
 80095b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d103      	bne.n	80095c4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2202      	movs	r2, #2
 80095c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80095c2:	e145      	b.n	8009850 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	f040 8142 	bne.w	8009850 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095d2:	3301      	adds	r3, #1
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d903      	bls.n	80095ee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	220d      	movs	r2, #13
 80095ea:	701a      	strb	r2, [r3, #0]
      break;
 80095ec:	e130      	b.n	8009850 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	795b      	ldrb	r3, [r3, #5]
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 ff65 	bl	800a4c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	791b      	ldrb	r3, [r3, #4]
 80095fe:	4619      	mov	r1, r3
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 ff5f 	bl	800a4c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	701a      	strb	r2, [r3, #0]
      break;
 8009612:	e11d      	b.n	8009850 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009614:	2101      	movs	r1, #1
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fa68 	bl	8009aec <USBH_SetAddress>
 800961c:	4603      	mov	r3, r0
 800961e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009620:	7bbb      	ldrb	r3, [r7, #14]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d132      	bne.n	800968c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009626:	2002      	movs	r0, #2
 8009628:	f001 fa42 	bl	800aab0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2203      	movs	r2, #3
 8009638:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	7919      	ldrb	r1, [r3, #4]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800964e:	b292      	uxth	r2, r2
 8009650:	9202      	str	r2, [sp, #8]
 8009652:	2200      	movs	r2, #0
 8009654:	9201      	str	r2, [sp, #4]
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	4603      	mov	r3, r0
 800965a:	2280      	movs	r2, #128	; 0x80
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fee1 	bl	800a424 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	7959      	ldrb	r1, [r3, #5]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009676:	b292      	uxth	r2, r2
 8009678:	9202      	str	r2, [sp, #8]
 800967a:	2200      	movs	r2, #0
 800967c:	9201      	str	r2, [sp, #4]
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	4603      	mov	r3, r0
 8009682:	2200      	movs	r2, #0
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fecd 	bl	800a424 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800968a:	e0e3      	b.n	8009854 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	2b03      	cmp	r3, #3
 8009690:	f040 80e0 	bne.w	8009854 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	220d      	movs	r2, #13
 8009698:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	705a      	strb	r2, [r3, #1]
      break;
 80096a0:	e0d8      	b.n	8009854 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80096a2:	2109      	movs	r1, #9
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f99d 	bl	80099e4 <USBH_Get_CfgDesc>
 80096aa:	4603      	mov	r3, r0
 80096ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d103      	bne.n	80096bc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2204      	movs	r2, #4
 80096b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80096ba:	e0cd      	b.n	8009858 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	2b03      	cmp	r3, #3
 80096c0:	f040 80ca 	bne.w	8009858 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80096ca:	3301      	adds	r3, #1
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80096da:	2b03      	cmp	r3, #3
 80096dc:	d903      	bls.n	80096e6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	220d      	movs	r2, #13
 80096e2:	701a      	strb	r2, [r3, #0]
      break;
 80096e4:	e0b8      	b.n	8009858 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	795b      	ldrb	r3, [r3, #5]
 80096ea:	4619      	mov	r1, r3
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fee9 	bl	800a4c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	791b      	ldrb	r3, [r3, #4]
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fee3 	bl	800a4c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	701a      	strb	r2, [r3, #0]
      break;
 800970a:	e0a5      	b.n	8009858 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f965 	bl	80099e4 <USBH_Get_CfgDesc>
 800971a:	4603      	mov	r3, r0
 800971c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d103      	bne.n	800972c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2205      	movs	r2, #5
 8009728:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800972a:	e097      	b.n	800985c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800972c:	7bbb      	ldrb	r3, [r7, #14]
 800972e:	2b03      	cmp	r3, #3
 8009730:	f040 8094 	bne.w	800985c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800973a:	3301      	adds	r3, #1
 800973c:	b2da      	uxtb	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800974a:	2b03      	cmp	r3, #3
 800974c:	d903      	bls.n	8009756 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	220d      	movs	r2, #13
 8009752:	701a      	strb	r2, [r3, #0]
      break;
 8009754:	e082      	b.n	800985c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	795b      	ldrb	r3, [r3, #5]
 800975a:	4619      	mov	r1, r3
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 feb1 	bl	800a4c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	791b      	ldrb	r3, [r3, #4]
 8009766:	4619      	mov	r1, r3
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 feab 	bl	800a4c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	701a      	strb	r2, [r3, #0]
      break;
 800977a:	e06f      	b.n	800985c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009782:	2b00      	cmp	r3, #0
 8009784:	d019      	beq.n	80097ba <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009792:	23ff      	movs	r3, #255	; 0xff
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f949 	bl	8009a2c <USBH_Get_StringDesc>
 800979a:	4603      	mov	r3, r0
 800979c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800979e:	7bbb      	ldrb	r3, [r7, #14]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d103      	bne.n	80097ac <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2206      	movs	r2, #6
 80097a8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80097aa:	e059      	b.n	8009860 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097ac:	7bbb      	ldrb	r3, [r7, #14]
 80097ae:	2b03      	cmp	r3, #3
 80097b0:	d156      	bne.n	8009860 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2206      	movs	r2, #6
 80097b6:	705a      	strb	r2, [r3, #1]
      break;
 80097b8:	e052      	b.n	8009860 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2206      	movs	r2, #6
 80097be:	705a      	strb	r2, [r3, #1]
      break;
 80097c0:	e04e      	b.n	8009860 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d019      	beq.n	8009800 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80097d8:	23ff      	movs	r3, #255	; 0xff
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f926 	bl	8009a2c <USBH_Get_StringDesc>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d103      	bne.n	80097f2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2207      	movs	r2, #7
 80097ee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80097f0:	e038      	b.n	8009864 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	2b03      	cmp	r3, #3
 80097f6:	d135      	bne.n	8009864 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2207      	movs	r2, #7
 80097fc:	705a      	strb	r2, [r3, #1]
      break;
 80097fe:	e031      	b.n	8009864 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2207      	movs	r2, #7
 8009804:	705a      	strb	r2, [r3, #1]
      break;
 8009806:	e02d      	b.n	8009864 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800980e:	2b00      	cmp	r3, #0
 8009810:	d017      	beq.n	8009842 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800981e:	23ff      	movs	r3, #255	; 0xff
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f903 	bl	8009a2c <USBH_Get_StringDesc>
 8009826:	4603      	mov	r3, r0
 8009828:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d102      	bne.n	8009836 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009834:	e018      	b.n	8009868 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009836:	7bbb      	ldrb	r3, [r7, #14]
 8009838:	2b03      	cmp	r3, #3
 800983a:	d115      	bne.n	8009868 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	73fb      	strb	r3, [r7, #15]
      break;
 8009840:	e012      	b.n	8009868 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	73fb      	strb	r3, [r7, #15]
      break;
 8009846:	e00f      	b.n	8009868 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009848:	bf00      	nop
 800984a:	e00e      	b.n	800986a <USBH_HandleEnum+0x3be>
      break;
 800984c:	bf00      	nop
 800984e:	e00c      	b.n	800986a <USBH_HandleEnum+0x3be>
      break;
 8009850:	bf00      	nop
 8009852:	e00a      	b.n	800986a <USBH_HandleEnum+0x3be>
      break;
 8009854:	bf00      	nop
 8009856:	e008      	b.n	800986a <USBH_HandleEnum+0x3be>
      break;
 8009858:	bf00      	nop
 800985a:	e006      	b.n	800986a <USBH_HandleEnum+0x3be>
      break;
 800985c:	bf00      	nop
 800985e:	e004      	b.n	800986a <USBH_HandleEnum+0x3be>
      break;
 8009860:	bf00      	nop
 8009862:	e002      	b.n	800986a <USBH_HandleEnum+0x3be>
      break;
 8009864:	bf00      	nop
 8009866:	e000      	b.n	800986a <USBH_HandleEnum+0x3be>
      break;
 8009868:	bf00      	nop
  }
  return Status;
 800986a:	7bfb      	ldrb	r3, [r7, #15]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	683a      	ldr	r2, [r7, #0]
 8009882:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009886:	bf00      	nop
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b082      	sub	sp, #8
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f804 	bl	80098b6 <USBH_HandleSof>
}
 80098ae:	bf00      	nop
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b082      	sub	sp, #8
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b0b      	cmp	r3, #11
 80098c6:	d10a      	bne.n	80098de <USBH_HandleSof+0x28>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d005      	beq.n	80098de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	4798      	blx	r3
  }
}
 80098de:	bf00      	nop
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80098e6:	b480      	push	{r7}
 80098e8:	b083      	sub	sp, #12
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80098f6:	bf00      	nop
}
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009912:	bf00      	nop
}
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800991e:	b480      	push	{r7}
 8009920:	b083      	sub	sp, #12
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 ff56 	bl	800a81e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	791b      	ldrb	r3, [r3, #4]
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fda3 	bl	800a4c4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	795b      	ldrb	r3, [r3, #5]
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fd9d 	bl	800a4c4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af02      	add	r7, sp, #8
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	460b      	mov	r3, r1
 800999e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80099a6:	78fb      	ldrb	r3, [r7, #3]
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	4613      	mov	r3, r2
 80099ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099b2:	2100      	movs	r1, #0
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f864 	bl	8009a82 <USBH_GetDescriptor>
 80099ba:	4603      	mov	r3, r0
 80099bc:	73fb      	strb	r3, [r7, #15]
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10a      	bne.n	80099da <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80099d0:	78fa      	ldrb	r2, [r7, #3]
 80099d2:	b292      	uxth	r2, r2
 80099d4:	4619      	mov	r1, r3
 80099d6:	f000 f918 	bl	8009c0a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80099da:	7bfb      	ldrb	r3, [r7, #15]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af02      	add	r7, sp, #8
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	331c      	adds	r3, #28
 80099f4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80099f6:	887b      	ldrh	r3, [r7, #2]
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a00:	2100      	movs	r1, #0
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f83d 	bl	8009a82 <USBH_GetDescriptor>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	72fb      	strb	r3, [r7, #11]
 8009a0c:	7afb      	ldrb	r3, [r7, #11]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d107      	bne.n	8009a22 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009a18:	887a      	ldrh	r2, [r7, #2]
 8009a1a:	68f9      	ldr	r1, [r7, #12]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 f964 	bl	8009cea <USBH_ParseCfgDesc>
  }

  return status;
 8009a22:	7afb      	ldrb	r3, [r7, #11]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b088      	sub	sp, #32
 8009a30:	af02      	add	r7, sp, #8
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	607a      	str	r2, [r7, #4]
 8009a36:	461a      	mov	r2, r3
 8009a38:	460b      	mov	r3, r1
 8009a3a:	72fb      	strb	r3, [r7, #11]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009a40:	7afb      	ldrb	r3, [r7, #11]
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009a48:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009a50:	893b      	ldrh	r3, [r7, #8]
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	460b      	mov	r3, r1
 8009a56:	2100      	movs	r1, #0
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 f812 	bl	8009a82 <USBH_GetDescriptor>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	75fb      	strb	r3, [r7, #23]
 8009a62:	7dfb      	ldrb	r3, [r7, #23]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d107      	bne.n	8009a78 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009a6e:	893a      	ldrh	r2, [r7, #8]
 8009a70:	6879      	ldr	r1, [r7, #4]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 fa37 	bl	8009ee6 <USBH_ParseStringDesc>
  }

  return status;
 8009a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b084      	sub	sp, #16
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	60f8      	str	r0, [r7, #12]
 8009a8a:	607b      	str	r3, [r7, #4]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	72fb      	strb	r3, [r7, #11]
 8009a90:	4613      	mov	r3, r2
 8009a92:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	789b      	ldrb	r3, [r3, #2]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d11c      	bne.n	8009ad6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009a9c:	7afb      	ldrb	r3, [r7, #11]
 8009a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2206      	movs	r2, #6
 8009aac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	893a      	ldrh	r2, [r7, #8]
 8009ab2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009ab4:	893b      	ldrh	r3, [r7, #8]
 8009ab6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009abe:	d104      	bne.n	8009aca <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f240 4209 	movw	r2, #1033	; 0x409
 8009ac6:	829a      	strh	r2, [r3, #20]
 8009ac8:	e002      	b.n	8009ad0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	8b3a      	ldrh	r2, [r7, #24]
 8009ad4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009ad6:	8b3b      	ldrh	r3, [r7, #24]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f000 fa50 	bl	8009f82 <USBH_CtlReq>
 8009ae2:	4603      	mov	r3, r0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	789b      	ldrb	r3, [r3, #2]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d10f      	bne.n	8009b20 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2205      	movs	r2, #5
 8009b0a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009b0c:	78fb      	ldrb	r3, [r7, #3]
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009b20:	2200      	movs	r2, #0
 8009b22:	2100      	movs	r1, #0
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 fa2c 	bl	8009f82 <USBH_CtlReq>
 8009b2a:	4603      	mov	r3, r0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	789b      	ldrb	r3, [r3, #2]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d10e      	bne.n	8009b66 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2209      	movs	r2, #9
 8009b52:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	887a      	ldrh	r2, [r7, #2]
 8009b58:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009b66:	2200      	movs	r2, #0
 8009b68:	2100      	movs	r1, #0
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fa09 	bl	8009f82 <USBH_CtlReq>
 8009b70:	4603      	mov	r3, r0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b082      	sub	sp, #8
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
 8009b82:	460b      	mov	r3, r1
 8009b84:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	789b      	ldrb	r3, [r3, #2]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d10f      	bne.n	8009bae <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2203      	movs	r2, #3
 8009b98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009b9a:	78fb      	ldrb	r3, [r7, #3]
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009bae:	2200      	movs	r2, #0
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f9e5 	bl	8009f82 <USBH_CtlReq>
 8009bb8:	4603      	mov	r3, r0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b082      	sub	sp, #8
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	789b      	ldrb	r3, [r3, #2]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d10f      	bne.n	8009bf6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2202      	movs	r2, #2
 8009bda:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009be8:	78fb      	ldrb	r3, [r7, #3]
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f9c1 	bl	8009f82 <USBH_CtlReq>
 8009c00:	4603      	mov	r3, r0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b085      	sub	sp, #20
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	60f8      	str	r0, [r7, #12]
 8009c12:	60b9      	str	r1, [r7, #8]
 8009c14:	4613      	mov	r3, r2
 8009c16:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	781a      	ldrb	r2, [r3, #0]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	785a      	ldrb	r2, [r3, #1]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	3302      	adds	r3, #2
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	3303      	adds	r3, #3
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	021b      	lsls	r3, r3, #8
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	791a      	ldrb	r2, [r3, #4]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	795a      	ldrb	r2, [r3, #5]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	799a      	ldrb	r2, [r3, #6]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	79da      	ldrb	r2, [r3, #7]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009c64:	88fb      	ldrh	r3, [r7, #6]
 8009c66:	2b08      	cmp	r3, #8
 8009c68:	d939      	bls.n	8009cde <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	3308      	adds	r3, #8
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	3309      	adds	r3, #9
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	021b      	lsls	r3, r3, #8
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	330a      	adds	r3, #10
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	330b      	adds	r3, #11
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	021b      	lsls	r3, r3, #8
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	330c      	adds	r3, #12
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	330d      	adds	r3, #13
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	021b      	lsls	r3, r3, #8
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	7b9a      	ldrb	r2, [r3, #14]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	7bda      	ldrb	r2, [r3, #15]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	7c1a      	ldrb	r2, [r3, #16]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	7c5a      	ldrb	r2, [r3, #17]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	745a      	strb	r2, [r3, #17]
  }
}
 8009cde:	bf00      	nop
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b08a      	sub	sp, #40	; 0x28
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	60f8      	str	r0, [r7, #12]
 8009cf2:	60b9      	str	r1, [r7, #8]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009d02:	2300      	movs	r3, #0
 8009d04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	781a      	ldrb	r2, [r3, #0]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	785a      	ldrb	r2, [r3, #1]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	3302      	adds	r3, #2
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	3303      	adds	r3, #3
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	021b      	lsls	r3, r3, #8
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	4313      	orrs	r3, r2
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	791a      	ldrb	r2, [r3, #4]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	795a      	ldrb	r2, [r3, #5]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	799a      	ldrb	r2, [r3, #6]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	79da      	ldrb	r2, [r3, #7]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	7a1a      	ldrb	r2, [r3, #8]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009d60:	88fb      	ldrh	r3, [r7, #6]
 8009d62:	2b09      	cmp	r3, #9
 8009d64:	d95f      	bls.n	8009e26 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009d66:	2309      	movs	r3, #9
 8009d68:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009d6e:	e051      	b.n	8009e14 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009d70:	f107 0316 	add.w	r3, r7, #22
 8009d74:	4619      	mov	r1, r3
 8009d76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d78:	f000 f8e8 	bl	8009f4c <USBH_GetNextDesc>
 8009d7c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d80:	785b      	ldrb	r3, [r3, #1]
 8009d82:	2b04      	cmp	r3, #4
 8009d84:	d146      	bne.n	8009e14 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009d86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d8a:	221a      	movs	r2, #26
 8009d8c:	fb02 f303 	mul.w	r3, r2, r3
 8009d90:	3308      	adds	r3, #8
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	4413      	add	r3, r2
 8009d96:	3302      	adds	r3, #2
 8009d98:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009d9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d9c:	69f8      	ldr	r0, [r7, #28]
 8009d9e:	f000 f846 	bl	8009e2e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009da2:	2300      	movs	r3, #0
 8009da4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009dac:	e022      	b.n	8009df4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009dae:	f107 0316 	add.w	r3, r7, #22
 8009db2:	4619      	mov	r1, r3
 8009db4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009db6:	f000 f8c9 	bl	8009f4c <USBH_GetNextDesc>
 8009dba:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	785b      	ldrb	r3, [r3, #1]
 8009dc0:	2b05      	cmp	r3, #5
 8009dc2:	d117      	bne.n	8009df4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009dc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009dc8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009dcc:	3201      	adds	r2, #1
 8009dce:	00d2      	lsls	r2, r2, #3
 8009dd0:	211a      	movs	r1, #26
 8009dd2:	fb01 f303 	mul.w	r3, r1, r3
 8009dd6:	4413      	add	r3, r2
 8009dd8:	3308      	adds	r3, #8
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	4413      	add	r3, r2
 8009dde:	3304      	adds	r3, #4
 8009de0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009de2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009de4:	69b8      	ldr	r0, [r7, #24]
 8009de6:	f000 f851 	bl	8009e8c <USBH_ParseEPDesc>
            ep_ix++;
 8009dea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009dee:	3301      	adds	r3, #1
 8009df0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	791b      	ldrb	r3, [r3, #4]
 8009df8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d204      	bcs.n	8009e0a <USBH_ParseCfgDesc+0x120>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	885a      	ldrh	r2, [r3, #2]
 8009e04:	8afb      	ldrh	r3, [r7, #22]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d8d1      	bhi.n	8009dae <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009e0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e0e:	3301      	adds	r3, #1
 8009e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009e14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d804      	bhi.n	8009e26 <USBH_ParseCfgDesc+0x13c>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	885a      	ldrh	r2, [r3, #2]
 8009e20:	8afb      	ldrh	r3, [r7, #22]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d8a4      	bhi.n	8009d70 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009e26:	bf00      	nop
 8009e28:	3728      	adds	r7, #40	; 0x28
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009e2e:	b480      	push	{r7}
 8009e30:	b083      	sub	sp, #12
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	781a      	ldrb	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	785a      	ldrb	r2, [r3, #1]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	789a      	ldrb	r2, [r3, #2]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	78da      	ldrb	r2, [r3, #3]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	791a      	ldrb	r2, [r3, #4]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	795a      	ldrb	r2, [r3, #5]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	799a      	ldrb	r2, [r3, #6]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	79da      	ldrb	r2, [r3, #7]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	7a1a      	ldrb	r2, [r3, #8]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	721a      	strb	r2, [r3, #8]
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	781a      	ldrb	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	785a      	ldrb	r2, [r3, #1]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	789a      	ldrb	r2, [r3, #2]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	78da      	ldrb	r2, [r3, #3]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	3304      	adds	r3, #4
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	3305      	adds	r3, #5
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	021b      	lsls	r3, r3, #8
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	799a      	ldrb	r2, [r3, #6]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	719a      	strb	r2, [r3, #6]
}
 8009eda:	bf00      	nop
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b087      	sub	sp, #28
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	60f8      	str	r0, [r7, #12]
 8009eee:	60b9      	str	r1, [r7, #8]
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	2b03      	cmp	r3, #3
 8009efc:	d120      	bne.n	8009f40 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	1e9a      	subs	r2, r3, #2
 8009f04:	88fb      	ldrh	r3, [r7, #6]
 8009f06:	4293      	cmp	r3, r2
 8009f08:	bf28      	it	cs
 8009f0a:	4613      	movcs	r3, r2
 8009f0c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	3302      	adds	r3, #2
 8009f12:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009f14:	2300      	movs	r3, #0
 8009f16:	82fb      	strh	r3, [r7, #22]
 8009f18:	e00b      	b.n	8009f32 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009f1a:	8afb      	ldrh	r3, [r7, #22]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	4413      	add	r3, r2
 8009f20:	781a      	ldrb	r2, [r3, #0]
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009f2c:	8afb      	ldrh	r3, [r7, #22]
 8009f2e:	3302      	adds	r3, #2
 8009f30:	82fb      	strh	r3, [r7, #22]
 8009f32:	8afa      	ldrh	r2, [r7, #22]
 8009f34:	8abb      	ldrh	r3, [r7, #20]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d3ef      	bcc.n	8009f1a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	701a      	strb	r2, [r3, #0]
  }
}
 8009f40:	bf00      	nop
 8009f42:	371c      	adds	r7, #28
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	881a      	ldrh	r2, [r3, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	4413      	add	r3, r2
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4413      	add	r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009f74:	68fb      	ldr	r3, [r7, #12]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b086      	sub	sp, #24
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	60f8      	str	r0, [r7, #12]
 8009f8a:	60b9      	str	r1, [r7, #8]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009f90:	2301      	movs	r3, #1
 8009f92:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	789b      	ldrb	r3, [r3, #2]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d002      	beq.n	8009fa2 <USBH_CtlReq+0x20>
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d00f      	beq.n	8009fc0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009fa0:	e027      	b.n	8009ff2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	88fa      	ldrh	r2, [r7, #6]
 8009fac:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8009fbe:	e018      	b.n	8009ff2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 f81b 	bl	8009ffc <USBH_HandleControl>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d002      	beq.n	8009fd6 <USBH_CtlReq+0x54>
 8009fd0:	7dfb      	ldrb	r3, [r7, #23]
 8009fd2:	2b03      	cmp	r3, #3
 8009fd4:	d106      	bne.n	8009fe4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	761a      	strb	r2, [r3, #24]
      break;
 8009fe2:	e005      	b.n	8009ff0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009fe4:	7dfb      	ldrb	r3, [r7, #23]
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d102      	bne.n	8009ff0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2201      	movs	r2, #1
 8009fee:	709a      	strb	r2, [r3, #2]
      break;
 8009ff0:	bf00      	nop
  }
  return status;
 8009ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3718      	adds	r7, #24
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af02      	add	r7, sp, #8
 800a002:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a004:	2301      	movs	r3, #1
 800a006:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a008:	2300      	movs	r3, #0
 800a00a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	7e1b      	ldrb	r3, [r3, #24]
 800a010:	3b01      	subs	r3, #1
 800a012:	2b0a      	cmp	r3, #10
 800a014:	f200 8156 	bhi.w	800a2c4 <USBH_HandleControl+0x2c8>
 800a018:	a201      	add	r2, pc, #4	; (adr r2, 800a020 <USBH_HandleControl+0x24>)
 800a01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01e:	bf00      	nop
 800a020:	0800a04d 	.word	0x0800a04d
 800a024:	0800a067 	.word	0x0800a067
 800a028:	0800a0d1 	.word	0x0800a0d1
 800a02c:	0800a0f7 	.word	0x0800a0f7
 800a030:	0800a12f 	.word	0x0800a12f
 800a034:	0800a159 	.word	0x0800a159
 800a038:	0800a1ab 	.word	0x0800a1ab
 800a03c:	0800a1cd 	.word	0x0800a1cd
 800a040:	0800a209 	.word	0x0800a209
 800a044:	0800a22f 	.word	0x0800a22f
 800a048:	0800a26d 	.word	0x0800a26d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f103 0110 	add.w	r1, r3, #16
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	795b      	ldrb	r3, [r3, #5]
 800a056:	461a      	mov	r2, r3
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 f943 	bl	800a2e4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2202      	movs	r2, #2
 800a062:	761a      	strb	r2, [r3, #24]
      break;
 800a064:	e139      	b.n	800a2da <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	795b      	ldrb	r3, [r3, #5]
 800a06a:	4619      	mov	r1, r3
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fcc5 	bl	800a9fc <USBH_LL_GetURBState>
 800a072:	4603      	mov	r3, r0
 800a074:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a076:	7bbb      	ldrb	r3, [r7, #14]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d11e      	bne.n	800a0ba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	7c1b      	ldrb	r3, [r3, #16]
 800a080:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a084:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	8adb      	ldrh	r3, [r3, #22]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00a      	beq.n	800a0a4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a08e:	7b7b      	ldrb	r3, [r7, #13]
 800a090:	2b80      	cmp	r3, #128	; 0x80
 800a092:	d103      	bne.n	800a09c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2203      	movs	r2, #3
 800a098:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a09a:	e115      	b.n	800a2c8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2205      	movs	r2, #5
 800a0a0:	761a      	strb	r2, [r3, #24]
      break;
 800a0a2:	e111      	b.n	800a2c8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a0a4:	7b7b      	ldrb	r3, [r7, #13]
 800a0a6:	2b80      	cmp	r3, #128	; 0x80
 800a0a8:	d103      	bne.n	800a0b2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2209      	movs	r2, #9
 800a0ae:	761a      	strb	r2, [r3, #24]
      break;
 800a0b0:	e10a      	b.n	800a2c8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2207      	movs	r2, #7
 800a0b6:	761a      	strb	r2, [r3, #24]
      break;
 800a0b8:	e106      	b.n	800a2c8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a0ba:	7bbb      	ldrb	r3, [r7, #14]
 800a0bc:	2b04      	cmp	r3, #4
 800a0be:	d003      	beq.n	800a0c8 <USBH_HandleControl+0xcc>
 800a0c0:	7bbb      	ldrb	r3, [r7, #14]
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	f040 8100 	bne.w	800a2c8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	220b      	movs	r2, #11
 800a0cc:	761a      	strb	r2, [r3, #24]
      break;
 800a0ce:	e0fb      	b.n	800a2c8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6899      	ldr	r1, [r3, #8]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	899a      	ldrh	r2, [r3, #12]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	791b      	ldrb	r3, [r3, #4]
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f93a 	bl	800a362 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2204      	movs	r2, #4
 800a0f2:	761a      	strb	r2, [r3, #24]
      break;
 800a0f4:	e0f1      	b.n	800a2da <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	791b      	ldrb	r3, [r3, #4]
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fc7d 	bl	800a9fc <USBH_LL_GetURBState>
 800a102:	4603      	mov	r3, r0
 800a104:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a106:	7bbb      	ldrb	r3, [r7, #14]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d102      	bne.n	800a112 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2209      	movs	r2, #9
 800a110:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a112:	7bbb      	ldrb	r3, [r7, #14]
 800a114:	2b05      	cmp	r3, #5
 800a116:	d102      	bne.n	800a11e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a118:	2303      	movs	r3, #3
 800a11a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a11c:	e0d6      	b.n	800a2cc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a11e:	7bbb      	ldrb	r3, [r7, #14]
 800a120:	2b04      	cmp	r3, #4
 800a122:	f040 80d3 	bne.w	800a2cc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	220b      	movs	r2, #11
 800a12a:	761a      	strb	r2, [r3, #24]
      break;
 800a12c:	e0ce      	b.n	800a2cc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6899      	ldr	r1, [r3, #8]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	899a      	ldrh	r2, [r3, #12]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	795b      	ldrb	r3, [r3, #5]
 800a13a:	2001      	movs	r0, #1
 800a13c:	9000      	str	r0, [sp, #0]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f8ea 	bl	800a318 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2206      	movs	r2, #6
 800a154:	761a      	strb	r2, [r3, #24]
      break;
 800a156:	e0c0      	b.n	800a2da <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	795b      	ldrb	r3, [r3, #5]
 800a15c:	4619      	mov	r1, r3
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 fc4c 	bl	800a9fc <USBH_LL_GetURBState>
 800a164:	4603      	mov	r3, r0
 800a166:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a168:	7bbb      	ldrb	r3, [r7, #14]
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d103      	bne.n	800a176 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2207      	movs	r2, #7
 800a172:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a174:	e0ac      	b.n	800a2d0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a176:	7bbb      	ldrb	r3, [r7, #14]
 800a178:	2b05      	cmp	r3, #5
 800a17a:	d105      	bne.n	800a188 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	220c      	movs	r2, #12
 800a180:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a182:	2303      	movs	r3, #3
 800a184:	73fb      	strb	r3, [r7, #15]
      break;
 800a186:	e0a3      	b.n	800a2d0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a188:	7bbb      	ldrb	r3, [r7, #14]
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d103      	bne.n	800a196 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2205      	movs	r2, #5
 800a192:	761a      	strb	r2, [r3, #24]
      break;
 800a194:	e09c      	b.n	800a2d0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a196:	7bbb      	ldrb	r3, [r7, #14]
 800a198:	2b04      	cmp	r3, #4
 800a19a:	f040 8099 	bne.w	800a2d0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	220b      	movs	r2, #11
 800a1a2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1a8:	e092      	b.n	800a2d0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	791b      	ldrb	r3, [r3, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f8d5 	bl	800a362 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2208      	movs	r2, #8
 800a1c8:	761a      	strb	r2, [r3, #24]

      break;
 800a1ca:	e086      	b.n	800a2da <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	791b      	ldrb	r3, [r3, #4]
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fc12 	bl	800a9fc <USBH_LL_GetURBState>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d105      	bne.n	800a1ee <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	220d      	movs	r2, #13
 800a1e6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a1ec:	e072      	b.n	800a2d4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a1ee:	7bbb      	ldrb	r3, [r7, #14]
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d103      	bne.n	800a1fc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	220b      	movs	r2, #11
 800a1f8:	761a      	strb	r2, [r3, #24]
      break;
 800a1fa:	e06b      	b.n	800a2d4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a1fc:	7bbb      	ldrb	r3, [r7, #14]
 800a1fe:	2b05      	cmp	r3, #5
 800a200:	d168      	bne.n	800a2d4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a202:	2303      	movs	r3, #3
 800a204:	73fb      	strb	r3, [r7, #15]
      break;
 800a206:	e065      	b.n	800a2d4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	795b      	ldrb	r3, [r3, #5]
 800a20c:	2201      	movs	r2, #1
 800a20e:	9200      	str	r2, [sp, #0]
 800a210:	2200      	movs	r2, #0
 800a212:	2100      	movs	r1, #0
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f87f 	bl	800a318 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a220:	b29a      	uxth	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	220a      	movs	r2, #10
 800a22a:	761a      	strb	r2, [r3, #24]
      break;
 800a22c:	e055      	b.n	800a2da <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	795b      	ldrb	r3, [r3, #5]
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fbe1 	bl	800a9fc <USBH_LL_GetURBState>
 800a23a:	4603      	mov	r3, r0
 800a23c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a23e:	7bbb      	ldrb	r3, [r7, #14]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d105      	bne.n	800a250 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a244:	2300      	movs	r3, #0
 800a246:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	220d      	movs	r2, #13
 800a24c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a24e:	e043      	b.n	800a2d8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a250:	7bbb      	ldrb	r3, [r7, #14]
 800a252:	2b02      	cmp	r3, #2
 800a254:	d103      	bne.n	800a25e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2209      	movs	r2, #9
 800a25a:	761a      	strb	r2, [r3, #24]
      break;
 800a25c:	e03c      	b.n	800a2d8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a25e:	7bbb      	ldrb	r3, [r7, #14]
 800a260:	2b04      	cmp	r3, #4
 800a262:	d139      	bne.n	800a2d8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	220b      	movs	r2, #11
 800a268:	761a      	strb	r2, [r3, #24]
      break;
 800a26a:	e035      	b.n	800a2d8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	7e5b      	ldrb	r3, [r3, #25]
 800a270:	3301      	adds	r3, #1
 800a272:	b2da      	uxtb	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	765a      	strb	r2, [r3, #25]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	7e5b      	ldrb	r3, [r3, #25]
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d806      	bhi.n	800a28e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a28c:	e025      	b.n	800a2da <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a294:	2106      	movs	r1, #6
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	795b      	ldrb	r3, [r3, #5]
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f90c 	bl	800a4c4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	791b      	ldrb	r3, [r3, #4]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f906 	bl	800a4c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a2be:	2302      	movs	r3, #2
 800a2c0:	73fb      	strb	r3, [r7, #15]
      break;
 800a2c2:	e00a      	b.n	800a2da <USBH_HandleControl+0x2de>

    default:
      break;
 800a2c4:	bf00      	nop
 800a2c6:	e008      	b.n	800a2da <USBH_HandleControl+0x2de>
      break;
 800a2c8:	bf00      	nop
 800a2ca:	e006      	b.n	800a2da <USBH_HandleControl+0x2de>
      break;
 800a2cc:	bf00      	nop
 800a2ce:	e004      	b.n	800a2da <USBH_HandleControl+0x2de>
      break;
 800a2d0:	bf00      	nop
 800a2d2:	e002      	b.n	800a2da <USBH_HandleControl+0x2de>
      break;
 800a2d4:	bf00      	nop
 800a2d6:	e000      	b.n	800a2da <USBH_HandleControl+0x2de>
      break;
 800a2d8:	bf00      	nop
  }

  return status;
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b088      	sub	sp, #32
 800a2e8:	af04      	add	r7, sp, #16
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a2f2:	79f9      	ldrb	r1, [r7, #7]
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	9303      	str	r3, [sp, #12]
 800a2f8:	2308      	movs	r3, #8
 800a2fa:	9302      	str	r3, [sp, #8]
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	9301      	str	r3, [sp, #4]
 800a300:	2300      	movs	r3, #0
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	2300      	movs	r3, #0
 800a306:	2200      	movs	r2, #0
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 fb46 	bl	800a99a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b088      	sub	sp, #32
 800a31c:	af04      	add	r7, sp, #16
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	4611      	mov	r1, r2
 800a324:	461a      	mov	r2, r3
 800a326:	460b      	mov	r3, r1
 800a328:	80fb      	strh	r3, [r7, #6]
 800a32a:	4613      	mov	r3, r2
 800a32c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a334:	2b00      	cmp	r3, #0
 800a336:	d001      	beq.n	800a33c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a338:	2300      	movs	r3, #0
 800a33a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a33c:	7979      	ldrb	r1, [r7, #5]
 800a33e:	7e3b      	ldrb	r3, [r7, #24]
 800a340:	9303      	str	r3, [sp, #12]
 800a342:	88fb      	ldrh	r3, [r7, #6]
 800a344:	9302      	str	r3, [sp, #8]
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	9301      	str	r3, [sp, #4]
 800a34a:	2301      	movs	r3, #1
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	2300      	movs	r3, #0
 800a350:	2200      	movs	r2, #0
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f000 fb21 	bl	800a99a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b088      	sub	sp, #32
 800a366:	af04      	add	r7, sp, #16
 800a368:	60f8      	str	r0, [r7, #12]
 800a36a:	60b9      	str	r1, [r7, #8]
 800a36c:	4611      	mov	r1, r2
 800a36e:	461a      	mov	r2, r3
 800a370:	460b      	mov	r3, r1
 800a372:	80fb      	strh	r3, [r7, #6]
 800a374:	4613      	mov	r3, r2
 800a376:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a378:	7979      	ldrb	r1, [r7, #5]
 800a37a:	2300      	movs	r3, #0
 800a37c:	9303      	str	r3, [sp, #12]
 800a37e:	88fb      	ldrh	r3, [r7, #6]
 800a380:	9302      	str	r3, [sp, #8]
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	9301      	str	r3, [sp, #4]
 800a386:	2301      	movs	r3, #1
 800a388:	9300      	str	r3, [sp, #0]
 800a38a:	2300      	movs	r3, #0
 800a38c:	2201      	movs	r2, #1
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f000 fb03 	bl	800a99a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a394:	2300      	movs	r3, #0

}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b088      	sub	sp, #32
 800a3a2:	af04      	add	r7, sp, #16
 800a3a4:	60f8      	str	r0, [r7, #12]
 800a3a6:	60b9      	str	r1, [r7, #8]
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	80fb      	strh	r3, [r7, #6]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a3c2:	7979      	ldrb	r1, [r7, #5]
 800a3c4:	7e3b      	ldrb	r3, [r7, #24]
 800a3c6:	9303      	str	r3, [sp, #12]
 800a3c8:	88fb      	ldrh	r3, [r7, #6]
 800a3ca:	9302      	str	r3, [sp, #8]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	9301      	str	r3, [sp, #4]
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f000 fade 	bl	800a99a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b088      	sub	sp, #32
 800a3ec:	af04      	add	r7, sp, #16
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	80fb      	strh	r3, [r7, #6]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a3fe:	7979      	ldrb	r1, [r7, #5]
 800a400:	2300      	movs	r3, #0
 800a402:	9303      	str	r3, [sp, #12]
 800a404:	88fb      	ldrh	r3, [r7, #6]
 800a406:	9302      	str	r3, [sp, #8]
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	9301      	str	r3, [sp, #4]
 800a40c:	2301      	movs	r3, #1
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	2302      	movs	r3, #2
 800a412:	2201      	movs	r2, #1
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f000 fac0 	bl	800a99a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af04      	add	r7, sp, #16
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	4608      	mov	r0, r1
 800a42e:	4611      	mov	r1, r2
 800a430:	461a      	mov	r2, r3
 800a432:	4603      	mov	r3, r0
 800a434:	70fb      	strb	r3, [r7, #3]
 800a436:	460b      	mov	r3, r1
 800a438:	70bb      	strb	r3, [r7, #2]
 800a43a:	4613      	mov	r3, r2
 800a43c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a43e:	7878      	ldrb	r0, [r7, #1]
 800a440:	78ba      	ldrb	r2, [r7, #2]
 800a442:	78f9      	ldrb	r1, [r7, #3]
 800a444:	8b3b      	ldrh	r3, [r7, #24]
 800a446:	9302      	str	r3, [sp, #8]
 800a448:	7d3b      	ldrb	r3, [r7, #20]
 800a44a:	9301      	str	r3, [sp, #4]
 800a44c:	7c3b      	ldrb	r3, [r7, #16]
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	4603      	mov	r3, r0
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fa53 	bl	800a8fe <USBH_LL_OpenPipe>

  return USBH_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b082      	sub	sp, #8
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	460b      	mov	r3, r1
 800a46c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a46e:	78fb      	ldrb	r3, [r7, #3]
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fa72 	bl	800a95c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b084      	sub	sp, #16
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	460b      	mov	r3, r1
 800a48c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 f836 	bl	800a500 <USBH_GetFreePipe>
 800a494:	4603      	mov	r3, r0
 800a496:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a498:	89fb      	ldrh	r3, [r7, #14]
 800a49a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d00a      	beq.n	800a4b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a4a2:	78fa      	ldrb	r2, [r7, #3]
 800a4a4:	89fb      	ldrh	r3, [r7, #14]
 800a4a6:	f003 030f 	and.w	r3, r3, #15
 800a4aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4ae:	6879      	ldr	r1, [r7, #4]
 800a4b0:	33e0      	adds	r3, #224	; 0xe0
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	440b      	add	r3, r1
 800a4b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a4b8:	89fb      	ldrh	r3, [r7, #14]
 800a4ba:	b2db      	uxtb	r3, r3
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	2b0a      	cmp	r3, #10
 800a4d4:	d80d      	bhi.n	800a4f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a4d6:	78fb      	ldrb	r3, [r7, #3]
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	33e0      	adds	r3, #224	; 0xe0
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	4413      	add	r3, r2
 800a4e0:	685a      	ldr	r2, [r3, #4]
 800a4e2:	78fb      	ldrb	r3, [r7, #3]
 800a4e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a4e8:	6879      	ldr	r1, [r7, #4]
 800a4ea:	33e0      	adds	r3, #224	; 0xe0
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	440b      	add	r3, r1
 800a4f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a4f2:	2300      	movs	r3, #0
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a508:	2300      	movs	r3, #0
 800a50a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a50c:	2300      	movs	r3, #0
 800a50e:	73fb      	strb	r3, [r7, #15]
 800a510:	e00f      	b.n	800a532 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a512:	7bfb      	ldrb	r3, [r7, #15]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	33e0      	adds	r3, #224	; 0xe0
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4413      	add	r3, r2
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d102      	bne.n	800a52c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a526:	7bfb      	ldrb	r3, [r7, #15]
 800a528:	b29b      	uxth	r3, r3
 800a52a:	e007      	b.n	800a53c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
 800a52e:	3301      	adds	r3, #1
 800a530:	73fb      	strb	r3, [r7, #15]
 800a532:	7bfb      	ldrb	r3, [r7, #15]
 800a534:	2b0a      	cmp	r3, #10
 800a536:	d9ec      	bls.n	800a512 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a538:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3714      	adds	r7, #20
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a54c:	2201      	movs	r2, #1
 800a54e:	490e      	ldr	r1, [pc, #56]	; (800a588 <MX_USB_HOST_Init+0x40>)
 800a550:	480e      	ldr	r0, [pc, #56]	; (800a58c <MX_USB_HOST_Init+0x44>)
 800a552:	f7fe fca1 	bl	8008e98 <USBH_Init>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d001      	beq.n	800a560 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a55c:	f7f7 fde8 	bl	8002130 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a560:	490b      	ldr	r1, [pc, #44]	; (800a590 <MX_USB_HOST_Init+0x48>)
 800a562:	480a      	ldr	r0, [pc, #40]	; (800a58c <MX_USB_HOST_Init+0x44>)
 800a564:	f7fe fd26 	bl	8008fb4 <USBH_RegisterClass>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d001      	beq.n	800a572 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a56e:	f7f7 fddf 	bl	8002130 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a572:	4806      	ldr	r0, [pc, #24]	; (800a58c <MX_USB_HOST_Init+0x44>)
 800a574:	f7fe fdaa 	bl	80090cc <USBH_Start>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a57e:	f7f7 fdd7 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a582:	bf00      	nop
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	0800a5a9 	.word	0x0800a5a9
 800a58c:	2000039c 	.word	0x2000039c
 800a590:	20000080 	.word	0x20000080

0800a594 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a598:	4802      	ldr	r0, [pc, #8]	; (800a5a4 <MX_USB_HOST_Process+0x10>)
 800a59a:	f7fe fda7 	bl	80090ec <USBH_Process>
}
 800a59e:	bf00      	nop
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	2000039c 	.word	0x2000039c

0800a5a8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a5b4:	78fb      	ldrb	r3, [r7, #3]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	2b04      	cmp	r3, #4
 800a5ba:	d819      	bhi.n	800a5f0 <USBH_UserProcess+0x48>
 800a5bc:	a201      	add	r2, pc, #4	; (adr r2, 800a5c4 <USBH_UserProcess+0x1c>)
 800a5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c2:	bf00      	nop
 800a5c4:	0800a5f1 	.word	0x0800a5f1
 800a5c8:	0800a5e1 	.word	0x0800a5e1
 800a5cc:	0800a5f1 	.word	0x0800a5f1
 800a5d0:	0800a5e9 	.word	0x0800a5e9
 800a5d4:	0800a5d9 	.word	0x0800a5d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a5d8:	4b09      	ldr	r3, [pc, #36]	; (800a600 <USBH_UserProcess+0x58>)
 800a5da:	2203      	movs	r2, #3
 800a5dc:	701a      	strb	r2, [r3, #0]
  break;
 800a5de:	e008      	b.n	800a5f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a5e0:	4b07      	ldr	r3, [pc, #28]	; (800a600 <USBH_UserProcess+0x58>)
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	701a      	strb	r2, [r3, #0]
  break;
 800a5e6:	e004      	b.n	800a5f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a5e8:	4b05      	ldr	r3, [pc, #20]	; (800a600 <USBH_UserProcess+0x58>)
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	701a      	strb	r2, [r3, #0]
  break;
 800a5ee:	e000      	b.n	800a5f2 <USBH_UserProcess+0x4a>

  default:
  break;
 800a5f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a5f2:	bf00      	nop
 800a5f4:	370c      	adds	r7, #12
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	20000130 	.word	0x20000130

0800a604 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b08a      	sub	sp, #40	; 0x28
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a60c:	f107 0314 	add.w	r3, r7, #20
 800a610:	2200      	movs	r2, #0
 800a612:	601a      	str	r2, [r3, #0]
 800a614:	605a      	str	r2, [r3, #4]
 800a616:	609a      	str	r2, [r3, #8]
 800a618:	60da      	str	r2, [r3, #12]
 800a61a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a624:	d147      	bne.n	800a6b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a626:	2300      	movs	r3, #0
 800a628:	613b      	str	r3, [r7, #16]
 800a62a:	4b25      	ldr	r3, [pc, #148]	; (800a6c0 <HAL_HCD_MspInit+0xbc>)
 800a62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62e:	4a24      	ldr	r2, [pc, #144]	; (800a6c0 <HAL_HCD_MspInit+0xbc>)
 800a630:	f043 0301 	orr.w	r3, r3, #1
 800a634:	6313      	str	r3, [r2, #48]	; 0x30
 800a636:	4b22      	ldr	r3, [pc, #136]	; (800a6c0 <HAL_HCD_MspInit+0xbc>)
 800a638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a63a:	f003 0301 	and.w	r3, r3, #1
 800a63e:	613b      	str	r3, [r7, #16]
 800a640:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a642:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a648:	2300      	movs	r3, #0
 800a64a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a64c:	2300      	movs	r3, #0
 800a64e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a650:	f107 0314 	add.w	r3, r7, #20
 800a654:	4619      	mov	r1, r3
 800a656:	481b      	ldr	r0, [pc, #108]	; (800a6c4 <HAL_HCD_MspInit+0xc0>)
 800a658:	f7f8 fa62 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a65c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a662:	2302      	movs	r3, #2
 800a664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a666:	2300      	movs	r3, #0
 800a668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a66a:	2300      	movs	r3, #0
 800a66c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a66e:	230a      	movs	r3, #10
 800a670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a672:	f107 0314 	add.w	r3, r7, #20
 800a676:	4619      	mov	r1, r3
 800a678:	4812      	ldr	r0, [pc, #72]	; (800a6c4 <HAL_HCD_MspInit+0xc0>)
 800a67a:	f7f8 fa51 	bl	8002b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a67e:	4b10      	ldr	r3, [pc, #64]	; (800a6c0 <HAL_HCD_MspInit+0xbc>)
 800a680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a682:	4a0f      	ldr	r2, [pc, #60]	; (800a6c0 <HAL_HCD_MspInit+0xbc>)
 800a684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a688:	6353      	str	r3, [r2, #52]	; 0x34
 800a68a:	2300      	movs	r3, #0
 800a68c:	60fb      	str	r3, [r7, #12]
 800a68e:	4b0c      	ldr	r3, [pc, #48]	; (800a6c0 <HAL_HCD_MspInit+0xbc>)
 800a690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a692:	4a0b      	ldr	r2, [pc, #44]	; (800a6c0 <HAL_HCD_MspInit+0xbc>)
 800a694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a698:	6453      	str	r3, [r2, #68]	; 0x44
 800a69a:	4b09      	ldr	r3, [pc, #36]	; (800a6c0 <HAL_HCD_MspInit+0xbc>)
 800a69c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a69e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6a2:	60fb      	str	r3, [r7, #12]
 800a6a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	2043      	movs	r0, #67	; 0x43
 800a6ac:	f7f8 fa01 	bl	8002ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a6b0:	2043      	movs	r0, #67	; 0x43
 800a6b2:	f7f8 fa1a 	bl	8002aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a6b6:	bf00      	nop
 800a6b8:	3728      	adds	r7, #40	; 0x28
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	40023800 	.word	0x40023800
 800a6c4:	40020000 	.word	0x40020000

0800a6c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7ff f8db 	bl	8009892 <USBH_LL_IncTimer>
}
 800a6dc:	bf00      	nop
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7ff f913 	bl	800991e <USBH_LL_Connect>
}
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a70e:	4618      	mov	r0, r3
 800a710:	f7ff f91c 	bl	800994c <USBH_LL_Disconnect>
}
 800a714:	bf00      	nop
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	70fb      	strb	r3, [r7, #3]
 800a728:	4613      	mov	r3, r2
 800a72a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a746:	4618      	mov	r0, r3
 800a748:	f7ff f8cd 	bl	80098e6 <USBH_LL_PortEnabled>
}
 800a74c:	bf00      	nop
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a762:	4618      	mov	r0, r3
 800a764:	f7ff f8cd 	bl	8009902 <USBH_LL_PortDisabled>
}
 800a768:	bf00      	nop
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d12a      	bne.n	800a7d8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a782:	4a18      	ldr	r2, [pc, #96]	; (800a7e4 <USBH_LL_Init+0x74>)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a15      	ldr	r2, [pc, #84]	; (800a7e4 <USBH_LL_Init+0x74>)
 800a78e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a792:	4b14      	ldr	r3, [pc, #80]	; (800a7e4 <USBH_LL_Init+0x74>)
 800a794:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a798:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a79a:	4b12      	ldr	r3, [pc, #72]	; (800a7e4 <USBH_LL_Init+0x74>)
 800a79c:	2208      	movs	r2, #8
 800a79e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a7a0:	4b10      	ldr	r3, [pc, #64]	; (800a7e4 <USBH_LL_Init+0x74>)
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a7a6:	4b0f      	ldr	r3, [pc, #60]	; (800a7e4 <USBH_LL_Init+0x74>)
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a7ac:	4b0d      	ldr	r3, [pc, #52]	; (800a7e4 <USBH_LL_Init+0x74>)
 800a7ae:	2202      	movs	r2, #2
 800a7b0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a7b2:	4b0c      	ldr	r3, [pc, #48]	; (800a7e4 <USBH_LL_Init+0x74>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a7b8:	480a      	ldr	r0, [pc, #40]	; (800a7e4 <USBH_LL_Init+0x74>)
 800a7ba:	f7f8 fb98 	bl	8002eee <HAL_HCD_Init>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d001      	beq.n	800a7c8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a7c4:	f7f7 fcb4 	bl	8002130 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a7c8:	4806      	ldr	r0, [pc, #24]	; (800a7e4 <USBH_LL_Init+0x74>)
 800a7ca:	f7f8 ff75 	bl	80036b8 <HAL_HCD_GetCurrentFrame>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7ff f84e 	bl	8009874 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20000774 	.word	0x20000774

0800a7e8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7f8 fee4 	bl	80035cc <HAL_HCD_Start>
 800a804:	4603      	mov	r3, r0
 800a806:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a808:	7bfb      	ldrb	r3, [r7, #15]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 f95c 	bl	800aac8 <USBH_Get_USB_Status>
 800a810:	4603      	mov	r3, r0
 800a812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a814:	7bbb      	ldrb	r3, [r7, #14]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b084      	sub	sp, #16
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a834:	4618      	mov	r0, r3
 800a836:	f7f8 feec 	bl	8003612 <HAL_HCD_Stop>
 800a83a:	4603      	mov	r3, r0
 800a83c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
 800a840:	4618      	mov	r0, r3
 800a842:	f000 f941 	bl	800aac8 <USBH_Get_USB_Status>
 800a846:	4603      	mov	r3, r0
 800a848:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a84a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a85c:	2301      	movs	r3, #1
 800a85e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a866:	4618      	mov	r0, r3
 800a868:	f7f8 ff34 	bl	80036d4 <HAL_HCD_GetCurrentSpeed>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d00c      	beq.n	800a88c <USBH_LL_GetSpeed+0x38>
 800a872:	2b02      	cmp	r3, #2
 800a874:	d80d      	bhi.n	800a892 <USBH_LL_GetSpeed+0x3e>
 800a876:	2b00      	cmp	r3, #0
 800a878:	d002      	beq.n	800a880 <USBH_LL_GetSpeed+0x2c>
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d003      	beq.n	800a886 <USBH_LL_GetSpeed+0x32>
 800a87e:	e008      	b.n	800a892 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a880:	2300      	movs	r3, #0
 800a882:	73fb      	strb	r3, [r7, #15]
    break;
 800a884:	e008      	b.n	800a898 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a886:	2301      	movs	r3, #1
 800a888:	73fb      	strb	r3, [r7, #15]
    break;
 800a88a:	e005      	b.n	800a898 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a88c:	2302      	movs	r3, #2
 800a88e:	73fb      	strb	r3, [r7, #15]
    break;
 800a890:	e002      	b.n	800a898 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a892:	2301      	movs	r3, #1
 800a894:	73fb      	strb	r3, [r7, #15]
    break;
 800a896:	bf00      	nop
  }
  return  speed;
 800a898:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7f8 fec7 	bl	800364c <HAL_HCD_ResetPort>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f000 f8ff 	bl	800aac8 <USBH_Get_USB_Status>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a8ea:	78fa      	ldrb	r2, [r7, #3]
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7f8 fece 	bl	8003690 <HAL_HCD_HC_GetXferCount>
 800a8f4:	4603      	mov	r3, r0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a8fe:	b590      	push	{r4, r7, lr}
 800a900:	b089      	sub	sp, #36	; 0x24
 800a902:	af04      	add	r7, sp, #16
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	4608      	mov	r0, r1
 800a908:	4611      	mov	r1, r2
 800a90a:	461a      	mov	r2, r3
 800a90c:	4603      	mov	r3, r0
 800a90e:	70fb      	strb	r3, [r7, #3]
 800a910:	460b      	mov	r3, r1
 800a912:	70bb      	strb	r3, [r7, #2]
 800a914:	4613      	mov	r3, r2
 800a916:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a926:	787c      	ldrb	r4, [r7, #1]
 800a928:	78ba      	ldrb	r2, [r7, #2]
 800a92a:	78f9      	ldrb	r1, [r7, #3]
 800a92c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a92e:	9302      	str	r3, [sp, #8]
 800a930:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a934:	9301      	str	r3, [sp, #4]
 800a936:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	4623      	mov	r3, r4
 800a93e:	f7f8 fb38 	bl	8002fb2 <HAL_HCD_HC_Init>
 800a942:	4603      	mov	r3, r0
 800a944:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a946:	7bfb      	ldrb	r3, [r7, #15]
 800a948:	4618      	mov	r0, r3
 800a94a:	f000 f8bd 	bl	800aac8 <USBH_Get_USB_Status>
 800a94e:	4603      	mov	r3, r0
 800a950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a952:	7bbb      	ldrb	r3, [r7, #14]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd90      	pop	{r4, r7, pc}

0800a95c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	460b      	mov	r3, r1
 800a966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a968:	2300      	movs	r3, #0
 800a96a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a96c:	2300      	movs	r3, #0
 800a96e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a976:	78fa      	ldrb	r2, [r7, #3]
 800a978:	4611      	mov	r1, r2
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7f8 fba8 	bl	80030d0 <HAL_HCD_HC_Halt>
 800a980:	4603      	mov	r3, r0
 800a982:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a984:	7bfb      	ldrb	r3, [r7, #15]
 800a986:	4618      	mov	r0, r3
 800a988:	f000 f89e 	bl	800aac8 <USBH_Get_USB_Status>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a990:	7bbb      	ldrb	r3, [r7, #14]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a99a:	b590      	push	{r4, r7, lr}
 800a99c:	b089      	sub	sp, #36	; 0x24
 800a99e:	af04      	add	r7, sp, #16
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	4608      	mov	r0, r1
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	70fb      	strb	r3, [r7, #3]
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	70bb      	strb	r3, [r7, #2]
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a9c2:	787c      	ldrb	r4, [r7, #1]
 800a9c4:	78ba      	ldrb	r2, [r7, #2]
 800a9c6:	78f9      	ldrb	r1, [r7, #3]
 800a9c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a9cc:	9303      	str	r3, [sp, #12]
 800a9ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a9d0:	9302      	str	r3, [sp, #8]
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d4:	9301      	str	r3, [sp, #4]
 800a9d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	4623      	mov	r3, r4
 800a9de:	f7f8 fb9b 	bl	8003118 <HAL_HCD_HC_SubmitRequest>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 f86d 	bl	800aac8 <USBH_Get_USB_Status>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3714      	adds	r7, #20
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd90      	pop	{r4, r7, pc}

0800a9fc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	460b      	mov	r3, r1
 800aa06:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa0e:	78fa      	ldrb	r2, [r7, #3]
 800aa10:	4611      	mov	r1, r2
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7f8 fe28 	bl	8003668 <HAL_HCD_HC_GetURBState>
 800aa18:	4603      	mov	r3, r0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b082      	sub	sp, #8
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d103      	bne.n	800aa40 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800aa38:	78fb      	ldrb	r3, [r7, #3]
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f000 f870 	bl	800ab20 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800aa40:	20c8      	movs	r0, #200	; 0xc8
 800aa42:	f7f7 ff37 	bl	80028b4 <HAL_Delay>
  return USBH_OK;
 800aa46:	2300      	movs	r3, #0
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70fb      	strb	r3, [r7, #3]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa66:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aa68:	78fb      	ldrb	r3, [r7, #3]
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	212c      	movs	r1, #44	; 0x2c
 800aa6e:	fb01 f303 	mul.w	r3, r1, r3
 800aa72:	4413      	add	r3, r2
 800aa74:	333b      	adds	r3, #59	; 0x3b
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d009      	beq.n	800aa90 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aa7c:	78fb      	ldrb	r3, [r7, #3]
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	212c      	movs	r1, #44	; 0x2c
 800aa82:	fb01 f303 	mul.w	r3, r1, r3
 800aa86:	4413      	add	r3, r2
 800aa88:	3354      	adds	r3, #84	; 0x54
 800aa8a:	78ba      	ldrb	r2, [r7, #2]
 800aa8c:	701a      	strb	r2, [r3, #0]
 800aa8e:	e008      	b.n	800aaa2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aa90:	78fb      	ldrb	r3, [r7, #3]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	212c      	movs	r1, #44	; 0x2c
 800aa96:	fb01 f303 	mul.w	r3, r1, r3
 800aa9a:	4413      	add	r3, r2
 800aa9c:	3355      	adds	r3, #85	; 0x55
 800aa9e:	78ba      	ldrb	r2, [r7, #2]
 800aaa0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3714      	adds	r7, #20
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7f7 fefb 	bl	80028b4 <HAL_Delay>
}
 800aabe:	bf00      	nop
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
	...

0800aac8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	4603      	mov	r3, r0
 800aad0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aad6:	79fb      	ldrb	r3, [r7, #7]
 800aad8:	2b03      	cmp	r3, #3
 800aada:	d817      	bhi.n	800ab0c <USBH_Get_USB_Status+0x44>
 800aadc:	a201      	add	r2, pc, #4	; (adr r2, 800aae4 <USBH_Get_USB_Status+0x1c>)
 800aade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae2:	bf00      	nop
 800aae4:	0800aaf5 	.word	0x0800aaf5
 800aae8:	0800aafb 	.word	0x0800aafb
 800aaec:	0800ab01 	.word	0x0800ab01
 800aaf0:	0800ab07 	.word	0x0800ab07
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	73fb      	strb	r3, [r7, #15]
    break;
 800aaf8:	e00b      	b.n	800ab12 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800aafa:	2302      	movs	r3, #2
 800aafc:	73fb      	strb	r3, [r7, #15]
    break;
 800aafe:	e008      	b.n	800ab12 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ab00:	2301      	movs	r3, #1
 800ab02:	73fb      	strb	r3, [r7, #15]
    break;
 800ab04:	e005      	b.n	800ab12 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ab06:	2302      	movs	r3, #2
 800ab08:	73fb      	strb	r3, [r7, #15]
    break;
 800ab0a:	e002      	b.n	800ab12 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ab0c:	2302      	movs	r3, #2
 800ab0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab10:	bf00      	nop
  }
  return usb_status;
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3714      	adds	r7, #20
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	4603      	mov	r3, r0
 800ab28:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ab2a:	79fb      	ldrb	r3, [r7, #7]
 800ab2c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ab2e:	79fb      	ldrb	r3, [r7, #7]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d102      	bne.n	800ab3a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ab34:	2301      	movs	r3, #1
 800ab36:	73fb      	strb	r3, [r7, #15]
 800ab38:	e001      	b.n	800ab3e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ab3e:	7bfb      	ldrb	r3, [r7, #15]
 800ab40:	461a      	mov	r2, r3
 800ab42:	2101      	movs	r1, #1
 800ab44:	4803      	ldr	r0, [pc, #12]	; (800ab54 <MX_DriverVbusFS+0x34>)
 800ab46:	f7f8 f99f 	bl	8002e88 <HAL_GPIO_WritePin>
}
 800ab4a:	bf00      	nop
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	40020800 	.word	0x40020800

0800ab58 <__errno>:
 800ab58:	4b01      	ldr	r3, [pc, #4]	; (800ab60 <__errno+0x8>)
 800ab5a:	6818      	ldr	r0, [r3, #0]
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	200000a0 	.word	0x200000a0

0800ab64 <__libc_init_array>:
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	4d0d      	ldr	r5, [pc, #52]	; (800ab9c <__libc_init_array+0x38>)
 800ab68:	4c0d      	ldr	r4, [pc, #52]	; (800aba0 <__libc_init_array+0x3c>)
 800ab6a:	1b64      	subs	r4, r4, r5
 800ab6c:	10a4      	asrs	r4, r4, #2
 800ab6e:	2600      	movs	r6, #0
 800ab70:	42a6      	cmp	r6, r4
 800ab72:	d109      	bne.n	800ab88 <__libc_init_array+0x24>
 800ab74:	4d0b      	ldr	r5, [pc, #44]	; (800aba4 <__libc_init_array+0x40>)
 800ab76:	4c0c      	ldr	r4, [pc, #48]	; (800aba8 <__libc_init_array+0x44>)
 800ab78:	f000 f90c 	bl	800ad94 <_init>
 800ab7c:	1b64      	subs	r4, r4, r5
 800ab7e:	10a4      	asrs	r4, r4, #2
 800ab80:	2600      	movs	r6, #0
 800ab82:	42a6      	cmp	r6, r4
 800ab84:	d105      	bne.n	800ab92 <__libc_init_array+0x2e>
 800ab86:	bd70      	pop	{r4, r5, r6, pc}
 800ab88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab8c:	4798      	blx	r3
 800ab8e:	3601      	adds	r6, #1
 800ab90:	e7ee      	b.n	800ab70 <__libc_init_array+0xc>
 800ab92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab96:	4798      	blx	r3
 800ab98:	3601      	adds	r6, #1
 800ab9a:	e7f2      	b.n	800ab82 <__libc_init_array+0x1e>
 800ab9c:	0800b288 	.word	0x0800b288
 800aba0:	0800b288 	.word	0x0800b288
 800aba4:	0800b288 	.word	0x0800b288
 800aba8:	0800b28c 	.word	0x0800b28c

0800abac <malloc>:
 800abac:	4b02      	ldr	r3, [pc, #8]	; (800abb8 <malloc+0xc>)
 800abae:	4601      	mov	r1, r0
 800abb0:	6818      	ldr	r0, [r3, #0]
 800abb2:	f000 b863 	b.w	800ac7c <_malloc_r>
 800abb6:	bf00      	nop
 800abb8:	200000a0 	.word	0x200000a0

0800abbc <free>:
 800abbc:	4b02      	ldr	r3, [pc, #8]	; (800abc8 <free+0xc>)
 800abbe:	4601      	mov	r1, r0
 800abc0:	6818      	ldr	r0, [r3, #0]
 800abc2:	f000 b80b 	b.w	800abdc <_free_r>
 800abc6:	bf00      	nop
 800abc8:	200000a0 	.word	0x200000a0

0800abcc <memset>:
 800abcc:	4402      	add	r2, r0
 800abce:	4603      	mov	r3, r0
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d100      	bne.n	800abd6 <memset+0xa>
 800abd4:	4770      	bx	lr
 800abd6:	f803 1b01 	strb.w	r1, [r3], #1
 800abda:	e7f9      	b.n	800abd0 <memset+0x4>

0800abdc <_free_r>:
 800abdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abde:	2900      	cmp	r1, #0
 800abe0:	d048      	beq.n	800ac74 <_free_r+0x98>
 800abe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abe6:	9001      	str	r0, [sp, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f1a1 0404 	sub.w	r4, r1, #4
 800abee:	bfb8      	it	lt
 800abf0:	18e4      	addlt	r4, r4, r3
 800abf2:	f000 f8c1 	bl	800ad78 <__malloc_lock>
 800abf6:	4a20      	ldr	r2, [pc, #128]	; (800ac78 <_free_r+0x9c>)
 800abf8:	9801      	ldr	r0, [sp, #4]
 800abfa:	6813      	ldr	r3, [r2, #0]
 800abfc:	4615      	mov	r5, r2
 800abfe:	b933      	cbnz	r3, 800ac0e <_free_r+0x32>
 800ac00:	6063      	str	r3, [r4, #4]
 800ac02:	6014      	str	r4, [r2, #0]
 800ac04:	b003      	add	sp, #12
 800ac06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac0a:	f000 b8bb 	b.w	800ad84 <__malloc_unlock>
 800ac0e:	42a3      	cmp	r3, r4
 800ac10:	d90b      	bls.n	800ac2a <_free_r+0x4e>
 800ac12:	6821      	ldr	r1, [r4, #0]
 800ac14:	1862      	adds	r2, r4, r1
 800ac16:	4293      	cmp	r3, r2
 800ac18:	bf04      	itt	eq
 800ac1a:	681a      	ldreq	r2, [r3, #0]
 800ac1c:	685b      	ldreq	r3, [r3, #4]
 800ac1e:	6063      	str	r3, [r4, #4]
 800ac20:	bf04      	itt	eq
 800ac22:	1852      	addeq	r2, r2, r1
 800ac24:	6022      	streq	r2, [r4, #0]
 800ac26:	602c      	str	r4, [r5, #0]
 800ac28:	e7ec      	b.n	800ac04 <_free_r+0x28>
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	b10b      	cbz	r3, 800ac34 <_free_r+0x58>
 800ac30:	42a3      	cmp	r3, r4
 800ac32:	d9fa      	bls.n	800ac2a <_free_r+0x4e>
 800ac34:	6811      	ldr	r1, [r2, #0]
 800ac36:	1855      	adds	r5, r2, r1
 800ac38:	42a5      	cmp	r5, r4
 800ac3a:	d10b      	bne.n	800ac54 <_free_r+0x78>
 800ac3c:	6824      	ldr	r4, [r4, #0]
 800ac3e:	4421      	add	r1, r4
 800ac40:	1854      	adds	r4, r2, r1
 800ac42:	42a3      	cmp	r3, r4
 800ac44:	6011      	str	r1, [r2, #0]
 800ac46:	d1dd      	bne.n	800ac04 <_free_r+0x28>
 800ac48:	681c      	ldr	r4, [r3, #0]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	6053      	str	r3, [r2, #4]
 800ac4e:	4421      	add	r1, r4
 800ac50:	6011      	str	r1, [r2, #0]
 800ac52:	e7d7      	b.n	800ac04 <_free_r+0x28>
 800ac54:	d902      	bls.n	800ac5c <_free_r+0x80>
 800ac56:	230c      	movs	r3, #12
 800ac58:	6003      	str	r3, [r0, #0]
 800ac5a:	e7d3      	b.n	800ac04 <_free_r+0x28>
 800ac5c:	6825      	ldr	r5, [r4, #0]
 800ac5e:	1961      	adds	r1, r4, r5
 800ac60:	428b      	cmp	r3, r1
 800ac62:	bf04      	itt	eq
 800ac64:	6819      	ldreq	r1, [r3, #0]
 800ac66:	685b      	ldreq	r3, [r3, #4]
 800ac68:	6063      	str	r3, [r4, #4]
 800ac6a:	bf04      	itt	eq
 800ac6c:	1949      	addeq	r1, r1, r5
 800ac6e:	6021      	streq	r1, [r4, #0]
 800ac70:	6054      	str	r4, [r2, #4]
 800ac72:	e7c7      	b.n	800ac04 <_free_r+0x28>
 800ac74:	b003      	add	sp, #12
 800ac76:	bd30      	pop	{r4, r5, pc}
 800ac78:	20000134 	.word	0x20000134

0800ac7c <_malloc_r>:
 800ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7e:	1ccd      	adds	r5, r1, #3
 800ac80:	f025 0503 	bic.w	r5, r5, #3
 800ac84:	3508      	adds	r5, #8
 800ac86:	2d0c      	cmp	r5, #12
 800ac88:	bf38      	it	cc
 800ac8a:	250c      	movcc	r5, #12
 800ac8c:	2d00      	cmp	r5, #0
 800ac8e:	4606      	mov	r6, r0
 800ac90:	db01      	blt.n	800ac96 <_malloc_r+0x1a>
 800ac92:	42a9      	cmp	r1, r5
 800ac94:	d903      	bls.n	800ac9e <_malloc_r+0x22>
 800ac96:	230c      	movs	r3, #12
 800ac98:	6033      	str	r3, [r6, #0]
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac9e:	f000 f86b 	bl	800ad78 <__malloc_lock>
 800aca2:	4921      	ldr	r1, [pc, #132]	; (800ad28 <_malloc_r+0xac>)
 800aca4:	680a      	ldr	r2, [r1, #0]
 800aca6:	4614      	mov	r4, r2
 800aca8:	b99c      	cbnz	r4, 800acd2 <_malloc_r+0x56>
 800acaa:	4f20      	ldr	r7, [pc, #128]	; (800ad2c <_malloc_r+0xb0>)
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	b923      	cbnz	r3, 800acba <_malloc_r+0x3e>
 800acb0:	4621      	mov	r1, r4
 800acb2:	4630      	mov	r0, r6
 800acb4:	f000 f83c 	bl	800ad30 <_sbrk_r>
 800acb8:	6038      	str	r0, [r7, #0]
 800acba:	4629      	mov	r1, r5
 800acbc:	4630      	mov	r0, r6
 800acbe:	f000 f837 	bl	800ad30 <_sbrk_r>
 800acc2:	1c43      	adds	r3, r0, #1
 800acc4:	d123      	bne.n	800ad0e <_malloc_r+0x92>
 800acc6:	230c      	movs	r3, #12
 800acc8:	6033      	str	r3, [r6, #0]
 800acca:	4630      	mov	r0, r6
 800accc:	f000 f85a 	bl	800ad84 <__malloc_unlock>
 800acd0:	e7e3      	b.n	800ac9a <_malloc_r+0x1e>
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	1b5b      	subs	r3, r3, r5
 800acd6:	d417      	bmi.n	800ad08 <_malloc_r+0x8c>
 800acd8:	2b0b      	cmp	r3, #11
 800acda:	d903      	bls.n	800ace4 <_malloc_r+0x68>
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	441c      	add	r4, r3
 800ace0:	6025      	str	r5, [r4, #0]
 800ace2:	e004      	b.n	800acee <_malloc_r+0x72>
 800ace4:	6863      	ldr	r3, [r4, #4]
 800ace6:	42a2      	cmp	r2, r4
 800ace8:	bf0c      	ite	eq
 800acea:	600b      	streq	r3, [r1, #0]
 800acec:	6053      	strne	r3, [r2, #4]
 800acee:	4630      	mov	r0, r6
 800acf0:	f000 f848 	bl	800ad84 <__malloc_unlock>
 800acf4:	f104 000b 	add.w	r0, r4, #11
 800acf8:	1d23      	adds	r3, r4, #4
 800acfa:	f020 0007 	bic.w	r0, r0, #7
 800acfe:	1ac2      	subs	r2, r0, r3
 800ad00:	d0cc      	beq.n	800ac9c <_malloc_r+0x20>
 800ad02:	1a1b      	subs	r3, r3, r0
 800ad04:	50a3      	str	r3, [r4, r2]
 800ad06:	e7c9      	b.n	800ac9c <_malloc_r+0x20>
 800ad08:	4622      	mov	r2, r4
 800ad0a:	6864      	ldr	r4, [r4, #4]
 800ad0c:	e7cc      	b.n	800aca8 <_malloc_r+0x2c>
 800ad0e:	1cc4      	adds	r4, r0, #3
 800ad10:	f024 0403 	bic.w	r4, r4, #3
 800ad14:	42a0      	cmp	r0, r4
 800ad16:	d0e3      	beq.n	800ace0 <_malloc_r+0x64>
 800ad18:	1a21      	subs	r1, r4, r0
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f000 f808 	bl	800ad30 <_sbrk_r>
 800ad20:	3001      	adds	r0, #1
 800ad22:	d1dd      	bne.n	800ace0 <_malloc_r+0x64>
 800ad24:	e7cf      	b.n	800acc6 <_malloc_r+0x4a>
 800ad26:	bf00      	nop
 800ad28:	20000134 	.word	0x20000134
 800ad2c:	20000138 	.word	0x20000138

0800ad30 <_sbrk_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4d06      	ldr	r5, [pc, #24]	; (800ad4c <_sbrk_r+0x1c>)
 800ad34:	2300      	movs	r3, #0
 800ad36:	4604      	mov	r4, r0
 800ad38:	4608      	mov	r0, r1
 800ad3a:	602b      	str	r3, [r5, #0]
 800ad3c:	f7f7 fcd6 	bl	80026ec <_sbrk>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	d102      	bne.n	800ad4a <_sbrk_r+0x1a>
 800ad44:	682b      	ldr	r3, [r5, #0]
 800ad46:	b103      	cbz	r3, 800ad4a <_sbrk_r+0x1a>
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}
 800ad4c:	20000a78 	.word	0x20000a78

0800ad50 <strncat>:
 800ad50:	b530      	push	{r4, r5, lr}
 800ad52:	4604      	mov	r4, r0
 800ad54:	7825      	ldrb	r5, [r4, #0]
 800ad56:	4623      	mov	r3, r4
 800ad58:	3401      	adds	r4, #1
 800ad5a:	2d00      	cmp	r5, #0
 800ad5c:	d1fa      	bne.n	800ad54 <strncat+0x4>
 800ad5e:	3a01      	subs	r2, #1
 800ad60:	d304      	bcc.n	800ad6c <strncat+0x1c>
 800ad62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad66:	f803 4b01 	strb.w	r4, [r3], #1
 800ad6a:	b904      	cbnz	r4, 800ad6e <strncat+0x1e>
 800ad6c:	bd30      	pop	{r4, r5, pc}
 800ad6e:	2a00      	cmp	r2, #0
 800ad70:	d1f5      	bne.n	800ad5e <strncat+0xe>
 800ad72:	701a      	strb	r2, [r3, #0]
 800ad74:	e7f3      	b.n	800ad5e <strncat+0xe>
	...

0800ad78 <__malloc_lock>:
 800ad78:	4801      	ldr	r0, [pc, #4]	; (800ad80 <__malloc_lock+0x8>)
 800ad7a:	f000 b809 	b.w	800ad90 <__retarget_lock_acquire_recursive>
 800ad7e:	bf00      	nop
 800ad80:	20000a80 	.word	0x20000a80

0800ad84 <__malloc_unlock>:
 800ad84:	4801      	ldr	r0, [pc, #4]	; (800ad8c <__malloc_unlock+0x8>)
 800ad86:	f000 b804 	b.w	800ad92 <__retarget_lock_release_recursive>
 800ad8a:	bf00      	nop
 800ad8c:	20000a80 	.word	0x20000a80

0800ad90 <__retarget_lock_acquire_recursive>:
 800ad90:	4770      	bx	lr

0800ad92 <__retarget_lock_release_recursive>:
 800ad92:	4770      	bx	lr

0800ad94 <_init>:
 800ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad96:	bf00      	nop
 800ad98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad9a:	bc08      	pop	{r3}
 800ad9c:	469e      	mov	lr, r3
 800ad9e:	4770      	bx	lr

0800ada0 <_fini>:
 800ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada2:	bf00      	nop
 800ada4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ada6:	bc08      	pop	{r3}
 800ada8:	469e      	mov	lr, r3
 800adaa:	4770      	bx	lr
