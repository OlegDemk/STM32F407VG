
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001373c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a68  080138d0  080138d0  000238d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014338  08014338  000302fc  2**0
                  CONTENTS
  4 .ARM          00000008  08014338  08014338  00024338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014340  08014340  000302fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014340  08014340  00024340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014344  08014344  00024344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  08014348  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b1c  20000300  08014644  00030300  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e1c  08014644  00030e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bc85  00000000  00000000  0003032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a1b  00000000  00000000  0005bfb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  000619d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ad8  00000000  00000000  000636c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d3f  00000000  00000000  000651a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000279d2  00000000  00000000  0008cedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dac92  00000000  00000000  000b48b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018f543  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ba4  00000000  00000000  0018f598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000300 	.word	0x20000300
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080138b4 	.word	0x080138b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000304 	.word	0x20000304
 80001cc:	080138b4 	.word	0x080138b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f000 b96e 	b.w	8000f2c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468c      	mov	ip, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8083 	bne.w	8000d7e <__udivmoddi4+0x116>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d947      	bls.n	8000d0e <__udivmoddi4+0xa6>
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b142      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	f1c2 0020 	rsb	r0, r2, #32
 8000c88:	fa24 f000 	lsr.w	r0, r4, r0
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	ea40 0c01 	orr.w	ip, r0, r1
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000ca0:	fa1f fe87 	uxth.w	lr, r7
 8000ca4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cac:	fb06 f10e 	mul.w	r1, r6, lr
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cba:	f080 8119 	bcs.w	8000ef0 <__udivmoddi4+0x288>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8116 	bls.w	8000ef0 <__udivmoddi4+0x288>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	443b      	add	r3, r7
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	193c      	adds	r4, r7, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ce6:	f080 8105 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f240 8102 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf8:	eba4 040e 	sub.w	r4, r4, lr
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	b11d      	cbz	r5, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c5 4300 	strd	r4, r3, [r5]
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xaa>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d150      	bne.n	8000dbc <__udivmoddi4+0x154>
 8000d1a:	1bcb      	subs	r3, r1, r7
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	2601      	movs	r6, #1
 8000d26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d2a:	0c21      	lsrs	r1, r4, #16
 8000d2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb08 f30c 	mul.w	r3, r8, ip
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0xe2>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	f200 80e9 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x10c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x10a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80d9 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e7bf      	b.n	8000cfe <__udivmoddi4+0x96>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x12e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80b1 	beq.w	8000eea <__udivmoddi4+0x282>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x1cc>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0x140>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80b8 	bhi.w	8000f18 <__udivmoddi4+0x2b0>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	468c      	mov	ip, r1
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0a8      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000db6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dba:	e7a5      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dc4:	4097      	lsls	r7, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dce:	40d9      	lsrs	r1, r3
 8000dd0:	4330      	orrs	r0, r6
 8000dd2:	0c03      	lsrs	r3, r0, #16
 8000dd4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dd8:	fa1f f887 	uxth.w	r8, r7
 8000ddc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb06 f108 	mul.w	r1, r6, r8
 8000de8:	4299      	cmp	r1, r3
 8000dea:	fa04 f402 	lsl.w	r4, r4, r2
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x19c>
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000df6:	f080 808d 	bcs.w	8000f14 <__udivmoddi4+0x2ac>
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	f240 808a 	bls.w	8000f14 <__udivmoddi4+0x2ac>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	443b      	add	r3, r7
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b281      	uxth	r1, r0
 8000e08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb00 f308 	mul.w	r3, r0, r8
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x1c4>
 8000e1c:	1879      	adds	r1, r7, r1
 8000e1e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e22:	d273      	bcs.n	8000f0c <__udivmoddi4+0x2a4>
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d971      	bls.n	8000f0c <__udivmoddi4+0x2a4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4439      	add	r1, r7
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e32:	e778      	b.n	8000d26 <__udivmoddi4+0xbe>
 8000e34:	f1c6 0c20 	rsb	ip, r6, #32
 8000e38:	fa03 f406 	lsl.w	r4, r3, r6
 8000e3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e40:	431c      	orrs	r4, r3
 8000e42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e52:	431f      	orrs	r7, r3
 8000e54:	0c3b      	lsrs	r3, r7, #16
 8000e56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5a:	fa1f f884 	uxth.w	r8, r4
 8000e5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e66:	fb09 fa08 	mul.w	sl, r9, r8
 8000e6a:	458a      	cmp	sl, r1
 8000e6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e70:	fa00 f306 	lsl.w	r3, r0, r6
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x220>
 8000e76:	1861      	adds	r1, r4, r1
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e7c:	d248      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	d946      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4421      	add	r1, r4
 8000e88:	eba1 010a 	sub.w	r1, r1, sl
 8000e8c:	b2bf      	uxth	r7, r7
 8000e8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x24a>
 8000ea2:	19e7      	adds	r7, r4, r7
 8000ea4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ea8:	d22e      	bcs.n	8000f08 <__udivmoddi4+0x2a0>
 8000eaa:	45b8      	cmp	r8, r7
 8000eac:	d92c      	bls.n	8000f08 <__udivmoddi4+0x2a0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4427      	add	r7, r4
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba7 0708 	sub.w	r7, r7, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454f      	cmp	r7, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	4649      	mov	r1, r9
 8000ec4:	d31a      	bcc.n	8000efc <__udivmoddi4+0x294>
 8000ec6:	d017      	beq.n	8000ef8 <__udivmoddi4+0x290>
 8000ec8:	b15d      	cbz	r5, 8000ee2 <__udivmoddi4+0x27a>
 8000eca:	ebb3 020e 	subs.w	r2, r3, lr
 8000ece:	eb67 0701 	sbc.w	r7, r7, r1
 8000ed2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ed6:	40f2      	lsrs	r2, r6
 8000ed8:	ea4c 0202 	orr.w	r2, ip, r2
 8000edc:	40f7      	lsrs	r7, r6
 8000ede:	e9c5 2700 	strd	r2, r7, [r5]
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e70b      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6fd      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000ef8:	4543      	cmp	r3, r8
 8000efa:	d2e5      	bcs.n	8000ec8 <__udivmoddi4+0x260>
 8000efc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f00:	eb69 0104 	sbc.w	r1, r9, r4
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7df      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e7d2      	b.n	8000eb2 <__udivmoddi4+0x24a>
 8000f0c:	4660      	mov	r0, ip
 8000f0e:	e78d      	b.n	8000e2c <__udivmoddi4+0x1c4>
 8000f10:	4681      	mov	r9, r0
 8000f12:	e7b9      	b.n	8000e88 <__udivmoddi4+0x220>
 8000f14:	4666      	mov	r6, ip
 8000f16:	e775      	b.n	8000e04 <__udivmoddi4+0x19c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	e74a      	b.n	8000db2 <__udivmoddi4+0x14a>
 8000f1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f20:	4439      	add	r1, r7
 8000f22:	e713      	b.n	8000d4c <__udivmoddi4+0xe4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e724      	b.n	8000d74 <__udivmoddi4+0x10c>
 8000f2a:	bf00      	nop

08000f2c <__aeabi_idiv0>:
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
	char digith = 0;;
 8000f36:	2300      	movs	r3, #0
 8000f38:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 8000f3a:	f000 f853 	bl	8000fe4 <read_one_digit_from_keyboard>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b23      	cmp	r3, #35	; 0x23
 8000f46:	d10a      	bne.n	8000f5e <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 8000f48:	221e      	movs	r2, #30
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4824      	ldr	r0, [pc, #144]	; (8000fe0 <read_digits+0xb0>)
 8000f4e:	f00f fdc9 	bl	8010ae4 <memset>
		keyboard.read_digits_position = 0;
 8000f52:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <read_digits+0xb0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <read_digits+0xb0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b2a      	cmp	r3, #42	; 0x2a
 8000f62:	d109      	bne.n	8000f78 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <read_digits+0xb0>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <read_digits+0xb0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <read_digits+0xb0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d028      	beq.n	8000fd0 <read_digits+0xa0>
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b23      	cmp	r3, #35	; 0x23
 8000f82:	d025      	beq.n	8000fd0 <read_digits+0xa0>
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b2a      	cmp	r3, #42	; 0x2a
 8000f88:	d022      	beq.n	8000fd0 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <read_digits+0xb0>)
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <read_digits+0xb0>)
 8000f90:	7f92      	ldrb	r2, [r2, #30]
 8000f92:	4293      	cmp	r3, r2
 8000f94:	dc11      	bgt.n	8000fba <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <read_digits+0xb0>)
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	4911      	ldr	r1, [pc, #68]	; (8000fe0 <read_digits+0xb0>)
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <read_digits+0xb0>)
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <read_digits+0xb0>)
 8000fa8:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <read_digits+0xb0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <read_digits+0xb0>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000fb8:	e00e      	b.n	8000fd8 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <read_digits+0xb0>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <read_digits+0xb0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <read_digits+0xb0>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000fce:	e003      	b.n	8000fd8 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <read_digits+0xb0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	77da      	strb	r2, [r3, #31]
	}
}
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000338 	.word	0x20000338

08000fe4 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	char digit = '\0';
 8000fea:	2300      	movs	r3, #0
 8000fec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff4:	48cf      	ldr	r0, [pc, #828]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 8000ff6:	f006 fb41 	bl	800767c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001000:	48cc      	ldr	r0, [pc, #816]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 8001002:	f006 fb3b 	bl	800767c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100c:	48c9      	ldr	r0, [pc, #804]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 800100e:	f006 fb35 	bl	800767c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001018:	48c6      	ldr	r0, [pc, #792]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 800101a:	f006 fb2f 	bl	800767c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800101e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001022:	48c5      	ldr	r0, [pc, #788]	; (8001338 <read_one_digit_from_keyboard+0x354>)
 8001024:	f006 fb12 	bl	800764c <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d169      	bne.n	8001102 <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001034:	48bf      	ldr	r0, [pc, #764]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 8001036:	f006 fb21 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001040:	48bc      	ldr	r0, [pc, #752]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 8001042:	f006 fb1b 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104c:	48b9      	ldr	r0, [pc, #740]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 800104e:	f006 fb15 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001058:	48b6      	ldr	r0, [pc, #728]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 800105a:	f006 fb0f 	bl	800767c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800105e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001062:	48b5      	ldr	r0, [pc, #724]	; (8001338 <read_one_digit_from_keyboard+0x354>)
 8001064:	f006 faf2 	bl	800764c <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 800106e:	2331      	movs	r3, #49	; 0x31
 8001070:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001078:	48ae      	ldr	r0, [pc, #696]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 800107a:	f006 faff 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001084:	48ab      	ldr	r0, [pc, #684]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 8001086:	f006 faf9 	bl	800767c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800108a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800108e:	48aa      	ldr	r0, [pc, #680]	; (8001338 <read_one_digit_from_keyboard+0x354>)
 8001090:	f006 fadc 	bl	800764c <HAL_GPIO_ReadPin>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 800109a:	2334      	movs	r3, #52	; 0x34
 800109c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a4:	48a3      	ldr	r0, [pc, #652]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 80010a6:	f006 fae9 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b0:	48a0      	ldr	r0, [pc, #640]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 80010b2:	f006 fae3 	bl	800767c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80010b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ba:	489f      	ldr	r0, [pc, #636]	; (8001338 <read_one_digit_from_keyboard+0x354>)
 80010bc:	f006 fac6 	bl	800764c <HAL_GPIO_ReadPin>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 80010c6:	2337      	movs	r3, #55	; 0x37
 80010c8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d0:	4898      	ldr	r0, [pc, #608]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 80010d2:	f006 fad3 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010dc:	4895      	ldr	r0, [pc, #596]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 80010de:	f006 facd 	bl	800767c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80010e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010e6:	4894      	ldr	r0, [pc, #592]	; (8001338 <read_one_digit_from_keyboard+0x354>)
 80010e8:	f006 fab0 	bl	800764c <HAL_GPIO_ReadPin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 80010f2:	232a      	movs	r3, #42	; 0x2a
 80010f4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010fc:	488d      	ldr	r0, [pc, #564]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 80010fe:	f006 fabd 	bl	800767c <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001108:	488a      	ldr	r0, [pc, #552]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 800110a:	f006 fab7 	bl	800767c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001114:	4887      	ldr	r0, [pc, #540]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 8001116:	f006 fab1 	bl	800767c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001120:	4884      	ldr	r0, [pc, #528]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 8001122:	f006 faab 	bl	800767c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112c:	4881      	ldr	r0, [pc, #516]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 800112e:	f006 faa5 	bl	800767c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 8001132:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001136:	4880      	ldr	r0, [pc, #512]	; (8001338 <read_one_digit_from_keyboard+0x354>)
 8001138:	f006 fa88 	bl	800764c <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d169      	bne.n	8001216 <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001148:	487a      	ldr	r0, [pc, #488]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 800114a:	f006 fa97 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001154:	4877      	ldr	r0, [pc, #476]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 8001156:	f006 fa91 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001160:	4874      	ldr	r0, [pc, #464]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 8001162:	f006 fa8b 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	4871      	ldr	r0, [pc, #452]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 800116e:	f006 fa85 	bl	800767c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001172:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001176:	4870      	ldr	r0, [pc, #448]	; (8001338 <read_one_digit_from_keyboard+0x354>)
 8001178:	f006 fa68 	bl	800764c <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 8001182:	2332      	movs	r3, #50	; 0x32
 8001184:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800118c:	4869      	ldr	r0, [pc, #420]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 800118e:	f006 fa75 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001198:	4866      	ldr	r0, [pc, #408]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 800119a:	f006 fa6f 	bl	800767c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800119e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a2:	4865      	ldr	r0, [pc, #404]	; (8001338 <read_one_digit_from_keyboard+0x354>)
 80011a4:	f006 fa52 	bl	800764c <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 80011ae:	2335      	movs	r3, #53	; 0x35
 80011b0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b8:	485e      	ldr	r0, [pc, #376]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 80011ba:	f006 fa5f 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c4:	485b      	ldr	r0, [pc, #364]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 80011c6:	f006 fa59 	bl	800767c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80011ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ce:	485a      	ldr	r0, [pc, #360]	; (8001338 <read_one_digit_from_keyboard+0x354>)
 80011d0:	f006 fa3c 	bl	800764c <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 80011da:	2338      	movs	r3, #56	; 0x38
 80011dc:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e4:	4853      	ldr	r0, [pc, #332]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 80011e6:	f006 fa49 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f0:	4850      	ldr	r0, [pc, #320]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 80011f2:	f006 fa43 	bl	800767c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80011f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fa:	484f      	ldr	r0, [pc, #316]	; (8001338 <read_one_digit_from_keyboard+0x354>)
 80011fc:	f006 fa26 	bl	800764c <HAL_GPIO_ReadPin>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 8001206:	2330      	movs	r3, #48	; 0x30
 8001208:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001210:	4848      	ldr	r0, [pc, #288]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 8001212:	f006 fa33 	bl	800767c <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800121c:	4845      	ldr	r0, [pc, #276]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 800121e:	f006 fa2d 	bl	800767c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001228:	4842      	ldr	r0, [pc, #264]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 800122a:	f006 fa27 	bl	800767c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001234:	483f      	ldr	r0, [pc, #252]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 8001236:	f006 fa21 	bl	800767c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001240:	483c      	ldr	r0, [pc, #240]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 8001242:	f006 fa1b 	bl	800767c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001246:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800124a:	483c      	ldr	r0, [pc, #240]	; (800133c <read_one_digit_from_keyboard+0x358>)
 800124c:	f006 f9fe 	bl	800764c <HAL_GPIO_ReadPin>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d169      	bne.n	800132a <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800125c:	4835      	ldr	r0, [pc, #212]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 800125e:	f006 fa0d 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001268:	4832      	ldr	r0, [pc, #200]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 800126a:	f006 fa07 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001274:	482f      	ldr	r0, [pc, #188]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 8001276:	f006 fa01 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001280:	482c      	ldr	r0, [pc, #176]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 8001282:	f006 f9fb 	bl	800767c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128a:	482c      	ldr	r0, [pc, #176]	; (800133c <read_one_digit_from_keyboard+0x358>)
 800128c:	f006 f9de 	bl	800764c <HAL_GPIO_ReadPin>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 8001296:	2333      	movs	r3, #51	; 0x33
 8001298:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 800129a:	2201      	movs	r2, #1
 800129c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a0:	4824      	ldr	r0, [pc, #144]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 80012a2:	f006 f9eb 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ac:	4821      	ldr	r0, [pc, #132]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 80012ae:	f006 f9e5 	bl	800767c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80012b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b6:	4821      	ldr	r0, [pc, #132]	; (800133c <read_one_digit_from_keyboard+0x358>)
 80012b8:	f006 f9c8 	bl	800764c <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 80012c2:	2336      	movs	r3, #54	; 0x36
 80012c4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012cc:	4819      	ldr	r0, [pc, #100]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 80012ce:	f006 f9d5 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d8:	4816      	ldr	r0, [pc, #88]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 80012da:	f006 f9cf 	bl	800767c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80012de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e2:	4816      	ldr	r0, [pc, #88]	; (800133c <read_one_digit_from_keyboard+0x358>)
 80012e4:	f006 f9b2 	bl	800764c <HAL_GPIO_ReadPin>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 80012ee:	2339      	movs	r3, #57	; 0x39
 80012f0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80012f2:	2201      	movs	r2, #1
 80012f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f8:	480e      	ldr	r0, [pc, #56]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 80012fa:	f006 f9bf 	bl	800767c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001304:	480b      	ldr	r0, [pc, #44]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 8001306:	f006 f9b9 	bl	800767c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800130a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800130e:	480b      	ldr	r0, [pc, #44]	; (800133c <read_one_digit_from_keyboard+0x358>)
 8001310:	f006 f99c 	bl	800764c <HAL_GPIO_ReadPin>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 800131a:	2323      	movs	r3, #35	; 0x23
 800131c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <read_one_digit_from_keyboard+0x350>)
 8001326:	f006 f9a9 	bl	800767c <HAL_GPIO_WritePin>
	}
	return digit;
 800132a:	79fb      	ldrb	r3, [r7, #7]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40020400 	.word	0x40020400
 800133c:	40021000 	.word	0x40021000

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001346:	f005 fe3d 	bl	8006fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134a:	f000 f843 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134e:	f000 faf3 	bl	8001938 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001352:	f000 f96b 	bl	800162c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001356:	f00f f85d 	bl	8010414 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 800135a:	f000 fa2b 	bl	80017b4 <MX_TIM2_Init>
  MX_SPI2_Init();
 800135e:	f000 f99b 	bl	8001698 <MX_SPI2_Init>
  MX_RNG_Init();
 8001362:	f000 f94f 	bl	8001604 <MX_RNG_Init>
  MX_TIM3_Init();
 8001366:	f000 fa73 	bl	8001850 <MX_TIM3_Init>
  MX_TIM1_Init();
 800136a:	f000 f9cb 	bl	8001704 <MX_TIM1_Init>
  MX_I2C3_Init();
 800136e:	f000 f8ed 	bl	800154c <MX_I2C3_Init>
  MX_I2C2_Init();
 8001372:	f000 f8bd 	bl	80014f0 <MX_I2C2_Init>
  MX_I2S3_Init();
 8001376:	f000 f917 	bl	80015a8 <MX_I2S3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800137a:	f000 f8ad 	bl	80014d8 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 800137e:	f001 fb07 	bl	8002990 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 8001382:	2000      	movs	r0, #0
 8001384:	f001 fcaa 	bl	8002cdc <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8001388:	2003      	movs	r0, #3
 800138a:	f001 faa3 	bl	80028d4 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 800138e:	2000      	movs	r0, #0
 8001390:	f001 fca4 	bl	8002cdc <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 8001394:	2364      	movs	r3, #100	; 0x64
 8001396:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f003 f813 	bl	80043c4 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 800139e:	2000      	movs	r0, #0
 80013a0:	f001 fc9c 	bl	8002cdc <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 80013a4:	4809      	ldr	r0, [pc, #36]	; (80013cc <main+0x8c>)
 80013a6:	f00b f8fb 	bl	800c5a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80013aa:	2100      	movs	r1, #0
 80013ac:	4807      	ldr	r0, [pc, #28]	; (80013cc <main+0x8c>)
 80013ae:	f00b f967 	bl	800c680 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <main+0x90>)
 80013b4:	220a      	movs	r2, #10
 80013b6:	779a      	strb	r2, [r3, #30]
  // Encoder /////////////////////////////////////////
//  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
//  int32_t prevCounter = 0;
  ////////////////////////////////////////////////////

  detect_all_sensors_and_init();			// Detect all devices which connected to i2c2 and i2c3
 80013b8:	f004 fae8 	bl	800598c <detect_all_sensors_and_init>
  measure_sensors();
 80013bc:	f004 fb0e 	bl	80059dc <measure_sensors>
  {
	  /////////////////////////////////////////////////////////////////

	  //I2C_3_scaner();

	 menu();
 80013c0:	f001 fe5e 	bl	8003080 <menu>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80013c4:	f00f f84c 	bl	8010460 <MX_USB_HOST_Process>
	 menu();
 80013c8:	e7fa      	b.n	80013c0 <main+0x80>
 80013ca:	bf00      	nop
 80013cc:	20000460 	.word	0x20000460
 80013d0:	20000338 	.word	0x20000338

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b098      	sub	sp, #96	; 0x60
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013de:	2230      	movs	r2, #48	; 0x30
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f00f fb7e 	bl	8010ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <SystemClock_Config+0xfc>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a30      	ldr	r2, [pc, #192]	; (80014d0 <SystemClock_Config+0xfc>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <SystemClock_Config+0xfc>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <SystemClock_Config+0x100>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a2a      	ldr	r2, [pc, #168]	; (80014d4 <SystemClock_Config+0x100>)
 800142c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <SystemClock_Config+0x100>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800143e:	2301      	movs	r3, #1
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001446:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001448:	2302      	movs	r3, #2
 800144a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800144c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001450:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001452:	2308      	movs	r3, #8
 8001454:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001456:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800145a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800145c:	2302      	movs	r3, #2
 800145e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001460:	2307      	movs	r3, #7
 8001462:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001468:	4618      	mov	r0, r3
 800146a:	f009 ff8b 	bl	800b384 <HAL_RCC_OscConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001474:	f000 fc0c 	bl	8001c90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001478:	230f      	movs	r3, #15
 800147a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147c:	2302      	movs	r3, #2
 800147e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001484:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800148a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	2105      	movs	r1, #5
 8001496:	4618      	mov	r0, r3
 8001498:	f00a f9ec 	bl	800b874 <HAL_RCC_ClockConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80014a2:	f000 fbf5 	bl	8001c90 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014a6:	2301      	movs	r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80014aa:	23c0      	movs	r3, #192	; 0xc0
 80014ac:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00a fbc4 	bl	800bc44 <HAL_RCCEx_PeriphCLKConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80014c2:	f000 fbe5 	bl	8001c90 <Error_Handler>
  }
}
 80014c6:	bf00      	nop
 80014c8:	3760      	adds	r7, #96	; 0x60
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40007000 	.word	0x40007000

080014d8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	201c      	movs	r0, #28
 80014e2:	f005 fee0 	bl	80072a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014e6:	201c      	movs	r0, #28
 80014e8:	f005 fef9 	bl	80072de <HAL_NVIC_EnableIRQ>
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MX_I2C2_Init+0x50>)
 80014f6:	4a13      	ldr	r2, [pc, #76]	; (8001544 <MX_I2C2_Init+0x54>)
 80014f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_I2C2_Init+0x50>)
 80014fc:	4a12      	ldr	r2, [pc, #72]	; (8001548 <MX_I2C2_Init+0x58>)
 80014fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_I2C2_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_I2C2_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_I2C2_Init+0x50>)
 800150e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001512:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MX_I2C2_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_I2C2_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <MX_I2C2_Init+0x50>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_I2C2_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <MX_I2C2_Init+0x50>)
 800152e:	f007 fe55 	bl	80091dc <HAL_I2C_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001538:	f000 fbaa 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2000040c 	.word	0x2000040c
 8001544:	40005800 	.word	0x40005800
 8001548:	000186a0 	.word	0x000186a0

0800154c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <MX_I2C3_Init+0x50>)
 8001552:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <MX_I2C3_Init+0x54>)
 8001554:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_I2C3_Init+0x50>)
 8001558:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <MX_I2C3_Init+0x58>)
 800155a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_I2C3_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_I2C3_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <MX_I2C3_Init+0x50>)
 800156a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800156e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <MX_I2C3_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_I2C3_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <MX_I2C3_Init+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <MX_I2C3_Init+0x50>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <MX_I2C3_Init+0x50>)
 800158a:	f007 fe27 	bl	80091dc <HAL_I2C_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001594:	f000 fb7c 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000360 	.word	0x20000360
 80015a0:	40005c00 	.word	0x40005c00
 80015a4:	000186a0 	.word	0x000186a0

080015a8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <MX_I2S3_Init+0x54>)
 80015ae:	4a14      	ldr	r2, [pc, #80]	; (8001600 <MX_I2S3_Init+0x58>)
 80015b0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <MX_I2S3_Init+0x54>)
 80015b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <MX_I2S3_Init+0x54>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_I2S3_Init+0x54>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <MX_I2S3_Init+0x54>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_I2S3_Init+0x54>)
 80015ce:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80015d2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_I2S3_Init+0x54>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_I2S3_Init+0x54>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_I2S3_Init+0x54>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_I2S3_Init+0x54>)
 80015e8:	f009 fa2c 	bl	800aa44 <HAL_I2S_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80015f2:	f000 fb4d 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000610 	.word	0x20000610
 8001600:	40003c00 	.word	0x40003c00

08001604 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_RNG_Init+0x20>)
 800160a:	4a07      	ldr	r2, [pc, #28]	; (8001628 <MX_RNG_Init+0x24>)
 800160c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_RNG_Init+0x20>)
 8001610:	f00a fc58 	bl	800bec4 <HAL_RNG_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800161a:	f000 fb39 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000560 	.word	0x20000560
 8001628:	50060800 	.word	0x50060800

0800162c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <MX_SPI1_Init+0x64>)
 8001632:	4a18      	ldr	r2, [pc, #96]	; (8001694 <MX_SPI1_Init+0x68>)
 8001634:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_SPI1_Init+0x64>)
 8001638:	f44f 7282 	mov.w	r2, #260	; 0x104
 800163c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_SPI1_Init+0x64>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_SPI1_Init+0x64>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_SPI1_Init+0x64>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MX_SPI1_Init+0x64>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_SPI1_Init+0x64>)
 8001658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800165c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_SPI1_Init+0x64>)
 8001660:	2228      	movs	r2, #40	; 0x28
 8001662:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <MX_SPI1_Init+0x64>)
 8001666:	2200      	movs	r2, #0
 8001668:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_SPI1_Init+0x64>)
 800166c:	2200      	movs	r2, #0
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <MX_SPI1_Init+0x64>)
 8001672:	2200      	movs	r2, #0
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_SPI1_Init+0x64>)
 8001678:	220a      	movs	r2, #10
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <MX_SPI1_Init+0x64>)
 800167e:	f00a fcaf 	bl	800bfe0 <HAL_SPI_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001688:	f000 fb02 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000570 	.word	0x20000570
 8001694:	40013000 	.word	0x40013000

08001698 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <MX_SPI2_Init+0x64>)
 800169e:	4a18      	ldr	r2, [pc, #96]	; (8001700 <MX_SPI2_Init+0x68>)
 80016a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <MX_SPI2_Init+0x64>)
 80016a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_SPI2_Init+0x64>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_SPI2_Init+0x64>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_SPI2_Init+0x64>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_SPI2_Init+0x64>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_SPI2_Init+0x64>)
 80016c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_SPI2_Init+0x64>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <MX_SPI2_Init+0x64>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_SPI2_Init+0x64>)
 80016d8:	2200      	movs	r2, #0
 80016da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <MX_SPI2_Init+0x64>)
 80016de:	2200      	movs	r2, #0
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_SPI2_Init+0x64>)
 80016e4:	220a      	movs	r2, #10
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <MX_SPI2_Init+0x64>)
 80016ea:	f00a fc79 	bl	800bfe0 <HAL_SPI_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016f4:	f000 facc 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200003b4 	.word	0x200003b4
 8001700:	40003800 	.word	0x40003800

08001704 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	; 0x30
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	2224      	movs	r2, #36	; 0x24
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f00f f9e6 	bl	8010ae4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <MX_TIM1_Init+0xa8>)
 8001722:	4a23      	ldr	r2, [pc, #140]	; (80017b0 <MX_TIM1_Init+0xac>)
 8001724:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <MX_TIM1_Init+0xa8>)
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <MX_TIM1_Init+0xa8>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <MX_TIM1_Init+0xa8>)
 8001734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001738:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <MX_TIM1_Init+0xa8>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <MX_TIM1_Init+0xa8>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <MX_TIM1_Init+0xa8>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800174c:	2301      	movs	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001754:	2301      	movs	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001764:	2301      	movs	r3, #1
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	4619      	mov	r1, r3
 8001776:	480d      	ldr	r0, [pc, #52]	; (80017ac <MX_TIM1_Init+0xa8>)
 8001778:	f00b f8e9 	bl	800c94e <HAL_TIM_Encoder_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001782:	f000 fa85 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	4619      	mov	r1, r3
 8001792:	4806      	ldr	r0, [pc, #24]	; (80017ac <MX_TIM1_Init+0xa8>)
 8001794:	f00b ff4e 	bl	800d634 <HAL_TIMEx_MasterConfigSynchronization>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800179e:	f000 fa77 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	3730      	adds	r7, #48	; 0x30
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000518 	.word	0x20000518
 80017b0:	40010000 	.word	0x40010000

080017b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c8:	463b      	mov	r3, r7
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <MX_TIM2_Init+0x98>)
 80017d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <MX_TIM2_Init+0x98>)
 80017da:	f240 3247 	movw	r2, #839	; 0x347
 80017de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_TIM2_Init+0x98>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <MX_TIM2_Init+0x98>)
 80017e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_TIM2_Init+0x98>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <MX_TIM2_Init+0x98>)
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017fa:	4814      	ldr	r0, [pc, #80]	; (800184c <MX_TIM2_Init+0x98>)
 80017fc:	f00a fe80 	bl	800c500 <HAL_TIM_Base_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001806:	f000 fa43 	bl	8001c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	4619      	mov	r1, r3
 8001816:	480d      	ldr	r0, [pc, #52]	; (800184c <MX_TIM2_Init+0x98>)
 8001818:	f00b fb06 	bl	800ce28 <HAL_TIM_ConfigClockSource>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001822:	f000 fa35 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001826:	2310      	movs	r3, #16
 8001828:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800182e:	463b      	mov	r3, r7
 8001830:	4619      	mov	r1, r3
 8001832:	4806      	ldr	r0, [pc, #24]	; (800184c <MX_TIM2_Init+0x98>)
 8001834:	f00b fefe 	bl	800d634 <HAL_TIMEx_MasterConfigSynchronization>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800183e:	f000 fa27 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200005c8 	.word	0x200005c8

08001850 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08e      	sub	sp, #56	; 0x38
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001864:	f107 0320 	add.w	r3, r7, #32
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
 800187c:	615a      	str	r2, [r3, #20]
 800187e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001880:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <MX_TIM3_Init+0xe0>)
 8001882:	4a2c      	ldr	r2, [pc, #176]	; (8001934 <MX_TIM3_Init+0xe4>)
 8001884:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 8001886:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <MX_TIM3_Init+0xe0>)
 8001888:	f640 0233 	movw	r2, #2099	; 0x833
 800188c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b28      	ldr	r3, [pc, #160]	; (8001930 <MX_TIM3_Init+0xe0>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001894:	4b26      	ldr	r3, [pc, #152]	; (8001930 <MX_TIM3_Init+0xe0>)
 8001896:	f242 7210 	movw	r2, #10000	; 0x2710
 800189a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189c:	4b24      	ldr	r3, [pc, #144]	; (8001930 <MX_TIM3_Init+0xe0>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <MX_TIM3_Init+0xe0>)
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018a8:	4821      	ldr	r0, [pc, #132]	; (8001930 <MX_TIM3_Init+0xe0>)
 80018aa:	f00a fe29 	bl	800c500 <HAL_TIM_Base_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80018b4:	f000 f9ec 	bl	8001c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018c2:	4619      	mov	r1, r3
 80018c4:	481a      	ldr	r0, [pc, #104]	; (8001930 <MX_TIM3_Init+0xe0>)
 80018c6:	f00b faaf 	bl	800ce28 <HAL_TIM_ConfigClockSource>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80018d0:	f000 f9de 	bl	8001c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018d4:	4816      	ldr	r0, [pc, #88]	; (8001930 <MX_TIM3_Init+0xe0>)
 80018d6:	f00a ffe1 	bl	800c89c <HAL_TIM_PWM_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80018e0:	f000 f9d6 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ec:	f107 0320 	add.w	r3, r7, #32
 80018f0:	4619      	mov	r1, r3
 80018f2:	480f      	ldr	r0, [pc, #60]	; (8001930 <MX_TIM3_Init+0xe0>)
 80018f4:	f00b fe9e 	bl	800d634 <HAL_TIMEx_MasterConfigSynchronization>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80018fe:	f000 f9c7 	bl	8001c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001902:	2360      	movs	r3, #96	; 0x60
 8001904:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2200      	movs	r2, #0
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_TIM3_Init+0xe0>)
 800191a:	f00b f9c7 	bl	800ccac <HAL_TIM_PWM_ConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001924:	f000 f9b4 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	3738      	adds	r7, #56	; 0x38
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000460 	.word	0x20000460
 8001934:	40000400 	.word	0x40000400

08001938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08c      	sub	sp, #48	; 0x30
 800193c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193e:	f107 031c 	add.w	r3, r7, #28
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	4bb6      	ldr	r3, [pc, #728]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4ab5      	ldr	r2, [pc, #724]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 8001958:	f043 0310 	orr.w	r3, r3, #16
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4bb3      	ldr	r3, [pc, #716]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	61bb      	str	r3, [r7, #24]
 8001968:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	4baf      	ldr	r3, [pc, #700]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4aae      	ldr	r2, [pc, #696]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4bac      	ldr	r3, [pc, #688]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	4ba8      	ldr	r3, [pc, #672]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4aa7      	ldr	r2, [pc, #668]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 8001990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4ba5      	ldr	r3, [pc, #660]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4ba1      	ldr	r3, [pc, #644]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4aa0      	ldr	r2, [pc, #640]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b9e      	ldr	r3, [pc, #632]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	4b9a      	ldr	r3, [pc, #616]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a99      	ldr	r2, [pc, #612]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b97      	ldr	r3, [pc, #604]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b93      	ldr	r3, [pc, #588]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a92      	ldr	r2, [pc, #584]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 80019e4:	f043 0308 	orr.w	r3, r3, #8
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b90      	ldr	r3, [pc, #576]	; (8001c2c <MX_GPIO_Init+0x2f4>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 80019f6:	2200      	movs	r2, #0
 80019f8:	217c      	movs	r1, #124	; 0x7c
 80019fa:	488d      	ldr	r0, [pc, #564]	; (8001c30 <MX_GPIO_Init+0x2f8>)
 80019fc:	f005 fe3e 	bl	800767c <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OTG_FS_PowerSwitchOn_Pin|CSN_nrf_Pin, GPIO_PIN_SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	2111      	movs	r1, #17
 8001a04:	488b      	ldr	r0, [pc, #556]	; (8001c34 <MX_GPIO_Init+0x2fc>)
 8001a06:	f005 fe39 	bl	800767c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_nrf_GPIO_Port, CE_nrf_Pin, GPIO_PIN_RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2108      	movs	r1, #8
 8001a0e:	488a      	ldr	r0, [pc, #552]	; (8001c38 <MX_GPIO_Init+0x300>)
 8001a10:	f005 fe34 	bl	800767c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001a14:	2200      	movs	r2, #0
 8001a16:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001a1a:	4888      	ldr	r0, [pc, #544]	; (8001c3c <MX_GPIO_Init+0x304>)
 8001a1c:	f005 fe2e 	bl	800767c <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001a26:	4883      	ldr	r0, [pc, #524]	; (8001c34 <MX_GPIO_Init+0x2fc>)
 8001a28:	f005 fe28 	bl	800767c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001a32:	4883      	ldr	r0, [pc, #524]	; (8001c40 <MX_GPIO_Init+0x308>)
 8001a34:	f005 fe22 	bl	800767c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001a38:	2374      	movs	r3, #116	; 0x74
 8001a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4878      	ldr	r0, [pc, #480]	; (8001c30 <MX_GPIO_Init+0x2f8>)
 8001a50:	f005 fc60 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001a54:	2308      	movs	r3, #8
 8001a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4871      	ldr	r0, [pc, #452]	; (8001c30 <MX_GPIO_Init+0x2f8>)
 8001a6c:	f005 fc52 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_IRQ_Pin AM2302_Pin IRQ_nrf_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|AM2302_Pin|IRQ_nrf_Pin;
 8001a70:	f242 0322 	movw	r3, #8226	; 0x2022
 8001a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	486b      	ldr	r0, [pc, #428]	; (8001c34 <MX_GPIO_Init+0x2fc>)
 8001a86:	f005 fc45 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 8001a8a:	f640 0341 	movw	r3, #2113	; 0x841
 8001a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4864      	ldr	r0, [pc, #400]	; (8001c34 <MX_GPIO_Init+0x2fc>)
 8001aa4:	f005 fc36 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001aa8:	2308      	movs	r3, #8
 8001aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ab8:	2305      	movs	r3, #5
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	485c      	ldr	r0, [pc, #368]	; (8001c34 <MX_GPIO_Init+0x2fc>)
 8001ac4:	f005 fc26 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_nrf_Pin */
  GPIO_InitStruct.Pin = CE_nrf_Pin;
 8001ac8:	2308      	movs	r3, #8
 8001aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CE_nrf_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	4619      	mov	r1, r3
 8001ade:	4856      	ldr	r0, [pc, #344]	; (8001c38 <MX_GPIO_Init+0x300>)
 8001ae0:	f005 fc18 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSN_nrf_Pin */
  GPIO_InitStruct.Pin = CSN_nrf_Pin;
 8001ae4:	2310      	movs	r3, #16
 8001ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CSN_nrf_GPIO_Port, &GPIO_InitStruct);
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4619      	mov	r1, r3
 8001afa:	484e      	ldr	r0, [pc, #312]	; (8001c34 <MX_GPIO_Init+0x2fc>)
 8001afc:	f005 fc0a 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001b00:	2304      	movs	r3, #4
 8001b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b04:	2300      	movs	r3, #0
 8001b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	4619      	mov	r1, r3
 8001b12:	484b      	ldr	r0, [pc, #300]	; (8001c40 <MX_GPIO_Init+0x308>)
 8001b14:	f005 fbfe 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTION_SENSOR_9960_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin;
 8001b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b1e:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <MX_GPIO_Init+0x30c>)
 8001b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MOTION_SENSOR_9960_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4840      	ldr	r0, [pc, #256]	; (8001c30 <MX_GPIO_Init+0x2f8>)
 8001b2e:	f005 fbf1 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 8001b32:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b40:	f107 031c 	add.w	r3, r7, #28
 8001b44:	4619      	mov	r1, r3
 8001b46:	483a      	ldr	r0, [pc, #232]	; (8001c30 <MX_GPIO_Init+0x2f8>)
 8001b48:	f005 fbe4 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001b4c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5a:	f107 031c 	add.w	r3, r7, #28
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4837      	ldr	r0, [pc, #220]	; (8001c40 <MX_GPIO_Init+0x308>)
 8001b62:	f005 fbd7 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001b66:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001b6a:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	482f      	ldr	r0, [pc, #188]	; (8001c3c <MX_GPIO_Init+0x304>)
 8001b80:	f005 fbc8 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b84:	2320      	movs	r3, #32
 8001b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	4619      	mov	r1, r3
 8001b96:	4829      	ldr	r0, [pc, #164]	; (8001c3c <MX_GPIO_Init+0x304>)
 8001b98:	f005 fbbc 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b9c:	2340      	movs	r3, #64	; 0x40
 8001b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4823      	ldr	r0, [pc, #140]	; (8001c40 <MX_GPIO_Init+0x308>)
 8001bb4:	f005 fbae 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001bb8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	481b      	ldr	r0, [pc, #108]	; (8001c40 <MX_GPIO_Init+0x308>)
 8001bd2:	f005 fb9f 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bdc:	2312      	movs	r3, #18
 8001bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be8:	2304      	movs	r3, #4
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4813      	ldr	r0, [pc, #76]	; (8001c40 <MX_GPIO_Init+0x308>)
 8001bf4:	f005 fb8e 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4809      	ldr	r0, [pc, #36]	; (8001c30 <MX_GPIO_Init+0x2f8>)
 8001c0c:	f005 fb82 	bl	8007314 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <MX_GPIO_Init+0x310>)
 8001c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4619      	mov	r1, r3
 8001c22:	4803      	ldr	r0, [pc, #12]	; (8001c30 <MX_GPIO_Init+0x2f8>)
 8001c24:	f005 fb76 	bl	8007314 <HAL_GPIO_Init>
 8001c28:	e010      	b.n	8001c4c <MX_GPIO_Init+0x314>
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40020800 	.word	0x40020800
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	40020c00 	.word	0x40020c00
 8001c40:	40020400 	.word	0x40020400
 8001c44:	10110000 	.word	0x10110000
 8001c48:	10120000 	.word	0x10120000

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2028      	movs	r0, #40	; 0x28
 8001c52:	f005 fb28 	bl	80072a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c56:	2028      	movs	r0, #40	; 0x28
 8001c58:	f005 fb41 	bl	80072de <HAL_NVIC_EnableIRQ>

}
 8001c5c:	bf00      	nop
 8001c5e:	3730      	adds	r7, #48	; 0x30
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MOTION_SENSOR_9960_Pin)
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c74:	d105      	bne.n	8001c82 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001c76:	2201      	movs	r2, #1
 8001c78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c7c:	4803      	ldr	r0, [pc, #12]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x28>)
 8001c7e:	f005 fcfd 	bl	800767c <HAL_GPIO_WritePin>
	}
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40020c00 	.word	0x40020c00

08001c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
}
 8001c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <Error_Handler+0x8>
	...

08001c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_MspInit+0x5c>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <HAL_MspInit+0x5c>)
 8001cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_MspInit+0x5c>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <HAL_MspInit+0x5c>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	4a0c      	ldr	r2, [pc, #48]	; (8001cf8 <HAL_MspInit+0x5c>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_MspInit+0x5c>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cda:	2007      	movs	r0, #7
 8001cdc:	f005 fad8 	bl	8007290 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2005      	movs	r0, #5
 8001ce6:	f005 fade 	bl	80072a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001cea:	2005      	movs	r0, #5
 8001cec:	f005 faf7 	bl	80072de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800

08001cfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	; 0x30
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 031c 	add.w	r3, r7, #28
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a42      	ldr	r2, [pc, #264]	; (8001e24 <HAL_I2C_MspInit+0x128>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d12d      	bne.n	8001d7a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <HAL_I2C_MspInit+0x12c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a40      	ldr	r2, [pc, #256]	; (8001e28 <HAL_I2C_MspInit+0x12c>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b3e      	ldr	r3, [pc, #248]	; (8001e28 <HAL_I2C_MspInit+0x12c>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d40:	2312      	movs	r3, #18
 8001d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d44:	2301      	movs	r3, #1
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	4619      	mov	r1, r3
 8001d56:	4835      	ldr	r0, [pc, #212]	; (8001e2c <HAL_I2C_MspInit+0x130>)
 8001d58:	f005 fadc 	bl	8007314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <HAL_I2C_MspInit+0x12c>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	4a30      	ldr	r2, [pc, #192]	; (8001e28 <HAL_I2C_MspInit+0x12c>)
 8001d66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <HAL_I2C_MspInit+0x12c>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d78:	e050      	b.n	8001e1c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a2c      	ldr	r2, [pc, #176]	; (8001e30 <HAL_I2C_MspInit+0x134>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d14b      	bne.n	8001e1c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d84:	2300      	movs	r3, #0
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_I2C_MspInit+0x12c>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	4a26      	ldr	r2, [pc, #152]	; (8001e28 <HAL_I2C_MspInit+0x12c>)
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	6313      	str	r3, [r2, #48]	; 0x30
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_I2C_MspInit+0x12c>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_I2C_MspInit+0x12c>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	4a1f      	ldr	r2, [pc, #124]	; (8001e28 <HAL_I2C_MspInit+0x12c>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6313      	str	r3, [r2, #48]	; 0x30
 8001db0:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_I2C_MspInit+0x12c>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc2:	2312      	movs	r3, #18
 8001dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dce:	2304      	movs	r3, #4
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd2:	f107 031c 	add.w	r3, r7, #28
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4816      	ldr	r0, [pc, #88]	; (8001e34 <HAL_I2C_MspInit+0x138>)
 8001dda:	f005 fa9b 	bl	8007314 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de4:	2312      	movs	r3, #18
 8001de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de8:	2301      	movs	r3, #1
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dec:	2303      	movs	r3, #3
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001df0:	2304      	movs	r3, #4
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 031c 	add.w	r3, r7, #28
 8001df8:	4619      	mov	r1, r3
 8001dfa:	480f      	ldr	r0, [pc, #60]	; (8001e38 <HAL_I2C_MspInit+0x13c>)
 8001dfc:	f005 fa8a 	bl	8007314 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_I2C_MspInit+0x12c>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_I2C_MspInit+0x12c>)
 8001e0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_I2C_MspInit+0x12c>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
}
 8001e1c:	bf00      	nop
 8001e1e:	3730      	adds	r7, #48	; 0x30
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40005800 	.word	0x40005800
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	40005c00 	.word	0x40005c00
 8001e34:	40020800 	.word	0x40020800
 8001e38:	40020000 	.word	0x40020000

08001e3c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	; 0x30
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a37      	ldr	r2, [pc, #220]	; (8001f38 <HAL_I2S_MspInit+0xfc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d168      	bne.n	8001f30 <HAL_I2S_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <HAL_I2S_MspInit+0x100>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a35      	ldr	r2, [pc, #212]	; (8001f3c <HAL_I2S_MspInit+0x100>)
 8001e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6e:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <HAL_I2S_MspInit+0x100>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <HAL_I2S_MspInit+0x100>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a2e      	ldr	r2, [pc, #184]	; (8001f3c <HAL_I2S_MspInit+0x100>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <HAL_I2S_MspInit+0x100>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <HAL_I2S_MspInit+0x100>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a27      	ldr	r2, [pc, #156]	; (8001f3c <HAL_I2S_MspInit+0x100>)
 8001ea0:	f043 0304 	orr.w	r3, r3, #4
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <HAL_I2S_MspInit+0x100>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_I2S_MspInit+0x100>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a20      	ldr	r2, [pc, #128]	; (8001f3c <HAL_I2S_MspInit+0x100>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <HAL_I2S_MspInit+0x100>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    PB4     ------> I2S3_ext_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001ece:	2310      	movs	r3, #16
 8001ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ede:	2306      	movs	r3, #6
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ee2:	f107 031c 	add.w	r3, r7, #28
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4815      	ldr	r0, [pc, #84]	; (8001f40 <HAL_I2S_MspInit+0x104>)
 8001eea:	f005 fa13 	bl	8007314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001eee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f00:	2306      	movs	r3, #6
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	4619      	mov	r1, r3
 8001f0a:	480e      	ldr	r0, [pc, #56]	; (8001f44 <HAL_I2S_MspInit+0x108>)
 8001f0c:	f005 fa02 	bl	8007314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f10:	2310      	movs	r3, #16
 8001f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_I2S3ext;
 8001f20:	2307      	movs	r3, #7
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4807      	ldr	r0, [pc, #28]	; (8001f48 <HAL_I2S_MspInit+0x10c>)
 8001f2c:	f005 f9f2 	bl	8007314 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f30:	bf00      	nop
 8001f32:	3730      	adds	r7, #48	; 0x30
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40003c00 	.word	0x40003c00
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020000 	.word	0x40020000
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40020400 	.word	0x40020400

08001f4c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <HAL_RNG_MspInit+0x3c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d10d      	bne.n	8001f7a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RNG_MspInit+0x40>)
 8001f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <HAL_RNG_MspInit+0x40>)
 8001f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f6c:	6353      	str	r3, [r2, #52]	; 0x34
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <HAL_RNG_MspInit+0x40>)
 8001f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	50060800 	.word	0x50060800
 8001f8c:	40023800 	.word	0x40023800

08001f90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08c      	sub	sp, #48	; 0x30
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a41      	ldr	r2, [pc, #260]	; (80020b4 <HAL_SPI_MspInit+0x124>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d12c      	bne.n	800200c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	4b40      	ldr	r3, [pc, #256]	; (80020b8 <HAL_SPI_MspInit+0x128>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	4a3f      	ldr	r2, [pc, #252]	; (80020b8 <HAL_SPI_MspInit+0x128>)
 8001fbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	; (80020b8 <HAL_SPI_MspInit+0x128>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	4b39      	ldr	r3, [pc, #228]	; (80020b8 <HAL_SPI_MspInit+0x128>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a38      	ldr	r2, [pc, #224]	; (80020b8 <HAL_SPI_MspInit+0x128>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_SPI_MspInit+0x128>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001fea:	23e0      	movs	r3, #224	; 0xe0
 8001fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ffa:	2305      	movs	r3, #5
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4619      	mov	r1, r3
 8002004:	482d      	ldr	r0, [pc, #180]	; (80020bc <HAL_SPI_MspInit+0x12c>)
 8002006:	f005 f985 	bl	8007314 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800200a:	e04f      	b.n	80020ac <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a2b      	ldr	r2, [pc, #172]	; (80020c0 <HAL_SPI_MspInit+0x130>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d14a      	bne.n	80020ac <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_SPI_MspInit+0x128>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a26      	ldr	r2, [pc, #152]	; (80020b8 <HAL_SPI_MspInit+0x128>)
 8002020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_SPI_MspInit+0x128>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_SPI_MspInit+0x128>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a1f      	ldr	r2, [pc, #124]	; (80020b8 <HAL_SPI_MspInit+0x128>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_SPI_MspInit+0x128>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_SPI_MspInit+0x128>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <HAL_SPI_MspInit+0x128>)
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_SPI_MspInit+0x128>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800206a:	2304      	movs	r3, #4
 800206c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800207a:	2305      	movs	r3, #5
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207e:	f107 031c 	add.w	r3, r7, #28
 8002082:	4619      	mov	r1, r3
 8002084:	480f      	ldr	r0, [pc, #60]	; (80020c4 <HAL_SPI_MspInit+0x134>)
 8002086:	f005 f945 	bl	8007314 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800208a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002098:	2303      	movs	r3, #3
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800209c:	2305      	movs	r3, #5
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	4619      	mov	r1, r3
 80020a6:	4808      	ldr	r0, [pc, #32]	; (80020c8 <HAL_SPI_MspInit+0x138>)
 80020a8:	f005 f934 	bl	8007314 <HAL_GPIO_Init>
}
 80020ac:	bf00      	nop
 80020ae:	3730      	adds	r7, #48	; 0x30
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40013000 	.word	0x40013000
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40020000 	.word	0x40020000
 80020c0:	40003800 	.word	0x40003800
 80020c4:	40020800 	.word	0x40020800
 80020c8:	40020400 	.word	0x40020400

080020cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a19      	ldr	r2, [pc, #100]	; (8002150 <HAL_TIM_Encoder_MspInit+0x84>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d12c      	bne.n	8002148 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_TIM_Encoder_MspInit+0x88>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	4a17      	ldr	r2, [pc, #92]	; (8002154 <HAL_TIM_Encoder_MspInit+0x88>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6453      	str	r3, [r2, #68]	; 0x44
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <HAL_TIM_Encoder_MspInit+0x88>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_TIM_Encoder_MspInit+0x88>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a10      	ldr	r2, [pc, #64]	; (8002154 <HAL_TIM_Encoder_MspInit+0x88>)
 8002114:	f043 0310 	orr.w	r3, r3, #16
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_TIM_Encoder_MspInit+0x88>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002126:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800212a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002130:	2301      	movs	r3, #1
 8002132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002138:	2301      	movs	r3, #1
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	4619      	mov	r1, r3
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002144:	f005 f8e6 	bl	8007314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002148:	bf00      	nop
 800214a:	3728      	adds	r7, #40	; 0x28
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40010000 	.word	0x40010000
 8002154:	40023800 	.word	0x40023800
 8002158:	40021000 	.word	0x40021000

0800215c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216c:	d10e      	bne.n	800218c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b16      	ldr	r3, [pc, #88]	; (80021cc <HAL_TIM_Base_MspInit+0x70>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	4a15      	ldr	r2, [pc, #84]	; (80021cc <HAL_TIM_Base_MspInit+0x70>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6413      	str	r3, [r2, #64]	; 0x40
 800217e:	4b13      	ldr	r3, [pc, #76]	; (80021cc <HAL_TIM_Base_MspInit+0x70>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800218a:	e01a      	b.n	80021c2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <HAL_TIM_Base_MspInit+0x74>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d115      	bne.n	80021c2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <HAL_TIM_Base_MspInit+0x70>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <HAL_TIM_Base_MspInit+0x70>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_TIM_Base_MspInit+0x70>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	201d      	movs	r0, #29
 80021b8:	f005 f875 	bl	80072a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021bc:	201d      	movs	r0, #29
 80021be:	f005 f88e 	bl	80072de <HAL_NVIC_EnableIRQ>
}
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40000400 	.word	0x40000400

080021d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <NMI_Handler+0x4>

080021da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <HardFault_Handler+0x4>

080021e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <MemManage_Handler+0x4>

080021e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ea:	e7fe      	b.n	80021ea <BusFault_Handler+0x4>

080021ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <UsageFault_Handler+0x4>

080021f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002220:	f004 ff22 	bl	8007068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}

08002228 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 800223c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002240:	481b      	ldr	r0, [pc, #108]	; (80022b0 <TIM2_IRQHandler+0x78>)
 8002242:	f005 fa34 	bl	80076ae <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 8002246:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <TIM2_IRQHandler+0x7c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d111      	bne.n	8002272 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 800224e:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <TIM2_IRQHandler+0x80>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2bc8      	cmp	r3, #200	; 0xc8
 8002254:	dc0a      	bgt.n	800226c <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <TIM2_IRQHandler+0x80>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <TIM2_IRQHandler+0x84>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 8002260:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <TIM2_IRQHandler+0x80>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <TIM2_IRQHandler+0x80>)
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e002      	b.n	8002272 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <TIM2_IRQHandler+0x7c>)
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <TIM2_IRQHandler+0x7c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d114      	bne.n	80022a4 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 800227a:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <TIM2_IRQHandler+0x80>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b63      	cmp	r3, #99	; 0x63
 8002280:	dd0a      	ble.n	8002298 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <TIM2_IRQHandler+0x80>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <TIM2_IRQHandler+0x84>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <TIM2_IRQHandler+0x80>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3b01      	subs	r3, #1
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <TIM2_IRQHandler+0x80>)
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e005      	b.n	80022a4 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <TIM2_IRQHandler+0x7c>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
		  i = 100;
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <TIM2_IRQHandler+0x80>)
 80022a0:	2264      	movs	r2, #100	; 0x64
 80022a2:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022a4:	4805      	ldr	r0, [pc, #20]	; (80022bc <TIM2_IRQHandler+0x84>)
 80022a6:	f00a fbf8 	bl	800ca9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40020c00 	.word	0x40020c00
 80022b4:	2000031c 	.word	0x2000031c
 80022b8:	20000000 	.word	0x20000000
 80022bc:	200005c8 	.word	0x200005c8

080022c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80022c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <TIM3_IRQHandler+0x1c>)
 80022ca:	f005 f9f0 	bl	80076ae <HAL_GPIO_TogglePin>
  read_digits();
 80022ce:	f7fe fe2f 	bl	8000f30 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022d2:	4803      	ldr	r0, [pc, #12]	; (80022e0 <TIM3_IRQHandler+0x20>)
 80022d4:	f00a fbe1 	bl	800ca9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40020c00 	.word	0x40020c00
 80022e0:	20000460 	.word	0x20000460

080022e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
//	{
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
//			// HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80022e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022ec:	f005 f9fa 	bl	80076e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <OTG_FS_IRQHandler+0x10>)
 80022fa:	f005 fc75 	bl	8007be8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000b08 	.word	0x20000b08

08002308 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
	return 1;
 800230c:	2301      	movs	r3, #1
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <_kill>:

int _kill(int pid, int sig)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002322:	f00e fb7d 	bl	8010a20 <__errno>
 8002326:	4603      	mov	r3, r0
 8002328:	2216      	movs	r2, #22
 800232a:	601a      	str	r2, [r3, #0]
	return -1;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <_exit>:

void _exit (int status)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002340:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ffe7 	bl	8002318 <_kill>
	while (1) {}		/* Make sure we hang here */
 800234a:	e7fe      	b.n	800234a <_exit+0x12>

0800234c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e00a      	b.n	8002374 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800235e:	f3af 8000 	nop.w
 8002362:	4601      	mov	r1, r0
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	60ba      	str	r2, [r7, #8]
 800236a:	b2ca      	uxtb	r2, r1
 800236c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	3301      	adds	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	dbf0      	blt.n	800235e <_read+0x12>
	}

return len;
 800237c:	687b      	ldr	r3, [r7, #4]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e009      	b.n	80023ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	60ba      	str	r2, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3301      	adds	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dbf1      	blt.n	8002398 <_write+0x12>
	}
	return len;
 80023b4:	687b      	ldr	r3, [r7, #4]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_close>:

int _close(int file)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
	return -1;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023e6:	605a      	str	r2, [r3, #4]
	return 0;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <_isatty>:

int _isatty(int file)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
	return 1;
 80023fe:	2301      	movs	r3, #1
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
	return 0;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <_sbrk+0x5c>)
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <_sbrk+0x60>)
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <_sbrk+0x64>)
 8002446:	4a12      	ldr	r2, [pc, #72]	; (8002490 <_sbrk+0x68>)
 8002448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	429a      	cmp	r2, r3
 8002456:	d207      	bcs.n	8002468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002458:	f00e fae2 	bl	8010a20 <__errno>
 800245c:	4603      	mov	r3, r0
 800245e:	220c      	movs	r2, #12
 8002460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002466:	e009      	b.n	800247c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <_sbrk+0x64>)
 8002478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20020000 	.word	0x20020000
 8002488:	00000400 	.word	0x00000400
 800248c:	20000320 	.word	0x20000320
 8002490:	20000e20 	.word	0x20000e20

08002494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <SystemInit+0x20>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <SystemInit+0x20>)
 80024a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b08b      	sub	sp, #44	; 0x2c
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4604      	mov	r4, r0
 80024c0:	4608      	mov	r0, r1
 80024c2:	4611      	mov	r1, r2
 80024c4:	461a      	mov	r2, r3
 80024c6:	4623      	mov	r3, r4
 80024c8:	80fb      	strh	r3, [r7, #6]
 80024ca:	4603      	mov	r3, r0
 80024cc:	80bb      	strh	r3, [r7, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	807b      	strh	r3, [r7, #2]
 80024d2:	4613      	mov	r3, r2
 80024d4:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	f1c3 0301 	rsb	r3, r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80024f0:	e061      	b.n	80025b6 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80024f2:	88fa      	ldrh	r2, [r7, #6]
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	e018      	b.n	800252e <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	b298      	uxth	r0, r3
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	b29a      	uxth	r2, r3
 8002504:	88bb      	ldrh	r3, [r7, #4]
 8002506:	4413      	add	r3, r2
 8002508:	b29b      	uxth	r3, r3
 800250a:	883a      	ldrh	r2, [r7, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	f000 fc0b 	bl	8002d28 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	b298      	uxth	r0, r3
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	b29b      	uxth	r3, r3
 800251a:	88ba      	ldrh	r2, [r7, #4]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	b29b      	uxth	r3, r3
 8002520:	883a      	ldrh	r2, [r7, #0]
 8002522:	4619      	mov	r1, r3
 8002524:	f000 fc00 	bl	8002d28 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	3301      	adds	r3, #1
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	88fa      	ldrh	r2, [r7, #6]
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	4413      	add	r3, r2
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	429a      	cmp	r2, r3
 8002538:	dde0      	ble.n	80024fc <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 800253a:	88fa      	ldrh	r2, [r7, #6]
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	e018      	b.n	8002576 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	b298      	uxth	r0, r3
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	b29a      	uxth	r2, r3
 800254c:	88bb      	ldrh	r3, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	b29b      	uxth	r3, r3
 8002552:	883a      	ldrh	r2, [r7, #0]
 8002554:	4619      	mov	r1, r3
 8002556:	f000 fbe7 	bl	8002d28 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	b298      	uxth	r0, r3
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	b29b      	uxth	r3, r3
 8002562:	88ba      	ldrh	r2, [r7, #4]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	b29b      	uxth	r3, r3
 8002568:	883a      	ldrh	r2, [r7, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	f000 fbdc 	bl	8002d28 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3301      	adds	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	88fa      	ldrh	r2, [r7, #6]
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	4413      	add	r3, r2
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	429a      	cmp	r2, r3
 8002580:	dde0      	ble.n	8002544 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	3301      	adds	r3, #1
 8002586:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4413      	add	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	3302      	adds	r3, #2
 8002594:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	005a      	lsls	r2, r3, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	4413      	add	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	dd09      	ble.n	80025b6 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	3b01      	subs	r3, #1
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	4413      	add	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	3302      	adds	r3, #2
 80025b4:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80025b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	da99      	bge.n	80024f2 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80025be:	bf00      	nop
 80025c0:	bf00      	nop
 80025c2:	372c      	adds	r7, #44	; 0x2c
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd90      	pop	{r4, r7, pc}

080025c8 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	4604      	mov	r4, r0
 80025d0:	4608      	mov	r0, r1
 80025d2:	4611      	mov	r1, r2
 80025d4:	461a      	mov	r2, r3
 80025d6:	4623      	mov	r3, r4
 80025d8:	71fb      	strb	r3, [r7, #7]
 80025da:	4603      	mov	r3, r0
 80025dc:	80bb      	strh	r3, [r7, #4]
 80025de:	460b      	mov	r3, r1
 80025e0:	71bb      	strb	r3, [r7, #6]
 80025e2:	4613      	mov	r3, r2
 80025e4:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	2b1f      	cmp	r3, #31
 80025ee:	d902      	bls.n	80025f6 <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
 80025f2:	3b20      	subs	r3, #32
 80025f4:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	753b      	strb	r3, [r7, #20]
 80025fa:	e012      	b.n	8002622 <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 80025fc:	7dfa      	ldrb	r2, [r7, #23]
 80025fe:	7d38      	ldrb	r0, [r7, #20]
 8002600:	7d39      	ldrb	r1, [r7, #20]
 8002602:	4c3b      	ldr	r4, [pc, #236]	; (80026f0 <ILI9341_Draw_Char+0x128>)
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4423      	add	r3, r4
 800260e:	4403      	add	r3, r0
 8002610:	781a      	ldrb	r2, [r3, #0]
 8002612:	f107 0318 	add.w	r3, r7, #24
 8002616:	440b      	add	r3, r1
 8002618:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800261c:	7d3b      	ldrb	r3, [r7, #20]
 800261e:	3301      	adds	r3, #1
 8002620:	753b      	strb	r3, [r7, #20]
 8002622:	7d3b      	ldrb	r3, [r7, #20]
 8002624:	2b05      	cmp	r3, #5
 8002626:	d9e9      	bls.n	80025fc <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8002628:	79bb      	ldrb	r3, [r7, #6]
 800262a:	b299      	uxth	r1, r3
 800262c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800262e:	461a      	mov	r2, r3
 8002630:	0052      	lsls	r2, r2, #1
 8002632:	4413      	add	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	b29c      	uxth	r4, r3
 800263e:	88b8      	ldrh	r0, [r7, #4]
 8002640:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	4623      	mov	r3, r4
 8002646:	f000 fc37 	bl	8002eb8 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800264a:	2300      	movs	r3, #0
 800264c:	757b      	strb	r3, [r7, #21]
 800264e:	e046      	b.n	80026de <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002650:	2300      	movs	r3, #0
 8002652:	75bb      	strb	r3, [r7, #22]
 8002654:	e03d      	b.n	80026d2 <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 8002656:	7d7b      	ldrb	r3, [r7, #21]
 8002658:	f107 0218 	add.w	r2, r7, #24
 800265c:	4413      	add	r3, r2
 800265e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002662:	461a      	mov	r2, r3
 8002664:	7dbb      	ldrb	r3, [r7, #22]
 8002666:	fa42 f303 	asr.w	r3, r2, r3
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d02c      	beq.n	80026cc <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 8002672:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002674:	2b01      	cmp	r3, #1
 8002676:	d10f      	bne.n	8002698 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8002678:	7d7b      	ldrb	r3, [r7, #21]
 800267a:	b29a      	uxth	r2, r3
 800267c:	88bb      	ldrh	r3, [r7, #4]
 800267e:	4413      	add	r3, r2
 8002680:	b298      	uxth	r0, r3
 8002682:	79bb      	ldrb	r3, [r7, #6]
 8002684:	b29a      	uxth	r2, r3
 8002686:	7dbb      	ldrb	r3, [r7, #22]
 8002688:	b29b      	uxth	r3, r3
 800268a:	4413      	add	r3, r2
 800268c:	b29b      	uxth	r3, r3
 800268e:	887a      	ldrh	r2, [r7, #2]
 8002690:	4619      	mov	r1, r3
 8002692:	f000 fb49 	bl	8002d28 <ILI9341_Draw_Pixel>
 8002696:	e019      	b.n	80026cc <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8002698:	7d7b      	ldrb	r3, [r7, #21]
 800269a:	b29b      	uxth	r3, r3
 800269c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800269e:	fb12 f303 	smulbb	r3, r2, r3
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	88bb      	ldrh	r3, [r7, #4]
 80026a6:	4413      	add	r3, r2
 80026a8:	b298      	uxth	r0, r3
 80026aa:	79bb      	ldrb	r3, [r7, #6]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	7dbb      	ldrb	r3, [r7, #22]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80026b4:	fb11 f303 	smulbb	r3, r1, r3
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	b299      	uxth	r1, r3
 80026be:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80026c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	4623      	mov	r3, r4
 80026c8:	f000 fbf6 	bl	8002eb8 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80026cc:	7dbb      	ldrb	r3, [r7, #22]
 80026ce:	3301      	adds	r3, #1
 80026d0:	75bb      	strb	r3, [r7, #22]
 80026d2:	7dbb      	ldrb	r3, [r7, #22]
 80026d4:	2b07      	cmp	r3, #7
 80026d6:	d9be      	bls.n	8002656 <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 80026d8:	7d7b      	ldrb	r3, [r7, #21]
 80026da:	3301      	adds	r3, #1
 80026dc:	757b      	strb	r3, [r7, #21]
 80026de:	7d7b      	ldrb	r3, [r7, #21]
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d9b5      	bls.n	8002650 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd90      	pop	{r4, r7, pc}
 80026ee:	bf00      	nop
 80026f0:	08013a5c 	.word	0x08013a5c

080026f4 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	4608      	mov	r0, r1
 80026fe:	4611      	mov	r1, r2
 8002700:	461a      	mov	r2, r3
 8002702:	4603      	mov	r3, r0
 8002704:	817b      	strh	r3, [r7, #10]
 8002706:	460b      	mov	r3, r1
 8002708:	727b      	strb	r3, [r7, #9]
 800270a:	4613      	mov	r3, r2
 800270c:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 800270e:	e016      	b.n	800273e <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	60fa      	str	r2, [r7, #12]
 8002716:	7818      	ldrb	r0, [r3, #0]
 8002718:	88fc      	ldrh	r4, [r7, #6]
 800271a:	7a7a      	ldrb	r2, [r7, #9]
 800271c:	8979      	ldrh	r1, [r7, #10]
 800271e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	8c3b      	ldrh	r3, [r7, #32]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	4623      	mov	r3, r4
 8002728:	f7ff ff4e 	bl	80025c8 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 800272c:	8c3b      	ldrh	r3, [r7, #32]
 800272e:	461a      	mov	r2, r3
 8002730:	0052      	lsls	r2, r2, #1
 8002732:	4413      	add	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	897b      	ldrh	r3, [r7, #10]
 800273a:	4413      	add	r3, r2
 800273c:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1e4      	bne.n	8002710 <ILI9341_Draw_Text+0x1c>
    }
}
 8002746:	bf00      	nop
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	bd90      	pop	{r4, r7, pc}

08002750 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002754:	2200      	movs	r2, #0
 8002756:	2110      	movs	r1, #16
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <ILI9341_SPI_Init+0x14>)
 800275a:	f004 ff8f 	bl	800767c <HAL_GPIO_WritePin>
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000

08002768 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002772:	1df9      	adds	r1, r7, #7
 8002774:	2301      	movs	r3, #1
 8002776:	2201      	movs	r2, #1
 8002778:	4803      	ldr	r0, [pc, #12]	; (8002788 <ILI9341_SPI_Send+0x20>)
 800277a:	f009 fcba 	bl	800c0f2 <HAL_SPI_Transmit>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200003b4 	.word	0x200003b4

0800278c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002796:	2200      	movs	r2, #0
 8002798:	2110      	movs	r1, #16
 800279a:	480a      	ldr	r0, [pc, #40]	; (80027c4 <ILI9341_Write_Command+0x38>)
 800279c:	f004 ff6e 	bl	800767c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80027a0:	2200      	movs	r2, #0
 80027a2:	2140      	movs	r1, #64	; 0x40
 80027a4:	4807      	ldr	r0, [pc, #28]	; (80027c4 <ILI9341_Write_Command+0x38>)
 80027a6:	f004 ff69 	bl	800767c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ffdb 	bl	8002768 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80027b2:	2201      	movs	r2, #1
 80027b4:	2110      	movs	r1, #16
 80027b6:	4803      	ldr	r0, [pc, #12]	; (80027c4 <ILI9341_Write_Command+0x38>)
 80027b8:	f004 ff60 	bl	800767c <HAL_GPIO_WritePin>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000

080027c8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80027d2:	2201      	movs	r2, #1
 80027d4:	2140      	movs	r1, #64	; 0x40
 80027d6:	480a      	ldr	r0, [pc, #40]	; (8002800 <ILI9341_Write_Data+0x38>)
 80027d8:	f004 ff50 	bl	800767c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80027dc:	2200      	movs	r2, #0
 80027de:	2110      	movs	r1, #16
 80027e0:	4807      	ldr	r0, [pc, #28]	; (8002800 <ILI9341_Write_Data+0x38>)
 80027e2:	f004 ff4b 	bl	800767c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ffbd 	bl	8002768 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80027ee:	2201      	movs	r2, #1
 80027f0:	2110      	movs	r1, #16
 80027f2:	4803      	ldr	r0, [pc, #12]	; (8002800 <ILI9341_Write_Data+0x38>)
 80027f4:	f004 ff42 	bl	800767c <HAL_GPIO_WritePin>
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000

08002804 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4604      	mov	r4, r0
 800280c:	4608      	mov	r0, r1
 800280e:	4611      	mov	r1, r2
 8002810:	461a      	mov	r2, r3
 8002812:	4623      	mov	r3, r4
 8002814:	80fb      	strh	r3, [r7, #6]
 8002816:	4603      	mov	r3, r0
 8002818:	80bb      	strh	r3, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	807b      	strh	r3, [r7, #2]
 800281e:	4613      	mov	r3, r2
 8002820:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8002822:	202a      	movs	r0, #42	; 0x2a
 8002824:	f7ff ffb2 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	b29b      	uxth	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ffc9 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ffc4 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002840:	887b      	ldrh	r3, [r7, #2]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	b29b      	uxth	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ffbd 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800284e:	887b      	ldrh	r3, [r7, #2]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff ffb8 	bl	80027c8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002858:	202b      	movs	r0, #43	; 0x2b
 800285a:	f7ff ff97 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800285e:	88bb      	ldrh	r3, [r7, #4]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	b29b      	uxth	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ffae 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 800286c:	88bb      	ldrh	r3, [r7, #4]
 800286e:	b2db      	uxtb	r3, r3
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ffa9 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8002876:	883b      	ldrh	r3, [r7, #0]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	b29b      	uxth	r3, r3
 800287c:	b2db      	uxtb	r3, r3
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff ffa2 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002884:	883b      	ldrh	r3, [r7, #0]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff9d 	bl	80027c8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800288e:	202c      	movs	r0, #44	; 0x2c
 8002890:	f7ff ff7c 	bl	800278c <ILI9341_Write_Command>
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bd90      	pop	{r4, r7, pc}

0800289c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2120      	movs	r1, #32
 80028a4:	480a      	ldr	r0, [pc, #40]	; (80028d0 <ILI9341_Reset+0x34>)
 80028a6:	f004 fee9 	bl	800767c <HAL_GPIO_WritePin>
HAL_Delay(200);
 80028aa:	20c8      	movs	r0, #200	; 0xc8
 80028ac:	f004 fbfc 	bl	80070a8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2110      	movs	r1, #16
 80028b4:	4806      	ldr	r0, [pc, #24]	; (80028d0 <ILI9341_Reset+0x34>)
 80028b6:	f004 fee1 	bl	800767c <HAL_GPIO_WritePin>
HAL_Delay(200);
 80028ba:	20c8      	movs	r0, #200	; 0xc8
 80028bc:	f004 fbf4 	bl	80070a8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80028c0:	2201      	movs	r2, #1
 80028c2:	2120      	movs	r1, #32
 80028c4:	4802      	ldr	r0, [pc, #8]	; (80028d0 <ILI9341_Reset+0x34>)
 80028c6:	f004 fed9 	bl	800767c <HAL_GPIO_WritePin>
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000

080028d4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80028e2:	2036      	movs	r0, #54	; 0x36
 80028e4:	f7ff ff52 	bl	800278c <ILI9341_Write_Command>
HAL_Delay(1);
 80028e8:	2001      	movs	r0, #1
 80028ea:	f004 fbdd 	bl	80070a8 <HAL_Delay>
	
switch(screen_rotation) 
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d837      	bhi.n	8002964 <ILI9341_Set_Rotation+0x90>
 80028f4:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <ILI9341_Set_Rotation+0x28>)
 80028f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fa:	bf00      	nop
 80028fc:	0800290d 	.word	0x0800290d
 8002900:	08002923 	.word	0x08002923
 8002904:	08002939 	.word	0x08002939
 8002908:	0800294f 	.word	0x0800294f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 800290c:	2048      	movs	r0, #72	; 0x48
 800290e:	f7ff ff5b 	bl	80027c8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8002912:	4b17      	ldr	r3, [pc, #92]	; (8002970 <ILI9341_Set_Rotation+0x9c>)
 8002914:	22f0      	movs	r2, #240	; 0xf0
 8002916:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002918:	4b16      	ldr	r3, [pc, #88]	; (8002974 <ILI9341_Set_Rotation+0xa0>)
 800291a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800291e:	801a      	strh	r2, [r3, #0]
			break;
 8002920:	e021      	b.n	8002966 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002922:	2028      	movs	r0, #40	; 0x28
 8002924:	f7ff ff50 	bl	80027c8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <ILI9341_Set_Rotation+0x9c>)
 800292a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800292e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002930:	4b10      	ldr	r3, [pc, #64]	; (8002974 <ILI9341_Set_Rotation+0xa0>)
 8002932:	22f0      	movs	r2, #240	; 0xf0
 8002934:	801a      	strh	r2, [r3, #0]
			break;
 8002936:	e016      	b.n	8002966 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002938:	2088      	movs	r0, #136	; 0x88
 800293a:	f7ff ff45 	bl	80027c8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <ILI9341_Set_Rotation+0x9c>)
 8002940:	22f0      	movs	r2, #240	; 0xf0
 8002942:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <ILI9341_Set_Rotation+0xa0>)
 8002946:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800294a:	801a      	strh	r2, [r3, #0]
			break;
 800294c:	e00b      	b.n	8002966 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800294e:	20e8      	movs	r0, #232	; 0xe8
 8002950:	f7ff ff3a 	bl	80027c8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <ILI9341_Set_Rotation+0x9c>)
 8002956:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800295a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <ILI9341_Set_Rotation+0xa0>)
 800295e:	22f0      	movs	r2, #240	; 0xf0
 8002960:	801a      	strh	r2, [r3, #0]
			break;
 8002962:	e000      	b.n	8002966 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002964:	bf00      	nop
	}
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	2000000a 	.word	0x2000000a
 8002974:	20000008 	.word	0x20000008

08002978 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800297c:	2201      	movs	r2, #1
 800297e:	2120      	movs	r1, #32
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <ILI9341_Enable+0x14>)
 8002982:	f004 fe7b 	bl	800767c <HAL_GPIO_WritePin>
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40021000 	.word	0x40021000

08002990 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002994:	f7ff fff0 	bl	8002978 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002998:	f7ff feda 	bl	8002750 <ILI9341_SPI_Init>
ILI9341_Reset();
 800299c:	f7ff ff7e 	bl	800289c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80029a0:	2001      	movs	r0, #1
 80029a2:	f7ff fef3 	bl	800278c <ILI9341_Write_Command>
HAL_Delay(1000);
 80029a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029aa:	f004 fb7d 	bl	80070a8 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80029ae:	20cb      	movs	r0, #203	; 0xcb
 80029b0:	f7ff feec 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80029b4:	2039      	movs	r0, #57	; 0x39
 80029b6:	f7ff ff07 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80029ba:	202c      	movs	r0, #44	; 0x2c
 80029bc:	f7ff ff04 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7ff ff01 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80029c6:	2034      	movs	r0, #52	; 0x34
 80029c8:	f7ff fefe 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80029cc:	2002      	movs	r0, #2
 80029ce:	f7ff fefb 	bl	80027c8 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80029d2:	20cf      	movs	r0, #207	; 0xcf
 80029d4:	f7ff feda 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80029d8:	2000      	movs	r0, #0
 80029da:	f7ff fef5 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80029de:	20c1      	movs	r0, #193	; 0xc1
 80029e0:	f7ff fef2 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80029e4:	2030      	movs	r0, #48	; 0x30
 80029e6:	f7ff feef 	bl	80027c8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80029ea:	20e8      	movs	r0, #232	; 0xe8
 80029ec:	f7ff fece 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80029f0:	2085      	movs	r0, #133	; 0x85
 80029f2:	f7ff fee9 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7ff fee6 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80029fc:	2078      	movs	r0, #120	; 0x78
 80029fe:	f7ff fee3 	bl	80027c8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8002a02:	20ea      	movs	r0, #234	; 0xea
 8002a04:	f7ff fec2 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7ff fedd 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f7ff feda 	bl	80027c8 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002a14:	20ed      	movs	r0, #237	; 0xed
 8002a16:	f7ff feb9 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002a1a:	2064      	movs	r0, #100	; 0x64
 8002a1c:	f7ff fed4 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002a20:	2003      	movs	r0, #3
 8002a22:	f7ff fed1 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002a26:	2012      	movs	r0, #18
 8002a28:	f7ff fece 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002a2c:	2081      	movs	r0, #129	; 0x81
 8002a2e:	f7ff fecb 	bl	80027c8 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002a32:	20f7      	movs	r0, #247	; 0xf7
 8002a34:	f7ff feaa 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002a38:	2020      	movs	r0, #32
 8002a3a:	f7ff fec5 	bl	80027c8 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002a3e:	20c0      	movs	r0, #192	; 0xc0
 8002a40:	f7ff fea4 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002a44:	2023      	movs	r0, #35	; 0x23
 8002a46:	f7ff febf 	bl	80027c8 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002a4a:	20c1      	movs	r0, #193	; 0xc1
 8002a4c:	f7ff fe9e 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002a50:	2010      	movs	r0, #16
 8002a52:	f7ff feb9 	bl	80027c8 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002a56:	20c5      	movs	r0, #197	; 0xc5
 8002a58:	f7ff fe98 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002a5c:	203e      	movs	r0, #62	; 0x3e
 8002a5e:	f7ff feb3 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002a62:	2028      	movs	r0, #40	; 0x28
 8002a64:	f7ff feb0 	bl	80027c8 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002a68:	20c7      	movs	r0, #199	; 0xc7
 8002a6a:	f7ff fe8f 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8002a6e:	2086      	movs	r0, #134	; 0x86
 8002a70:	f7ff feaa 	bl	80027c8 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002a74:	2036      	movs	r0, #54	; 0x36
 8002a76:	f7ff fe89 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002a7a:	2048      	movs	r0, #72	; 0x48
 8002a7c:	f7ff fea4 	bl	80027c8 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002a80:	203a      	movs	r0, #58	; 0x3a
 8002a82:	f7ff fe83 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002a86:	2055      	movs	r0, #85	; 0x55
 8002a88:	f7ff fe9e 	bl	80027c8 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002a8c:	20b1      	movs	r0, #177	; 0xb1
 8002a8e:	f7ff fe7d 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f7ff fe98 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002a98:	2018      	movs	r0, #24
 8002a9a:	f7ff fe95 	bl	80027c8 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8002a9e:	20b6      	movs	r0, #182	; 0xb6
 8002aa0:	f7ff fe74 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002aa4:	2008      	movs	r0, #8
 8002aa6:	f7ff fe8f 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002aaa:	2082      	movs	r0, #130	; 0x82
 8002aac:	f7ff fe8c 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002ab0:	2027      	movs	r0, #39	; 0x27
 8002ab2:	f7ff fe89 	bl	80027c8 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002ab6:	20f2      	movs	r0, #242	; 0xf2
 8002ab8:	f7ff fe68 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002abc:	2000      	movs	r0, #0
 8002abe:	f7ff fe83 	bl	80027c8 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002ac2:	2026      	movs	r0, #38	; 0x26
 8002ac4:	f7ff fe62 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002ac8:	2001      	movs	r0, #1
 8002aca:	f7ff fe7d 	bl	80027c8 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002ace:	20e0      	movs	r0, #224	; 0xe0
 8002ad0:	f7ff fe5c 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002ad4:	200f      	movs	r0, #15
 8002ad6:	f7ff fe77 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002ada:	2031      	movs	r0, #49	; 0x31
 8002adc:	f7ff fe74 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002ae0:	202b      	movs	r0, #43	; 0x2b
 8002ae2:	f7ff fe71 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002ae6:	200c      	movs	r0, #12
 8002ae8:	f7ff fe6e 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002aec:	200e      	movs	r0, #14
 8002aee:	f7ff fe6b 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002af2:	2008      	movs	r0, #8
 8002af4:	f7ff fe68 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002af8:	204e      	movs	r0, #78	; 0x4e
 8002afa:	f7ff fe65 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002afe:	20f1      	movs	r0, #241	; 0xf1
 8002b00:	f7ff fe62 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8002b04:	2037      	movs	r0, #55	; 0x37
 8002b06:	f7ff fe5f 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002b0a:	2007      	movs	r0, #7
 8002b0c:	f7ff fe5c 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002b10:	2010      	movs	r0, #16
 8002b12:	f7ff fe59 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002b16:	2003      	movs	r0, #3
 8002b18:	f7ff fe56 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002b1c:	200e      	movs	r0, #14
 8002b1e:	f7ff fe53 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8002b22:	2009      	movs	r0, #9
 8002b24:	f7ff fe50 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7ff fe4d 	bl	80027c8 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002b2e:	20e1      	movs	r0, #225	; 0xe1
 8002b30:	f7ff fe2c 	bl	800278c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002b34:	2000      	movs	r0, #0
 8002b36:	f7ff fe47 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002b3a:	200e      	movs	r0, #14
 8002b3c:	f7ff fe44 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002b40:	2014      	movs	r0, #20
 8002b42:	f7ff fe41 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002b46:	2003      	movs	r0, #3
 8002b48:	f7ff fe3e 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002b4c:	2011      	movs	r0, #17
 8002b4e:	f7ff fe3b 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002b52:	2007      	movs	r0, #7
 8002b54:	f7ff fe38 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002b58:	2031      	movs	r0, #49	; 0x31
 8002b5a:	f7ff fe35 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002b5e:	20c1      	movs	r0, #193	; 0xc1
 8002b60:	f7ff fe32 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002b64:	2048      	movs	r0, #72	; 0x48
 8002b66:	f7ff fe2f 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002b6a:	2008      	movs	r0, #8
 8002b6c:	f7ff fe2c 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002b70:	200f      	movs	r0, #15
 8002b72:	f7ff fe29 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002b76:	200c      	movs	r0, #12
 8002b78:	f7ff fe26 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002b7c:	2031      	movs	r0, #49	; 0x31
 8002b7e:	f7ff fe23 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002b82:	2036      	movs	r0, #54	; 0x36
 8002b84:	f7ff fe20 	bl	80027c8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002b88:	200f      	movs	r0, #15
 8002b8a:	f7ff fe1d 	bl	80027c8 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002b8e:	2011      	movs	r0, #17
 8002b90:	f7ff fdfc 	bl	800278c <ILI9341_Write_Command>
HAL_Delay(120);
 8002b94:	2078      	movs	r0, #120	; 0x78
 8002b96:	f004 fa87 	bl	80070a8 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002b9a:	2029      	movs	r0, #41	; 0x29
 8002b9c:	f7ff fdf6 	bl	800278c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8002ba0:	2003      	movs	r0, #3
 8002ba2:	f7ff fe97 	bl	80028d4 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8002ba6:	200a      	movs	r0, #10
 8002ba8:	f004 fa7e 	bl	80070a8 <HAL_Delay>
//
}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b08c      	sub	sp, #48	; 0x30
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	80fb      	strh	r3, [r7, #6]
 8002bbc:	466b      	mov	r3, sp
 8002bbe:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bcc:	d202      	bcs.n	8002bd4 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd2:	e002      	b.n	8002bda <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002bd4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002bda:	2201      	movs	r2, #1
 8002bdc:	2140      	movs	r1, #64	; 0x40
 8002bde:	483d      	ldr	r0, [pc, #244]	; (8002cd4 <ILI9341_Draw_Colour_Burst+0x124>)
 8002be0:	f004 fd4c 	bl	800767c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2110      	movs	r1, #16
 8002be8:	483a      	ldr	r0, [pc, #232]	; (8002cd4 <ILI9341_Draw_Colour_Burst+0x124>)
 8002bea:	f004 fd47 	bl	800767c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	0a1b      	lsrs	r3, r3, #8
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002bf8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	4620      	mov	r0, r4
 8002c02:	f04f 0100 	mov.w	r1, #0
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	00cb      	lsls	r3, r1, #3
 8002c10:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c14:	00c2      	lsls	r2, r0, #3
 8002c16:	4620      	mov	r0, r4
 8002c18:	f04f 0100 	mov.w	r1, #0
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	00cb      	lsls	r3, r1, #3
 8002c26:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c2a:	00c2      	lsls	r2, r0, #3
 8002c2c:	1de3      	adds	r3, r4, #7
 8002c2e:	08db      	lsrs	r3, r3, #3
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	ebad 0d03 	sub.w	sp, sp, r3
 8002c36:	466b      	mov	r3, sp
 8002c38:	3300      	adds	r3, #0
 8002c3a:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c40:	e00e      	b.n	8002c60 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	4413      	add	r3, r2
 8002c48:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c4c:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	3301      	adds	r3, #1
 8002c52:	88fa      	ldrh	r2, [r7, #6]
 8002c54:	b2d1      	uxtb	r1, r2
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d3ec      	bcc.n	8002c42 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c82:	fb01 f202 	mul.w	r2, r1, r2
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d010      	beq.n	8002cb2 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c94:	e009      	b.n	8002caa <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002c96:	69b9      	ldr	r1, [r7, #24]
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	230a      	movs	r3, #10
 8002c9e:	480e      	ldr	r0, [pc, #56]	; (8002cd8 <ILI9341_Draw_Colour_Burst+0x128>)
 8002ca0:	f009 fa27 	bl	800c0f2 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d3f1      	bcc.n	8002c96 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002cb2:	69b9      	ldr	r1, [r7, #24]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	230a      	movs	r3, #10
 8002cba:	4807      	ldr	r0, [pc, #28]	; (8002cd8 <ILI9341_Draw_Colour_Burst+0x128>)
 8002cbc:	f009 fa19 	bl	800c0f2 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	2110      	movs	r1, #16
 8002cc4:	4803      	ldr	r0, [pc, #12]	; (8002cd4 <ILI9341_Draw_Colour_Burst+0x124>)
 8002cc6:	f004 fcd9 	bl	800767c <HAL_GPIO_WritePin>
 8002cca:	46ad      	mov	sp, r5
}
 8002ccc:	bf00      	nop
 8002cce:	3730      	adds	r7, #48	; 0x30
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	200003b4 	.word	0x200003b4

08002cdc <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <ILI9341_Fill_Screen+0x44>)
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <ILI9341_Fill_Screen+0x48>)
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f7ff fd85 	bl	8002804 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <ILI9341_Fill_Screen+0x44>)
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <ILI9341_Fill_Screen+0x48>)
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	fb03 f302 	mul.w	r3, r3, r2
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ff4c 	bl	8002bb0 <ILI9341_Draw_Colour_Burst>
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	2000000a 	.word	0x2000000a
 8002d24:	20000008 	.word	0x20000008

08002d28 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	80fb      	strh	r3, [r7, #6]
 8002d32:	460b      	mov	r3, r1
 8002d34:	80bb      	strh	r3, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002d3a:	4b5b      	ldr	r3, [pc, #364]	; (8002ea8 <ILI9341_Draw_Pixel+0x180>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	88fa      	ldrh	r2, [r7, #6]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	f080 80ac 	bcs.w	8002ea0 <ILI9341_Draw_Pixel+0x178>
 8002d48:	4b58      	ldr	r3, [pc, #352]	; (8002eac <ILI9341_Draw_Pixel+0x184>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	88ba      	ldrh	r2, [r7, #4]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	f080 80a5 	bcs.w	8002ea0 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002d56:	2200      	movs	r2, #0
 8002d58:	2140      	movs	r1, #64	; 0x40
 8002d5a:	4855      	ldr	r0, [pc, #340]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002d5c:	f004 fc8e 	bl	800767c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002d60:	2200      	movs	r2, #0
 8002d62:	2110      	movs	r1, #16
 8002d64:	4852      	ldr	r0, [pc, #328]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002d66:	f004 fc89 	bl	800767c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002d6a:	202a      	movs	r0, #42	; 0x2a
 8002d6c:	f7ff fcfc 	bl	8002768 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002d70:	2201      	movs	r2, #1
 8002d72:	2140      	movs	r1, #64	; 0x40
 8002d74:	484e      	ldr	r0, [pc, #312]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002d76:	f004 fc81 	bl	800767c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	2110      	movs	r1, #16
 8002d7e:	484c      	ldr	r0, [pc, #304]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002d80:	f004 fc7c 	bl	800767c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002d84:	2200      	movs	r2, #0
 8002d86:	2110      	movs	r1, #16
 8002d88:	4849      	ldr	r0, [pc, #292]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002d8a:	f004 fc77 	bl	800767c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	753b      	strb	r3, [r7, #20]
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	757b      	strb	r3, [r7, #21]
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	3301      	adds	r3, #1
 8002da2:	121b      	asrs	r3, r3, #8
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	75bb      	strb	r3, [r7, #22]
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	3301      	adds	r3, #1
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002db2:	f107 0114 	add.w	r1, r7, #20
 8002db6:	2301      	movs	r3, #1
 8002db8:	2204      	movs	r2, #4
 8002dba:	483e      	ldr	r0, [pc, #248]	; (8002eb4 <ILI9341_Draw_Pixel+0x18c>)
 8002dbc:	f009 f999 	bl	800c0f2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	2110      	movs	r1, #16
 8002dc4:	483a      	ldr	r0, [pc, #232]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002dc6:	f004 fc59 	bl	800767c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2140      	movs	r1, #64	; 0x40
 8002dce:	4838      	ldr	r0, [pc, #224]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002dd0:	f004 fc54 	bl	800767c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2110      	movs	r1, #16
 8002dd8:	4835      	ldr	r0, [pc, #212]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002dda:	f004 fc4f 	bl	800767c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002dde:	202b      	movs	r0, #43	; 0x2b
 8002de0:	f7ff fcc2 	bl	8002768 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002de4:	2201      	movs	r2, #1
 8002de6:	2140      	movs	r1, #64	; 0x40
 8002de8:	4831      	ldr	r0, [pc, #196]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002dea:	f004 fc47 	bl	800767c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002dee:	2201      	movs	r2, #1
 8002df0:	2110      	movs	r1, #16
 8002df2:	482f      	ldr	r0, [pc, #188]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002df4:	f004 fc42 	bl	800767c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2110      	movs	r1, #16
 8002dfc:	482c      	ldr	r0, [pc, #176]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002dfe:	f004 fc3d 	bl	800767c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002e02:	88bb      	ldrh	r3, [r7, #4]
 8002e04:	0a1b      	lsrs	r3, r3, #8
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	743b      	strb	r3, [r7, #16]
 8002e0c:	88bb      	ldrh	r3, [r7, #4]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	747b      	strb	r3, [r7, #17]
 8002e12:	88bb      	ldrh	r3, [r7, #4]
 8002e14:	3301      	adds	r3, #1
 8002e16:	121b      	asrs	r3, r3, #8
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	74bb      	strb	r3, [r7, #18]
 8002e1c:	88bb      	ldrh	r3, [r7, #4]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	3301      	adds	r3, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002e26:	f107 0110 	add.w	r1, r7, #16
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	4821      	ldr	r0, [pc, #132]	; (8002eb4 <ILI9341_Draw_Pixel+0x18c>)
 8002e30:	f009 f95f 	bl	800c0f2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002e34:	2201      	movs	r2, #1
 8002e36:	2110      	movs	r1, #16
 8002e38:	481d      	ldr	r0, [pc, #116]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002e3a:	f004 fc1f 	bl	800767c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2140      	movs	r1, #64	; 0x40
 8002e42:	481b      	ldr	r0, [pc, #108]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002e44:	f004 fc1a 	bl	800767c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2110      	movs	r1, #16
 8002e4c:	4818      	ldr	r0, [pc, #96]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002e4e:	f004 fc15 	bl	800767c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002e52:	202c      	movs	r0, #44	; 0x2c
 8002e54:	f7ff fc88 	bl	8002768 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002e58:	2201      	movs	r2, #1
 8002e5a:	2140      	movs	r1, #64	; 0x40
 8002e5c:	4814      	ldr	r0, [pc, #80]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002e5e:	f004 fc0d 	bl	800767c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002e62:	2201      	movs	r2, #1
 8002e64:	2110      	movs	r1, #16
 8002e66:	4812      	ldr	r0, [pc, #72]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002e68:	f004 fc08 	bl	800767c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2110      	movs	r1, #16
 8002e70:	480f      	ldr	r0, [pc, #60]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002e72:	f004 fc03 	bl	800767c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002e76:	887b      	ldrh	r3, [r7, #2]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	733b      	strb	r3, [r7, #12]
 8002e80:	887b      	ldrh	r3, [r7, #2]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002e86:	f107 010c 	add.w	r1, r7, #12
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	4809      	ldr	r0, [pc, #36]	; (8002eb4 <ILI9341_Draw_Pixel+0x18c>)
 8002e90:	f009 f92f 	bl	800c0f2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002e94:	2201      	movs	r2, #1
 8002e96:	2110      	movs	r1, #16
 8002e98:	4805      	ldr	r0, [pc, #20]	; (8002eb0 <ILI9341_Draw_Pixel+0x188>)
 8002e9a:	f004 fbef 	bl	800767c <HAL_GPIO_WritePin>
 8002e9e:	e000      	b.n	8002ea2 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002ea0:	bf00      	nop
	
}
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	2000000a 	.word	0x2000000a
 8002eac:	20000008 	.word	0x20000008
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	200003b4 	.word	0x200003b4

08002eb8 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	4608      	mov	r0, r1
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4623      	mov	r3, r4
 8002ec8:	80fb      	strh	r3, [r7, #6]
 8002eca:	4603      	mov	r3, r0
 8002ecc:	80bb      	strh	r3, [r7, #4]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	807b      	strh	r3, [r7, #2]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002ed6:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <ILI9341_Draw_Rectangle+0xb0>)
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	88fa      	ldrh	r2, [r7, #6]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d23d      	bcs.n	8002f5e <ILI9341_Draw_Rectangle+0xa6>
 8002ee2:	4b22      	ldr	r3, [pc, #136]	; (8002f6c <ILI9341_Draw_Rectangle+0xb4>)
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	88ba      	ldrh	r2, [r7, #4]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d237      	bcs.n	8002f5e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002eee:	88fa      	ldrh	r2, [r7, #6]
 8002ef0:	887b      	ldrh	r3, [r7, #2]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <ILI9341_Draw_Rectangle+0xb0>)
 8002ef6:	8812      	ldrh	r2, [r2, #0]
 8002ef8:	b292      	uxth	r2, r2
 8002efa:	4293      	cmp	r3, r2
 8002efc:	dd05      	ble.n	8002f0a <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002efe:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <ILI9341_Draw_Rectangle+0xb0>)
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002f0a:	88ba      	ldrh	r2, [r7, #4]
 8002f0c:	883b      	ldrh	r3, [r7, #0]
 8002f0e:	4413      	add	r3, r2
 8002f10:	4a16      	ldr	r2, [pc, #88]	; (8002f6c <ILI9341_Draw_Rectangle+0xb4>)
 8002f12:	8812      	ldrh	r2, [r2, #0]
 8002f14:	b292      	uxth	r2, r2
 8002f16:	4293      	cmp	r3, r2
 8002f18:	dd05      	ble.n	8002f26 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002f1a:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <ILI9341_Draw_Rectangle+0xb4>)
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	88bb      	ldrh	r3, [r7, #4]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002f26:	88fa      	ldrh	r2, [r7, #6]
 8002f28:	887b      	ldrh	r3, [r7, #2]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29c      	uxth	r4, r3
 8002f32:	88ba      	ldrh	r2, [r7, #4]
 8002f34:	883b      	ldrh	r3, [r7, #0]
 8002f36:	4413      	add	r3, r2
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	88b9      	ldrh	r1, [r7, #4]
 8002f40:	88f8      	ldrh	r0, [r7, #6]
 8002f42:	4622      	mov	r2, r4
 8002f44:	f7ff fc5e 	bl	8002804 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002f48:	883b      	ldrh	r3, [r7, #0]
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	fb02 f303 	mul.w	r3, r2, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	8b3b      	ldrh	r3, [r7, #24]
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fe2a 	bl	8002bb0 <ILI9341_Draw_Colour_Burst>
 8002f5c:	e000      	b.n	8002f60 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002f5e:	bf00      	nop
}
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd90      	pop	{r4, r7, pc}
 8002f66:	bf00      	nop
 8002f68:	2000000a 	.word	0x2000000a
 8002f6c:	20000008 	.word	0x20000008

08002f70 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4604      	mov	r4, r0
 8002f78:	4608      	mov	r0, r1
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4623      	mov	r3, r4
 8002f80:	80fb      	strh	r3, [r7, #6]
 8002f82:	4603      	mov	r3, r0
 8002f84:	80bb      	strh	r3, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	807b      	strh	r3, [r7, #2]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002f8e:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <ILI9341_Draw_Horizontal_Line+0x80>)
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	88fa      	ldrh	r2, [r7, #6]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d225      	bcs.n	8002fe6 <ILI9341_Draw_Horizontal_Line+0x76>
 8002f9a:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <ILI9341_Draw_Horizontal_Line+0x84>)
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	88ba      	ldrh	r2, [r7, #4]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d21f      	bcs.n	8002fe6 <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 8002fa6:	88fa      	ldrh	r2, [r7, #6]
 8002fa8:	887b      	ldrh	r3, [r7, #2]
 8002faa:	4413      	add	r3, r2
 8002fac:	4a10      	ldr	r2, [pc, #64]	; (8002ff0 <ILI9341_Draw_Horizontal_Line+0x80>)
 8002fae:	8812      	ldrh	r2, [r2, #0]
 8002fb0:	b292      	uxth	r2, r2
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	dd05      	ble.n	8002fc2 <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 8002fb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <ILI9341_Draw_Horizontal_Line+0x80>)
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	887b      	ldrh	r3, [r7, #2]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	88bb      	ldrh	r3, [r7, #4]
 8002fd0:	88b9      	ldrh	r1, [r7, #4]
 8002fd2:	88f8      	ldrh	r0, [r7, #6]
 8002fd4:	f7ff fc16 	bl	8002804 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 8002fd8:	887a      	ldrh	r2, [r7, #2]
 8002fda:	883b      	ldrh	r3, [r7, #0]
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fde6 	bl	8002bb0 <ILI9341_Draw_Colour_Burst>
 8002fe4:	e000      	b.n	8002fe8 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002fe6:	bf00      	nop
}
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd90      	pop	{r4, r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	2000000a 	.word	0x2000000a
 8002ff4:	20000008 	.word	0x20000008

08002ff8 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8002ff8:	b590      	push	{r4, r7, lr}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4604      	mov	r4, r0
 8003000:	4608      	mov	r0, r1
 8003002:	4611      	mov	r1, r2
 8003004:	461a      	mov	r2, r3
 8003006:	4623      	mov	r3, r4
 8003008:	80fb      	strh	r3, [r7, #6]
 800300a:	4603      	mov	r3, r0
 800300c:	80bb      	strh	r3, [r7, #4]
 800300e:	460b      	mov	r3, r1
 8003010:	807b      	strh	r3, [r7, #2]
 8003012:	4613      	mov	r3, r2
 8003014:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003016:	4b18      	ldr	r3, [pc, #96]	; (8003078 <ILI9341_Draw_Vertical_Line+0x80>)
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	b29b      	uxth	r3, r3
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	429a      	cmp	r2, r3
 8003020:	d225      	bcs.n	800306e <ILI9341_Draw_Vertical_Line+0x76>
 8003022:	4b16      	ldr	r3, [pc, #88]	; (800307c <ILI9341_Draw_Vertical_Line+0x84>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	88ba      	ldrh	r2, [r7, #4]
 800302a:	429a      	cmp	r2, r3
 800302c:	d21f      	bcs.n	800306e <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 800302e:	88ba      	ldrh	r2, [r7, #4]
 8003030:	887b      	ldrh	r3, [r7, #2]
 8003032:	4413      	add	r3, r2
 8003034:	4a11      	ldr	r2, [pc, #68]	; (800307c <ILI9341_Draw_Vertical_Line+0x84>)
 8003036:	8812      	ldrh	r2, [r2, #0]
 8003038:	b292      	uxth	r2, r2
 800303a:	4293      	cmp	r3, r2
 800303c:	dd05      	ble.n	800304a <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 800303e:	4b0f      	ldr	r3, [pc, #60]	; (800307c <ILI9341_Draw_Vertical_Line+0x84>)
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	b29a      	uxth	r2, r3
 8003044:	88bb      	ldrh	r3, [r7, #4]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 800304a:	88ba      	ldrh	r2, [r7, #4]
 800304c:	887b      	ldrh	r3, [r7, #2]
 800304e:	4413      	add	r3, r2
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29b      	uxth	r3, r3
 8003056:	88fa      	ldrh	r2, [r7, #6]
 8003058:	88b9      	ldrh	r1, [r7, #4]
 800305a:	88f8      	ldrh	r0, [r7, #6]
 800305c:	f7ff fbd2 	bl	8002804 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 8003060:	887a      	ldrh	r2, [r7, #2]
 8003062:	883b      	ldrh	r3, [r7, #0]
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fda2 	bl	8002bb0 <ILI9341_Draw_Colour_Burst>
 800306c:	e000      	b.n	8003070 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800306e:	bf00      	nop
}
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	bd90      	pop	{r4, r7, pc}
 8003076:	bf00      	nop
 8003078:	2000000a 	.word	0x2000000a
 800307c:	20000008 	.word	0x20000008

08003080 <menu>:
MENU_ITEM(Menu_1_1_4, Menu_1_1_1, Menu_1_1_3, NULL_MENU, NULL_MENU, print_all_menu_1_1_menus, toggle_green_led, "Menu-1.1.4");


// -----------------------------------------------------------------------
void menu()
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
	// Виводить номер меню на якому стоїть стрілка
	Menu_SetGenericWriteCallback(Generic_Write);  // передача показника на Generic_Write функцію  point in Menu_SetGenericWriteCallback
 8003086:	4844      	ldr	r0, [pc, #272]	; (8003198 <menu+0x118>)
 8003088:	f001 f96a 	bl	8004360 <Menu_SetGenericWriteCallback>
	Menu_Navigate(&Menu_1);
 800308c:	4843      	ldr	r0, [pc, #268]	; (800319c <menu+0x11c>)
 800308e:	f001 f939 	bl	8004304 <Menu_Navigate>

	while (1)
	{
		uint8_t pressed_key = getPressKey();
 8003092:	f001 f86f 	bl	8004174 <getPressKey>
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]

		if (pressed_key != BUTTON_NOTHING && !flagPressed)
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	2bff      	cmp	r3, #255	; 0xff
 800309e:	d06e      	beq.n	800317e <menu+0xfe>
 80030a0:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <menu+0x120>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	f083 0301 	eor.w	r3, r3, #1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d067      	beq.n	800317e <menu+0xfe>
		{
			flagPressed = true;
 80030ae:	4b3c      	ldr	r3, [pc, #240]	; (80031a0 <menu+0x120>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]
			switch(pressed_key)
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d85f      	bhi.n	800317a <menu+0xfa>
 80030ba:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <menu+0x40>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	080030d5 	.word	0x080030d5
 80030c4:	080030e5 	.word	0x080030e5
 80030c8:	08003125 	.word	0x08003125
 80030cc:	08003165 	.word	0x08003165
 80030d0:	08003175 	.word	0x08003175
			{
				case BUTTON_LEFT:
					Menu_Navigate(MENU_PARENT);
 80030d4:	f001 f90a 	bl	80042ec <Menu_GetCurrentMenu>
 80030d8:	4603      	mov	r3, r0
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4618      	mov	r0, r3
 80030de:	f001 f911 	bl	8004304 <Menu_Navigate>
					break;
 80030e2:	e04b      	b.n	800317c <menu+0xfc>

				case BUTTON_UP:
					menu_level_0_position_pointer--;
 80030e4:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <menu+0x124>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <menu+0x124>)
 80030ee:	701a      	strb	r2, [r3, #0]
					menu_level_1_A_position_pointer--;
 80030f0:	4b2d      	ldr	r3, [pc, #180]	; (80031a8 <menu+0x128>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	4b2b      	ldr	r3, [pc, #172]	; (80031a8 <menu+0x128>)
 80030fa:	701a      	strb	r2, [r3, #0]
					menu_level_1_B_position_pointer--;
 80030fc:	4b2b      	ldr	r3, [pc, #172]	; (80031ac <menu+0x12c>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	3b01      	subs	r3, #1
 8003102:	b2da      	uxtb	r2, r3
 8003104:	4b29      	ldr	r3, [pc, #164]	; (80031ac <menu+0x12c>)
 8003106:	701a      	strb	r2, [r3, #0]
					menu_level_1_C_position_pointer--;
 8003108:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <menu+0x130>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	3b01      	subs	r3, #1
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b27      	ldr	r3, [pc, #156]	; (80031b0 <menu+0x130>)
 8003112:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_PREVIOUS);
 8003114:	f001 f8ea 	bl	80042ec <Menu_GetCurrentMenu>
 8003118:	4603      	mov	r3, r0
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4618      	mov	r0, r3
 800311e:	f001 f8f1 	bl	8004304 <Menu_Navigate>
					break;
 8003122:	e02b      	b.n	800317c <menu+0xfc>

				case BUTTON_DOWN:
					menu_level_0_position_pointer++;
 8003124:	4b1f      	ldr	r3, [pc, #124]	; (80031a4 <menu+0x124>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	3301      	adds	r3, #1
 800312a:	b2da      	uxtb	r2, r3
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <menu+0x124>)
 800312e:	701a      	strb	r2, [r3, #0]
					menu_level_1_A_position_pointer++;
 8003130:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <menu+0x128>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	b2da      	uxtb	r2, r3
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <menu+0x128>)
 800313a:	701a      	strb	r2, [r3, #0]
					menu_level_1_B_position_pointer++;
 800313c:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <menu+0x12c>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	3301      	adds	r3, #1
 8003142:	b2da      	uxtb	r2, r3
 8003144:	4b19      	ldr	r3, [pc, #100]	; (80031ac <menu+0x12c>)
 8003146:	701a      	strb	r2, [r3, #0]
					menu_level_1_C_position_pointer++;
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <menu+0x130>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	b2da      	uxtb	r2, r3
 8003150:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <menu+0x130>)
 8003152:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_NEXT);
 8003154:	f001 f8ca 	bl	80042ec <Menu_GetCurrentMenu>
 8003158:	4603      	mov	r3, r0
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f001 f8d1 	bl	8004304 <Menu_Navigate>
					break;
 8003162:	e00b      	b.n	800317c <menu+0xfc>

				case BUTTON_RIGHT:
					Menu_Navigate(MENU_CHILD);
 8003164:	f001 f8c2 	bl	80042ec <Menu_GetCurrentMenu>
 8003168:	4603      	mov	r3, r0
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4618      	mov	r0, r3
 800316e:	f001 f8c9 	bl	8004304 <Menu_Navigate>
					break;
 8003172:	e003      	b.n	800317c <menu+0xfc>

				case BUTTON_SELECT:
					Menu_EnterCurrentItem();
 8003174:	f001 f908 	bl	8004388 <Menu_EnterCurrentItem>
					break;
 8003178:	e000      	b.n	800317c <menu+0xfc>

			 default:
			  break;
 800317a:	bf00      	nop
			switch(pressed_key)
 800317c:	e00b      	b.n	8003196 <menu+0x116>
			}
	   }
	   else if (getPressKey() == BUTTON_NOTHING && flagPressed)
 800317e:	f000 fff9 	bl	8004174 <getPressKey>
 8003182:	4603      	mov	r3, r0
 8003184:	2bff      	cmp	r3, #255	; 0xff
 8003186:	d184      	bne.n	8003092 <menu+0x12>
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <menu+0x120>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d080      	beq.n	8003092 <menu+0x12>
	   {
		   flagPressed = false;
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <menu+0x120>)
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]
	{
 8003196:	e77c      	b.n	8003092 <menu+0x12>
 8003198:	080042a5 	.word	0x080042a5
 800319c:	08013cb4 	.word	0x08013cb4
 80031a0:	20000328 	.word	0x20000328
 80031a4:	20000018 	.word	0x20000018
 80031a8:	20000019 	.word	0x20000019
 80031ac:	2000001a 	.word	0x2000001a
 80031b0:	2000001b 	.word	0x2000001b

080031b4 <print_all_top_menu>:
// -----------------------------------------------------------------------
/*
 * Print top menu
 */
void print_all_top_menu(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af02      	add	r7, sp, #8
	menu_level_1_A = false;
 80031ba:	4b2c      	ldr	r3, [pc, #176]	; (800326c <print_all_top_menu+0xb8>)
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
	menu_level_1_B = false;
 80031c0:	4b2b      	ldr	r3, [pc, #172]	; (8003270 <print_all_top_menu+0xbc>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]
	menu_level_1_C = false;
 80031c6:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <print_all_top_menu+0xc0>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]

	// For print all items menu one time
	if(menu_level_0 == false)
 80031cc:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <print_all_top_menu+0xc4>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	f083 0301 	eor.w	r3, r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d03e      	beq.n	8003258 <print_all_top_menu+0xa4>
	{
		clean_all_lines_of_menu ();
 80031da:	f000 fa33 	bl	8003644 <clean_all_lines_of_menu>

		ILI9341_Draw_Text(main_menus[0], 30, 90, WHITE, 2, BLACK);
 80031de:	2300      	movs	r3, #0
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	2302      	movs	r3, #2
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031ea:	225a      	movs	r2, #90	; 0x5a
 80031ec:	211e      	movs	r1, #30
 80031ee:	4823      	ldr	r0, [pc, #140]	; (800327c <print_all_top_menu+0xc8>)
 80031f0:	f7ff fa80 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(main_menus[1], 30, 110, WHITE, 2, BLACK);
 80031f4:	2300      	movs	r3, #0
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	2302      	movs	r3, #2
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003200:	226e      	movs	r2, #110	; 0x6e
 8003202:	211e      	movs	r1, #30
 8003204:	481e      	ldr	r0, [pc, #120]	; (8003280 <print_all_top_menu+0xcc>)
 8003206:	f7ff fa75 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(main_menus[2], 30, 130, WHITE, 2, BLACK);
 800320a:	2300      	movs	r3, #0
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	2302      	movs	r3, #2
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003216:	2282      	movs	r2, #130	; 0x82
 8003218:	211e      	movs	r1, #30
 800321a:	481a      	ldr	r0, [pc, #104]	; (8003284 <print_all_top_menu+0xd0>)
 800321c:	f7ff fa6a 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(main_menus[3], 30, 150, WHITE, 2, BLACK);
 8003220:	2300      	movs	r3, #0
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	2302      	movs	r3, #2
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800322c:	2296      	movs	r2, #150	; 0x96
 800322e:	211e      	movs	r1, #30
 8003230:	4815      	ldr	r0, [pc, #84]	; (8003288 <print_all_top_menu+0xd4>)
 8003232:	f7ff fa5f 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(main_menus[4], 30, 170, WHITE, 2, BLACK);
 8003236:	2300      	movs	r3, #0
 8003238:	9301      	str	r3, [sp, #4]
 800323a:	2302      	movs	r3, #2
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003242:	22aa      	movs	r2, #170	; 0xaa
 8003244:	211e      	movs	r1, #30
 8003246:	4811      	ldr	r0, [pc, #68]	; (800328c <print_all_top_menu+0xd8>)
 8003248:	f7ff fa54 	bl	80026f4 <ILI9341_Draw_Text>

		menu_level_0 = true;					// Trigger variable
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <print_all_top_menu+0xc4>)
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
		menu_level_0_position_pointer = 1;		// Pointers on item menu always show on first item menu.
 8003252:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <print_all_top_menu+0xdc>)
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
	}

	// Clear all pointers on menu
	clearn_all_pointers_on_menu();
 8003258:	f000 fa1a 	bl	8003690 <clearn_all_pointers_on_menu>
	show_pointer_on_menu_item(&menu_level_0_position_pointer, 5);
 800325c:	2105      	movs	r1, #5
 800325e:	480c      	ldr	r0, [pc, #48]	; (8003290 <print_all_top_menu+0xdc>)
 8003260:	f000 fa3c 	bl	80036dc <show_pointer_on_menu_item>
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	2000032a 	.word	0x2000032a
 8003270:	2000032b 	.word	0x2000032b
 8003274:	2000032c 	.word	0x2000032c
 8003278:	20000329 	.word	0x20000329
 800327c:	20000020 	.word	0x20000020
 8003280:	20000034 	.word	0x20000034
 8003284:	20000048 	.word	0x20000048
 8003288:	2000005c 	.word	0x2000005c
 800328c:	20000070 	.word	0x20000070
 8003290:	20000018 	.word	0x20000018

08003294 <print_all_menu_level_1_a_communication>:
// -----------------------------------------------------------------------
void print_all_menu_level_1_a_communication(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af02      	add	r7, sp, #8
	menu_level_0 = false;
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <print_all_menu_level_1_a_communication+0xa0>)
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
	menu_level_1_B = false;
 80032a0:	4b25      	ldr	r3, [pc, #148]	; (8003338 <print_all_menu_level_1_a_communication+0xa4>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
	menu_level_1_C = false;
 80032a6:	4b25      	ldr	r3, [pc, #148]	; (800333c <print_all_menu_level_1_a_communication+0xa8>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]

	// Clear all menu place
	// For print all items menu one time
	if(menu_level_1_A == false)
 80032ac:	4b24      	ldr	r3, [pc, #144]	; (8003340 <print_all_menu_level_1_a_communication+0xac>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	f083 0301 	eor.w	r3, r3, #1
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d033      	beq.n	8003322 <print_all_menu_level_1_a_communication+0x8e>
	{
		clean_all_lines_of_menu ();
 80032ba:	f000 f9c3 	bl	8003644 <clean_all_lines_of_menu>

		ILI9341_Draw_Text(menu_level_1_a_str[0], 30, 90, WHITE, 2, BLACK);
 80032be:	2300      	movs	r3, #0
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	2302      	movs	r3, #2
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032ca:	225a      	movs	r2, #90	; 0x5a
 80032cc:	211e      	movs	r1, #30
 80032ce:	481d      	ldr	r0, [pc, #116]	; (8003344 <print_all_menu_level_1_a_communication+0xb0>)
 80032d0:	f7ff fa10 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(menu_level_1_a_str[1], 30, 110, WHITE, 2, BLACK);
 80032d4:	2300      	movs	r3, #0
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	2302      	movs	r3, #2
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032e0:	226e      	movs	r2, #110	; 0x6e
 80032e2:	211e      	movs	r1, #30
 80032e4:	4818      	ldr	r0, [pc, #96]	; (8003348 <print_all_menu_level_1_a_communication+0xb4>)
 80032e6:	f7ff fa05 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(menu_level_1_a_str[2], 30, 130, WHITE, 2, BLACK);
 80032ea:	2300      	movs	r3, #0
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	2302      	movs	r3, #2
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032f6:	2282      	movs	r2, #130	; 0x82
 80032f8:	211e      	movs	r1, #30
 80032fa:	4814      	ldr	r0, [pc, #80]	; (800334c <print_all_menu_level_1_a_communication+0xb8>)
 80032fc:	f7ff f9fa 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(menu_level_1_a_str[3], 30, 150, WHITE, 2, BLACK);
 8003300:	2300      	movs	r3, #0
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	2302      	movs	r3, #2
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800330c:	2296      	movs	r2, #150	; 0x96
 800330e:	211e      	movs	r1, #30
 8003310:	480f      	ldr	r0, [pc, #60]	; (8003350 <print_all_menu_level_1_a_communication+0xbc>)
 8003312:	f7ff f9ef 	bl	80026f4 <ILI9341_Draw_Text>

		menu_level_1_A_position_pointer = 1;
 8003316:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <print_all_menu_level_1_a_communication+0xc0>)
 8003318:	2201      	movs	r2, #1
 800331a:	701a      	strb	r2, [r3, #0]
		menu_level_1_A = true;
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <print_all_menu_level_1_a_communication+0xac>)
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
	}

	// Clear all pointers on menu
	clearn_all_pointers_on_menu();
 8003322:	f000 f9b5 	bl	8003690 <clearn_all_pointers_on_menu>
	show_pointer_on_menu_item(&menu_level_1_A_position_pointer, 4);
 8003326:	2104      	movs	r1, #4
 8003328:	480a      	ldr	r0, [pc, #40]	; (8003354 <print_all_menu_level_1_a_communication+0xc0>)
 800332a:	f000 f9d7 	bl	80036dc <show_pointer_on_menu_item>
}
 800332e:	bf00      	nop
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000329 	.word	0x20000329
 8003338:	2000032b 	.word	0x2000032b
 800333c:	2000032c 	.word	0x2000032c
 8003340:	2000032a 	.word	0x2000032a
 8003344:	20000084 	.word	0x20000084
 8003348:	20000098 	.word	0x20000098
 800334c:	200000ac 	.word	0x200000ac
 8003350:	200000c0 	.word	0x200000c0
 8003354:	20000019 	.word	0x20000019

08003358 <print_all_menu_level_1_b_sensors>:
// -----------------------------------------------------------------------
void print_all_menu_level_1_b_sensors(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af02      	add	r7, sp, #8

	menu_level_0 = false;
 800335e:	4b38      	ldr	r3, [pc, #224]	; (8003440 <print_all_menu_level_1_b_sensors+0xe8>)
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
	menu_level_1_A = false;
 8003364:	4b37      	ldr	r3, [pc, #220]	; (8003444 <print_all_menu_level_1_b_sensors+0xec>)
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
	menu_level_1_C = false;
 800336a:	4b37      	ldr	r3, [pc, #220]	; (8003448 <print_all_menu_level_1_b_sensors+0xf0>)
 800336c:	2200      	movs	r2, #0
 800336e:	701a      	strb	r2, [r3, #0]

	// For print all items menu one time
	if(menu_level_1_B == false)
 8003370:	4b36      	ldr	r3, [pc, #216]	; (800344c <print_all_menu_level_1_b_sensors+0xf4>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	f083 0301 	eor.w	r3, r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d056      	beq.n	800342c <print_all_menu_level_1_b_sensors+0xd4>
	{
		clean_all_lines_of_menu ();
 800337e:	f000 f961 	bl	8003644 <clean_all_lines_of_menu>

		ILI9341_Draw_Text(menu_level_1_b_str[0], 30, 90, WHITE, 2, BLACK);
 8003382:	2300      	movs	r3, #0
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	2302      	movs	r3, #2
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800338e:	225a      	movs	r2, #90	; 0x5a
 8003390:	211e      	movs	r1, #30
 8003392:	482f      	ldr	r0, [pc, #188]	; (8003450 <print_all_menu_level_1_b_sensors+0xf8>)
 8003394:	f7ff f9ae 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(menu_level_1_b_str[1], 30, 110, WHITE, 2, BLACK);
 8003398:	2300      	movs	r3, #0
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	2302      	movs	r3, #2
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033a4:	226e      	movs	r2, #110	; 0x6e
 80033a6:	211e      	movs	r1, #30
 80033a8:	482a      	ldr	r0, [pc, #168]	; (8003454 <print_all_menu_level_1_b_sensors+0xfc>)
 80033aa:	f7ff f9a3 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(menu_level_1_b_str[2], 30, 130, WHITE, 2, BLACK);
 80033ae:	2300      	movs	r3, #0
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	2302      	movs	r3, #2
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033ba:	2282      	movs	r2, #130	; 0x82
 80033bc:	211e      	movs	r1, #30
 80033be:	4826      	ldr	r0, [pc, #152]	; (8003458 <print_all_menu_level_1_b_sensors+0x100>)
 80033c0:	f7ff f998 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(menu_level_1_b_str[3], 30, 150, WHITE, 2, BLACK);
 80033c4:	2300      	movs	r3, #0
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	2302      	movs	r3, #2
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033d0:	2296      	movs	r2, #150	; 0x96
 80033d2:	211e      	movs	r1, #30
 80033d4:	4821      	ldr	r0, [pc, #132]	; (800345c <print_all_menu_level_1_b_sensors+0x104>)
 80033d6:	f7ff f98d 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(menu_level_1_b_str[4], 30, 170, WHITE, 2, BLACK);
 80033da:	2300      	movs	r3, #0
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	2302      	movs	r3, #2
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033e6:	22aa      	movs	r2, #170	; 0xaa
 80033e8:	211e      	movs	r1, #30
 80033ea:	481d      	ldr	r0, [pc, #116]	; (8003460 <print_all_menu_level_1_b_sensors+0x108>)
 80033ec:	f7ff f982 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(menu_level_1_b_str[5], 30, 190, WHITE, 2, BLACK);
 80033f0:	2300      	movs	r3, #0
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	2302      	movs	r3, #2
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033fc:	22be      	movs	r2, #190	; 0xbe
 80033fe:	211e      	movs	r1, #30
 8003400:	4818      	ldr	r0, [pc, #96]	; (8003464 <print_all_menu_level_1_b_sensors+0x10c>)
 8003402:	f7ff f977 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(menu_level_1_b_str[6], 30, 210, YELLOW, 2, BLACK);
 8003406:	2300      	movs	r3, #0
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	2302      	movs	r3, #2
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003412:	22d2      	movs	r2, #210	; 0xd2
 8003414:	211e      	movs	r1, #30
 8003416:	4814      	ldr	r0, [pc, #80]	; (8003468 <print_all_menu_level_1_b_sensors+0x110>)
 8003418:	f7ff f96c 	bl	80026f4 <ILI9341_Draw_Text>

		// 1. Show ready status  for all sensors
		print_status_resdy_all_sensors_on_lcd();
 800341c:	f000 f9e4 	bl	80037e8 <print_status_resdy_all_sensors_on_lcd>

		menu_level_1_B_position_pointer = 1;
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <print_all_menu_level_1_b_sensors+0x114>)
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
		menu_level_1_B = true;
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <print_all_menu_level_1_b_sensors+0xf4>)
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
	}

	// Clear all pointers on menu
	clearn_all_pointers_on_menu();
 800342c:	f000 f930 	bl	8003690 <clearn_all_pointers_on_menu>
	show_pointer_on_menu_item(&menu_level_1_B_position_pointer, 7);
 8003430:	2107      	movs	r1, #7
 8003432:	480e      	ldr	r0, [pc, #56]	; (800346c <print_all_menu_level_1_b_sensors+0x114>)
 8003434:	f000 f952 	bl	80036dc <show_pointer_on_menu_item>


}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000329 	.word	0x20000329
 8003444:	2000032a 	.word	0x2000032a
 8003448:	2000032c 	.word	0x2000032c
 800344c:	2000032b 	.word	0x2000032b
 8003450:	200000d4 	.word	0x200000d4
 8003454:	200000e8 	.word	0x200000e8
 8003458:	200000fc 	.word	0x200000fc
 800345c:	20000110 	.word	0x20000110
 8003460:	20000124 	.word	0x20000124
 8003464:	20000138 	.word	0x20000138
 8003468:	2000014c 	.word	0x2000014c
 800346c:	2000001a 	.word	0x2000001a

08003470 <print_all_menu_level_1_c_sensors>:
// -----------------------------------------------------------------------
void print_all_menu_level_1_c_sensors(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af02      	add	r7, sp, #8

	menu_level_0 = false;
 8003476:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <print_all_menu_level_1_c_sensors+0x74>)
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
	menu_level_1_A = false;
 800347c:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <print_all_menu_level_1_c_sensors+0x78>)
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
	menu_level_1_B = false;
 8003482:	4b1a      	ldr	r3, [pc, #104]	; (80034ec <print_all_menu_level_1_c_sensors+0x7c>)
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]

	// For print all items menu one time
	if(menu_level_1_C == false)
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <print_all_menu_level_1_c_sensors+0x80>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	f083 0301 	eor.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01d      	beq.n	80034d2 <print_all_menu_level_1_c_sensors+0x62>
	{
		clean_all_lines_of_menu ();
 8003496:	f000 f8d5 	bl	8003644 <clean_all_lines_of_menu>

		ILI9341_Draw_Text(menu_level_1_c_str[0], 30, 90, WHITE, 2, BLACK);
 800349a:	2300      	movs	r3, #0
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	2302      	movs	r3, #2
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034a6:	225a      	movs	r2, #90	; 0x5a
 80034a8:	211e      	movs	r1, #30
 80034aa:	4812      	ldr	r0, [pc, #72]	; (80034f4 <print_all_menu_level_1_c_sensors+0x84>)
 80034ac:	f7ff f922 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(menu_level_1_c_str[1], 30, 110, WHITE, 2, BLACK);
 80034b0:	2300      	movs	r3, #0
 80034b2:	9301      	str	r3, [sp, #4]
 80034b4:	2302      	movs	r3, #2
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034bc:	226e      	movs	r2, #110	; 0x6e
 80034be:	211e      	movs	r1, #30
 80034c0:	480d      	ldr	r0, [pc, #52]	; (80034f8 <print_all_menu_level_1_c_sensors+0x88>)
 80034c2:	f7ff f917 	bl	80026f4 <ILI9341_Draw_Text>

		menu_level_1_C_position_pointer = 1;
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <print_all_menu_level_1_c_sensors+0x8c>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
		menu_level_1_C = true;
 80034cc:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <print_all_menu_level_1_c_sensors+0x80>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
	}

	// Clear all pointers on menu
	clearn_all_pointers_on_menu();
 80034d2:	f000 f8dd 	bl	8003690 <clearn_all_pointers_on_menu>
	show_pointer_on_menu_item(&menu_level_1_C_position_pointer, 2);
 80034d6:	2102      	movs	r1, #2
 80034d8:	4808      	ldr	r0, [pc, #32]	; (80034fc <print_all_menu_level_1_c_sensors+0x8c>)
 80034da:	f000 f8ff 	bl	80036dc <show_pointer_on_menu_item>
}
 80034de:	bf00      	nop
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20000329 	.word	0x20000329
 80034e8:	2000032a 	.word	0x2000032a
 80034ec:	2000032b 	.word	0x2000032b
 80034f0:	2000032c 	.word	0x2000032c
 80034f4:	20000160 	.word	0x20000160
 80034f8:	20000174 	.word	0x20000174
 80034fc:	2000001b 	.word	0x2000001b

08003500 <print_all_menu_1_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_1_menus(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af02      	add	r7, sp, #8
	menu_level_0 = false;
 8003506:	4b42      	ldr	r3, [pc, #264]	; (8003610 <print_all_menu_1_1_menus+0x110>)
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
	// Clean all menu place
	clean_all_lines_of_menu ();
 800350c:	f000 f89a 	bl	8003644 <clean_all_lines_of_menu>

	// Clear all pointers on menu
	clearn_all_pointers_on_menu();
 8003510:	f000 f8be 	bl	8003690 <clearn_all_pointers_on_menu>

	ILI9341_Draw_Text(menu_1_1[0], 30, 110, WHITE, 2, BLACK);
 8003514:	2300      	movs	r3, #0
 8003516:	9301      	str	r3, [sp, #4]
 8003518:	2302      	movs	r3, #2
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003520:	226e      	movs	r2, #110	; 0x6e
 8003522:	211e      	movs	r1, #30
 8003524:	483b      	ldr	r0, [pc, #236]	; (8003614 <print_all_menu_1_1_menus+0x114>)
 8003526:	f7ff f8e5 	bl	80026f4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[1], 30, 130, WHITE, 2, BLACK);
 800352a:	2300      	movs	r3, #0
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	2302      	movs	r3, #2
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003536:	2282      	movs	r2, #130	; 0x82
 8003538:	211e      	movs	r1, #30
 800353a:	4837      	ldr	r0, [pc, #220]	; (8003618 <print_all_menu_1_1_menus+0x118>)
 800353c:	f7ff f8da 	bl	80026f4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[2], 30, 150, WHITE, 2, BLACK);
 8003540:	2300      	movs	r3, #0
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	2302      	movs	r3, #2
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800354c:	2296      	movs	r2, #150	; 0x96
 800354e:	211e      	movs	r1, #30
 8003550:	4832      	ldr	r0, [pc, #200]	; (800361c <print_all_menu_1_1_menus+0x11c>)
 8003552:	f7ff f8cf 	bl	80026f4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[3], 30, 170, WHITE, 2, BLACK);
 8003556:	2300      	movs	r3, #0
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	2302      	movs	r3, #2
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003562:	22aa      	movs	r2, #170	; 0xaa
 8003564:	211e      	movs	r1, #30
 8003566:	482e      	ldr	r0, [pc, #184]	; (8003620 <print_all_menu_1_1_menus+0x120>)
 8003568:	f7ff f8c4 	bl	80026f4 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 800356c:	4b2d      	ldr	r3, [pc, #180]	; (8003624 <print_all_menu_1_1_menus+0x124>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <print_all_menu_1_1_menus+0x7a>
	{
		pointer_on_selected_menu = 4;
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <print_all_menu_1_1_menus+0x124>)
 8003576:	2204      	movs	r2, #4
 8003578:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 800357a:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <print_all_menu_1_1_menus+0x124>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b04      	cmp	r3, #4
 8003580:	d902      	bls.n	8003588 <print_all_menu_1_1_menus+0x88>
	{
		pointer_on_selected_menu = 1;
 8003582:	4b28      	ldr	r3, [pc, #160]	; (8003624 <print_all_menu_1_1_menus+0x124>)
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]
	}

	// Print pointer on LCD
	switch (pointer_on_selected_menu)
 8003588:	4b26      	ldr	r3, [pc, #152]	; (8003624 <print_all_menu_1_1_menus+0x124>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	3b01      	subs	r3, #1
 800358e:	2b03      	cmp	r3, #3
 8003590:	d83a      	bhi.n	8003608 <print_all_menu_1_1_menus+0x108>
 8003592:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <print_all_menu_1_1_menus+0x98>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080035a9 	.word	0x080035a9
 800359c:	080035c1 	.word	0x080035c1
 80035a0:	080035d9 	.word	0x080035d9
 80035a4:	080035f1 	.word	0x080035f1
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 80035a8:	2300      	movs	r3, #0
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	2302      	movs	r3, #2
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035b4:	226e      	movs	r2, #110	; 0x6e
 80035b6:	2105      	movs	r1, #5
 80035b8:	481b      	ldr	r0, [pc, #108]	; (8003628 <print_all_menu_1_1_menus+0x128>)
 80035ba:	f7ff f89b 	bl	80026f4 <ILI9341_Draw_Text>
			break;
 80035be:	e023      	b.n	8003608 <print_all_menu_1_1_menus+0x108>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 80035c0:	2300      	movs	r3, #0
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	2302      	movs	r3, #2
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035cc:	2282      	movs	r2, #130	; 0x82
 80035ce:	2105      	movs	r1, #5
 80035d0:	4815      	ldr	r0, [pc, #84]	; (8003628 <print_all_menu_1_1_menus+0x128>)
 80035d2:	f7ff f88f 	bl	80026f4 <ILI9341_Draw_Text>
			break;
 80035d6:	e017      	b.n	8003608 <print_all_menu_1_1_menus+0x108>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 80035d8:	2300      	movs	r3, #0
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	2302      	movs	r3, #2
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035e4:	2296      	movs	r2, #150	; 0x96
 80035e6:	2105      	movs	r1, #5
 80035e8:	480f      	ldr	r0, [pc, #60]	; (8003628 <print_all_menu_1_1_menus+0x128>)
 80035ea:	f7ff f883 	bl	80026f4 <ILI9341_Draw_Text>
			break;
 80035ee:	e00b      	b.n	8003608 <print_all_menu_1_1_menus+0x108>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 80035f0:	2300      	movs	r3, #0
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	2302      	movs	r3, #2
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035fc:	22aa      	movs	r2, #170	; 0xaa
 80035fe:	2105      	movs	r1, #5
 8003600:	4809      	ldr	r0, [pc, #36]	; (8003628 <print_all_menu_1_1_menus+0x128>)
 8003602:	f7ff f877 	bl	80026f4 <ILI9341_Draw_Text>
			break;
 8003606:	bf00      	nop
	}
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000329 	.word	0x20000329
 8003614:	20000188 	.word	0x20000188
 8003618:	2000019c 	.word	0x2000019c
 800361c:	200001b0 	.word	0x200001b0
 8003620:	200001c4 	.word	0x200001c4
 8003624:	2000001c 	.word	0x2000001c
 8003628:	080138d0 	.word	0x080138d0

0800362c <toggle_green_led>:
// -----------------------------------------------------------------------
void toggle_green_led(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12);
 8003630:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003634:	4802      	ldr	r0, [pc, #8]	; (8003640 <toggle_green_led+0x14>)
 8003636:	f004 f83a 	bl	80076ae <HAL_GPIO_TogglePin>
}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40020c00 	.word	0x40020c00

08003644 <clean_all_lines_of_menu>:
// -----------------------------------------------------------------------
void clean_all_lines_of_menu (void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af02      	add	r7, sp, #8
	for (int line = min_line_position; line <= max_line_position; line = line +20)
 800364a:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <clean_all_lines_of_menu+0x40>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	607b      	str	r3, [r7, #4]
 8003650:	e00e      	b.n	8003670 <clean_all_lines_of_menu+0x2c>
	{
		ILI9341_Draw_Text( "                                   ", 30, line, RED, 2, BLACK);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	b2da      	uxtb	r2, r3
 8003656:	2300      	movs	r3, #0
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	2302      	movs	r3, #2
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003662:	211e      	movs	r1, #30
 8003664:	4808      	ldr	r0, [pc, #32]	; (8003688 <clean_all_lines_of_menu+0x44>)
 8003666:	f7ff f845 	bl	80026f4 <ILI9341_Draw_Text>
	for (int line = min_line_position; line <= max_line_position; line = line +20)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3314      	adds	r3, #20
 800366e:	607b      	str	r3, [r7, #4]
 8003670:	4b06      	ldr	r3, [pc, #24]	; (800368c <clean_all_lines_of_menu+0x48>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	429a      	cmp	r2, r3
 8003678:	ddeb      	ble.n	8003652 <clean_all_lines_of_menu+0xe>
	}
}
 800367a:	bf00      	nop
 800367c:	bf00      	nop
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000010 	.word	0x20000010
 8003688:	080138d4 	.word	0x080138d4
 800368c:	20000014 	.word	0x20000014

08003690 <clearn_all_pointers_on_menu>:
// -----------------------------------------------------------------------
// Clean all pointers on menu (arrows)
void clearn_all_pointers_on_menu(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af02      	add	r7, sp, #8
	for (int line = min_line_position; line <= max_line_position; line = line +20)
 8003696:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <clearn_all_pointers_on_menu+0x40>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	e00e      	b.n	80036bc <clearn_all_pointers_on_menu+0x2c>
	{
		ILI9341_Draw_Text( "  ", 5, line, WHITE, 2, BLACK);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	2300      	movs	r3, #0
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	2302      	movs	r3, #2
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ae:	2105      	movs	r1, #5
 80036b0:	4808      	ldr	r0, [pc, #32]	; (80036d4 <clearn_all_pointers_on_menu+0x44>)
 80036b2:	f7ff f81f 	bl	80026f4 <ILI9341_Draw_Text>
	for (int line = min_line_position; line <= max_line_position; line = line +20)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3314      	adds	r3, #20
 80036ba:	607b      	str	r3, [r7, #4]
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <clearn_all_pointers_on_menu+0x48>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	ddeb      	ble.n	800369e <clearn_all_pointers_on_menu+0xe>
	}
}
 80036c6:	bf00      	nop
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20000010 	.word	0x20000010
 80036d4:	080138f8 	.word	0x080138f8
 80036d8:	20000014 	.word	0x20000014

080036dc <show_pointer_on_menu_item>:
// -----------------------------------------------------------------------
// Show -> near menu items
void show_pointer_on_menu_item(uint8_t *position_pointer_on_item_menu, uint8_t number_items_on_menu)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	70fb      	strb	r3, [r7, #3]
	if(*position_pointer_on_item_menu <= 0)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d102      	bne.n	80036f6 <show_pointer_on_menu_item+0x1a>
	{
		*position_pointer_on_item_menu = number_items_on_menu;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	701a      	strb	r2, [r3, #0]
	}

	//
	if(*position_pointer_on_item_menu >= (number_items_on_menu + 1))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d202      	bcs.n	8003706 <show_pointer_on_menu_item+0x2a>
	{
		*position_pointer_on_item_menu = 1;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]
	}

	// Print pointer on menu
	switch (*position_pointer_on_item_menu)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	3b01      	subs	r3, #1
 800370c:	2b06      	cmp	r3, #6
 800370e:	d865      	bhi.n	80037dc <show_pointer_on_menu_item+0x100>
 8003710:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <show_pointer_on_menu_item+0x3c>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	08003735 	.word	0x08003735
 800371c:	0800374d 	.word	0x0800374d
 8003720:	08003765 	.word	0x08003765
 8003724:	0800377d 	.word	0x0800377d
 8003728:	08003795 	.word	0x08003795
 800372c:	080037ad 	.word	0x080037ad
 8003730:	080037c5 	.word	0x080037c5
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 90, RED, 2, BLACK);
 8003734:	2300      	movs	r3, #0
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	2302      	movs	r3, #2
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003740:	225a      	movs	r2, #90	; 0x5a
 8003742:	2105      	movs	r1, #5
 8003744:	4827      	ldr	r0, [pc, #156]	; (80037e4 <show_pointer_on_menu_item+0x108>)
 8003746:	f7fe ffd5 	bl	80026f4 <ILI9341_Draw_Text>
			break;
 800374a:	e047      	b.n	80037dc <show_pointer_on_menu_item+0x100>
		case 2:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 800374c:	2300      	movs	r3, #0
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	2302      	movs	r3, #2
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003758:	226e      	movs	r2, #110	; 0x6e
 800375a:	2105      	movs	r1, #5
 800375c:	4821      	ldr	r0, [pc, #132]	; (80037e4 <show_pointer_on_menu_item+0x108>)
 800375e:	f7fe ffc9 	bl	80026f4 <ILI9341_Draw_Text>
			break;
 8003762:	e03b      	b.n	80037dc <show_pointer_on_menu_item+0x100>
		case 3:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8003764:	2300      	movs	r3, #0
 8003766:	9301      	str	r3, [sp, #4]
 8003768:	2302      	movs	r3, #2
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003770:	2282      	movs	r2, #130	; 0x82
 8003772:	2105      	movs	r1, #5
 8003774:	481b      	ldr	r0, [pc, #108]	; (80037e4 <show_pointer_on_menu_item+0x108>)
 8003776:	f7fe ffbd 	bl	80026f4 <ILI9341_Draw_Text>
			break;
 800377a:	e02f      	b.n	80037dc <show_pointer_on_menu_item+0x100>
		case 4:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 800377c:	2300      	movs	r3, #0
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	2302      	movs	r3, #2
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003788:	2296      	movs	r2, #150	; 0x96
 800378a:	2105      	movs	r1, #5
 800378c:	4815      	ldr	r0, [pc, #84]	; (80037e4 <show_pointer_on_menu_item+0x108>)
 800378e:	f7fe ffb1 	bl	80026f4 <ILI9341_Draw_Text>
			break;
 8003792:	e023      	b.n	80037dc <show_pointer_on_menu_item+0x100>
		case 5:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 8003794:	2300      	movs	r3, #0
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	2302      	movs	r3, #2
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80037a0:	22aa      	movs	r2, #170	; 0xaa
 80037a2:	2105      	movs	r1, #5
 80037a4:	480f      	ldr	r0, [pc, #60]	; (80037e4 <show_pointer_on_menu_item+0x108>)
 80037a6:	f7fe ffa5 	bl	80026f4 <ILI9341_Draw_Text>
			break;
 80037aa:	e017      	b.n	80037dc <show_pointer_on_menu_item+0x100>
		case 6:
			ILI9341_Draw_Text( "->", 5, 190, RED, 2, BLACK);
 80037ac:	2300      	movs	r3, #0
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	2302      	movs	r3, #2
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80037b8:	22be      	movs	r2, #190	; 0xbe
 80037ba:	2105      	movs	r1, #5
 80037bc:	4809      	ldr	r0, [pc, #36]	; (80037e4 <show_pointer_on_menu_item+0x108>)
 80037be:	f7fe ff99 	bl	80026f4 <ILI9341_Draw_Text>
			break;
 80037c2:	e00b      	b.n	80037dc <show_pointer_on_menu_item+0x100>
		case 7:
			ILI9341_Draw_Text( "->", 5, 210, RED, 2, BLACK);
 80037c4:	2300      	movs	r3, #0
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	2302      	movs	r3, #2
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80037d0:	22d2      	movs	r2, #210	; 0xd2
 80037d2:	2105      	movs	r1, #5
 80037d4:	4803      	ldr	r0, [pc, #12]	; (80037e4 <show_pointer_on_menu_item+0x108>)
 80037d6:	f7fe ff8d 	bl	80026f4 <ILI9341_Draw_Text>
			break;
 80037da:	bf00      	nop
		}
}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	080138d0 	.word	0x080138d0

080037e8 <print_status_resdy_all_sensors_on_lcd>:
// -----------------------------------------------------------------------
// Print "ready" or "Error""status all sensors.
void print_status_resdy_all_sensors_on_lcd(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af02      	add	r7, sp, #8
	if(i2c_device.BME280_ready_status == true)
 80037ee:	4b52      	ldr	r3, [pc, #328]	; (8003938 <print_status_resdy_all_sensors_on_lcd+0x150>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <print_status_resdy_all_sensors_on_lcd+0x26>
	{
		ILI9341_Draw_Text("Ready", 240, 90, GREEN, 2, BLACK);
 80037f6:	2300      	movs	r3, #0
 80037f8:	9301      	str	r3, [sp, #4]
 80037fa:	2302      	movs	r3, #2
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003802:	225a      	movs	r2, #90	; 0x5a
 8003804:	21f0      	movs	r1, #240	; 0xf0
 8003806:	484d      	ldr	r0, [pc, #308]	; (800393c <print_status_resdy_all_sensors_on_lcd+0x154>)
 8003808:	f7fe ff74 	bl	80026f4 <ILI9341_Draw_Text>
 800380c:	e00a      	b.n	8003824 <print_status_resdy_all_sensors_on_lcd+0x3c>
	}
	else
	{
		ILI9341_Draw_Text("Error", 240, 90, RED, 2, BLACK);
 800380e:	2300      	movs	r3, #0
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	2302      	movs	r3, #2
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800381a:	225a      	movs	r2, #90	; 0x5a
 800381c:	21f0      	movs	r1, #240	; 0xf0
 800381e:	4848      	ldr	r0, [pc, #288]	; (8003940 <print_status_resdy_all_sensors_on_lcd+0x158>)
 8003820:	f7fe ff68 	bl	80026f4 <ILI9341_Draw_Text>
	}

	if(i2c_device.MPU6050_ready_status == true)
 8003824:	4b44      	ldr	r3, [pc, #272]	; (8003938 <print_status_resdy_all_sensors_on_lcd+0x150>)
 8003826:	785b      	ldrb	r3, [r3, #1]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00b      	beq.n	8003844 <print_status_resdy_all_sensors_on_lcd+0x5c>
	{
		ILI9341_Draw_Text("Ready", 240, 110, GREEN, 2, BLACK);
 800382c:	2300      	movs	r3, #0
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	2302      	movs	r3, #2
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003838:	226e      	movs	r2, #110	; 0x6e
 800383a:	21f0      	movs	r1, #240	; 0xf0
 800383c:	483f      	ldr	r0, [pc, #252]	; (800393c <print_status_resdy_all_sensors_on_lcd+0x154>)
 800383e:	f7fe ff59 	bl	80026f4 <ILI9341_Draw_Text>
 8003842:	e00a      	b.n	800385a <print_status_resdy_all_sensors_on_lcd+0x72>
	}
	else
	{
		ILI9341_Draw_Text("Error", 240, 110, RED, 2, BLACK);
 8003844:	2300      	movs	r3, #0
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	2302      	movs	r3, #2
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003850:	226e      	movs	r2, #110	; 0x6e
 8003852:	21f0      	movs	r1, #240	; 0xf0
 8003854:	483a      	ldr	r0, [pc, #232]	; (8003940 <print_status_resdy_all_sensors_on_lcd+0x158>)
 8003856:	f7fe ff4d 	bl	80026f4 <ILI9341_Draw_Text>
	}

	if(i2c_device.HMC5883L_ready_status == true)
 800385a:	4b37      	ldr	r3, [pc, #220]	; (8003938 <print_status_resdy_all_sensors_on_lcd+0x150>)
 800385c:	789b      	ldrb	r3, [r3, #2]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00b      	beq.n	800387a <print_status_resdy_all_sensors_on_lcd+0x92>
	{
		ILI9341_Draw_Text("Ready", 240, 130, GREEN, 2, BLACK);
 8003862:	2300      	movs	r3, #0
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	2302      	movs	r3, #2
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800386e:	2282      	movs	r2, #130	; 0x82
 8003870:	21f0      	movs	r1, #240	; 0xf0
 8003872:	4832      	ldr	r0, [pc, #200]	; (800393c <print_status_resdy_all_sensors_on_lcd+0x154>)
 8003874:	f7fe ff3e 	bl	80026f4 <ILI9341_Draw_Text>
 8003878:	e00a      	b.n	8003890 <print_status_resdy_all_sensors_on_lcd+0xa8>
	}
	else
	{
		ILI9341_Draw_Text("Error", 240, 130, RED, 2, BLACK);
 800387a:	2300      	movs	r3, #0
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	2302      	movs	r3, #2
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003886:	2282      	movs	r2, #130	; 0x82
 8003888:	21f0      	movs	r1, #240	; 0xf0
 800388a:	482d      	ldr	r0, [pc, #180]	; (8003940 <print_status_resdy_all_sensors_on_lcd+0x158>)
 800388c:	f7fe ff32 	bl	80026f4 <ILI9341_Draw_Text>
	}

	if(i2c_device.MS5611_ready_status == true)
 8003890:	4b29      	ldr	r3, [pc, #164]	; (8003938 <print_status_resdy_all_sensors_on_lcd+0x150>)
 8003892:	78db      	ldrb	r3, [r3, #3]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00b      	beq.n	80038b0 <print_status_resdy_all_sensors_on_lcd+0xc8>
	{
		ILI9341_Draw_Text("Ready", 240, 150, GREEN, 2, BLACK);
 8003898:	2300      	movs	r3, #0
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	2302      	movs	r3, #2
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038a4:	2296      	movs	r2, #150	; 0x96
 80038a6:	21f0      	movs	r1, #240	; 0xf0
 80038a8:	4824      	ldr	r0, [pc, #144]	; (800393c <print_status_resdy_all_sensors_on_lcd+0x154>)
 80038aa:	f7fe ff23 	bl	80026f4 <ILI9341_Draw_Text>
 80038ae:	e00a      	b.n	80038c6 <print_status_resdy_all_sensors_on_lcd+0xde>
	}
	else
	{
		ILI9341_Draw_Text("Error", 240, 150, RED, 2, BLACK);
 80038b0:	2300      	movs	r3, #0
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	2302      	movs	r3, #2
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038bc:	2296      	movs	r2, #150	; 0x96
 80038be:	21f0      	movs	r1, #240	; 0xf0
 80038c0:	481f      	ldr	r0, [pc, #124]	; (8003940 <print_status_resdy_all_sensors_on_lcd+0x158>)
 80038c2:	f7fe ff17 	bl	80026f4 <ILI9341_Draw_Text>
	}

	if(i2c_device.AM2302_ready_status == true)
 80038c6:	4b1c      	ldr	r3, [pc, #112]	; (8003938 <print_status_resdy_all_sensors_on_lcd+0x150>)
 80038c8:	795b      	ldrb	r3, [r3, #5]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <print_status_resdy_all_sensors_on_lcd+0xfe>
	{
		ILI9341_Draw_Text("Ready", 240, 170, GREEN, 2, BLACK);
 80038ce:	2300      	movs	r3, #0
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	2302      	movs	r3, #2
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038da:	22aa      	movs	r2, #170	; 0xaa
 80038dc:	21f0      	movs	r1, #240	; 0xf0
 80038de:	4817      	ldr	r0, [pc, #92]	; (800393c <print_status_resdy_all_sensors_on_lcd+0x154>)
 80038e0:	f7fe ff08 	bl	80026f4 <ILI9341_Draw_Text>
 80038e4:	e00a      	b.n	80038fc <print_status_resdy_all_sensors_on_lcd+0x114>
	}
	else
	{
		ILI9341_Draw_Text("Error", 240, 170, RED, 2, BLACK);
 80038e6:	2300      	movs	r3, #0
 80038e8:	9301      	str	r3, [sp, #4]
 80038ea:	2302      	movs	r3, #2
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038f2:	22aa      	movs	r2, #170	; 0xaa
 80038f4:	21f0      	movs	r1, #240	; 0xf0
 80038f6:	4812      	ldr	r0, [pc, #72]	; (8003940 <print_status_resdy_all_sensors_on_lcd+0x158>)
 80038f8:	f7fe fefc 	bl	80026f4 <ILI9341_Draw_Text>
	}

	if(i2c_device.APDS9960_ready_status == true)
 80038fc:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <print_status_resdy_all_sensors_on_lcd+0x150>)
 80038fe:	791b      	ldrb	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <print_status_resdy_all_sensors_on_lcd+0x134>
	{
		ILI9341_Draw_Text("Ready", 240, 190, GREEN, 2, BLACK);
 8003904:	2300      	movs	r3, #0
 8003906:	9301      	str	r3, [sp, #4]
 8003908:	2302      	movs	r3, #2
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003910:	22be      	movs	r2, #190	; 0xbe
 8003912:	21f0      	movs	r1, #240	; 0xf0
 8003914:	4809      	ldr	r0, [pc, #36]	; (800393c <print_status_resdy_all_sensors_on_lcd+0x154>)
 8003916:	f7fe feed 	bl	80026f4 <ILI9341_Draw_Text>
	}
	else
	{
		ILI9341_Draw_Text("Error", 240, 190, RED, 2, BLACK);
	}
}
 800391a:	e00a      	b.n	8003932 <print_status_resdy_all_sensors_on_lcd+0x14a>
		ILI9341_Draw_Text("Error", 240, 190, RED, 2, BLACK);
 800391c:	2300      	movs	r3, #0
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	2302      	movs	r3, #2
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003928:	22be      	movs	r2, #190	; 0xbe
 800392a:	21f0      	movs	r1, #240	; 0xf0
 800392c:	4804      	ldr	r0, [pc, #16]	; (8003940 <print_status_resdy_all_sensors_on_lcd+0x158>)
 800392e:	f7fe fee1 	bl	80026f4 <ILI9341_Draw_Text>
}
 8003932:	bf00      	nop
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	200004a8 	.word	0x200004a8
 800393c:	080138fc 	.word	0x080138fc
 8003940:	08013904 	.word	0x08013904

08003944 <measure_and_print_all_sensors>:
// -----------------------------------------------------------------------
void measure_and_print_all_sensors(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af02      	add	r7, sp, #8
	bool sensor_print_status = false;			// For print only first time
 800394a:	2300      	movs	r3, #0
 800394c:	71fb      	strb	r3, [r7, #7]
	int i = 0;									// For create different period measure
 800394e:	2300      	movs	r3, #0
 8003950:	603b      	str	r3, [r7, #0]
	// Clear all LCD
	ILI9341_Fill_Screen(BLACK);
 8003952:	2000      	movs	r0, #0
 8003954:	f7ff f9c2 	bl	8002cdc <ILI9341_Fill_Screen>

	while(getPressKey() != BUTTON_LEFT)
 8003958:	e0d2      	b.n	8003b00 <measure_and_print_all_sensors+0x1bc>
	{
		if(sensor_print_status == false)	// Print lines only first time.
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	f083 0301 	eor.w	r3, r3, #1
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 80ac 	beq.w	8003ac0 <measure_and_print_all_sensors+0x17c>
		{
			// Print name sensors
			ILI9341_Draw_Text( "1.BME280", 5, 90, WHITE, 2, BLACK);
 8003968:	2300      	movs	r3, #0
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	2302      	movs	r3, #2
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003974:	225a      	movs	r2, #90	; 0x5a
 8003976:	2105      	movs	r1, #5
 8003978:	4869      	ldr	r0, [pc, #420]	; (8003b20 <measure_and_print_all_sensors+0x1dc>)
 800397a:	f7fe febb 	bl	80026f4 <ILI9341_Draw_Text>
			ILI9341_Draw_Text( "2.MPU6050a", 5, 110, WHITE, 2, BLACK);
 800397e:	2300      	movs	r3, #0
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	2302      	movs	r3, #2
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800398a:	226e      	movs	r2, #110	; 0x6e
 800398c:	2105      	movs	r1, #5
 800398e:	4865      	ldr	r0, [pc, #404]	; (8003b24 <measure_and_print_all_sensors+0x1e0>)
 8003990:	f7fe feb0 	bl	80026f4 <ILI9341_Draw_Text>
			ILI9341_Draw_Text( "3.MPU6050g", 5, 130, WHITE, 2, BLACK);
 8003994:	2300      	movs	r3, #0
 8003996:	9301      	str	r3, [sp, #4]
 8003998:	2302      	movs	r3, #2
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039a0:	2282      	movs	r2, #130	; 0x82
 80039a2:	2105      	movs	r1, #5
 80039a4:	4860      	ldr	r0, [pc, #384]	; (8003b28 <measure_and_print_all_sensors+0x1e4>)
 80039a6:	f7fe fea5 	bl	80026f4 <ILI9341_Draw_Text>
			ILI9341_Draw_Text( "4.HMC5883L", 5, 150, WHITE, 2, BLACK);
 80039aa:	2300      	movs	r3, #0
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	2302      	movs	r3, #2
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039b6:	2296      	movs	r2, #150	; 0x96
 80039b8:	2105      	movs	r1, #5
 80039ba:	485c      	ldr	r0, [pc, #368]	; (8003b2c <measure_and_print_all_sensors+0x1e8>)
 80039bc:	f7fe fe9a 	bl	80026f4 <ILI9341_Draw_Text>
			ILI9341_Draw_Text( "5.MS5611", 5, 170, WHITE, 2, BLACK);
 80039c0:	2300      	movs	r3, #0
 80039c2:	9301      	str	r3, [sp, #4]
 80039c4:	2302      	movs	r3, #2
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039cc:	22aa      	movs	r2, #170	; 0xaa
 80039ce:	2105      	movs	r1, #5
 80039d0:	4857      	ldr	r0, [pc, #348]	; (8003b30 <measure_and_print_all_sensors+0x1ec>)
 80039d2:	f7fe fe8f 	bl	80026f4 <ILI9341_Draw_Text>
			ILI9341_Draw_Text( "6.AM2302", 5, 190, WHITE, 2, BLACK);
 80039d6:	2300      	movs	r3, #0
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	2302      	movs	r3, #2
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039e2:	22be      	movs	r2, #190	; 0xbe
 80039e4:	2105      	movs	r1, #5
 80039e6:	4853      	ldr	r0, [pc, #332]	; (8003b34 <measure_and_print_all_sensors+0x1f0>)
 80039e8:	f7fe fe84 	bl	80026f4 <ILI9341_Draw_Text>
			ILI9341_Draw_Text( "7.APDS9960", 5, 210, WHITE, 2, BLACK);
 80039ec:	2300      	movs	r3, #0
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	2302      	movs	r3, #2
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039f8:	22d2      	movs	r2, #210	; 0xd2
 80039fa:	2105      	movs	r1, #5
 80039fc:	484e      	ldr	r0, [pc, #312]	; (8003b38 <measure_and_print_all_sensors+0x1f4>)
 80039fe:	f7fe fe79 	bl	80026f4 <ILI9341_Draw_Text>

			// Print lines
			ILI9341_Draw_Horizontal_Line(0, 89, 320, GREEN);
 8003a02:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a06:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a0a:	2159      	movs	r1, #89	; 0x59
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	f7ff faaf 	bl	8002f70 <ILI9341_Draw_Horizontal_Line>
			ILI9341_Draw_Horizontal_Line(0, 109, 320, GREEN);
 8003a12:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a1a:	216d      	movs	r1, #109	; 0x6d
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	f7ff faa7 	bl	8002f70 <ILI9341_Draw_Horizontal_Line>
			ILI9341_Draw_Horizontal_Line(0, 129, 320, GREEN);
 8003a22:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a26:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a2a:	2181      	movs	r1, #129	; 0x81
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f7ff fa9f 	bl	8002f70 <ILI9341_Draw_Horizontal_Line>
			ILI9341_Draw_Horizontal_Line(0, 149, 320, GREEN);
 8003a32:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a36:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a3a:	2195      	movs	r1, #149	; 0x95
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	f7ff fa97 	bl	8002f70 <ILI9341_Draw_Horizontal_Line>
			ILI9341_Draw_Horizontal_Line(0, 169, 320, GREEN);
 8003a42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a4a:	21a9      	movs	r1, #169	; 0xa9
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f7ff fa8f 	bl	8002f70 <ILI9341_Draw_Horizontal_Line>
			ILI9341_Draw_Horizontal_Line(0, 189, 320, GREEN);
 8003a52:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a56:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a5a:	21bd      	movs	r1, #189	; 0xbd
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f7ff fa87 	bl	8002f70 <ILI9341_Draw_Horizontal_Line>
			ILI9341_Draw_Horizontal_Line(0, 209, 320, GREEN);
 8003a62:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a6a:	21d1      	movs	r1, #209	; 0xd1
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	f7ff fa7f 	bl	8002f70 <ILI9341_Draw_Horizontal_Line>
			ILI9341_Draw_Horizontal_Line(0, 229, 320, GREEN);
 8003a72:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a7a:	21e5      	movs	r1, #229	; 0xe5
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	f7ff fa77 	bl	8002f70 <ILI9341_Draw_Horizontal_Line>
			ILI9341_Draw_Vertical_Line(0, 89, 140, GREEN);
 8003a82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a86:	228c      	movs	r2, #140	; 0x8c
 8003a88:	2159      	movs	r1, #89	; 0x59
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	f7ff fab4 	bl	8002ff8 <ILI9341_Draw_Vertical_Line>
			ILI9341_Draw_Vertical_Line(23, 89, 140, GREEN);
 8003a90:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003a94:	228c      	movs	r2, #140	; 0x8c
 8003a96:	2159      	movs	r1, #89	; 0x59
 8003a98:	2017      	movs	r0, #23
 8003a9a:	f7ff faad 	bl	8002ff8 <ILI9341_Draw_Vertical_Line>
			ILI9341_Draw_Vertical_Line(130, 89, 140, GREEN);
 8003a9e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003aa2:	228c      	movs	r2, #140	; 0x8c
 8003aa4:	2159      	movs	r1, #89	; 0x59
 8003aa6:	2082      	movs	r0, #130	; 0x82
 8003aa8:	f7ff faa6 	bl	8002ff8 <ILI9341_Draw_Vertical_Line>
			ILI9341_Draw_Vertical_Line(319, 89, 140, GREEN);
 8003aac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ab0:	228c      	movs	r2, #140	; 0x8c
 8003ab2:	2159      	movs	r1, #89	; 0x59
 8003ab4:	f240 103f 	movw	r0, #319	; 0x13f
 8003ab8:	f7ff fa9e 	bl	8002ff8 <ILI9341_Draw_Vertical_Line>

			sensor_print_status = true;
 8003abc:	2301      	movs	r3, #1
 8003abe:	71fb      	strb	r3, [r7, #7]
		}

		// Measuring and printing
		print_data_from_MPU6050_Acc_and_Gyro_on_lcd();   	// Acceleration X, Y, Z
 8003ac0:	f000 f930 	bl	8003d24 <print_data_from_MPU6050_Acc_and_Gyro_on_lcd>

		// print_data_from_HMC5883L_on_lcd();		// Magnetometer DON'T WORK

		if((i >= 10) | (i == 0))					// Measured and printed only one time per one second
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b09      	cmp	r3, #9
 8003ac8:	bfcc      	ite	gt
 8003aca:	2301      	movgt	r3, #1
 8003acc:	2300      	movle	r3, #0
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	4313      	orrs	r3, r2
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d007      	beq.n	8003af4 <measure_and_print_all_sensors+0x1b0>
		{
			print_data_from_AM2302_on_lcd();		// Temperature and humidity
 8003ae4:	f000 f82c 	bl	8003b40 <print_data_from_AM2302_on_lcd>
			print_data_from_BME280_on_lcd();		// Temperature, humidity and pressure
 8003ae8:	f000 faaa 	bl	8004040 <print_data_from_BME280_on_lcd>
			print_data_from_MS5611_on_lcd();		// Temperature and pressure
 8003aec:	f000 f89a 	bl	8003c24 <print_data_from_MS5611_on_lcd>
			i = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	603b      	str	r3, [r7, #0]
		}

		// print_data_from_APD59960_on_lcd();		// Motion sensor  DON'T WORK

		HAL_Delay(100);
 8003af4:	2064      	movs	r0, #100	; 0x64
 8003af6:	f003 fad7 	bl	80070a8 <HAL_Delay>
		i++;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	3301      	adds	r3, #1
 8003afe:	603b      	str	r3, [r7, #0]
	while(getPressKey() != BUTTON_LEFT)
 8003b00:	f000 fb38 	bl	8004174 <getPressKey>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f47f af27 	bne.w	800395a <measure_and_print_all_sensors+0x16>
	}
	ILI9341_Fill_Screen(BLACK);
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f7ff f8e5 	bl	8002cdc <ILI9341_Fill_Screen>
	Menu_Navigate(&Menu_1);     // Back to menu 2
 8003b12:	480a      	ldr	r0, [pc, #40]	; (8003b3c <measure_and_print_all_sensors+0x1f8>)
 8003b14:	f000 fbf6 	bl	8004304 <Menu_Navigate>
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	0801390c 	.word	0x0801390c
 8003b24:	08013918 	.word	0x08013918
 8003b28:	08013924 	.word	0x08013924
 8003b2c:	08013930 	.word	0x08013930
 8003b30:	0801393c 	.word	0x0801393c
 8003b34:	08013948 	.word	0x08013948
 8003b38:	08013954 	.word	0x08013954
 8003b3c:	08013cb4 	.word	0x08013cb4

08003b40 <print_data_from_AM2302_on_lcd>:

// -----------------------------------------------------------------------
void print_data_from_AM2302_on_lcd(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b090      	sub	sp, #64	; 0x40
 8003b44:	af02      	add	r7, sp, #8
	if(i2c_device.AM2302_ready_status == true)
 8003b46:	4b35      	ldr	r3, [pc, #212]	; (8003c1c <print_data_from_AM2302_on_lcd+0xdc>)
 8003b48:	795b      	ldrb	r3, [r3, #5]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d061      	beq.n	8003c12 <print_data_from_AM2302_on_lcd+0xd2>
	{
		am2302_measure();
 8003b4e:	f001 ffa3 	bl	8005a98 <am2302_measure>
		// Convert data
		int temp = i2c_device.AM2302_temperature;
 8003b52:	4b32      	ldr	r3, [pc, #200]	; (8003c1c <print_data_from_AM2302_on_lcd+0xdc>)
 8003b54:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b5c:	ee17 3a90 	vmov	r3, s15
 8003b60:	637b      	str	r3, [r7, #52]	; 0x34
		int hum = i2c_device.AM2302_humidity;
 8003b62:	4b2e      	ldr	r3, [pc, #184]	; (8003c1c <print_data_from_AM2302_on_lcd+0xdc>)
 8003b64:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b6c:	ee17 3a90 	vmov	r3, s15
 8003b70:	633b      	str	r3, [r7, #48]	; 0x30

		char str_t[20] = {0};
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	f107 0320 	add.w	r3, r7, #32
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	605a      	str	r2, [r3, #4]
 8003b80:	609a      	str	r2, [r3, #8]
 8003b82:	60da      	str	r2, [r3, #12]
		char str_h[10] = {0};
 8003b84:	2300      	movs	r3, #0
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	f107 0314 	add.w	r3, r7, #20
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	809a      	strh	r2, [r3, #4]
		char cels_s[7] = " C  ";
 8003b92:	4a23      	ldr	r2, [pc, #140]	; (8003c20 <print_data_from_AM2302_on_lcd+0xe0>)
 8003b94:	f107 0308 	add.w	r3, r7, #8
 8003b98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b9c:	6018      	str	r0, [r3, #0]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	7019      	strb	r1, [r3, #0]
 8003ba2:	f107 030d 	add.w	r3, r7, #13
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	801a      	strh	r2, [r3, #0]
		char hum_s[4] = " %";
 8003baa:	f242 5320 	movw	r3, #9504	; 0x2520
 8003bae:	607b      	str	r3, [r7, #4]

		// Add strings
		itoa(temp, str_t, 10);
 8003bb0:	f107 031c 	add.w	r3, r7, #28
 8003bb4:	220a      	movs	r2, #10
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003bba:	f00c ff73 	bl	8010aa4 <itoa>
		itoa(hum, str_h, 10);
 8003bbe:	f107 0310 	add.w	r3, r7, #16
 8003bc2:	220a      	movs	r2, #10
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bc8:	f00c ff6c 	bl	8010aa4 <itoa>

		strcat(str_t, cels_s);
 8003bcc:	f107 0208 	add.w	r2, r7, #8
 8003bd0:	f107 031c 	add.w	r3, r7, #28
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f00d f846 	bl	8010c68 <strcat>
		strcat(str_h, hum_s);
 8003bdc:	1d3a      	adds	r2, r7, #4
 8003bde:	f107 0310 	add.w	r3, r7, #16
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f00d f83f 	bl	8010c68 <strcat>

		strcat(str_t, str_h);
 8003bea:	f107 0210 	add.w	r2, r7, #16
 8003bee:	f107 031c 	add.w	r3, r7, #28
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f00d f837 	bl	8010c68 <strcat>

		// Print like one line
		ILI9341_Draw_Text(str_t, 135, 190, WHITE, 2, BLACK);
 8003bfa:	f107 001c 	add.w	r0, r7, #28
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	2302      	movs	r3, #2
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c0a:	22be      	movs	r2, #190	; 0xbe
 8003c0c:	2187      	movs	r1, #135	; 0x87
 8003c0e:	f7fe fd71 	bl	80026f4 <ILI9341_Draw_Text>
	}
}
 8003c12:	bf00      	nop
 8003c14:	3738      	adds	r7, #56	; 0x38
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	200004a8 	.word	0x200004a8
 8003c20:	08013960 	.word	0x08013960

08003c24 <print_data_from_MS5611_on_lcd>:
// -----------------------------------------------------------------------
void print_data_from_MS5611_on_lcd(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b094      	sub	sp, #80	; 0x50
 8003c28:	af02      	add	r7, sp, #8
	if(i2c_device.MS5611_ready_status)
 8003c2a:	4b3c      	ldr	r3, [pc, #240]	; (8003d1c <print_data_from_MS5611_on_lcd+0xf8>)
 8003c2c:	78db      	ldrb	r3, [r3, #3]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d06f      	beq.n	8003d12 <print_data_from_MS5611_on_lcd+0xee>
	{
		ms5611_measure();
 8003c32:	f002 f831 	bl	8005c98 <ms5611_measure>

		char str_MS5611[30] = {0};
 8003c36:	2300      	movs	r3, #0
 8003c38:	623b      	str	r3, [r7, #32]
 8003c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]
 8003c44:	609a      	str	r2, [r3, #8]
 8003c46:	60da      	str	r2, [r3, #12]
 8003c48:	611a      	str	r2, [r3, #16]
 8003c4a:	615a      	str	r2, [r3, #20]
 8003c4c:	831a      	strh	r2, [r3, #24]
		char str_MS5611_buff[13] = {0};
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	f107 0314 	add.w	r3, r7, #20
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	605a      	str	r2, [r3, #4]
 8003c5c:	721a      	strb	r2, [r3, #8]

		int temp_MS5611 = i2c_device.MS5611_temperature;
 8003c5e:	4b2f      	ldr	r3, [pc, #188]	; (8003d1c <print_data_from_MS5611_on_lcd+0xf8>)
 8003c60:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003c64:	4610      	mov	r0, r2
 8003c66:	4619      	mov	r1, r3
 8003c68:	f7fc ff6e 	bl	8000b48 <__aeabi_d2iz>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	647b      	str	r3, [r7, #68]	; 0x44
		int pres_MS5611 = i2c_device.MS5611_pressure;
 8003c70:	4b2a      	ldr	r3, [pc, #168]	; (8003d1c <print_data_from_MS5611_on_lcd+0xf8>)
 8003c72:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f7fc ff65 	bl	8000b48 <__aeabi_d2iz>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	643b      	str	r3, [r7, #64]	; 0x40

		char str_t_MS5611[6] = " C  ";
 8003c82:	4a27      	ldr	r2, [pc, #156]	; (8003d20 <print_data_from_MS5611_on_lcd+0xfc>)
 8003c84:	f107 0308 	add.w	r3, r7, #8
 8003c88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c8c:	6018      	str	r0, [r3, #0]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	7019      	strb	r1, [r3, #0]
 8003c92:	2300      	movs	r3, #0
 8003c94:	737b      	strb	r3, [r7, #13]
		char str_p_MS5611[6] = " P";
 8003c96:	f245 0320 	movw	r3, #20512	; 0x5020
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	80bb      	strh	r3, [r7, #4]

		itoa(temp_MS5611, str_MS5611_buff, 10);
 8003ca0:	f107 0310 	add.w	r3, r7, #16
 8003ca4:	220a      	movs	r2, #10
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003caa:	f00c fefb 	bl	8010aa4 <itoa>
		strcat(str_MS5611, str_MS5611_buff);
 8003cae:	f107 0210 	add.w	r2, r7, #16
 8003cb2:	f107 0320 	add.w	r3, r7, #32
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f00c ffd5 	bl	8010c68 <strcat>
		strcat(str_MS5611, str_t_MS5611);
 8003cbe:	f107 0208 	add.w	r2, r7, #8
 8003cc2:	f107 0320 	add.w	r3, r7, #32
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f00c ffcd 	bl	8010c68 <strcat>

		itoa(pres_MS5611, str_MS5611_buff, 10); 	// Convert from int in str
 8003cce:	f107 0310 	add.w	r3, r7, #16
 8003cd2:	220a      	movs	r2, #10
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003cd8:	f00c fee4 	bl	8010aa4 <itoa>
		strcat(str_MS5611, str_MS5611_buff);
 8003cdc:	f107 0210 	add.w	r2, r7, #16
 8003ce0:	f107 0320 	add.w	r3, r7, #32
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f00c ffbe 	bl	8010c68 <strcat>
		strcat(str_MS5611, str_p_MS5611);
 8003cec:	463a      	mov	r2, r7
 8003cee:	f107 0320 	add.w	r3, r7, #32
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f00c ffb7 	bl	8010c68 <strcat>

		ILI9341_Draw_Text(str_MS5611, 135, 170, WHITE, 2, BLACK);
 8003cfa:	f107 0020 	add.w	r0, r7, #32
 8003cfe:	2300      	movs	r3, #0
 8003d00:	9301      	str	r3, [sp, #4]
 8003d02:	2302      	movs	r3, #2
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d0a:	22aa      	movs	r2, #170	; 0xaa
 8003d0c:	2187      	movs	r1, #135	; 0x87
 8003d0e:	f7fe fcf1 	bl	80026f4 <ILI9341_Draw_Text>
	}
}
 8003d12:	bf00      	nop
 8003d14:	3748      	adds	r7, #72	; 0x48
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	200004a8 	.word	0x200004a8
 8003d20:	08013968 	.word	0x08013968

08003d24 <print_data_from_MPU6050_Acc_and_Gyro_on_lcd>:
// -----------------------------------------------------------------------
void print_data_from_MPU6050_Acc_and_Gyro_on_lcd(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af02      	add	r7, sp, #8
	bool print_x_y_z_status = false;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	75fb      	strb	r3, [r7, #23]

	if(i2c_device.MPU6050_ready_status == true)
 8003d2e:	4bbe      	ldr	r3, [pc, #760]	; (8004028 <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x304>)
 8003d30:	785b      	ldrb	r3, [r3, #1]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8174 	beq.w	8004020 <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x2fc>
	{
		if(print_x_y_z_status == false)
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
 8003d3a:	f083 0301 	eor.w	r3, r3, #1
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d061      	beq.n	8003e08 <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0xe4>
		{
			// Print x.y and z
			char str_x[3] = "X:";
 8003d44:	4ab9      	ldr	r2, [pc, #740]	; (800402c <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x308>)
 8003d46:	f107 030c 	add.w	r3, r7, #12
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	8019      	strh	r1, [r3, #0]
 8003d50:	3302      	adds	r3, #2
 8003d52:	0c12      	lsrs	r2, r2, #16
 8003d54:	701a      	strb	r2, [r3, #0]
			char str_y[3] = "Y:";
 8003d56:	4ab6      	ldr	r2, [pc, #728]	; (8004030 <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x30c>)
 8003d58:	f107 0308 	add.w	r3, r7, #8
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	4611      	mov	r1, r2
 8003d60:	8019      	strh	r1, [r3, #0]
 8003d62:	3302      	adds	r3, #2
 8003d64:	0c12      	lsrs	r2, r2, #16
 8003d66:	701a      	strb	r2, [r3, #0]
			char str_z[3] = "Z:";
 8003d68:	4ab2      	ldr	r2, [pc, #712]	; (8004034 <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x310>)
 8003d6a:	1d3b      	adds	r3, r7, #4
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	4611      	mov	r1, r2
 8003d70:	8019      	strh	r1, [r3, #0]
 8003d72:	3302      	adds	r3, #2
 8003d74:	0c12      	lsrs	r2, r2, #16
 8003d76:	701a      	strb	r2, [r3, #0]

			// Acc
			ILI9341_Draw_Text(str_x, 135, 115, WHITE, 1, BLACK);
 8003d78:	f107 000c 	add.w	r0, r7, #12
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	2301      	movs	r3, #1
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d88:	2273      	movs	r2, #115	; 0x73
 8003d8a:	2187      	movs	r1, #135	; 0x87
 8003d8c:	f7fe fcb2 	bl	80026f4 <ILI9341_Draw_Text>
			ILI9341_Draw_Text(str_y, 190, 115, WHITE, 1, BLACK);
 8003d90:	f107 0008 	add.w	r0, r7, #8
 8003d94:	2300      	movs	r3, #0
 8003d96:	9301      	str	r3, [sp, #4]
 8003d98:	2301      	movs	r3, #1
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003da0:	2273      	movs	r2, #115	; 0x73
 8003da2:	21be      	movs	r1, #190	; 0xbe
 8003da4:	f7fe fca6 	bl	80026f4 <ILI9341_Draw_Text>
			ILI9341_Draw_Text(str_z, 250, 115, WHITE, 1, BLACK);
 8003da8:	1d38      	adds	r0, r7, #4
 8003daa:	2300      	movs	r3, #0
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	2301      	movs	r3, #1
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003db6:	2273      	movs	r2, #115	; 0x73
 8003db8:	21fa      	movs	r1, #250	; 0xfa
 8003dba:	f7fe fc9b 	bl	80026f4 <ILI9341_Draw_Text>

			// Gyro
			ILI9341_Draw_Text(str_x, 135, 135, WHITE, 1, BLACK);
 8003dbe:	f107 000c 	add.w	r0, r7, #12
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dce:	2287      	movs	r2, #135	; 0x87
 8003dd0:	2187      	movs	r1, #135	; 0x87
 8003dd2:	f7fe fc8f 	bl	80026f4 <ILI9341_Draw_Text>
			ILI9341_Draw_Text(str_y, 190, 135, WHITE, 1, BLACK);
 8003dd6:	f107 0008 	add.w	r0, r7, #8
 8003dda:	2300      	movs	r3, #0
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	2301      	movs	r3, #1
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003de6:	2287      	movs	r2, #135	; 0x87
 8003de8:	21be      	movs	r1, #190	; 0xbe
 8003dea:	f7fe fc83 	bl	80026f4 <ILI9341_Draw_Text>
			ILI9341_Draw_Text(str_z, 250, 135, WHITE, 1, BLACK);
 8003dee:	1d38      	adds	r0, r7, #4
 8003df0:	2300      	movs	r3, #0
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	2301      	movs	r3, #1
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dfc:	2287      	movs	r2, #135	; 0x87
 8003dfe:	21fa      	movs	r1, #250	; 0xfa
 8003e00:	f7fe fc78 	bl	80026f4 <ILI9341_Draw_Text>

			print_x_y_z_status = true;
 8003e04:	2301      	movs	r3, #1
 8003e06:	75fb      	strb	r3, [r7, #23]
		}

		mpu6050_measure();
 8003e08:	f001 ff70 	bl	8005cec <mpu6050_measure>

		char str_MPU6050[6] = {0};
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	2300      	movs	r3, #0
 8003e12:	82bb      	strh	r3, [r7, #20]

		// Acceleration
		gcvt(i2c_device.MPU6050_acceleration_Ax, 2, str_MPU6050 );
 8003e14:	4b84      	ldr	r3, [pc, #528]	; (8004028 <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x304>)
 8003e16:	ed93 7b06 	vldr	d7, [r3, #24]
 8003e1a:	f107 0310 	add.w	r3, r7, #16
 8003e1e:	4619      	mov	r1, r3
 8003e20:	2002      	movs	r0, #2
 8003e22:	eeb0 0a47 	vmov.f32	s0, s14
 8003e26:	eef0 0a67 	vmov.f32	s1, s15
 8003e2a:	f00c fdd5 	bl	80109d8 <gcvt>
		ILI9341_Draw_Text("       ", 145, 115, WHITE, 1, BLACK);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	2301      	movs	r3, #1
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e3a:	2273      	movs	r2, #115	; 0x73
 8003e3c:	2191      	movs	r1, #145	; 0x91
 8003e3e:	487e      	ldr	r0, [pc, #504]	; (8004038 <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x314>)
 8003e40:	f7fe fc58 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(str_MPU6050, 145, 115, WHITE, 1, BLACK);
 8003e44:	f107 0010 	add.w	r0, r7, #16
 8003e48:	2300      	movs	r3, #0
 8003e4a:	9301      	str	r3, [sp, #4]
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e54:	2273      	movs	r2, #115	; 0x73
 8003e56:	2191      	movs	r1, #145	; 0x91
 8003e58:	f7fe fc4c 	bl	80026f4 <ILI9341_Draw_Text>
		memset(str_MPU6050, 0 , sizeof(str_MPU6050));
 8003e5c:	f107 0310 	add.w	r3, r7, #16
 8003e60:	2206      	movs	r2, #6
 8003e62:	2100      	movs	r1, #0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f00c fe3d 	bl	8010ae4 <memset>

		gcvt(i2c_device.MPU6050_acceleration_Ay, 2, str_MPU6050 );
 8003e6a:	4b6f      	ldr	r3, [pc, #444]	; (8004028 <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x304>)
 8003e6c:	ed93 7b08 	vldr	d7, [r3, #32]
 8003e70:	f107 0310 	add.w	r3, r7, #16
 8003e74:	4619      	mov	r1, r3
 8003e76:	2002      	movs	r0, #2
 8003e78:	eeb0 0a47 	vmov.f32	s0, s14
 8003e7c:	eef0 0a67 	vmov.f32	s1, s15
 8003e80:	f00c fdaa 	bl	80109d8 <gcvt>
		ILI9341_Draw_Text("        ", 200, 115, WHITE, 1, BLACK);
 8003e84:	2300      	movs	r3, #0
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	2301      	movs	r3, #1
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e90:	2273      	movs	r2, #115	; 0x73
 8003e92:	21c8      	movs	r1, #200	; 0xc8
 8003e94:	4869      	ldr	r0, [pc, #420]	; (800403c <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x318>)
 8003e96:	f7fe fc2d 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(str_MPU6050, 200, 115, WHITE, 1, BLACK);
 8003e9a:	f107 0010 	add.w	r0, r7, #16
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eaa:	2273      	movs	r2, #115	; 0x73
 8003eac:	21c8      	movs	r1, #200	; 0xc8
 8003eae:	f7fe fc21 	bl	80026f4 <ILI9341_Draw_Text>
		memset(str_MPU6050, 0 , sizeof(str_MPU6050));
 8003eb2:	f107 0310 	add.w	r3, r7, #16
 8003eb6:	2206      	movs	r2, #6
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f00c fe12 	bl	8010ae4 <memset>

		gcvt(i2c_device.MPU6050_acceleration_Az, 2, str_MPU6050 );
 8003ec0:	4b59      	ldr	r3, [pc, #356]	; (8004028 <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x304>)
 8003ec2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8003ec6:	f107 0310 	add.w	r3, r7, #16
 8003eca:	4619      	mov	r1, r3
 8003ecc:	2002      	movs	r0, #2
 8003ece:	eeb0 0a47 	vmov.f32	s0, s14
 8003ed2:	eef0 0a67 	vmov.f32	s1, s15
 8003ed6:	f00c fd7f 	bl	80109d8 <gcvt>
		ILI9341_Draw_Text("        ", 260, 115, WHITE, 1, BLACK);
 8003eda:	2300      	movs	r3, #0
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	2301      	movs	r3, #1
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ee6:	2273      	movs	r2, #115	; 0x73
 8003ee8:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003eec:	4853      	ldr	r0, [pc, #332]	; (800403c <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x318>)
 8003eee:	f7fe fc01 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(str_MPU6050, 260, 115, WHITE, 1, BLACK);
 8003ef2:	f107 0010 	add.w	r0, r7, #16
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	2301      	movs	r3, #1
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f02:	2273      	movs	r2, #115	; 0x73
 8003f04:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003f08:	f7fe fbf4 	bl	80026f4 <ILI9341_Draw_Text>
		memset(str_MPU6050, 0 , sizeof(str_MPU6050));
 8003f0c:	f107 0310 	add.w	r3, r7, #16
 8003f10:	2206      	movs	r2, #6
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f00c fde5 	bl	8010ae4 <memset>

		// Gyroscope
		gcvt(i2c_device.MPU6050_gyro_Gx, 2, str_MPU6050 );
 8003f1a:	4b43      	ldr	r3, [pc, #268]	; (8004028 <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x304>)
 8003f1c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003f20:	f107 0310 	add.w	r3, r7, #16
 8003f24:	4619      	mov	r1, r3
 8003f26:	2002      	movs	r0, #2
 8003f28:	eeb0 0a47 	vmov.f32	s0, s14
 8003f2c:	eef0 0a67 	vmov.f32	s1, s15
 8003f30:	f00c fd52 	bl	80109d8 <gcvt>
		ILI9341_Draw_Text("       ", 145, 135, WHITE, 1, BLACK);
 8003f34:	2300      	movs	r3, #0
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	2301      	movs	r3, #1
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f40:	2287      	movs	r2, #135	; 0x87
 8003f42:	2191      	movs	r1, #145	; 0x91
 8003f44:	483c      	ldr	r0, [pc, #240]	; (8004038 <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x314>)
 8003f46:	f7fe fbd5 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(str_MPU6050, 145, 135, WHITE, 1, BLACK);
 8003f4a:	f107 0010 	add.w	r0, r7, #16
 8003f4e:	2300      	movs	r3, #0
 8003f50:	9301      	str	r3, [sp, #4]
 8003f52:	2301      	movs	r3, #1
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f5a:	2287      	movs	r2, #135	; 0x87
 8003f5c:	2191      	movs	r1, #145	; 0x91
 8003f5e:	f7fe fbc9 	bl	80026f4 <ILI9341_Draw_Text>
		memset(str_MPU6050, 0 , sizeof(str_MPU6050));
 8003f62:	f107 0310 	add.w	r3, r7, #16
 8003f66:	2206      	movs	r2, #6
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f00c fdba 	bl	8010ae4 <memset>

		gcvt(i2c_device.MPU6050_gyro_Gy, 2, str_MPU6050 );
 8003f70:	4b2d      	ldr	r3, [pc, #180]	; (8004028 <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x304>)
 8003f72:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8003f76:	f107 0310 	add.w	r3, r7, #16
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	2002      	movs	r0, #2
 8003f7e:	eeb0 0a47 	vmov.f32	s0, s14
 8003f82:	eef0 0a67 	vmov.f32	s1, s15
 8003f86:	f00c fd27 	bl	80109d8 <gcvt>
		ILI9341_Draw_Text("        ", 200, 135, WHITE, 1, BLACK);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	2301      	movs	r3, #1
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f96:	2287      	movs	r2, #135	; 0x87
 8003f98:	21c8      	movs	r1, #200	; 0xc8
 8003f9a:	4828      	ldr	r0, [pc, #160]	; (800403c <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x318>)
 8003f9c:	f7fe fbaa 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(str_MPU6050, 200, 135, WHITE, 1, BLACK);
 8003fa0:	f107 0010 	add.w	r0, r7, #16
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9301      	str	r3, [sp, #4]
 8003fa8:	2301      	movs	r3, #1
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fb0:	2287      	movs	r2, #135	; 0x87
 8003fb2:	21c8      	movs	r1, #200	; 0xc8
 8003fb4:	f7fe fb9e 	bl	80026f4 <ILI9341_Draw_Text>
		memset(str_MPU6050, 0 , sizeof(str_MPU6050));
 8003fb8:	f107 0310 	add.w	r3, r7, #16
 8003fbc:	2206      	movs	r2, #6
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f00c fd8f 	bl	8010ae4 <memset>

		gcvt(i2c_device.MPU6050_gyro_Gz, 2, str_MPU6050 );
 8003fc6:	4b18      	ldr	r3, [pc, #96]	; (8004028 <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x304>)
 8003fc8:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8003fcc:	f107 0310 	add.w	r3, r7, #16
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	2002      	movs	r0, #2
 8003fd4:	eeb0 0a47 	vmov.f32	s0, s14
 8003fd8:	eef0 0a67 	vmov.f32	s1, s15
 8003fdc:	f00c fcfc 	bl	80109d8 <gcvt>
		ILI9341_Draw_Text("        ", 260, 135, WHITE, 1, BLACK);
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fec:	2287      	movs	r2, #135	; 0x87
 8003fee:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003ff2:	4812      	ldr	r0, [pc, #72]	; (800403c <print_data_from_MPU6050_Acc_and_Gyro_on_lcd+0x318>)
 8003ff4:	f7fe fb7e 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text(str_MPU6050, 260, 135, WHITE, 1, BLACK);
 8003ff8:	f107 0010 	add.w	r0, r7, #16
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	2301      	movs	r3, #1
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004008:	2287      	movs	r2, #135	; 0x87
 800400a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800400e:	f7fe fb71 	bl	80026f4 <ILI9341_Draw_Text>
		memset(str_MPU6050, 0 , sizeof(str_MPU6050));
 8004012:	f107 0310 	add.w	r3, r7, #16
 8004016:	2206      	movs	r2, #6
 8004018:	2100      	movs	r1, #0
 800401a:	4618      	mov	r0, r3
 800401c:	f00c fd62 	bl	8010ae4 <memset>
	}
}
 8004020:	bf00      	nop
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	200004a8 	.word	0x200004a8
 800402c:	08013984 	.word	0x08013984
 8004030:	08013988 	.word	0x08013988
 8004034:	0801398c 	.word	0x0801398c
 8004038:	08013970 	.word	0x08013970
 800403c:	08013978 	.word	0x08013978

08004040 <print_data_from_BME280_on_lcd>:
// -----------------------------------------------------------------------
void print_data_from_BME280_on_lcd(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b098      	sub	sp, #96	; 0x60
 8004044:	af02      	add	r7, sp, #8
	if(i2c_device.BME280_ready_status == true)
 8004046:	4b49      	ldr	r3, [pc, #292]	; (800416c <print_data_from_BME280_on_lcd+0x12c>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 808a 	beq.w	8004164 <print_data_from_BME280_on_lcd+0x124>
	{
		bme280_measure();
 8004050:	f001 fecc 	bl	8005dec <bme280_measure>

		char str_t_BME280[20] = {0};
 8004054:	2300      	movs	r3, #0
 8004056:	63bb      	str	r3, [r7, #56]	; 0x38
 8004058:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	60da      	str	r2, [r3, #12]
		char str_h_BME280[20] = {0};
 8004066:	2300      	movs	r3, #0
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
 800406a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	609a      	str	r2, [r3, #8]
 8004076:	60da      	str	r2, [r3, #12]
		char str_p_BME280[20] = {0};
 8004078:	2300      	movs	r3, #0
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	f107 0314 	add.w	r3, r7, #20
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	609a      	str	r2, [r3, #8]
 8004088:	60da      	str	r2, [r3, #12]

		int temp = i2c_device.BME280_temperature;
 800408a:	4b38      	ldr	r3, [pc, #224]	; (800416c <print_data_from_BME280_on_lcd+0x12c>)
 800408c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004094:	ee17 3a90 	vmov	r3, s15
 8004098:	657b      	str	r3, [r7, #84]	; 0x54
		int hum = i2c_device.BME280_humidity;
 800409a:	4b34      	ldr	r3, [pc, #208]	; (800416c <print_data_from_BME280_on_lcd+0x12c>)
 800409c:	edd3 7a03 	vldr	s15, [r3, #12]
 80040a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040a4:	ee17 3a90 	vmov	r3, s15
 80040a8:	653b      	str	r3, [r7, #80]	; 0x50
		int pres = i2c_device.BME280_preasure;
 80040aa:	4b30      	ldr	r3, [pc, #192]	; (800416c <print_data_from_BME280_on_lcd+0x12c>)
 80040ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80040b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040b4:	ee17 3a90 	vmov	r3, s15
 80040b8:	64fb      	str	r3, [r7, #76]	; 0x4c

		itoa(temp, str_t_BME280, 10);
 80040ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80040be:	220a      	movs	r2, #10
 80040c0:	4619      	mov	r1, r3
 80040c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80040c4:	f00c fcee 	bl	8010aa4 <itoa>
		itoa(hum, str_h_BME280, 10);
 80040c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040cc:	220a      	movs	r2, #10
 80040ce:	4619      	mov	r1, r3
 80040d0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80040d2:	f00c fce7 	bl	8010aa4 <itoa>
		itoa(pres, str_p_BME280, 10);
 80040d6:	f107 0310 	add.w	r3, r7, #16
 80040da:	220a      	movs	r2, #10
 80040dc:	4619      	mov	r1, r3
 80040de:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80040e0:	f00c fce0 	bl	8010aa4 <itoa>

		char cels_s_BME280[7] = " C ";
 80040e4:	4b22      	ldr	r3, [pc, #136]	; (8004170 <print_data_from_BME280_on_lcd+0x130>)
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	f107 030c 	add.w	r3, r7, #12
 80040ec:	2100      	movs	r1, #0
 80040ee:	460a      	mov	r2, r1
 80040f0:	801a      	strh	r2, [r3, #0]
 80040f2:	460a      	mov	r2, r1
 80040f4:	709a      	strb	r2, [r3, #2]
		char hum_s_BME280[4] = "% ";
 80040f6:	f242 0325 	movw	r3, #8229	; 0x2025
 80040fa:	607b      	str	r3, [r7, #4]
		char pres_s_BME280[4] = "P";
 80040fc:	2350      	movs	r3, #80	; 0x50
 80040fe:	603b      	str	r3, [r7, #0]

		strcat(str_t_BME280, cels_s_BME280);
 8004100:	f107 0208 	add.w	r2, r7, #8
 8004104:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f00c fdac 	bl	8010c68 <strcat>
		strcat(str_h_BME280, hum_s_BME280);
 8004110:	1d3a      	adds	r2, r7, #4
 8004112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004116:	4611      	mov	r1, r2
 8004118:	4618      	mov	r0, r3
 800411a:	f00c fda5 	bl	8010c68 <strcat>
		strcat(str_p_BME280, pres_s_BME280);
 800411e:	463a      	mov	r2, r7
 8004120:	f107 0310 	add.w	r3, r7, #16
 8004124:	4611      	mov	r1, r2
 8004126:	4618      	mov	r0, r3
 8004128:	f00c fd9e 	bl	8010c68 <strcat>

		strcat(str_t_BME280, str_h_BME280);
 800412c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004130:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004134:	4611      	mov	r1, r2
 8004136:	4618      	mov	r0, r3
 8004138:	f00c fd96 	bl	8010c68 <strcat>
		strcat(str_t_BME280, str_p_BME280);
 800413c:	f107 0210 	add.w	r2, r7, #16
 8004140:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004144:	4611      	mov	r1, r2
 8004146:	4618      	mov	r0, r3
 8004148:	f00c fd8e 	bl	8010c68 <strcat>

		ILI9341_Draw_Text(str_t_BME280, 135, 90, WHITE, 2, BLACK);
 800414c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8004150:	2300      	movs	r3, #0
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	2302      	movs	r3, #2
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800415c:	225a      	movs	r2, #90	; 0x5a
 800415e:	2187      	movs	r1, #135	; 0x87
 8004160:	f7fe fac8 	bl	80026f4 <ILI9341_Draw_Text>
	}
}
 8004164:	bf00      	nop
 8004166:	3758      	adds	r7, #88	; 0x58
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	200004a8 	.word	0x200004a8
 8004170:	00204320 	.word	0x00204320

08004174 <getPressKey>:
 ILI9341_Draw_Text( "                           ", 10, 60, WHITE, 2, BLACK); // Cleaning one row LCD
 Menu_Navigate(&Menu_3);  // Back to menu 3
}
// -----------------------------------------------------------------------
static uint8_t getPressKey()		// 3x4 keyboard
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af02      	add	r7, sp, #8
	char digit = '\0';
 800417a:	2300      	movs	r3, #0
 800417c:	75fb      	strb	r3, [r7, #23]
	char buff_lcd[20] = "KEY: ";
 800417e:	4a48      	ldr	r2, [pc, #288]	; (80042a0 <getPressKey+0x12c>)
 8004180:	463b      	mov	r3, r7
 8004182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004186:	6018      	str	r0, [r3, #0]
 8004188:	3304      	adds	r3, #4
 800418a:	8019      	strh	r1, [r3, #0]
 800418c:	1dbb      	adds	r3, r7, #6
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	609a      	str	r2, [r3, #8]
 8004196:	819a      	strh	r2, [r3, #12]
	digit = read_one_digit_from_keyboard();
 8004198:	f7fc ff24 	bl	8000fe4 <read_one_digit_from_keyboard>
 800419c:	4603      	mov	r3, r0
 800419e:	75fb      	strb	r3, [r7, #23]
	switch(digit)
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
 80041a2:	3b32      	subs	r3, #50	; 0x32
 80041a4:	2b06      	cmp	r3, #6
 80041a6:	d875      	bhi.n	8004294 <getPressKey+0x120>
 80041a8:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <getPressKey+0x3c>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041f5 	.word	0x080041f5
 80041b4:	08004295 	.word	0x08004295
 80041b8:	080041cd 	.word	0x080041cd
 80041bc:	0800426d 	.word	0x0800426d
 80041c0:	08004245 	.word	0x08004245
 80041c4:	08004295 	.word	0x08004295
 80041c8:	0800421d 	.word	0x0800421d
	{
		case '4':
		{
			strncat(buff_lcd, &digit, 1);
 80041cc:	f107 0117 	add.w	r1, r7, #23
 80041d0:	463b      	mov	r3, r7
 80041d2:	2201      	movs	r2, #1
 80041d4:	4618      	mov	r0, r3
 80041d6:	f00c fd56 	bl	8010c86 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80041da:	4638      	mov	r0, r7
 80041dc:	2300      	movs	r3, #0
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	2302      	movs	r3, #2
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041e8:	2200      	movs	r2, #0
 80041ea:	2100      	movs	r1, #0
 80041ec:	f7fe fa82 	bl	80026f4 <ILI9341_Draw_Text>
			return BUTTON_LEFT;
 80041f0:	2300      	movs	r3, #0
 80041f2:	e050      	b.n	8004296 <getPressKey+0x122>
		}
		case '2':
		{
			strncat(buff_lcd, &digit, 1);
 80041f4:	f107 0117 	add.w	r1, r7, #23
 80041f8:	463b      	mov	r3, r7
 80041fa:	2201      	movs	r2, #1
 80041fc:	4618      	mov	r0, r3
 80041fe:	f00c fd42 	bl	8010c86 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8004202:	4638      	mov	r0, r7
 8004204:	2300      	movs	r3, #0
 8004206:	9301      	str	r3, [sp, #4]
 8004208:	2302      	movs	r3, #2
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004210:	2200      	movs	r2, #0
 8004212:	2100      	movs	r1, #0
 8004214:	f7fe fa6e 	bl	80026f4 <ILI9341_Draw_Text>
			return BUTTON_UP;
 8004218:	2301      	movs	r3, #1
 800421a:	e03c      	b.n	8004296 <getPressKey+0x122>
		}
		case '8':
		{
			strncat(buff_lcd, &digit, 1);
 800421c:	f107 0117 	add.w	r1, r7, #23
 8004220:	463b      	mov	r3, r7
 8004222:	2201      	movs	r2, #1
 8004224:	4618      	mov	r0, r3
 8004226:	f00c fd2e 	bl	8010c86 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 800422a:	4638      	mov	r0, r7
 800422c:	2300      	movs	r3, #0
 800422e:	9301      	str	r3, [sp, #4]
 8004230:	2302      	movs	r3, #2
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004238:	2200      	movs	r2, #0
 800423a:	2100      	movs	r1, #0
 800423c:	f7fe fa5a 	bl	80026f4 <ILI9341_Draw_Text>
			return BUTTON_DOWN;
 8004240:	2302      	movs	r3, #2
 8004242:	e028      	b.n	8004296 <getPressKey+0x122>
		}
		case '6':
		{
			strncat(buff_lcd, &digit, 1);
 8004244:	f107 0117 	add.w	r1, r7, #23
 8004248:	463b      	mov	r3, r7
 800424a:	2201      	movs	r2, #1
 800424c:	4618      	mov	r0, r3
 800424e:	f00c fd1a 	bl	8010c86 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8004252:	4638      	mov	r0, r7
 8004254:	2300      	movs	r3, #0
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	2302      	movs	r3, #2
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004260:	2200      	movs	r2, #0
 8004262:	2100      	movs	r1, #0
 8004264:	f7fe fa46 	bl	80026f4 <ILI9341_Draw_Text>
			return BUTTON_RIGHT;
 8004268:	2303      	movs	r3, #3
 800426a:	e014      	b.n	8004296 <getPressKey+0x122>
		}
		case '5':
		{
			strncat(buff_lcd, &digit, 1);
 800426c:	f107 0117 	add.w	r1, r7, #23
 8004270:	463b      	mov	r3, r7
 8004272:	2201      	movs	r2, #1
 8004274:	4618      	mov	r0, r3
 8004276:	f00c fd06 	bl	8010c86 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 800427a:	4638      	mov	r0, r7
 800427c:	2300      	movs	r3, #0
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	2302      	movs	r3, #2
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004288:	2200      	movs	r2, #0
 800428a:	2100      	movs	r1, #0
 800428c:	f7fe fa32 	bl	80026f4 <ILI9341_Draw_Text>
			return BUTTON_SELECT;
 8004290:	2304      	movs	r3, #4
 8004292:	e000      	b.n	8004296 <getPressKey+0x122>
		}
		default:
			return BUTTON_NOTHING;
 8004294:	23ff      	movs	r3, #255	; 0xff
			break;
	}
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	080139dc 	.word	0x080139dc

080042a4 <Generic_Write>:
// -----------------------------------------------------------------------
// print debug text on LCD
void Generic_Write(const char* Text)		// Print "Text" data on LCD
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	6078      	str	r0, [r7, #4]
	if (Text)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d015      	beq.n	80042de <Generic_Write+0x3a>
	{
		ILI9341_Draw_Text( "                                 ", 10, 60, WHITE, 1, BLACK);
 80042b2:	2300      	movs	r3, #0
 80042b4:	9301      	str	r3, [sp, #4]
 80042b6:	2301      	movs	r3, #1
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042be:	223c      	movs	r2, #60	; 0x3c
 80042c0:	210a      	movs	r1, #10
 80042c2:	4809      	ldr	r0, [pc, #36]	; (80042e8 <Generic_Write+0x44>)
 80042c4:	f7fe fa16 	bl	80026f4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text( Text, 10, 60, WHITE, 1, BLACK);
 80042c8:	2300      	movs	r3, #0
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	2301      	movs	r3, #1
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042d4:	223c      	movs	r2, #60	; 0x3c
 80042d6:	210a      	movs	r1, #10
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7fe fa0b 	bl	80026f4 <ILI9341_Draw_Text>
	}
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	080139f0 	.word	0x080139f0

080042ec <Menu_GetCurrentMenu>:
// -----------------------------------------------------------------------
Menu_Item_t* Menu_GetCurrentMenu(void)		// Повертає поточни вибраний пункт меню
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
	return CurrentMenuItem;
 80042f0:	4b03      	ldr	r3, [pc, #12]	; (8004300 <Menu_GetCurrentMenu+0x14>)
 80042f2:	681b      	ldr	r3, [r3, #0]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	2000000c 	.word	0x2000000c

08004304 <Menu_Navigate>:
// -----------------------------------------------------------------------
// Переходи по меню
// in: ПОказник на апсолютний пункт меню, для вибору
// MENU_PARENT, MENU_CHILD, MENU_NEXT або  MENU_PREVIOUS
void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a11      	ldr	r2, [pc, #68]	; (8004354 <Menu_Navigate+0x50>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d01a      	beq.n	800434a <Menu_Navigate+0x46>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d017      	beq.n	800434a <Menu_Navigate+0x46>
	{
		return;		// Exit
	}

	CurrentMenuItem = NewMenu;    // Передане маню стає вибране
 800431a:	4a0f      	ldr	r2, [pc, #60]	; (8004358 <Menu_Navigate+0x54>)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6013      	str	r3, [r2, #0]

	if (MenuWriteFunc)    // If   MenuWriteFunc  != NULL  ???????
 8004320:	4b0e      	ldr	r3, [pc, #56]	; (800435c <Menu_Navigate+0x58>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d006      	beq.n	8004336 <Menu_Navigate+0x32>
	{
		MenuWriteFunc(CurrentMenuItem->Text);			// Print Text string on LCD
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <Menu_Navigate+0x58>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a0a      	ldr	r2, [pc, #40]	; (8004358 <Menu_Navigate+0x54>)
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	3218      	adds	r2, #24
 8004332:	4610      	mov	r0, r2
 8004334:	4798      	blx	r3
	}

	//   void (*SelectCallback)(void) - Creating pointer on function
	// Write  CurrentMenuItem->SelectCallback in  void (*SelectCallback)(void) pinter
	void (*SelectCallback)(void) = CurrentMenuItem->SelectCallback;
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <Menu_Navigate+0x54>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	60fb      	str	r3, [r7, #12]

	if (SelectCallback)		// If SelectCallback != NULL
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <Menu_Navigate+0x48>
	{
		SelectCallback();   // It does - CurrentMenuItem->SelectCallback;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4798      	blx	r3
 8004348:	e000      	b.n	800434c <Menu_Navigate+0x48>
		return;		// Exit
 800434a:	bf00      	nop
	}
}
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	08013c9c 	.word	0x08013c9c
 8004358:	2000000c 	.word	0x2000000c
 800435c:	20000324 	.word	0x20000324

08004360 <Menu_SetGenericWriteCallback>:
 пунктів меню. В рамках цієї функції зворотного виклику користувач повинен
 реалізувати код для відображення поточного тексту меню, що зберігається
 в  ref MENU_ITEM_STORAGE пам'яті.. */
// In: вказівник на функцію зворотного виклику для виконання кожного вибраного пункту меню.
void Menu_SetGenericWriteCallback(void (*WriteFunc)(const char* Text))    //  What doing this function??????? <<<<<<<<<<<
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	MenuWriteFunc = WriteFunc;  		// Запис показника функції WriteFunc в
 8004368:	4a05      	ldr	r2, [pc, #20]	; (8004380 <Menu_SetGenericWriteCallback+0x20>)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6013      	str	r3, [r2, #0]
	//  показник на функцію під назвою MenuWriteFunc
	Menu_Navigate(CurrentMenuItem);      // Передача цього показника в функцію Menu_Navigate
 800436e:	4b05      	ldr	r3, [pc, #20]	; (8004384 <Menu_SetGenericWriteCallback+0x24>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff ffc6 	bl	8004304 <Menu_Navigate>
}
 8004378:	bf00      	nop
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	20000324 	.word	0x20000324
 8004384:	2000000c 	.word	0x2000000c

08004388 <Menu_EnterCurrentItem>:
// -----------------------------------------------------------------------
/* Функція входить у вибраний на даний момент пункт меню, виконуючи налаштовану
   функцію зворотного дзвінка (якщо така є) */
void Menu_EnterCurrentItem(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 800438e:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <Menu_EnterCurrentItem+0x34>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a0b      	ldr	r2, [pc, #44]	; (80043c0 <Menu_EnterCurrentItem+0x38>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00d      	beq.n	80043b4 <Menu_EnterCurrentItem+0x2c>
 8004398:	4b08      	ldr	r3, [pc, #32]	; (80043bc <Menu_EnterCurrentItem+0x34>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d009      	beq.n	80043b4 <Menu_EnterCurrentItem+0x2c>
	{
		return;
	}

	void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <Menu_EnterCurrentItem+0x34>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	607b      	str	r3, [r7, #4]
	if (EnterCallback)		// If EnterCallback != NULL
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <Menu_EnterCurrentItem+0x2e>
	{
		EnterCallback();
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4798      	blx	r3
 80043b2:	e000      	b.n	80043b6 <Menu_EnterCurrentItem+0x2e>
		return;
 80043b4:	bf00      	nop
	}

}// -----------------------------------------------------------------------
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	2000000c 	.word	0x2000000c
 80043c0:	08013c9c 	.word	0x08013c9c

080043c4 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	int i =0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 80043d0:	e036      	b.n	8004440 <speed_test_LCD+0x7c>
	{
		i ++;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	3301      	adds	r3, #1
 80043d6:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80043ec:	4819      	ldr	r0, [pc, #100]	; (8004454 <speed_test_LCD+0x90>)
 80043ee:	f007 fde2 	bl	800bfb6 <HAL_RNG_GetRandomNumber>
 80043f2:	6138      	str	r0, [r7, #16]
		xr = random_num;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80043f8:	4816      	ldr	r0, [pc, #88]	; (8004454 <speed_test_LCD+0x90>)
 80043fa:	f007 fddc 	bl	800bfb6 <HAL_RNG_GetRandomNumber>
 80043fe:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8004404:	4813      	ldr	r0, [pc, #76]	; (8004454 <speed_test_LCD+0x90>)
 8004406:	f007 fdd6 	bl	800bfb6 <HAL_RNG_GetRandomNumber>
 800440a:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8004410:	4810      	ldr	r0, [pc, #64]	; (8004454 <speed_test_LCD+0x90>)
 8004412:	f007 fdd0 	bl	800bfb6 <HAL_RNG_GetRandomNumber>
 8004416:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 800441c:	89fb      	ldrh	r3, [r7, #14]
 800441e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004422:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8004424:	89bb      	ldrh	r3, [r7, #12]
 8004426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442a:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 800442c:	897b      	ldrh	r3, [r7, #10]
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8004434:	893b      	ldrh	r3, [r7, #8]
 8004436:	897a      	ldrh	r2, [r7, #10]
 8004438:	89b9      	ldrh	r1, [r7, #12]
 800443a:	89f8      	ldrh	r0, [r7, #14]
 800443c:	f7fe f83c 	bl	80024b8 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	429a      	cmp	r2, r3
 8004446:	ddc4      	ble.n	80043d2 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000560 	.word	0x20000560

08004458 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8004460:	2305      	movs	r3, #5
 8004462:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f001 f9ef 	bl	800584c <null_ptr_check>
 800446e:	4603      	mov	r3, r0
 8004470:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8004472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d133      	bne.n	80044e2 <bme280_init+0x8a>
		while (try_count) {
 800447a:	e028      	b.n	80044ce <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 800447c:	f107 010d 	add.w	r1, r7, #13
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	20d0      	movs	r0, #208	; 0xd0
 8004486:	f000 f832 	bl	80044ee <bme280_get_regs>
 800448a:	4603      	mov	r3, r0
 800448c:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 800448e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d114      	bne.n	80044c0 <bme280_init+0x68>
 8004496:	7b7b      	ldrb	r3, [r7, #13]
 8004498:	2b60      	cmp	r3, #96	; 0x60
 800449a:	d111      	bne.n	80044c0 <bme280_init+0x68>
				dev->chip_id = chip_id;
 800449c:	7b7a      	ldrb	r2, [r7, #13]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f976 	bl	8004794 <bme280_soft_reset>
 80044a8:	4603      	mov	r3, r0
 80044aa:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 80044ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d110      	bne.n	80044d6 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f001 f83f 	bl	8005538 <get_calib_data>
 80044ba:	4603      	mov	r3, r0
 80044bc:	73fb      	strb	r3, [r7, #15]
				}
				break;
 80044be:	e00a      	b.n	80044d6 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2001      	movs	r0, #1
 80044c6:	4798      	blx	r3
			--try_count;
 80044c8:	7bbb      	ldrb	r3, [r7, #14]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 80044ce:	7bbb      	ldrb	r3, [r7, #14]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1d3      	bne.n	800447c <bme280_init+0x24>
 80044d4:	e000      	b.n	80044d8 <bme280_init+0x80>
				break;
 80044d6:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 80044d8:	7bbb      	ldrb	r3, [r7, #14]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 80044de:	23fe      	movs	r3, #254	; 0xfe
 80044e0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80044e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 80044ee:	b590      	push	{r4, r7, lr}
 80044f0:	b087      	sub	sp, #28
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607b      	str	r3, [r7, #4]
 80044f8:	4603      	mov	r3, r0
 80044fa:	73fb      	strb	r3, [r7, #15]
 80044fc:	4613      	mov	r3, r2
 80044fe:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f001 f9a3 	bl	800584c <null_ptr_check>
 8004506:	4603      	mov	r3, r0
 8004508:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800450a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d117      	bne.n	8004542 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	789b      	ldrb	r3, [r3, #2]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d003      	beq.n	8004522 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004520:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685c      	ldr	r4, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	7858      	ldrb	r0, [r3, #1]
 800452a:	89bb      	ldrh	r3, [r7, #12]
 800452c:	7bf9      	ldrb	r1, [r7, #15]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	47a0      	blx	r4
 8004532:	4603      	mov	r3, r0
 8004534:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8004536:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 800453e:	23fc      	movs	r3, #252	; 0xfc
 8004540:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8004542:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004546:	4618      	mov	r0, r3
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	bd90      	pop	{r4, r7, pc}

0800454e <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 800454e:	b590      	push	{r4, r7, lr}
 8004550:	b08d      	sub	sp, #52	; 0x34
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	603b      	str	r3, [r7, #0]
 800455a:	4613      	mov	r3, r2
 800455c:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	2b0a      	cmp	r3, #10
 8004562:	d901      	bls.n	8004568 <bme280_set_regs+0x1a>
		len = 10;
 8004564:	230a      	movs	r3, #10
 8004566:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004568:	6838      	ldr	r0, [r7, #0]
 800456a:	f001 f96f 	bl	800584c <null_ptr_check>
 800456e:	4603      	mov	r3, r0
 8004570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8004574:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004578:	2b00      	cmp	r3, #0
 800457a:	d154      	bne.n	8004626 <bme280_set_regs+0xd8>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d051      	beq.n	8004626 <bme280_set_regs+0xd8>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d04e      	beq.n	8004626 <bme280_set_regs+0xd8>
		if (len != 0) {
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d047      	beq.n	800461e <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	789b      	ldrb	r3, [r3, #2]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d01a      	beq.n	80045d2 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800459c:	2300      	movs	r3, #0
 800459e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045a2:	e011      	b.n	80045c8 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80045a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045b2:	68f9      	ldr	r1, [r7, #12]
 80045b4:	440b      	add	r3, r1
 80045b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80045be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045c2:	3301      	adds	r3, #1
 80045c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045c8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80045cc:	79fb      	ldrb	r3, [r7, #7]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d3e8      	bcc.n	80045a4 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d90b      	bls.n	80045f0 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80045d8:	79fb      	ldrb	r3, [r7, #7]
 80045da:	f107 0114 	add.w	r1, r7, #20
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 ffee 	bl	80055c2 <interleave_reg_addr>
				temp_len = len * 2;
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80045ee:	e001      	b.n	80045f4 <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689c      	ldr	r4, [r3, #8]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	7858      	ldrb	r0, [r3, #1]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	7819      	ldrb	r1, [r3, #0]
 8004600:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004602:	f107 0214 	add.w	r2, r7, #20
 8004606:	47a0      	blx	r4
 8004608:	4603      	mov	r3, r0
 800460a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 800460e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 8004616:	23fc      	movs	r3, #252	; 0xfc
 8004618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 800461c:	e007      	b.n	800462e <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 800461e:	23fd      	movs	r3, #253	; 0xfd
 8004620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8004624:	e003      	b.n	800462e <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8004626:	23ff      	movs	r3, #255	; 0xff
 8004628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800462c:	e000      	b.n	8004630 <bme280_set_regs+0xe2>
		if (len != 0) {
 800462e:	bf00      	nop
	}


	return rslt;
 8004630:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004634:	4618      	mov	r0, r3
 8004636:	3734      	adds	r7, #52	; 0x34
 8004638:	46bd      	mov	sp, r7
 800463a:	bd90      	pop	{r4, r7, pc}

0800463c <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	6039      	str	r1, [r7, #0]
 8004646:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004648:	6838      	ldr	r0, [r7, #0]
 800464a:	f001 f8ff 	bl	800584c <null_ptr_check>
 800464e:	4603      	mov	r3, r0
 8004650:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8004652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d13f      	bne.n	80046da <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 800465a:	f107 030e 	add.w	r3, r7, #14
 800465e:	6839      	ldr	r1, [r7, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f000 f874 	bl	800474e <bme280_get_sensor_mode>
 8004666:	4603      	mov	r3, r0
 8004668:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 800466a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d107      	bne.n	8004682 <bme280_set_sensor_settings+0x46>
 8004672:	7bbb      	ldrb	r3, [r7, #14]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d004      	beq.n	8004682 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8004678:	6838      	ldr	r0, [r7, #0]
 800467a:	f000 fb4e 	bl	8004d1a <put_device_to_sleep>
 800467e:	4603      	mov	r3, r0
 8004680:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8004682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d127      	bne.n	80046da <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	4619      	mov	r1, r3
 800468e:	2007      	movs	r0, #7
 8004690:	f001 f8c0 	bl	8005814 <are_settings_changed>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 f98a 	bl	80049be <set_osr_settings>
 80046aa:	4603      	mov	r3, r0
 80046ac:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80046ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d111      	bne.n	80046da <bme280_set_sensor_settings+0x9e>
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	4619      	mov	r1, r3
 80046ba:	2018      	movs	r0, #24
 80046bc:	f001 f8aa 	bl	8005814 <are_settings_changed>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d009      	beq.n	80046da <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fa11 	bl	8004af8 <set_filter_standby_settings>
 80046d6:	4603      	mov	r3, r0
 80046d8:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80046da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	4603      	mov	r3, r0
 80046ee:	6039      	str	r1, [r7, #0]
 80046f0:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80046f2:	6838      	ldr	r0, [r7, #0]
 80046f4:	f001 f8aa 	bl	800584c <null_ptr_check>
 80046f8:	4603      	mov	r3, r0
 80046fa:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80046fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d11e      	bne.n	8004742 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8004704:	f107 030e 	add.w	r3, r7, #14
 8004708:	6839      	ldr	r1, [r7, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f81f 	bl	800474e <bme280_get_sensor_mode>
 8004710:	4603      	mov	r3, r0
 8004712:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8004714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d107      	bne.n	800472c <bme280_set_sensor_mode+0x46>
 800471c:	7bbb      	ldrb	r3, [r7, #14]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d004      	beq.n	800472c <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8004722:	6838      	ldr	r0, [r7, #0]
 8004724:	f000 faf9 	bl	8004d1a <put_device_to_sleep>
 8004728:	4603      	mov	r3, r0
 800472a:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 800472c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d106      	bne.n	8004742 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	6839      	ldr	r1, [r7, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fabb 	bl	8004cb4 <write_power_mode>
 800473e:	4603      	mov	r3, r0
 8004740:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8004742:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004758:	6838      	ldr	r0, [r7, #0]
 800475a:	f001 f877 	bl	800584c <null_ptr_check>
 800475e:	4603      	mov	r3, r0
 8004760:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8004762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10e      	bne.n	8004788 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2201      	movs	r2, #1
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	20f4      	movs	r0, #244	; 0xf4
 8004772:	f7ff febc 	bl	80044ee <bme280_get_regs>
 8004776:	4603      	mov	r3, r0
 8004778:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	b2da      	uxtb	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8004788:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 800479c:	23e0      	movs	r3, #224	; 0xe0
 800479e:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 80047a0:	23b6      	movs	r3, #182	; 0xb6
 80047a2:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f001 f851 	bl	800584c <null_ptr_check>
 80047aa:	4603      	mov	r3, r0
 80047ac:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80047ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10d      	bne.n	80047d2 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80047b6:	f107 010d 	add.w	r1, r7, #13
 80047ba:	f107 000e 	add.w	r0, r7, #14
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f7ff fec4 	bl	800454e <bme280_set_regs>
 80047c6:	4603      	mov	r3, r0
 80047c8:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	2002      	movs	r0, #2
 80047d0:	4798      	blx	r3
	}

	return rslt;
 80047d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b08a      	sub	sp, #40	; 0x28
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	4603      	mov	r3, r0
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	607a      	str	r2, [r7, #4]
 80047ea:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80047ec:	2300      	movs	r3, #0
 80047ee:	61fb      	str	r3, [r7, #28]
 80047f0:	2300      	movs	r3, #0
 80047f2:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80047f4:	f107 0310 	add.w	r3, r7, #16
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f001 f823 	bl	800584c <null_ptr_check>
 8004806:	4603      	mov	r3, r0
 8004808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 800480c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004810:	2b00      	cmp	r3, #0
 8004812:	d124      	bne.n	800485e <bme280_get_sensor_data+0x80>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d021      	beq.n	800485e <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800481a:	f107 011c 	add.w	r1, r7, #28
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2208      	movs	r2, #8
 8004822:	20f7      	movs	r0, #247	; 0xf7
 8004824:	f7ff fe63 	bl	80044ee <bme280_get_regs>
 8004828:	4603      	mov	r3, r0
 800482a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 800482e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004832:	2b00      	cmp	r3, #0
 8004834:	d116      	bne.n	8004864 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8004836:	f107 0210 	add.w	r2, r7, #16
 800483a:	f107 031c 	add.w	r3, r7, #28
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f000 f815 	bl	8004870 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3310      	adds	r3, #16
 800484a:	f107 0110 	add.w	r1, r7, #16
 800484e:	7bf8      	ldrb	r0, [r7, #15]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	f000 f853 	bl	80048fc <bme280_compensate_data>
 8004856:	4603      	mov	r3, r0
 8004858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 800485c:	e002      	b.n	8004864 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800485e:	23ff      	movs	r3, #255	; 0xff
 8004860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8004864:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004868:	4618      	mov	r0, r3
 800486a:	3728      	adds	r7, #40	; 0x28
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	031b      	lsls	r3, r3, #12
 8004880:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3301      	adds	r3, #1
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3302      	adds	r3, #2
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	b2db      	uxtb	r3, r3
 8004896:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	431a      	orrs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	431a      	orrs	r2, r3
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3303      	adds	r3, #3
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	031b      	lsls	r3, r3, #12
 80048ae:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3305      	adds	r3, #5
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	091b      	lsrs	r3, r3, #4
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3306      	adds	r3, #6
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3307      	adds	r3, #7
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	609a      	str	r2, [r3, #8]
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	603b      	str	r3, [r7, #0]
 8004908:	4603      	mov	r3, r0
 800490a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d04b      	beq.n	80049ae <bme280_compensate_data+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d048      	beq.n	80049ae <bme280_compensate_data+0xb2>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d045      	beq.n	80049ae <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	68b8      	ldr	r0, [r7, #8]
 800495a:	f000 fa2b 	bl	8004db4 <compensate_temperature>
 800495e:	eeb0 7a40 	vmov.f32	s14, s0
 8004962:	eef0 7a60 	vmov.f32	s15, s1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8004976:	6839      	ldr	r1, [r7, #0]
 8004978:	68b8      	ldr	r0, [r7, #8]
 800497a:	f000 faed 	bl	8004f58 <compensate_pressure>
 800497e:	eeb0 7a40 	vmov.f32	s14, s0
 8004982:	eef0 7a60 	vmov.f32	s15, s1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00d      	beq.n	80049b2 <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8004996:	6839      	ldr	r1, [r7, #0]
 8004998:	68b8      	ldr	r0, [r7, #8]
 800499a:	f000 fcad 	bl	80052f8 <compensate_humidity>
 800499e:	eeb0 7a40 	vmov.f32	s14, s0
 80049a2:	eef0 7a60 	vmov.f32	s15, s1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 80049ac:	e001      	b.n	80049b2 <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80049ae:	23ff      	movs	r3, #255	; 0xff
 80049b0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80049b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b086      	sub	sp, #24
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	4603      	mov	r3, r0
 80049c6:	60b9      	str	r1, [r7, #8]
 80049c8:	607a      	str	r2, [r7, #4]
 80049ca:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80049cc:	2301      	movs	r3, #1
 80049ce:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	68b8      	ldr	r0, [r7, #8]
 80049de:	f000 f815 	bl	8004a0c <set_osr_humidity_settings>
 80049e2:	4603      	mov	r3, r0
 80049e4:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 f842 	bl	8004a80 <set_osr_press_temp_settings>
 80049fc:	4603      	mov	r3, r0
 80049fe:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8004a00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8004a16:	23f2      	movs	r3, #242	; 0xf2
 8004a18:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	789b      	ldrb	r3, [r3, #2]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8004a26:	f107 010e 	add.w	r1, r7, #14
 8004a2a:	f107 000c 	add.w	r0, r7, #12
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f7ff fd8c 	bl	800454e <bme280_set_regs>
 8004a36:	4603      	mov	r3, r0
 8004a38:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8004a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d118      	bne.n	8004a74 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8004a42:	23f4      	movs	r3, #244	; 0xf4
 8004a44:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8004a46:	7b38      	ldrb	r0, [r7, #12]
 8004a48:	f107 010d 	add.w	r1, r7, #13
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f7ff fd4d 	bl	80044ee <bme280_get_regs>
 8004a54:	4603      	mov	r3, r0
 8004a56:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8004a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d109      	bne.n	8004a74 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8004a60:	f107 010d 	add.w	r1, r7, #13
 8004a64:	f107 000c 	add.w	r0, r7, #12
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f7ff fd6f 	bl	800454e <bme280_set_regs>
 8004a70:	4603      	mov	r3, r0
 8004a72:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8004a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8004a8e:	23f4      	movs	r3, #244	; 0xf4
 8004a90:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8004a92:	7db8      	ldrb	r0, [r7, #22]
 8004a94:	f107 0115 	add.w	r1, r7, #21
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f7ff fd27 	bl	80044ee <bme280_get_regs>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8004aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d11f      	bne.n	8004aec <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8004ab6:	f107 0315 	add.w	r3, r7, #21
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 f88e 	bl	8004bde <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8004acc:	f107 0315 	add.w	r3, r7, #21
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 f8a0 	bl	8004c18 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8004ad8:	f107 0115 	add.w	r1, r7, #21
 8004adc:	f107 0016 	add.w	r0, r7, #22
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f7ff fd33 	bl	800454e <bme280_set_regs>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8004aec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8004b06:	23f5      	movs	r3, #245	; 0xf5
 8004b08:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8004b0a:	7db8      	ldrb	r0, [r7, #22]
 8004b0c:	f107 0115 	add.w	r1, r7, #21
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f7ff fceb 	bl	80044ee <bme280_get_regs>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8004b1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d11f      	bne.n	8004b64 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8004b2e:	f107 0315 	add.w	r3, r7, #21
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 f81b 	bl	8004b70 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d005      	beq.n	8004b50 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8004b44:	f107 0315 	add.w	r3, r7, #21
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 f82d 	bl	8004baa <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8004b50:	f107 0115 	add.w	r1, r7, #21
 8004b54:	f107 0016 	add.w	r0, r7, #22
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f7ff fcf7 	bl	800454e <bme280_set_regs>
 8004b60:	4603      	mov	r3, r0
 8004b62:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8004b64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	b25b      	sxtb	r3, r3
 8004b80:	f023 031c 	bic.w	r3, r3, #28
 8004b84:	b25a      	sxtb	r2, r3
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	78db      	ldrb	r3, [r3, #3]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	b25b      	sxtb	r3, r3
 8004b8e:	f003 031c 	and.w	r3, r3, #28
 8004b92:	b25b      	sxtb	r3, r3
 8004b94:	4313      	orrs	r3, r2
 8004b96:	b25b      	sxtb	r3, r3
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	701a      	strb	r2, [r3, #0]
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	b25b      	sxtb	r3, r3
 8004bba:	f003 031f 	and.w	r3, r3, #31
 8004bbe:	b25a      	sxtb	r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	791b      	ldrb	r3, [r3, #4]
 8004bc4:	015b      	lsls	r3, r3, #5
 8004bc6:	b25b      	sxtb	r3, r3
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	b25b      	sxtb	r3, r3
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	701a      	strb	r2, [r3, #0]
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	b25b      	sxtb	r3, r3
 8004bee:	f023 031c 	bic.w	r3, r3, #28
 8004bf2:	b25a      	sxtb	r2, r3
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	b25b      	sxtb	r3, r3
 8004bfc:	f003 031c 	and.w	r3, r3, #28
 8004c00:	b25b      	sxtb	r3, r3
 8004c02:	4313      	orrs	r3, r2
 8004c04:	b25b      	sxtb	r3, r3
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	701a      	strb	r2, [r3, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	b25b      	sxtb	r3, r3
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	b25a      	sxtb	r2, r3
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	785b      	ldrb	r3, [r3, #1]
 8004c32:	015b      	lsls	r3, r3, #5
 8004c34:	b25b      	sxtb	r3, r3
 8004c36:	4313      	orrs	r3, r2
 8004c38:	b25b      	sxtb	r3, r3
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	701a      	strb	r2, [r3, #0]
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3302      	adds	r3, #2
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	109b      	asrs	r3, r3, #2
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3302      	adds	r3, #2
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3303      	adds	r3, #3
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	109b      	asrs	r3, r3, #2
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3303      	adds	r3, #3
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	711a      	strb	r2, [r3, #4]
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	6039      	str	r1, [r7, #0]
 8004cbe:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8004cc0:	23f4      	movs	r3, #244	; 0xf4
 8004cc2:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8004cc4:	7bb8      	ldrb	r0, [r7, #14]
 8004cc6:	f107 010d 	add.w	r1, r7, #13
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f7ff fc0e 	bl	80044ee <bme280_get_regs>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8004cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d117      	bne.n	8004d0e <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8004cde:	7b7b      	ldrb	r3, [r7, #13]
 8004ce0:	b25b      	sxtb	r3, r3
 8004ce2:	f023 0303 	bic.w	r3, r3, #3
 8004ce6:	b25a      	sxtb	r2, r3
 8004ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	b25b      	sxtb	r3, r3
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	b25b      	sxtb	r3, r3
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8004cfa:	f107 010d 	add.w	r1, r7, #13
 8004cfe:	f107 000e 	add.w	r0, r7, #14
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f7ff fc22 	bl	800454e <bme280_set_regs>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8004d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b086      	sub	sp, #24
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8004d22:	f107 0110 	add.w	r1, r7, #16
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2204      	movs	r2, #4
 8004d2a:	20f2      	movs	r0, #242	; 0xf2
 8004d2c:	f7ff fbdf 	bl	80044ee <bme280_get_regs>
 8004d30:	4603      	mov	r3, r0
 8004d32:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8004d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d118      	bne.n	8004d6e <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8004d3c:	f107 0208 	add.w	r2, r7, #8
 8004d40:	f107 0310 	add.w	r3, r7, #16
 8004d44:	4611      	mov	r1, r2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff ff80 	bl	8004c4c <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff fd21 	bl	8004794 <bme280_soft_reset>
 8004d52:	4603      	mov	r3, r0
 8004d54:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8004d56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d107      	bne.n	8004d6e <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8004d5e:	f107 0308 	add.w	r3, r7, #8
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 f808 	bl	8004d7a <reload_device_settings>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8004d6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	201f      	movs	r0, #31
 8004d8a:	f7ff fe18 	bl	80049be <set_osr_settings>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 8004d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	201f      	movs	r0, #31
 8004da0:	f7ff feaa 	bl	8004af8 <set_filter_standby_settings>
 8004da4:	4603      	mov	r3, r0
 8004da6:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8004da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8004db4:	b5b0      	push	{r4, r5, r7, lr}
 8004db6:	b08c      	sub	sp, #48	; 0x30
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	4b5f      	ldr	r3, [pc, #380]	; (8004f40 <compensate_temperature+0x18c>)
 8004dc4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	4b5d      	ldr	r3, [pc, #372]	; (8004f44 <compensate_temperature+0x190>)
 8004dce:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fb fb8c 	bl	80004f4 <__aeabi_ui2d>
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	4b59      	ldr	r3, [pc, #356]	; (8004f48 <compensate_temperature+0x194>)
 8004de2:	f7fb fd2b 	bl	800083c <__aeabi_ddiv>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4614      	mov	r4, r2
 8004dec:	461d      	mov	r5, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fb fb7e 	bl	80004f4 <__aeabi_ui2d>
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	4b53      	ldr	r3, [pc, #332]	; (8004f4c <compensate_temperature+0x198>)
 8004dfe:	f7fb fd1d 	bl	800083c <__aeabi_ddiv>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4620      	mov	r0, r4
 8004e08:	4629      	mov	r1, r5
 8004e0a:	f7fb fa35 	bl	8000278 <__aeabi_dsub>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fb fb79 	bl	8000514 <__aeabi_i2d>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e2a:	f7fb fbdd 	bl	80005e8 <__aeabi_dmul>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fb fb5a 	bl	80004f4 <__aeabi_ui2d>
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8004e48:	f7fb fcf8 	bl	800083c <__aeabi_ddiv>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4614      	mov	r4, r2
 8004e52:	461d      	mov	r5, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fb fb4b 	bl	80004f4 <__aeabi_ui2d>
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	4b3b      	ldr	r3, [pc, #236]	; (8004f50 <compensate_temperature+0x19c>)
 8004e64:	f7fb fcea 	bl	800083c <__aeabi_ddiv>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	4629      	mov	r1, r5
 8004e70:	f7fb fa02 	bl	8000278 <__aeabi_dsub>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8004e7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e84:	f7fb fbb0 	bl	80005e8 <__aeabi_dmul>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4614      	mov	r4, r2
 8004e8e:	461d      	mov	r5, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fb fb3c 	bl	8000514 <__aeabi_i2d>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb fba0 	bl	80005e8 <__aeabi_dmul>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 8004eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eb4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004eb8:	f7fb f9e0 	bl	800027c <__adddf3>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	f7fb fe40 	bl	8000b48 <__aeabi_d2iz>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 8004ece:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ed2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ed6:	f7fb f9d1 	bl	800027c <__adddf3>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <compensate_temperature+0x1a0>)
 8004ee8:	f7fb fca8 	bl	800083c <__aeabi_ddiv>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 8004ef4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ef8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004efc:	f7fb fde6 	bl	8000acc <__aeabi_dcmplt>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d004      	beq.n	8004f10 <compensate_temperature+0x15c>
		temperature = temperature_min;
 8004f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f0a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004f0e:	e00c      	b.n	8004f2a <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 8004f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f14:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f18:	f7fb fdf6 	bl	8000b08 <__aeabi_dcmpgt>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <compensate_temperature+0x176>
		temperature = temperature_max;
 8004f22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f26:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 8004f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f2e:	ec43 2b17 	vmov	d7, r2, r3
}
 8004f32:	eeb0 0a47 	vmov.f32	s0, s14
 8004f36:	eef0 0a67 	vmov.f32	s1, s15
 8004f3a:	3730      	adds	r7, #48	; 0x30
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8004f40:	c0440000 	.word	0xc0440000
 8004f44:	40554000 	.word	0x40554000
 8004f48:	40d00000 	.word	0x40d00000
 8004f4c:	40900000 	.word	0x40900000
 8004f50:	40c00000 	.word	0x40c00000
 8004f54:	40b40000 	.word	0x40b40000

08004f58 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8004f58:	b5b0      	push	{r4, r5, r7, lr}
 8004f5a:	b08e      	sub	sp, #56	; 0x38
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 8004f62:	a3d9      	add	r3, pc, #868	; (adr r3, 80052c8 <compensate_pressure+0x370>)
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 8004f6c:	a3d8      	add	r3, pc, #864	; (adr r3, 80052d0 <compensate_pressure+0x378>)
 8004f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f72:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fb faca 	bl	8000514 <__aeabi_i2d>
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f88:	f7fb fc58 	bl	800083c <__aeabi_ddiv>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4610      	mov	r0, r2
 8004f92:	4619      	mov	r1, r3
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	4bc1      	ldr	r3, [pc, #772]	; (80052a0 <compensate_pressure+0x348>)
 8004f9a:	f7fb f96d 	bl	8000278 <__aeabi_dsub>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8004fa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004faa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004fae:	f7fb fb1b 	bl	80005e8 <__aeabi_dmul>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4614      	mov	r4, r2
 8004fb8:	461d      	mov	r5, r3
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fb faa7 	bl	8000514 <__aeabi_i2d>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4620      	mov	r0, r4
 8004fcc:	4629      	mov	r1, r5
 8004fce:	f7fb fb0b 	bl	80005e8 <__aeabi_dmul>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	4bb1      	ldr	r3, [pc, #708]	; (80052a4 <compensate_pressure+0x34c>)
 8004fe0:	f7fb fc2c 	bl	800083c <__aeabi_ddiv>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fb fa8e 	bl	8000514 <__aeabi_i2d>
 8004ff8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ffc:	f7fb faf4 	bl	80005e8 <__aeabi_dmul>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4610      	mov	r0, r2
 8005006:	4619      	mov	r1, r3
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	f7fb f936 	bl	800027c <__adddf3>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005018:	f7fb f930 	bl	800027c <__adddf3>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	4b9f      	ldr	r3, [pc, #636]	; (80052a8 <compensate_pressure+0x350>)
 800502a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800502e:	f7fb fc05 	bl	800083c <__aeabi_ddiv>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4614      	mov	r4, r2
 8005038:	461d      	mov	r5, r3
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005040:	4618      	mov	r0, r3
 8005042:	f7fb fa67 	bl	8000514 <__aeabi_i2d>
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	4b98      	ldr	r3, [pc, #608]	; (80052ac <compensate_pressure+0x354>)
 800504c:	f7fb facc 	bl	80005e8 <__aeabi_dmul>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4620      	mov	r0, r4
 8005056:	4629      	mov	r1, r5
 8005058:	f7fb f910 	bl	800027c <__adddf3>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800506a:	4618      	mov	r0, r3
 800506c:	f7fb fa52 	bl	8000514 <__aeabi_i2d>
 8005070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005074:	f7fb fab8 	bl	80005e8 <__aeabi_dmul>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4610      	mov	r0, r2
 800507e:	4619      	mov	r1, r3
 8005080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005084:	f7fb fab0 	bl	80005e8 <__aeabi_dmul>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4610      	mov	r0, r2
 800508e:	4619      	mov	r1, r3
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	4b86      	ldr	r3, [pc, #536]	; (80052b0 <compensate_pressure+0x358>)
 8005096:	f7fb fbd1 	bl	800083c <__aeabi_ddiv>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fb fa33 	bl	8000514 <__aeabi_i2d>
 80050ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050b2:	f7fb fa99 	bl	80005e8 <__aeabi_dmul>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4610      	mov	r0, r2
 80050bc:	4619      	mov	r1, r3
 80050be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050c2:	f7fb f8db 	bl	800027c <__adddf3>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4610      	mov	r0, r2
 80050cc:	4619      	mov	r1, r3
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	4b77      	ldr	r3, [pc, #476]	; (80052b0 <compensate_pressure+0x358>)
 80050d4:	f7fb fbb2 	bl	800083c <__aeabi_ddiv>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	4b6f      	ldr	r3, [pc, #444]	; (80052a4 <compensate_pressure+0x34c>)
 80050e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80050ea:	f7fb fba7 	bl	800083c <__aeabi_ddiv>
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	4610      	mov	r0, r2
 80050f4:	4619      	mov	r1, r3
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	4b6e      	ldr	r3, [pc, #440]	; (80052b4 <compensate_pressure+0x35c>)
 80050fc:	f7fb f8be 	bl	800027c <__adddf3>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4614      	mov	r4, r2
 8005106:	461d      	mov	r5, r3
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	88db      	ldrh	r3, [r3, #6]
 800510c:	4618      	mov	r0, r3
 800510e:	f7fb f9f1 	bl	80004f4 <__aeabi_ui2d>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4620      	mov	r0, r4
 8005118:	4629      	mov	r1, r5
 800511a:	f7fb fa65 	bl	80005e8 <__aeabi_dmul>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005132:	f7fb fcc1 	bl	8000ab8 <__aeabi_dcmpeq>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	f040 80cd 	bne.w	80052d8 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f7fb f9d6 	bl	80004f4 <__aeabi_ui2d>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	f04f 0000 	mov.w	r0, #0
 8005150:	4959      	ldr	r1, [pc, #356]	; (80052b8 <compensate_pressure+0x360>)
 8005152:	f7fb f891 	bl	8000278 <__aeabi_dsub>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	4b56      	ldr	r3, [pc, #344]	; (80052bc <compensate_pressure+0x364>)
 8005164:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005168:	f7fb fb68 	bl	800083c <__aeabi_ddiv>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005174:	f7fb f880 	bl	8000278 <__aeabi_dsub>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4610      	mov	r0, r2
 800517e:	4619      	mov	r1, r3
 8005180:	a345      	add	r3, pc, #276	; (adr r3, 8005298 <compensate_pressure+0x340>)
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	f7fb fa2f 	bl	80005e8 <__aeabi_dmul>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005196:	f7fb fb51 	bl	800083c <__aeabi_ddiv>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fb f9b3 	bl	8000514 <__aeabi_i2d>
 80051ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80051b2:	f7fb fa19 	bl	80005e8 <__aeabi_dmul>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4610      	mov	r0, r2
 80051bc:	4619      	mov	r1, r3
 80051be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80051c2:	f7fb fa11 	bl	80005e8 <__aeabi_dmul>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4610      	mov	r0, r2
 80051cc:	4619      	mov	r1, r3
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	4b3b      	ldr	r3, [pc, #236]	; (80052c0 <compensate_pressure+0x368>)
 80051d4:	f7fb fb32 	bl	800083c <__aeabi_ddiv>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fb f994 	bl	8000514 <__aeabi_i2d>
 80051ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80051f0:	f7fb f9fa 	bl	80005e8 <__aeabi_dmul>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4610      	mov	r0, r2
 80051fa:	4619      	mov	r1, r3
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	4b28      	ldr	r3, [pc, #160]	; (80052a4 <compensate_pressure+0x34c>)
 8005202:	f7fb fb1b 	bl	800083c <__aeabi_ddiv>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 800520e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005212:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005216:	f7fb f831 	bl	800027c <__adddf3>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4614      	mov	r4, r2
 8005220:	461d      	mov	r5, r3
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005228:	4618      	mov	r0, r3
 800522a:	f7fb f973 	bl	8000514 <__aeabi_i2d>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4620      	mov	r0, r4
 8005234:	4629      	mov	r1, r5
 8005236:	f7fb f821 	bl	800027c <__adddf3>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4610      	mov	r0, r2
 8005240:	4619      	mov	r1, r3
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	4b1f      	ldr	r3, [pc, #124]	; (80052c4 <compensate_pressure+0x36c>)
 8005248:	f7fb faf8 	bl	800083c <__aeabi_ddiv>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005254:	f7fb f812 	bl	800027c <__adddf3>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8005260:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005264:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005268:	f7fb fc30 	bl	8000acc <__aeabi_dcmplt>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d004      	beq.n	800527c <compensate_pressure+0x324>
			pressure = pressure_min;
 8005272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005276:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800527a:	e031      	b.n	80052e0 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 800527c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005280:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005284:	f7fb fc40 	bl	8000b08 <__aeabi_dcmpgt>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d028      	beq.n	80052e0 <compensate_pressure+0x388>
			pressure = pressure_max;
 800528e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005292:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005296:	e023      	b.n	80052e0 <compensate_pressure+0x388>
 8005298:	00000000 	.word	0x00000000
 800529c:	40b86a00 	.word	0x40b86a00
 80052a0:	40ef4000 	.word	0x40ef4000
 80052a4:	40e00000 	.word	0x40e00000
 80052a8:	40100000 	.word	0x40100000
 80052ac:	40f00000 	.word	0x40f00000
 80052b0:	41200000 	.word	0x41200000
 80052b4:	3ff00000 	.word	0x3ff00000
 80052b8:	41300000 	.word	0x41300000
 80052bc:	40b00000 	.word	0x40b00000
 80052c0:	41e00000 	.word	0x41e00000
 80052c4:	40300000 	.word	0x40300000
 80052c8:	00000000 	.word	0x00000000
 80052cc:	40dd4c00 	.word	0x40dd4c00
 80052d0:	00000000 	.word	0x00000000
 80052d4:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 80052d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 80052e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80052e4:	ec43 2b17 	vmov	d7, r2, r3
}
 80052e8:	eeb0 0a47 	vmov.f32	s0, s14
 80052ec:	eef0 0a67 	vmov.f32	s1, s15
 80052f0:	3738      	adds	r7, #56	; 0x38
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bdb0      	pop	{r4, r5, r7, pc}
 80052f6:	bf00      	nop

080052f8 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80052f8:	b5b0      	push	{r4, r5, r7, lr}
 80052fa:	b094      	sub	sp, #80	; 0x50
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	4b81      	ldr	r3, [pc, #516]	; (8005518 <compensate_humidity+0x220>)
 8005314:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	4618      	mov	r0, r3
 800531e:	f7fb f8f9 	bl	8000514 <__aeabi_i2d>
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	4b7d      	ldr	r3, [pc, #500]	; (800551c <compensate_humidity+0x224>)
 8005328:	f7fa ffa6 	bl	8000278 <__aeabi_dsub>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800533a:	4618      	mov	r0, r3
 800533c:	f7fb f8ea 	bl	8000514 <__aeabi_i2d>
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	4b76      	ldr	r3, [pc, #472]	; (8005520 <compensate_humidity+0x228>)
 8005346:	f7fb f94f 	bl	80005e8 <__aeabi_dmul>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4614      	mov	r4, r2
 8005350:	461d      	mov	r5, r3
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005358:	4618      	mov	r0, r3
 800535a:	f7fb f8db 	bl	8000514 <__aeabi_i2d>
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	4b70      	ldr	r3, [pc, #448]	; (8005524 <compensate_humidity+0x22c>)
 8005364:	f7fb fa6a 	bl	800083c <__aeabi_ddiv>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4610      	mov	r0, r2
 800536e:	4619      	mov	r1, r3
 8005370:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005374:	f7fb f938 	bl	80005e8 <__aeabi_dmul>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4620      	mov	r0, r4
 800537e:	4629      	mov	r1, r5
 8005380:	f7fa ff7c 	bl	800027c <__adddf3>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4618      	mov	r0, r3
 8005392:	f7fb f8af 	bl	80004f4 <__aeabi_ui2d>
 8005396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800539a:	f7fa ff6d 	bl	8000278 <__aeabi_dsub>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fb f8b1 	bl	8000514 <__aeabi_i2d>
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	4b5c      	ldr	r3, [pc, #368]	; (8005528 <compensate_humidity+0x230>)
 80053b8:	f7fb fa40 	bl	800083c <__aeabi_ddiv>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	7f1b      	ldrb	r3, [r3, #28]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fb f893 	bl	80004f4 <__aeabi_ui2d>
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	4b56      	ldr	r3, [pc, #344]	; (800552c <compensate_humidity+0x234>)
 80053d4:	f7fb fa32 	bl	800083c <__aeabi_ddiv>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4610      	mov	r0, r2
 80053de:	4619      	mov	r1, r3
 80053e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80053e4:	f7fb f900 	bl	80005e8 <__aeabi_dmul>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4610      	mov	r0, r2
 80053ee:	4619      	mov	r1, r3
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	4b4e      	ldr	r3, [pc, #312]	; (8005530 <compensate_humidity+0x238>)
 80053f6:	f7fa ff41 	bl	800027c <__adddf3>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8005408:	4618      	mov	r0, r3
 800540a:	f7fb f883 	bl	8000514 <__aeabi_i2d>
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	4b46      	ldr	r3, [pc, #280]	; (800552c <compensate_humidity+0x234>)
 8005414:	f7fb fa12 	bl	800083c <__aeabi_ddiv>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4610      	mov	r0, r2
 800541e:	4619      	mov	r1, r3
 8005420:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005424:	f7fb f8e0 	bl	80005e8 <__aeabi_dmul>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4610      	mov	r0, r2
 800542e:	4619      	mov	r1, r3
 8005430:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005434:	f7fb f8d8 	bl	80005e8 <__aeabi_dmul>
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	4610      	mov	r0, r2
 800543e:	4619      	mov	r1, r3
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	4b3a      	ldr	r3, [pc, #232]	; (8005530 <compensate_humidity+0x238>)
 8005446:	f7fa ff19 	bl	800027c <__adddf3>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8005452:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005456:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800545a:	f7fb f8c5 	bl	80005e8 <__aeabi_dmul>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4614      	mov	r4, r2
 8005464:	461d      	mov	r5, r3
 8005466:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800546a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800546e:	f7fb f8bb 	bl	80005e8 <__aeabi_dmul>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	4620      	mov	r0, r4
 8005478:	4629      	mov	r1, r5
 800547a:	f7fb f8b5 	bl	80005e8 <__aeabi_dmul>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	7e1b      	ldrb	r3, [r3, #24]
 800548a:	4618      	mov	r0, r3
 800548c:	f7fb f832 	bl	80004f4 <__aeabi_ui2d>
 8005490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005494:	f7fb f8a8 	bl	80005e8 <__aeabi_dmul>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4610      	mov	r0, r2
 800549e:	4619      	mov	r1, r3
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	4b23      	ldr	r3, [pc, #140]	; (8005534 <compensate_humidity+0x23c>)
 80054a6:	f7fb f9c9 	bl	800083c <__aeabi_ddiv>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	f04f 0000 	mov.w	r0, #0
 80054b2:	491f      	ldr	r1, [pc, #124]	; (8005530 <compensate_humidity+0x238>)
 80054b4:	f7fa fee0 	bl	8000278 <__aeabi_dsub>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054c0:	f7fb f892 	bl	80005e8 <__aeabi_dmul>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 80054cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054d0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80054d4:	f7fb fb18 	bl	8000b08 <__aeabi_dcmpgt>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 80054de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80054e6:	e00c      	b.n	8005502 <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 80054e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054ec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80054f0:	f7fb faec 	bl	8000acc <__aeabi_dcmplt>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <compensate_humidity+0x20a>
		humidity = humidity_min;
 80054fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054fe:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 8005502:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005506:	ec43 2b17 	vmov	d7, r2, r3
}
 800550a:	eeb0 0a47 	vmov.f32	s0, s14
 800550e:	eef0 0a67 	vmov.f32	s1, s15
 8005512:	3750      	adds	r7, #80	; 0x50
 8005514:	46bd      	mov	sp, r7
 8005516:	bdb0      	pop	{r4, r5, r7, pc}
 8005518:	40590000 	.word	0x40590000
 800551c:	40f2c000 	.word	0x40f2c000
 8005520:	40500000 	.word	0x40500000
 8005524:	40d00000 	.word	0x40d00000
 8005528:	40f00000 	.word	0x40f00000
 800552c:	41900000 	.word	0x41900000
 8005530:	3ff00000 	.word	0x3ff00000
 8005534:	41200000 	.word	0x41200000

08005538 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	; 0x28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8005540:	2388      	movs	r3, #136	; 0x88
 8005542:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	f107 0310 	add.w	r3, r7, #16
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	609a      	str	r2, [r3, #8]
 8005556:	60da      	str	r2, [r3, #12]
 8005558:	611a      	str	r2, [r3, #16]
 800555a:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800555c:	f107 010c 	add.w	r1, r7, #12
 8005560:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	221a      	movs	r2, #26
 8005568:	f7fe ffc1 	bl	80044ee <bme280_get_regs>
 800556c:	4603      	mov	r3, r0
 800556e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8005572:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005576:	2b00      	cmp	r3, #0
 8005578:	d11d      	bne.n	80055b6 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 800557a:	f107 030c 	add.w	r3, r7, #12
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4618      	mov	r0, r3
 8005582:	f000 f84a 	bl	800561a <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8005586:	23e1      	movs	r3, #225	; 0xe1
 8005588:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800558c:	f107 010c 	add.w	r1, r7, #12
 8005590:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2207      	movs	r2, #7
 8005598:	f7fe ffa9 	bl	80044ee <bme280_get_regs>
 800559c:	4603      	mov	r3, r0
 800559e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80055a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d105      	bne.n	80055b6 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80055aa:	f107 030c 	add.w	r3, r7, #12
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 f8e1 	bl	8005778 <parse_humidity_calib_data>
		}
	}

	return rslt;
 80055b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3728      	adds	r7, #40	; 0x28
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b087      	sub	sp, #28
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
 80055ce:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80055d0:	2301      	movs	r3, #1
 80055d2:	75fb      	strb	r3, [r7, #23]
 80055d4:	e016      	b.n	8005604 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80055d6:	7dfb      	ldrb	r3, [r7, #23]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	441a      	add	r2, r3
 80055dc:	7dfb      	ldrb	r3, [r7, #23]
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	3b01      	subs	r3, #1
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	440b      	add	r3, r1
 80055e6:	7812      	ldrb	r2, [r2, #0]
 80055e8:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	441a      	add	r2, r3
 80055f0:	7dfb      	ldrb	r3, [r7, #23]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	4619      	mov	r1, r3
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	440b      	add	r3, r1
 80055fa:	7812      	ldrb	r2, [r2, #0]
 80055fc:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
 8005600:	3301      	adds	r3, #1
 8005602:	75fb      	strb	r3, [r7, #23]
 8005604:	7dfa      	ldrb	r2, [r7, #23]
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	429a      	cmp	r2, r3
 800560a:	d3e4      	bcc.n	80055d6 <interleave_reg_addr+0x14>
	}
}
 800560c:	bf00      	nop
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800561a:	b480      	push	{r7}
 800561c:	b085      	sub	sp, #20
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	3310      	adds	r3, #16
 8005628:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3301      	adds	r3, #1
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	021b      	lsls	r3, r3, #8
 8005632:	b21a      	sxth	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	b21b      	sxth	r3, r3
 800563a:	4313      	orrs	r3, r2
 800563c:	b21b      	sxth	r3, r3
 800563e:	b29a      	uxth	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3303      	adds	r3, #3
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	b21a      	sxth	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3302      	adds	r3, #2
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	b21b      	sxth	r3, r3
 8005656:	4313      	orrs	r3, r2
 8005658:	b21a      	sxth	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3305      	adds	r3, #5
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	021b      	lsls	r3, r3, #8
 8005666:	b21a      	sxth	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3304      	adds	r3, #4
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	b21b      	sxth	r3, r3
 8005670:	4313      	orrs	r3, r2
 8005672:	b21a      	sxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3307      	adds	r3, #7
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	b21a      	sxth	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3306      	adds	r3, #6
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	b21b      	sxth	r3, r3
 800568a:	4313      	orrs	r3, r2
 800568c:	b21b      	sxth	r3, r3
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3309      	adds	r3, #9
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	b21a      	sxth	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3308      	adds	r3, #8
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	b21b      	sxth	r3, r3
 80056a6:	4313      	orrs	r3, r2
 80056a8:	b21a      	sxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	330b      	adds	r3, #11
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	021b      	lsls	r3, r3, #8
 80056b6:	b21a      	sxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	330a      	adds	r3, #10
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	b21b      	sxth	r3, r3
 80056c0:	4313      	orrs	r3, r2
 80056c2:	b21a      	sxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	330d      	adds	r3, #13
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	b21a      	sxth	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	330c      	adds	r3, #12
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	b21b      	sxth	r3, r3
 80056da:	4313      	orrs	r3, r2
 80056dc:	b21a      	sxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	330f      	adds	r3, #15
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	021b      	lsls	r3, r3, #8
 80056ea:	b21a      	sxth	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	330e      	adds	r3, #14
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	b21b      	sxth	r3, r3
 80056f4:	4313      	orrs	r3, r2
 80056f6:	b21a      	sxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3311      	adds	r3, #17
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	021b      	lsls	r3, r3, #8
 8005704:	b21a      	sxth	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	3310      	adds	r3, #16
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	b21b      	sxth	r3, r3
 800570e:	4313      	orrs	r3, r2
 8005710:	b21a      	sxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3313      	adds	r3, #19
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	b21a      	sxth	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3312      	adds	r3, #18
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	b21b      	sxth	r3, r3
 8005728:	4313      	orrs	r3, r2
 800572a:	b21a      	sxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3315      	adds	r3, #21
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	b21a      	sxth	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3314      	adds	r3, #20
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	b21b      	sxth	r3, r3
 8005742:	4313      	orrs	r3, r2
 8005744:	b21a      	sxth	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3317      	adds	r3, #23
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	021b      	lsls	r3, r3, #8
 8005752:	b21a      	sxth	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3316      	adds	r3, #22
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	b21b      	sxth	r3, r3
 800575c:	4313      	orrs	r3, r2
 800575e:	b21a      	sxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	7e5a      	ldrb	r2, [r3, #25]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	761a      	strb	r2, [r3, #24]

}
 800576c:	bf00      	nop
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	3310      	adds	r3, #16
 8005786:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3301      	adds	r3, #1
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	b21a      	sxth	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	b21b      	sxth	r3, r3
 8005798:	4313      	orrs	r3, r2
 800579a:	b21a      	sxth	r2, r3
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	789a      	ldrb	r2, [r3, #2]
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3303      	adds	r3, #3
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	b25b      	sxtb	r3, r3
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3304      	adds	r3, #4
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	b21b      	sxth	r3, r3
 80057c0:	f003 030f 	and.w	r3, r3, #15
 80057c4:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80057c6:	8a7a      	ldrh	r2, [r7, #18]
 80057c8:	8a3b      	ldrh	r3, [r7, #16]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	b21a      	sxth	r2, r3
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3305      	adds	r3, #5
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	b25b      	sxtb	r3, r3
 80057da:	b29b      	uxth	r3, r3
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	b29b      	uxth	r3, r3
 80057e0:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3304      	adds	r3, #4
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	091b      	lsrs	r3, r3, #4
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80057ee:	89fa      	ldrh	r2, [r7, #14]
 80057f0:	89bb      	ldrh	r3, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	b21a      	sxth	r2, r3
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3306      	adds	r3, #6
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	b25a      	sxtb	r2, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	460a      	mov	r2, r1
 800581e:	71fb      	strb	r3, [r7, #7]
 8005820:	4613      	mov	r3, r2
 8005822:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8005824:	2300      	movs	r3, #0
 8005826:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8005828:	79fa      	ldrb	r2, [r7, #7]
 800582a:	79bb      	ldrb	r3, [r7, #6]
 800582c:	4013      	ands	r3, r2
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8005834:	2301      	movs	r3, #1
 8005836:	73fb      	strb	r3, [r7, #15]
 8005838:	e001      	b.n	800583e <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800583a:	2300      	movs	r3, #0
 800583c:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 800583e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00b      	beq.n	8005872 <null_ptr_check+0x26>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d007      	beq.n	8005872 <null_ptr_check+0x26>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <null_ptr_check+0x26>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d102      	bne.n	8005878 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8005872:	23ff      	movs	r3, #255	; 0xff
 8005874:	73fb      	strb	r3, [r7, #15]
 8005876:	e001      	b.n	800587c <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8005878:	2300      	movs	r3, #0
 800587a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800587c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af02      	add	r7, sp, #8
 8005892:	603a      	str	r2, [r7, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	4603      	mov	r3, r0
 8005898:	71fb      	strb	r3, [r7, #7]
 800589a:	460b      	mov	r3, r1
 800589c:	71bb      	strb	r3, [r7, #6]
 800589e:	4613      	mov	r3, r2
 80058a0:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 80058a2:	79fb      	ldrb	r3, [r7, #7]
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	b299      	uxth	r1, r3
 80058aa:	1dba      	adds	r2, r7, #6
 80058ac:	230a      	movs	r3, #10
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	2301      	movs	r3, #1
 80058b2:	4811      	ldr	r0, [pc, #68]	; (80058f8 <user_i2c_read+0x6c>)
 80058b4:	f003 fdd6 	bl	8009464 <HAL_I2C_Master_Transmit>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <user_i2c_read+0x38>
 80058be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058c2:	e014      	b.n	80058ee <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 80058c4:	79fb      	ldrb	r3, [r7, #7]
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	b21b      	sxth	r3, r3
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	b21b      	sxth	r3, r3
 80058d0:	b299      	uxth	r1, r3
 80058d2:	88bb      	ldrh	r3, [r7, #4]
 80058d4:	220a      	movs	r2, #10
 80058d6:	9200      	str	r2, [sp, #0]
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	4807      	ldr	r0, [pc, #28]	; (80058f8 <user_i2c_read+0x6c>)
 80058dc:	f003 fec0 	bl	8009660 <HAL_I2C_Master_Receive>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <user_i2c_read+0x60>
 80058e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058ea:	e000      	b.n	80058ee <user_i2c_read+0x62>

  return 0;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000360 	.word	0x20000360

080058fc <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f001 fbcf 	bl	80070a8 <HAL_Delay>
}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af02      	add	r7, sp, #8
 800591a:	603a      	str	r2, [r7, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	4603      	mov	r3, r0
 8005920:	71fb      	strb	r3, [r7, #7]
 8005922:	460b      	mov	r3, r1
 8005924:	71bb      	strb	r3, [r7, #6]
 8005926:	4613      	mov	r3, r2
 8005928:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 800592a:	88bb      	ldrh	r3, [r7, #4]
 800592c:	3301      	adds	r3, #1
 800592e:	4618      	mov	r0, r3
 8005930:	f00b f8ba 	bl	8010aa8 <malloc>
 8005934:	4603      	mov	r3, r0
 8005936:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8005938:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3301      	adds	r3, #1
 8005944:	88ba      	ldrh	r2, [r7, #4]
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f00b f8bd 	bl	8010ac8 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	b29b      	uxth	r3, r3
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	b299      	uxth	r1, r3
 8005956:	88bb      	ldrh	r3, [r7, #4]
 8005958:	3301      	adds	r3, #1
 800595a:	b29b      	uxth	r3, r3
 800595c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005960:	9200      	str	r2, [sp, #0]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4808      	ldr	r0, [pc, #32]	; (8005988 <user_i2c_write+0x74>)
 8005966:	f003 fd7d 	bl	8009464 <HAL_I2C_Master_Transmit>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <user_i2c_write+0x62>
 8005970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005974:	e003      	b.n	800597e <user_i2c_write+0x6a>

  free(buf);
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f00b f89e 	bl	8010ab8 <free>
  return 0;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000360 	.word	0x20000360

0800598c <detect_all_sensors_and_init>:
//}i2c_device;


//----------------------------------------------------------------------------------------
void detect_all_sensors_and_init(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
	detect_bme280();
 8005990:	f000 fa64 	bl	8005e5c <detect_bme280>
	if(i2c_device.BME280_ready_status == true)
 8005994:	4b10      	ldr	r3, [pc, #64]	; (80059d8 <detect_all_sensors_and_init+0x4c>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <detect_all_sensors_and_init+0x14>
	{
		init_bme280();
 800599c:	f000 f9dc 	bl	8005d58 <init_bme280>
	}

	detect_mpu6050();
 80059a0:	f000 fa92 	bl	8005ec8 <detect_mpu6050>
	if(i2c_device.MPU6050_ready_status == true)
 80059a4:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <detect_all_sensors_and_init+0x4c>)
 80059a6:	785b      	ldrb	r3, [r3, #1]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <detect_all_sensors_and_init+0x24>
	{
		init_mpu6050();
 80059ac:	f000 f98e 	bl	8005ccc <init_mpu6050>
	}


	detect_ms5611();
 80059b0:	f000 fb3a 	bl	8006028 <detect_ms5611>
	if(i2c_device.MS5611_ready_status == true)
 80059b4:	4b08      	ldr	r3, [pc, #32]	; (80059d8 <detect_all_sensors_and_init+0x4c>)
 80059b6:	78db      	ldrb	r3, [r3, #3]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <detect_all_sensors_and_init+0x34>
	{
		init_ms5611();
 80059bc:	f000 f960 	bl	8005c80 <init_ms5611>
	}

	init_am2302();			// Init AM2302 sensor
 80059c0:	f000 f846 	bl	8005a50 <init_am2302>

	//////////////////////////////////////////////////////////////
	// DON'T WORK
	denect_hmc5883l();								// Don't work
 80059c4:	f000 fb02 	bl	8005fcc <denect_hmc5883l>

	detect_apds9960();
 80059c8:	f000 fb5c 	bl	8006084 <detect_apds9960>
	if(i2c_device.APDS9960_ready_status == true)
	{
		//init_apds9960();
	}
	///////////////////////////////////////////////////////////////
	detect_oled_screen();
 80059cc:	f000 fb90 	bl	80060f0 <detect_oled_screen>
	detect_ds3231();
 80059d0:	f000 fbb4 	bl	800613c <detect_ds3231>

}
 80059d4:	bf00      	nop
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	200004a8 	.word	0x200004a8

080059dc <measure_sensors>:
//---------------------------------------------------------------------------------------
// Measure one time
void measure_sensors(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
//	while(1)
//	{

		bme280_measure();
 80059e2:	f000 fa03 	bl	8005dec <bme280_measure>
		mpu6050_measure();
 80059e6:	f000 f981 	bl	8005cec <mpu6050_measure>
		ms5611_measure();
 80059ea:	f000 f955 	bl	8005c98 <ms5611_measure>

		bool am2302_measure_ok = true;
 80059ee:	2301      	movs	r3, #1
 80059f0:	71fb      	strb	r3, [r7, #7]
		if(am2302_measure_ok)
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <measure_sensors+0x28>
		{
			HAL_Delay(1000);
 80059f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059fc:	f001 fb54 	bl	80070a8 <HAL_Delay>
			am2302_measure();	// Measure must be less than one time per 2-3 seconds
 8005a00:	f000 f84a 	bl	8005a98 <am2302_measure>
		//HAL_Delay(1000);
//	}



}
 8005a04:	bf00      	nop
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8005a14:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <DelayMicro+0x3c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 8005a1a:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <DelayMicro+0x3c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a0b      	ldr	r2, [pc, #44]	; (8005a4c <DelayMicro+0x40>)
 8005a20:	fba2 2303 	umull	r2, r3, r2, r3
 8005a24:	0ddb      	lsrs	r3, r3, #23
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
 8005a2c:	607b      	str	r3, [r7, #4]
	while (micros--);
 8005a2e:	bf00      	nop
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	1e5a      	subs	r2, r3, #1
 8005a34:	607a      	str	r2, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1fa      	bne.n	8005a30 <DelayMicro+0x24>
}
 8005a3a:	bf00      	nop
 8005a3c:	bf00      	nop
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	20000004 	.word	0x20000004
 8005a4c:	ffa71ee7 	.word	0xffa71ee7

08005a50 <init_am2302>:
//----------------------------------------------------------------------------------------
void init_am2302(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <init_am2302+0x44>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a0e      	ldr	r2, [pc, #56]	; (8005a94 <init_am2302+0x44>)
 8005a5a:	f043 0304 	orr.w	r3, r3, #4
 8005a5e:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 8005a60:	4b0c      	ldr	r3, [pc, #48]	; (8005a94 <init_am2302+0x44>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4a0b      	ldr	r2, [pc, #44]	; (8005a94 <init_am2302+0x44>)
 8005a66:	f023 0302 	bic.w	r3, r3, #2
 8005a6a:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 8005a6c:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <init_am2302+0x44>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	4a08      	ldr	r2, [pc, #32]	; (8005a94 <init_am2302+0x44>)
 8005a72:	f043 0302 	orr.w	r3, r3, #2
 8005a76:	6093      	str	r3, [r2, #8]
	GPIOC->ODR ^= 0x02; 							// set GPIOC pin 1 on high
 8005a78:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <init_am2302+0x44>)
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	4a05      	ldr	r2, [pc, #20]	; (8005a94 <init_am2302+0x44>)
 8005a7e:	f083 0302 	eor.w	r3, r3, #2
 8005a82:	6153      	str	r3, [r2, #20]
	HAL_Delay(2000); 							// First init must be 2 seconds delay
 8005a84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005a88:	f001 fb0e 	bl	80070a8 <HAL_Delay>
	am2302_measure(); 							// For fill in i2c_device.AM2302_ready_status
 8005a8c:	f000 f804 	bl	8005a98 <am2302_measure>
}
 8005a90:	bf00      	nop
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40020800 	.word	0x40020800

08005a98 <am2302_measure>:
//----------------------------------------------------------------------------------------
void am2302_measure(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 * __                ________________________
 * 	 \			    /				         \
 * 	  \____________/			              \_
 */

	bool get_data_status = false;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	75fb      	strb	r3, [r7, #23]
	int j = 0;   							// Counter bytes
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	613b      	str	r3, [r7, #16]
	int i = 0;								// Counter bits
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60fb      	str	r3, [r7, #12]
	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 8005aaa:	2300      	movs	r3, #0
 8005aac:	603b      	str	r3, [r7, #0]
	float temper, hum;						// Buffer variables

	// Init GPIO like output
	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8005aae:	4b72      	ldr	r3, [pc, #456]	; (8005c78 <am2302_measure+0x1e0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a71      	ldr	r2, [pc, #452]	; (8005c78 <am2302_measure+0x1e0>)
 8005ab4:	f043 0304 	orr.w	r3, r3, #4
 8005ab8:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 8005aba:	4b6f      	ldr	r3, [pc, #444]	; (8005c78 <am2302_measure+0x1e0>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	4a6e      	ldr	r2, [pc, #440]	; (8005c78 <am2302_measure+0x1e0>)
 8005ac0:	f023 0302 	bic.w	r3, r3, #2
 8005ac4:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 8005ac6:	4b6c      	ldr	r3, [pc, #432]	; (8005c78 <am2302_measure+0x1e0>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	4a6b      	ldr	r2, [pc, #428]	; (8005c78 <am2302_measure+0x1e0>)
 8005acc:	f043 0302 	orr.w	r3, r3, #2
 8005ad0:	6093      	str	r3, [r2, #8]

	// Make output pin C1
	GPIOC->ODR &= ~0x02;		// Low level
 8005ad2:	4b69      	ldr	r3, [pc, #420]	; (8005c78 <am2302_measure+0x1e0>)
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	4a68      	ldr	r2, [pc, #416]	; (8005c78 <am2302_measure+0x1e0>)
 8005ad8:	f023 0302 	bic.w	r3, r3, #2
 8005adc:	6153      	str	r3, [r2, #20]
	DelayMicro(18000);
 8005ade:	f244 6050 	movw	r0, #18000	; 0x4650
 8005ae2:	f7ff ff93 	bl	8005a0c <DelayMicro>
	GPIOC->ODR ^= 0x02;			// High level
 8005ae6:	4b64      	ldr	r3, [pc, #400]	; (8005c78 <am2302_measure+0x1e0>)
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	4a63      	ldr	r2, [pc, #396]	; (8005c78 <am2302_measure+0x1e0>)
 8005aec:	f083 0302 	eor.w	r3, r3, #2
 8005af0:	6153      	str	r3, [r2, #20]
	DelayMicro(39);
 8005af2:	2027      	movs	r0, #39	; 0x27
 8005af4:	f7ff ff8a 	bl	8005a0c <DelayMicro>

	// Make input pin C1
	GPIOC->MODER &= ~0x04;  	// Set Pin C1 Input   (MODER GPIOC_1 Must be 00)
 8005af8:	4b5f      	ldr	r3, [pc, #380]	; (8005c78 <am2302_measure+0x1e0>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a5e      	ldr	r2, [pc, #376]	; (8005c78 <am2302_measure+0x1e0>)
 8005afe:	f023 0304 	bic.w	r3, r3, #4
 8005b02:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~0x04;		// Set Pin C1 Pull up
 8005b04:	4b5c      	ldr	r3, [pc, #368]	; (8005c78 <am2302_measure+0x1e0>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	4a5b      	ldr	r2, [pc, #364]	; (8005c78 <am2302_measure+0x1e0>)
 8005b0a:	f023 0304 	bic.w	r3, r3, #4
 8005b0e:	60d3      	str	r3, [r2, #12]

	if(GPIOC->IDR & GPIO_IDR_ID1)		// Sensor must pull down
 8005b10:	4b59      	ldr	r3, [pc, #356]	; (8005c78 <am2302_measure+0x1e0>)
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <am2302_measure+0x8a>
	{
		get_data_status = false; 					// Error. Sensor not response
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	75fb      	strb	r3, [r7, #23]
 8005b20:	e001      	b.n	8005b26 <am2302_measure+0x8e>
	}
	else
	{
		get_data_status = true;
 8005b22:	2301      	movs	r3, #1
 8005b24:	75fb      	strb	r3, [r7, #23]
	}

	DelayMicro(80);
 8005b26:	2050      	movs	r0, #80	; 0x50
 8005b28:	f7ff ff70 	bl	8005a0c <DelayMicro>
	if(!(GPIOC->IDR & GPIO_IDR_ID1))  	// Sensor must pull up
 8005b2c:	4b52      	ldr	r3, [pc, #328]	; (8005c78 <am2302_measure+0x1e0>)
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d102      	bne.n	8005b3e <am2302_measure+0xa6>
	{
		get_data_status = false; 					// Error. Sensor not response
 8005b38:	2300      	movs	r3, #0
 8005b3a:	75fb      	strb	r3, [r7, #23]
 8005b3c:	e001      	b.n	8005b42 <am2302_measure+0xaa>
	}
	else
	{
		get_data_status = true;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	75fb      	strb	r3, [r7, #23]
	}
	DelayMicro(80);
 8005b42:	2050      	movs	r0, #80	; 0x50
 8005b44:	f7ff ff62 	bl	8005a0c <DelayMicro>

	if(get_data_status == true)
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 808c 	beq.w	8005c68 <am2302_measure+0x1d0>
	{
		for(j = 0; j <5; j++)							// Reading 5 bytes
 8005b50:	2300      	movs	r3, #0
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	e048      	b.n	8005be8 <am2302_measure+0x150>
		{
			data[4-j] = 0;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f1c3 0304 	rsb	r3, r3, #4
 8005b5c:	f107 0218 	add.w	r2, r7, #24
 8005b60:	4413      	add	r3, r2
 8005b62:	2200      	movs	r2, #0
 8005b64:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(i = 0; i < 8; i++)						// Reading 8 bits
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	e034      	b.n	8005bd8 <am2302_measure+0x140>
			{
				while(!(GPIOC->IDR & GPIO_IDR_ID1));	// While signal is "0"
 8005b6e:	bf00      	nop
 8005b70:	4b41      	ldr	r3, [pc, #260]	; (8005c78 <am2302_measure+0x1e0>)
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0f9      	beq.n	8005b70 <am2302_measure+0xd8>
				DelayMicro(30);
 8005b7c:	201e      	movs	r0, #30
 8005b7e:	f7ff ff45 	bl	8005a0c <DelayMicro>
				if(GPIOC->IDR & GPIO_IDR_ID1)			// If signal is high when wrute "1" in buffer (data[])
 8005b82:	4b3d      	ldr	r3, [pc, #244]	; (8005c78 <am2302_measure+0x1e0>)
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d01a      	beq.n	8005bc4 <am2302_measure+0x12c>
				{
					data[4-j] |= (1 << (7 - i));        // Shift received bite
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f1c3 0304 	rsb	r3, r3, #4
 8005b94:	f107 0218 	add.w	r2, r7, #24
 8005b98:	4413      	add	r3, r2
 8005b9a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005b9e:	b25a      	sxtb	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f1c3 0307 	rsb	r3, r3, #7
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bac:	b25b      	sxtb	r3, r3
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	b25a      	sxtb	r2, r3
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f1c3 0304 	rsb	r3, r3, #4
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	f107 0118 	add.w	r1, r7, #24
 8005bbe:	440b      	add	r3, r1
 8005bc0:	f803 2c18 	strb.w	r2, [r3, #-24]
				}
				while(GPIOC->IDR & GPIO_IDR_ID1);		// Wait end of "1" signal
 8005bc4:	bf00      	nop
 8005bc6:	4b2c      	ldr	r3, [pc, #176]	; (8005c78 <am2302_measure+0x1e0>)
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f9      	bne.n	8005bc6 <am2302_measure+0x12e>
			for(i = 0; i < 8; i++)						// Reading 8 bits
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b07      	cmp	r3, #7
 8005bdc:	ddc7      	ble.n	8005b6e <am2302_measure+0xd6>
			}
			get_data_status = true;										// Data was been written okay
 8005bde:	2301      	movs	r3, #1
 8005be0:	75fb      	strb	r3, [r7, #23]
		for(j = 0; j <5; j++)							// Reading 5 bytes
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3301      	adds	r3, #1
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	ddb3      	ble.n	8005b56 <am2302_measure+0xbe>
		}

		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 8005bee:	463b      	mov	r3, r7
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005bf8:	ee07 3a90 	vmov	s15, r3
 8005bfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c00:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005c04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c08:	edc7 7a02 	vstr	s15, [r7, #8]
		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	3301      	adds	r3, #1
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b21b      	sxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	da0f      	bge.n	8005c38 <am2302_measure+0x1a0>
 8005c18:	68b8      	ldr	r0, [r7, #8]
 8005c1a:	f7fa fc8d 	bl	8000538 <__aeabi_f2d>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4610      	mov	r0, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	f7fa ffb7 	bl	8000b98 <__aeabi_d2f>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	ee07 3a90 	vmov	s15, r3
 8005c30:	eef1 7a67 	vneg.f32	s15, s15
 8005c34:	edc7 7a02 	vstr	s15, [r7, #8]

		i2c_device.AM2302_temperature = temper;
 8005c38:	4a10      	ldr	r2, [pc, #64]	; (8005c7c <am2302_measure+0x1e4>)
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	6613      	str	r3, [r2, #96]	; 0x60

		hum = (float)(*(int16_t*)(data+3)) / 10;
 8005c3e:	463b      	mov	r3, r7
 8005c40:	3303      	adds	r3, #3
 8005c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c4e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005c52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c56:	edc7 7a01 	vstr	s15, [r7, #4]
		i2c_device.AM2302_humidity = hum;
 8005c5a:	4a08      	ldr	r2, [pc, #32]	; (8005c7c <am2302_measure+0x1e4>)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6653      	str	r3, [r2, #100]	; 0x64

		i2c_device.AM2302_ready_status = true;
 8005c60:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <am2302_measure+0x1e4>)
 8005c62:	2201      	movs	r2, #1
 8005c64:	715a      	strb	r2, [r3, #5]
	}
	else
	{
		i2c_device.AM2302_ready_status = false;
	}
}
 8005c66:	e002      	b.n	8005c6e <am2302_measure+0x1d6>
		i2c_device.AM2302_ready_status = false;
 8005c68:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <am2302_measure+0x1e4>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	715a      	strb	r2, [r3, #5]
}
 8005c6e:	bf00      	nop
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	40020800 	.word	0x40020800
 8005c7c:	200004a8 	.word	0x200004a8

08005c80 <init_ms5611>:
//----------------------------------------------------------------------------------------
void init_ms5611(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
	ms5611_set_i2c(&hi2c2);
 8005c84:	4803      	ldr	r0, [pc, #12]	; (8005c94 <init_ms5611+0x14>)
 8005c86:	f000 fe21 	bl	80068cc <ms5611_set_i2c>
	ms5611_init();
 8005c8a:	f000 fe73 	bl	8006974 <ms5611_init>
}
 8005c8e:	bf00      	nop
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	2000040c 	.word	0x2000040c

08005c98 <ms5611_measure>:
//----------------------------------------------------------------------------------------
void ms5611_measure(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
	ms5611_update();
 8005c9c:	f000 ff08 	bl	8006ab0 <ms5611_update>

	i2c_device.MS5611_temperature = ms5611_get_temperature();
 8005ca0:	f000 ff0e 	bl	8006ac0 <ms5611_get_temperature>
 8005ca4:	eeb0 7a40 	vmov.f32	s14, s0
 8005ca8:	eef0 7a60 	vmov.f32	s15, s1
 8005cac:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <ms5611_measure+0x30>)
 8005cae:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	i2c_device.MS5611_pressure = ms5611_get_pressure();
 8005cb2:	f000 ff81 	bl	8006bb8 <ms5611_get_pressure>
 8005cb6:	eeb0 7a40 	vmov.f32	s14, s0
 8005cba:	eef0 7a60 	vmov.f32	s15, s1
 8005cbe:	4b02      	ldr	r3, [pc, #8]	; (8005cc8 <ms5611_measure+0x30>)
 8005cc0:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
}
 8005cc4:	bf00      	nop
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	200004a8 	.word	0x200004a8

08005ccc <init_mpu6050>:
//----------------------------------------------------------------------------------------
int8_t init_mpu6050(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
	if(MPU6050_Init(&hi2c2) == 1)
 8005cd0:	4805      	ldr	r0, [pc, #20]	; (8005ce8 <init_mpu6050+0x1c>)
 8005cd2:	f000 fa61 	bl	8006198 <MPU6050_Init>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <init_mpu6050+0x14>
	{
		return 0;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e000      	b.n	8005ce2 <init_mpu6050+0x16>
	}
	else
	{
		return 1;
 8005ce0:	2301      	movs	r3, #1
	}
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	2000040c 	.word	0x2000040c

08005cec <mpu6050_measure>:
//----------------------------------------------------------------------------------------
void mpu6050_measure(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
	MPU6050_Read_All(&hi2c2, &MPU6050);
 8005cf0:	4916      	ldr	r1, [pc, #88]	; (8005d4c <mpu6050_measure+0x60>)
 8005cf2:	4817      	ldr	r0, [pc, #92]	; (8005d50 <mpu6050_measure+0x64>)
 8005cf4:	f000 faa8 	bl	8006248 <MPU6050_Read_All>

	i2c_device.MPU6050_acceleration_Ax = MPU6050.Ax;
 8005cf8:	4b14      	ldr	r3, [pc, #80]	; (8005d4c <mpu6050_measure+0x60>)
 8005cfa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005cfe:	4915      	ldr	r1, [pc, #84]	; (8005d54 <mpu6050_measure+0x68>)
 8005d00:	e9c1 2306 	strd	r2, r3, [r1, #24]
	i2c_device.MPU6050_acceleration_Ay = MPU6050.Ay;
 8005d04:	4b11      	ldr	r3, [pc, #68]	; (8005d4c <mpu6050_measure+0x60>)
 8005d06:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005d0a:	4912      	ldr	r1, [pc, #72]	; (8005d54 <mpu6050_measure+0x68>)
 8005d0c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	i2c_device.MPU6050_acceleration_Az = MPU6050.Az;
 8005d10:	4b0e      	ldr	r3, [pc, #56]	; (8005d4c <mpu6050_measure+0x60>)
 8005d12:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005d16:	490f      	ldr	r1, [pc, #60]	; (8005d54 <mpu6050_measure+0x68>)
 8005d18:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	i2c_device.MPU6050_gyro_Gx = MPU6050.Gx;
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <mpu6050_measure+0x60>)
 8005d1e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005d22:	490c      	ldr	r1, [pc, #48]	; (8005d54 <mpu6050_measure+0x68>)
 8005d24:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	i2c_device.MPU6050_gyro_Gy = MPU6050.Gy;
 8005d28:	4b08      	ldr	r3, [pc, #32]	; (8005d4c <mpu6050_measure+0x60>)
 8005d2a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005d2e:	4909      	ldr	r1, [pc, #36]	; (8005d54 <mpu6050_measure+0x68>)
 8005d30:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	i2c_device.MPU6050_gyro_Gz = MPU6050.Gz;
 8005d34:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <mpu6050_measure+0x60>)
 8005d36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005d3a:	4906      	ldr	r1, [pc, #24]	; (8005d54 <mpu6050_measure+0x68>)
 8005d3c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	i2c_device.MPU6050_temperature = MPU6050.Temperature;
 8005d40:	4b02      	ldr	r3, [pc, #8]	; (8005d4c <mpu6050_measure+0x60>)
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	4a03      	ldr	r2, [pc, #12]	; (8005d54 <mpu6050_measure+0x68>)
 8005d46:	6493      	str	r3, [r2, #72]	; 0x48
}
 8005d48:	bf00      	nop
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	200006b8 	.word	0x200006b8
 8005d50:	2000040c 	.word	0x2000040c
 8005d54:	200004a8 	.word	0x200004a8

08005d58 <init_bme280>:
//----------------------------------------------------------------------------------------
int8_t init_bme280(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8005d5c:	4b1e      	ldr	r3, [pc, #120]	; (8005dd8 <init_bme280+0x80>)
 8005d5e:	2276      	movs	r2, #118	; 0x76
 8005d60:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8005d62:	4b1d      	ldr	r3, [pc, #116]	; (8005dd8 <init_bme280+0x80>)
 8005d64:	2201      	movs	r2, #1
 8005d66:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8005d68:	4b1b      	ldr	r3, [pc, #108]	; (8005dd8 <init_bme280+0x80>)
 8005d6a:	4a1c      	ldr	r2, [pc, #112]	; (8005ddc <init_bme280+0x84>)
 8005d6c:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8005d6e:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <init_bme280+0x80>)
 8005d70:	4a1b      	ldr	r2, [pc, #108]	; (8005de0 <init_bme280+0x88>)
 8005d72:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8005d74:	4b18      	ldr	r3, [pc, #96]	; (8005dd8 <init_bme280+0x80>)
 8005d76:	4a1b      	ldr	r2, [pc, #108]	; (8005de4 <init_bme280+0x8c>)
 8005d78:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 8005d7a:	4817      	ldr	r0, [pc, #92]	; (8005dd8 <init_bme280+0x80>)
 8005d7c:	f7fe fb6c 	bl	8004458 <bme280_init>
 8005d80:	4603      	mov	r3, r0
 8005d82:	461a      	mov	r2, r3
 8005d84:	4b18      	ldr	r3, [pc, #96]	; (8005de8 <init_bme280+0x90>)
 8005d86:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8005d88:	4b13      	ldr	r3, [pc, #76]	; (8005dd8 <init_bme280+0x80>)
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8005d90:	4b11      	ldr	r3, [pc, #68]	; (8005dd8 <init_bme280+0x80>)
 8005d92:	2205      	movs	r2, #5
 8005d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8005d98:	4b0f      	ldr	r3, [pc, #60]	; (8005dd8 <init_bme280+0x80>)
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8005da0:	4b0d      	ldr	r3, [pc, #52]	; (8005dd8 <init_bme280+0x80>)
 8005da2:	2204      	movs	r2, #4
 8005da4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8005da8:	490b      	ldr	r1, [pc, #44]	; (8005dd8 <init_bme280+0x80>)
 8005daa:	200f      	movs	r0, #15
 8005dac:	f7fe fc46 	bl	800463c <bme280_set_sensor_settings>
 8005db0:	4603      	mov	r3, r0
 8005db2:	461a      	mov	r2, r3
 8005db4:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <init_bme280+0x90>)
 8005db6:	701a      	strb	r2, [r3, #0]

	//	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8005db8:	4907      	ldr	r1, [pc, #28]	; (8005dd8 <init_bme280+0x80>)
 8005dba:	2003      	movs	r0, #3
 8005dbc:	f7fe fc93 	bl	80046e6 <bme280_set_sensor_mode>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	4b08      	ldr	r3, [pc, #32]	; (8005de8 <init_bme280+0x90>)
 8005dc6:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 8005dc8:	4b03      	ldr	r3, [pc, #12]	; (8005dd8 <init_bme280+0x80>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	2028      	movs	r0, #40	; 0x28
 8005dce:	4798      	blx	r3
}
 8005dd0:	bf00      	nop
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000658 	.word	0x20000658
 8005ddc:	0800588d 	.word	0x0800588d
 8005de0:	08005915 	.word	0x08005915
 8005de4:	080058fd 	.word	0x080058fd
 8005de8:	20000698 	.word	0x20000698

08005dec <bme280_measure>:
//----------------------------------------------------------------------------------------
void bme280_measure(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8005df0:	4a16      	ldr	r2, [pc, #88]	; (8005e4c <bme280_measure+0x60>)
 8005df2:	4917      	ldr	r1, [pc, #92]	; (8005e50 <bme280_measure+0x64>)
 8005df4:	2007      	movs	r0, #7
 8005df6:	f7fe fcf2 	bl	80047de <bme280_get_sensor_data>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4b15      	ldr	r3, [pc, #84]	; (8005e54 <bme280_measure+0x68>)
 8005e00:	701a      	strb	r2, [r3, #0]

	if(rslt == BME280_OK)
 8005e02:	4b14      	ldr	r3, [pc, #80]	; (8005e54 <bme280_measure+0x68>)
 8005e04:	f993 3000 	ldrsb.w	r3, [r3]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d11d      	bne.n	8005e48 <bme280_measure+0x5c>
	{
		// Save data in main structure
		i2c_device.BME280_temperature = comp_data.temperature;
 8005e0c:	4b10      	ldr	r3, [pc, #64]	; (8005e50 <bme280_measure+0x64>)
 8005e0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005e12:	4610      	mov	r0, r2
 8005e14:	4619      	mov	r1, r3
 8005e16:	f7fa febf 	bl	8000b98 <__aeabi_d2f>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	4a0e      	ldr	r2, [pc, #56]	; (8005e58 <bme280_measure+0x6c>)
 8005e1e:	6093      	str	r3, [r2, #8]
		i2c_device.BME280_humidity = comp_data.humidity;
 8005e20:	4b0b      	ldr	r3, [pc, #44]	; (8005e50 <bme280_measure+0x64>)
 8005e22:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005e26:	4610      	mov	r0, r2
 8005e28:	4619      	mov	r1, r3
 8005e2a:	f7fa feb5 	bl	8000b98 <__aeabi_d2f>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	4a09      	ldr	r2, [pc, #36]	; (8005e58 <bme280_measure+0x6c>)
 8005e32:	60d3      	str	r3, [r2, #12]
		i2c_device.BME280_preasure = comp_data.pressure;
 8005e34:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <bme280_measure+0x64>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f7fa feab 	bl	8000b98 <__aeabi_d2f>
 8005e42:	4603      	mov	r3, r0
 8005e44:	4a04      	ldr	r2, [pc, #16]	; (8005e58 <bme280_measure+0x6c>)
 8005e46:	6113      	str	r3, [r2, #16]
		//temperature = comp_data.temperature / 100.0;      /* °C  */
		//humidity = comp_data.humidity / 1024.0;           /* %   */
		//pressure = comp_data.pressure / 10000.0;          /* hPa */
	}
}
 8005e48:	bf00      	nop
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20000658 	.word	0x20000658
 8005e50:	200006a0 	.word	0x200006a0
 8005e54:	20000698 	.word	0x20000698
 8005e58:	200004a8 	.word	0x200004a8

08005e5c <detect_bme280>:

// Function for detect i2c devices ////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------
// Temperature, humidity and pressure sensor
void detect_bme280(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af04      	add	r7, sp, #16
	uint16_t STATUS=0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x76;  		 	// BME280
 8005e66:	2376      	movs	r3, #118	; 0x76
 8005e68:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0xD0;
 8005e6a:	23d0      	movs	r3, #208	; 0xd0
 8005e6c:	807b      	strh	r3, [r7, #2]
	uint8_t id = 96;							// in hex form
 8005e6e:	2360      	movs	r3, #96	; 0x60
 8005e70:	707b      	strb	r3, [r7, #1]
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8005e72:	2300      	movs	r3, #0
 8005e74:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8005e76:	88bb      	ldrh	r3, [r7, #4]
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	b299      	uxth	r1, r3
 8005e7c:	887a      	ldrh	r2, [r7, #2]
 8005e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e82:	9302      	str	r3, [sp, #8]
 8005e84:	2301      	movs	r3, #1
 8005e86:	9301      	str	r3, [sp, #4]
 8005e88:	463b      	mov	r3, r7
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	480c      	ldr	r0, [pc, #48]	; (8005ec0 <detect_bme280+0x64>)
 8005e90:	f003 ff06 	bl	8009ca0 <HAL_I2C_Mem_Read>
 8005e94:	4603      	mov	r3, r0
 8005e96:	80fb      	strh	r3, [r7, #6]
	//HAL_OK == 0
	if((buff == id) && (STATUS == 0))
 8005e98:	783b      	ldrb	r3, [r7, #0]
 8005e9a:	787a      	ldrb	r2, [r7, #1]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d106      	bne.n	8005eae <detect_bme280+0x52>
 8005ea0:	88fb      	ldrh	r3, [r7, #6]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d103      	bne.n	8005eae <detect_bme280+0x52>
	{
		i2c_device.BME280_ready_status = true;
 8005ea6:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <detect_bme280+0x68>)
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	701a      	strb	r2, [r3, #0]
 8005eac:	e003      	b.n	8005eb6 <detect_bme280+0x5a>
	}
	else
	{
		i2c_device.BME280_ready_status = false;
 8005eae:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <detect_bme280+0x68>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	701a      	strb	r2, [r3, #0]
	}
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000360 	.word	0x20000360
 8005ec4:	200004a8 	.word	0x200004a8

08005ec8 <detect_mpu6050>:
//----------------------------------------------------------------------------------------
// 1. IMU Module. Measure Acceleration X, Y, Z and Gyroscope X, Y, Z.
// 2. Turn on ability work with  hmc5883l ( Magnetometer  sensor ).
void detect_mpu6050(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	81fb      	strh	r3, [r7, #14]
	uint16_t addres_device = 0xD0;
 8005ed2:	23d0      	movs	r3, #208	; 0xd0
 8005ed4:	81bb      	strh	r3, [r7, #12]
	uint16_t id_addr = 0x75;
 8005ed6:	2375      	movs	r3, #117	; 0x75
 8005ed8:	817b      	strh	r3, [r7, #10]
	uint8_t id = 104;							// in hex form
 8005eda:	2368      	movs	r3, #104	; 0x68
 8005edc:	727b      	strb	r3, [r7, #9]
	uint8_t buff = 0;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	723b      	strb	r3, [r7, #8]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, id_addr, 1, &buff, 1, 1000);
 8005ee2:	897a      	ldrh	r2, [r7, #10]
 8005ee4:	89b9      	ldrh	r1, [r7, #12]
 8005ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005eea:	9302      	str	r3, [sp, #8]
 8005eec:	2301      	movs	r3, #1
 8005eee:	9301      	str	r3, [sp, #4]
 8005ef0:	f107 0308 	add.w	r3, r7, #8
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	4832      	ldr	r0, [pc, #200]	; (8005fc4 <detect_mpu6050+0xfc>)
 8005efa:	f003 fed1 	bl	8009ca0 <HAL_I2C_Mem_Read>
 8005efe:	4603      	mov	r3, r0
 8005f00:	81fb      	strh	r3, [r7, #14]

	if((buff == id) && (STATUS == 0))
 8005f02:	7a3b      	ldrb	r3, [r7, #8]
 8005f04:	7a7a      	ldrb	r2, [r7, #9]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d106      	bne.n	8005f18 <detect_mpu6050+0x50>
 8005f0a:	89fb      	ldrh	r3, [r7, #14]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d103      	bne.n	8005f18 <detect_mpu6050+0x50>
	{
		i2c_device.MPU6050_ready_status = true;
 8005f10:	4b2d      	ldr	r3, [pc, #180]	; (8005fc8 <detect_mpu6050+0x100>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	705a      	strb	r2, [r3, #1]
 8005f16:	e002      	b.n	8005f1e <detect_mpu6050+0x56>
	}
	else
	{
		i2c_device.MPU6050_ready_status = false;
 8005f18:	4b2b      	ldr	r3, [pc, #172]	; (8005fc8 <detect_mpu6050+0x100>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	705a      	strb	r2, [r3, #1]
	}

	// turn on direct i2c communication with hmc5883l
	if(i2c_device.MPU6050_ready_status == true)
 8005f1e:	4b2a      	ldr	r3, [pc, #168]	; (8005fc8 <detect_mpu6050+0x100>)
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d04a      	beq.n	8005fbc <detect_mpu6050+0xf4>
	{
		uint8_t data = 0x00;
 8005f26:	2300      	movs	r3, #0
 8005f28:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x6A, 1, &data, 1, 1000);		// Disable i2c master mode
 8005f2a:	89b9      	ldrh	r1, [r7, #12]
 8005f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f30:	9302      	str	r3, [sp, #8]
 8005f32:	2301      	movs	r3, #1
 8005f34:	9301      	str	r3, [sp, #4]
 8005f36:	1dfb      	adds	r3, r7, #7
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	226a      	movs	r2, #106	; 0x6a
 8005f3e:	4821      	ldr	r0, [pc, #132]	; (8005fc4 <detect_mpu6050+0xfc>)
 8005f40:	f003 fdb4 	bl	8009aac <HAL_I2C_Mem_Write>
 8005f44:	4603      	mov	r3, r0
 8005f46:	81fb      	strh	r3, [r7, #14]
		data = 0x02;
 8005f48:	2302      	movs	r3, #2
 8005f4a:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);		// Enable i2c master bypass mode
 8005f4c:	89b9      	ldrh	r1, [r7, #12]
 8005f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f52:	9302      	str	r3, [sp, #8]
 8005f54:	2301      	movs	r3, #1
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	1dfb      	adds	r3, r7, #7
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	2237      	movs	r2, #55	; 0x37
 8005f60:	4818      	ldr	r0, [pc, #96]	; (8005fc4 <detect_mpu6050+0xfc>)
 8005f62:	f003 fda3 	bl	8009aac <HAL_I2C_Mem_Write>
 8005f66:	4603      	mov	r3, r0
 8005f68:	81fb      	strh	r3, [r7, #14]

		// Check waited registers
		buff = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x6A, 1, &buff, 1, 1000);
 8005f6e:	89b9      	ldrh	r1, [r7, #12]
 8005f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f74:	9302      	str	r3, [sp, #8]
 8005f76:	2301      	movs	r3, #1
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	f107 0308 	add.w	r3, r7, #8
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	2301      	movs	r3, #1
 8005f82:	226a      	movs	r2, #106	; 0x6a
 8005f84:	480f      	ldr	r0, [pc, #60]	; (8005fc4 <detect_mpu6050+0xfc>)
 8005f86:	f003 fe8b 	bl	8009ca0 <HAL_I2C_Mem_Read>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	81fb      	strh	r3, [r7, #14]
		buff = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x37, 1, &buff, 1, 1000);
 8005f92:	89b9      	ldrh	r1, [r7, #12]
 8005f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f98:	9302      	str	r3, [sp, #8]
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	9301      	str	r3, [sp, #4]
 8005f9e:	f107 0308 	add.w	r3, r7, #8
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	2237      	movs	r2, #55	; 0x37
 8005fa8:	4806      	ldr	r0, [pc, #24]	; (8005fc4 <detect_mpu6050+0xfc>)
 8005faa:	f003 fe79 	bl	8009ca0 <HAL_I2C_Mem_Read>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	81fb      	strh	r3, [r7, #14]

		if(STATUS == 0)
 8005fb2:	89fb      	ldrh	r3, [r7, #14]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <detect_mpu6050+0xf4>
		{
			denect_hmc5883l();     // Don't work  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8005fb8:	f000 f808 	bl	8005fcc <denect_hmc5883l>
		}
	}
}
 8005fbc:	bf00      	nop
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	2000040c 	.word	0x2000040c
 8005fc8:	200004a8 	.word	0x200004a8

08005fcc <denect_hmc5883l>:
//----------------------------------------------------------------------------------------
void denect_hmc5883l(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x1E;       //0x1E                		 ///// 0x3C
 8005fd6:	231e      	movs	r3, #30
 8005fd8:	80bb      	strh	r3, [r7, #4]
	uint16_t addr = 0x0A;				// HMC5883L_REG_IDENT_A      ///// 0xA0
 8005fda:	230a      	movs	r3, #10
 8005fdc:	807b      	strh	r3, [r7, #2]
	//uint8_t id = 0xa8;							// in hex form
	uint8_t buff = 0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	707b      	strb	r3, [r7, #1]

	//STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1 , addr, 1, &buff, 1, 1000);
 8005fe2:	88bb      	ldrh	r3, [r7, #4]
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	b299      	uxth	r1, r3
 8005fe8:	887a      	ldrh	r2, [r7, #2]
 8005fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fee:	9302      	str	r3, [sp, #8]
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	9301      	str	r3, [sp, #4]
 8005ff4:	1c7b      	adds	r3, r7, #1
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	4809      	ldr	r0, [pc, #36]	; (8006020 <denect_hmc5883l+0x54>)
 8005ffc:	f003 fe50 	bl	8009ca0 <HAL_I2C_Mem_Read>
 8006000:	4603      	mov	r3, r0
 8006002:	80fb      	strh	r3, [r7, #6]
	if(STATUS == 0)
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d103      	bne.n	8006012 <denect_hmc5883l+0x46>
	{
		i2c_device.HMC5883L_ready_status = true;
 800600a:	4b06      	ldr	r3, [pc, #24]	; (8006024 <denect_hmc5883l+0x58>)
 800600c:	2201      	movs	r2, #1
 800600e:	709a      	strb	r2, [r3, #2]
//	HMC5883L_setDataRate(HMC5883L_DATARATE_15HZ);
//	HMC5883L_setSamples(HMC5883L_SAMPLES_1); HMC5883L_setOffset(0, 0);
//
//	Vector mag = HMC5883L_readRaw();

}
 8006010:	e002      	b.n	8006018 <denect_hmc5883l+0x4c>
		i2c_device.HMC5883L_ready_status = false;
 8006012:	4b04      	ldr	r3, [pc, #16]	; (8006024 <denect_hmc5883l+0x58>)
 8006014:	2200      	movs	r2, #0
 8006016:	709a      	strb	r2, [r3, #2]
}
 8006018:	bf00      	nop
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	2000040c 	.word	0x2000040c
 8006024:	200004a8 	.word	0x200004a8

08006028 <detect_ms5611>:
//----------------------------------------------------------------------------------------
void detect_ms5611(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x77;
 8006032:	2377      	movs	r3, #119	; 0x77
 8006034:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00 ;
 8006036:	2300      	movs	r3, #0
 8006038:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800603e:	88bb      	ldrh	r3, [r7, #4]
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	b299      	uxth	r1, r3
 8006044:	887a      	ldrh	r2, [r7, #2]
 8006046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800604a:	9302      	str	r3, [sp, #8]
 800604c:	2301      	movs	r3, #1
 800604e:	9301      	str	r3, [sp, #4]
 8006050:	1c7b      	adds	r3, r7, #1
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	2301      	movs	r3, #1
 8006056:	4809      	ldr	r0, [pc, #36]	; (800607c <detect_ms5611+0x54>)
 8006058:	f003 fe22 	bl	8009ca0 <HAL_I2C_Mem_Read>
 800605c:	4603      	mov	r3, r0
 800605e:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8006060:	88fb      	ldrh	r3, [r7, #6]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d103      	bne.n	800606e <detect_ms5611+0x46>
	{
		i2c_device.MS5611_ready_status = true;
 8006066:	4b06      	ldr	r3, [pc, #24]	; (8006080 <detect_ms5611+0x58>)
 8006068:	2201      	movs	r2, #1
 800606a:	70da      	strb	r2, [r3, #3]
	}
	else
	{
		i2c_device.MS5611_ready_status = false;
	}
}
 800606c:	e002      	b.n	8006074 <detect_ms5611+0x4c>
		i2c_device.MS5611_ready_status = false;
 800606e:	4b04      	ldr	r3, [pc, #16]	; (8006080 <detect_ms5611+0x58>)
 8006070:	2200      	movs	r2, #0
 8006072:	70da      	strb	r2, [r3, #3]
}
 8006074:	bf00      	nop
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	2000040c 	.word	0x2000040c
 8006080:	200004a8 	.word	0x200004a8

08006084 <detect_apds9960>:
//----------------------------------------------------------------------------------------
void detect_apds9960(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x39;
 800608e:	2339      	movs	r3, #57	; 0x39
 8006090:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x92;
 8006092:	2392      	movs	r3, #146	; 0x92
 8006094:	807b      	strh	r3, [r7, #2]
	uint8_t id = 0xa8;							// in hex form
 8006096:	23a8      	movs	r3, #168	; 0xa8
 8006098:	707b      	strb	r3, [r7, #1]
	uint8_t buff = 0;
 800609a:	2300      	movs	r3, #0
 800609c:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800609e:	88bb      	ldrh	r3, [r7, #4]
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	b299      	uxth	r1, r3
 80060a4:	887a      	ldrh	r2, [r7, #2]
 80060a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060aa:	9302      	str	r3, [sp, #8]
 80060ac:	2301      	movs	r3, #1
 80060ae:	9301      	str	r3, [sp, #4]
 80060b0:	463b      	mov	r3, r7
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	2301      	movs	r3, #1
 80060b6:	480c      	ldr	r0, [pc, #48]	; (80060e8 <detect_apds9960+0x64>)
 80060b8:	f003 fdf2 	bl	8009ca0 <HAL_I2C_Mem_Read>
 80060bc:	4603      	mov	r3, r0
 80060be:	80fb      	strh	r3, [r7, #6]

	if((buff == id) && (STATUS == 0))
 80060c0:	783b      	ldrb	r3, [r7, #0]
 80060c2:	787a      	ldrb	r2, [r7, #1]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d106      	bne.n	80060d6 <detect_apds9960+0x52>
 80060c8:	88fb      	ldrh	r3, [r7, #6]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d103      	bne.n	80060d6 <detect_apds9960+0x52>
	{
		i2c_device.APDS9960_ready_status = true;
 80060ce:	4b07      	ldr	r3, [pc, #28]	; (80060ec <detect_apds9960+0x68>)
 80060d0:	2201      	movs	r2, #1
 80060d2:	711a      	strb	r2, [r3, #4]
 80060d4:	e003      	b.n	80060de <detect_apds9960+0x5a>
	}
	else
	{
		i2c_device.APDS9960_ready_status = false;
 80060d6:	4b05      	ldr	r3, [pc, #20]	; (80060ec <detect_apds9960+0x68>)
 80060d8:	2200      	movs	r2, #0
 80060da:	711a      	strb	r2, [r3, #4]
	}
}
 80060dc:	bf00      	nop
 80060de:	bf00      	nop
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	2000040c 	.word	0x2000040c
 80060ec:	200004a8 	.word	0x200004a8

080060f0 <detect_oled_screen>:
//----------------------------------------------------------------------------------------
void detect_oled_screen(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af02      	add	r7, sp, #8
	uint16_t STATUS = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = 0x00;
 80060fa:	2300      	movs	r3, #0
 80060fc:	713b      	strb	r3, [r7, #4]
	buffer[1] = 0xAE;
 80060fe:	23ae      	movs	r3, #174	; 0xae
 8006100:	717b      	strb	r3, [r7, #5]

	STATUS = HAL_I2C_Master_Transmit(&hi2c3, 0x78,buffer, 2, 1000);
 8006102:	1d3a      	adds	r2, r7, #4
 8006104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	2302      	movs	r3, #2
 800610c:	2178      	movs	r1, #120	; 0x78
 800610e:	4809      	ldr	r0, [pc, #36]	; (8006134 <detect_oled_screen+0x44>)
 8006110:	f003 f9a8 	bl	8009464 <HAL_I2C_Master_Transmit>
 8006114:	4603      	mov	r3, r0
 8006116:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8006118:	88fb      	ldrh	r3, [r7, #6]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d103      	bne.n	8006126 <detect_oled_screen+0x36>
	{
		i2c_device.OLED_ready_status = true;
 800611e:	4b06      	ldr	r3, [pc, #24]	; (8006138 <detect_oled_screen+0x48>)
 8006120:	2201      	movs	r2, #1
 8006122:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		i2c_device.OLED_ready_status = false;
	}
}
 8006124:	e002      	b.n	800612c <detect_oled_screen+0x3c>
		i2c_device.OLED_ready_status = false;
 8006126:	4b04      	ldr	r3, [pc, #16]	; (8006138 <detect_oled_screen+0x48>)
 8006128:	2200      	movs	r2, #0
 800612a:	719a      	strb	r2, [r3, #6]
}
 800612c:	bf00      	nop
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	20000360 	.word	0x20000360
 8006138:	200004a8 	.word	0x200004a8

0800613c <detect_ds3231>:
//----------------------------------------------------------------------------------------
void detect_ds3231(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x68;
 8006146:	2368      	movs	r3, #104	; 0x68
 8006148:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00;						// Read seconds
 800614a:	2300      	movs	r3, #0
 800614c:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8006152:	88bb      	ldrh	r3, [r7, #4]
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	b299      	uxth	r1, r3
 8006158:	887a      	ldrh	r2, [r7, #2]
 800615a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800615e:	9302      	str	r3, [sp, #8]
 8006160:	2301      	movs	r3, #1
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	1c7b      	adds	r3, r7, #1
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	2301      	movs	r3, #1
 800616a:	4809      	ldr	r0, [pc, #36]	; (8006190 <detect_ds3231+0x54>)
 800616c:	f003 fd98 	bl	8009ca0 <HAL_I2C_Mem_Read>
 8006170:	4603      	mov	r3, r0
 8006172:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8006174:	88fb      	ldrh	r3, [r7, #6]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d103      	bne.n	8006182 <detect_ds3231+0x46>
	{
		i2c_device.DS3231_ready_status = true;
 800617a:	4b06      	ldr	r3, [pc, #24]	; (8006194 <detect_ds3231+0x58>)
 800617c:	2201      	movs	r2, #1
 800617e:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		i2c_device.DS3231_ready_status = false;
	}
}
 8006180:	e002      	b.n	8006188 <detect_ds3231+0x4c>
		i2c_device.DS3231_ready_status = false;
 8006182:	4b04      	ldr	r3, [pc, #16]	; (8006194 <detect_ds3231+0x58>)
 8006184:	2200      	movs	r2, #0
 8006186:	71da      	strb	r2, [r3, #7]
}
 8006188:	bf00      	nop
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	20000360 	.word	0x20000360
 8006194:	200004a8 	.word	0x200004a8

08006198 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af04      	add	r7, sp, #16
 800619e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80061a0:	2364      	movs	r3, #100	; 0x64
 80061a2:	9302      	str	r3, [sp, #8]
 80061a4:	2301      	movs	r3, #1
 80061a6:	9301      	str	r3, [sp, #4]
 80061a8:	f107 030f 	add.w	r3, r7, #15
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	2301      	movs	r3, #1
 80061b0:	2275      	movs	r2, #117	; 0x75
 80061b2:	21d0      	movs	r1, #208	; 0xd0
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f003 fd73 	bl	8009ca0 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	2b68      	cmp	r3, #104	; 0x68
 80061be:	d13d      	bne.n	800623c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80061c4:	2364      	movs	r3, #100	; 0x64
 80061c6:	9302      	str	r3, [sp, #8]
 80061c8:	2301      	movs	r3, #1
 80061ca:	9301      	str	r3, [sp, #4]
 80061cc:	f107 030e 	add.w	r3, r7, #14
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	2301      	movs	r3, #1
 80061d4:	226b      	movs	r2, #107	; 0x6b
 80061d6:	21d0      	movs	r1, #208	; 0xd0
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f003 fc67 	bl	8009aac <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80061de:	2307      	movs	r3, #7
 80061e0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80061e2:	2364      	movs	r3, #100	; 0x64
 80061e4:	9302      	str	r3, [sp, #8]
 80061e6:	2301      	movs	r3, #1
 80061e8:	9301      	str	r3, [sp, #4]
 80061ea:	f107 030e 	add.w	r3, r7, #14
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	2301      	movs	r3, #1
 80061f2:	2219      	movs	r2, #25
 80061f4:	21d0      	movs	r1, #208	; 0xd0
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f003 fc58 	bl	8009aac <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80061fc:	2300      	movs	r3, #0
 80061fe:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8006200:	2364      	movs	r3, #100	; 0x64
 8006202:	9302      	str	r3, [sp, #8]
 8006204:	2301      	movs	r3, #1
 8006206:	9301      	str	r3, [sp, #4]
 8006208:	f107 030e 	add.w	r3, r7, #14
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	2301      	movs	r3, #1
 8006210:	221c      	movs	r2, #28
 8006212:	21d0      	movs	r1, #208	; 0xd0
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f003 fc49 	bl	8009aac <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800621a:	2300      	movs	r3, #0
 800621c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800621e:	2364      	movs	r3, #100	; 0x64
 8006220:	9302      	str	r3, [sp, #8]
 8006222:	2301      	movs	r3, #1
 8006224:	9301      	str	r3, [sp, #4]
 8006226:	f107 030e 	add.w	r3, r7, #14
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	2301      	movs	r3, #1
 800622e:	221b      	movs	r2, #27
 8006230:	21d0      	movs	r1, #208	; 0xd0
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f003 fc3a 	bl	8009aac <HAL_I2C_Mem_Write>
        return 0;
 8006238:	2300      	movs	r3, #0
 800623a:	e000      	b.n	800623e <MPU6050_Init+0xa6>
    }
    return 1;
 800623c:	2301      	movs	r3, #1
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8006248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800624c:	b094      	sub	sp, #80	; 0x50
 800624e:	af04      	add	r7, sp, #16
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8006254:	2364      	movs	r3, #100	; 0x64
 8006256:	9302      	str	r3, [sp, #8]
 8006258:	230e      	movs	r3, #14
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	f107 0308 	add.w	r3, r7, #8
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	2301      	movs	r3, #1
 8006264:	223b      	movs	r2, #59	; 0x3b
 8006266:	21d0      	movs	r1, #208	; 0xd0
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f003 fd19 	bl	8009ca0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800626e:	7a3b      	ldrb	r3, [r7, #8]
 8006270:	021b      	lsls	r3, r3, #8
 8006272:	b21a      	sxth	r2, r3
 8006274:	7a7b      	ldrb	r3, [r7, #9]
 8006276:	b21b      	sxth	r3, r3
 8006278:	4313      	orrs	r3, r2
 800627a:	b21a      	sxth	r2, r3
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8006280:	7abb      	ldrb	r3, [r7, #10]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	b21a      	sxth	r2, r3
 8006286:	7afb      	ldrb	r3, [r7, #11]
 8006288:	b21b      	sxth	r3, r3
 800628a:	4313      	orrs	r3, r2
 800628c:	b21a      	sxth	r2, r3
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8006292:	7b3b      	ldrb	r3, [r7, #12]
 8006294:	021b      	lsls	r3, r3, #8
 8006296:	b21a      	sxth	r2, r3
 8006298:	7b7b      	ldrb	r3, [r7, #13]
 800629a:	b21b      	sxth	r3, r3
 800629c:	4313      	orrs	r3, r2
 800629e:	b21a      	sxth	r2, r3
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80062a4:	7bbb      	ldrb	r3, [r7, #14]
 80062a6:	021b      	lsls	r3, r3, #8
 80062a8:	b21a      	sxth	r2, r3
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	b21b      	sxth	r3, r3
 80062ae:	4313      	orrs	r3, r2
 80062b0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80062b2:	7c3b      	ldrb	r3, [r7, #16]
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	b21a      	sxth	r2, r3
 80062b8:	7c7b      	ldrb	r3, [r7, #17]
 80062ba:	b21b      	sxth	r3, r3
 80062bc:	4313      	orrs	r3, r2
 80062be:	b21a      	sxth	r2, r3
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80062c4:	7cbb      	ldrb	r3, [r7, #18]
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	b21a      	sxth	r2, r3
 80062ca:	7cfb      	ldrb	r3, [r7, #19]
 80062cc:	b21b      	sxth	r3, r3
 80062ce:	4313      	orrs	r3, r2
 80062d0:	b21a      	sxth	r2, r3
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80062d6:	7d3b      	ldrb	r3, [r7, #20]
 80062d8:	021b      	lsls	r3, r3, #8
 80062da:	b21a      	sxth	r2, r3
 80062dc:	7d7b      	ldrb	r3, [r7, #21]
 80062de:	b21b      	sxth	r3, r3
 80062e0:	4313      	orrs	r3, r2
 80062e2:	b21a      	sxth	r2, r3
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fa f910 	bl	8000514 <__aeabi_i2d>
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	4bbd      	ldr	r3, [pc, #756]	; (80065f0 <MPU6050_Read_All+0x3a8>)
 80062fa:	f7fa fa9f 	bl	800083c <__aeabi_ddiv>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800630e:	4618      	mov	r0, r3
 8006310:	f7fa f900 	bl	8000514 <__aeabi_i2d>
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	4bb5      	ldr	r3, [pc, #724]	; (80065f0 <MPU6050_Read_All+0x3a8>)
 800631a:	f7fa fa8f 	bl	800083c <__aeabi_ddiv>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800632e:	4618      	mov	r0, r3
 8006330:	f7fa f8f0 	bl	8000514 <__aeabi_i2d>
 8006334:	a3a8      	add	r3, pc, #672	; (adr r3, 80065d8 <MPU6050_Read_All+0x390>)
 8006336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633a:	f7fa fa7f 	bl	800083c <__aeabi_ddiv>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8006348:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800634c:	ee07 3a90 	vmov	s15, r3
 8006350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006354:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80065f4 <MPU6050_Read_All+0x3ac>
 8006358:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800635c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80065f8 <MPU6050_Read_All+0x3b0>
 8006360:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8006370:	4618      	mov	r0, r3
 8006372:	f7fa f8cf 	bl	8000514 <__aeabi_i2d>
 8006376:	a39a      	add	r3, pc, #616	; (adr r3, 80065e0 <MPU6050_Read_All+0x398>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f7fa fa5e 	bl	800083c <__aeabi_ddiv>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8006390:	4618      	mov	r0, r3
 8006392:	f7fa f8bf 	bl	8000514 <__aeabi_i2d>
 8006396:	a392      	add	r3, pc, #584	; (adr r3, 80065e0 <MPU6050_Read_All+0x398>)
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f7fa fa4e 	bl	800083c <__aeabi_ddiv>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fa f8af 	bl	8000514 <__aeabi_i2d>
 80063b6:	a38a      	add	r3, pc, #552	; (adr r3, 80065e0 <MPU6050_Read_All+0x398>)
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	f7fa fa3e 	bl	800083c <__aeabi_ddiv>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80063ca:	f000 fe61 	bl	8007090 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	4b8a      	ldr	r3, [pc, #552]	; (80065fc <MPU6050_Read_All+0x3b4>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fa f88c 	bl	80004f4 <__aeabi_ui2d>
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	4b87      	ldr	r3, [pc, #540]	; (8006600 <MPU6050_Read_All+0x3b8>)
 80063e2:	f7fa fa2b 	bl	800083c <__aeabi_ddiv>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80063ee:	f000 fe4f 	bl	8007090 <HAL_GetTick>
 80063f2:	4603      	mov	r3, r0
 80063f4:	4a81      	ldr	r2, [pc, #516]	; (80065fc <MPU6050_Read_All+0x3b4>)
 80063f6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063fe:	461a      	mov	r2, r3
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006406:	fb03 f202 	mul.w	r2, r3, r2
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006410:	4619      	mov	r1, r3
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006418:	fb03 f301 	mul.w	r3, r3, r1
 800641c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800641e:	4618      	mov	r0, r3
 8006420:	f7fa f878 	bl	8000514 <__aeabi_i2d>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	ec43 2b10 	vmov	d0, r2, r3
 800642c:	f00d f890 	bl	8013550 <sqrt>
 8006430:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	f04f 0300 	mov.w	r3, #0
 800643c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006440:	f7fa fb3a 	bl	8000ab8 <__aeabi_dcmpeq>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d11f      	bne.n	800648a <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006450:	4618      	mov	r0, r3
 8006452:	f7fa f85f 	bl	8000514 <__aeabi_i2d>
 8006456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800645a:	f7fa f9ef 	bl	800083c <__aeabi_ddiv>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	ec43 2b17 	vmov	d7, r2, r3
 8006466:	eeb0 0a47 	vmov.f32	s0, s14
 800646a:	eef0 0a67 	vmov.f32	s1, s15
 800646e:	f00c fec3 	bl	80131f8 <atan>
 8006472:	ec51 0b10 	vmov	r0, r1, d0
 8006476:	a35c      	add	r3, pc, #368	; (adr r3, 80065e8 <MPU6050_Read_All+0x3a0>)
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	f7fa f8b4 	bl	80005e8 <__aeabi_dmul>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8006488:	e005      	b.n	8006496 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 800648a:	f04f 0200 	mov.w	r2, #0
 800648e:	f04f 0300 	mov.w	r3, #0
 8006492:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800649c:	425b      	negs	r3, r3
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fa f838 	bl	8000514 <__aeabi_i2d>
 80064a4:	4682      	mov	sl, r0
 80064a6:	468b      	mov	fp, r1
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fa f830 	bl	8000514 <__aeabi_i2d>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	ec43 2b11 	vmov	d1, r2, r3
 80064bc:	ec4b ab10 	vmov	d0, sl, fp
 80064c0:	f00d f843 	bl	801354a <atan2>
 80064c4:	ec51 0b10 	vmov	r0, r1, d0
 80064c8:	a347      	add	r3, pc, #284	; (adr r3, 80065e8 <MPU6050_Read_All+0x3a0>)
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	f7fa f88b 	bl	80005e8 <__aeabi_dmul>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	4b49      	ldr	r3, [pc, #292]	; (8006604 <MPU6050_Read_All+0x3bc>)
 80064e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80064e4:	f7fa faf2 	bl	8000acc <__aeabi_dcmplt>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <MPU6050_Read_All+0x2bc>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	4b43      	ldr	r3, [pc, #268]	; (8006608 <MPU6050_Read_All+0x3c0>)
 80064fa:	f7fa fb05 	bl	8000b08 <__aeabi_dcmpgt>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d114      	bne.n	800652e <MPU6050_Read_All+0x2e6>
 8006504:	f04f 0200 	mov.w	r2, #0
 8006508:	4b3f      	ldr	r3, [pc, #252]	; (8006608 <MPU6050_Read_All+0x3c0>)
 800650a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800650e:	f7fa fafb 	bl	8000b08 <__aeabi_dcmpgt>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d015      	beq.n	8006544 <MPU6050_Read_All+0x2fc>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800651e:	f04f 0200 	mov.w	r2, #0
 8006522:	4b38      	ldr	r3, [pc, #224]	; (8006604 <MPU6050_Read_All+0x3bc>)
 8006524:	f7fa fad2 	bl	8000acc <__aeabi_dcmplt>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 800652e:	4937      	ldr	r1, [pc, #220]	; (800660c <MPU6050_Read_All+0x3c4>)
 8006530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006534:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800653e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8006542:	e014      	b.n	800656e <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800654a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800654e:	eeb0 1a47 	vmov.f32	s2, s14
 8006552:	eef0 1a67 	vmov.f32	s3, s15
 8006556:	ed97 0b06 	vldr	d0, [r7, #24]
 800655a:	482c      	ldr	r0, [pc, #176]	; (800660c <MPU6050_Read_All+0x3c4>)
 800655c:	f000 f85a 	bl	8006614 <Kalman_getAngle>
 8006560:	eeb0 7a40 	vmov.f32	s14, s0
 8006564:	eef0 7a60 	vmov.f32	s15, s1
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8006574:	4690      	mov	r8, r2
 8006576:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800657a:	f04f 0200 	mov.w	r2, #0
 800657e:	4b22      	ldr	r3, [pc, #136]	; (8006608 <MPU6050_Read_All+0x3c0>)
 8006580:	4640      	mov	r0, r8
 8006582:	4649      	mov	r1, r9
 8006584:	f7fa fac0 	bl	8000b08 <__aeabi_dcmpgt>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d008      	beq.n	80065a0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006594:	4614      	mov	r4, r2
 8006596:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80065a6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80065aa:	eeb0 1a47 	vmov.f32	s2, s14
 80065ae:	eef0 1a67 	vmov.f32	s3, s15
 80065b2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80065b6:	4816      	ldr	r0, [pc, #88]	; (8006610 <MPU6050_Read_All+0x3c8>)
 80065b8:	f000 f82c 	bl	8006614 <Kalman_getAngle>
 80065bc:	eeb0 7a40 	vmov.f32	s14, s0
 80065c0:	eef0 7a60 	vmov.f32	s15, s1
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 80065ca:	bf00      	nop
 80065cc:	3740      	adds	r7, #64	; 0x40
 80065ce:	46bd      	mov	sp, r7
 80065d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065d4:	f3af 8000 	nop.w
 80065d8:	00000000 	.word	0x00000000
 80065dc:	40cc2900 	.word	0x40cc2900
 80065e0:	00000000 	.word	0x00000000
 80065e4:	40606000 	.word	0x40606000
 80065e8:	1a63c1f8 	.word	0x1a63c1f8
 80065ec:	404ca5dc 	.word	0x404ca5dc
 80065f0:	40d00000 	.word	0x40d00000
 80065f4:	43aa0000 	.word	0x43aa0000
 80065f8:	42121eb8 	.word	0x42121eb8
 80065fc:	20000714 	.word	0x20000714
 8006600:	408f4000 	.word	0x408f4000
 8006604:	c0568000 	.word	0xc0568000
 8006608:	40568000 	.word	0x40568000
 800660c:	20000220 	.word	0x20000220
 8006610:	200001d8 	.word	0x200001d8

08006614 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8006614:	b5b0      	push	{r4, r5, r7, lr}
 8006616:	b096      	sub	sp, #88	; 0x58
 8006618:	af00      	add	r7, sp, #0
 800661a:	61f8      	str	r0, [r7, #28]
 800661c:	ed87 0b04 	vstr	d0, [r7, #16]
 8006620:	ed87 1b02 	vstr	d1, [r7, #8]
 8006624:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800662e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006632:	f7f9 fe21 	bl	8000278 <__aeabi_dsub>
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006644:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800664c:	f7f9 ffcc 	bl	80005e8 <__aeabi_dmul>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4620      	mov	r0, r4
 8006656:	4629      	mov	r1, r5
 8006658:	f7f9 fe10 	bl	800027c <__adddf3>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	69f9      	ldr	r1, [r7, #28]
 8006662:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006676:	f7f9 ffb7 	bl	80005e8 <__aeabi_dmul>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	4610      	mov	r0, r2
 8006680:	4619      	mov	r1, r3
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8006688:	f7f9 fdf6 	bl	8000278 <__aeabi_dsub>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	4610      	mov	r0, r2
 8006692:	4619      	mov	r1, r3
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800669a:	f7f9 fded 	bl	8000278 <__aeabi_dsub>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4610      	mov	r0, r2
 80066a4:	4619      	mov	r1, r3
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	f7f9 fde6 	bl	800027c <__adddf3>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4610      	mov	r0, r2
 80066b6:	4619      	mov	r1, r3
 80066b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066bc:	f7f9 ff94 	bl	80005e8 <__aeabi_dmul>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4620      	mov	r0, r4
 80066c6:	4629      	mov	r1, r5
 80066c8:	f7f9 fdd8 	bl	800027c <__adddf3>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	69f9      	ldr	r1, [r7, #28]
 80066d2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80066e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066e6:	f7f9 ff7f 	bl	80005e8 <__aeabi_dmul>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	4620      	mov	r0, r4
 80066f0:	4629      	mov	r1, r5
 80066f2:	f7f9 fdc1 	bl	8000278 <__aeabi_dsub>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	69f9      	ldr	r1, [r7, #28]
 80066fc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800670c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006710:	f7f9 ff6a 	bl	80005e8 <__aeabi_dmul>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4620      	mov	r0, r4
 800671a:	4629      	mov	r1, r5
 800671c:	f7f9 fdac 	bl	8000278 <__aeabi_dsub>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	69f9      	ldr	r1, [r7, #28]
 8006726:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800673a:	f7f9 ff55 	bl	80005e8 <__aeabi_dmul>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4620      	mov	r0, r4
 8006744:	4629      	mov	r1, r5
 8006746:	f7f9 fd99 	bl	800027c <__adddf3>
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	69f9      	ldr	r1, [r7, #28]
 8006750:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006760:	f7f9 fd8c 	bl	800027c <__adddf3>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8006772:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006776:	f7fa f861 	bl	800083c <__aeabi_ddiv>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006788:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800678c:	f7fa f856 	bl	800083c <__aeabi_ddiv>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800679e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80067a2:	f7f9 fd69 	bl	8000278 <__aeabi_dsub>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80067b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80067b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067bc:	f7f9 ff14 	bl	80005e8 <__aeabi_dmul>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4620      	mov	r0, r4
 80067c6:	4629      	mov	r1, r5
 80067c8:	f7f9 fd58 	bl	800027c <__adddf3>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	69f9      	ldr	r1, [r7, #28]
 80067d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80067dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80067e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067e4:	f7f9 ff00 	bl	80005e8 <__aeabi_dmul>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4620      	mov	r0, r4
 80067ee:	4629      	mov	r1, r5
 80067f0:	f7f9 fd44 	bl	800027c <__adddf3>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	69f9      	ldr	r1, [r7, #28]
 80067fa:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006804:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800680e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8006818:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800681c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006820:	f7f9 fee2 	bl	80005e8 <__aeabi_dmul>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4620      	mov	r0, r4
 800682a:	4629      	mov	r1, r5
 800682c:	f7f9 fd24 	bl	8000278 <__aeabi_dsub>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	69f9      	ldr	r1, [r7, #28]
 8006836:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8006840:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006844:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006848:	f7f9 fece 	bl	80005e8 <__aeabi_dmul>
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	4620      	mov	r0, r4
 8006852:	4629      	mov	r1, r5
 8006854:	f7f9 fd10 	bl	8000278 <__aeabi_dsub>
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	69f9      	ldr	r1, [r7, #28]
 800685e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8006868:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800686c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006870:	f7f9 feba 	bl	80005e8 <__aeabi_dmul>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4620      	mov	r0, r4
 800687a:	4629      	mov	r1, r5
 800687c:	f7f9 fcfc 	bl	8000278 <__aeabi_dsub>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	69f9      	ldr	r1, [r7, #28]
 8006886:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8006890:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006894:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006898:	f7f9 fea6 	bl	80005e8 <__aeabi_dmul>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	4620      	mov	r0, r4
 80068a2:	4629      	mov	r1, r5
 80068a4:	f7f9 fce8 	bl	8000278 <__aeabi_dsub>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	69f9      	ldr	r1, [r7, #28]
 80068ae:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80068b8:	ec43 2b17 	vmov	d7, r2, r3
};
 80068bc:	eeb0 0a47 	vmov.f32	s0, s14
 80068c0:	eef0 0a67 	vmov.f32	s1, s15
 80068c4:	3758      	adds	r7, #88	; 0x58
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080068cc <ms5611_set_i2c>:

/**
 * select a hal I2C to talk to MS5611
 * @param i2cx The i2c port to talk to MS5611
 */
void ms5611_set_i2c(I2C_HandleTypeDef* i2cx){
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	ms5611_i2cx = i2cx;
 80068d4:	4a04      	ldr	r2, [pc, #16]	; (80068e8 <ms5611_set_i2c+0x1c>)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6013      	str	r3, [r2, #0]
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	20000710 	.word	0x20000710

080068ec <ms5611_read_i2c>:
 * @param length length of bytes to request from MS5611
 * @param output output data
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_read_i2c(uint8_t register_address,uint8_t length,uint8_t* output)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af04      	add	r7, sp, #16
 80068f2:	4603      	mov	r3, r0
 80068f4:	603a      	str	r2, [r7, #0]
 80068f6:	71fb      	strb	r3, [r7, #7]
 80068f8:	460b      	mov	r3, r1
 80068fa:	71bb      	strb	r3, [r7, #6]
	//return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
	uint8_t STATUS = 0;
 80068fc:	2300      	movs	r3, #0
 80068fe:	73fb      	strb	r3, [r7, #15]
	STATUS = HAL_I2C_Mem_Read(&hi2c2, MS5611_I2C_ADDR<<1, register_address, 1, output, length, 1000);
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	b29a      	uxth	r2, r3
 8006904:	79bb      	ldrb	r3, [r7, #6]
 8006906:	b29b      	uxth	r3, r3
 8006908:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800690c:	9102      	str	r1, [sp, #8]
 800690e:	9301      	str	r3, [sp, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	2301      	movs	r3, #1
 8006916:	21ee      	movs	r1, #238	; 0xee
 8006918:	4804      	ldr	r0, [pc, #16]	; (800692c <ms5611_read_i2c+0x40>)
 800691a:	f003 f9c1 	bl	8009ca0 <HAL_I2C_Mem_Read>
 800691e:	4603      	mov	r3, r0
 8006920:	73fb      	strb	r3, [r7, #15]
	return STATUS;
 8006922:	7bfb      	ldrb	r3, [r7, #15]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	2000040c 	.word	0x2000040c

08006930 <ms5611_write_i2c>:
 * @param length length of bytes to write to MS5611
 * @param output buffer to hold data to be sent
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_write_i2c(uint8_t register_address,uint8_t length,uint8_t* input)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af04      	add	r7, sp, #16
 8006936:	4603      	mov	r3, r0
 8006938:	603a      	str	r2, [r7, #0]
 800693a:	71fb      	strb	r3, [r7, #7]
 800693c:	460b      	mov	r3, r1
 800693e:	71bb      	strb	r3, [r7, #6]
	//STATUS = I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
	uint8_t STATUS = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	73fb      	strb	r3, [r7, #15]
	STATUS = HAL_I2C_Mem_Read(&hi2c2, MS5611_I2C_ADDR<<1, register_address, 1, input, length, 1000);
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	b29a      	uxth	r2, r3
 8006948:	79bb      	ldrb	r3, [r7, #6]
 800694a:	b29b      	uxth	r3, r3
 800694c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006950:	9102      	str	r1, [sp, #8]
 8006952:	9301      	str	r3, [sp, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	2301      	movs	r3, #1
 800695a:	21ee      	movs	r1, #238	; 0xee
 800695c:	4804      	ldr	r0, [pc, #16]	; (8006970 <ms5611_write_i2c+0x40>)
 800695e:	f003 f99f 	bl	8009ca0 <HAL_I2C_Mem_Read>
 8006962:	4603      	mov	r3, r0
 8006964:	73fb      	strb	r3, [r7, #15]
	return STATUS;
 8006966:	7bfb      	ldrb	r3, [r7, #15]

}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	2000040c 	.word	0x2000040c

08006974 <ms5611_init>:
}

/**
 * Initialize MS5611: read and store factory calibration data.
 */
void ms5611_init(){
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
	//read 6 factory calibration data
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 800697a:	2300      	movs	r3, #0
 800697c:	607b      	str	r3, [r7, #4]
 800697e:	e01c      	b.n	80069ba <ms5611_init+0x46>
		uint8_t reg_addr = MS5611_CMD_READ_PROM + (i << 1);//interval 2
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	b2db      	uxtb	r3, r3
 8006988:	3b5e      	subs	r3, #94	; 0x5e
 800698a:	70fb      	strb	r3, [r7, #3]
		uint8_t buffer[2] = {0};
 800698c:	2300      	movs	r3, #0
 800698e:	803b      	strh	r3, [r7, #0]
		ms5611_read_i2c(reg_addr,2,buffer);
 8006990:	463a      	mov	r2, r7
 8006992:	78fb      	ldrb	r3, [r7, #3]
 8006994:	2102      	movs	r1, #2
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff ffa8 	bl	80068ec <ms5611_read_i2c>

		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 800699c:	783b      	ldrb	r3, [r7, #0]
 800699e:	021b      	lsls	r3, r3, #8
 80069a0:	b21a      	sxth	r2, r3
 80069a2:	787b      	ldrb	r3, [r7, #1]
 80069a4:	b21b      	sxth	r3, r3
 80069a6:	4313      	orrs	r3, r2
 80069a8:	b21b      	sxth	r3, r3
 80069aa:	b299      	uxth	r1, r3
 80069ac:	4a07      	ldr	r2, [pc, #28]	; (80069cc <ms5611_init+0x58>)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3301      	adds	r3, #1
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b05      	cmp	r3, #5
 80069be:	dddf      	ble.n	8006980 <ms5611_init+0xc>
	}
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	2000071c 	.word	0x2000071c

080069d0 <ms5611_update_pressure>:

/**
 * Read raw pressure from MS5611.
 */
void ms5611_update_pressure(){
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80069d6:	4a17      	ldr	r2, [pc, #92]	; (8006a34 <ms5611_update_pressure+0x64>)
 80069d8:	463b      	mov	r3, r7
 80069da:	6812      	ldr	r2, [r2, #0]
 80069dc:	4611      	mov	r1, r2
 80069de:	8019      	strh	r1, [r3, #0]
 80069e0:	3302      	adds	r3, #2
 80069e2:	0c12      	lsrs	r2, r2, #16
 80069e4:	701a      	strb	r2, [r3, #0]
	int state;
	state = ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80069e6:	4b14      	ldr	r3, [pc, #80]	; (8006a38 <ms5611_update_pressure+0x68>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	b25b      	sxtb	r3, r3
 80069ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069f2:	b25b      	sxtb	r3, r3
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	463a      	mov	r2, r7
 80069f8:	2100      	movs	r1, #0
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff ff98 	bl	8006930 <ms5611_write_i2c>
 8006a00:	4603      	mov	r3, r0
 8006a02:	607b      	str	r3, [r7, #4]

	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8006a04:	200c      	movs	r0, #12
 8006a06:	f000 fb4f 	bl	80070a8 <HAL_Delay>

	state = ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8006a0a:	463b      	mov	r3, r7
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	2103      	movs	r1, #3
 8006a10:	2000      	movs	r0, #0
 8006a12:	f7ff ff6b 	bl	80068ec <ms5611_read_i2c>
 8006a16:	4603      	mov	r3, r0
 8006a18:	607b      	str	r3, [r7, #4]
	raw_pressure = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8006a1a:	783b      	ldrb	r3, [r7, #0]
 8006a1c:	041a      	lsls	r2, r3, #16
 8006a1e:	787b      	ldrb	r3, [r7, #1]
 8006a20:	021b      	lsls	r3, r3, #8
 8006a22:	4313      	orrs	r3, r2
 8006a24:	78ba      	ldrb	r2, [r7, #2]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	4a04      	ldr	r2, [pc, #16]	; (8006a3c <ms5611_update_pressure+0x6c>)
 8006a2a:	6013      	str	r3, [r2, #0]

}
 8006a2c:	bf00      	nop
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	08013a3c 	.word	0x08013a3c
 8006a38:	20000268 	.word	0x20000268
 8006a3c:	20000718 	.word	0x20000718

08006a40 <ms5611_update_temperature>:

/**
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8006a46:	4a17      	ldr	r2, [pc, #92]	; (8006aa4 <ms5611_update_temperature+0x64>)
 8006a48:	463b      	mov	r3, r7
 8006a4a:	6812      	ldr	r2, [r2, #0]
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	8019      	strh	r1, [r3, #0]
 8006a50:	3302      	adds	r3, #2
 8006a52:	0c12      	lsrs	r2, r2, #16
 8006a54:	701a      	strb	r2, [r3, #0]
	int state;
	state = ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8006a56:	4b14      	ldr	r3, [pc, #80]	; (8006aa8 <ms5611_update_temperature+0x68>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	005b      	lsls	r3, r3, #1
 8006a5c:	b25b      	sxtb	r3, r3
 8006a5e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8006a62:	b25b      	sxtb	r3, r3
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	463a      	mov	r2, r7
 8006a68:	2100      	movs	r1, #0
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7ff ff60 	bl	8006930 <ms5611_write_i2c>
 8006a70:	4603      	mov	r3, r0
 8006a72:	607b      	str	r3, [r7, #4]

	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8006a74:	200c      	movs	r0, #12
 8006a76:	f000 fb17 	bl	80070a8 <HAL_Delay>

	state = ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	2103      	movs	r1, #3
 8006a80:	2000      	movs	r0, #0
 8006a82:	f7ff ff33 	bl	80068ec <ms5611_read_i2c>
 8006a86:	4603      	mov	r3, r0
 8006a88:	607b      	str	r3, [r7, #4]
	raw_temperature = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8006a8a:	783b      	ldrb	r3, [r7, #0]
 8006a8c:	041a      	lsls	r2, r3, #16
 8006a8e:	787b      	ldrb	r3, [r7, #1]
 8006a90:	021b      	lsls	r3, r3, #8
 8006a92:	4313      	orrs	r3, r2
 8006a94:	78ba      	ldrb	r2, [r7, #2]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	4a04      	ldr	r2, [pc, #16]	; (8006aac <ms5611_update_temperature+0x6c>)
 8006a9a:	6013      	str	r3, [r2, #0]
}
 8006a9c:	bf00      	nop
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	08013a3c 	.word	0x08013a3c
 8006aa8:	20000268 	.word	0x20000268
 8006aac:	20000728 	.word	0x20000728

08006ab0 <ms5611_update>:

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
	ms5611_update_temperature();
 8006ab4:	f7ff ffc4 	bl	8006a40 <ms5611_update_temperature>
	ms5611_update_pressure();
 8006ab8:	f7ff ff8a 	bl	80069d0 <ms5611_update_pressure>
}
 8006abc:	bf00      	nop
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <ms5611_get_temperature>:

/**
 * Get calibrated temperature, unit: Celsius degrees
 * @return calibrated temperature
 */
double ms5611_get_temperature(){
 8006ac0:	b5b0      	push	{r4, r5, r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8006ac6:	4b36      	ldr	r3, [pc, #216]	; (8006ba0 <ms5611_get_temperature+0xe0>)
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	4b36      	ldr	r3, [pc, #216]	; (8006ba4 <ms5611_get_temperature+0xe4>)
 8006acc:	891b      	ldrh	r3, [r3, #8]
 8006ace:	021b      	lsls	r3, r3, #8
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	60fb      	str	r3, [r7, #12]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f7f9 fd0d 	bl	80004f4 <__aeabi_ui2d>
 8006ada:	4604      	mov	r4, r0
 8006adc:	460d      	mov	r5, r1
 8006ade:	4b31      	ldr	r3, [pc, #196]	; (8006ba4 <ms5611_get_temperature+0xe4>)
 8006ae0:	895b      	ldrh	r3, [r3, #10]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7f9 fd16 	bl	8000514 <__aeabi_i2d>
 8006ae8:	f04f 0200 	mov.w	r2, #0
 8006aec:	4b2e      	ldr	r3, [pc, #184]	; (8006ba8 <ms5611_get_temperature+0xe8>)
 8006aee:	f7f9 fea5 	bl	800083c <__aeabi_ddiv>
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	4620      	mov	r0, r4
 8006af8:	4629      	mov	r1, r5
 8006afa:	f7f9 fd75 	bl	80005e8 <__aeabi_dmul>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4610      	mov	r0, r2
 8006b04:	4619      	mov	r1, r3
 8006b06:	f04f 0200 	mov.w	r2, #0
 8006b0a:	4b28      	ldr	r3, [pc, #160]	; (8006bac <ms5611_get_temperature+0xec>)
 8006b0c:	f7f9 fbb6 	bl	800027c <__adddf3>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	e9c7 2300 	strd	r2, r3, [r7]

	double T2=0;
 8006b18:	f04f 0200 	mov.w	r2, #0
 8006b1c:	f04f 0300 	mov.w	r3, #0
 8006b20:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (TEMP < 2000){
 8006b24:	f04f 0200 	mov.w	r2, #0
 8006b28:	4b20      	ldr	r3, [pc, #128]	; (8006bac <ms5611_get_temperature+0xec>)
 8006b2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b2e:	f7f9 ffcd 	bl	8000acc <__aeabi_dcmplt>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d016      	beq.n	8006b66 <ms5611_get_temperature+0xa6>
		//temperature < 20 Celsius
		T2 = dT * (dT / (2147483648.0));
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f7f9 fcdb 	bl	80004f4 <__aeabi_ui2d>
 8006b3e:	4604      	mov	r4, r0
 8006b40:	460d      	mov	r5, r1
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f7f9 fcd6 	bl	80004f4 <__aeabi_ui2d>
 8006b48:	f04f 0200 	mov.w	r2, #0
 8006b4c:	4b18      	ldr	r3, [pc, #96]	; (8006bb0 <ms5611_get_temperature+0xf0>)
 8006b4e:	f7f9 fe75 	bl	800083c <__aeabi_ddiv>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4620      	mov	r0, r4
 8006b58:	4629      	mov	r1, r5
 8006b5a:	f7f9 fd45 	bl	80005e8 <__aeabi_dmul>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}

	TEMP = TEMP - T2;
 8006b66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b6e:	f7f9 fb83 	bl	8000278 <__aeabi_dsub>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	e9c7 2300 	strd	r2, r3, [r7]
	return TEMP / 100;
 8006b7a:	f04f 0200 	mov.w	r2, #0
 8006b7e:	4b0d      	ldr	r3, [pc, #52]	; (8006bb4 <ms5611_get_temperature+0xf4>)
 8006b80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b84:	f7f9 fe5a 	bl	800083c <__aeabi_ddiv>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	ec43 2b17 	vmov	d7, r2, r3
}
 8006b90:	eeb0 0a47 	vmov.f32	s0, s14
 8006b94:	eef0 0a67 	vmov.f32	s1, s15
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000728 	.word	0x20000728
 8006ba4:	2000071c 	.word	0x2000071c
 8006ba8:	41600000 	.word	0x41600000
 8006bac:	409f4000 	.word	0x409f4000
 8006bb0:	41e00000 	.word	0x41e00000
 8006bb4:	40590000 	.word	0x40590000

08006bb8 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 8006bb8:	b5b0      	push	{r4, r5, r7, lr}
 8006bba:	b090      	sub	sp, #64	; 0x40
 8006bbc:	af00      	add	r7, sp, #0

	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8006bbe:	4bc4      	ldr	r3, [pc, #784]	; (8006ed0 <ms5611_get_pressure+0x318>)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	4bc4      	ldr	r3, [pc, #784]	; (8006ed4 <ms5611_get_pressure+0x31c>)
 8006bc4:	891b      	ldrh	r3, [r3, #8]
 8006bc6:	021b      	lsls	r3, r3, #8
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	627b      	str	r3, [r7, #36]	; 0x24
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8006bcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bce:	f7f9 fc91 	bl	80004f4 <__aeabi_ui2d>
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	460d      	mov	r5, r1
 8006bd6:	4bbf      	ldr	r3, [pc, #764]	; (8006ed4 <ms5611_get_pressure+0x31c>)
 8006bd8:	895b      	ldrh	r3, [r3, #10]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7f9 fc9a 	bl	8000514 <__aeabi_i2d>
 8006be0:	f04f 0200 	mov.w	r2, #0
 8006be4:	4bbc      	ldr	r3, [pc, #752]	; (8006ed8 <ms5611_get_pressure+0x320>)
 8006be6:	f7f9 fe29 	bl	800083c <__aeabi_ddiv>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4620      	mov	r0, r4
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	f7f9 fcf9 	bl	80005e8 <__aeabi_dmul>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4610      	mov	r0, r2
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	f04f 0200 	mov.w	r2, #0
 8006c02:	4bb6      	ldr	r3, [pc, #728]	; (8006edc <ms5611_get_pressure+0x324>)
 8006c04:	f7f9 fb3a 	bl	800027c <__adddf3>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double OFF = fc[1] * (65536) + fc[3] * dT / (128);
 8006c10:	4bb0      	ldr	r3, [pc, #704]	; (8006ed4 <ms5611_get_pressure+0x31c>)
 8006c12:	885b      	ldrh	r3, [r3, #2]
 8006c14:	041b      	lsls	r3, r3, #16
 8006c16:	461a      	mov	r2, r3
 8006c18:	4bae      	ldr	r3, [pc, #696]	; (8006ed4 <ms5611_get_pressure+0x31c>)
 8006c1a:	88db      	ldrh	r3, [r3, #6]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	fb03 f301 	mul.w	r3, r3, r1
 8006c24:	09db      	lsrs	r3, r3, #7
 8006c26:	4413      	add	r3, r2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7f9 fc63 	bl	80004f4 <__aeabi_ui2d>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double SENS = fc[0] * (32768) + fc[2] * dT / (256);
 8006c36:	4ba7      	ldr	r3, [pc, #668]	; (8006ed4 <ms5611_get_pressure+0x31c>)
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	03db      	lsls	r3, r3, #15
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	4ba5      	ldr	r3, [pc, #660]	; (8006ed4 <ms5611_get_pressure+0x31c>)
 8006c40:	889b      	ldrh	r3, [r3, #4]
 8006c42:	4619      	mov	r1, r3
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	fb03 f301 	mul.w	r3, r3, r1
 8006c4a:	0a1b      	lsrs	r3, r3, #8
 8006c4c:	4413      	add	r3, r2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7f9 fc50 	bl	80004f4 <__aeabi_ui2d>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768);//unit 0.01mbar
 8006c5c:	4ba0      	ldr	r3, [pc, #640]	; (8006ee0 <ms5611_get_pressure+0x328>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7f9 fc47 	bl	80004f4 <__aeabi_ui2d>
 8006c66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c6a:	f7f9 fcbd 	bl	80005e8 <__aeabi_dmul>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4610      	mov	r0, r2
 8006c74:	4619      	mov	r1, r3
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	4b9a      	ldr	r3, [pc, #616]	; (8006ee4 <ms5611_get_pressure+0x32c>)
 8006c7c:	f7f9 fdde 	bl	800083c <__aeabi_ddiv>
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	4610      	mov	r0, r2
 8006c86:	4619      	mov	r1, r3
 8006c88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c8c:	f7f9 faf4 	bl	8000278 <__aeabi_dsub>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	4610      	mov	r0, r2
 8006c96:	4619      	mov	r1, r3
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	4b92      	ldr	r3, [pc, #584]	; (8006ee8 <ms5611_get_pressure+0x330>)
 8006c9e:	f7f9 fdcd 	bl	800083c <__aeabi_ddiv>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	e9c7 2300 	strd	r2, r3, [r7]

	double T2=0, OFF2=0, SENS2=0;
 8006caa:	f04f 0200 	mov.w	r2, #0
 8006cae:	f04f 0300 	mov.w	r3, #0
 8006cb2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8006cb6:	f04f 0200 	mov.w	r2, #0
 8006cba:	f04f 0300 	mov.w	r3, #0
 8006cbe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (TEMP < 2000){
 8006cce:	f04f 0200 	mov.w	r2, #0
 8006cd2:	4b82      	ldr	r3, [pc, #520]	; (8006edc <ms5611_get_pressure+0x324>)
 8006cd4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006cd8:	f7f9 fef8 	bl	8000acc <__aeabi_dcmplt>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 80cc 	beq.w	8006e7c <ms5611_get_pressure+0x2c4>
		//temperature < 20 Celsius
		T2 = dT * dT / (2147483648);
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	fb03 f303 	mul.w	r3, r3, r3
 8006cea:	0fdb      	lsrs	r3, r3, #31
 8006cec:	461a      	mov	r2, r3
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	f7f9 fc49 	bl	800058c <__aeabi_l2d>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8006d02:	f04f 0200 	mov.w	r2, #0
 8006d06:	4b75      	ldr	r3, [pc, #468]	; (8006edc <ms5611_get_pressure+0x324>)
 8006d08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d0c:	f7f9 fab4 	bl	8000278 <__aeabi_dsub>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4610      	mov	r0, r2
 8006d16:	4619      	mov	r1, r3
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	4b73      	ldr	r3, [pc, #460]	; (8006eec <ms5611_get_pressure+0x334>)
 8006d1e:	f7f9 fc63 	bl	80005e8 <__aeabi_dmul>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4614      	mov	r4, r2
 8006d28:	461d      	mov	r5, r3
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	4b6b      	ldr	r3, [pc, #428]	; (8006edc <ms5611_get_pressure+0x324>)
 8006d30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d34:	f7f9 faa0 	bl	8000278 <__aeabi_dsub>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	4629      	mov	r1, r5
 8006d40:	f7f9 fc52 	bl	80005e8 <__aeabi_dmul>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d54:	f7f9 fd72 	bl	800083c <__aeabi_ddiv>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8006d60:	f04f 0200 	mov.w	r2, #0
 8006d64:	4b5d      	ldr	r3, [pc, #372]	; (8006edc <ms5611_get_pressure+0x324>)
 8006d66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d6a:	f7f9 fa85 	bl	8000278 <__aeabi_dsub>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	4610      	mov	r0, r2
 8006d74:	4619      	mov	r1, r3
 8006d76:	f04f 0200 	mov.w	r2, #0
 8006d7a:	4b5c      	ldr	r3, [pc, #368]	; (8006eec <ms5611_get_pressure+0x334>)
 8006d7c:	f7f9 fc34 	bl	80005e8 <__aeabi_dmul>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4614      	mov	r4, r2
 8006d86:	461d      	mov	r5, r3
 8006d88:	f04f 0200 	mov.w	r2, #0
 8006d8c:	4b53      	ldr	r3, [pc, #332]	; (8006edc <ms5611_get_pressure+0x324>)
 8006d8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d92:	f7f9 fa71 	bl	8000278 <__aeabi_dsub>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	f7f9 fc23 	bl	80005e8 <__aeabi_dmul>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	4610      	mov	r0, r2
 8006da8:	4619      	mov	r1, r3
 8006daa:	f04f 0200 	mov.w	r2, #0
 8006dae:	4b50      	ldr	r3, [pc, #320]	; (8006ef0 <ms5611_get_pressure+0x338>)
 8006db0:	f7f9 fd44 	bl	800083c <__aeabi_ddiv>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (TEMP < -1500){
 8006dbc:	a340      	add	r3, pc, #256	; (adr r3, 8006ec0 <ms5611_get_pressure+0x308>)
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006dc6:	f7f9 fe81 	bl	8000acc <__aeabi_dcmplt>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d055      	beq.n	8006e7c <ms5611_get_pressure+0x2c4>
			//temperature < -15 Celsius
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8006dd0:	a33d      	add	r3, pc, #244	; (adr r3, 8006ec8 <ms5611_get_pressure+0x310>)
 8006dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006dda:	f7f9 fa4f 	bl	800027c <__adddf3>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4610      	mov	r0, r2
 8006de4:	4619      	mov	r1, r3
 8006de6:	f04f 0200 	mov.w	r2, #0
 8006dea:	4b42      	ldr	r3, [pc, #264]	; (8006ef4 <ms5611_get_pressure+0x33c>)
 8006dec:	f7f9 fbfc 	bl	80005e8 <__aeabi_dmul>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4614      	mov	r4, r2
 8006df6:	461d      	mov	r5, r3
 8006df8:	a333      	add	r3, pc, #204	; (adr r3, 8006ec8 <ms5611_get_pressure+0x310>)
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006e02:	f7f9 fa3b 	bl	800027c <__adddf3>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	f7f9 fbeb 	bl	80005e8 <__aeabi_dmul>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006e1a:	f7f9 fa2f 	bl	800027c <__adddf3>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 8006e26:	a328      	add	r3, pc, #160	; (adr r3, 8006ec8 <ms5611_get_pressure+0x310>)
 8006e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006e30:	f7f9 fa24 	bl	800027c <__adddf3>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4610      	mov	r0, r2
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	f04f 0200 	mov.w	r2, #0
 8006e40:	4b2a      	ldr	r3, [pc, #168]	; (8006eec <ms5611_get_pressure+0x334>)
 8006e42:	f7f9 fbd1 	bl	80005e8 <__aeabi_dmul>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4614      	mov	r4, r2
 8006e4c:	461d      	mov	r5, r3
 8006e4e:	a31e      	add	r3, pc, #120	; (adr r3, 8006ec8 <ms5611_get_pressure+0x310>)
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006e58:	f7f9 fa10 	bl	800027c <__adddf3>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4620      	mov	r0, r4
 8006e62:	4629      	mov	r1, r5
 8006e64:	f7f9 fbc0 	bl	80005e8 <__aeabi_dmul>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006e70:	f7f9 fa04 	bl	800027c <__adddf3>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
	}

	TEMP = TEMP - T2;
 8006e7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006e84:	f7f9 f9f8 	bl	8000278 <__aeabi_dsub>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	OFF = OFF - OFF2;
 8006e90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006e94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e98:	f7f9 f9ee 	bl	8000278 <__aeabi_dsub>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	SENS = SENS - SENS2;
 8006ea4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ea8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006eac:	f7f9 f9e4 	bl	8000278 <__aeabi_dsub>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768);//unit mbar
 8006eb8:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <ms5611_get_pressure+0x328>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	e01b      	b.n	8006ef8 <ms5611_get_pressure+0x340>
 8006ec0:	00000000 	.word	0x00000000
 8006ec4:	c0977000 	.word	0xc0977000
 8006ec8:	00000000 	.word	0x00000000
 8006ecc:	40977000 	.word	0x40977000
 8006ed0:	20000728 	.word	0x20000728
 8006ed4:	2000071c 	.word	0x2000071c
 8006ed8:	41600000 	.word	0x41600000
 8006edc:	409f4000 	.word	0x409f4000
 8006ee0:	20000718 	.word	0x20000718
 8006ee4:	41400000 	.word	0x41400000
 8006ee8:	40e00000 	.word	0x40e00000
 8006eec:	40140000 	.word	0x40140000
 8006ef0:	40100000 	.word	0x40100000
 8006ef4:	401c0000 	.word	0x401c0000
 8006ef8:	f7f9 fafc 	bl	80004f4 <__aeabi_ui2d>
 8006efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f00:	f7f9 fb72 	bl	80005e8 <__aeabi_dmul>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	4b14      	ldr	r3, [pc, #80]	; (8006f64 <ms5611_get_pressure+0x3ac>)
 8006f12:	f7f9 fc93 	bl	800083c <__aeabi_ddiv>
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f22:	f7f9 f9a9 	bl	8000278 <__aeabi_dsub>
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	f04f 0200 	mov.w	r2, #0
 8006f32:	4b0d      	ldr	r3, [pc, #52]	; (8006f68 <ms5611_get_pressure+0x3b0>)
 8006f34:	f7f9 fc82 	bl	800083c <__aeabi_ddiv>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	e9c7 2300 	strd	r2, r3, [r7]
	return P / 100;//unit mbar
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	4b09      	ldr	r3, [pc, #36]	; (8006f6c <ms5611_get_pressure+0x3b4>)
 8006f46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f4a:	f7f9 fc77 	bl	800083c <__aeabi_ddiv>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	ec43 2b17 	vmov	d7, r2, r3
}
 8006f56:	eeb0 0a47 	vmov.f32	s0, s14
 8006f5a:	eef0 0a67 	vmov.f32	s1, s15
 8006f5e:	3740      	adds	r7, #64	; 0x40
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bdb0      	pop	{r4, r5, r7, pc}
 8006f64:	41400000 	.word	0x41400000
 8006f68:	40e00000 	.word	0x40e00000
 8006f6c:	40590000 	.word	0x40590000

08006f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006fa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006f74:	480d      	ldr	r0, [pc, #52]	; (8006fac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006f76:	490e      	ldr	r1, [pc, #56]	; (8006fb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006f78:	4a0e      	ldr	r2, [pc, #56]	; (8006fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f7c:	e002      	b.n	8006f84 <LoopCopyDataInit>

08006f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f82:	3304      	adds	r3, #4

08006f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f88:	d3f9      	bcc.n	8006f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f8a:	4a0b      	ldr	r2, [pc, #44]	; (8006fb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006f8c:	4c0b      	ldr	r4, [pc, #44]	; (8006fbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8006f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f90:	e001      	b.n	8006f96 <LoopFillZerobss>

08006f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f94:	3204      	adds	r2, #4

08006f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f98:	d3fb      	bcc.n	8006f92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006f9a:	f7fb fa7b 	bl	8002494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006f9e:	f009 fd45 	bl	8010a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006fa2:	f7fa f9cd 	bl	8001340 <main>
  bx  lr    
 8006fa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006fa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006fb0:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8006fb4:	08014348 	.word	0x08014348
  ldr r2, =_sbss
 8006fb8:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 8006fbc:	20000e1c 	.word	0x20000e1c

08006fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006fc0:	e7fe      	b.n	8006fc0 <ADC_IRQHandler>
	...

08006fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006fc8:	4b0e      	ldr	r3, [pc, #56]	; (8007004 <HAL_Init+0x40>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a0d      	ldr	r2, [pc, #52]	; (8007004 <HAL_Init+0x40>)
 8006fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006fd4:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <HAL_Init+0x40>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a0a      	ldr	r2, [pc, #40]	; (8007004 <HAL_Init+0x40>)
 8006fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006fe0:	4b08      	ldr	r3, [pc, #32]	; (8007004 <HAL_Init+0x40>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a07      	ldr	r2, [pc, #28]	; (8007004 <HAL_Init+0x40>)
 8006fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006fec:	2003      	movs	r0, #3
 8006fee:	f000 f94f 	bl	8007290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	f000 f808 	bl	8007008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ff8:	f7fa fe50 	bl	8001c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	40023c00 	.word	0x40023c00

08007008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007010:	4b12      	ldr	r3, [pc, #72]	; (800705c <HAL_InitTick+0x54>)
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	4b12      	ldr	r3, [pc, #72]	; (8007060 <HAL_InitTick+0x58>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	4619      	mov	r1, r3
 800701a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800701e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007022:	fbb2 f3f3 	udiv	r3, r2, r3
 8007026:	4618      	mov	r0, r3
 8007028:	f000 f967 	bl	80072fa <HAL_SYSTICK_Config>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e00e      	b.n	8007054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b0f      	cmp	r3, #15
 800703a:	d80a      	bhi.n	8007052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800703c:	2200      	movs	r2, #0
 800703e:	6879      	ldr	r1, [r7, #4]
 8007040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007044:	f000 f92f 	bl	80072a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007048:	4a06      	ldr	r2, [pc, #24]	; (8007064 <HAL_InitTick+0x5c>)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	e000      	b.n	8007054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	20000004 	.word	0x20000004
 8007060:	20000270 	.word	0x20000270
 8007064:	2000026c 	.word	0x2000026c

08007068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800706c:	4b06      	ldr	r3, [pc, #24]	; (8007088 <HAL_IncTick+0x20>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	461a      	mov	r2, r3
 8007072:	4b06      	ldr	r3, [pc, #24]	; (800708c <HAL_IncTick+0x24>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4413      	add	r3, r2
 8007078:	4a04      	ldr	r2, [pc, #16]	; (800708c <HAL_IncTick+0x24>)
 800707a:	6013      	str	r3, [r2, #0]
}
 800707c:	bf00      	nop
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	20000270 	.word	0x20000270
 800708c:	2000072c 	.word	0x2000072c

08007090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
  return uwTick;
 8007094:	4b03      	ldr	r3, [pc, #12]	; (80070a4 <HAL_GetTick+0x14>)
 8007096:	681b      	ldr	r3, [r3, #0]
}
 8007098:	4618      	mov	r0, r3
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	2000072c 	.word	0x2000072c

080070a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80070b0:	f7ff ffee 	bl	8007090 <HAL_GetTick>
 80070b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070c0:	d005      	beq.n	80070ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80070c2:	4b0a      	ldr	r3, [pc, #40]	; (80070ec <HAL_Delay+0x44>)
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4413      	add	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80070ce:	bf00      	nop
 80070d0:	f7ff ffde 	bl	8007090 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d8f7      	bhi.n	80070d0 <HAL_Delay+0x28>
  {
  }
}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000270 	.word	0x20000270

080070f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007100:	4b0c      	ldr	r3, [pc, #48]	; (8007134 <__NVIC_SetPriorityGrouping+0x44>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800710c:	4013      	ands	r3, r2
 800710e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800711c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007122:	4a04      	ldr	r2, [pc, #16]	; (8007134 <__NVIC_SetPriorityGrouping+0x44>)
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	60d3      	str	r3, [r2, #12]
}
 8007128:	bf00      	nop
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	e000ed00 	.word	0xe000ed00

08007138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800713c:	4b04      	ldr	r3, [pc, #16]	; (8007150 <__NVIC_GetPriorityGrouping+0x18>)
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	0a1b      	lsrs	r3, r3, #8
 8007142:	f003 0307 	and.w	r3, r3, #7
}
 8007146:	4618      	mov	r0, r3
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	e000ed00 	.word	0xe000ed00

08007154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	4603      	mov	r3, r0
 800715c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800715e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007162:	2b00      	cmp	r3, #0
 8007164:	db0b      	blt.n	800717e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007166:	79fb      	ldrb	r3, [r7, #7]
 8007168:	f003 021f 	and.w	r2, r3, #31
 800716c:	4907      	ldr	r1, [pc, #28]	; (800718c <__NVIC_EnableIRQ+0x38>)
 800716e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007172:	095b      	lsrs	r3, r3, #5
 8007174:	2001      	movs	r0, #1
 8007176:	fa00 f202 	lsl.w	r2, r0, r2
 800717a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	e000e100 	.word	0xe000e100

08007190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	6039      	str	r1, [r7, #0]
 800719a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800719c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	db0a      	blt.n	80071ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	490c      	ldr	r1, [pc, #48]	; (80071dc <__NVIC_SetPriority+0x4c>)
 80071aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ae:	0112      	lsls	r2, r2, #4
 80071b0:	b2d2      	uxtb	r2, r2
 80071b2:	440b      	add	r3, r1
 80071b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80071b8:	e00a      	b.n	80071d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	4908      	ldr	r1, [pc, #32]	; (80071e0 <__NVIC_SetPriority+0x50>)
 80071c0:	79fb      	ldrb	r3, [r7, #7]
 80071c2:	f003 030f 	and.w	r3, r3, #15
 80071c6:	3b04      	subs	r3, #4
 80071c8:	0112      	lsls	r2, r2, #4
 80071ca:	b2d2      	uxtb	r2, r2
 80071cc:	440b      	add	r3, r1
 80071ce:	761a      	strb	r2, [r3, #24]
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	e000e100 	.word	0xe000e100
 80071e0:	e000ed00 	.word	0xe000ed00

080071e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b089      	sub	sp, #36	; 0x24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	f1c3 0307 	rsb	r3, r3, #7
 80071fe:	2b04      	cmp	r3, #4
 8007200:	bf28      	it	cs
 8007202:	2304      	movcs	r3, #4
 8007204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	3304      	adds	r3, #4
 800720a:	2b06      	cmp	r3, #6
 800720c:	d902      	bls.n	8007214 <NVIC_EncodePriority+0x30>
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	3b03      	subs	r3, #3
 8007212:	e000      	b.n	8007216 <NVIC_EncodePriority+0x32>
 8007214:	2300      	movs	r3, #0
 8007216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	fa02 f303 	lsl.w	r3, r2, r3
 8007222:	43da      	mvns	r2, r3
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	401a      	ands	r2, r3
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800722c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	fa01 f303 	lsl.w	r3, r1, r3
 8007236:	43d9      	mvns	r1, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800723c:	4313      	orrs	r3, r2
         );
}
 800723e:	4618      	mov	r0, r3
 8007240:	3724      	adds	r7, #36	; 0x24
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
	...

0800724c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	3b01      	subs	r3, #1
 8007258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800725c:	d301      	bcc.n	8007262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800725e:	2301      	movs	r3, #1
 8007260:	e00f      	b.n	8007282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007262:	4a0a      	ldr	r2, [pc, #40]	; (800728c <SysTick_Config+0x40>)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	3b01      	subs	r3, #1
 8007268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800726a:	210f      	movs	r1, #15
 800726c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007270:	f7ff ff8e 	bl	8007190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007274:	4b05      	ldr	r3, [pc, #20]	; (800728c <SysTick_Config+0x40>)
 8007276:	2200      	movs	r2, #0
 8007278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800727a:	4b04      	ldr	r3, [pc, #16]	; (800728c <SysTick_Config+0x40>)
 800727c:	2207      	movs	r2, #7
 800727e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	e000e010 	.word	0xe000e010

08007290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff ff29 	bl	80070f0 <__NVIC_SetPriorityGrouping>
}
 800729e:	bf00      	nop
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b086      	sub	sp, #24
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	4603      	mov	r3, r0
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	607a      	str	r2, [r7, #4]
 80072b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80072b8:	f7ff ff3e 	bl	8007138 <__NVIC_GetPriorityGrouping>
 80072bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	68b9      	ldr	r1, [r7, #8]
 80072c2:	6978      	ldr	r0, [r7, #20]
 80072c4:	f7ff ff8e 	bl	80071e4 <NVIC_EncodePriority>
 80072c8:	4602      	mov	r2, r0
 80072ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072ce:	4611      	mov	r1, r2
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7ff ff5d 	bl	8007190 <__NVIC_SetPriority>
}
 80072d6:	bf00      	nop
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b082      	sub	sp, #8
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	4603      	mov	r3, r0
 80072e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7ff ff31 	bl	8007154 <__NVIC_EnableIRQ>
}
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff ffa2 	bl	800724c <SysTick_Config>
 8007308:	4603      	mov	r3, r0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
	...

08007314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007314:	b480      	push	{r7}
 8007316:	b089      	sub	sp, #36	; 0x24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800731e:	2300      	movs	r3, #0
 8007320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007322:	2300      	movs	r3, #0
 8007324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007326:	2300      	movs	r3, #0
 8007328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800732a:	2300      	movs	r3, #0
 800732c:	61fb      	str	r3, [r7, #28]
 800732e:	e16b      	b.n	8007608 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007330:	2201      	movs	r2, #1
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	fa02 f303 	lsl.w	r3, r2, r3
 8007338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	4013      	ands	r3, r2
 8007342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	429a      	cmp	r2, r3
 800734a:	f040 815a 	bne.w	8007602 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f003 0303 	and.w	r3, r3, #3
 8007356:	2b01      	cmp	r3, #1
 8007358:	d005      	beq.n	8007366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007362:	2b02      	cmp	r3, #2
 8007364:	d130      	bne.n	80073c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	2203      	movs	r2, #3
 8007372:	fa02 f303 	lsl.w	r3, r2, r3
 8007376:	43db      	mvns	r3, r3
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	4013      	ands	r3, r2
 800737c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	fa02 f303 	lsl.w	r3, r2, r3
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	4313      	orrs	r3, r2
 800738e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	69ba      	ldr	r2, [r7, #24]
 8007394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800739c:	2201      	movs	r2, #1
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	fa02 f303 	lsl.w	r3, r2, r3
 80073a4:	43db      	mvns	r3, r3
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	4013      	ands	r3, r2
 80073aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	091b      	lsrs	r3, r3, #4
 80073b2:	f003 0201 	and.w	r2, r3, #1
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	4313      	orrs	r3, r2
 80073c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f003 0303 	and.w	r3, r3, #3
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d017      	beq.n	8007404 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	2203      	movs	r2, #3
 80073e0:	fa02 f303 	lsl.w	r3, r2, r3
 80073e4:	43db      	mvns	r3, r3
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	4013      	ands	r3, r2
 80073ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	fa02 f303 	lsl.w	r3, r2, r3
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f003 0303 	and.w	r3, r3, #3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d123      	bne.n	8007458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	08da      	lsrs	r2, r3, #3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3208      	adds	r2, #8
 8007418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	f003 0307 	and.w	r3, r3, #7
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	220f      	movs	r2, #15
 8007428:	fa02 f303 	lsl.w	r3, r2, r3
 800742c:	43db      	mvns	r3, r3
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	4013      	ands	r3, r2
 8007432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	691a      	ldr	r2, [r3, #16]
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	4313      	orrs	r3, r2
 8007448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	08da      	lsrs	r2, r3, #3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3208      	adds	r2, #8
 8007452:	69b9      	ldr	r1, [r7, #24]
 8007454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	2203      	movs	r2, #3
 8007464:	fa02 f303 	lsl.w	r3, r2, r3
 8007468:	43db      	mvns	r3, r3
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	4013      	ands	r3, r2
 800746e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f003 0203 	and.w	r2, r3, #3
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	fa02 f303 	lsl.w	r3, r2, r3
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	4313      	orrs	r3, r2
 8007484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 80b4 	beq.w	8007602 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	4b60      	ldr	r3, [pc, #384]	; (8007620 <HAL_GPIO_Init+0x30c>)
 80074a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a2:	4a5f      	ldr	r2, [pc, #380]	; (8007620 <HAL_GPIO_Init+0x30c>)
 80074a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074a8:	6453      	str	r3, [r2, #68]	; 0x44
 80074aa:	4b5d      	ldr	r3, [pc, #372]	; (8007620 <HAL_GPIO_Init+0x30c>)
 80074ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80074b6:	4a5b      	ldr	r2, [pc, #364]	; (8007624 <HAL_GPIO_Init+0x310>)
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	089b      	lsrs	r3, r3, #2
 80074bc:	3302      	adds	r3, #2
 80074be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	220f      	movs	r2, #15
 80074ce:	fa02 f303 	lsl.w	r3, r2, r3
 80074d2:	43db      	mvns	r3, r3
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	4013      	ands	r3, r2
 80074d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a52      	ldr	r2, [pc, #328]	; (8007628 <HAL_GPIO_Init+0x314>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d02b      	beq.n	800753a <HAL_GPIO_Init+0x226>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a51      	ldr	r2, [pc, #324]	; (800762c <HAL_GPIO_Init+0x318>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d025      	beq.n	8007536 <HAL_GPIO_Init+0x222>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a50      	ldr	r2, [pc, #320]	; (8007630 <HAL_GPIO_Init+0x31c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d01f      	beq.n	8007532 <HAL_GPIO_Init+0x21e>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a4f      	ldr	r2, [pc, #316]	; (8007634 <HAL_GPIO_Init+0x320>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d019      	beq.n	800752e <HAL_GPIO_Init+0x21a>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a4e      	ldr	r2, [pc, #312]	; (8007638 <HAL_GPIO_Init+0x324>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d013      	beq.n	800752a <HAL_GPIO_Init+0x216>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a4d      	ldr	r2, [pc, #308]	; (800763c <HAL_GPIO_Init+0x328>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d00d      	beq.n	8007526 <HAL_GPIO_Init+0x212>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a4c      	ldr	r2, [pc, #304]	; (8007640 <HAL_GPIO_Init+0x32c>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d007      	beq.n	8007522 <HAL_GPIO_Init+0x20e>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a4b      	ldr	r2, [pc, #300]	; (8007644 <HAL_GPIO_Init+0x330>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d101      	bne.n	800751e <HAL_GPIO_Init+0x20a>
 800751a:	2307      	movs	r3, #7
 800751c:	e00e      	b.n	800753c <HAL_GPIO_Init+0x228>
 800751e:	2308      	movs	r3, #8
 8007520:	e00c      	b.n	800753c <HAL_GPIO_Init+0x228>
 8007522:	2306      	movs	r3, #6
 8007524:	e00a      	b.n	800753c <HAL_GPIO_Init+0x228>
 8007526:	2305      	movs	r3, #5
 8007528:	e008      	b.n	800753c <HAL_GPIO_Init+0x228>
 800752a:	2304      	movs	r3, #4
 800752c:	e006      	b.n	800753c <HAL_GPIO_Init+0x228>
 800752e:	2303      	movs	r3, #3
 8007530:	e004      	b.n	800753c <HAL_GPIO_Init+0x228>
 8007532:	2302      	movs	r3, #2
 8007534:	e002      	b.n	800753c <HAL_GPIO_Init+0x228>
 8007536:	2301      	movs	r3, #1
 8007538:	e000      	b.n	800753c <HAL_GPIO_Init+0x228>
 800753a:	2300      	movs	r3, #0
 800753c:	69fa      	ldr	r2, [r7, #28]
 800753e:	f002 0203 	and.w	r2, r2, #3
 8007542:	0092      	lsls	r2, r2, #2
 8007544:	4093      	lsls	r3, r2
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	4313      	orrs	r3, r2
 800754a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800754c:	4935      	ldr	r1, [pc, #212]	; (8007624 <HAL_GPIO_Init+0x310>)
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	089b      	lsrs	r3, r3, #2
 8007552:	3302      	adds	r3, #2
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800755a:	4b3b      	ldr	r3, [pc, #236]	; (8007648 <HAL_GPIO_Init+0x334>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	43db      	mvns	r3, r3
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	4013      	ands	r3, r2
 8007568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	4313      	orrs	r3, r2
 800757c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800757e:	4a32      	ldr	r2, [pc, #200]	; (8007648 <HAL_GPIO_Init+0x334>)
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007584:	4b30      	ldr	r3, [pc, #192]	; (8007648 <HAL_GPIO_Init+0x334>)
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	43db      	mvns	r3, r3
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	4013      	ands	r3, r2
 8007592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80075a8:	4a27      	ldr	r2, [pc, #156]	; (8007648 <HAL_GPIO_Init+0x334>)
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80075ae:	4b26      	ldr	r3, [pc, #152]	; (8007648 <HAL_GPIO_Init+0x334>)
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	43db      	mvns	r3, r3
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	4013      	ands	r3, r2
 80075bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80075d2:	4a1d      	ldr	r2, [pc, #116]	; (8007648 <HAL_GPIO_Init+0x334>)
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80075d8:	4b1b      	ldr	r3, [pc, #108]	; (8007648 <HAL_GPIO_Init+0x334>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	43db      	mvns	r3, r3
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	4013      	ands	r3, r2
 80075e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80075fc:	4a12      	ldr	r2, [pc, #72]	; (8007648 <HAL_GPIO_Init+0x334>)
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	3301      	adds	r3, #1
 8007606:	61fb      	str	r3, [r7, #28]
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	2b0f      	cmp	r3, #15
 800760c:	f67f ae90 	bls.w	8007330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	3724      	adds	r7, #36	; 0x24
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	40023800 	.word	0x40023800
 8007624:	40013800 	.word	0x40013800
 8007628:	40020000 	.word	0x40020000
 800762c:	40020400 	.word	0x40020400
 8007630:	40020800 	.word	0x40020800
 8007634:	40020c00 	.word	0x40020c00
 8007638:	40021000 	.word	0x40021000
 800763c:	40021400 	.word	0x40021400
 8007640:	40021800 	.word	0x40021800
 8007644:	40021c00 	.word	0x40021c00
 8007648:	40013c00 	.word	0x40013c00

0800764c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	460b      	mov	r3, r1
 8007656:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	691a      	ldr	r2, [r3, #16]
 800765c:	887b      	ldrh	r3, [r7, #2]
 800765e:	4013      	ands	r3, r2
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007664:	2301      	movs	r3, #1
 8007666:	73fb      	strb	r3, [r7, #15]
 8007668:	e001      	b.n	800766e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800766a:	2300      	movs	r3, #0
 800766c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800766e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	460b      	mov	r3, r1
 8007686:	807b      	strh	r3, [r7, #2]
 8007688:	4613      	mov	r3, r2
 800768a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800768c:	787b      	ldrb	r3, [r7, #1]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007692:	887a      	ldrh	r2, [r7, #2]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007698:	e003      	b.n	80076a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800769a:	887b      	ldrh	r3, [r7, #2]
 800769c:	041a      	lsls	r2, r3, #16
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	619a      	str	r2, [r3, #24]
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b085      	sub	sp, #20
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	460b      	mov	r3, r1
 80076b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80076c0:	887a      	ldrh	r2, [r7, #2]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4013      	ands	r3, r2
 80076c6:	041a      	lsls	r2, r3, #16
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	43d9      	mvns	r1, r3
 80076cc:	887b      	ldrh	r3, [r7, #2]
 80076ce:	400b      	ands	r3, r1
 80076d0:	431a      	orrs	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	619a      	str	r2, [r3, #24]
}
 80076d6:	bf00      	nop
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
	...

080076e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	4603      	mov	r3, r0
 80076ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80076ee:	4b08      	ldr	r3, [pc, #32]	; (8007710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80076f0:	695a      	ldr	r2, [r3, #20]
 80076f2:	88fb      	ldrh	r3, [r7, #6]
 80076f4:	4013      	ands	r3, r2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d006      	beq.n	8007708 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80076fa:	4a05      	ldr	r2, [pc, #20]	; (8007710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80076fc:	88fb      	ldrh	r3, [r7, #6]
 80076fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007700:	88fb      	ldrh	r3, [r7, #6]
 8007702:	4618      	mov	r0, r3
 8007704:	f7fa faae 	bl	8001c64 <HAL_GPIO_EXTI_Callback>
  }
}
 8007708:	bf00      	nop
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	40013c00 	.word	0x40013c00

08007714 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007716:	b08f      	sub	sp, #60	; 0x3c
 8007718:	af0a      	add	r7, sp, #40	; 0x28
 800771a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e054      	b.n	80077d0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d106      	bne.n	8007746 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f008 fec5 	bl	80104d0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2203      	movs	r2, #3
 800774a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007756:	2b00      	cmp	r3, #0
 8007758:	d102      	bne.n	8007760 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4618      	mov	r0, r3
 8007766:	f006 f867 	bl	800d838 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	603b      	str	r3, [r7, #0]
 8007770:	687e      	ldr	r6, [r7, #4]
 8007772:	466d      	mov	r5, sp
 8007774:	f106 0410 	add.w	r4, r6, #16
 8007778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800777a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800777c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800777e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007780:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007784:	e885 0003 	stmia.w	r5, {r0, r1}
 8007788:	1d33      	adds	r3, r6, #4
 800778a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800778c:	6838      	ldr	r0, [r7, #0]
 800778e:	f005 ffe1 	bl	800d754 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2101      	movs	r1, #1
 8007798:	4618      	mov	r0, r3
 800779a:	f006 f85e 	bl	800d85a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	687e      	ldr	r6, [r7, #4]
 80077a6:	466d      	mov	r5, sp
 80077a8:	f106 0410 	add.w	r4, r6, #16
 80077ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80077b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80077bc:	1d33      	adds	r3, r6, #4
 80077be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077c0:	6838      	ldr	r0, [r7, #0]
 80077c2:	f006 f971 	bl	800daa8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080077d8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80077d8:	b590      	push	{r4, r7, lr}
 80077da:	b089      	sub	sp, #36	; 0x24
 80077dc:	af04      	add	r7, sp, #16
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	4608      	mov	r0, r1
 80077e2:	4611      	mov	r1, r2
 80077e4:	461a      	mov	r2, r3
 80077e6:	4603      	mov	r3, r0
 80077e8:	70fb      	strb	r3, [r7, #3]
 80077ea:	460b      	mov	r3, r1
 80077ec:	70bb      	strb	r3, [r7, #2]
 80077ee:	4613      	mov	r3, r2
 80077f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d101      	bne.n	8007800 <HAL_HCD_HC_Init+0x28>
 80077fc:	2302      	movs	r3, #2
 80077fe:	e076      	b.n	80078ee <HAL_HCD_HC_Init+0x116>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8007808:	78fb      	ldrb	r3, [r7, #3]
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	212c      	movs	r1, #44	; 0x2c
 800780e:	fb01 f303 	mul.w	r3, r1, r3
 8007812:	4413      	add	r3, r2
 8007814:	333d      	adds	r3, #61	; 0x3d
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	212c      	movs	r1, #44	; 0x2c
 8007820:	fb01 f303 	mul.w	r3, r1, r3
 8007824:	4413      	add	r3, r2
 8007826:	3338      	adds	r3, #56	; 0x38
 8007828:	787a      	ldrb	r2, [r7, #1]
 800782a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800782c:	78fb      	ldrb	r3, [r7, #3]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	212c      	movs	r1, #44	; 0x2c
 8007832:	fb01 f303 	mul.w	r3, r1, r3
 8007836:	4413      	add	r3, r2
 8007838:	3340      	adds	r3, #64	; 0x40
 800783a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800783c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	212c      	movs	r1, #44	; 0x2c
 8007844:	fb01 f303 	mul.w	r3, r1, r3
 8007848:	4413      	add	r3, r2
 800784a:	3339      	adds	r3, #57	; 0x39
 800784c:	78fa      	ldrb	r2, [r7, #3]
 800784e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	212c      	movs	r1, #44	; 0x2c
 8007856:	fb01 f303 	mul.w	r3, r1, r3
 800785a:	4413      	add	r3, r2
 800785c:	333f      	adds	r3, #63	; 0x3f
 800785e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007862:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	78ba      	ldrb	r2, [r7, #2]
 8007868:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800786c:	b2d0      	uxtb	r0, r2
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	212c      	movs	r1, #44	; 0x2c
 8007872:	fb01 f303 	mul.w	r3, r1, r3
 8007876:	4413      	add	r3, r2
 8007878:	333a      	adds	r3, #58	; 0x3a
 800787a:	4602      	mov	r2, r0
 800787c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800787e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007882:	2b00      	cmp	r3, #0
 8007884:	da09      	bge.n	800789a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8007886:	78fb      	ldrb	r3, [r7, #3]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	212c      	movs	r1, #44	; 0x2c
 800788c:	fb01 f303 	mul.w	r3, r1, r3
 8007890:	4413      	add	r3, r2
 8007892:	333b      	adds	r3, #59	; 0x3b
 8007894:	2201      	movs	r2, #1
 8007896:	701a      	strb	r2, [r3, #0]
 8007898:	e008      	b.n	80078ac <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800789a:	78fb      	ldrb	r3, [r7, #3]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	212c      	movs	r1, #44	; 0x2c
 80078a0:	fb01 f303 	mul.w	r3, r1, r3
 80078a4:	4413      	add	r3, r2
 80078a6:	333b      	adds	r3, #59	; 0x3b
 80078a8:	2200      	movs	r2, #0
 80078aa:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	212c      	movs	r1, #44	; 0x2c
 80078b2:	fb01 f303 	mul.w	r3, r1, r3
 80078b6:	4413      	add	r3, r2
 80078b8:	333c      	adds	r3, #60	; 0x3c
 80078ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 80078be:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6818      	ldr	r0, [r3, #0]
 80078c4:	787c      	ldrb	r4, [r7, #1]
 80078c6:	78ba      	ldrb	r2, [r7, #2]
 80078c8:	78f9      	ldrb	r1, [r7, #3]
 80078ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078cc:	9302      	str	r3, [sp, #8]
 80078ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80078d2:	9301      	str	r3, [sp, #4]
 80078d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	4623      	mov	r3, r4
 80078dc:	f006 fa66 	bl	800ddac <USB_HC_Init>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd90      	pop	{r4, r7, pc}

080078f6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b084      	sub	sp, #16
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	460b      	mov	r3, r1
 8007900:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800790c:	2b01      	cmp	r3, #1
 800790e:	d101      	bne.n	8007914 <HAL_HCD_HC_Halt+0x1e>
 8007910:	2302      	movs	r3, #2
 8007912:	e00f      	b.n	8007934 <HAL_HCD_HC_Halt+0x3e>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	78fa      	ldrb	r2, [r7, #3]
 8007922:	4611      	mov	r1, r2
 8007924:	4618      	mov	r0, r3
 8007926:	f006 fca2 	bl	800e26e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8007932:	7bfb      	ldrb	r3, [r7, #15]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	4608      	mov	r0, r1
 8007946:	4611      	mov	r1, r2
 8007948:	461a      	mov	r2, r3
 800794a:	4603      	mov	r3, r0
 800794c:	70fb      	strb	r3, [r7, #3]
 800794e:	460b      	mov	r3, r1
 8007950:	70bb      	strb	r3, [r7, #2]
 8007952:	4613      	mov	r3, r2
 8007954:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8007956:	78fb      	ldrb	r3, [r7, #3]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	212c      	movs	r1, #44	; 0x2c
 800795c:	fb01 f303 	mul.w	r3, r1, r3
 8007960:	4413      	add	r3, r2
 8007962:	333b      	adds	r3, #59	; 0x3b
 8007964:	78ba      	ldrb	r2, [r7, #2]
 8007966:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	212c      	movs	r1, #44	; 0x2c
 800796e:	fb01 f303 	mul.w	r3, r1, r3
 8007972:	4413      	add	r3, r2
 8007974:	333f      	adds	r3, #63	; 0x3f
 8007976:	787a      	ldrb	r2, [r7, #1]
 8007978:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800797a:	7c3b      	ldrb	r3, [r7, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d112      	bne.n	80079a6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	212c      	movs	r1, #44	; 0x2c
 8007986:	fb01 f303 	mul.w	r3, r1, r3
 800798a:	4413      	add	r3, r2
 800798c:	3342      	adds	r3, #66	; 0x42
 800798e:	2203      	movs	r2, #3
 8007990:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8007992:	78fb      	ldrb	r3, [r7, #3]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	212c      	movs	r1, #44	; 0x2c
 8007998:	fb01 f303 	mul.w	r3, r1, r3
 800799c:	4413      	add	r3, r2
 800799e:	333d      	adds	r3, #61	; 0x3d
 80079a0:	7f3a      	ldrb	r2, [r7, #28]
 80079a2:	701a      	strb	r2, [r3, #0]
 80079a4:	e008      	b.n	80079b8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80079a6:	78fb      	ldrb	r3, [r7, #3]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	212c      	movs	r1, #44	; 0x2c
 80079ac:	fb01 f303 	mul.w	r3, r1, r3
 80079b0:	4413      	add	r3, r2
 80079b2:	3342      	adds	r3, #66	; 0x42
 80079b4:	2202      	movs	r2, #2
 80079b6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80079b8:	787b      	ldrb	r3, [r7, #1]
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	f200 80c6 	bhi.w	8007b4c <HAL_HCD_HC_SubmitRequest+0x210>
 80079c0:	a201      	add	r2, pc, #4	; (adr r2, 80079c8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80079c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c6:	bf00      	nop
 80079c8:	080079d9 	.word	0x080079d9
 80079cc:	08007b39 	.word	0x08007b39
 80079d0:	08007a3d 	.word	0x08007a3d
 80079d4:	08007abb 	.word	0x08007abb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80079d8:	7c3b      	ldrb	r3, [r7, #16]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	f040 80b8 	bne.w	8007b50 <HAL_HCD_HC_SubmitRequest+0x214>
 80079e0:	78bb      	ldrb	r3, [r7, #2]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f040 80b4 	bne.w	8007b50 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80079e8:	8b3b      	ldrh	r3, [r7, #24]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d108      	bne.n	8007a00 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80079ee:	78fb      	ldrb	r3, [r7, #3]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	212c      	movs	r1, #44	; 0x2c
 80079f4:	fb01 f303 	mul.w	r3, r1, r3
 80079f8:	4413      	add	r3, r2
 80079fa:	3355      	adds	r3, #85	; 0x55
 80079fc:	2201      	movs	r2, #1
 80079fe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007a00:	78fb      	ldrb	r3, [r7, #3]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	212c      	movs	r1, #44	; 0x2c
 8007a06:	fb01 f303 	mul.w	r3, r1, r3
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3355      	adds	r3, #85	; 0x55
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d109      	bne.n	8007a28 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007a14:	78fb      	ldrb	r3, [r7, #3]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	212c      	movs	r1, #44	; 0x2c
 8007a1a:	fb01 f303 	mul.w	r3, r1, r3
 8007a1e:	4413      	add	r3, r2
 8007a20:	3342      	adds	r3, #66	; 0x42
 8007a22:	2200      	movs	r2, #0
 8007a24:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007a26:	e093      	b.n	8007b50 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007a28:	78fb      	ldrb	r3, [r7, #3]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	212c      	movs	r1, #44	; 0x2c
 8007a2e:	fb01 f303 	mul.w	r3, r1, r3
 8007a32:	4413      	add	r3, r2
 8007a34:	3342      	adds	r3, #66	; 0x42
 8007a36:	2202      	movs	r2, #2
 8007a38:	701a      	strb	r2, [r3, #0]
      break;
 8007a3a:	e089      	b.n	8007b50 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8007a3c:	78bb      	ldrb	r3, [r7, #2]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d11d      	bne.n	8007a7e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007a42:	78fb      	ldrb	r3, [r7, #3]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	212c      	movs	r1, #44	; 0x2c
 8007a48:	fb01 f303 	mul.w	r3, r1, r3
 8007a4c:	4413      	add	r3, r2
 8007a4e:	3355      	adds	r3, #85	; 0x55
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d109      	bne.n	8007a6a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007a56:	78fb      	ldrb	r3, [r7, #3]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	212c      	movs	r1, #44	; 0x2c
 8007a5c:	fb01 f303 	mul.w	r3, r1, r3
 8007a60:	4413      	add	r3, r2
 8007a62:	3342      	adds	r3, #66	; 0x42
 8007a64:	2200      	movs	r2, #0
 8007a66:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8007a68:	e073      	b.n	8007b52 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007a6a:	78fb      	ldrb	r3, [r7, #3]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	212c      	movs	r1, #44	; 0x2c
 8007a70:	fb01 f303 	mul.w	r3, r1, r3
 8007a74:	4413      	add	r3, r2
 8007a76:	3342      	adds	r3, #66	; 0x42
 8007a78:	2202      	movs	r2, #2
 8007a7a:	701a      	strb	r2, [r3, #0]
      break;
 8007a7c:	e069      	b.n	8007b52 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	212c      	movs	r1, #44	; 0x2c
 8007a84:	fb01 f303 	mul.w	r3, r1, r3
 8007a88:	4413      	add	r3, r2
 8007a8a:	3354      	adds	r3, #84	; 0x54
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d109      	bne.n	8007aa6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007a92:	78fb      	ldrb	r3, [r7, #3]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	212c      	movs	r1, #44	; 0x2c
 8007a98:	fb01 f303 	mul.w	r3, r1, r3
 8007a9c:	4413      	add	r3, r2
 8007a9e:	3342      	adds	r3, #66	; 0x42
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	701a      	strb	r2, [r3, #0]
      break;
 8007aa4:	e055      	b.n	8007b52 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007aa6:	78fb      	ldrb	r3, [r7, #3]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	212c      	movs	r1, #44	; 0x2c
 8007aac:	fb01 f303 	mul.w	r3, r1, r3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	3342      	adds	r3, #66	; 0x42
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	701a      	strb	r2, [r3, #0]
      break;
 8007ab8:	e04b      	b.n	8007b52 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8007aba:	78bb      	ldrb	r3, [r7, #2]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d11d      	bne.n	8007afc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	212c      	movs	r1, #44	; 0x2c
 8007ac6:	fb01 f303 	mul.w	r3, r1, r3
 8007aca:	4413      	add	r3, r2
 8007acc:	3355      	adds	r3, #85	; 0x55
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d109      	bne.n	8007ae8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007ad4:	78fb      	ldrb	r3, [r7, #3]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	212c      	movs	r1, #44	; 0x2c
 8007ada:	fb01 f303 	mul.w	r3, r1, r3
 8007ade:	4413      	add	r3, r2
 8007ae0:	3342      	adds	r3, #66	; 0x42
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007ae6:	e034      	b.n	8007b52 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007ae8:	78fb      	ldrb	r3, [r7, #3]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	212c      	movs	r1, #44	; 0x2c
 8007aee:	fb01 f303 	mul.w	r3, r1, r3
 8007af2:	4413      	add	r3, r2
 8007af4:	3342      	adds	r3, #66	; 0x42
 8007af6:	2202      	movs	r2, #2
 8007af8:	701a      	strb	r2, [r3, #0]
      break;
 8007afa:	e02a      	b.n	8007b52 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8007afc:	78fb      	ldrb	r3, [r7, #3]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	212c      	movs	r1, #44	; 0x2c
 8007b02:	fb01 f303 	mul.w	r3, r1, r3
 8007b06:	4413      	add	r3, r2
 8007b08:	3354      	adds	r3, #84	; 0x54
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d109      	bne.n	8007b24 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007b10:	78fb      	ldrb	r3, [r7, #3]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	212c      	movs	r1, #44	; 0x2c
 8007b16:	fb01 f303 	mul.w	r3, r1, r3
 8007b1a:	4413      	add	r3, r2
 8007b1c:	3342      	adds	r3, #66	; 0x42
 8007b1e:	2200      	movs	r2, #0
 8007b20:	701a      	strb	r2, [r3, #0]
      break;
 8007b22:	e016      	b.n	8007b52 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	212c      	movs	r1, #44	; 0x2c
 8007b2a:	fb01 f303 	mul.w	r3, r1, r3
 8007b2e:	4413      	add	r3, r2
 8007b30:	3342      	adds	r3, #66	; 0x42
 8007b32:	2202      	movs	r2, #2
 8007b34:	701a      	strb	r2, [r3, #0]
      break;
 8007b36:	e00c      	b.n	8007b52 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007b38:	78fb      	ldrb	r3, [r7, #3]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	212c      	movs	r1, #44	; 0x2c
 8007b3e:	fb01 f303 	mul.w	r3, r1, r3
 8007b42:	4413      	add	r3, r2
 8007b44:	3342      	adds	r3, #66	; 0x42
 8007b46:	2200      	movs	r2, #0
 8007b48:	701a      	strb	r2, [r3, #0]
      break;
 8007b4a:	e002      	b.n	8007b52 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8007b4c:	bf00      	nop
 8007b4e:	e000      	b.n	8007b52 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8007b50:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8007b52:	78fb      	ldrb	r3, [r7, #3]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	212c      	movs	r1, #44	; 0x2c
 8007b58:	fb01 f303 	mul.w	r3, r1, r3
 8007b5c:	4413      	add	r3, r2
 8007b5e:	3344      	adds	r3, #68	; 0x44
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	8b3a      	ldrh	r2, [r7, #24]
 8007b68:	6879      	ldr	r1, [r7, #4]
 8007b6a:	202c      	movs	r0, #44	; 0x2c
 8007b6c:	fb00 f303 	mul.w	r3, r0, r3
 8007b70:	440b      	add	r3, r1
 8007b72:	334c      	adds	r3, #76	; 0x4c
 8007b74:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8007b76:	78fb      	ldrb	r3, [r7, #3]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	212c      	movs	r1, #44	; 0x2c
 8007b7c:	fb01 f303 	mul.w	r3, r1, r3
 8007b80:	4413      	add	r3, r2
 8007b82:	3360      	adds	r3, #96	; 0x60
 8007b84:	2200      	movs	r2, #0
 8007b86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8007b88:	78fb      	ldrb	r3, [r7, #3]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	212c      	movs	r1, #44	; 0x2c
 8007b8e:	fb01 f303 	mul.w	r3, r1, r3
 8007b92:	4413      	add	r3, r2
 8007b94:	3350      	adds	r3, #80	; 0x50
 8007b96:	2200      	movs	r2, #0
 8007b98:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007b9a:	78fb      	ldrb	r3, [r7, #3]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	212c      	movs	r1, #44	; 0x2c
 8007ba0:	fb01 f303 	mul.w	r3, r1, r3
 8007ba4:	4413      	add	r3, r2
 8007ba6:	3339      	adds	r3, #57	; 0x39
 8007ba8:	78fa      	ldrb	r2, [r7, #3]
 8007baa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8007bac:	78fb      	ldrb	r3, [r7, #3]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	212c      	movs	r1, #44	; 0x2c
 8007bb2:	fb01 f303 	mul.w	r3, r1, r3
 8007bb6:	4413      	add	r3, r2
 8007bb8:	3361      	adds	r3, #97	; 0x61
 8007bba:	2200      	movs	r2, #0
 8007bbc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6818      	ldr	r0, [r3, #0]
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	222c      	movs	r2, #44	; 0x2c
 8007bc6:	fb02 f303 	mul.w	r3, r2, r3
 8007bca:	3338      	adds	r3, #56	; 0x38
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	18d1      	adds	r1, r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f006 f9f6 	bl	800dfc8 <USB_HC_StartXfer>
 8007bdc:	4603      	mov	r3, r0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop

08007be8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f005 ff0f 	bl	800da22 <USB_GetMode>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	f040 80ef 	bne.w	8007dea <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f005 fef3 	bl	800d9fc <USB_ReadInterrupts>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 80e5 	beq.w	8007de8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f005 feea 	bl	800d9fc <USB_ReadInterrupts>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c32:	d104      	bne.n	8007c3e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007c3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f005 feda 	bl	800d9fc <USB_ReadInterrupts>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c52:	d104      	bne.n	8007c5e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f005 feca 	bl	800d9fc <USB_ReadInterrupts>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c72:	d104      	bne.n	8007c7e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007c7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f005 feba 	bl	800d9fc <USB_ReadInterrupts>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d103      	bne.n	8007c9a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2202      	movs	r2, #2
 8007c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f005 feac 	bl	800d9fc <USB_ReadInterrupts>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cae:	d115      	bne.n	8007cdc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007cb8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d108      	bne.n	8007cdc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f008 fc7e 	bl	80105cc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f005 ffa2 	bl	800dc20 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f005 fe8b 	bl	800d9fc <USB_ReadInterrupts>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cf0:	d102      	bne.n	8007cf8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f001 f9ff 	bl	80090f6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f005 fe7d 	bl	800d9fc <USB_ReadInterrupts>
 8007d02:	4603      	mov	r3, r0
 8007d04:	f003 0308 	and.w	r3, r3, #8
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	d106      	bne.n	8007d1a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f008 fc41 	bl	8010594 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2208      	movs	r2, #8
 8007d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f005 fe6c 	bl	800d9fc <USB_ReadInterrupts>
 8007d24:	4603      	mov	r3, r0
 8007d26:	f003 0310 	and.w	r3, r3, #16
 8007d2a:	2b10      	cmp	r3, #16
 8007d2c:	d101      	bne.n	8007d32 <HAL_HCD_IRQHandler+0x14a>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e000      	b.n	8007d34 <HAL_HCD_IRQHandler+0x14c>
 8007d32:	2300      	movs	r3, #0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d012      	beq.n	8007d5e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	699a      	ldr	r2, [r3, #24]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 0210 	bic.w	r2, r2, #16
 8007d46:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f001 f902 	bl	8008f52 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	699a      	ldr	r2, [r3, #24]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f042 0210 	orr.w	r2, r2, #16
 8007d5c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f005 fe4a 	bl	800d9fc <USB_ReadInterrupts>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d72:	d13a      	bne.n	8007dea <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f006 fa67 	bl	800e24c <USB_HC_ReadInterrupt>
 8007d7e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007d80:	2300      	movs	r3, #0
 8007d82:	617b      	str	r3, [r7, #20]
 8007d84:	e025      	b.n	8007dd2 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	f003 030f 	and.w	r3, r3, #15
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d018      	beq.n	8007dcc <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007db0:	d106      	bne.n	8007dc0 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f8ab 	bl	8007f14 <HCD_HC_IN_IRQHandler>
 8007dbe:	e005      	b.n	8007dcc <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fcc6 	bl	8008758 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	617b      	str	r3, [r7, #20]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d3d4      	bcc.n	8007d86 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007de4:	615a      	str	r2, [r3, #20]
 8007de6:	e000      	b.n	8007dea <HAL_HCD_IRQHandler+0x202>
      return;
 8007de8:	bf00      	nop
    }
  }
}
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d101      	bne.n	8007e06 <HAL_HCD_Start+0x16>
 8007e02:	2302      	movs	r3, #2
 8007e04:	e013      	b.n	8007e2e <HAL_HCD_Start+0x3e>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f005 fcff 	bl	800d816 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f005 ff62 	bl	800dce8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d101      	bne.n	8007e4c <HAL_HCD_Stop+0x16>
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e00d      	b.n	8007e68 <HAL_HCD_Stop+0x32>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f006 fb61 	bl	800e520 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f005 ff09 	bl	800dc94 <USB_ResetPort>
 8007e82:	4603      	mov	r3, r0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	212c      	movs	r1, #44	; 0x2c
 8007e9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ea2:	4413      	add	r3, r2
 8007ea4:	3360      	adds	r3, #96	; 0x60
 8007ea6:	781b      	ldrb	r3, [r3, #0]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	212c      	movs	r1, #44	; 0x2c
 8007ec6:	fb01 f303 	mul.w	r3, r1, r3
 8007eca:	4413      	add	r3, r2
 8007ecc:	3350      	adds	r3, #80	; 0x50
 8007ece:	681b      	ldr	r3, [r3, #0]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f005 ff4d 	bl	800dd88 <USB_GetCurrentFrame>
 8007eee:	4603      	mov	r3, r0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f005 ff28 	bl	800dd5a <USB_GetHostSpeed>
 8007f0a:	4603      	mov	r3, r0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8007f2a:	78fb      	ldrb	r3, [r7, #3]
 8007f2c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b04      	cmp	r3, #4
 8007f42:	d119      	bne.n	8007f78 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f50:	461a      	mov	r2, r3
 8007f52:	2304      	movs	r3, #4
 8007f54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	015a      	lsls	r2, r3, #5
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	0151      	lsls	r1, r2, #5
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	440a      	add	r2, r1
 8007f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f70:	f043 0302 	orr.w	r3, r3, #2
 8007f74:	60d3      	str	r3, [r2, #12]
 8007f76:	e101      	b.n	800817c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f8e:	d12b      	bne.n	8007fe8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fa2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	212c      	movs	r1, #44	; 0x2c
 8007faa:	fb01 f303 	mul.w	r3, r1, r3
 8007fae:	4413      	add	r3, r2
 8007fb0:	3361      	adds	r3, #97	; 0x61
 8007fb2:	2207      	movs	r2, #7
 8007fb4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	0151      	lsls	r1, r2, #5
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	440a      	add	r2, r1
 8007fcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fd0:	f043 0302 	orr.w	r3, r3, #2
 8007fd4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	b2d2      	uxtb	r2, r2
 8007fde:	4611      	mov	r1, r2
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f006 f944 	bl	800e26e <USB_HC_Halt>
 8007fe6:	e0c9      	b.n	800817c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f003 0320 	and.w	r3, r3, #32
 8007ffa:	2b20      	cmp	r3, #32
 8007ffc:	d109      	bne.n	8008012 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	4413      	add	r3, r2
 8008006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800800a:	461a      	mov	r2, r3
 800800c:	2320      	movs	r3, #32
 800800e:	6093      	str	r3, [r2, #8]
 8008010:	e0b4      	b.n	800817c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	4413      	add	r3, r2
 800801a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f003 0308 	and.w	r3, r3, #8
 8008024:	2b08      	cmp	r3, #8
 8008026:	d133      	bne.n	8008090 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	4413      	add	r3, r2
 8008030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	0151      	lsls	r1, r2, #5
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	440a      	add	r2, r1
 800803e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008042:	f043 0302 	orr.w	r3, r3, #2
 8008046:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	212c      	movs	r1, #44	; 0x2c
 800804e:	fb01 f303 	mul.w	r3, r1, r3
 8008052:	4413      	add	r3, r2
 8008054:	3361      	adds	r3, #97	; 0x61
 8008056:	2205      	movs	r2, #5
 8008058:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	4413      	add	r3, r2
 8008062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008066:	461a      	mov	r2, r3
 8008068:	2310      	movs	r3, #16
 800806a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	4413      	add	r3, r2
 8008074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008078:	461a      	mov	r2, r3
 800807a:	2308      	movs	r3, #8
 800807c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	b2d2      	uxtb	r2, r2
 8008086:	4611      	mov	r1, r2
 8008088:	4618      	mov	r0, r3
 800808a:	f006 f8f0 	bl	800e26e <USB_HC_Halt>
 800808e:	e075      	b.n	800817c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	4413      	add	r3, r2
 8008098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080a6:	d134      	bne.n	8008112 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	0151      	lsls	r1, r2, #5
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	440a      	add	r2, r1
 80080be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080c2:	f043 0302 	orr.w	r3, r3, #2
 80080c6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	212c      	movs	r1, #44	; 0x2c
 80080ce:	fb01 f303 	mul.w	r3, r1, r3
 80080d2:	4413      	add	r3, r2
 80080d4:	3361      	adds	r3, #97	; 0x61
 80080d6:	2208      	movs	r2, #8
 80080d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	015a      	lsls	r2, r3, #5
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	4413      	add	r3, r2
 80080e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e6:	461a      	mov	r2, r3
 80080e8:	2310      	movs	r3, #16
 80080ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f8:	461a      	mov	r2, r3
 80080fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080fe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	b2d2      	uxtb	r2, r2
 8008108:	4611      	mov	r1, r2
 800810a:	4618      	mov	r0, r3
 800810c:	f006 f8af 	bl	800e26e <USB_HC_Halt>
 8008110:	e034      	b.n	800817c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	4413      	add	r3, r2
 800811a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008124:	2b80      	cmp	r3, #128	; 0x80
 8008126:	d129      	bne.n	800817c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	015a      	lsls	r2, r3, #5
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	4413      	add	r3, r2
 8008130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	0151      	lsls	r1, r2, #5
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	440a      	add	r2, r1
 800813e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008142:	f043 0302 	orr.w	r3, r3, #2
 8008146:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	212c      	movs	r1, #44	; 0x2c
 800814e:	fb01 f303 	mul.w	r3, r1, r3
 8008152:	4413      	add	r3, r2
 8008154:	3361      	adds	r3, #97	; 0x61
 8008156:	2206      	movs	r2, #6
 8008158:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	b2d2      	uxtb	r2, r2
 8008162:	4611      	mov	r1, r2
 8008164:	4618      	mov	r0, r3
 8008166:	f006 f882 	bl	800e26e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	4413      	add	r3, r2
 8008172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008176:	461a      	mov	r2, r3
 8008178:	2380      	movs	r3, #128	; 0x80
 800817a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	4413      	add	r3, r2
 8008184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800818e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008192:	d122      	bne.n	80081da <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	4413      	add	r3, r2
 800819c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	0151      	lsls	r1, r2, #5
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	440a      	add	r2, r1
 80081aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081ae:	f043 0302 	orr.w	r3, r3, #2
 80081b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	b2d2      	uxtb	r2, r2
 80081bc:	4611      	mov	r1, r2
 80081be:	4618      	mov	r0, r3
 80081c0:	f006 f855 	bl	800e26e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d0:	461a      	mov	r2, r3
 80081d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081d6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80081d8:	e2ba      	b.n	8008750 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	f040 811b 	bne.w	8008428 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d019      	beq.n	800822e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	212c      	movs	r1, #44	; 0x2c
 8008200:	fb01 f303 	mul.w	r3, r1, r3
 8008204:	4413      	add	r3, r2
 8008206:	3348      	adds	r3, #72	; 0x48
 8008208:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	0159      	lsls	r1, r3, #5
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	440b      	add	r3, r1
 8008212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800821c:	1ad2      	subs	r2, r2, r3
 800821e:	6879      	ldr	r1, [r7, #4]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	202c      	movs	r0, #44	; 0x2c
 8008224:	fb00 f303 	mul.w	r3, r0, r3
 8008228:	440b      	add	r3, r1
 800822a:	3350      	adds	r3, #80	; 0x50
 800822c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	212c      	movs	r1, #44	; 0x2c
 8008234:	fb01 f303 	mul.w	r3, r1, r3
 8008238:	4413      	add	r3, r2
 800823a:	3361      	adds	r3, #97	; 0x61
 800823c:	2201      	movs	r2, #1
 800823e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	212c      	movs	r1, #44	; 0x2c
 8008246:	fb01 f303 	mul.w	r3, r1, r3
 800824a:	4413      	add	r3, r2
 800824c:	335c      	adds	r3, #92	; 0x5c
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	4413      	add	r3, r2
 800825a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800825e:	461a      	mov	r2, r3
 8008260:	2301      	movs	r3, #1
 8008262:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	212c      	movs	r1, #44	; 0x2c
 800826a:	fb01 f303 	mul.w	r3, r1, r3
 800826e:	4413      	add	r3, r2
 8008270:	333f      	adds	r3, #63	; 0x3f
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d009      	beq.n	800828c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	212c      	movs	r1, #44	; 0x2c
 800827e:	fb01 f303 	mul.w	r3, r1, r3
 8008282:	4413      	add	r3, r2
 8008284:	333f      	adds	r3, #63	; 0x3f
 8008286:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008288:	2b02      	cmp	r3, #2
 800828a:	d121      	bne.n	80082d0 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	4413      	add	r3, r2
 8008294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	0151      	lsls	r1, r2, #5
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	440a      	add	r2, r1
 80082a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082a6:	f043 0302 	orr.w	r3, r3, #2
 80082aa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	b2d2      	uxtb	r2, r2
 80082b4:	4611      	mov	r1, r2
 80082b6:	4618      	mov	r0, r3
 80082b8:	f005 ffd9 	bl	800e26e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082c8:	461a      	mov	r2, r3
 80082ca:	2310      	movs	r3, #16
 80082cc:	6093      	str	r3, [r2, #8]
 80082ce:	e066      	b.n	800839e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	212c      	movs	r1, #44	; 0x2c
 80082d6:	fb01 f303 	mul.w	r3, r1, r3
 80082da:	4413      	add	r3, r2
 80082dc:	333f      	adds	r3, #63	; 0x3f
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d127      	bne.n	8008334 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	0151      	lsls	r1, r2, #5
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	440a      	add	r2, r1
 80082fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008302:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	212c      	movs	r1, #44	; 0x2c
 800830a:	fb01 f303 	mul.w	r3, r1, r3
 800830e:	4413      	add	r3, r2
 8008310:	3360      	adds	r3, #96	; 0x60
 8008312:	2201      	movs	r2, #1
 8008314:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	b2d9      	uxtb	r1, r3
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	202c      	movs	r0, #44	; 0x2c
 8008320:	fb00 f303 	mul.w	r3, r0, r3
 8008324:	4413      	add	r3, r2
 8008326:	3360      	adds	r3, #96	; 0x60
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f008 f95b 	bl	80105e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008332:	e034      	b.n	800839e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	212c      	movs	r1, #44	; 0x2c
 800833a:	fb01 f303 	mul.w	r3, r1, r3
 800833e:	4413      	add	r3, r2
 8008340:	333f      	adds	r3, #63	; 0x3f
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d12a      	bne.n	800839e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	212c      	movs	r1, #44	; 0x2c
 800834e:	fb01 f303 	mul.w	r3, r1, r3
 8008352:	4413      	add	r3, r2
 8008354:	3360      	adds	r3, #96	; 0x60
 8008356:	2201      	movs	r2, #1
 8008358:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	212c      	movs	r1, #44	; 0x2c
 8008360:	fb01 f303 	mul.w	r3, r1, r3
 8008364:	4413      	add	r3, r2
 8008366:	3354      	adds	r3, #84	; 0x54
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	f083 0301 	eor.w	r3, r3, #1
 800836e:	b2d8      	uxtb	r0, r3
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	212c      	movs	r1, #44	; 0x2c
 8008376:	fb01 f303 	mul.w	r3, r1, r3
 800837a:	4413      	add	r3, r2
 800837c:	3354      	adds	r3, #84	; 0x54
 800837e:	4602      	mov	r2, r0
 8008380:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	b2d9      	uxtb	r1, r3
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	202c      	movs	r0, #44	; 0x2c
 800838c:	fb00 f303 	mul.w	r3, r0, r3
 8008390:	4413      	add	r3, r2
 8008392:	3360      	adds	r3, #96	; 0x60
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f008 f925 	bl	80105e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d12b      	bne.n	80083fe <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	212c      	movs	r1, #44	; 0x2c
 80083ac:	fb01 f303 	mul.w	r3, r1, r3
 80083b0:	4413      	add	r3, r2
 80083b2:	3348      	adds	r3, #72	; 0x48
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	202c      	movs	r0, #44	; 0x2c
 80083bc:	fb00 f202 	mul.w	r2, r0, r2
 80083c0:	440a      	add	r2, r1
 80083c2:	3240      	adds	r2, #64	; 0x40
 80083c4:	8812      	ldrh	r2, [r2, #0]
 80083c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 81be 	beq.w	8008750 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	212c      	movs	r1, #44	; 0x2c
 80083da:	fb01 f303 	mul.w	r3, r1, r3
 80083de:	4413      	add	r3, r2
 80083e0:	3354      	adds	r3, #84	; 0x54
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	f083 0301 	eor.w	r3, r3, #1
 80083e8:	b2d8      	uxtb	r0, r3
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	212c      	movs	r1, #44	; 0x2c
 80083f0:	fb01 f303 	mul.w	r3, r1, r3
 80083f4:	4413      	add	r3, r2
 80083f6:	3354      	adds	r3, #84	; 0x54
 80083f8:	4602      	mov	r2, r0
 80083fa:	701a      	strb	r2, [r3, #0]
}
 80083fc:	e1a8      	b.n	8008750 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	212c      	movs	r1, #44	; 0x2c
 8008404:	fb01 f303 	mul.w	r3, r1, r3
 8008408:	4413      	add	r3, r2
 800840a:	3354      	adds	r3, #84	; 0x54
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	f083 0301 	eor.w	r3, r3, #1
 8008412:	b2d8      	uxtb	r0, r3
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	212c      	movs	r1, #44	; 0x2c
 800841a:	fb01 f303 	mul.w	r3, r1, r3
 800841e:	4413      	add	r3, r2
 8008420:	3354      	adds	r3, #84	; 0x54
 8008422:	4602      	mov	r2, r0
 8008424:	701a      	strb	r2, [r3, #0]
}
 8008426:	e193      	b.n	8008750 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	4413      	add	r3, r2
 8008430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f003 0302 	and.w	r3, r3, #2
 800843a:	2b02      	cmp	r3, #2
 800843c:	f040 8106 	bne.w	800864c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	4413      	add	r3, r2
 8008448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	0151      	lsls	r1, r2, #5
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	440a      	add	r2, r1
 8008456:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800845a:	f023 0302 	bic.w	r3, r3, #2
 800845e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	212c      	movs	r1, #44	; 0x2c
 8008466:	fb01 f303 	mul.w	r3, r1, r3
 800846a:	4413      	add	r3, r2
 800846c:	3361      	adds	r3, #97	; 0x61
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d109      	bne.n	8008488 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	212c      	movs	r1, #44	; 0x2c
 800847a:	fb01 f303 	mul.w	r3, r1, r3
 800847e:	4413      	add	r3, r2
 8008480:	3360      	adds	r3, #96	; 0x60
 8008482:	2201      	movs	r2, #1
 8008484:	701a      	strb	r2, [r3, #0]
 8008486:	e0c9      	b.n	800861c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	212c      	movs	r1, #44	; 0x2c
 800848e:	fb01 f303 	mul.w	r3, r1, r3
 8008492:	4413      	add	r3, r2
 8008494:	3361      	adds	r3, #97	; 0x61
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	2b05      	cmp	r3, #5
 800849a:	d109      	bne.n	80084b0 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	212c      	movs	r1, #44	; 0x2c
 80084a2:	fb01 f303 	mul.w	r3, r1, r3
 80084a6:	4413      	add	r3, r2
 80084a8:	3360      	adds	r3, #96	; 0x60
 80084aa:	2205      	movs	r2, #5
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	e0b5      	b.n	800861c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	212c      	movs	r1, #44	; 0x2c
 80084b6:	fb01 f303 	mul.w	r3, r1, r3
 80084ba:	4413      	add	r3, r2
 80084bc:	3361      	adds	r3, #97	; 0x61
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	2b06      	cmp	r3, #6
 80084c2:	d009      	beq.n	80084d8 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	212c      	movs	r1, #44	; 0x2c
 80084ca:	fb01 f303 	mul.w	r3, r1, r3
 80084ce:	4413      	add	r3, r2
 80084d0:	3361      	adds	r3, #97	; 0x61
 80084d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80084d4:	2b08      	cmp	r3, #8
 80084d6:	d150      	bne.n	800857a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	212c      	movs	r1, #44	; 0x2c
 80084de:	fb01 f303 	mul.w	r3, r1, r3
 80084e2:	4413      	add	r3, r2
 80084e4:	335c      	adds	r3, #92	; 0x5c
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	202c      	movs	r0, #44	; 0x2c
 80084f0:	fb00 f303 	mul.w	r3, r0, r3
 80084f4:	440b      	add	r3, r1
 80084f6:	335c      	adds	r3, #92	; 0x5c
 80084f8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	212c      	movs	r1, #44	; 0x2c
 8008500:	fb01 f303 	mul.w	r3, r1, r3
 8008504:	4413      	add	r3, r2
 8008506:	335c      	adds	r3, #92	; 0x5c
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b02      	cmp	r3, #2
 800850c:	d912      	bls.n	8008534 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	212c      	movs	r1, #44	; 0x2c
 8008514:	fb01 f303 	mul.w	r3, r1, r3
 8008518:	4413      	add	r3, r2
 800851a:	335c      	adds	r3, #92	; 0x5c
 800851c:	2200      	movs	r2, #0
 800851e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	212c      	movs	r1, #44	; 0x2c
 8008526:	fb01 f303 	mul.w	r3, r1, r3
 800852a:	4413      	add	r3, r2
 800852c:	3360      	adds	r3, #96	; 0x60
 800852e:	2204      	movs	r2, #4
 8008530:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008532:	e073      	b.n	800861c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	212c      	movs	r1, #44	; 0x2c
 800853a:	fb01 f303 	mul.w	r3, r1, r3
 800853e:	4413      	add	r3, r2
 8008540:	3360      	adds	r3, #96	; 0x60
 8008542:	2202      	movs	r2, #2
 8008544:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	015a      	lsls	r2, r3, #5
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	4413      	add	r3, r2
 800854e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800855c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008564:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	4413      	add	r3, r2
 800856e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008572:	461a      	mov	r2, r3
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008578:	e050      	b.n	800861c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	212c      	movs	r1, #44	; 0x2c
 8008580:	fb01 f303 	mul.w	r3, r1, r3
 8008584:	4413      	add	r3, r2
 8008586:	3361      	adds	r3, #97	; 0x61
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	2b03      	cmp	r3, #3
 800858c:	d122      	bne.n	80085d4 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	212c      	movs	r1, #44	; 0x2c
 8008594:	fb01 f303 	mul.w	r3, r1, r3
 8008598:	4413      	add	r3, r2
 800859a:	3360      	adds	r3, #96	; 0x60
 800859c:	2202      	movs	r2, #2
 800859e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085b6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085be:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	015a      	lsls	r2, r3, #5
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	4413      	add	r3, r2
 80085c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085cc:	461a      	mov	r2, r3
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	6013      	str	r3, [r2, #0]
 80085d2:	e023      	b.n	800861c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	212c      	movs	r1, #44	; 0x2c
 80085da:	fb01 f303 	mul.w	r3, r1, r3
 80085de:	4413      	add	r3, r2
 80085e0:	3361      	adds	r3, #97	; 0x61
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2b07      	cmp	r3, #7
 80085e6:	d119      	bne.n	800861c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	212c      	movs	r1, #44	; 0x2c
 80085ee:	fb01 f303 	mul.w	r3, r1, r3
 80085f2:	4413      	add	r3, r2
 80085f4:	335c      	adds	r3, #92	; 0x5c
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	6879      	ldr	r1, [r7, #4]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	202c      	movs	r0, #44	; 0x2c
 8008600:	fb00 f303 	mul.w	r3, r0, r3
 8008604:	440b      	add	r3, r1
 8008606:	335c      	adds	r3, #92	; 0x5c
 8008608:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	212c      	movs	r1, #44	; 0x2c
 8008610:	fb01 f303 	mul.w	r3, r1, r3
 8008614:	4413      	add	r3, r2
 8008616:	3360      	adds	r3, #96	; 0x60
 8008618:	2204      	movs	r2, #4
 800861a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	4413      	add	r3, r2
 8008624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008628:	461a      	mov	r2, r3
 800862a:	2302      	movs	r3, #2
 800862c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	b2d9      	uxtb	r1, r3
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	202c      	movs	r0, #44	; 0x2c
 8008638:	fb00 f303 	mul.w	r3, r0, r3
 800863c:	4413      	add	r3, r2
 800863e:	3360      	adds	r3, #96	; 0x60
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	461a      	mov	r2, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f007 ffcf 	bl	80105e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800864a:	e081      	b.n	8008750 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	4413      	add	r3, r2
 8008654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f003 0310 	and.w	r3, r3, #16
 800865e:	2b10      	cmp	r3, #16
 8008660:	d176      	bne.n	8008750 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	212c      	movs	r1, #44	; 0x2c
 8008668:	fb01 f303 	mul.w	r3, r1, r3
 800866c:	4413      	add	r3, r2
 800866e:	333f      	adds	r3, #63	; 0x3f
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	2b03      	cmp	r3, #3
 8008674:	d121      	bne.n	80086ba <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	212c      	movs	r1, #44	; 0x2c
 800867c:	fb01 f303 	mul.w	r3, r1, r3
 8008680:	4413      	add	r3, r2
 8008682:	335c      	adds	r3, #92	; 0x5c
 8008684:	2200      	movs	r2, #0
 8008686:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	4413      	add	r3, r2
 8008690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	0151      	lsls	r1, r2, #5
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	440a      	add	r2, r1
 800869e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086a2:	f043 0302 	orr.w	r3, r3, #2
 80086a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	b2d2      	uxtb	r2, r2
 80086b0:	4611      	mov	r1, r2
 80086b2:	4618      	mov	r0, r3
 80086b4:	f005 fddb 	bl	800e26e <USB_HC_Halt>
 80086b8:	e041      	b.n	800873e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	212c      	movs	r1, #44	; 0x2c
 80086c0:	fb01 f303 	mul.w	r3, r1, r3
 80086c4:	4413      	add	r3, r2
 80086c6:	333f      	adds	r3, #63	; 0x3f
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d009      	beq.n	80086e2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	212c      	movs	r1, #44	; 0x2c
 80086d4:	fb01 f303 	mul.w	r3, r1, r3
 80086d8:	4413      	add	r3, r2
 80086da:	333f      	adds	r3, #63	; 0x3f
 80086dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d12d      	bne.n	800873e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	212c      	movs	r1, #44	; 0x2c
 80086e8:	fb01 f303 	mul.w	r3, r1, r3
 80086ec:	4413      	add	r3, r2
 80086ee:	335c      	adds	r3, #92	; 0x5c
 80086f0:	2200      	movs	r2, #0
 80086f2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d120      	bne.n	800873e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	212c      	movs	r1, #44	; 0x2c
 8008702:	fb01 f303 	mul.w	r3, r1, r3
 8008706:	4413      	add	r3, r2
 8008708:	3361      	adds	r3, #97	; 0x61
 800870a:	2203      	movs	r2, #3
 800870c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	015a      	lsls	r2, r3, #5
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	4413      	add	r3, r2
 8008716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	0151      	lsls	r1, r2, #5
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	440a      	add	r2, r1
 8008724:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008728:	f043 0302 	orr.w	r3, r3, #2
 800872c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	b2d2      	uxtb	r2, r2
 8008736:	4611      	mov	r1, r2
 8008738:	4618      	mov	r0, r3
 800873a:	f005 fd98 	bl	800e26e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	4413      	add	r3, r2
 8008746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800874a:	461a      	mov	r2, r3
 800874c:	2310      	movs	r3, #16
 800874e:	6093      	str	r3, [r2, #8]
}
 8008750:	bf00      	nop
 8008752:	3718      	adds	r7, #24
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b088      	sub	sp, #32
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800876e:	78fb      	ldrb	r3, [r7, #3]
 8008770:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	4413      	add	r3, r2
 800877a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f003 0304 	and.w	r3, r3, #4
 8008784:	2b04      	cmp	r3, #4
 8008786:	d119      	bne.n	80087bc <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	4413      	add	r3, r2
 8008790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008794:	461a      	mov	r2, r3
 8008796:	2304      	movs	r3, #4
 8008798:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	0151      	lsls	r1, r2, #5
 80087ac:	69ba      	ldr	r2, [r7, #24]
 80087ae:	440a      	add	r2, r1
 80087b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087b4:	f043 0302 	orr.w	r3, r3, #2
 80087b8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80087ba:	e3c6      	b.n	8008f4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f003 0320 	and.w	r3, r3, #32
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d13e      	bne.n	8008850 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087de:	461a      	mov	r2, r3
 80087e0:	2320      	movs	r3, #32
 80087e2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	212c      	movs	r1, #44	; 0x2c
 80087ea:	fb01 f303 	mul.w	r3, r1, r3
 80087ee:	4413      	add	r3, r2
 80087f0:	333d      	adds	r3, #61	; 0x3d
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	f040 83a8 	bne.w	8008f4a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	212c      	movs	r1, #44	; 0x2c
 8008800:	fb01 f303 	mul.w	r3, r1, r3
 8008804:	4413      	add	r3, r2
 8008806:	333d      	adds	r3, #61	; 0x3d
 8008808:	2200      	movs	r2, #0
 800880a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	212c      	movs	r1, #44	; 0x2c
 8008812:	fb01 f303 	mul.w	r3, r1, r3
 8008816:	4413      	add	r3, r2
 8008818:	3360      	adds	r3, #96	; 0x60
 800881a:	2202      	movs	r2, #2
 800881c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	4413      	add	r3, r2
 8008826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	0151      	lsls	r1, r2, #5
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	440a      	add	r2, r1
 8008834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008838:	f043 0302 	orr.w	r3, r3, #2
 800883c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	b2d2      	uxtb	r2, r2
 8008846:	4611      	mov	r1, r2
 8008848:	4618      	mov	r0, r3
 800884a:	f005 fd10 	bl	800e26e <USB_HC_Halt>
}
 800884e:	e37c      	b.n	8008f4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	4413      	add	r3, r2
 8008858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008866:	d122      	bne.n	80088ae <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	4413      	add	r3, r2
 8008870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	0151      	lsls	r1, r2, #5
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	440a      	add	r2, r1
 800887e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008882:	f043 0302 	orr.w	r3, r3, #2
 8008886:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	697a      	ldr	r2, [r7, #20]
 800888e:	b2d2      	uxtb	r2, r2
 8008890:	4611      	mov	r1, r2
 8008892:	4618      	mov	r0, r3
 8008894:	f005 fceb 	bl	800e26e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a4:	461a      	mov	r2, r3
 80088a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088aa:	6093      	str	r3, [r2, #8]
}
 80088ac:	e34d      	b.n	8008f4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d150      	bne.n	8008966 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	212c      	movs	r1, #44	; 0x2c
 80088ca:	fb01 f303 	mul.w	r3, r1, r3
 80088ce:	4413      	add	r3, r2
 80088d0:	335c      	adds	r3, #92	; 0x5c
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e8:	2b40      	cmp	r3, #64	; 0x40
 80088ea:	d111      	bne.n	8008910 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	212c      	movs	r1, #44	; 0x2c
 80088f2:	fb01 f303 	mul.w	r3, r1, r3
 80088f6:	4413      	add	r3, r2
 80088f8:	333d      	adds	r3, #61	; 0x3d
 80088fa:	2201      	movs	r2, #1
 80088fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	4413      	add	r3, r2
 8008906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800890a:	461a      	mov	r2, r3
 800890c:	2340      	movs	r3, #64	; 0x40
 800890e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	4413      	add	r3, r2
 8008918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	0151      	lsls	r1, r2, #5
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	440a      	add	r2, r1
 8008926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800892a:	f043 0302 	orr.w	r3, r3, #2
 800892e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	b2d2      	uxtb	r2, r2
 8008938:	4611      	mov	r1, r2
 800893a:	4618      	mov	r0, r3
 800893c:	f005 fc97 	bl	800e26e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	4413      	add	r3, r2
 8008948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800894c:	461a      	mov	r2, r3
 800894e:	2301      	movs	r3, #1
 8008950:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	212c      	movs	r1, #44	; 0x2c
 8008958:	fb01 f303 	mul.w	r3, r1, r3
 800895c:	4413      	add	r3, r2
 800895e:	3361      	adds	r3, #97	; 0x61
 8008960:	2201      	movs	r2, #1
 8008962:	701a      	strb	r2, [r3, #0]
}
 8008964:	e2f1      	b.n	8008f4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	015a      	lsls	r2, r3, #5
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	4413      	add	r3, r2
 800896e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008978:	2b40      	cmp	r3, #64	; 0x40
 800897a:	d13c      	bne.n	80089f6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	212c      	movs	r1, #44	; 0x2c
 8008982:	fb01 f303 	mul.w	r3, r1, r3
 8008986:	4413      	add	r3, r2
 8008988:	3361      	adds	r3, #97	; 0x61
 800898a:	2204      	movs	r2, #4
 800898c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	212c      	movs	r1, #44	; 0x2c
 8008994:	fb01 f303 	mul.w	r3, r1, r3
 8008998:	4413      	add	r3, r2
 800899a:	333d      	adds	r3, #61	; 0x3d
 800899c:	2201      	movs	r2, #1
 800899e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	212c      	movs	r1, #44	; 0x2c
 80089a6:	fb01 f303 	mul.w	r3, r1, r3
 80089aa:	4413      	add	r3, r2
 80089ac:	335c      	adds	r3, #92	; 0x5c
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	0151      	lsls	r1, r2, #5
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	440a      	add	r2, r1
 80089c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089cc:	f043 0302 	orr.w	r3, r3, #2
 80089d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	b2d2      	uxtb	r2, r2
 80089da:	4611      	mov	r1, r2
 80089dc:	4618      	mov	r0, r3
 80089de:	f005 fc46 	bl	800e26e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ee:	461a      	mov	r2, r3
 80089f0:	2340      	movs	r3, #64	; 0x40
 80089f2:	6093      	str	r3, [r2, #8]
}
 80089f4:	e2a9      	b.n	8008f4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	015a      	lsls	r2, r3, #5
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	4413      	add	r3, r2
 80089fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f003 0308 	and.w	r3, r3, #8
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d12a      	bne.n	8008a62 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a18:	461a      	mov	r2, r3
 8008a1a:	2308      	movs	r3, #8
 8008a1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	015a      	lsls	r2, r3, #5
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	0151      	lsls	r1, r2, #5
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	440a      	add	r2, r1
 8008a34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a38:	f043 0302 	orr.w	r3, r3, #2
 8008a3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	b2d2      	uxtb	r2, r2
 8008a46:	4611      	mov	r1, r2
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f005 fc10 	bl	800e26e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	212c      	movs	r1, #44	; 0x2c
 8008a54:	fb01 f303 	mul.w	r3, r1, r3
 8008a58:	4413      	add	r3, r2
 8008a5a:	3361      	adds	r3, #97	; 0x61
 8008a5c:	2205      	movs	r2, #5
 8008a5e:	701a      	strb	r2, [r3, #0]
}
 8008a60:	e273      	b.n	8008f4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f003 0310 	and.w	r3, r3, #16
 8008a74:	2b10      	cmp	r3, #16
 8008a76:	d150      	bne.n	8008b1a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	212c      	movs	r1, #44	; 0x2c
 8008a7e:	fb01 f303 	mul.w	r3, r1, r3
 8008a82:	4413      	add	r3, r2
 8008a84:	335c      	adds	r3, #92	; 0x5c
 8008a86:	2200      	movs	r2, #0
 8008a88:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	212c      	movs	r1, #44	; 0x2c
 8008a90:	fb01 f303 	mul.w	r3, r1, r3
 8008a94:	4413      	add	r3, r2
 8008a96:	3361      	adds	r3, #97	; 0x61
 8008a98:	2203      	movs	r2, #3
 8008a9a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	212c      	movs	r1, #44	; 0x2c
 8008aa2:	fb01 f303 	mul.w	r3, r1, r3
 8008aa6:	4413      	add	r3, r2
 8008aa8:	333d      	adds	r3, #61	; 0x3d
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d112      	bne.n	8008ad6 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	212c      	movs	r1, #44	; 0x2c
 8008ab6:	fb01 f303 	mul.w	r3, r1, r3
 8008aba:	4413      	add	r3, r2
 8008abc:	333c      	adds	r3, #60	; 0x3c
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d108      	bne.n	8008ad6 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	212c      	movs	r1, #44	; 0x2c
 8008aca:	fb01 f303 	mul.w	r3, r1, r3
 8008ace:	4413      	add	r3, r2
 8008ad0:	333d      	adds	r3, #61	; 0x3d
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	0151      	lsls	r1, r2, #5
 8008ae8:	69ba      	ldr	r2, [r7, #24]
 8008aea:	440a      	add	r2, r1
 8008aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008af0:	f043 0302 	orr.w	r3, r3, #2
 8008af4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	b2d2      	uxtb	r2, r2
 8008afe:	4611      	mov	r1, r2
 8008b00:	4618      	mov	r0, r3
 8008b02:	f005 fbb4 	bl	800e26e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b12:	461a      	mov	r2, r3
 8008b14:	2310      	movs	r3, #16
 8008b16:	6093      	str	r3, [r2, #8]
}
 8008b18:	e217      	b.n	8008f4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b2c:	2b80      	cmp	r3, #128	; 0x80
 8008b2e:	d174      	bne.n	8008c1a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d121      	bne.n	8008b7c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	212c      	movs	r1, #44	; 0x2c
 8008b3e:	fb01 f303 	mul.w	r3, r1, r3
 8008b42:	4413      	add	r3, r2
 8008b44:	3361      	adds	r3, #97	; 0x61
 8008b46:	2206      	movs	r2, #6
 8008b48:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	0151      	lsls	r1, r2, #5
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	440a      	add	r2, r1
 8008b60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b64:	f043 0302 	orr.w	r3, r3, #2
 8008b68:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	b2d2      	uxtb	r2, r2
 8008b72:	4611      	mov	r1, r2
 8008b74:	4618      	mov	r0, r3
 8008b76:	f005 fb7a 	bl	800e26e <USB_HC_Halt>
 8008b7a:	e044      	b.n	8008c06 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	212c      	movs	r1, #44	; 0x2c
 8008b82:	fb01 f303 	mul.w	r3, r1, r3
 8008b86:	4413      	add	r3, r2
 8008b88:	335c      	adds	r3, #92	; 0x5c
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	1c5a      	adds	r2, r3, #1
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	202c      	movs	r0, #44	; 0x2c
 8008b94:	fb00 f303 	mul.w	r3, r0, r3
 8008b98:	440b      	add	r3, r1
 8008b9a:	335c      	adds	r3, #92	; 0x5c
 8008b9c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	212c      	movs	r1, #44	; 0x2c
 8008ba4:	fb01 f303 	mul.w	r3, r1, r3
 8008ba8:	4413      	add	r3, r2
 8008baa:	335c      	adds	r3, #92	; 0x5c
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d920      	bls.n	8008bf4 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	212c      	movs	r1, #44	; 0x2c
 8008bb8:	fb01 f303 	mul.w	r3, r1, r3
 8008bbc:	4413      	add	r3, r2
 8008bbe:	335c      	adds	r3, #92	; 0x5c
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	212c      	movs	r1, #44	; 0x2c
 8008bca:	fb01 f303 	mul.w	r3, r1, r3
 8008bce:	4413      	add	r3, r2
 8008bd0:	3360      	adds	r3, #96	; 0x60
 8008bd2:	2204      	movs	r2, #4
 8008bd4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	b2d9      	uxtb	r1, r3
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	202c      	movs	r0, #44	; 0x2c
 8008be0:	fb00 f303 	mul.w	r3, r0, r3
 8008be4:	4413      	add	r3, r2
 8008be6:	3360      	adds	r3, #96	; 0x60
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f007 fcfb 	bl	80105e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008bf2:	e008      	b.n	8008c06 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	212c      	movs	r1, #44	; 0x2c
 8008bfa:	fb01 f303 	mul.w	r3, r1, r3
 8008bfe:	4413      	add	r3, r2
 8008c00:	3360      	adds	r3, #96	; 0x60
 8008c02:	2202      	movs	r2, #2
 8008c04:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c12:	461a      	mov	r2, r3
 8008c14:	2380      	movs	r3, #128	; 0x80
 8008c16:	6093      	str	r3, [r2, #8]
}
 8008c18:	e197      	b.n	8008f4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	015a      	lsls	r2, r3, #5
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	4413      	add	r3, r2
 8008c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c30:	d134      	bne.n	8008c9c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	015a      	lsls	r2, r3, #5
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	4413      	add	r3, r2
 8008c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	0151      	lsls	r1, r2, #5
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	440a      	add	r2, r1
 8008c48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c4c:	f043 0302 	orr.w	r3, r3, #2
 8008c50:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	b2d2      	uxtb	r2, r2
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f005 fb06 	bl	800e26e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c6e:	461a      	mov	r2, r3
 8008c70:	2310      	movs	r3, #16
 8008c72:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	015a      	lsls	r2, r3, #5
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c80:	461a      	mov	r2, r3
 8008c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	212c      	movs	r1, #44	; 0x2c
 8008c8e:	fb01 f303 	mul.w	r3, r1, r3
 8008c92:	4413      	add	r3, r2
 8008c94:	3361      	adds	r3, #97	; 0x61
 8008c96:	2208      	movs	r2, #8
 8008c98:	701a      	strb	r2, [r3, #0]
}
 8008c9a:	e156      	b.n	8008f4a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f003 0302 	and.w	r3, r3, #2
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	f040 814b 	bne.w	8008f4a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	015a      	lsls	r2, r3, #5
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	4413      	add	r3, r2
 8008cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	0151      	lsls	r1, r2, #5
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	440a      	add	r2, r1
 8008cca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cce:	f023 0302 	bic.w	r3, r3, #2
 8008cd2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	212c      	movs	r1, #44	; 0x2c
 8008cda:	fb01 f303 	mul.w	r3, r1, r3
 8008cde:	4413      	add	r3, r2
 8008ce0:	3361      	adds	r3, #97	; 0x61
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d179      	bne.n	8008ddc <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	212c      	movs	r1, #44	; 0x2c
 8008cee:	fb01 f303 	mul.w	r3, r1, r3
 8008cf2:	4413      	add	r3, r2
 8008cf4:	3360      	adds	r3, #96	; 0x60
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	212c      	movs	r1, #44	; 0x2c
 8008d00:	fb01 f303 	mul.w	r3, r1, r3
 8008d04:	4413      	add	r3, r2
 8008d06:	333f      	adds	r3, #63	; 0x3f
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d00a      	beq.n	8008d24 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	212c      	movs	r1, #44	; 0x2c
 8008d14:	fb01 f303 	mul.w	r3, r1, r3
 8008d18:	4413      	add	r3, r2
 8008d1a:	333f      	adds	r3, #63	; 0x3f
 8008d1c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	f040 80fc 	bne.w	8008f1c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d142      	bne.n	8008db2 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	212c      	movs	r1, #44	; 0x2c
 8008d32:	fb01 f303 	mul.w	r3, r1, r3
 8008d36:	4413      	add	r3, r2
 8008d38:	334c      	adds	r3, #76	; 0x4c
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 80ed 	beq.w	8008f1c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	212c      	movs	r1, #44	; 0x2c
 8008d48:	fb01 f303 	mul.w	r3, r1, r3
 8008d4c:	4413      	add	r3, r2
 8008d4e:	334c      	adds	r3, #76	; 0x4c
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	202c      	movs	r0, #44	; 0x2c
 8008d58:	fb00 f202 	mul.w	r2, r0, r2
 8008d5c:	440a      	add	r2, r1
 8008d5e:	3240      	adds	r2, #64	; 0x40
 8008d60:	8812      	ldrh	r2, [r2, #0]
 8008d62:	4413      	add	r3, r2
 8008d64:	3b01      	subs	r3, #1
 8008d66:	6879      	ldr	r1, [r7, #4]
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	202c      	movs	r0, #44	; 0x2c
 8008d6c:	fb00 f202 	mul.w	r2, r0, r2
 8008d70:	440a      	add	r2, r1
 8008d72:	3240      	adds	r2, #64	; 0x40
 8008d74:	8812      	ldrh	r2, [r2, #0]
 8008d76:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 80ca 	beq.w	8008f1c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	212c      	movs	r1, #44	; 0x2c
 8008d8e:	fb01 f303 	mul.w	r3, r1, r3
 8008d92:	4413      	add	r3, r2
 8008d94:	3355      	adds	r3, #85	; 0x55
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	f083 0301 	eor.w	r3, r3, #1
 8008d9c:	b2d8      	uxtb	r0, r3
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	212c      	movs	r1, #44	; 0x2c
 8008da4:	fb01 f303 	mul.w	r3, r1, r3
 8008da8:	4413      	add	r3, r2
 8008daa:	3355      	adds	r3, #85	; 0x55
 8008dac:	4602      	mov	r2, r0
 8008dae:	701a      	strb	r2, [r3, #0]
 8008db0:	e0b4      	b.n	8008f1c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	212c      	movs	r1, #44	; 0x2c
 8008db8:	fb01 f303 	mul.w	r3, r1, r3
 8008dbc:	4413      	add	r3, r2
 8008dbe:	3355      	adds	r3, #85	; 0x55
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	f083 0301 	eor.w	r3, r3, #1
 8008dc6:	b2d8      	uxtb	r0, r3
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	212c      	movs	r1, #44	; 0x2c
 8008dce:	fb01 f303 	mul.w	r3, r1, r3
 8008dd2:	4413      	add	r3, r2
 8008dd4:	3355      	adds	r3, #85	; 0x55
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	701a      	strb	r2, [r3, #0]
 8008dda:	e09f      	b.n	8008f1c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	212c      	movs	r1, #44	; 0x2c
 8008de2:	fb01 f303 	mul.w	r3, r1, r3
 8008de6:	4413      	add	r3, r2
 8008de8:	3361      	adds	r3, #97	; 0x61
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	d109      	bne.n	8008e04 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	212c      	movs	r1, #44	; 0x2c
 8008df6:	fb01 f303 	mul.w	r3, r1, r3
 8008dfa:	4413      	add	r3, r2
 8008dfc:	3360      	adds	r3, #96	; 0x60
 8008dfe:	2202      	movs	r2, #2
 8008e00:	701a      	strb	r2, [r3, #0]
 8008e02:	e08b      	b.n	8008f1c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	212c      	movs	r1, #44	; 0x2c
 8008e0a:	fb01 f303 	mul.w	r3, r1, r3
 8008e0e:	4413      	add	r3, r2
 8008e10:	3361      	adds	r3, #97	; 0x61
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	d109      	bne.n	8008e2c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	212c      	movs	r1, #44	; 0x2c
 8008e1e:	fb01 f303 	mul.w	r3, r1, r3
 8008e22:	4413      	add	r3, r2
 8008e24:	3360      	adds	r3, #96	; 0x60
 8008e26:	2202      	movs	r2, #2
 8008e28:	701a      	strb	r2, [r3, #0]
 8008e2a:	e077      	b.n	8008f1c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	212c      	movs	r1, #44	; 0x2c
 8008e32:	fb01 f303 	mul.w	r3, r1, r3
 8008e36:	4413      	add	r3, r2
 8008e38:	3361      	adds	r3, #97	; 0x61
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	2b05      	cmp	r3, #5
 8008e3e:	d109      	bne.n	8008e54 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	212c      	movs	r1, #44	; 0x2c
 8008e46:	fb01 f303 	mul.w	r3, r1, r3
 8008e4a:	4413      	add	r3, r2
 8008e4c:	3360      	adds	r3, #96	; 0x60
 8008e4e:	2205      	movs	r2, #5
 8008e50:	701a      	strb	r2, [r3, #0]
 8008e52:	e063      	b.n	8008f1c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	212c      	movs	r1, #44	; 0x2c
 8008e5a:	fb01 f303 	mul.w	r3, r1, r3
 8008e5e:	4413      	add	r3, r2
 8008e60:	3361      	adds	r3, #97	; 0x61
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	2b06      	cmp	r3, #6
 8008e66:	d009      	beq.n	8008e7c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	212c      	movs	r1, #44	; 0x2c
 8008e6e:	fb01 f303 	mul.w	r3, r1, r3
 8008e72:	4413      	add	r3, r2
 8008e74:	3361      	adds	r3, #97	; 0x61
 8008e76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008e78:	2b08      	cmp	r3, #8
 8008e7a:	d14f      	bne.n	8008f1c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	212c      	movs	r1, #44	; 0x2c
 8008e82:	fb01 f303 	mul.w	r3, r1, r3
 8008e86:	4413      	add	r3, r2
 8008e88:	335c      	adds	r3, #92	; 0x5c
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	1c5a      	adds	r2, r3, #1
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	202c      	movs	r0, #44	; 0x2c
 8008e94:	fb00 f303 	mul.w	r3, r0, r3
 8008e98:	440b      	add	r3, r1
 8008e9a:	335c      	adds	r3, #92	; 0x5c
 8008e9c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	212c      	movs	r1, #44	; 0x2c
 8008ea4:	fb01 f303 	mul.w	r3, r1, r3
 8008ea8:	4413      	add	r3, r2
 8008eaa:	335c      	adds	r3, #92	; 0x5c
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d912      	bls.n	8008ed8 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	212c      	movs	r1, #44	; 0x2c
 8008eb8:	fb01 f303 	mul.w	r3, r1, r3
 8008ebc:	4413      	add	r3, r2
 8008ebe:	335c      	adds	r3, #92	; 0x5c
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	212c      	movs	r1, #44	; 0x2c
 8008eca:	fb01 f303 	mul.w	r3, r1, r3
 8008ece:	4413      	add	r3, r2
 8008ed0:	3360      	adds	r3, #96	; 0x60
 8008ed2:	2204      	movs	r2, #4
 8008ed4:	701a      	strb	r2, [r3, #0]
 8008ed6:	e021      	b.n	8008f1c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	212c      	movs	r1, #44	; 0x2c
 8008ede:	fb01 f303 	mul.w	r3, r1, r3
 8008ee2:	4413      	add	r3, r2
 8008ee4:	3360      	adds	r3, #96	; 0x60
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f00:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f08:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	015a      	lsls	r2, r3, #5
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	4413      	add	r3, r2
 8008f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f16:	461a      	mov	r2, r3
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f28:	461a      	mov	r2, r3
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	b2d9      	uxtb	r1, r3
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	202c      	movs	r0, #44	; 0x2c
 8008f38:	fb00 f303 	mul.w	r3, r0, r3
 8008f3c:	4413      	add	r3, r2
 8008f3e:	3360      	adds	r3, #96	; 0x60
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f007 fb4f 	bl	80105e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008f4a:	bf00      	nop
 8008f4c:	3720      	adds	r7, #32
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b08a      	sub	sp, #40	; 0x28
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	0c5b      	lsrs	r3, r3, #17
 8008f78:	f003 030f 	and.w	r3, r3, #15
 8008f7c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	091b      	lsrs	r3, r3, #4
 8008f82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f86:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d004      	beq.n	8008f98 <HCD_RXQLVL_IRQHandler+0x46>
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	2b05      	cmp	r3, #5
 8008f92:	f000 80a9 	beq.w	80090e8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008f96:	e0aa      	b.n	80090ee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 80a6 	beq.w	80090ec <HCD_RXQLVL_IRQHandler+0x19a>
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	212c      	movs	r1, #44	; 0x2c
 8008fa6:	fb01 f303 	mul.w	r3, r1, r3
 8008faa:	4413      	add	r3, r2
 8008fac:	3344      	adds	r3, #68	; 0x44
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 809b 	beq.w	80090ec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	212c      	movs	r1, #44	; 0x2c
 8008fbc:	fb01 f303 	mul.w	r3, r1, r3
 8008fc0:	4413      	add	r3, r2
 8008fc2:	3350      	adds	r3, #80	; 0x50
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	441a      	add	r2, r3
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	202c      	movs	r0, #44	; 0x2c
 8008fd0:	fb00 f303 	mul.w	r3, r0, r3
 8008fd4:	440b      	add	r3, r1
 8008fd6:	334c      	adds	r3, #76	; 0x4c
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d87a      	bhi.n	80090d4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6818      	ldr	r0, [r3, #0]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	212c      	movs	r1, #44	; 0x2c
 8008fe8:	fb01 f303 	mul.w	r3, r1, r3
 8008fec:	4413      	add	r3, r2
 8008fee:	3344      	adds	r3, #68	; 0x44
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	b292      	uxth	r2, r2
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	f004 fcd7 	bl	800d9aa <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	212c      	movs	r1, #44	; 0x2c
 8009002:	fb01 f303 	mul.w	r3, r1, r3
 8009006:	4413      	add	r3, r2
 8009008:	3344      	adds	r3, #68	; 0x44
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	441a      	add	r2, r3
 8009010:	6879      	ldr	r1, [r7, #4]
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	202c      	movs	r0, #44	; 0x2c
 8009016:	fb00 f303 	mul.w	r3, r0, r3
 800901a:	440b      	add	r3, r1
 800901c:	3344      	adds	r3, #68	; 0x44
 800901e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	212c      	movs	r1, #44	; 0x2c
 8009026:	fb01 f303 	mul.w	r3, r1, r3
 800902a:	4413      	add	r3, r2
 800902c:	3350      	adds	r3, #80	; 0x50
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	441a      	add	r2, r3
 8009034:	6879      	ldr	r1, [r7, #4]
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	202c      	movs	r0, #44	; 0x2c
 800903a:	fb00 f303 	mul.w	r3, r0, r3
 800903e:	440b      	add	r3, r1
 8009040:	3350      	adds	r3, #80	; 0x50
 8009042:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	015a      	lsls	r2, r3, #5
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	4413      	add	r3, r2
 800904c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	0cdb      	lsrs	r3, r3, #19
 8009054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009058:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	212c      	movs	r1, #44	; 0x2c
 8009060:	fb01 f303 	mul.w	r3, r1, r3
 8009064:	4413      	add	r3, r2
 8009066:	3340      	adds	r3, #64	; 0x40
 8009068:	881b      	ldrh	r3, [r3, #0]
 800906a:	461a      	mov	r2, r3
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	4293      	cmp	r3, r2
 8009070:	d13c      	bne.n	80090ec <HCD_RXQLVL_IRQHandler+0x19a>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d039      	beq.n	80090ec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	015a      	lsls	r2, r3, #5
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	4413      	add	r3, r2
 8009080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800908e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009096:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090a4:	461a      	mov	r2, r3
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	212c      	movs	r1, #44	; 0x2c
 80090b0:	fb01 f303 	mul.w	r3, r1, r3
 80090b4:	4413      	add	r3, r2
 80090b6:	3354      	adds	r3, #84	; 0x54
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	f083 0301 	eor.w	r3, r3, #1
 80090be:	b2d8      	uxtb	r0, r3
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	212c      	movs	r1, #44	; 0x2c
 80090c6:	fb01 f303 	mul.w	r3, r1, r3
 80090ca:	4413      	add	r3, r2
 80090cc:	3354      	adds	r3, #84	; 0x54
 80090ce:	4602      	mov	r2, r0
 80090d0:	701a      	strb	r2, [r3, #0]
      break;
 80090d2:	e00b      	b.n	80090ec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	212c      	movs	r1, #44	; 0x2c
 80090da:	fb01 f303 	mul.w	r3, r1, r3
 80090de:	4413      	add	r3, r2
 80090e0:	3360      	adds	r3, #96	; 0x60
 80090e2:	2204      	movs	r2, #4
 80090e4:	701a      	strb	r2, [r3, #0]
      break;
 80090e6:	e001      	b.n	80090ec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80090e8:	bf00      	nop
 80090ea:	e000      	b.n	80090ee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80090ec:	bf00      	nop
  }
}
 80090ee:	bf00      	nop
 80090f0:	3728      	adds	r7, #40	; 0x28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b086      	sub	sp, #24
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009122:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f003 0302 	and.w	r3, r3, #2
 800912a:	2b02      	cmp	r3, #2
 800912c:	d10b      	bne.n	8009146 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b01      	cmp	r3, #1
 8009136:	d102      	bne.n	800913e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f007 fa39 	bl	80105b0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	f043 0302 	orr.w	r3, r3, #2
 8009144:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f003 0308 	and.w	r3, r3, #8
 800914c:	2b08      	cmp	r3, #8
 800914e:	d132      	bne.n	80091b6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f043 0308 	orr.w	r3, r3, #8
 8009156:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f003 0304 	and.w	r3, r3, #4
 800915e:	2b04      	cmp	r3, #4
 8009160:	d126      	bne.n	80091b0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	2b02      	cmp	r3, #2
 8009168:	d113      	bne.n	8009192 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8009170:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009174:	d106      	bne.n	8009184 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2102      	movs	r1, #2
 800917c:	4618      	mov	r0, r3
 800917e:	f004 fd4f 	bl	800dc20 <USB_InitFSLSPClkSel>
 8009182:	e011      	b.n	80091a8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2101      	movs	r1, #1
 800918a:	4618      	mov	r0, r3
 800918c:	f004 fd48 	bl	800dc20 <USB_InitFSLSPClkSel>
 8009190:	e00a      	b.n	80091a8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d106      	bne.n	80091a8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091a0:	461a      	mov	r2, r3
 80091a2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80091a6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f007 fa2b 	bl	8010604 <HAL_HCD_PortEnabled_Callback>
 80091ae:	e002      	b.n	80091b6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f007 fa35 	bl	8010620 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f003 0320 	and.w	r3, r3, #32
 80091bc:	2b20      	cmp	r3, #32
 80091be:	d103      	bne.n	80091c8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	f043 0320 	orr.w	r3, r3, #32
 80091c6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80091ce:	461a      	mov	r2, r3
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	6013      	str	r3, [r2, #0]
}
 80091d4:	bf00      	nop
 80091d6:	3718      	adds	r7, #24
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d101      	bne.n	80091ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e12b      	b.n	8009446 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d106      	bne.n	8009208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7f8 fd7a 	bl	8001cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2224      	movs	r2, #36	; 0x24
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f022 0201 	bic.w	r2, r2, #1
 800921e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800922e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800923e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009240:	f002 fcec 	bl	800bc1c <HAL_RCC_GetPCLK1Freq>
 8009244:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	4a81      	ldr	r2, [pc, #516]	; (8009450 <HAL_I2C_Init+0x274>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d807      	bhi.n	8009260 <HAL_I2C_Init+0x84>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4a80      	ldr	r2, [pc, #512]	; (8009454 <HAL_I2C_Init+0x278>)
 8009254:	4293      	cmp	r3, r2
 8009256:	bf94      	ite	ls
 8009258:	2301      	movls	r3, #1
 800925a:	2300      	movhi	r3, #0
 800925c:	b2db      	uxtb	r3, r3
 800925e:	e006      	b.n	800926e <HAL_I2C_Init+0x92>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4a7d      	ldr	r2, [pc, #500]	; (8009458 <HAL_I2C_Init+0x27c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	bf94      	ite	ls
 8009268:	2301      	movls	r3, #1
 800926a:	2300      	movhi	r3, #0
 800926c:	b2db      	uxtb	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e0e7      	b.n	8009446 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	4a78      	ldr	r2, [pc, #480]	; (800945c <HAL_I2C_Init+0x280>)
 800927a:	fba2 2303 	umull	r2, r3, r2, r3
 800927e:	0c9b      	lsrs	r3, r3, #18
 8009280:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	430a      	orrs	r2, r1
 8009294:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6a1b      	ldr	r3, [r3, #32]
 800929c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	4a6a      	ldr	r2, [pc, #424]	; (8009450 <HAL_I2C_Init+0x274>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d802      	bhi.n	80092b0 <HAL_I2C_Init+0xd4>
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	3301      	adds	r3, #1
 80092ae:	e009      	b.n	80092c4 <HAL_I2C_Init+0xe8>
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80092b6:	fb02 f303 	mul.w	r3, r2, r3
 80092ba:	4a69      	ldr	r2, [pc, #420]	; (8009460 <HAL_I2C_Init+0x284>)
 80092bc:	fba2 2303 	umull	r2, r3, r2, r3
 80092c0:	099b      	lsrs	r3, r3, #6
 80092c2:	3301      	adds	r3, #1
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	6812      	ldr	r2, [r2, #0]
 80092c8:	430b      	orrs	r3, r1
 80092ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	69db      	ldr	r3, [r3, #28]
 80092d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80092d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	495c      	ldr	r1, [pc, #368]	; (8009450 <HAL_I2C_Init+0x274>)
 80092e0:	428b      	cmp	r3, r1
 80092e2:	d819      	bhi.n	8009318 <HAL_I2C_Init+0x13c>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	1e59      	subs	r1, r3, #1
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80092f2:	1c59      	adds	r1, r3, #1
 80092f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80092f8:	400b      	ands	r3, r1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00a      	beq.n	8009314 <HAL_I2C_Init+0x138>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	1e59      	subs	r1, r3, #1
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	005b      	lsls	r3, r3, #1
 8009308:	fbb1 f3f3 	udiv	r3, r1, r3
 800930c:	3301      	adds	r3, #1
 800930e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009312:	e051      	b.n	80093b8 <HAL_I2C_Init+0x1dc>
 8009314:	2304      	movs	r3, #4
 8009316:	e04f      	b.n	80093b8 <HAL_I2C_Init+0x1dc>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d111      	bne.n	8009344 <HAL_I2C_Init+0x168>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	1e58      	subs	r0, r3, #1
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6859      	ldr	r1, [r3, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	005b      	lsls	r3, r3, #1
 800932c:	440b      	add	r3, r1
 800932e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009332:	3301      	adds	r3, #1
 8009334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009338:	2b00      	cmp	r3, #0
 800933a:	bf0c      	ite	eq
 800933c:	2301      	moveq	r3, #1
 800933e:	2300      	movne	r3, #0
 8009340:	b2db      	uxtb	r3, r3
 8009342:	e012      	b.n	800936a <HAL_I2C_Init+0x18e>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	1e58      	subs	r0, r3, #1
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6859      	ldr	r1, [r3, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	440b      	add	r3, r1
 8009352:	0099      	lsls	r1, r3, #2
 8009354:	440b      	add	r3, r1
 8009356:	fbb0 f3f3 	udiv	r3, r0, r3
 800935a:	3301      	adds	r3, #1
 800935c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009360:	2b00      	cmp	r3, #0
 8009362:	bf0c      	ite	eq
 8009364:	2301      	moveq	r3, #1
 8009366:	2300      	movne	r3, #0
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <HAL_I2C_Init+0x196>
 800936e:	2301      	movs	r3, #1
 8009370:	e022      	b.n	80093b8 <HAL_I2C_Init+0x1dc>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10e      	bne.n	8009398 <HAL_I2C_Init+0x1bc>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	1e58      	subs	r0, r3, #1
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6859      	ldr	r1, [r3, #4]
 8009382:	460b      	mov	r3, r1
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	440b      	add	r3, r1
 8009388:	fbb0 f3f3 	udiv	r3, r0, r3
 800938c:	3301      	adds	r3, #1
 800938e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009396:	e00f      	b.n	80093b8 <HAL_I2C_Init+0x1dc>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	1e58      	subs	r0, r3, #1
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6859      	ldr	r1, [r3, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	440b      	add	r3, r1
 80093a6:	0099      	lsls	r1, r3, #2
 80093a8:	440b      	add	r3, r1
 80093aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80093ae:	3301      	adds	r3, #1
 80093b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093b8:	6879      	ldr	r1, [r7, #4]
 80093ba:	6809      	ldr	r1, [r1, #0]
 80093bc:	4313      	orrs	r3, r2
 80093be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	69da      	ldr	r2, [r3, #28]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	431a      	orrs	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	430a      	orrs	r2, r1
 80093da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80093e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	6911      	ldr	r1, [r2, #16]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	68d2      	ldr	r2, [r2, #12]
 80093f2:	4311      	orrs	r1, r2
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	6812      	ldr	r2, [r2, #0]
 80093f8:	430b      	orrs	r3, r1
 80093fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	695a      	ldr	r2, [r3, #20]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	431a      	orrs	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	430a      	orrs	r2, r1
 8009416:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f042 0201 	orr.w	r2, r2, #1
 8009426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2220      	movs	r2, #32
 8009432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	000186a0 	.word	0x000186a0
 8009454:	001e847f 	.word	0x001e847f
 8009458:	003d08ff 	.word	0x003d08ff
 800945c:	431bde83 	.word	0x431bde83
 8009460:	10624dd3 	.word	0x10624dd3

08009464 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af02      	add	r7, sp, #8
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	607a      	str	r2, [r7, #4]
 800946e:	461a      	mov	r2, r3
 8009470:	460b      	mov	r3, r1
 8009472:	817b      	strh	r3, [r7, #10]
 8009474:	4613      	mov	r3, r2
 8009476:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009478:	f7fd fe0a 	bl	8007090 <HAL_GetTick>
 800947c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b20      	cmp	r3, #32
 8009488:	f040 80e0 	bne.w	800964c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	2319      	movs	r3, #25
 8009492:	2201      	movs	r2, #1
 8009494:	4970      	ldr	r1, [pc, #448]	; (8009658 <HAL_I2C_Master_Transmit+0x1f4>)
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f001 f8f6 	bl	800a688 <I2C_WaitOnFlagUntilTimeout>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80094a2:	2302      	movs	r3, #2
 80094a4:	e0d3      	b.n	800964e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d101      	bne.n	80094b4 <HAL_I2C_Master_Transmit+0x50>
 80094b0:	2302      	movs	r3, #2
 80094b2:	e0cc      	b.n	800964e <HAL_I2C_Master_Transmit+0x1ea>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d007      	beq.n	80094da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f042 0201 	orr.w	r2, r2, #1
 80094d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2221      	movs	r2, #33	; 0x21
 80094ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2210      	movs	r2, #16
 80094f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	893a      	ldrh	r2, [r7, #8]
 800950a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009510:	b29a      	uxth	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	4a50      	ldr	r2, [pc, #320]	; (800965c <HAL_I2C_Master_Transmit+0x1f8>)
 800951a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800951c:	8979      	ldrh	r1, [r7, #10]
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	6a3a      	ldr	r2, [r7, #32]
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 fde2 	bl	800a0ec <I2C_MasterRequestWrite>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e08d      	b.n	800964e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009532:	2300      	movs	r3, #0
 8009534:	613b      	str	r3, [r7, #16]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	695b      	ldr	r3, [r3, #20]
 800953c:	613b      	str	r3, [r7, #16]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	613b      	str	r3, [r7, #16]
 8009546:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009548:	e066      	b.n	8009618 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	6a39      	ldr	r1, [r7, #32]
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f001 f970 	bl	800a834 <I2C_WaitOnTXEFlagUntilTimeout>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00d      	beq.n	8009576 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955e:	2b04      	cmp	r3, #4
 8009560:	d107      	bne.n	8009572 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009570:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e06b      	b.n	800964e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957a:	781a      	ldrb	r2, [r3, #0]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009590:	b29b      	uxth	r3, r3
 8009592:	3b01      	subs	r3, #1
 8009594:	b29a      	uxth	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800959e:	3b01      	subs	r3, #1
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	695b      	ldr	r3, [r3, #20]
 80095ac:	f003 0304 	and.w	r3, r3, #4
 80095b0:	2b04      	cmp	r3, #4
 80095b2:	d11b      	bne.n	80095ec <HAL_I2C_Master_Transmit+0x188>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d017      	beq.n	80095ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	781a      	ldrb	r2, [r3, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	1c5a      	adds	r2, r3, #1
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	3b01      	subs	r3, #1
 80095da:	b29a      	uxth	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095e4:	3b01      	subs	r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	6a39      	ldr	r1, [r7, #32]
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f001 f960 	bl	800a8b6 <I2C_WaitOnBTFFlagUntilTimeout>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00d      	beq.n	8009618 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009600:	2b04      	cmp	r3, #4
 8009602:	d107      	bne.n	8009614 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009612:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e01a      	b.n	800964e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800961c:	2b00      	cmp	r3, #0
 800961e:	d194      	bne.n	800954a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800962e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2220      	movs	r2, #32
 8009634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	e000      	b.n	800964e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800964c:	2302      	movs	r3, #2
  }
}
 800964e:	4618      	mov	r0, r3
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	00100002 	.word	0x00100002
 800965c:	ffff0000 	.word	0xffff0000

08009660 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b08c      	sub	sp, #48	; 0x30
 8009664:	af02      	add	r7, sp, #8
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	607a      	str	r2, [r7, #4]
 800966a:	461a      	mov	r2, r3
 800966c:	460b      	mov	r3, r1
 800966e:	817b      	strh	r3, [r7, #10]
 8009670:	4613      	mov	r3, r2
 8009672:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009674:	f7fd fd0c 	bl	8007090 <HAL_GetTick>
 8009678:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b20      	cmp	r3, #32
 8009684:	f040 820b 	bne.w	8009a9e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	2319      	movs	r3, #25
 800968e:	2201      	movs	r2, #1
 8009690:	497c      	ldr	r1, [pc, #496]	; (8009884 <HAL_I2C_Master_Receive+0x224>)
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f000 fff8 	bl	800a688 <I2C_WaitOnFlagUntilTimeout>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800969e:	2302      	movs	r3, #2
 80096a0:	e1fe      	b.n	8009aa0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d101      	bne.n	80096b0 <HAL_I2C_Master_Receive+0x50>
 80096ac:	2302      	movs	r3, #2
 80096ae:	e1f7      	b.n	8009aa0 <HAL_I2C_Master_Receive+0x440>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d007      	beq.n	80096d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f042 0201 	orr.w	r2, r2, #1
 80096d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2222      	movs	r2, #34	; 0x22
 80096ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2210      	movs	r2, #16
 80096f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	893a      	ldrh	r2, [r7, #8]
 8009706:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800970c:	b29a      	uxth	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4a5c      	ldr	r2, [pc, #368]	; (8009888 <HAL_I2C_Master_Receive+0x228>)
 8009716:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009718:	8979      	ldrh	r1, [r7, #10]
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f000 fd66 	bl	800a1f0 <I2C_MasterRequestRead>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e1b8      	b.n	8009aa0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009732:	2b00      	cmp	r3, #0
 8009734:	d113      	bne.n	800975e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009736:	2300      	movs	r3, #0
 8009738:	623b      	str	r3, [r7, #32]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	623b      	str	r3, [r7, #32]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	623b      	str	r3, [r7, #32]
 800974a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800975a:	601a      	str	r2, [r3, #0]
 800975c:	e18c      	b.n	8009a78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009762:	2b01      	cmp	r3, #1
 8009764:	d11b      	bne.n	800979e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009774:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009776:	2300      	movs	r3, #0
 8009778:	61fb      	str	r3, [r7, #28]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	61fb      	str	r3, [r7, #28]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	61fb      	str	r3, [r7, #28]
 800978a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	e16c      	b.n	8009a78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d11b      	bne.n	80097de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097c6:	2300      	movs	r3, #0
 80097c8:	61bb      	str	r3, [r7, #24]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	695b      	ldr	r3, [r3, #20]
 80097d0:	61bb      	str	r3, [r7, #24]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	61bb      	str	r3, [r7, #24]
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	e14c      	b.n	8009a78 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80097ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097ee:	2300      	movs	r3, #0
 80097f0:	617b      	str	r3, [r7, #20]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	695b      	ldr	r3, [r3, #20]
 80097f8:	617b      	str	r3, [r7, #20]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	617b      	str	r3, [r7, #20]
 8009802:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009804:	e138      	b.n	8009a78 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800980a:	2b03      	cmp	r3, #3
 800980c:	f200 80f1 	bhi.w	80099f2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009814:	2b01      	cmp	r3, #1
 8009816:	d123      	bne.n	8009860 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800981a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f001 f88b 	bl	800a938 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d001      	beq.n	800982c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e139      	b.n	8009aa0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	691a      	ldr	r2, [r3, #16]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	b2d2      	uxtb	r2, r2
 8009838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	1c5a      	adds	r2, r3, #1
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009848:	3b01      	subs	r3, #1
 800984a:	b29a      	uxth	r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009854:	b29b      	uxth	r3, r3
 8009856:	3b01      	subs	r3, #1
 8009858:	b29a      	uxth	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800985e:	e10b      	b.n	8009a78 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009864:	2b02      	cmp	r3, #2
 8009866:	d14e      	bne.n	8009906 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986e:	2200      	movs	r2, #0
 8009870:	4906      	ldr	r1, [pc, #24]	; (800988c <HAL_I2C_Master_Receive+0x22c>)
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 ff08 	bl	800a688 <I2C_WaitOnFlagUntilTimeout>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d008      	beq.n	8009890 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e10e      	b.n	8009aa0 <HAL_I2C_Master_Receive+0x440>
 8009882:	bf00      	nop
 8009884:	00100002 	.word	0x00100002
 8009888:	ffff0000 	.word	0xffff0000
 800988c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800989e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	691a      	ldr	r2, [r3, #16]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098aa:	b2d2      	uxtb	r2, r2
 80098ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b2:	1c5a      	adds	r2, r3, #1
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098bc:	3b01      	subs	r3, #1
 80098be:	b29a      	uxth	r2, r3
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	3b01      	subs	r3, #1
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	691a      	ldr	r2, [r3, #16]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098dc:	b2d2      	uxtb	r2, r2
 80098de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e4:	1c5a      	adds	r2, r3, #1
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ee:	3b01      	subs	r3, #1
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	3b01      	subs	r3, #1
 80098fe:	b29a      	uxth	r2, r3
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009904:	e0b8      	b.n	8009a78 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990c:	2200      	movs	r2, #0
 800990e:	4966      	ldr	r1, [pc, #408]	; (8009aa8 <HAL_I2C_Master_Receive+0x448>)
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f000 feb9 	bl	800a688 <I2C_WaitOnFlagUntilTimeout>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d001      	beq.n	8009920 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e0bf      	b.n	8009aa0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800992e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	691a      	ldr	r2, [r3, #16]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993a:	b2d2      	uxtb	r2, r2
 800993c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009942:	1c5a      	adds	r2, r3, #1
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800994c:	3b01      	subs	r3, #1
 800994e:	b29a      	uxth	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009958:	b29b      	uxth	r3, r3
 800995a:	3b01      	subs	r3, #1
 800995c:	b29a      	uxth	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	2200      	movs	r2, #0
 800996a:	494f      	ldr	r1, [pc, #316]	; (8009aa8 <HAL_I2C_Master_Receive+0x448>)
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 fe8b 	bl	800a688 <I2C_WaitOnFlagUntilTimeout>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	e091      	b.n	8009aa0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800998a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691a      	ldr	r2, [r3, #16]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009996:	b2d2      	uxtb	r2, r2
 8009998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999e:	1c5a      	adds	r2, r3, #1
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099a8:	3b01      	subs	r3, #1
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	3b01      	subs	r3, #1
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	691a      	ldr	r2, [r3, #16]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c8:	b2d2      	uxtb	r2, r2
 80099ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d0:	1c5a      	adds	r2, r3, #1
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099da:	3b01      	subs	r3, #1
 80099dc:	b29a      	uxth	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	3b01      	subs	r3, #1
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80099f0:	e042      	b.n	8009a78 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 ff9e 	bl	800a938 <I2C_WaitOnRXNEFlagUntilTimeout>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	e04c      	b.n	8009aa0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	691a      	ldr	r2, [r3, #16]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	b2d2      	uxtb	r2, r2
 8009a12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a22:	3b01      	subs	r3, #1
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	3b01      	subs	r3, #1
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	f003 0304 	and.w	r3, r3, #4
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d118      	bne.n	8009a78 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	691a      	ldr	r2, [r3, #16]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a50:	b2d2      	uxtb	r2, r2
 8009a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	1c5a      	adds	r2, r3, #1
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a62:	3b01      	subs	r3, #1
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	3b01      	subs	r3, #1
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f47f aec2 	bne.w	8009806 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2220      	movs	r2, #32
 8009a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	e000      	b.n	8009aa0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009a9e:	2302      	movs	r3, #2
  }
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3728      	adds	r7, #40	; 0x28
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	00010004 	.word	0x00010004

08009aac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b088      	sub	sp, #32
 8009ab0:	af02      	add	r7, sp, #8
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	4611      	mov	r1, r2
 8009ab8:	461a      	mov	r2, r3
 8009aba:	4603      	mov	r3, r0
 8009abc:	817b      	strh	r3, [r7, #10]
 8009abe:	460b      	mov	r3, r1
 8009ac0:	813b      	strh	r3, [r7, #8]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ac6:	f7fd fae3 	bl	8007090 <HAL_GetTick>
 8009aca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b20      	cmp	r3, #32
 8009ad6:	f040 80d9 	bne.w	8009c8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	2319      	movs	r3, #25
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	496d      	ldr	r1, [pc, #436]	; (8009c98 <HAL_I2C_Mem_Write+0x1ec>)
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 fdcf 	bl	800a688 <I2C_WaitOnFlagUntilTimeout>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d001      	beq.n	8009af4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009af0:	2302      	movs	r3, #2
 8009af2:	e0cc      	b.n	8009c8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d101      	bne.n	8009b02 <HAL_I2C_Mem_Write+0x56>
 8009afe:	2302      	movs	r3, #2
 8009b00:	e0c5      	b.n	8009c8e <HAL_I2C_Mem_Write+0x1e2>
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0301 	and.w	r3, r3, #1
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d007      	beq.n	8009b28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f042 0201 	orr.w	r2, r2, #1
 8009b26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2221      	movs	r2, #33	; 0x21
 8009b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2240      	movs	r2, #64	; 0x40
 8009b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6a3a      	ldr	r2, [r7, #32]
 8009b52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	4a4d      	ldr	r2, [pc, #308]	; (8009c9c <HAL_I2C_Mem_Write+0x1f0>)
 8009b68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b6a:	88f8      	ldrh	r0, [r7, #6]
 8009b6c:	893a      	ldrh	r2, [r7, #8]
 8009b6e:	8979      	ldrh	r1, [r7, #10]
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	4603      	mov	r3, r0
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f000 fc06 	bl	800a38c <I2C_RequestMemoryWrite>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d052      	beq.n	8009c2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e081      	b.n	8009c8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f000 fe50 	bl	800a834 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00d      	beq.n	8009bb6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	d107      	bne.n	8009bb2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e06b      	b.n	8009c8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bba:	781a      	ldrb	r2, [r3, #0]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc6:	1c5a      	adds	r2, r3, #1
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	3b01      	subs	r3, #1
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	695b      	ldr	r3, [r3, #20]
 8009bec:	f003 0304 	and.w	r3, r3, #4
 8009bf0:	2b04      	cmp	r3, #4
 8009bf2:	d11b      	bne.n	8009c2c <HAL_I2C_Mem_Write+0x180>
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d017      	beq.n	8009c2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c00:	781a      	ldrb	r2, [r3, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c16:	3b01      	subs	r3, #1
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	3b01      	subs	r3, #1
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1aa      	bne.n	8009b8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 fe3c 	bl	800a8b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00d      	beq.n	8009c60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c48:	2b04      	cmp	r3, #4
 8009c4a:	d107      	bne.n	8009c5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e016      	b.n	8009c8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2220      	movs	r2, #32
 8009c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	e000      	b.n	8009c8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009c8c:	2302      	movs	r3, #2
  }
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	00100002 	.word	0x00100002
 8009c9c:	ffff0000 	.word	0xffff0000

08009ca0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b08c      	sub	sp, #48	; 0x30
 8009ca4:	af02      	add	r7, sp, #8
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	4608      	mov	r0, r1
 8009caa:	4611      	mov	r1, r2
 8009cac:	461a      	mov	r2, r3
 8009cae:	4603      	mov	r3, r0
 8009cb0:	817b      	strh	r3, [r7, #10]
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	813b      	strh	r3, [r7, #8]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009cba:	f7fd f9e9 	bl	8007090 <HAL_GetTick>
 8009cbe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b20      	cmp	r3, #32
 8009cca:	f040 8208 	bne.w	800a0de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	2319      	movs	r3, #25
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	497b      	ldr	r1, [pc, #492]	; (8009ec4 <HAL_I2C_Mem_Read+0x224>)
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f000 fcd5 	bl	800a688 <I2C_WaitOnFlagUntilTimeout>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d001      	beq.n	8009ce8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	e1fb      	b.n	800a0e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d101      	bne.n	8009cf6 <HAL_I2C_Mem_Read+0x56>
 8009cf2:	2302      	movs	r3, #2
 8009cf4:	e1f4      	b.n	800a0e0 <HAL_I2C_Mem_Read+0x440>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f003 0301 	and.w	r3, r3, #1
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d007      	beq.n	8009d1c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f042 0201 	orr.w	r2, r2, #1
 8009d1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2222      	movs	r2, #34	; 0x22
 8009d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2240      	movs	r2, #64	; 0x40
 8009d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4a5b      	ldr	r2, [pc, #364]	; (8009ec8 <HAL_I2C_Mem_Read+0x228>)
 8009d5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d5e:	88f8      	ldrh	r0, [r7, #6]
 8009d60:	893a      	ldrh	r2, [r7, #8]
 8009d62:	8979      	ldrh	r1, [r7, #10]
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	9301      	str	r3, [sp, #4]
 8009d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6a:	9300      	str	r3, [sp, #0]
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f000 fba2 	bl	800a4b8 <I2C_RequestMemoryRead>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e1b0      	b.n	800a0e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d113      	bne.n	8009dae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d86:	2300      	movs	r3, #0
 8009d88:	623b      	str	r3, [r7, #32]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	695b      	ldr	r3, [r3, #20]
 8009d90:	623b      	str	r3, [r7, #32]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	623b      	str	r3, [r7, #32]
 8009d9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009daa:	601a      	str	r2, [r3, #0]
 8009dac:	e184      	b.n	800a0b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d11b      	bne.n	8009dee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	61fb      	str	r3, [r7, #28]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	61fb      	str	r3, [r7, #28]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	699b      	ldr	r3, [r3, #24]
 8009dd8:	61fb      	str	r3, [r7, #28]
 8009dda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dea:	601a      	str	r2, [r3, #0]
 8009dec:	e164      	b.n	800a0b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d11b      	bne.n	8009e2e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e16:	2300      	movs	r3, #0
 8009e18:	61bb      	str	r3, [r7, #24]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	695b      	ldr	r3, [r3, #20]
 8009e20:	61bb      	str	r3, [r7, #24]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	61bb      	str	r3, [r7, #24]
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	e144      	b.n	800a0b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e2e:	2300      	movs	r3, #0
 8009e30:	617b      	str	r3, [r7, #20]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	695b      	ldr	r3, [r3, #20]
 8009e38:	617b      	str	r3, [r7, #20]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	617b      	str	r3, [r7, #20]
 8009e42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009e44:	e138      	b.n	800a0b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	f200 80f1 	bhi.w	800a032 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d123      	bne.n	8009ea0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f000 fd6b 	bl	800a938 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e139      	b.n	800a0e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	691a      	ldr	r2, [r3, #16]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	b2d2      	uxtb	r2, r2
 8009e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7e:	1c5a      	adds	r2, r3, #1
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	3b01      	subs	r3, #1
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e9e:	e10b      	b.n	800a0b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d14e      	bne.n	8009f46 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eae:	2200      	movs	r2, #0
 8009eb0:	4906      	ldr	r1, [pc, #24]	; (8009ecc <HAL_I2C_Mem_Read+0x22c>)
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f000 fbe8 	bl	800a688 <I2C_WaitOnFlagUntilTimeout>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d008      	beq.n	8009ed0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e10e      	b.n	800a0e0 <HAL_I2C_Mem_Read+0x440>
 8009ec2:	bf00      	nop
 8009ec4:	00100002 	.word	0x00100002
 8009ec8:	ffff0000 	.word	0xffff0000
 8009ecc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ede:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	691a      	ldr	r2, [r3, #16]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eea:	b2d2      	uxtb	r2, r2
 8009eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef2:	1c5a      	adds	r2, r3, #1
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009efc:	3b01      	subs	r3, #1
 8009efe:	b29a      	uxth	r2, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	691a      	ldr	r2, [r3, #16]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1c:	b2d2      	uxtb	r2, r2
 8009f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f24:	1c5a      	adds	r2, r3, #1
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	b29a      	uxth	r2, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f44:	e0b8      	b.n	800a0b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	4966      	ldr	r1, [pc, #408]	; (800a0e8 <HAL_I2C_Mem_Read+0x448>)
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 fb99 	bl	800a688 <I2C_WaitOnFlagUntilTimeout>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d001      	beq.n	8009f60 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e0bf      	b.n	800a0e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	691a      	ldr	r2, [r3, #16]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7a:	b2d2      	uxtb	r2, r2
 8009f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f82:	1c5a      	adds	r2, r3, #1
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa8:	2200      	movs	r2, #0
 8009faa:	494f      	ldr	r1, [pc, #316]	; (800a0e8 <HAL_I2C_Mem_Read+0x448>)
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f000 fb6b 	bl	800a688 <I2C_WaitOnFlagUntilTimeout>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e091      	b.n	800a0e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	691a      	ldr	r2, [r3, #16]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd6:	b2d2      	uxtb	r2, r2
 8009fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	1c5a      	adds	r2, r3, #1
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	691a      	ldr	r2, [r3, #16]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a008:	b2d2      	uxtb	r2, r2
 800a00a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a010:	1c5a      	adds	r2, r3, #1
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a01a:	3b01      	subs	r3, #1
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a026:	b29b      	uxth	r3, r3
 800a028:	3b01      	subs	r3, #1
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a030:	e042      	b.n	800a0b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a034:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f000 fc7e 	bl	800a938 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e04c      	b.n	800a0e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	691a      	ldr	r2, [r3, #16]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a050:	b2d2      	uxtb	r2, r2
 800a052:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a058:	1c5a      	adds	r2, r3, #1
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a062:	3b01      	subs	r3, #1
 800a064:	b29a      	uxth	r2, r3
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a06e:	b29b      	uxth	r3, r3
 800a070:	3b01      	subs	r3, #1
 800a072:	b29a      	uxth	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	f003 0304 	and.w	r3, r3, #4
 800a082:	2b04      	cmp	r3, #4
 800a084:	d118      	bne.n	800a0b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	691a      	ldr	r2, [r3, #16]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a090:	b2d2      	uxtb	r2, r2
 800a092:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a098:	1c5a      	adds	r2, r3, #1
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f47f aec2 	bne.w	8009e46 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	e000      	b.n	800a0e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a0de:	2302      	movs	r3, #2
  }
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3728      	adds	r7, #40	; 0x28
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	00010004 	.word	0x00010004

0800a0ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b088      	sub	sp, #32
 800a0f0:	af02      	add	r7, sp, #8
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	607a      	str	r2, [r7, #4]
 800a0f6:	603b      	str	r3, [r7, #0]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a100:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	2b08      	cmp	r3, #8
 800a106:	d006      	beq.n	800a116 <I2C_MasterRequestWrite+0x2a>
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d003      	beq.n	800a116 <I2C_MasterRequestWrite+0x2a>
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a114:	d108      	bne.n	800a128 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a124:	601a      	str	r2, [r3, #0]
 800a126:	e00b      	b.n	800a140 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12c:	2b12      	cmp	r3, #18
 800a12e:	d107      	bne.n	800a140 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a13e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f000 fa9b 	bl	800a688 <I2C_WaitOnFlagUntilTimeout>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00d      	beq.n	800a174 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a166:	d103      	bne.n	800a170 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a16e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e035      	b.n	800a1e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a17c:	d108      	bne.n	800a190 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a17e:	897b      	ldrh	r3, [r7, #10]
 800a180:	b2db      	uxtb	r3, r3
 800a182:	461a      	mov	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a18c:	611a      	str	r2, [r3, #16]
 800a18e:	e01b      	b.n	800a1c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a190:	897b      	ldrh	r3, [r7, #10]
 800a192:	11db      	asrs	r3, r3, #7
 800a194:	b2db      	uxtb	r3, r3
 800a196:	f003 0306 	and.w	r3, r3, #6
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	f063 030f 	orn	r3, r3, #15
 800a1a0:	b2da      	uxtb	r2, r3
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	490e      	ldr	r1, [pc, #56]	; (800a1e8 <I2C_MasterRequestWrite+0xfc>)
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f000 fac1 	bl	800a736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d001      	beq.n	800a1be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e010      	b.n	800a1e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a1be:	897b      	ldrh	r3, [r7, #10]
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	4907      	ldr	r1, [pc, #28]	; (800a1ec <I2C_MasterRequestWrite+0x100>)
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f000 fab1 	bl	800a736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e000      	b.n	800a1e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3718      	adds	r7, #24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	00010008 	.word	0x00010008
 800a1ec:	00010002 	.word	0x00010002

0800a1f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b088      	sub	sp, #32
 800a1f4:	af02      	add	r7, sp, #8
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	607a      	str	r2, [r7, #4]
 800a1fa:	603b      	str	r3, [r7, #0]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a204:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a214:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2b08      	cmp	r3, #8
 800a21a:	d006      	beq.n	800a22a <I2C_MasterRequestRead+0x3a>
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d003      	beq.n	800a22a <I2C_MasterRequestRead+0x3a>
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a228:	d108      	bne.n	800a23c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	e00b      	b.n	800a254 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a240:	2b11      	cmp	r3, #17
 800a242:	d107      	bne.n	800a254 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a252:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f000 fa11 	bl	800a688 <I2C_WaitOnFlagUntilTimeout>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00d      	beq.n	800a288 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a27a:	d103      	bne.n	800a284 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a282:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a284:	2303      	movs	r3, #3
 800a286:	e079      	b.n	800a37c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a290:	d108      	bne.n	800a2a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a292:	897b      	ldrh	r3, [r7, #10]
 800a294:	b2db      	uxtb	r3, r3
 800a296:	f043 0301 	orr.w	r3, r3, #1
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	611a      	str	r2, [r3, #16]
 800a2a2:	e05f      	b.n	800a364 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a2a4:	897b      	ldrh	r3, [r7, #10]
 800a2a6:	11db      	asrs	r3, r3, #7
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	f003 0306 	and.w	r3, r3, #6
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	f063 030f 	orn	r3, r3, #15
 800a2b4:	b2da      	uxtb	r2, r3
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	4930      	ldr	r1, [pc, #192]	; (800a384 <I2C_MasterRequestRead+0x194>)
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 fa37 	bl	800a736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e054      	b.n	800a37c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a2d2:	897b      	ldrh	r3, [r7, #10]
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	4929      	ldr	r1, [pc, #164]	; (800a388 <I2C_MasterRequestRead+0x198>)
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f000 fa27 	bl	800a736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d001      	beq.n	800a2f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e044      	b.n	800a37c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	613b      	str	r3, [r7, #16]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	695b      	ldr	r3, [r3, #20]
 800a2fc:	613b      	str	r3, [r7, #16]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	613b      	str	r3, [r7, #16]
 800a306:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a316:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 f9af 	bl	800a688 <I2C_WaitOnFlagUntilTimeout>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00d      	beq.n	800a34c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a33a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a33e:	d103      	bne.n	800a348 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a346:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a348:	2303      	movs	r3, #3
 800a34a:	e017      	b.n	800a37c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a34c:	897b      	ldrh	r3, [r7, #10]
 800a34e:	11db      	asrs	r3, r3, #7
 800a350:	b2db      	uxtb	r3, r3
 800a352:	f003 0306 	and.w	r3, r3, #6
 800a356:	b2db      	uxtb	r3, r3
 800a358:	f063 030e 	orn	r3, r3, #14
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	4907      	ldr	r1, [pc, #28]	; (800a388 <I2C_MasterRequestRead+0x198>)
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f000 f9e3 	bl	800a736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e000      	b.n	800a37c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3718      	adds	r7, #24
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	00010008 	.word	0x00010008
 800a388:	00010002 	.word	0x00010002

0800a38c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b088      	sub	sp, #32
 800a390:	af02      	add	r7, sp, #8
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	4608      	mov	r0, r1
 800a396:	4611      	mov	r1, r2
 800a398:	461a      	mov	r2, r3
 800a39a:	4603      	mov	r3, r0
 800a39c:	817b      	strh	r3, [r7, #10]
 800a39e:	460b      	mov	r3, r1
 800a3a0:	813b      	strh	r3, [r7, #8]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	6a3b      	ldr	r3, [r7, #32]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f000 f960 	bl	800a688 <I2C_WaitOnFlagUntilTimeout>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00d      	beq.n	800a3ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3dc:	d103      	bne.n	800a3e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e05f      	b.n	800a4aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a3ea:	897b      	ldrh	r3, [r7, #10]
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a3f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fc:	6a3a      	ldr	r2, [r7, #32]
 800a3fe:	492d      	ldr	r1, [pc, #180]	; (800a4b4 <I2C_RequestMemoryWrite+0x128>)
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f000 f998 	bl	800a736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	e04c      	b.n	800a4aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a410:	2300      	movs	r3, #0
 800a412:	617b      	str	r3, [r7, #20]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	617b      	str	r3, [r7, #20]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	699b      	ldr	r3, [r3, #24]
 800a422:	617b      	str	r3, [r7, #20]
 800a424:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a428:	6a39      	ldr	r1, [r7, #32]
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f000 fa02 	bl	800a834 <I2C_WaitOnTXEFlagUntilTimeout>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00d      	beq.n	800a452 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43a:	2b04      	cmp	r3, #4
 800a43c:	d107      	bne.n	800a44e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a44c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	e02b      	b.n	800a4aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a452:	88fb      	ldrh	r3, [r7, #6]
 800a454:	2b01      	cmp	r3, #1
 800a456:	d105      	bne.n	800a464 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a458:	893b      	ldrh	r3, [r7, #8]
 800a45a:	b2da      	uxtb	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	611a      	str	r2, [r3, #16]
 800a462:	e021      	b.n	800a4a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a464:	893b      	ldrh	r3, [r7, #8]
 800a466:	0a1b      	lsrs	r3, r3, #8
 800a468:	b29b      	uxth	r3, r3
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a474:	6a39      	ldr	r1, [r7, #32]
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f000 f9dc 	bl	800a834 <I2C_WaitOnTXEFlagUntilTimeout>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00d      	beq.n	800a49e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a486:	2b04      	cmp	r3, #4
 800a488:	d107      	bne.n	800a49a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a498:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e005      	b.n	800a4aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a49e:	893b      	ldrh	r3, [r7, #8]
 800a4a0:	b2da      	uxtb	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	00010002 	.word	0x00010002

0800a4b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b088      	sub	sp, #32
 800a4bc:	af02      	add	r7, sp, #8
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	4608      	mov	r0, r1
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	817b      	strh	r3, [r7, #10]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	813b      	strh	r3, [r7, #8]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a4e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	6a3b      	ldr	r3, [r7, #32]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f000 f8c2 	bl	800a688 <I2C_WaitOnFlagUntilTimeout>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00d      	beq.n	800a526 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a518:	d103      	bne.n	800a522 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a520:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a522:	2303      	movs	r3, #3
 800a524:	e0aa      	b.n	800a67c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a526:	897b      	ldrh	r3, [r7, #10]
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	461a      	mov	r2, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a534:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a538:	6a3a      	ldr	r2, [r7, #32]
 800a53a:	4952      	ldr	r1, [pc, #328]	; (800a684 <I2C_RequestMemoryRead+0x1cc>)
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f000 f8fa 	bl	800a736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	e097      	b.n	800a67c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a54c:	2300      	movs	r3, #0
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	695b      	ldr	r3, [r3, #20]
 800a556:	617b      	str	r3, [r7, #20]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	617b      	str	r3, [r7, #20]
 800a560:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a564:	6a39      	ldr	r1, [r7, #32]
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f000 f964 	bl	800a834 <I2C_WaitOnTXEFlagUntilTimeout>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00d      	beq.n	800a58e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a576:	2b04      	cmp	r3, #4
 800a578:	d107      	bne.n	800a58a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a588:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e076      	b.n	800a67c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a58e:	88fb      	ldrh	r3, [r7, #6]
 800a590:	2b01      	cmp	r3, #1
 800a592:	d105      	bne.n	800a5a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a594:	893b      	ldrh	r3, [r7, #8]
 800a596:	b2da      	uxtb	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	611a      	str	r2, [r3, #16]
 800a59e:	e021      	b.n	800a5e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a5a0:	893b      	ldrh	r3, [r7, #8]
 800a5a2:	0a1b      	lsrs	r3, r3, #8
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5b0:	6a39      	ldr	r1, [r7, #32]
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f000 f93e 	bl	800a834 <I2C_WaitOnTXEFlagUntilTimeout>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00d      	beq.n	800a5da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c2:	2b04      	cmp	r3, #4
 800a5c4:	d107      	bne.n	800a5d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e050      	b.n	800a67c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a5da:	893b      	ldrh	r3, [r7, #8]
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5e6:	6a39      	ldr	r1, [r7, #32]
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f000 f923 	bl	800a834 <I2C_WaitOnTXEFlagUntilTimeout>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00d      	beq.n	800a610 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f8:	2b04      	cmp	r3, #4
 800a5fa:	d107      	bne.n	800a60c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a60a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	e035      	b.n	800a67c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a61e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	6a3b      	ldr	r3, [r7, #32]
 800a626:	2200      	movs	r2, #0
 800a628:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f000 f82b 	bl	800a688 <I2C_WaitOnFlagUntilTimeout>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00d      	beq.n	800a654 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a646:	d103      	bne.n	800a650 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a64e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a650:	2303      	movs	r3, #3
 800a652:	e013      	b.n	800a67c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a654:	897b      	ldrh	r3, [r7, #10]
 800a656:	b2db      	uxtb	r3, r3
 800a658:	f043 0301 	orr.w	r3, r3, #1
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	6a3a      	ldr	r2, [r7, #32]
 800a668:	4906      	ldr	r1, [pc, #24]	; (800a684 <I2C_RequestMemoryRead+0x1cc>)
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f000 f863 	bl	800a736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e000      	b.n	800a67c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3718      	adds	r7, #24
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	00010002 	.word	0x00010002

0800a688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	603b      	str	r3, [r7, #0]
 800a694:	4613      	mov	r3, r2
 800a696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a698:	e025      	b.n	800a6e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6a0:	d021      	beq.n	800a6e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6a2:	f7fc fcf5 	bl	8007090 <HAL_GetTick>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	1ad3      	subs	r3, r2, r3
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d302      	bcc.n	800a6b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d116      	bne.n	800a6e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2220      	movs	r2, #32
 800a6c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d2:	f043 0220 	orr.w	r2, r3, #32
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e023      	b.n	800a72e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	0c1b      	lsrs	r3, r3, #16
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d10d      	bne.n	800a70c <I2C_WaitOnFlagUntilTimeout+0x84>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	43da      	mvns	r2, r3
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	bf0c      	ite	eq
 800a702:	2301      	moveq	r3, #1
 800a704:	2300      	movne	r3, #0
 800a706:	b2db      	uxtb	r3, r3
 800a708:	461a      	mov	r2, r3
 800a70a:	e00c      	b.n	800a726 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	699b      	ldr	r3, [r3, #24]
 800a712:	43da      	mvns	r2, r3
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	4013      	ands	r3, r2
 800a718:	b29b      	uxth	r3, r3
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bf0c      	ite	eq
 800a71e:	2301      	moveq	r3, #1
 800a720:	2300      	movne	r3, #0
 800a722:	b2db      	uxtb	r3, r3
 800a724:	461a      	mov	r2, r3
 800a726:	79fb      	ldrb	r3, [r7, #7]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d0b6      	beq.n	800a69a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b084      	sub	sp, #16
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	60f8      	str	r0, [r7, #12]
 800a73e:	60b9      	str	r1, [r7, #8]
 800a740:	607a      	str	r2, [r7, #4]
 800a742:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a744:	e051      	b.n	800a7ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	695b      	ldr	r3, [r3, #20]
 800a74c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a754:	d123      	bne.n	800a79e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a764:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a76e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2220      	movs	r2, #32
 800a77a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78a:	f043 0204 	orr.w	r2, r3, #4
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e046      	b.n	800a82c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7a4:	d021      	beq.n	800a7ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7a6:	f7fc fc73 	bl	8007090 <HAL_GetTick>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d302      	bcc.n	800a7bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d116      	bne.n	800a7ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2220      	movs	r2, #32
 800a7c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d6:	f043 0220 	orr.w	r2, r3, #32
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e020      	b.n	800a82c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	0c1b      	lsrs	r3, r3, #16
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d10c      	bne.n	800a80e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	695b      	ldr	r3, [r3, #20]
 800a7fa:	43da      	mvns	r2, r3
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	4013      	ands	r3, r2
 800a800:	b29b      	uxth	r3, r3
 800a802:	2b00      	cmp	r3, #0
 800a804:	bf14      	ite	ne
 800a806:	2301      	movne	r3, #1
 800a808:	2300      	moveq	r3, #0
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	e00b      	b.n	800a826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	43da      	mvns	r2, r3
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	4013      	ands	r3, r2
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	bf14      	ite	ne
 800a820:	2301      	movne	r3, #1
 800a822:	2300      	moveq	r3, #0
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b00      	cmp	r3, #0
 800a828:	d18d      	bne.n	800a746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a840:	e02d      	b.n	800a89e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f000 f8ce 	bl	800a9e4 <I2C_IsAcknowledgeFailed>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d001      	beq.n	800a852 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e02d      	b.n	800a8ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a858:	d021      	beq.n	800a89e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a85a:	f7fc fc19 	bl	8007090 <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	429a      	cmp	r2, r3
 800a868:	d302      	bcc.n	800a870 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d116      	bne.n	800a89e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2220      	movs	r2, #32
 800a87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88a:	f043 0220 	orr.w	r2, r3, #32
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	e007      	b.n	800a8ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	695b      	ldr	r3, [r3, #20]
 800a8a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8a8:	2b80      	cmp	r3, #128	; 0x80
 800a8aa:	d1ca      	bne.n	800a842 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	60f8      	str	r0, [r7, #12]
 800a8be:	60b9      	str	r1, [r7, #8]
 800a8c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a8c2:	e02d      	b.n	800a920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f000 f88d 	bl	800a9e4 <I2C_IsAcknowledgeFailed>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e02d      	b.n	800a930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8da:	d021      	beq.n	800a920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8dc:	f7fc fbd8 	bl	8007090 <HAL_GetTick>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d302      	bcc.n	800a8f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d116      	bne.n	800a920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2220      	movs	r2, #32
 800a8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90c:	f043 0220 	orr.w	r2, r3, #32
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	e007      	b.n	800a930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	f003 0304 	and.w	r3, r3, #4
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d1ca      	bne.n	800a8c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a944:	e042      	b.n	800a9cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	695b      	ldr	r3, [r3, #20]
 800a94c:	f003 0310 	and.w	r3, r3, #16
 800a950:	2b10      	cmp	r3, #16
 800a952:	d119      	bne.n	800a988 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f06f 0210 	mvn.w	r2, #16
 800a95c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2220      	movs	r2, #32
 800a968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	e029      	b.n	800a9dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a988:	f7fc fb82 	bl	8007090 <HAL_GetTick>
 800a98c:	4602      	mov	r2, r0
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	429a      	cmp	r2, r3
 800a996:	d302      	bcc.n	800a99e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d116      	bne.n	800a9cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2220      	movs	r2, #32
 800a9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b8:	f043 0220 	orr.w	r2, r3, #32
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e007      	b.n	800a9dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	695b      	ldr	r3, [r3, #20]
 800a9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9d6:	2b40      	cmp	r3, #64	; 0x40
 800a9d8:	d1b5      	bne.n	800a946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	695b      	ldr	r3, [r3, #20]
 800a9f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9fa:	d11b      	bne.n	800aa34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aa04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2220      	movs	r2, #32
 800aa10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa20:	f043 0204 	orr.w	r2, r3, #4
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e000      	b.n	800aa36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
	...

0800aa44 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b088      	sub	sp, #32
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	e128      	b.n	800aca8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d109      	bne.n	800aa76 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a90      	ldr	r2, [pc, #576]	; (800acb0 <HAL_I2S_Init+0x26c>)
 800aa6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f7f7 f9e3 	bl	8001e3c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2202      	movs	r2, #2
 800aa7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	69db      	ldr	r3, [r3, #28]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	6812      	ldr	r2, [r2, #0]
 800aa88:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800aa8c:	f023 030f 	bic.w	r3, r3, #15
 800aa90:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2202      	movs	r2, #2
 800aa98:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d060      	beq.n	800ab64 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d102      	bne.n	800aab0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800aaaa:	2310      	movs	r3, #16
 800aaac:	617b      	str	r3, [r7, #20]
 800aaae:	e001      	b.n	800aab4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800aab0:	2320      	movs	r3, #32
 800aab2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	2b20      	cmp	r3, #32
 800aaba:	d802      	bhi.n	800aac2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	005b      	lsls	r3, r3, #1
 800aac0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800aac2:	2001      	movs	r0, #1
 800aac4:	f001 f9a0 	bl	800be08 <HAL_RCCEx_GetPeriphCLKFreq>
 800aac8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aad2:	d125      	bne.n	800ab20 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d010      	beq.n	800aafe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	fbb2 f2f3 	udiv	r2, r2, r3
 800aae6:	4613      	mov	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	005b      	lsls	r3, r3, #1
 800aaee:	461a      	mov	r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	695b      	ldr	r3, [r3, #20]
 800aaf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaf8:	3305      	adds	r3, #5
 800aafa:	613b      	str	r3, [r7, #16]
 800aafc:	e01f      	b.n	800ab3e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	00db      	lsls	r3, r3, #3
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	fbb2 f2f3 	udiv	r2, r2, r3
 800ab08:	4613      	mov	r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4413      	add	r3, r2
 800ab0e:	005b      	lsls	r3, r3, #1
 800ab10:	461a      	mov	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	695b      	ldr	r3, [r3, #20]
 800ab16:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab1a:	3305      	adds	r3, #5
 800ab1c:	613b      	str	r3, [r7, #16]
 800ab1e:	e00e      	b.n	800ab3e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	fbb2 f2f3 	udiv	r2, r2, r3
 800ab28:	4613      	mov	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4413      	add	r3, r2
 800ab2e:	005b      	lsls	r3, r3, #1
 800ab30:	461a      	mov	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab3a:	3305      	adds	r3, #5
 800ab3c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	4a5c      	ldr	r2, [pc, #368]	; (800acb4 <HAL_I2S_Init+0x270>)
 800ab42:	fba2 2303 	umull	r2, r3, r2, r3
 800ab46:	08db      	lsrs	r3, r3, #3
 800ab48:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	f003 0301 	and.w	r3, r3, #1
 800ab50:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800ab52:	693a      	ldr	r2, [r7, #16]
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	085b      	lsrs	r3, r3, #1
 800ab5a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	021b      	lsls	r3, r3, #8
 800ab60:	61bb      	str	r3, [r7, #24]
 800ab62:	e003      	b.n	800ab6c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800ab64:	2302      	movs	r3, #2
 800ab66:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d902      	bls.n	800ab78 <HAL_I2S_Init+0x134>
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	2bff      	cmp	r3, #255	; 0xff
 800ab76:	d907      	bls.n	800ab88 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab7c:	f043 0210 	orr.w	r2, r3, #16
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	e08f      	b.n	800aca8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	691a      	ldr	r2, [r3, #16]
 800ab8c:	69bb      	ldr	r3, [r7, #24]
 800ab8e:	ea42 0103 	orr.w	r1, r2, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	69fa      	ldr	r2, [r7, #28]
 800ab98:	430a      	orrs	r2, r1
 800ab9a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	69db      	ldr	r3, [r3, #28]
 800aba2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800aba6:	f023 030f 	bic.w	r3, r3, #15
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	6851      	ldr	r1, [r2, #4]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	6892      	ldr	r2, [r2, #8]
 800abb2:	4311      	orrs	r1, r2
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	68d2      	ldr	r2, [r2, #12]
 800abb8:	4311      	orrs	r1, r2
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	6992      	ldr	r2, [r2, #24]
 800abbe:	430a      	orrs	r2, r1
 800abc0:	431a      	orrs	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6a1b      	ldr	r3, [r3, #32]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d161      	bne.n	800ac98 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a38      	ldr	r2, [pc, #224]	; (800acb8 <HAL_I2S_Init+0x274>)
 800abd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a37      	ldr	r2, [pc, #220]	; (800acbc <HAL_I2S_Init+0x278>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d101      	bne.n	800abe8 <HAL_I2S_Init+0x1a4>
 800abe4:	4b36      	ldr	r3, [pc, #216]	; (800acc0 <HAL_I2S_Init+0x27c>)
 800abe6:	e001      	b.n	800abec <HAL_I2S_Init+0x1a8>
 800abe8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800abec:	69db      	ldr	r3, [r3, #28]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	6812      	ldr	r2, [r2, #0]
 800abf2:	4932      	ldr	r1, [pc, #200]	; (800acbc <HAL_I2S_Init+0x278>)
 800abf4:	428a      	cmp	r2, r1
 800abf6:	d101      	bne.n	800abfc <HAL_I2S_Init+0x1b8>
 800abf8:	4a31      	ldr	r2, [pc, #196]	; (800acc0 <HAL_I2S_Init+0x27c>)
 800abfa:	e001      	b.n	800ac00 <HAL_I2S_Init+0x1bc>
 800abfc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800ac00:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800ac04:	f023 030f 	bic.w	r3, r3, #15
 800ac08:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a2b      	ldr	r2, [pc, #172]	; (800acbc <HAL_I2S_Init+0x278>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d101      	bne.n	800ac18 <HAL_I2S_Init+0x1d4>
 800ac14:	4b2a      	ldr	r3, [pc, #168]	; (800acc0 <HAL_I2S_Init+0x27c>)
 800ac16:	e001      	b.n	800ac1c <HAL_I2S_Init+0x1d8>
 800ac18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ac1c:	2202      	movs	r2, #2
 800ac1e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a25      	ldr	r2, [pc, #148]	; (800acbc <HAL_I2S_Init+0x278>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d101      	bne.n	800ac2e <HAL_I2S_Init+0x1ea>
 800ac2a:	4b25      	ldr	r3, [pc, #148]	; (800acc0 <HAL_I2S_Init+0x27c>)
 800ac2c:	e001      	b.n	800ac32 <HAL_I2S_Init+0x1ee>
 800ac2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ac32:	69db      	ldr	r3, [r3, #28]
 800ac34:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac3e:	d003      	beq.n	800ac48 <HAL_I2S_Init+0x204>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d103      	bne.n	800ac50 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800ac48:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac4c:	613b      	str	r3, [r7, #16]
 800ac4e:	e001      	b.n	800ac54 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800ac50:	2300      	movs	r3, #0
 800ac52:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800ac72:	4313      	orrs	r3, r2
 800ac74:	b29a      	uxth	r2, r3
 800ac76:	897b      	ldrh	r3, [r7, #10]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ac80:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a0d      	ldr	r2, [pc, #52]	; (800acbc <HAL_I2S_Init+0x278>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d101      	bne.n	800ac90 <HAL_I2S_Init+0x24c>
 800ac8c:	4b0c      	ldr	r3, [pc, #48]	; (800acc0 <HAL_I2S_Init+0x27c>)
 800ac8e:	e001      	b.n	800ac94 <HAL_I2S_Init+0x250>
 800ac90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ac94:	897a      	ldrh	r2, [r7, #10]
 800ac96:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3720      	adds	r7, #32
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	0800adbb 	.word	0x0800adbb
 800acb4:	cccccccd 	.word	0xcccccccd
 800acb8:	0800aed1 	.word	0x0800aed1
 800acbc:	40003800 	.word	0x40003800
 800acc0:	40003400 	.word	0x40003400

0800acc4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800ace0:	bf00      	nop
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0c:	881a      	ldrh	r2, [r3, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad18:	1c9a      	adds	r2, r3, #2
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	3b01      	subs	r3, #1
 800ad26:	b29a      	uxth	r2, r3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10e      	bne.n	800ad54 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	685a      	ldr	r2, [r3, #4]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ad44:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7ff ffb8 	bl	800acc4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800ad54:	bf00      	nop
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	68da      	ldr	r2, [r3, #12]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6e:	b292      	uxth	r2, r2
 800ad70:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad76:	1c9a      	adds	r2, r3, #2
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	3b01      	subs	r3, #1
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10e      	bne.n	800adb2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	685a      	ldr	r2, [r3, #4]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ada2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7ff ff93 	bl	800acd8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800adb2:	bf00      	nop
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b086      	sub	sp, #24
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b04      	cmp	r3, #4
 800add4:	d13a      	bne.n	800ae4c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	f003 0301 	and.w	r3, r3, #1
 800addc:	2b01      	cmp	r3, #1
 800adde:	d109      	bne.n	800adf4 <I2S_IRQHandler+0x3a>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adea:	2b40      	cmp	r3, #64	; 0x40
 800adec:	d102      	bne.n	800adf4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7ff ffb4 	bl	800ad5c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adfa:	2b40      	cmp	r3, #64	; 0x40
 800adfc:	d126      	bne.n	800ae4c <I2S_IRQHandler+0x92>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	f003 0320 	and.w	r3, r3, #32
 800ae08:	2b20      	cmp	r3, #32
 800ae0a:	d11f      	bne.n	800ae4c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	685a      	ldr	r2, [r3, #4]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ae1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	613b      	str	r3, [r7, #16]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	68db      	ldr	r3, [r3, #12]
 800ae26:	613b      	str	r3, [r7, #16]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	613b      	str	r3, [r7, #16]
 800ae30:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2201      	movs	r2, #1
 800ae36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae3e:	f043 0202 	orr.w	r2, r3, #2
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7ff ff50 	bl	800acec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	2b03      	cmp	r3, #3
 800ae56:	d136      	bne.n	800aec6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	f003 0302 	and.w	r3, r3, #2
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d109      	bne.n	800ae76 <I2S_IRQHandler+0xbc>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae6c:	2b80      	cmp	r3, #128	; 0x80
 800ae6e:	d102      	bne.n	800ae76 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f7ff ff45 	bl	800ad00 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	f003 0308 	and.w	r3, r3, #8
 800ae7c:	2b08      	cmp	r3, #8
 800ae7e:	d122      	bne.n	800aec6 <I2S_IRQHandler+0x10c>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	f003 0320 	and.w	r3, r3, #32
 800ae8a:	2b20      	cmp	r3, #32
 800ae8c:	d11b      	bne.n	800aec6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	685a      	ldr	r2, [r3, #4]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ae9c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800ae9e:	2300      	movs	r3, #0
 800aea0:	60fb      	str	r3, [r7, #12]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	60fb      	str	r3, [r7, #12]
 800aeaa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeb8:	f043 0204 	orr.w	r2, r3, #4
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7ff ff13 	bl	800acec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800aec6:	bf00      	nop
 800aec8:	3718      	adds	r7, #24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
	...

0800aed0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b088      	sub	sp, #32
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4aa2      	ldr	r2, [pc, #648]	; (800b170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d101      	bne.n	800aeee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800aeea:	4ba2      	ldr	r3, [pc, #648]	; (800b174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800aeec:	e001      	b.n	800aef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800aeee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a9b      	ldr	r2, [pc, #620]	; (800b170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d101      	bne.n	800af0c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800af08:	4b9a      	ldr	r3, [pc, #616]	; (800b174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800af0a:	e001      	b.n	800af10 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800af0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af1c:	d004      	beq.n	800af28 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	f040 8099 	bne.w	800b05a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	f003 0302 	and.w	r3, r3, #2
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d107      	bne.n	800af42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d002      	beq.n	800af42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 f925 	bl	800b18c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	f003 0301 	and.w	r3, r3, #1
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d107      	bne.n	800af5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af52:	2b00      	cmp	r3, #0
 800af54:	d002      	beq.n	800af5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f9c8 	bl	800b2ec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af62:	2b40      	cmp	r3, #64	; 0x40
 800af64:	d13a      	bne.n	800afdc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	f003 0320 	and.w	r3, r3, #32
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d035      	beq.n	800afdc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a7e      	ldr	r2, [pc, #504]	; (800b170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d101      	bne.n	800af7e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800af7a:	4b7e      	ldr	r3, [pc, #504]	; (800b174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800af7c:	e001      	b.n	800af82 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800af7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800af82:	685a      	ldr	r2, [r3, #4]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4979      	ldr	r1, [pc, #484]	; (800b170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800af8a:	428b      	cmp	r3, r1
 800af8c:	d101      	bne.n	800af92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800af8e:	4b79      	ldr	r3, [pc, #484]	; (800b174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800af90:	e001      	b.n	800af96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800af92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800af96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800af9a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	685a      	ldr	r2, [r3, #4]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800afaa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800afac:	2300      	movs	r3, #0
 800afae:	60fb      	str	r3, [r7, #12]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	60fb      	str	r3, [r7, #12]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	60fb      	str	r3, [r7, #12]
 800afc0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afce:	f043 0202 	orr.w	r2, r3, #2
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7ff fe88 	bl	800acec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	f003 0308 	and.w	r3, r3, #8
 800afe2:	2b08      	cmp	r3, #8
 800afe4:	f040 80be 	bne.w	800b164 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	f003 0320 	and.w	r3, r3, #32
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f000 80b8 	beq.w	800b164 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	685a      	ldr	r2, [r3, #4]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b002:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a59      	ldr	r2, [pc, #356]	; (800b170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d101      	bne.n	800b012 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800b00e:	4b59      	ldr	r3, [pc, #356]	; (800b174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b010:	e001      	b.n	800b016 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800b012:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b016:	685a      	ldr	r2, [r3, #4]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4954      	ldr	r1, [pc, #336]	; (800b170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b01e:	428b      	cmp	r3, r1
 800b020:	d101      	bne.n	800b026 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800b022:	4b54      	ldr	r3, [pc, #336]	; (800b174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b024:	e001      	b.n	800b02a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800b026:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b02a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b02e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800b030:	2300      	movs	r3, #0
 800b032:	60bb      	str	r3, [r7, #8]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	60bb      	str	r3, [r7, #8]
 800b03c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b04a:	f043 0204 	orr.w	r2, r3, #4
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f7ff fe4a 	bl	800acec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b058:	e084      	b.n	800b164 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	f003 0302 	and.w	r3, r3, #2
 800b060:	2b02      	cmp	r3, #2
 800b062:	d107      	bne.n	800b074 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d002      	beq.n	800b074 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 f8be 	bl	800b1f0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	f003 0301 	and.w	r3, r3, #1
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d107      	bne.n	800b08e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 f8fd 	bl	800b288 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b094:	2b40      	cmp	r3, #64	; 0x40
 800b096:	d12f      	bne.n	800b0f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	f003 0320 	and.w	r3, r3, #32
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d02a      	beq.n	800b0f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	685a      	ldr	r2, [r3, #4]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b0b0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a2e      	ldr	r2, [pc, #184]	; (800b170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d101      	bne.n	800b0c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800b0bc:	4b2d      	ldr	r3, [pc, #180]	; (800b174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b0be:	e001      	b.n	800b0c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800b0c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b0c4:	685a      	ldr	r2, [r3, #4]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4929      	ldr	r1, [pc, #164]	; (800b170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b0cc:	428b      	cmp	r3, r1
 800b0ce:	d101      	bne.n	800b0d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800b0d0:	4b28      	ldr	r3, [pc, #160]	; (800b174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b0d2:	e001      	b.n	800b0d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800b0d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b0d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b0dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ea:	f043 0202 	orr.w	r2, r3, #2
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7ff fdfa 	bl	800acec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	f003 0308 	and.w	r3, r3, #8
 800b0fe:	2b08      	cmp	r3, #8
 800b100:	d131      	bne.n	800b166 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	f003 0320 	and.w	r3, r3, #32
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d02c      	beq.n	800b166 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a17      	ldr	r2, [pc, #92]	; (800b170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d101      	bne.n	800b11a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800b116:	4b17      	ldr	r3, [pc, #92]	; (800b174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b118:	e001      	b.n	800b11e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800b11a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b11e:	685a      	ldr	r2, [r3, #4]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4912      	ldr	r1, [pc, #72]	; (800b170 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800b126:	428b      	cmp	r3, r1
 800b128:	d101      	bne.n	800b12e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800b12a:	4b12      	ldr	r3, [pc, #72]	; (800b174 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800b12c:	e001      	b.n	800b132 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800b12e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b132:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b136:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	685a      	ldr	r2, [r3, #4]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b146:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b154:	f043 0204 	orr.w	r2, r3, #4
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f7ff fdc5 	bl	800acec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b162:	e000      	b.n	800b166 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800b164:	bf00      	nop
}
 800b166:	bf00      	nop
 800b168:	3720      	adds	r7, #32
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	40003800 	.word	0x40003800
 800b174:	40003400 	.word	0x40003400

0800b178 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b198:	1c99      	adds	r1, r3, #2
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	6251      	str	r1, [r2, #36]	; 0x24
 800b19e:	881a      	ldrh	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d113      	bne.n	800b1e6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	685a      	ldr	r2, [r3, #4]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b1cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d106      	bne.n	800b1e6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7ff ffc9 	bl	800b178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b1e6:	bf00      	nop
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
	...

0800b1f0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fc:	1c99      	adds	r1, r3, #2
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	6251      	str	r1, [r2, #36]	; 0x24
 800b202:	8819      	ldrh	r1, [r3, #0]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a1d      	ldr	r2, [pc, #116]	; (800b280 <I2SEx_TxISR_I2SExt+0x90>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d101      	bne.n	800b212 <I2SEx_TxISR_I2SExt+0x22>
 800b20e:	4b1d      	ldr	r3, [pc, #116]	; (800b284 <I2SEx_TxISR_I2SExt+0x94>)
 800b210:	e001      	b.n	800b216 <I2SEx_TxISR_I2SExt+0x26>
 800b212:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b216:	460a      	mov	r2, r1
 800b218:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b21e:	b29b      	uxth	r3, r3
 800b220:	3b01      	subs	r3, #1
 800b222:	b29a      	uxth	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d121      	bne.n	800b276 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a12      	ldr	r2, [pc, #72]	; (800b280 <I2SEx_TxISR_I2SExt+0x90>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d101      	bne.n	800b240 <I2SEx_TxISR_I2SExt+0x50>
 800b23c:	4b11      	ldr	r3, [pc, #68]	; (800b284 <I2SEx_TxISR_I2SExt+0x94>)
 800b23e:	e001      	b.n	800b244 <I2SEx_TxISR_I2SExt+0x54>
 800b240:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b244:	685a      	ldr	r2, [r3, #4]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	490d      	ldr	r1, [pc, #52]	; (800b280 <I2SEx_TxISR_I2SExt+0x90>)
 800b24c:	428b      	cmp	r3, r1
 800b24e:	d101      	bne.n	800b254 <I2SEx_TxISR_I2SExt+0x64>
 800b250:	4b0c      	ldr	r3, [pc, #48]	; (800b284 <I2SEx_TxISR_I2SExt+0x94>)
 800b252:	e001      	b.n	800b258 <I2SEx_TxISR_I2SExt+0x68>
 800b254:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b258:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b25c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b262:	b29b      	uxth	r3, r3
 800b264:	2b00      	cmp	r3, #0
 800b266:	d106      	bne.n	800b276 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7ff ff81 	bl	800b178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b276:	bf00      	nop
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	40003800 	.word	0x40003800
 800b284:	40003400 	.word	0x40003400

0800b288 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68d8      	ldr	r0, [r3, #12]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29a:	1c99      	adds	r1, r3, #2
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	62d1      	str	r1, [r2, #44]	; 0x2c
 800b2a0:	b282      	uxth	r2, r0
 800b2a2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	b29a      	uxth	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d113      	bne.n	800b2e4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	685a      	ldr	r2, [r3, #4]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b2ca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d106      	bne.n	800b2e4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f7ff ff4a 	bl	800b178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b2e4:	bf00      	nop
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a20      	ldr	r2, [pc, #128]	; (800b37c <I2SEx_RxISR_I2SExt+0x90>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d101      	bne.n	800b302 <I2SEx_RxISR_I2SExt+0x16>
 800b2fe:	4b20      	ldr	r3, [pc, #128]	; (800b380 <I2SEx_RxISR_I2SExt+0x94>)
 800b300:	e001      	b.n	800b306 <I2SEx_RxISR_I2SExt+0x1a>
 800b302:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b306:	68d8      	ldr	r0, [r3, #12]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30c:	1c99      	adds	r1, r3, #2
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	62d1      	str	r1, [r2, #44]	; 0x2c
 800b312:	b282      	uxth	r2, r0
 800b314:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	3b01      	subs	r3, #1
 800b31e:	b29a      	uxth	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b328:	b29b      	uxth	r3, r3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d121      	bne.n	800b372 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a12      	ldr	r2, [pc, #72]	; (800b37c <I2SEx_RxISR_I2SExt+0x90>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d101      	bne.n	800b33c <I2SEx_RxISR_I2SExt+0x50>
 800b338:	4b11      	ldr	r3, [pc, #68]	; (800b380 <I2SEx_RxISR_I2SExt+0x94>)
 800b33a:	e001      	b.n	800b340 <I2SEx_RxISR_I2SExt+0x54>
 800b33c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b340:	685a      	ldr	r2, [r3, #4]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	490d      	ldr	r1, [pc, #52]	; (800b37c <I2SEx_RxISR_I2SExt+0x90>)
 800b348:	428b      	cmp	r3, r1
 800b34a:	d101      	bne.n	800b350 <I2SEx_RxISR_I2SExt+0x64>
 800b34c:	4b0c      	ldr	r3, [pc, #48]	; (800b380 <I2SEx_RxISR_I2SExt+0x94>)
 800b34e:	e001      	b.n	800b354 <I2SEx_RxISR_I2SExt+0x68>
 800b350:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800b354:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b358:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b35e:	b29b      	uxth	r3, r3
 800b360:	2b00      	cmp	r3, #0
 800b362:	d106      	bne.n	800b372 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7ff ff03 	bl	800b178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b372:	bf00      	nop
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	40003800 	.word	0x40003800
 800b380:	40003400 	.word	0x40003400

0800b384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b086      	sub	sp, #24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d101      	bne.n	800b396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	e264      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f003 0301 	and.w	r3, r3, #1
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d075      	beq.n	800b48e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b3a2:	4ba3      	ldr	r3, [pc, #652]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	f003 030c 	and.w	r3, r3, #12
 800b3aa:	2b04      	cmp	r3, #4
 800b3ac:	d00c      	beq.n	800b3c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b3ae:	4ba0      	ldr	r3, [pc, #640]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b3b6:	2b08      	cmp	r3, #8
 800b3b8:	d112      	bne.n	800b3e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b3ba:	4b9d      	ldr	r3, [pc, #628]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3c6:	d10b      	bne.n	800b3e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3c8:	4b99      	ldr	r3, [pc, #612]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d05b      	beq.n	800b48c <HAL_RCC_OscConfig+0x108>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d157      	bne.n	800b48c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e23f      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3e8:	d106      	bne.n	800b3f8 <HAL_RCC_OscConfig+0x74>
 800b3ea:	4b91      	ldr	r3, [pc, #580]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a90      	ldr	r2, [pc, #576]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b3f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3f4:	6013      	str	r3, [r2, #0]
 800b3f6:	e01d      	b.n	800b434 <HAL_RCC_OscConfig+0xb0>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b400:	d10c      	bne.n	800b41c <HAL_RCC_OscConfig+0x98>
 800b402:	4b8b      	ldr	r3, [pc, #556]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a8a      	ldr	r2, [pc, #552]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b40c:	6013      	str	r3, [r2, #0]
 800b40e:	4b88      	ldr	r3, [pc, #544]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a87      	ldr	r2, [pc, #540]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b418:	6013      	str	r3, [r2, #0]
 800b41a:	e00b      	b.n	800b434 <HAL_RCC_OscConfig+0xb0>
 800b41c:	4b84      	ldr	r3, [pc, #528]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a83      	ldr	r2, [pc, #524]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b426:	6013      	str	r3, [r2, #0]
 800b428:	4b81      	ldr	r3, [pc, #516]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a80      	ldr	r2, [pc, #512]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b42e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d013      	beq.n	800b464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b43c:	f7fb fe28 	bl	8007090 <HAL_GetTick>
 800b440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b442:	e008      	b.n	800b456 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b444:	f7fb fe24 	bl	8007090 <HAL_GetTick>
 800b448:	4602      	mov	r2, r0
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	1ad3      	subs	r3, r2, r3
 800b44e:	2b64      	cmp	r3, #100	; 0x64
 800b450:	d901      	bls.n	800b456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b452:	2303      	movs	r3, #3
 800b454:	e204      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b456:	4b76      	ldr	r3, [pc, #472]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d0f0      	beq.n	800b444 <HAL_RCC_OscConfig+0xc0>
 800b462:	e014      	b.n	800b48e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b464:	f7fb fe14 	bl	8007090 <HAL_GetTick>
 800b468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b46a:	e008      	b.n	800b47e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b46c:	f7fb fe10 	bl	8007090 <HAL_GetTick>
 800b470:	4602      	mov	r2, r0
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	1ad3      	subs	r3, r2, r3
 800b476:	2b64      	cmp	r3, #100	; 0x64
 800b478:	d901      	bls.n	800b47e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b47a:	2303      	movs	r3, #3
 800b47c:	e1f0      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b47e:	4b6c      	ldr	r3, [pc, #432]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1f0      	bne.n	800b46c <HAL_RCC_OscConfig+0xe8>
 800b48a:	e000      	b.n	800b48e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b48c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f003 0302 	and.w	r3, r3, #2
 800b496:	2b00      	cmp	r3, #0
 800b498:	d063      	beq.n	800b562 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b49a:	4b65      	ldr	r3, [pc, #404]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	f003 030c 	and.w	r3, r3, #12
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d00b      	beq.n	800b4be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b4a6:	4b62      	ldr	r3, [pc, #392]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b4ae:	2b08      	cmp	r3, #8
 800b4b0:	d11c      	bne.n	800b4ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b4b2:	4b5f      	ldr	r3, [pc, #380]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d116      	bne.n	800b4ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b4be:	4b5c      	ldr	r3, [pc, #368]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f003 0302 	and.w	r3, r3, #2
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d005      	beq.n	800b4d6 <HAL_RCC_OscConfig+0x152>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d001      	beq.n	800b4d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e1c4      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4d6:	4b56      	ldr	r3, [pc, #344]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	00db      	lsls	r3, r3, #3
 800b4e4:	4952      	ldr	r1, [pc, #328]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b4ea:	e03a      	b.n	800b562 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d020      	beq.n	800b536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b4f4:	4b4f      	ldr	r3, [pc, #316]	; (800b634 <HAL_RCC_OscConfig+0x2b0>)
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4fa:	f7fb fdc9 	bl	8007090 <HAL_GetTick>
 800b4fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b500:	e008      	b.n	800b514 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b502:	f7fb fdc5 	bl	8007090 <HAL_GetTick>
 800b506:	4602      	mov	r2, r0
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	1ad3      	subs	r3, r2, r3
 800b50c:	2b02      	cmp	r3, #2
 800b50e:	d901      	bls.n	800b514 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b510:	2303      	movs	r3, #3
 800b512:	e1a5      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b514:	4b46      	ldr	r3, [pc, #280]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 0302 	and.w	r3, r3, #2
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d0f0      	beq.n	800b502 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b520:	4b43      	ldr	r3, [pc, #268]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	00db      	lsls	r3, r3, #3
 800b52e:	4940      	ldr	r1, [pc, #256]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b530:	4313      	orrs	r3, r2
 800b532:	600b      	str	r3, [r1, #0]
 800b534:	e015      	b.n	800b562 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b536:	4b3f      	ldr	r3, [pc, #252]	; (800b634 <HAL_RCC_OscConfig+0x2b0>)
 800b538:	2200      	movs	r2, #0
 800b53a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b53c:	f7fb fda8 	bl	8007090 <HAL_GetTick>
 800b540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b542:	e008      	b.n	800b556 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b544:	f7fb fda4 	bl	8007090 <HAL_GetTick>
 800b548:	4602      	mov	r2, r0
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d901      	bls.n	800b556 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b552:	2303      	movs	r3, #3
 800b554:	e184      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b556:	4b36      	ldr	r3, [pc, #216]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 0302 	and.w	r3, r3, #2
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1f0      	bne.n	800b544 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 0308 	and.w	r3, r3, #8
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d030      	beq.n	800b5d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	695b      	ldr	r3, [r3, #20]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d016      	beq.n	800b5a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b576:	4b30      	ldr	r3, [pc, #192]	; (800b638 <HAL_RCC_OscConfig+0x2b4>)
 800b578:	2201      	movs	r2, #1
 800b57a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b57c:	f7fb fd88 	bl	8007090 <HAL_GetTick>
 800b580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b582:	e008      	b.n	800b596 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b584:	f7fb fd84 	bl	8007090 <HAL_GetTick>
 800b588:	4602      	mov	r2, r0
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	1ad3      	subs	r3, r2, r3
 800b58e:	2b02      	cmp	r3, #2
 800b590:	d901      	bls.n	800b596 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b592:	2303      	movs	r3, #3
 800b594:	e164      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b596:	4b26      	ldr	r3, [pc, #152]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b59a:	f003 0302 	and.w	r3, r3, #2
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d0f0      	beq.n	800b584 <HAL_RCC_OscConfig+0x200>
 800b5a2:	e015      	b.n	800b5d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b5a4:	4b24      	ldr	r3, [pc, #144]	; (800b638 <HAL_RCC_OscConfig+0x2b4>)
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b5aa:	f7fb fd71 	bl	8007090 <HAL_GetTick>
 800b5ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b5b0:	e008      	b.n	800b5c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b5b2:	f7fb fd6d 	bl	8007090 <HAL_GetTick>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	2b02      	cmp	r3, #2
 800b5be:	d901      	bls.n	800b5c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b5c0:	2303      	movs	r3, #3
 800b5c2:	e14d      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b5c4:	4b1a      	ldr	r3, [pc, #104]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b5c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5c8:	f003 0302 	and.w	r3, r3, #2
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d1f0      	bne.n	800b5b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f003 0304 	and.w	r3, r3, #4
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f000 80a0 	beq.w	800b71e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b5e2:	4b13      	ldr	r3, [pc, #76]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d10f      	bne.n	800b60e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	60bb      	str	r3, [r7, #8]
 800b5f2:	4b0f      	ldr	r3, [pc, #60]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f6:	4a0e      	ldr	r2, [pc, #56]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b5f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5fc:	6413      	str	r3, [r2, #64]	; 0x40
 800b5fe:	4b0c      	ldr	r3, [pc, #48]	; (800b630 <HAL_RCC_OscConfig+0x2ac>)
 800b600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b606:	60bb      	str	r3, [r7, #8]
 800b608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b60a:	2301      	movs	r3, #1
 800b60c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b60e:	4b0b      	ldr	r3, [pc, #44]	; (800b63c <HAL_RCC_OscConfig+0x2b8>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b616:	2b00      	cmp	r3, #0
 800b618:	d121      	bne.n	800b65e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b61a:	4b08      	ldr	r3, [pc, #32]	; (800b63c <HAL_RCC_OscConfig+0x2b8>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a07      	ldr	r2, [pc, #28]	; (800b63c <HAL_RCC_OscConfig+0x2b8>)
 800b620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b626:	f7fb fd33 	bl	8007090 <HAL_GetTick>
 800b62a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b62c:	e011      	b.n	800b652 <HAL_RCC_OscConfig+0x2ce>
 800b62e:	bf00      	nop
 800b630:	40023800 	.word	0x40023800
 800b634:	42470000 	.word	0x42470000
 800b638:	42470e80 	.word	0x42470e80
 800b63c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b640:	f7fb fd26 	bl	8007090 <HAL_GetTick>
 800b644:	4602      	mov	r2, r0
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	1ad3      	subs	r3, r2, r3
 800b64a:	2b02      	cmp	r3, #2
 800b64c:	d901      	bls.n	800b652 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b64e:	2303      	movs	r3, #3
 800b650:	e106      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b652:	4b85      	ldr	r3, [pc, #532]	; (800b868 <HAL_RCC_OscConfig+0x4e4>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d0f0      	beq.n	800b640 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d106      	bne.n	800b674 <HAL_RCC_OscConfig+0x2f0>
 800b666:	4b81      	ldr	r3, [pc, #516]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b66a:	4a80      	ldr	r2, [pc, #512]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b66c:	f043 0301 	orr.w	r3, r3, #1
 800b670:	6713      	str	r3, [r2, #112]	; 0x70
 800b672:	e01c      	b.n	800b6ae <HAL_RCC_OscConfig+0x32a>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	2b05      	cmp	r3, #5
 800b67a:	d10c      	bne.n	800b696 <HAL_RCC_OscConfig+0x312>
 800b67c:	4b7b      	ldr	r3, [pc, #492]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b67e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b680:	4a7a      	ldr	r2, [pc, #488]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b682:	f043 0304 	orr.w	r3, r3, #4
 800b686:	6713      	str	r3, [r2, #112]	; 0x70
 800b688:	4b78      	ldr	r3, [pc, #480]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b68a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b68c:	4a77      	ldr	r2, [pc, #476]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b68e:	f043 0301 	orr.w	r3, r3, #1
 800b692:	6713      	str	r3, [r2, #112]	; 0x70
 800b694:	e00b      	b.n	800b6ae <HAL_RCC_OscConfig+0x32a>
 800b696:	4b75      	ldr	r3, [pc, #468]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b69a:	4a74      	ldr	r2, [pc, #464]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b69c:	f023 0301 	bic.w	r3, r3, #1
 800b6a0:	6713      	str	r3, [r2, #112]	; 0x70
 800b6a2:	4b72      	ldr	r3, [pc, #456]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b6a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6a6:	4a71      	ldr	r2, [pc, #452]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b6a8:	f023 0304 	bic.w	r3, r3, #4
 800b6ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d015      	beq.n	800b6e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6b6:	f7fb fceb 	bl	8007090 <HAL_GetTick>
 800b6ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6bc:	e00a      	b.n	800b6d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b6be:	f7fb fce7 	bl	8007090 <HAL_GetTick>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	1ad3      	subs	r3, r2, r3
 800b6c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d901      	bls.n	800b6d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b6d0:	2303      	movs	r3, #3
 800b6d2:	e0c5      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6d4:	4b65      	ldr	r3, [pc, #404]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b6d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6d8:	f003 0302 	and.w	r3, r3, #2
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d0ee      	beq.n	800b6be <HAL_RCC_OscConfig+0x33a>
 800b6e0:	e014      	b.n	800b70c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b6e2:	f7fb fcd5 	bl	8007090 <HAL_GetTick>
 800b6e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b6e8:	e00a      	b.n	800b700 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b6ea:	f7fb fcd1 	bl	8007090 <HAL_GetTick>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	1ad3      	subs	r3, r2, r3
 800b6f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d901      	bls.n	800b700 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	e0af      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b700:	4b5a      	ldr	r3, [pc, #360]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b704:	f003 0302 	and.w	r3, r3, #2
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1ee      	bne.n	800b6ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d105      	bne.n	800b71e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b712:	4b56      	ldr	r3, [pc, #344]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b716:	4a55      	ldr	r2, [pc, #340]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b71c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	699b      	ldr	r3, [r3, #24]
 800b722:	2b00      	cmp	r3, #0
 800b724:	f000 809b 	beq.w	800b85e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b728:	4b50      	ldr	r3, [pc, #320]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b72a:	689b      	ldr	r3, [r3, #8]
 800b72c:	f003 030c 	and.w	r3, r3, #12
 800b730:	2b08      	cmp	r3, #8
 800b732:	d05c      	beq.n	800b7ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	699b      	ldr	r3, [r3, #24]
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d141      	bne.n	800b7c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b73c:	4b4c      	ldr	r3, [pc, #304]	; (800b870 <HAL_RCC_OscConfig+0x4ec>)
 800b73e:	2200      	movs	r2, #0
 800b740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b742:	f7fb fca5 	bl	8007090 <HAL_GetTick>
 800b746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b748:	e008      	b.n	800b75c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b74a:	f7fb fca1 	bl	8007090 <HAL_GetTick>
 800b74e:	4602      	mov	r2, r0
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	1ad3      	subs	r3, r2, r3
 800b754:	2b02      	cmp	r3, #2
 800b756:	d901      	bls.n	800b75c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b758:	2303      	movs	r3, #3
 800b75a:	e081      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b75c:	4b43      	ldr	r3, [pc, #268]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b764:	2b00      	cmp	r3, #0
 800b766:	d1f0      	bne.n	800b74a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	69da      	ldr	r2, [r3, #28]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6a1b      	ldr	r3, [r3, #32]
 800b770:	431a      	orrs	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b776:	019b      	lsls	r3, r3, #6
 800b778:	431a      	orrs	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b77e:	085b      	lsrs	r3, r3, #1
 800b780:	3b01      	subs	r3, #1
 800b782:	041b      	lsls	r3, r3, #16
 800b784:	431a      	orrs	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78a:	061b      	lsls	r3, r3, #24
 800b78c:	4937      	ldr	r1, [pc, #220]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b78e:	4313      	orrs	r3, r2
 800b790:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b792:	4b37      	ldr	r3, [pc, #220]	; (800b870 <HAL_RCC_OscConfig+0x4ec>)
 800b794:	2201      	movs	r2, #1
 800b796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b798:	f7fb fc7a 	bl	8007090 <HAL_GetTick>
 800b79c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b79e:	e008      	b.n	800b7b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b7a0:	f7fb fc76 	bl	8007090 <HAL_GetTick>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	d901      	bls.n	800b7b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	e056      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7b2:	4b2e      	ldr	r3, [pc, #184]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d0f0      	beq.n	800b7a0 <HAL_RCC_OscConfig+0x41c>
 800b7be:	e04e      	b.n	800b85e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7c0:	4b2b      	ldr	r3, [pc, #172]	; (800b870 <HAL_RCC_OscConfig+0x4ec>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b7c6:	f7fb fc63 	bl	8007090 <HAL_GetTick>
 800b7ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7cc:	e008      	b.n	800b7e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b7ce:	f7fb fc5f 	bl	8007090 <HAL_GetTick>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d901      	bls.n	800b7e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	e03f      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7e0:	4b22      	ldr	r3, [pc, #136]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1f0      	bne.n	800b7ce <HAL_RCC_OscConfig+0x44a>
 800b7ec:	e037      	b.n	800b85e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d101      	bne.n	800b7fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e032      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b7fa:	4b1c      	ldr	r3, [pc, #112]	; (800b86c <HAL_RCC_OscConfig+0x4e8>)
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	2b01      	cmp	r3, #1
 800b806:	d028      	beq.n	800b85a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b812:	429a      	cmp	r2, r3
 800b814:	d121      	bne.n	800b85a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b820:	429a      	cmp	r2, r3
 800b822:	d11a      	bne.n	800b85a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b82a:	4013      	ands	r3, r2
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b830:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b832:	4293      	cmp	r3, r2
 800b834:	d111      	bne.n	800b85a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b840:	085b      	lsrs	r3, r3, #1
 800b842:	3b01      	subs	r3, #1
 800b844:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b846:	429a      	cmp	r2, r3
 800b848:	d107      	bne.n	800b85a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b854:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b856:	429a      	cmp	r2, r3
 800b858:	d001      	beq.n	800b85e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	e000      	b.n	800b860 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b85e:	2300      	movs	r3, #0
}
 800b860:	4618      	mov	r0, r3
 800b862:	3718      	adds	r7, #24
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	40007000 	.word	0x40007000
 800b86c:	40023800 	.word	0x40023800
 800b870:	42470060 	.word	0x42470060

0800b874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d101      	bne.n	800b888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	e0cc      	b.n	800ba22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b888:	4b68      	ldr	r3, [pc, #416]	; (800ba2c <HAL_RCC_ClockConfig+0x1b8>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 0307 	and.w	r3, r3, #7
 800b890:	683a      	ldr	r2, [r7, #0]
 800b892:	429a      	cmp	r2, r3
 800b894:	d90c      	bls.n	800b8b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b896:	4b65      	ldr	r3, [pc, #404]	; (800ba2c <HAL_RCC_ClockConfig+0x1b8>)
 800b898:	683a      	ldr	r2, [r7, #0]
 800b89a:	b2d2      	uxtb	r2, r2
 800b89c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b89e:	4b63      	ldr	r3, [pc, #396]	; (800ba2c <HAL_RCC_ClockConfig+0x1b8>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f003 0307 	and.w	r3, r3, #7
 800b8a6:	683a      	ldr	r2, [r7, #0]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d001      	beq.n	800b8b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e0b8      	b.n	800ba22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f003 0302 	and.w	r3, r3, #2
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d020      	beq.n	800b8fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f003 0304 	and.w	r3, r3, #4
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d005      	beq.n	800b8d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b8c8:	4b59      	ldr	r3, [pc, #356]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	4a58      	ldr	r2, [pc, #352]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800b8ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b8d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f003 0308 	and.w	r3, r3, #8
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d005      	beq.n	800b8ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b8e0:	4b53      	ldr	r3, [pc, #332]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	4a52      	ldr	r2, [pc, #328]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800b8e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b8ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b8ec:	4b50      	ldr	r3, [pc, #320]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	494d      	ldr	r1, [pc, #308]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f003 0301 	and.w	r3, r3, #1
 800b906:	2b00      	cmp	r3, #0
 800b908:	d044      	beq.n	800b994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d107      	bne.n	800b922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b912:	4b47      	ldr	r3, [pc, #284]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d119      	bne.n	800b952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b91e:	2301      	movs	r3, #1
 800b920:	e07f      	b.n	800ba22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	2b02      	cmp	r3, #2
 800b928:	d003      	beq.n	800b932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b92e:	2b03      	cmp	r3, #3
 800b930:	d107      	bne.n	800b942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b932:	4b3f      	ldr	r3, [pc, #252]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d109      	bne.n	800b952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	e06f      	b.n	800ba22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b942:	4b3b      	ldr	r3, [pc, #236]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f003 0302 	and.w	r3, r3, #2
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d101      	bne.n	800b952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e067      	b.n	800ba22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b952:	4b37      	ldr	r3, [pc, #220]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	f023 0203 	bic.w	r2, r3, #3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	4934      	ldr	r1, [pc, #208]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800b960:	4313      	orrs	r3, r2
 800b962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b964:	f7fb fb94 	bl	8007090 <HAL_GetTick>
 800b968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b96a:	e00a      	b.n	800b982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b96c:	f7fb fb90 	bl	8007090 <HAL_GetTick>
 800b970:	4602      	mov	r2, r0
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	f241 3288 	movw	r2, #5000	; 0x1388
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d901      	bls.n	800b982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b97e:	2303      	movs	r3, #3
 800b980:	e04f      	b.n	800ba22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b982:	4b2b      	ldr	r3, [pc, #172]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	f003 020c 	and.w	r2, r3, #12
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	429a      	cmp	r2, r3
 800b992:	d1eb      	bne.n	800b96c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b994:	4b25      	ldr	r3, [pc, #148]	; (800ba2c <HAL_RCC_ClockConfig+0x1b8>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f003 0307 	and.w	r3, r3, #7
 800b99c:	683a      	ldr	r2, [r7, #0]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d20c      	bcs.n	800b9bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9a2:	4b22      	ldr	r3, [pc, #136]	; (800ba2c <HAL_RCC_ClockConfig+0x1b8>)
 800b9a4:	683a      	ldr	r2, [r7, #0]
 800b9a6:	b2d2      	uxtb	r2, r2
 800b9a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9aa:	4b20      	ldr	r3, [pc, #128]	; (800ba2c <HAL_RCC_ClockConfig+0x1b8>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f003 0307 	and.w	r3, r3, #7
 800b9b2:	683a      	ldr	r2, [r7, #0]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d001      	beq.n	800b9bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e032      	b.n	800ba22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f003 0304 	and.w	r3, r3, #4
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d008      	beq.n	800b9da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b9c8:	4b19      	ldr	r3, [pc, #100]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	4916      	ldr	r1, [pc, #88]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f003 0308 	and.w	r3, r3, #8
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d009      	beq.n	800b9fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b9e6:	4b12      	ldr	r3, [pc, #72]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	691b      	ldr	r3, [r3, #16]
 800b9f2:	00db      	lsls	r3, r3, #3
 800b9f4:	490e      	ldr	r1, [pc, #56]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b9fa:	f000 f821 	bl	800ba40 <HAL_RCC_GetSysClockFreq>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	4b0b      	ldr	r3, [pc, #44]	; (800ba30 <HAL_RCC_ClockConfig+0x1bc>)
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	091b      	lsrs	r3, r3, #4
 800ba06:	f003 030f 	and.w	r3, r3, #15
 800ba0a:	490a      	ldr	r1, [pc, #40]	; (800ba34 <HAL_RCC_ClockConfig+0x1c0>)
 800ba0c:	5ccb      	ldrb	r3, [r1, r3]
 800ba0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba12:	4a09      	ldr	r2, [pc, #36]	; (800ba38 <HAL_RCC_ClockConfig+0x1c4>)
 800ba14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ba16:	4b09      	ldr	r3, [pc, #36]	; (800ba3c <HAL_RCC_ClockConfig+0x1c8>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7fb faf4 	bl	8007008 <HAL_InitTick>

  return HAL_OK;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	40023c00 	.word	0x40023c00
 800ba30:	40023800 	.word	0x40023800
 800ba34:	08013a44 	.word	0x08013a44
 800ba38:	20000004 	.word	0x20000004
 800ba3c:	2000026c 	.word	0x2000026c

0800ba40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ba44:	b084      	sub	sp, #16
 800ba46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	607b      	str	r3, [r7, #4]
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	60fb      	str	r3, [r7, #12]
 800ba50:	2300      	movs	r3, #0
 800ba52:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ba54:	2300      	movs	r3, #0
 800ba56:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba58:	4b67      	ldr	r3, [pc, #412]	; (800bbf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	f003 030c 	and.w	r3, r3, #12
 800ba60:	2b08      	cmp	r3, #8
 800ba62:	d00d      	beq.n	800ba80 <HAL_RCC_GetSysClockFreq+0x40>
 800ba64:	2b08      	cmp	r3, #8
 800ba66:	f200 80bd 	bhi.w	800bbe4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d002      	beq.n	800ba74 <HAL_RCC_GetSysClockFreq+0x34>
 800ba6e:	2b04      	cmp	r3, #4
 800ba70:	d003      	beq.n	800ba7a <HAL_RCC_GetSysClockFreq+0x3a>
 800ba72:	e0b7      	b.n	800bbe4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ba74:	4b61      	ldr	r3, [pc, #388]	; (800bbfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ba76:	60bb      	str	r3, [r7, #8]
       break;
 800ba78:	e0b7      	b.n	800bbea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ba7a:	4b61      	ldr	r3, [pc, #388]	; (800bc00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800ba7c:	60bb      	str	r3, [r7, #8]
      break;
 800ba7e:	e0b4      	b.n	800bbea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ba80:	4b5d      	ldr	r3, [pc, #372]	; (800bbf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ba8a:	4b5b      	ldr	r3, [pc, #364]	; (800bbf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d04d      	beq.n	800bb32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ba96:	4b58      	ldr	r3, [pc, #352]	; (800bbf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	099b      	lsrs	r3, r3, #6
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	f04f 0300 	mov.w	r3, #0
 800baa2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800baa6:	f04f 0100 	mov.w	r1, #0
 800baaa:	ea02 0800 	and.w	r8, r2, r0
 800baae:	ea03 0901 	and.w	r9, r3, r1
 800bab2:	4640      	mov	r0, r8
 800bab4:	4649      	mov	r1, r9
 800bab6:	f04f 0200 	mov.w	r2, #0
 800baba:	f04f 0300 	mov.w	r3, #0
 800babe:	014b      	lsls	r3, r1, #5
 800bac0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bac4:	0142      	lsls	r2, r0, #5
 800bac6:	4610      	mov	r0, r2
 800bac8:	4619      	mov	r1, r3
 800baca:	ebb0 0008 	subs.w	r0, r0, r8
 800bace:	eb61 0109 	sbc.w	r1, r1, r9
 800bad2:	f04f 0200 	mov.w	r2, #0
 800bad6:	f04f 0300 	mov.w	r3, #0
 800bada:	018b      	lsls	r3, r1, #6
 800badc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bae0:	0182      	lsls	r2, r0, #6
 800bae2:	1a12      	subs	r2, r2, r0
 800bae4:	eb63 0301 	sbc.w	r3, r3, r1
 800bae8:	f04f 0000 	mov.w	r0, #0
 800baec:	f04f 0100 	mov.w	r1, #0
 800baf0:	00d9      	lsls	r1, r3, #3
 800baf2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800baf6:	00d0      	lsls	r0, r2, #3
 800baf8:	4602      	mov	r2, r0
 800bafa:	460b      	mov	r3, r1
 800bafc:	eb12 0208 	adds.w	r2, r2, r8
 800bb00:	eb43 0309 	adc.w	r3, r3, r9
 800bb04:	f04f 0000 	mov.w	r0, #0
 800bb08:	f04f 0100 	mov.w	r1, #0
 800bb0c:	0259      	lsls	r1, r3, #9
 800bb0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800bb12:	0250      	lsls	r0, r2, #9
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	4610      	mov	r0, r2
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	461a      	mov	r2, r3
 800bb20:	f04f 0300 	mov.w	r3, #0
 800bb24:	f7f5 f888 	bl	8000c38 <__aeabi_uldivmod>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	60fb      	str	r3, [r7, #12]
 800bb30:	e04a      	b.n	800bbc8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb32:	4b31      	ldr	r3, [pc, #196]	; (800bbf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	099b      	lsrs	r3, r3, #6
 800bb38:	461a      	mov	r2, r3
 800bb3a:	f04f 0300 	mov.w	r3, #0
 800bb3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bb42:	f04f 0100 	mov.w	r1, #0
 800bb46:	ea02 0400 	and.w	r4, r2, r0
 800bb4a:	ea03 0501 	and.w	r5, r3, r1
 800bb4e:	4620      	mov	r0, r4
 800bb50:	4629      	mov	r1, r5
 800bb52:	f04f 0200 	mov.w	r2, #0
 800bb56:	f04f 0300 	mov.w	r3, #0
 800bb5a:	014b      	lsls	r3, r1, #5
 800bb5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bb60:	0142      	lsls	r2, r0, #5
 800bb62:	4610      	mov	r0, r2
 800bb64:	4619      	mov	r1, r3
 800bb66:	1b00      	subs	r0, r0, r4
 800bb68:	eb61 0105 	sbc.w	r1, r1, r5
 800bb6c:	f04f 0200 	mov.w	r2, #0
 800bb70:	f04f 0300 	mov.w	r3, #0
 800bb74:	018b      	lsls	r3, r1, #6
 800bb76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bb7a:	0182      	lsls	r2, r0, #6
 800bb7c:	1a12      	subs	r2, r2, r0
 800bb7e:	eb63 0301 	sbc.w	r3, r3, r1
 800bb82:	f04f 0000 	mov.w	r0, #0
 800bb86:	f04f 0100 	mov.w	r1, #0
 800bb8a:	00d9      	lsls	r1, r3, #3
 800bb8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bb90:	00d0      	lsls	r0, r2, #3
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	1912      	adds	r2, r2, r4
 800bb98:	eb45 0303 	adc.w	r3, r5, r3
 800bb9c:	f04f 0000 	mov.w	r0, #0
 800bba0:	f04f 0100 	mov.w	r1, #0
 800bba4:	0299      	lsls	r1, r3, #10
 800bba6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800bbaa:	0290      	lsls	r0, r2, #10
 800bbac:	4602      	mov	r2, r0
 800bbae:	460b      	mov	r3, r1
 800bbb0:	4610      	mov	r0, r2
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	f04f 0300 	mov.w	r3, #0
 800bbbc:	f7f5 f83c 	bl	8000c38 <__aeabi_uldivmod>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bbc8:	4b0b      	ldr	r3, [pc, #44]	; (800bbf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	0c1b      	lsrs	r3, r3, #16
 800bbce:	f003 0303 	and.w	r3, r3, #3
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	005b      	lsls	r3, r3, #1
 800bbd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbe0:	60bb      	str	r3, [r7, #8]
      break;
 800bbe2:	e002      	b.n	800bbea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bbe4:	4b05      	ldr	r3, [pc, #20]	; (800bbfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 800bbe6:	60bb      	str	r3, [r7, #8]
      break;
 800bbe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bbea:	68bb      	ldr	r3, [r7, #8]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bbf6:	bf00      	nop
 800bbf8:	40023800 	.word	0x40023800
 800bbfc:	00f42400 	.word	0x00f42400
 800bc00:	007a1200 	.word	0x007a1200

0800bc04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc04:	b480      	push	{r7}
 800bc06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bc08:	4b03      	ldr	r3, [pc, #12]	; (800bc18 <HAL_RCC_GetHCLKFreq+0x14>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	20000004 	.word	0x20000004

0800bc1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bc20:	f7ff fff0 	bl	800bc04 <HAL_RCC_GetHCLKFreq>
 800bc24:	4602      	mov	r2, r0
 800bc26:	4b05      	ldr	r3, [pc, #20]	; (800bc3c <HAL_RCC_GetPCLK1Freq+0x20>)
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	0a9b      	lsrs	r3, r3, #10
 800bc2c:	f003 0307 	and.w	r3, r3, #7
 800bc30:	4903      	ldr	r1, [pc, #12]	; (800bc40 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bc32:	5ccb      	ldrb	r3, [r1, r3]
 800bc34:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	40023800 	.word	0x40023800
 800bc40:	08013a54 	.word	0x08013a54

0800bc44 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b086      	sub	sp, #24
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800bc50:	2300      	movs	r3, #0
 800bc52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f003 0301 	and.w	r3, r3, #1
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d105      	bne.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d035      	beq.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bc6c:	4b62      	ldr	r3, [pc, #392]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bc72:	f7fb fa0d 	bl	8007090 <HAL_GetTick>
 800bc76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bc78:	e008      	b.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bc7a:	f7fb fa09 	bl	8007090 <HAL_GetTick>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d901      	bls.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bc88:	2303      	movs	r3, #3
 800bc8a:	e0b0      	b.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bc8c:	4b5b      	ldr	r3, [pc, #364]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1f0      	bne.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	019a      	lsls	r2, r3, #6
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	071b      	lsls	r3, r3, #28
 800bca4:	4955      	ldr	r1, [pc, #340]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bca6:	4313      	orrs	r3, r2
 800bca8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bcac:	4b52      	ldr	r3, [pc, #328]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800bcae:	2201      	movs	r2, #1
 800bcb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bcb2:	f7fb f9ed 	bl	8007090 <HAL_GetTick>
 800bcb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bcb8:	e008      	b.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bcba:	f7fb f9e9 	bl	8007090 <HAL_GetTick>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	1ad3      	subs	r3, r2, r3
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	d901      	bls.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bcc8:	2303      	movs	r3, #3
 800bcca:	e090      	b.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bccc:	4b4b      	ldr	r3, [pc, #300]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d0f0      	beq.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f003 0302 	and.w	r3, r3, #2
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 8083 	beq.w	800bdec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bce6:	2300      	movs	r3, #0
 800bce8:	60fb      	str	r3, [r7, #12]
 800bcea:	4b44      	ldr	r3, [pc, #272]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bcec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcee:	4a43      	ldr	r2, [pc, #268]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bcf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcf4:	6413      	str	r3, [r2, #64]	; 0x40
 800bcf6:	4b41      	ldr	r3, [pc, #260]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bcf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcfe:	60fb      	str	r3, [r7, #12]
 800bd00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800bd02:	4b3f      	ldr	r3, [pc, #252]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a3e      	ldr	r2, [pc, #248]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800bd08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bd0e:	f7fb f9bf 	bl	8007090 <HAL_GetTick>
 800bd12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bd14:	e008      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800bd16:	f7fb f9bb 	bl	8007090 <HAL_GetTick>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	2b02      	cmp	r3, #2
 800bd22:	d901      	bls.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800bd24:	2303      	movs	r3, #3
 800bd26:	e062      	b.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bd28:	4b35      	ldr	r3, [pc, #212]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d0f0      	beq.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bd34:	4b31      	ldr	r3, [pc, #196]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bd36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd3c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d02f      	beq.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd4c:	693a      	ldr	r2, [r7, #16]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d028      	beq.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bd52:	4b2a      	ldr	r3, [pc, #168]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bd54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bd5c:	4b29      	ldr	r3, [pc, #164]	; (800be04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800bd5e:	2201      	movs	r2, #1
 800bd60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bd62:	4b28      	ldr	r3, [pc, #160]	; (800be04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800bd64:	2200      	movs	r2, #0
 800bd66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800bd68:	4a24      	ldr	r2, [pc, #144]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bd6e:	4b23      	ldr	r3, [pc, #140]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bd70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd72:	f003 0301 	and.w	r3, r3, #1
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d114      	bne.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800bd7a:	f7fb f989 	bl	8007090 <HAL_GetTick>
 800bd7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd80:	e00a      	b.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bd82:	f7fb f985 	bl	8007090 <HAL_GetTick>
 800bd86:	4602      	mov	r2, r0
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	1ad3      	subs	r3, r2, r3
 800bd8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d901      	bls.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800bd94:	2303      	movs	r3, #3
 800bd96:	e02a      	b.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd98:	4b18      	ldr	r3, [pc, #96]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bd9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd9c:	f003 0302 	and.w	r3, r3, #2
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d0ee      	beq.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdb0:	d10d      	bne.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800bdb2:	4b12      	ldr	r3, [pc, #72]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bdc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdc6:	490d      	ldr	r1, [pc, #52]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	608b      	str	r3, [r1, #8]
 800bdcc:	e005      	b.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x196>
 800bdce:	4b0b      	ldr	r3, [pc, #44]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	4a0a      	ldr	r2, [pc, #40]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bdd4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bdd8:	6093      	str	r3, [r2, #8]
 800bdda:	4b08      	ldr	r3, [pc, #32]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bddc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bde6:	4905      	ldr	r1, [pc, #20]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bde8:	4313      	orrs	r3, r2
 800bdea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3718      	adds	r7, #24
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	42470068 	.word	0x42470068
 800bdfc:	40023800 	.word	0x40023800
 800be00:	40007000 	.word	0x40007000
 800be04:	42470e40 	.word	0x42470e40

0800be08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800be08:	b480      	push	{r7}
 800be0a:	b087      	sub	sp, #28
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800be10:	2300      	movs	r3, #0
 800be12:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800be14:	2300      	movs	r3, #0
 800be16:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800be18:	2300      	movs	r3, #0
 800be1a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800be1c:	2300      	movs	r3, #0
 800be1e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b01      	cmp	r3, #1
 800be24:	d13e      	bne.n	800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800be26:	4b23      	ldr	r3, [pc, #140]	; (800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800be28:	689b      	ldr	r3, [r3, #8]
 800be2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be2e:	60fb      	str	r3, [r7, #12]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d005      	beq.n	800be42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d12f      	bne.n	800be9c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800be3c:	4b1e      	ldr	r3, [pc, #120]	; (800beb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800be3e:	617b      	str	r3, [r7, #20]
          break;
 800be40:	e02f      	b.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800be42:	4b1c      	ldr	r3, [pc, #112]	; (800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be4e:	d108      	bne.n	800be62 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800be50:	4b18      	ldr	r3, [pc, #96]	; (800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be58:	4a18      	ldr	r2, [pc, #96]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800be5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be5e:	613b      	str	r3, [r7, #16]
 800be60:	e007      	b.n	800be72 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800be62:	4b14      	ldr	r3, [pc, #80]	; (800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be6a:	4a15      	ldr	r2, [pc, #84]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800be6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be70:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800be72:	4b10      	ldr	r3, [pc, #64]	; (800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800be74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be78:	099b      	lsrs	r3, r3, #6
 800be7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	fb02 f303 	mul.w	r3, r2, r3
 800be84:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800be86:	4b0b      	ldr	r3, [pc, #44]	; (800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800be88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be8c:	0f1b      	lsrs	r3, r3, #28
 800be8e:	f003 0307 	and.w	r3, r3, #7
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	fbb2 f3f3 	udiv	r3, r2, r3
 800be98:	617b      	str	r3, [r7, #20]
          break;
 800be9a:	e002      	b.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800be9c:	2300      	movs	r3, #0
 800be9e:	617b      	str	r3, [r7, #20]
          break;
 800bea0:	bf00      	nop
        }
      }
      break;
 800bea2:	bf00      	nop
    }
  }
  return frequency;
 800bea4:	697b      	ldr	r3, [r7, #20]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	371c      	adds	r7, #28
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	40023800 	.word	0x40023800
 800beb8:	00bb8000 	.word	0x00bb8000
 800bebc:	007a1200 	.word	0x007a1200
 800bec0:	00f42400 	.word	0x00f42400

0800bec4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d101      	bne.n	800bed6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	e01c      	b.n	800bf10 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	795b      	ldrb	r3, [r3, #5]
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d105      	bne.n	800beec <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f7f6 f830 	bl	8001f4c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2202      	movs	r2, #2
 800bef0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f042 0204 	orr.w	r2, r2, #4
 800bf00:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2201      	movs	r2, #1
 800bf06:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800bf0e:	2300      	movs	r3, #0
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf22:	2300      	movs	r3, #0
 800bf24:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	791b      	ldrb	r3, [r3, #4]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d101      	bne.n	800bf32 <HAL_RNG_GenerateRandomNumber+0x1a>
 800bf2e:	2302      	movs	r3, #2
 800bf30:	e03d      	b.n	800bfae <HAL_RNG_GenerateRandomNumber+0x96>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2201      	movs	r2, #1
 800bf36:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	795b      	ldrb	r3, [r3, #5]
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d12c      	bne.n	800bf9c <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2202      	movs	r2, #2
 800bf46:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bf48:	f7fb f8a2 	bl	8007090 <HAL_GetTick>
 800bf4c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800bf4e:	e011      	b.n	800bf74 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800bf50:	f7fb f89e 	bl	8007090 <HAL_GetTick>
 800bf54:	4602      	mov	r2, r0
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	d90a      	bls.n	800bf74 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2201      	movs	r2, #1
 800bf62:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2202      	movs	r2, #2
 800bf68:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e01c      	b.n	800bfae <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	f003 0301 	and.w	r3, r3, #1
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d1e6      	bne.n	800bf50 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	689a      	ldr	r2, [r3, #8]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	68da      	ldr	r2, [r3, #12]
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	715a      	strb	r2, [r3, #5]
 800bf9a:	e004      	b.n	800bfa6 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2204      	movs	r2, #4
 800bfa0:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	711a      	strb	r2, [r3, #4]

  return status;
 800bfac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b082      	sub	sp, #8
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	330c      	adds	r3, #12
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f7ff ffa7 	bl	800bf18 <HAL_RNG_GenerateRandomNumber>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d102      	bne.n	800bfd6 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	e000      	b.n	800bfd8 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800bfd6:	2300      	movs	r3, #0
  }
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3708      	adds	r7, #8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d101      	bne.n	800bff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	e07b      	b.n	800c0ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d108      	bne.n	800c00c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c002:	d009      	beq.n	800c018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	61da      	str	r2, [r3, #28]
 800c00a:	e005      	b.n	800c018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c024:	b2db      	uxtb	r3, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	d106      	bne.n	800c038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f7f5 ffac 	bl	8001f90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2202      	movs	r2, #2
 800c03c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c04e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c060:	431a      	orrs	r2, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c06a:	431a      	orrs	r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	691b      	ldr	r3, [r3, #16]
 800c070:	f003 0302 	and.w	r3, r3, #2
 800c074:	431a      	orrs	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	695b      	ldr	r3, [r3, #20]
 800c07a:	f003 0301 	and.w	r3, r3, #1
 800c07e:	431a      	orrs	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	699b      	ldr	r3, [r3, #24]
 800c084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c088:	431a      	orrs	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	69db      	ldr	r3, [r3, #28]
 800c08e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c092:	431a      	orrs	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a1b      	ldr	r3, [r3, #32]
 800c098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c09c:	ea42 0103 	orr.w	r1, r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	430a      	orrs	r2, r1
 800c0ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	699b      	ldr	r3, [r3, #24]
 800c0b4:	0c1b      	lsrs	r3, r3, #16
 800c0b6:	f003 0104 	and.w	r1, r3, #4
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0be:	f003 0210 	and.w	r2, r3, #16
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	69da      	ldr	r2, [r3, #28]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c0d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3708      	adds	r7, #8
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b088      	sub	sp, #32
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	60f8      	str	r0, [r7, #12]
 800c0fa:	60b9      	str	r1, [r7, #8]
 800c0fc:	603b      	str	r3, [r7, #0]
 800c0fe:	4613      	mov	r3, r2
 800c100:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c102:	2300      	movs	r3, #0
 800c104:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d101      	bne.n	800c114 <HAL_SPI_Transmit+0x22>
 800c110:	2302      	movs	r3, #2
 800c112:	e126      	b.n	800c362 <HAL_SPI_Transmit+0x270>
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2201      	movs	r2, #1
 800c118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c11c:	f7fa ffb8 	bl	8007090 <HAL_GetTick>
 800c120:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c122:	88fb      	ldrh	r3, [r7, #6]
 800c124:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d002      	beq.n	800c138 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c132:	2302      	movs	r3, #2
 800c134:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c136:	e10b      	b.n	800c350 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d002      	beq.n	800c144 <HAL_SPI_Transmit+0x52>
 800c13e:	88fb      	ldrh	r3, [r7, #6]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d102      	bne.n	800c14a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c144:	2301      	movs	r3, #1
 800c146:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c148:	e102      	b.n	800c350 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2203      	movs	r2, #3
 800c14e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2200      	movs	r2, #0
 800c156:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	68ba      	ldr	r2, [r7, #8]
 800c15c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	88fa      	ldrh	r2, [r7, #6]
 800c162:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	88fa      	ldrh	r2, [r7, #6]
 800c168:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2200      	movs	r2, #0
 800c16e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2200      	movs	r2, #0
 800c174:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2200      	movs	r2, #0
 800c17a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2200      	movs	r2, #0
 800c180:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2200      	movs	r2, #0
 800c186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c190:	d10f      	bne.n	800c1b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1bc:	2b40      	cmp	r3, #64	; 0x40
 800c1be:	d007      	beq.n	800c1d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	68db      	ldr	r3, [r3, #12]
 800c1d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1d8:	d14b      	bne.n	800c272 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d002      	beq.n	800c1e8 <HAL_SPI_Transmit+0xf6>
 800c1e2:	8afb      	ldrh	r3, [r7, #22]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d13e      	bne.n	800c266 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ec:	881a      	ldrh	r2, [r3, #0]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f8:	1c9a      	adds	r2, r3, #2
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c202:	b29b      	uxth	r3, r3
 800c204:	3b01      	subs	r3, #1
 800c206:	b29a      	uxth	r2, r3
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c20c:	e02b      	b.n	800c266 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	f003 0302 	and.w	r3, r3, #2
 800c218:	2b02      	cmp	r3, #2
 800c21a:	d112      	bne.n	800c242 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c220:	881a      	ldrh	r2, [r3, #0]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c22c:	1c9a      	adds	r2, r3, #2
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c236:	b29b      	uxth	r3, r3
 800c238:	3b01      	subs	r3, #1
 800c23a:	b29a      	uxth	r2, r3
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	86da      	strh	r2, [r3, #54]	; 0x36
 800c240:	e011      	b.n	800c266 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c242:	f7fa ff25 	bl	8007090 <HAL_GetTick>
 800c246:	4602      	mov	r2, r0
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	1ad3      	subs	r3, r2, r3
 800c24c:	683a      	ldr	r2, [r7, #0]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d803      	bhi.n	800c25a <HAL_SPI_Transmit+0x168>
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c258:	d102      	bne.n	800c260 <HAL_SPI_Transmit+0x16e>
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d102      	bne.n	800c266 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800c260:	2303      	movs	r3, #3
 800c262:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c264:	e074      	b.n	800c350 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d1ce      	bne.n	800c20e <HAL_SPI_Transmit+0x11c>
 800c270:	e04c      	b.n	800c30c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d002      	beq.n	800c280 <HAL_SPI_Transmit+0x18e>
 800c27a:	8afb      	ldrh	r3, [r7, #22]
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d140      	bne.n	800c302 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	330c      	adds	r3, #12
 800c28a:	7812      	ldrb	r2, [r2, #0]
 800c28c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c292:	1c5a      	adds	r2, r3, #1
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	b29a      	uxth	r2, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c2a6:	e02c      	b.n	800c302 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	f003 0302 	and.w	r3, r3, #2
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	d113      	bne.n	800c2de <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	330c      	adds	r3, #12
 800c2c0:	7812      	ldrb	r2, [r2, #0]
 800c2c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2c8:	1c5a      	adds	r2, r3, #1
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	3b01      	subs	r3, #1
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	86da      	strh	r2, [r3, #54]	; 0x36
 800c2dc:	e011      	b.n	800c302 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2de:	f7fa fed7 	bl	8007090 <HAL_GetTick>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	69bb      	ldr	r3, [r7, #24]
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	683a      	ldr	r2, [r7, #0]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d803      	bhi.n	800c2f6 <HAL_SPI_Transmit+0x204>
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2f4:	d102      	bne.n	800c2fc <HAL_SPI_Transmit+0x20a>
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d102      	bne.n	800c302 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c300:	e026      	b.n	800c350 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c306:	b29b      	uxth	r3, r3
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d1cd      	bne.n	800c2a8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c30c:	69ba      	ldr	r2, [r7, #24]
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f000 f8b3 	bl	800c47c <SPI_EndRxTxTransaction>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2220      	movs	r2, #32
 800c320:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	689b      	ldr	r3, [r3, #8]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10a      	bne.n	800c340 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c32a:	2300      	movs	r3, #0
 800c32c:	613b      	str	r3, [r7, #16]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	613b      	str	r3, [r7, #16]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	613b      	str	r3, [r7, #16]
 800c33e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c344:	2b00      	cmp	r3, #0
 800c346:	d002      	beq.n	800c34e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800c348:	2301      	movs	r3, #1
 800c34a:	77fb      	strb	r3, [r7, #31]
 800c34c:	e000      	b.n	800c350 <HAL_SPI_Transmit+0x25e>
  }

error:
 800c34e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2201      	movs	r2, #1
 800c354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2200      	movs	r2, #0
 800c35c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c360:	7ffb      	ldrb	r3, [r7, #31]
}
 800c362:	4618      	mov	r0, r3
 800c364:	3720      	adds	r7, #32
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
	...

0800c36c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b088      	sub	sp, #32
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	603b      	str	r3, [r7, #0]
 800c378:	4613      	mov	r3, r2
 800c37a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c37c:	f7fa fe88 	bl	8007090 <HAL_GetTick>
 800c380:	4602      	mov	r2, r0
 800c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c384:	1a9b      	subs	r3, r3, r2
 800c386:	683a      	ldr	r2, [r7, #0]
 800c388:	4413      	add	r3, r2
 800c38a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c38c:	f7fa fe80 	bl	8007090 <HAL_GetTick>
 800c390:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c392:	4b39      	ldr	r3, [pc, #228]	; (800c478 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	015b      	lsls	r3, r3, #5
 800c398:	0d1b      	lsrs	r3, r3, #20
 800c39a:	69fa      	ldr	r2, [r7, #28]
 800c39c:	fb02 f303 	mul.w	r3, r2, r3
 800c3a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c3a2:	e054      	b.n	800c44e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3aa:	d050      	beq.n	800c44e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c3ac:	f7fa fe70 	bl	8007090 <HAL_GetTick>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	69fa      	ldr	r2, [r7, #28]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d902      	bls.n	800c3c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d13d      	bne.n	800c43e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	685a      	ldr	r2, [r3, #4]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c3d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3da:	d111      	bne.n	800c400 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3e4:	d004      	beq.n	800c3f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3ee:	d107      	bne.n	800c400 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c3fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c408:	d10f      	bne.n	800c42a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c418:	601a      	str	r2, [r3, #0]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c428:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2201      	movs	r2, #1
 800c42e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2200      	movs	r2, #0
 800c436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c43a:	2303      	movs	r3, #3
 800c43c:	e017      	b.n	800c46e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d101      	bne.n	800c448 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c444:	2300      	movs	r3, #0
 800c446:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	3b01      	subs	r3, #1
 800c44c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	689a      	ldr	r2, [r3, #8]
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	4013      	ands	r3, r2
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	bf0c      	ite	eq
 800c45e:	2301      	moveq	r3, #1
 800c460:	2300      	movne	r3, #0
 800c462:	b2db      	uxtb	r3, r3
 800c464:	461a      	mov	r2, r3
 800c466:	79fb      	ldrb	r3, [r7, #7]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d19b      	bne.n	800c3a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3720      	adds	r7, #32
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	20000004 	.word	0x20000004

0800c47c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b088      	sub	sp, #32
 800c480:	af02      	add	r7, sp, #8
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c488:	4b1b      	ldr	r3, [pc, #108]	; (800c4f8 <SPI_EndRxTxTransaction+0x7c>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a1b      	ldr	r2, [pc, #108]	; (800c4fc <SPI_EndRxTxTransaction+0x80>)
 800c48e:	fba2 2303 	umull	r2, r3, r2, r3
 800c492:	0d5b      	lsrs	r3, r3, #21
 800c494:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c498:	fb02 f303 	mul.w	r3, r2, r3
 800c49c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4a6:	d112      	bne.n	800c4ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	9300      	str	r3, [sp, #0]
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	2180      	movs	r1, #128	; 0x80
 800c4b2:	68f8      	ldr	r0, [r7, #12]
 800c4b4:	f7ff ff5a 	bl	800c36c <SPI_WaitFlagStateUntilTimeout>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d016      	beq.n	800c4ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4c2:	f043 0220 	orr.w	r2, r3, #32
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c4ca:	2303      	movs	r3, #3
 800c4cc:	e00f      	b.n	800c4ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d00a      	beq.n	800c4ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4e4:	2b80      	cmp	r3, #128	; 0x80
 800c4e6:	d0f2      	beq.n	800c4ce <SPI_EndRxTxTransaction+0x52>
 800c4e8:	e000      	b.n	800c4ec <SPI_EndRxTxTransaction+0x70>
        break;
 800c4ea:	bf00      	nop
  }

  return HAL_OK;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3718      	adds	r7, #24
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20000004 	.word	0x20000004
 800c4fc:	165e9f81 	.word	0x165e9f81

0800c500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d101      	bne.n	800c512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c50e:	2301      	movs	r3, #1
 800c510:	e041      	b.n	800c596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d106      	bne.n	800c52c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f7f5 fe18 	bl	800215c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2202      	movs	r2, #2
 800c530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3304      	adds	r3, #4
 800c53c:	4619      	mov	r1, r3
 800c53e:	4610      	mov	r0, r2
 800c540:	f000 fd68 	bl	800d014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2201      	movs	r2, #1
 800c548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2201      	movs	r2, #1
 800c550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2201      	movs	r2, #1
 800c560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2201      	movs	r2, #1
 800c570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2201      	movs	r2, #1
 800c578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	3708      	adds	r7, #8
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
	...

0800c5a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d001      	beq.n	800c5b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	e04e      	b.n	800c656 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2202      	movs	r2, #2
 800c5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	68da      	ldr	r2, [r3, #12]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f042 0201 	orr.w	r2, r2, #1
 800c5ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a23      	ldr	r2, [pc, #140]	; (800c664 <HAL_TIM_Base_Start_IT+0xc4>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d022      	beq.n	800c620 <HAL_TIM_Base_Start_IT+0x80>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5e2:	d01d      	beq.n	800c620 <HAL_TIM_Base_Start_IT+0x80>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a1f      	ldr	r2, [pc, #124]	; (800c668 <HAL_TIM_Base_Start_IT+0xc8>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d018      	beq.n	800c620 <HAL_TIM_Base_Start_IT+0x80>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a1e      	ldr	r2, [pc, #120]	; (800c66c <HAL_TIM_Base_Start_IT+0xcc>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d013      	beq.n	800c620 <HAL_TIM_Base_Start_IT+0x80>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a1c      	ldr	r2, [pc, #112]	; (800c670 <HAL_TIM_Base_Start_IT+0xd0>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d00e      	beq.n	800c620 <HAL_TIM_Base_Start_IT+0x80>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a1b      	ldr	r2, [pc, #108]	; (800c674 <HAL_TIM_Base_Start_IT+0xd4>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d009      	beq.n	800c620 <HAL_TIM_Base_Start_IT+0x80>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a19      	ldr	r2, [pc, #100]	; (800c678 <HAL_TIM_Base_Start_IT+0xd8>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d004      	beq.n	800c620 <HAL_TIM_Base_Start_IT+0x80>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a18      	ldr	r2, [pc, #96]	; (800c67c <HAL_TIM_Base_Start_IT+0xdc>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d111      	bne.n	800c644 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	689b      	ldr	r3, [r3, #8]
 800c626:	f003 0307 	and.w	r3, r3, #7
 800c62a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2b06      	cmp	r3, #6
 800c630:	d010      	beq.n	800c654 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f042 0201 	orr.w	r2, r2, #1
 800c640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c642:	e007      	b.n	800c654 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f042 0201 	orr.w	r2, r2, #1
 800c652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	3714      	adds	r7, #20
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop
 800c664:	40010000 	.word	0x40010000
 800c668:	40000400 	.word	0x40000400
 800c66c:	40000800 	.word	0x40000800
 800c670:	40000c00 	.word	0x40000c00
 800c674:	40010400 	.word	0x40010400
 800c678:	40014000 	.word	0x40014000
 800c67c:	40001800 	.word	0x40001800

0800c680 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d109      	bne.n	800c6a4 <HAL_TIM_OC_Start_IT+0x24>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c696:	b2db      	uxtb	r3, r3
 800c698:	2b01      	cmp	r3, #1
 800c69a:	bf14      	ite	ne
 800c69c:	2301      	movne	r3, #1
 800c69e:	2300      	moveq	r3, #0
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	e022      	b.n	800c6ea <HAL_TIM_OC_Start_IT+0x6a>
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	2b04      	cmp	r3, #4
 800c6a8:	d109      	bne.n	800c6be <HAL_TIM_OC_Start_IT+0x3e>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	bf14      	ite	ne
 800c6b6:	2301      	movne	r3, #1
 800c6b8:	2300      	moveq	r3, #0
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	e015      	b.n	800c6ea <HAL_TIM_OC_Start_IT+0x6a>
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	2b08      	cmp	r3, #8
 800c6c2:	d109      	bne.n	800c6d8 <HAL_TIM_OC_Start_IT+0x58>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	bf14      	ite	ne
 800c6d0:	2301      	movne	r3, #1
 800c6d2:	2300      	moveq	r3, #0
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	e008      	b.n	800c6ea <HAL_TIM_OC_Start_IT+0x6a>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	bf14      	ite	ne
 800c6e4:	2301      	movne	r3, #1
 800c6e6:	2300      	moveq	r3, #0
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d001      	beq.n	800c6f2 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e0c2      	b.n	800c878 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d104      	bne.n	800c702 <HAL_TIM_OC_Start_IT+0x82>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2202      	movs	r2, #2
 800c6fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c700:	e013      	b.n	800c72a <HAL_TIM_OC_Start_IT+0xaa>
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	2b04      	cmp	r3, #4
 800c706:	d104      	bne.n	800c712 <HAL_TIM_OC_Start_IT+0x92>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2202      	movs	r2, #2
 800c70c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c710:	e00b      	b.n	800c72a <HAL_TIM_OC_Start_IT+0xaa>
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	2b08      	cmp	r3, #8
 800c716:	d104      	bne.n	800c722 <HAL_TIM_OC_Start_IT+0xa2>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2202      	movs	r2, #2
 800c71c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c720:	e003      	b.n	800c72a <HAL_TIM_OC_Start_IT+0xaa>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2202      	movs	r2, #2
 800c726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	2b0c      	cmp	r3, #12
 800c72e:	d841      	bhi.n	800c7b4 <HAL_TIM_OC_Start_IT+0x134>
 800c730:	a201      	add	r2, pc, #4	; (adr r2, 800c738 <HAL_TIM_OC_Start_IT+0xb8>)
 800c732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c736:	bf00      	nop
 800c738:	0800c76d 	.word	0x0800c76d
 800c73c:	0800c7b5 	.word	0x0800c7b5
 800c740:	0800c7b5 	.word	0x0800c7b5
 800c744:	0800c7b5 	.word	0x0800c7b5
 800c748:	0800c77f 	.word	0x0800c77f
 800c74c:	0800c7b5 	.word	0x0800c7b5
 800c750:	0800c7b5 	.word	0x0800c7b5
 800c754:	0800c7b5 	.word	0x0800c7b5
 800c758:	0800c791 	.word	0x0800c791
 800c75c:	0800c7b5 	.word	0x0800c7b5
 800c760:	0800c7b5 	.word	0x0800c7b5
 800c764:	0800c7b5 	.word	0x0800c7b5
 800c768:	0800c7a3 	.word	0x0800c7a3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68da      	ldr	r2, [r3, #12]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f042 0202 	orr.w	r2, r2, #2
 800c77a:	60da      	str	r2, [r3, #12]
      break;
 800c77c:	e01b      	b.n	800c7b6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	68da      	ldr	r2, [r3, #12]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f042 0204 	orr.w	r2, r2, #4
 800c78c:	60da      	str	r2, [r3, #12]
      break;
 800c78e:	e012      	b.n	800c7b6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	68da      	ldr	r2, [r3, #12]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f042 0208 	orr.w	r2, r2, #8
 800c79e:	60da      	str	r2, [r3, #12]
      break;
 800c7a0:	e009      	b.n	800c7b6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	68da      	ldr	r2, [r3, #12]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f042 0210 	orr.w	r2, r2, #16
 800c7b0:	60da      	str	r2, [r3, #12]
      break;
 800c7b2:	e000      	b.n	800c7b6 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 800c7b4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	6839      	ldr	r1, [r7, #0]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f000 ff12 	bl	800d5e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a2d      	ldr	r2, [pc, #180]	; (800c880 <HAL_TIM_OC_Start_IT+0x200>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d004      	beq.n	800c7d8 <HAL_TIM_OC_Start_IT+0x158>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4a2c      	ldr	r2, [pc, #176]	; (800c884 <HAL_TIM_OC_Start_IT+0x204>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d101      	bne.n	800c7dc <HAL_TIM_OC_Start_IT+0x15c>
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e000      	b.n	800c7de <HAL_TIM_OC_Start_IT+0x15e>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d007      	beq.n	800c7f2 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c7f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a22      	ldr	r2, [pc, #136]	; (800c880 <HAL_TIM_OC_Start_IT+0x200>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d022      	beq.n	800c842 <HAL_TIM_OC_Start_IT+0x1c2>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c804:	d01d      	beq.n	800c842 <HAL_TIM_OC_Start_IT+0x1c2>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a1f      	ldr	r2, [pc, #124]	; (800c888 <HAL_TIM_OC_Start_IT+0x208>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d018      	beq.n	800c842 <HAL_TIM_OC_Start_IT+0x1c2>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a1d      	ldr	r2, [pc, #116]	; (800c88c <HAL_TIM_OC_Start_IT+0x20c>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d013      	beq.n	800c842 <HAL_TIM_OC_Start_IT+0x1c2>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a1c      	ldr	r2, [pc, #112]	; (800c890 <HAL_TIM_OC_Start_IT+0x210>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d00e      	beq.n	800c842 <HAL_TIM_OC_Start_IT+0x1c2>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a16      	ldr	r2, [pc, #88]	; (800c884 <HAL_TIM_OC_Start_IT+0x204>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d009      	beq.n	800c842 <HAL_TIM_OC_Start_IT+0x1c2>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a18      	ldr	r2, [pc, #96]	; (800c894 <HAL_TIM_OC_Start_IT+0x214>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d004      	beq.n	800c842 <HAL_TIM_OC_Start_IT+0x1c2>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a16      	ldr	r2, [pc, #88]	; (800c898 <HAL_TIM_OC_Start_IT+0x218>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d111      	bne.n	800c866 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	f003 0307 	and.w	r3, r3, #7
 800c84c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2b06      	cmp	r3, #6
 800c852:	d010      	beq.n	800c876 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f042 0201 	orr.w	r2, r2, #1
 800c862:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c864:	e007      	b.n	800c876 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f042 0201 	orr.w	r2, r2, #1
 800c874:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	40010000 	.word	0x40010000
 800c884:	40010400 	.word	0x40010400
 800c888:	40000400 	.word	0x40000400
 800c88c:	40000800 	.word	0x40000800
 800c890:	40000c00 	.word	0x40000c00
 800c894:	40014000 	.word	0x40014000
 800c898:	40001800 	.word	0x40001800

0800c89c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d101      	bne.n	800c8ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e041      	b.n	800c932 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d106      	bne.n	800c8c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f839 	bl	800c93a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2202      	movs	r2, #2
 800c8cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	3304      	adds	r3, #4
 800c8d8:	4619      	mov	r1, r3
 800c8da:	4610      	mov	r0, r2
 800c8dc:	f000 fb9a 	bl	800d014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2201      	movs	r2, #1
 800c904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2201      	movs	r2, #1
 800c90c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2201      	movs	r2, #1
 800c914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2201      	movs	r2, #1
 800c91c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2201      	movs	r2, #1
 800c924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	3708      	adds	r7, #8
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c93a:	b480      	push	{r7}
 800c93c:	b083      	sub	sp, #12
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c942:	bf00      	nop
 800c944:	370c      	adds	r7, #12
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr

0800c94e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b086      	sub	sp, #24
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d101      	bne.n	800c962 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c95e:	2301      	movs	r3, #1
 800c960:	e097      	b.n	800ca92 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d106      	bne.n	800c97c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7f5 fba8 	bl	80020cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2202      	movs	r2, #2
 800c980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	6812      	ldr	r2, [r2, #0]
 800c98e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c992:	f023 0307 	bic.w	r3, r3, #7
 800c996:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	3304      	adds	r3, #4
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	4610      	mov	r0, r2
 800c9a4:	f000 fb36 	bl	800d014 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	699b      	ldr	r3, [r3, #24]
 800c9b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	6a1b      	ldr	r3, [r3, #32]
 800c9be:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	697a      	ldr	r2, [r7, #20]
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9d0:	f023 0303 	bic.w	r3, r3, #3
 800c9d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	689a      	ldr	r2, [r3, #8]
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	699b      	ldr	r3, [r3, #24]
 800c9de:	021b      	lsls	r3, r3, #8
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	693a      	ldr	r2, [r7, #16]
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c9ee:	f023 030c 	bic.w	r3, r3, #12
 800c9f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c9fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c9fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	68da      	ldr	r2, [r3, #12]
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	69db      	ldr	r3, [r3, #28]
 800ca08:	021b      	lsls	r3, r3, #8
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	693a      	ldr	r2, [r7, #16]
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	691b      	ldr	r3, [r3, #16]
 800ca16:	011a      	lsls	r2, r3, #4
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	6a1b      	ldr	r3, [r3, #32]
 800ca1c:	031b      	lsls	r3, r3, #12
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	693a      	ldr	r2, [r7, #16]
 800ca22:	4313      	orrs	r3, r2
 800ca24:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ca2c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ca34:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	685a      	ldr	r2, [r3, #4]
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	695b      	ldr	r3, [r3, #20]
 800ca3e:	011b      	lsls	r3, r3, #4
 800ca40:	4313      	orrs	r3, r2
 800ca42:	68fa      	ldr	r2, [r7, #12]
 800ca44:	4313      	orrs	r3, r2
 800ca46:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	697a      	ldr	r2, [r7, #20]
 800ca4e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	693a      	ldr	r2, [r7, #16]
 800ca56:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2201      	movs	r2, #1
 800ca64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3718      	adds	r7, #24
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b082      	sub	sp, #8
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	f003 0302 	and.w	r3, r3, #2
 800caac:	2b02      	cmp	r3, #2
 800caae:	d122      	bne.n	800caf6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	68db      	ldr	r3, [r3, #12]
 800cab6:	f003 0302 	and.w	r3, r3, #2
 800caba:	2b02      	cmp	r3, #2
 800cabc:	d11b      	bne.n	800caf6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f06f 0202 	mvn.w	r2, #2
 800cac6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2201      	movs	r2, #1
 800cacc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	699b      	ldr	r3, [r3, #24]
 800cad4:	f003 0303 	and.w	r3, r3, #3
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d003      	beq.n	800cae4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 fa7b 	bl	800cfd8 <HAL_TIM_IC_CaptureCallback>
 800cae2:	e005      	b.n	800caf0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 fa6d 	bl	800cfc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 fa7e 	bl	800cfec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	f003 0304 	and.w	r3, r3, #4
 800cb00:	2b04      	cmp	r3, #4
 800cb02:	d122      	bne.n	800cb4a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	f003 0304 	and.w	r3, r3, #4
 800cb0e:	2b04      	cmp	r3, #4
 800cb10:	d11b      	bne.n	800cb4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f06f 0204 	mvn.w	r2, #4
 800cb1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2202      	movs	r2, #2
 800cb20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	699b      	ldr	r3, [r3, #24]
 800cb28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d003      	beq.n	800cb38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 fa51 	bl	800cfd8 <HAL_TIM_IC_CaptureCallback>
 800cb36:	e005      	b.n	800cb44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 fa43 	bl	800cfc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 fa54 	bl	800cfec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2200      	movs	r2, #0
 800cb48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	691b      	ldr	r3, [r3, #16]
 800cb50:	f003 0308 	and.w	r3, r3, #8
 800cb54:	2b08      	cmp	r3, #8
 800cb56:	d122      	bne.n	800cb9e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	f003 0308 	and.w	r3, r3, #8
 800cb62:	2b08      	cmp	r3, #8
 800cb64:	d11b      	bne.n	800cb9e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f06f 0208 	mvn.w	r2, #8
 800cb6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2204      	movs	r2, #4
 800cb74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	69db      	ldr	r3, [r3, #28]
 800cb7c:	f003 0303 	and.w	r3, r3, #3
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d003      	beq.n	800cb8c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 fa27 	bl	800cfd8 <HAL_TIM_IC_CaptureCallback>
 800cb8a:	e005      	b.n	800cb98 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 fa19 	bl	800cfc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 fa2a 	bl	800cfec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	691b      	ldr	r3, [r3, #16]
 800cba4:	f003 0310 	and.w	r3, r3, #16
 800cba8:	2b10      	cmp	r3, #16
 800cbaa:	d122      	bne.n	800cbf2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	f003 0310 	and.w	r3, r3, #16
 800cbb6:	2b10      	cmp	r3, #16
 800cbb8:	d11b      	bne.n	800cbf2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f06f 0210 	mvn.w	r2, #16
 800cbc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2208      	movs	r2, #8
 800cbc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	69db      	ldr	r3, [r3, #28]
 800cbd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d003      	beq.n	800cbe0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 f9fd 	bl	800cfd8 <HAL_TIM_IC_CaptureCallback>
 800cbde:	e005      	b.n	800cbec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 f9ef 	bl	800cfc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f000 fa00 	bl	800cfec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	691b      	ldr	r3, [r3, #16]
 800cbf8:	f003 0301 	and.w	r3, r3, #1
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d10e      	bne.n	800cc1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	f003 0301 	and.w	r3, r3, #1
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d107      	bne.n	800cc1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f06f 0201 	mvn.w	r2, #1
 800cc16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 f9c9 	bl	800cfb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	691b      	ldr	r3, [r3, #16]
 800cc24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc28:	2b80      	cmp	r3, #128	; 0x80
 800cc2a:	d10e      	bne.n	800cc4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc36:	2b80      	cmp	r3, #128	; 0x80
 800cc38:	d107      	bne.n	800cc4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cc42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fd7b 	bl	800d740 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	691b      	ldr	r3, [r3, #16]
 800cc50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc54:	2b40      	cmp	r3, #64	; 0x40
 800cc56:	d10e      	bne.n	800cc76 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc62:	2b40      	cmp	r3, #64	; 0x40
 800cc64:	d107      	bne.n	800cc76 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cc6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 f9c5 	bl	800d000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	691b      	ldr	r3, [r3, #16]
 800cc7c:	f003 0320 	and.w	r3, r3, #32
 800cc80:	2b20      	cmp	r3, #32
 800cc82:	d10e      	bne.n	800cca2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	f003 0320 	and.w	r3, r3, #32
 800cc8e:	2b20      	cmp	r3, #32
 800cc90:	d107      	bne.n	800cca2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f06f 0220 	mvn.w	r2, #32
 800cc9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 fd45 	bl	800d72c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cca2:	bf00      	nop
 800cca4:	3708      	adds	r7, #8
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
	...

0800ccac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d101      	bne.n	800ccc6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ccc2:	2302      	movs	r3, #2
 800ccc4:	e0ac      	b.n	800ce20 <HAL_TIM_PWM_ConfigChannel+0x174>
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2b0c      	cmp	r3, #12
 800ccd2:	f200 809f 	bhi.w	800ce14 <HAL_TIM_PWM_ConfigChannel+0x168>
 800ccd6:	a201      	add	r2, pc, #4	; (adr r2, 800ccdc <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ccd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccdc:	0800cd11 	.word	0x0800cd11
 800cce0:	0800ce15 	.word	0x0800ce15
 800cce4:	0800ce15 	.word	0x0800ce15
 800cce8:	0800ce15 	.word	0x0800ce15
 800ccec:	0800cd51 	.word	0x0800cd51
 800ccf0:	0800ce15 	.word	0x0800ce15
 800ccf4:	0800ce15 	.word	0x0800ce15
 800ccf8:	0800ce15 	.word	0x0800ce15
 800ccfc:	0800cd93 	.word	0x0800cd93
 800cd00:	0800ce15 	.word	0x0800ce15
 800cd04:	0800ce15 	.word	0x0800ce15
 800cd08:	0800ce15 	.word	0x0800ce15
 800cd0c:	0800cdd3 	.word	0x0800cdd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	68b9      	ldr	r1, [r7, #8]
 800cd16:	4618      	mov	r0, r3
 800cd18:	f000 fa1c 	bl	800d154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	699a      	ldr	r2, [r3, #24]
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f042 0208 	orr.w	r2, r2, #8
 800cd2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	699a      	ldr	r2, [r3, #24]
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f022 0204 	bic.w	r2, r2, #4
 800cd3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	6999      	ldr	r1, [r3, #24]
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	691a      	ldr	r2, [r3, #16]
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	430a      	orrs	r2, r1
 800cd4c:	619a      	str	r2, [r3, #24]
      break;
 800cd4e:	e062      	b.n	800ce16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68b9      	ldr	r1, [r7, #8]
 800cd56:	4618      	mov	r0, r3
 800cd58:	f000 fa6c 	bl	800d234 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	699a      	ldr	r2, [r3, #24]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	699a      	ldr	r2, [r3, #24]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	6999      	ldr	r1, [r3, #24]
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	691b      	ldr	r3, [r3, #16]
 800cd86:	021a      	lsls	r2, r3, #8
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	430a      	orrs	r2, r1
 800cd8e:	619a      	str	r2, [r3, #24]
      break;
 800cd90:	e041      	b.n	800ce16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	68b9      	ldr	r1, [r7, #8]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f000 fac1 	bl	800d320 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	69da      	ldr	r2, [r3, #28]
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f042 0208 	orr.w	r2, r2, #8
 800cdac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	69da      	ldr	r2, [r3, #28]
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f022 0204 	bic.w	r2, r2, #4
 800cdbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	69d9      	ldr	r1, [r3, #28]
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	691a      	ldr	r2, [r3, #16]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	430a      	orrs	r2, r1
 800cdce:	61da      	str	r2, [r3, #28]
      break;
 800cdd0:	e021      	b.n	800ce16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	68b9      	ldr	r1, [r7, #8]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f000 fb15 	bl	800d408 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	69da      	ldr	r2, [r3, #28]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cdec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	69da      	ldr	r2, [r3, #28]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cdfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	69d9      	ldr	r1, [r3, #28]
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	691b      	ldr	r3, [r3, #16]
 800ce08:	021a      	lsls	r2, r3, #8
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	430a      	orrs	r2, r1
 800ce10:	61da      	str	r2, [r3, #28]
      break;
 800ce12:	e000      	b.n	800ce16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800ce14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce1e:	2300      	movs	r3, #0
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d101      	bne.n	800ce40 <HAL_TIM_ConfigClockSource+0x18>
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	e0b3      	b.n	800cfa8 <HAL_TIM_ConfigClockSource+0x180>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2202      	movs	r2, #2
 800ce4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ce5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce78:	d03e      	beq.n	800cef8 <HAL_TIM_ConfigClockSource+0xd0>
 800ce7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce7e:	f200 8087 	bhi.w	800cf90 <HAL_TIM_ConfigClockSource+0x168>
 800ce82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce86:	f000 8085 	beq.w	800cf94 <HAL_TIM_ConfigClockSource+0x16c>
 800ce8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce8e:	d87f      	bhi.n	800cf90 <HAL_TIM_ConfigClockSource+0x168>
 800ce90:	2b70      	cmp	r3, #112	; 0x70
 800ce92:	d01a      	beq.n	800ceca <HAL_TIM_ConfigClockSource+0xa2>
 800ce94:	2b70      	cmp	r3, #112	; 0x70
 800ce96:	d87b      	bhi.n	800cf90 <HAL_TIM_ConfigClockSource+0x168>
 800ce98:	2b60      	cmp	r3, #96	; 0x60
 800ce9a:	d050      	beq.n	800cf3e <HAL_TIM_ConfigClockSource+0x116>
 800ce9c:	2b60      	cmp	r3, #96	; 0x60
 800ce9e:	d877      	bhi.n	800cf90 <HAL_TIM_ConfigClockSource+0x168>
 800cea0:	2b50      	cmp	r3, #80	; 0x50
 800cea2:	d03c      	beq.n	800cf1e <HAL_TIM_ConfigClockSource+0xf6>
 800cea4:	2b50      	cmp	r3, #80	; 0x50
 800cea6:	d873      	bhi.n	800cf90 <HAL_TIM_ConfigClockSource+0x168>
 800cea8:	2b40      	cmp	r3, #64	; 0x40
 800ceaa:	d058      	beq.n	800cf5e <HAL_TIM_ConfigClockSource+0x136>
 800ceac:	2b40      	cmp	r3, #64	; 0x40
 800ceae:	d86f      	bhi.n	800cf90 <HAL_TIM_ConfigClockSource+0x168>
 800ceb0:	2b30      	cmp	r3, #48	; 0x30
 800ceb2:	d064      	beq.n	800cf7e <HAL_TIM_ConfigClockSource+0x156>
 800ceb4:	2b30      	cmp	r3, #48	; 0x30
 800ceb6:	d86b      	bhi.n	800cf90 <HAL_TIM_ConfigClockSource+0x168>
 800ceb8:	2b20      	cmp	r3, #32
 800ceba:	d060      	beq.n	800cf7e <HAL_TIM_ConfigClockSource+0x156>
 800cebc:	2b20      	cmp	r3, #32
 800cebe:	d867      	bhi.n	800cf90 <HAL_TIM_ConfigClockSource+0x168>
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d05c      	beq.n	800cf7e <HAL_TIM_ConfigClockSource+0x156>
 800cec4:	2b10      	cmp	r3, #16
 800cec6:	d05a      	beq.n	800cf7e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800cec8:	e062      	b.n	800cf90 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6818      	ldr	r0, [r3, #0]
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	6899      	ldr	r1, [r3, #8]
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	685a      	ldr	r2, [r3, #4]
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	f000 fb65 	bl	800d5a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ceec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	68fa      	ldr	r2, [r7, #12]
 800cef4:	609a      	str	r2, [r3, #8]
      break;
 800cef6:	e04e      	b.n	800cf96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6818      	ldr	r0, [r3, #0]
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	6899      	ldr	r1, [r3, #8]
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	685a      	ldr	r2, [r3, #4]
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	68db      	ldr	r3, [r3, #12]
 800cf08:	f000 fb4e 	bl	800d5a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	689a      	ldr	r2, [r3, #8]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cf1a:	609a      	str	r2, [r3, #8]
      break;
 800cf1c:	e03b      	b.n	800cf96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6818      	ldr	r0, [r3, #0]
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	6859      	ldr	r1, [r3, #4]
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	f000 fac2 	bl	800d4b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2150      	movs	r1, #80	; 0x50
 800cf36:	4618      	mov	r0, r3
 800cf38:	f000 fb1b 	bl	800d572 <TIM_ITRx_SetConfig>
      break;
 800cf3c:	e02b      	b.n	800cf96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6818      	ldr	r0, [r3, #0]
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	6859      	ldr	r1, [r3, #4]
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	f000 fae1 	bl	800d512 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2160      	movs	r1, #96	; 0x60
 800cf56:	4618      	mov	r0, r3
 800cf58:	f000 fb0b 	bl	800d572 <TIM_ITRx_SetConfig>
      break;
 800cf5c:	e01b      	b.n	800cf96 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6818      	ldr	r0, [r3, #0]
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	6859      	ldr	r1, [r3, #4]
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	f000 faa2 	bl	800d4b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	2140      	movs	r1, #64	; 0x40
 800cf76:	4618      	mov	r0, r3
 800cf78:	f000 fafb 	bl	800d572 <TIM_ITRx_SetConfig>
      break;
 800cf7c:	e00b      	b.n	800cf96 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4619      	mov	r1, r3
 800cf88:	4610      	mov	r0, r2
 800cf8a:	f000 faf2 	bl	800d572 <TIM_ITRx_SetConfig>
        break;
 800cf8e:	e002      	b.n	800cf96 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800cf90:	bf00      	nop
 800cf92:	e000      	b.n	800cf96 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800cf94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cfa6:	2300      	movs	r3, #0
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cfb8:	bf00      	nop
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cfcc:	bf00      	nop
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cfe0:	bf00      	nop
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cff4:	bf00      	nop
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr

0800d000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d008:	bf00      	nop
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d014:	b480      	push	{r7}
 800d016:	b085      	sub	sp, #20
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4a40      	ldr	r2, [pc, #256]	; (800d128 <TIM_Base_SetConfig+0x114>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d013      	beq.n	800d054 <TIM_Base_SetConfig+0x40>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d032:	d00f      	beq.n	800d054 <TIM_Base_SetConfig+0x40>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	4a3d      	ldr	r2, [pc, #244]	; (800d12c <TIM_Base_SetConfig+0x118>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d00b      	beq.n	800d054 <TIM_Base_SetConfig+0x40>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	4a3c      	ldr	r2, [pc, #240]	; (800d130 <TIM_Base_SetConfig+0x11c>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d007      	beq.n	800d054 <TIM_Base_SetConfig+0x40>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	4a3b      	ldr	r2, [pc, #236]	; (800d134 <TIM_Base_SetConfig+0x120>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d003      	beq.n	800d054 <TIM_Base_SetConfig+0x40>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	4a3a      	ldr	r2, [pc, #232]	; (800d138 <TIM_Base_SetConfig+0x124>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d108      	bne.n	800d066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d05a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	68fa      	ldr	r2, [r7, #12]
 800d062:	4313      	orrs	r3, r2
 800d064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	4a2f      	ldr	r2, [pc, #188]	; (800d128 <TIM_Base_SetConfig+0x114>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d02b      	beq.n	800d0c6 <TIM_Base_SetConfig+0xb2>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d074:	d027      	beq.n	800d0c6 <TIM_Base_SetConfig+0xb2>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4a2c      	ldr	r2, [pc, #176]	; (800d12c <TIM_Base_SetConfig+0x118>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d023      	beq.n	800d0c6 <TIM_Base_SetConfig+0xb2>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4a2b      	ldr	r2, [pc, #172]	; (800d130 <TIM_Base_SetConfig+0x11c>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d01f      	beq.n	800d0c6 <TIM_Base_SetConfig+0xb2>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	4a2a      	ldr	r2, [pc, #168]	; (800d134 <TIM_Base_SetConfig+0x120>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d01b      	beq.n	800d0c6 <TIM_Base_SetConfig+0xb2>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	4a29      	ldr	r2, [pc, #164]	; (800d138 <TIM_Base_SetConfig+0x124>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d017      	beq.n	800d0c6 <TIM_Base_SetConfig+0xb2>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	4a28      	ldr	r2, [pc, #160]	; (800d13c <TIM_Base_SetConfig+0x128>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d013      	beq.n	800d0c6 <TIM_Base_SetConfig+0xb2>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	4a27      	ldr	r2, [pc, #156]	; (800d140 <TIM_Base_SetConfig+0x12c>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d00f      	beq.n	800d0c6 <TIM_Base_SetConfig+0xb2>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	4a26      	ldr	r2, [pc, #152]	; (800d144 <TIM_Base_SetConfig+0x130>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d00b      	beq.n	800d0c6 <TIM_Base_SetConfig+0xb2>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4a25      	ldr	r2, [pc, #148]	; (800d148 <TIM_Base_SetConfig+0x134>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d007      	beq.n	800d0c6 <TIM_Base_SetConfig+0xb2>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	4a24      	ldr	r2, [pc, #144]	; (800d14c <TIM_Base_SetConfig+0x138>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d003      	beq.n	800d0c6 <TIM_Base_SetConfig+0xb2>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4a23      	ldr	r2, [pc, #140]	; (800d150 <TIM_Base_SetConfig+0x13c>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d108      	bne.n	800d0d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	695b      	ldr	r3, [r3, #20]
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	689a      	ldr	r2, [r3, #8]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	4a0a      	ldr	r2, [pc, #40]	; (800d128 <TIM_Base_SetConfig+0x114>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d003      	beq.n	800d10c <TIM_Base_SetConfig+0xf8>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	4a0c      	ldr	r2, [pc, #48]	; (800d138 <TIM_Base_SetConfig+0x124>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d103      	bne.n	800d114 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	691a      	ldr	r2, [r3, #16]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2201      	movs	r2, #1
 800d118:	615a      	str	r2, [r3, #20]
}
 800d11a:	bf00      	nop
 800d11c:	3714      	adds	r7, #20
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr
 800d126:	bf00      	nop
 800d128:	40010000 	.word	0x40010000
 800d12c:	40000400 	.word	0x40000400
 800d130:	40000800 	.word	0x40000800
 800d134:	40000c00 	.word	0x40000c00
 800d138:	40010400 	.word	0x40010400
 800d13c:	40014000 	.word	0x40014000
 800d140:	40014400 	.word	0x40014400
 800d144:	40014800 	.word	0x40014800
 800d148:	40001800 	.word	0x40001800
 800d14c:	40001c00 	.word	0x40001c00
 800d150:	40002000 	.word	0x40002000

0800d154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d154:	b480      	push	{r7}
 800d156:	b087      	sub	sp, #28
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6a1b      	ldr	r3, [r3, #32]
 800d162:	f023 0201 	bic.w	r2, r3, #1
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6a1b      	ldr	r3, [r3, #32]
 800d16e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	699b      	ldr	r3, [r3, #24]
 800d17a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f023 0303 	bic.w	r3, r3, #3
 800d18a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	68fa      	ldr	r2, [r7, #12]
 800d192:	4313      	orrs	r3, r2
 800d194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	f023 0302 	bic.w	r3, r3, #2
 800d19c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	697a      	ldr	r2, [r7, #20]
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	4a20      	ldr	r2, [pc, #128]	; (800d22c <TIM_OC1_SetConfig+0xd8>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d003      	beq.n	800d1b8 <TIM_OC1_SetConfig+0x64>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	4a1f      	ldr	r2, [pc, #124]	; (800d230 <TIM_OC1_SetConfig+0xdc>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d10c      	bne.n	800d1d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	f023 0308 	bic.w	r3, r3, #8
 800d1be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	697a      	ldr	r2, [r7, #20]
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	f023 0304 	bic.w	r3, r3, #4
 800d1d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	4a15      	ldr	r2, [pc, #84]	; (800d22c <TIM_OC1_SetConfig+0xd8>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d003      	beq.n	800d1e2 <TIM_OC1_SetConfig+0x8e>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	4a14      	ldr	r2, [pc, #80]	; (800d230 <TIM_OC1_SetConfig+0xdc>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d111      	bne.n	800d206 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d1f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	695b      	ldr	r3, [r3, #20]
 800d1f6:	693a      	ldr	r2, [r7, #16]
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	699b      	ldr	r3, [r3, #24]
 800d200:	693a      	ldr	r2, [r7, #16]
 800d202:	4313      	orrs	r3, r2
 800d204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	693a      	ldr	r2, [r7, #16]
 800d20a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	68fa      	ldr	r2, [r7, #12]
 800d210:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	697a      	ldr	r2, [r7, #20]
 800d21e:	621a      	str	r2, [r3, #32]
}
 800d220:	bf00      	nop
 800d222:	371c      	adds	r7, #28
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr
 800d22c:	40010000 	.word	0x40010000
 800d230:	40010400 	.word	0x40010400

0800d234 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d234:	b480      	push	{r7}
 800d236:	b087      	sub	sp, #28
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6a1b      	ldr	r3, [r3, #32]
 800d242:	f023 0210 	bic.w	r2, r3, #16
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a1b      	ldr	r3, [r3, #32]
 800d24e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	699b      	ldr	r3, [r3, #24]
 800d25a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d26a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	021b      	lsls	r3, r3, #8
 800d272:	68fa      	ldr	r2, [r7, #12]
 800d274:	4313      	orrs	r3, r2
 800d276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	f023 0320 	bic.w	r3, r3, #32
 800d27e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	011b      	lsls	r3, r3, #4
 800d286:	697a      	ldr	r2, [r7, #20]
 800d288:	4313      	orrs	r3, r2
 800d28a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4a22      	ldr	r2, [pc, #136]	; (800d318 <TIM_OC2_SetConfig+0xe4>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d003      	beq.n	800d29c <TIM_OC2_SetConfig+0x68>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	4a21      	ldr	r2, [pc, #132]	; (800d31c <TIM_OC2_SetConfig+0xe8>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d10d      	bne.n	800d2b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	011b      	lsls	r3, r3, #4
 800d2aa:	697a      	ldr	r2, [r7, #20]
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	4a17      	ldr	r2, [pc, #92]	; (800d318 <TIM_OC2_SetConfig+0xe4>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d003      	beq.n	800d2c8 <TIM_OC2_SetConfig+0x94>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	4a16      	ldr	r2, [pc, #88]	; (800d31c <TIM_OC2_SetConfig+0xe8>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d113      	bne.n	800d2f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d2ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	695b      	ldr	r3, [r3, #20]
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	693a      	ldr	r2, [r7, #16]
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	699b      	ldr	r3, [r3, #24]
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	693a      	ldr	r2, [r7, #16]
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	693a      	ldr	r2, [r7, #16]
 800d2f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	685a      	ldr	r2, [r3, #4]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	697a      	ldr	r2, [r7, #20]
 800d308:	621a      	str	r2, [r3, #32]
}
 800d30a:	bf00      	nop
 800d30c:	371c      	adds	r7, #28
 800d30e:	46bd      	mov	sp, r7
 800d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop
 800d318:	40010000 	.word	0x40010000
 800d31c:	40010400 	.word	0x40010400

0800d320 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d320:	b480      	push	{r7}
 800d322:	b087      	sub	sp, #28
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6a1b      	ldr	r3, [r3, #32]
 800d32e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6a1b      	ldr	r3, [r3, #32]
 800d33a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	69db      	ldr	r3, [r3, #28]
 800d346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d34e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f023 0303 	bic.w	r3, r3, #3
 800d356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	68fa      	ldr	r2, [r7, #12]
 800d35e:	4313      	orrs	r3, r2
 800d360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	021b      	lsls	r3, r3, #8
 800d370:	697a      	ldr	r2, [r7, #20]
 800d372:	4313      	orrs	r3, r2
 800d374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	4a21      	ldr	r2, [pc, #132]	; (800d400 <TIM_OC3_SetConfig+0xe0>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d003      	beq.n	800d386 <TIM_OC3_SetConfig+0x66>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	4a20      	ldr	r2, [pc, #128]	; (800d404 <TIM_OC3_SetConfig+0xe4>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d10d      	bne.n	800d3a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d38c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	68db      	ldr	r3, [r3, #12]
 800d392:	021b      	lsls	r3, r3, #8
 800d394:	697a      	ldr	r2, [r7, #20]
 800d396:	4313      	orrs	r3, r2
 800d398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d3a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	4a16      	ldr	r2, [pc, #88]	; (800d400 <TIM_OC3_SetConfig+0xe0>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d003      	beq.n	800d3b2 <TIM_OC3_SetConfig+0x92>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	4a15      	ldr	r2, [pc, #84]	; (800d404 <TIM_OC3_SetConfig+0xe4>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d113      	bne.n	800d3da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d3c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	695b      	ldr	r3, [r3, #20]
 800d3c6:	011b      	lsls	r3, r3, #4
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	699b      	ldr	r3, [r3, #24]
 800d3d2:	011b      	lsls	r3, r3, #4
 800d3d4:	693a      	ldr	r2, [r7, #16]
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	693a      	ldr	r2, [r7, #16]
 800d3de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	68fa      	ldr	r2, [r7, #12]
 800d3e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	685a      	ldr	r2, [r3, #4]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	697a      	ldr	r2, [r7, #20]
 800d3f2:	621a      	str	r2, [r3, #32]
}
 800d3f4:	bf00      	nop
 800d3f6:	371c      	adds	r7, #28
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr
 800d400:	40010000 	.word	0x40010000
 800d404:	40010400 	.word	0x40010400

0800d408 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d408:	b480      	push	{r7}
 800d40a:	b087      	sub	sp, #28
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6a1b      	ldr	r3, [r3, #32]
 800d416:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6a1b      	ldr	r3, [r3, #32]
 800d422:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	69db      	ldr	r3, [r3, #28]
 800d42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d43e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	021b      	lsls	r3, r3, #8
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	4313      	orrs	r3, r2
 800d44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	689b      	ldr	r3, [r3, #8]
 800d458:	031b      	lsls	r3, r3, #12
 800d45a:	693a      	ldr	r2, [r7, #16]
 800d45c:	4313      	orrs	r3, r2
 800d45e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	4a12      	ldr	r2, [pc, #72]	; (800d4ac <TIM_OC4_SetConfig+0xa4>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d003      	beq.n	800d470 <TIM_OC4_SetConfig+0x68>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	4a11      	ldr	r2, [pc, #68]	; (800d4b0 <TIM_OC4_SetConfig+0xa8>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d109      	bne.n	800d484 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d476:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	695b      	ldr	r3, [r3, #20]
 800d47c:	019b      	lsls	r3, r3, #6
 800d47e:	697a      	ldr	r2, [r7, #20]
 800d480:	4313      	orrs	r3, r2
 800d482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	697a      	ldr	r2, [r7, #20]
 800d488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	68fa      	ldr	r2, [r7, #12]
 800d48e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	685a      	ldr	r2, [r3, #4]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	693a      	ldr	r2, [r7, #16]
 800d49c:	621a      	str	r2, [r3, #32]
}
 800d49e:	bf00      	nop
 800d4a0:	371c      	adds	r7, #28
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop
 800d4ac:	40010000 	.word	0x40010000
 800d4b0:	40010400 	.word	0x40010400

0800d4b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b087      	sub	sp, #28
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	6a1b      	ldr	r3, [r3, #32]
 800d4c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	6a1b      	ldr	r3, [r3, #32]
 800d4ca:	f023 0201 	bic.w	r2, r3, #1
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	699b      	ldr	r3, [r3, #24]
 800d4d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d4de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	011b      	lsls	r3, r3, #4
 800d4e4:	693a      	ldr	r2, [r7, #16]
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	f023 030a 	bic.w	r3, r3, #10
 800d4f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d4f2:	697a      	ldr	r2, [r7, #20]
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	693a      	ldr	r2, [r7, #16]
 800d4fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	697a      	ldr	r2, [r7, #20]
 800d504:	621a      	str	r2, [r3, #32]
}
 800d506:	bf00      	nop
 800d508:	371c      	adds	r7, #28
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr

0800d512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d512:	b480      	push	{r7}
 800d514:	b087      	sub	sp, #28
 800d516:	af00      	add	r7, sp, #0
 800d518:	60f8      	str	r0, [r7, #12]
 800d51a:	60b9      	str	r1, [r7, #8]
 800d51c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6a1b      	ldr	r3, [r3, #32]
 800d522:	f023 0210 	bic.w	r2, r3, #16
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	699b      	ldr	r3, [r3, #24]
 800d52e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	6a1b      	ldr	r3, [r3, #32]
 800d534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d53c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	031b      	lsls	r3, r3, #12
 800d542:	697a      	ldr	r2, [r7, #20]
 800d544:	4313      	orrs	r3, r2
 800d546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d54e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	011b      	lsls	r3, r3, #4
 800d554:	693a      	ldr	r2, [r7, #16]
 800d556:	4313      	orrs	r3, r2
 800d558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	697a      	ldr	r2, [r7, #20]
 800d55e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	693a      	ldr	r2, [r7, #16]
 800d564:	621a      	str	r2, [r3, #32]
}
 800d566:	bf00      	nop
 800d568:	371c      	adds	r7, #28
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr

0800d572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d572:	b480      	push	{r7}
 800d574:	b085      	sub	sp, #20
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
 800d57a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d58a:	683a      	ldr	r2, [r7, #0]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	4313      	orrs	r3, r2
 800d590:	f043 0307 	orr.w	r3, r3, #7
 800d594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	68fa      	ldr	r2, [r7, #12]
 800d59a:	609a      	str	r2, [r3, #8]
}
 800d59c:	bf00      	nop
 800d59e:	3714      	adds	r7, #20
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b087      	sub	sp, #28
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	607a      	str	r2, [r7, #4]
 800d5b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	689b      	ldr	r3, [r3, #8]
 800d5ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d5c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	021a      	lsls	r2, r3, #8
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	431a      	orrs	r2, r3
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	697a      	ldr	r2, [r7, #20]
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	697a      	ldr	r2, [r7, #20]
 800d5da:	609a      	str	r2, [r3, #8]
}
 800d5dc:	bf00      	nop
 800d5de:	371c      	adds	r7, #28
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b087      	sub	sp, #28
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	f003 031f 	and.w	r3, r3, #31
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d600:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6a1a      	ldr	r2, [r3, #32]
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	43db      	mvns	r3, r3
 800d60a:	401a      	ands	r2, r3
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6a1a      	ldr	r2, [r3, #32]
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	f003 031f 	and.w	r3, r3, #31
 800d61a:	6879      	ldr	r1, [r7, #4]
 800d61c:	fa01 f303 	lsl.w	r3, r1, r3
 800d620:	431a      	orrs	r2, r3
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	621a      	str	r2, [r3, #32]
}
 800d626:	bf00      	nop
 800d628:	371c      	adds	r7, #28
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr
	...

0800d634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d634:	b480      	push	{r7}
 800d636:	b085      	sub	sp, #20
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d644:	2b01      	cmp	r3, #1
 800d646:	d101      	bne.n	800d64c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d648:	2302      	movs	r3, #2
 800d64a:	e05a      	b.n	800d702 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2201      	movs	r2, #1
 800d650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2202      	movs	r2, #2
 800d658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	68fa      	ldr	r2, [r7, #12]
 800d67a:	4313      	orrs	r3, r2
 800d67c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	68fa      	ldr	r2, [r7, #12]
 800d684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a21      	ldr	r2, [pc, #132]	; (800d710 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d022      	beq.n	800d6d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d698:	d01d      	beq.n	800d6d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a1d      	ldr	r2, [pc, #116]	; (800d714 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d018      	beq.n	800d6d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4a1b      	ldr	r2, [pc, #108]	; (800d718 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d013      	beq.n	800d6d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4a1a      	ldr	r2, [pc, #104]	; (800d71c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d00e      	beq.n	800d6d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	4a18      	ldr	r2, [pc, #96]	; (800d720 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d009      	beq.n	800d6d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	4a17      	ldr	r2, [pc, #92]	; (800d724 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d004      	beq.n	800d6d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a15      	ldr	r2, [pc, #84]	; (800d728 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d10c      	bne.n	800d6f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	68ba      	ldr	r2, [r7, #8]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d700:	2300      	movs	r3, #0
}
 800d702:	4618      	mov	r0, r3
 800d704:	3714      	adds	r7, #20
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop
 800d710:	40010000 	.word	0x40010000
 800d714:	40000400 	.word	0x40000400
 800d718:	40000800 	.word	0x40000800
 800d71c:	40000c00 	.word	0x40000c00
 800d720:	40010400 	.word	0x40010400
 800d724:	40014000 	.word	0x40014000
 800d728:	40001800 	.word	0x40001800

0800d72c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d734:	bf00      	nop
 800d736:	370c      	adds	r7, #12
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d748:	bf00      	nop
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d754:	b084      	sub	sp, #16
 800d756:	b580      	push	{r7, lr}
 800d758:	b084      	sub	sp, #16
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
 800d75e:	f107 001c 	add.w	r0, r7, #28
 800d762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d122      	bne.n	800d7b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d770:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d796:	2b01      	cmp	r3, #1
 800d798:	d105      	bne.n	800d7a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 f94a 	bl	800da40 <USB_CoreReset>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	73fb      	strb	r3, [r7, #15]
 800d7b0:	e01a      	b.n	800d7e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	68db      	ldr	r3, [r3, #12]
 800d7b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 f93e 	bl	800da40 <USB_CoreReset>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d7c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d106      	bne.n	800d7dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	639a      	str	r2, [r3, #56]	; 0x38
 800d7da:	e005      	b.n	800d7e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d10b      	bne.n	800d806 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	689b      	ldr	r3, [r3, #8]
 800d7f2:	f043 0206 	orr.w	r2, r3, #6
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	689b      	ldr	r3, [r3, #8]
 800d7fe:	f043 0220 	orr.w	r2, r3, #32
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d806:	7bfb      	ldrb	r3, [r7, #15]
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d812:	b004      	add	sp, #16
 800d814:	4770      	bx	lr

0800d816 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d816:	b480      	push	{r7}
 800d818:	b083      	sub	sp, #12
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	689b      	ldr	r3, [r3, #8]
 800d822:	f043 0201 	orr.w	r2, r3, #1
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d82a:	2300      	movs	r3, #0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	370c      	adds	r7, #12
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr

0800d838 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d838:	b480      	push	{r7}
 800d83a:	b083      	sub	sp, #12
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	689b      	ldr	r3, [r3, #8]
 800d844:	f023 0201 	bic.w	r2, r3, #1
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d84c:	2300      	movs	r3, #0
}
 800d84e:	4618      	mov	r0, r3
 800d850:	370c      	adds	r7, #12
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr

0800d85a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b082      	sub	sp, #8
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
 800d862:	460b      	mov	r3, r1
 800d864:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d872:	78fb      	ldrb	r3, [r7, #3]
 800d874:	2b01      	cmp	r3, #1
 800d876:	d106      	bne.n	800d886 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	60da      	str	r2, [r3, #12]
 800d884:	e00b      	b.n	800d89e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d886:	78fb      	ldrb	r3, [r7, #3]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d106      	bne.n	800d89a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	68db      	ldr	r3, [r3, #12]
 800d890:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	60da      	str	r2, [r3, #12]
 800d898:	e001      	b.n	800d89e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d89a:	2301      	movs	r3, #1
 800d89c:	e003      	b.n	800d8a6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d89e:	2032      	movs	r0, #50	; 0x32
 800d8a0:	f7f9 fc02 	bl	80070a8 <HAL_Delay>

  return HAL_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3708      	adds	r7, #8
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
	...

0800d8b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b085      	sub	sp, #20
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	019b      	lsls	r3, r3, #6
 800d8c2:	f043 0220 	orr.w	r2, r3, #32
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	60fb      	str	r3, [r7, #12]
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	4a09      	ldr	r2, [pc, #36]	; (800d8f8 <USB_FlushTxFifo+0x48>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d901      	bls.n	800d8dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d8d8:	2303      	movs	r3, #3
 800d8da:	e006      	b.n	800d8ea <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	691b      	ldr	r3, [r3, #16]
 800d8e0:	f003 0320 	and.w	r3, r3, #32
 800d8e4:	2b20      	cmp	r3, #32
 800d8e6:	d0f0      	beq.n	800d8ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d8e8:	2300      	movs	r3, #0
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3714      	adds	r7, #20
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr
 800d8f6:	bf00      	nop
 800d8f8:	00030d40 	.word	0x00030d40

0800d8fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b085      	sub	sp, #20
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d904:	2300      	movs	r3, #0
 800d906:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2210      	movs	r2, #16
 800d90c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	3301      	adds	r3, #1
 800d912:	60fb      	str	r3, [r7, #12]
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	4a09      	ldr	r2, [pc, #36]	; (800d93c <USB_FlushRxFifo+0x40>)
 800d918:	4293      	cmp	r3, r2
 800d91a:	d901      	bls.n	800d920 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d91c:	2303      	movs	r3, #3
 800d91e:	e006      	b.n	800d92e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	691b      	ldr	r3, [r3, #16]
 800d924:	f003 0310 	and.w	r3, r3, #16
 800d928:	2b10      	cmp	r3, #16
 800d92a:	d0f0      	beq.n	800d90e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d92c:	2300      	movs	r3, #0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3714      	adds	r7, #20
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	00030d40 	.word	0x00030d40

0800d940 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d940:	b480      	push	{r7}
 800d942:	b089      	sub	sp, #36	; 0x24
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	4611      	mov	r1, r2
 800d94c:	461a      	mov	r2, r3
 800d94e:	460b      	mov	r3, r1
 800d950:	71fb      	strb	r3, [r7, #7]
 800d952:	4613      	mov	r3, r2
 800d954:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d95e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d962:	2b00      	cmp	r3, #0
 800d964:	d11a      	bne.n	800d99c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d966:	88bb      	ldrh	r3, [r7, #4]
 800d968:	3303      	adds	r3, #3
 800d96a:	089b      	lsrs	r3, r3, #2
 800d96c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d96e:	2300      	movs	r3, #0
 800d970:	61bb      	str	r3, [r7, #24]
 800d972:	e00f      	b.n	800d994 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d974:	79fb      	ldrb	r3, [r7, #7]
 800d976:	031a      	lsls	r2, r3, #12
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	4413      	add	r3, r2
 800d97c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d980:	461a      	mov	r2, r3
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	3304      	adds	r3, #4
 800d98c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	3301      	adds	r3, #1
 800d992:	61bb      	str	r3, [r7, #24]
 800d994:	69ba      	ldr	r2, [r7, #24]
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d3eb      	bcc.n	800d974 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d99c:	2300      	movs	r3, #0
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3724      	adds	r7, #36	; 0x24
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr

0800d9aa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d9aa:	b480      	push	{r7}
 800d9ac:	b089      	sub	sp, #36	; 0x24
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	60f8      	str	r0, [r7, #12]
 800d9b2:	60b9      	str	r1, [r7, #8]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d9c0:	88fb      	ldrh	r3, [r7, #6]
 800d9c2:	3303      	adds	r3, #3
 800d9c4:	089b      	lsrs	r3, r3, #2
 800d9c6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	61bb      	str	r3, [r7, #24]
 800d9cc:	e00b      	b.n	800d9e6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	601a      	str	r2, [r3, #0]
    pDest++;
 800d9da:	69fb      	ldr	r3, [r7, #28]
 800d9dc:	3304      	adds	r3, #4
 800d9de:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	61bb      	str	r3, [r7, #24]
 800d9e6:	69ba      	ldr	r2, [r7, #24]
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d3ef      	bcc.n	800d9ce <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d9ee:	69fb      	ldr	r3, [r7, #28]
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3724      	adds	r7, #36	; 0x24
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b085      	sub	sp, #20
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	695b      	ldr	r3, [r3, #20]
 800da08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	699b      	ldr	r3, [r3, #24]
 800da0e:	68fa      	ldr	r2, [r7, #12]
 800da10:	4013      	ands	r3, r2
 800da12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800da14:	68fb      	ldr	r3, [r7, #12]
}
 800da16:	4618      	mov	r0, r3
 800da18:	3714      	adds	r7, #20
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr

0800da22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800da22:	b480      	push	{r7}
 800da24:	b083      	sub	sp, #12
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	695b      	ldr	r3, [r3, #20]
 800da2e:	f003 0301 	and.w	r3, r3, #1
}
 800da32:	4618      	mov	r0, r3
 800da34:	370c      	adds	r7, #12
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
	...

0800da40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800da40:	b480      	push	{r7}
 800da42:	b085      	sub	sp, #20
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800da48:	2300      	movs	r3, #0
 800da4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	3301      	adds	r3, #1
 800da50:	60fb      	str	r3, [r7, #12]
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	4a13      	ldr	r2, [pc, #76]	; (800daa4 <USB_CoreReset+0x64>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d901      	bls.n	800da5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800da5a:	2303      	movs	r3, #3
 800da5c:	e01b      	b.n	800da96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	691b      	ldr	r3, [r3, #16]
 800da62:	2b00      	cmp	r3, #0
 800da64:	daf2      	bge.n	800da4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800da66:	2300      	movs	r3, #0
 800da68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	691b      	ldr	r3, [r3, #16]
 800da6e:	f043 0201 	orr.w	r2, r3, #1
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	3301      	adds	r3, #1
 800da7a:	60fb      	str	r3, [r7, #12]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	4a09      	ldr	r2, [pc, #36]	; (800daa4 <USB_CoreReset+0x64>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d901      	bls.n	800da88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800da84:	2303      	movs	r3, #3
 800da86:	e006      	b.n	800da96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	691b      	ldr	r3, [r3, #16]
 800da8c:	f003 0301 	and.w	r3, r3, #1
 800da90:	2b01      	cmp	r3, #1
 800da92:	d0f0      	beq.n	800da76 <USB_CoreReset+0x36>

  return HAL_OK;
 800da94:	2300      	movs	r3, #0
}
 800da96:	4618      	mov	r0, r3
 800da98:	3714      	adds	r7, #20
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop
 800daa4:	00030d40 	.word	0x00030d40

0800daa8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800daa8:	b084      	sub	sp, #16
 800daaa:	b580      	push	{r7, lr}
 800daac:	b084      	sub	sp, #16
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
 800dab2:	f107 001c 	add.w	r0, r7, #28
 800dab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dac4:	461a      	mov	r2, r3
 800dac6:	2300      	movs	r3, #0
 800dac8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dace:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dada:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dae6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d018      	beq.n	800db2c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800dafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d10a      	bne.n	800db16 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	68ba      	ldr	r2, [r7, #8]
 800db0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db0e:	f043 0304 	orr.w	r3, r3, #4
 800db12:	6013      	str	r3, [r2, #0]
 800db14:	e014      	b.n	800db40 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	68ba      	ldr	r2, [r7, #8]
 800db20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db24:	f023 0304 	bic.w	r3, r3, #4
 800db28:	6013      	str	r3, [r2, #0]
 800db2a:	e009      	b.n	800db40 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	68ba      	ldr	r2, [r7, #8]
 800db36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db3a:	f023 0304 	bic.w	r3, r3, #4
 800db3e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800db40:	2110      	movs	r1, #16
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f7ff feb4 	bl	800d8b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7ff fed7 	bl	800d8fc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800db4e:	2300      	movs	r3, #0
 800db50:	60fb      	str	r3, [r7, #12]
 800db52:	e015      	b.n	800db80 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	015a      	lsls	r2, r3, #5
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	4413      	add	r3, r2
 800db5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db60:	461a      	mov	r2, r3
 800db62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db66:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	015a      	lsls	r2, r3, #5
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	4413      	add	r3, r2
 800db70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db74:	461a      	mov	r2, r3
 800db76:	2300      	movs	r3, #0
 800db78:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	3301      	adds	r3, #1
 800db7e:	60fb      	str	r3, [r7, #12]
 800db80:	6a3b      	ldr	r3, [r7, #32]
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	429a      	cmp	r2, r3
 800db86:	d3e5      	bcc.n	800db54 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800db88:	2101      	movs	r1, #1
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 f8ac 	bl	800dce8 <USB_DriveVbus>

  HAL_Delay(200U);
 800db90:	20c8      	movs	r0, #200	; 0xc8
 800db92:	f7f9 fa89 	bl	80070a8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dba2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d00b      	beq.n	800dbc8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dbb6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4a14      	ldr	r2, [pc, #80]	; (800dc0c <USB_HostInit+0x164>)
 800dbbc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	4a13      	ldr	r2, [pc, #76]	; (800dc10 <USB_HostInit+0x168>)
 800dbc2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800dbc6:	e009      	b.n	800dbdc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2280      	movs	r2, #128	; 0x80
 800dbcc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	4a10      	ldr	r2, [pc, #64]	; (800dc14 <USB_HostInit+0x16c>)
 800dbd2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	4a10      	ldr	r2, [pc, #64]	; (800dc18 <USB_HostInit+0x170>)
 800dbd8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d105      	bne.n	800dbee <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	699b      	ldr	r3, [r3, #24]
 800dbe6:	f043 0210 	orr.w	r2, r3, #16
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	699a      	ldr	r2, [r3, #24]
 800dbf2:	4b0a      	ldr	r3, [pc, #40]	; (800dc1c <USB_HostInit+0x174>)
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800dbfa:	2300      	movs	r3, #0
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3710      	adds	r7, #16
 800dc00:	46bd      	mov	sp, r7
 800dc02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc06:	b004      	add	sp, #16
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	01000200 	.word	0x01000200
 800dc10:	00e00300 	.word	0x00e00300
 800dc14:	00600080 	.word	0x00600080
 800dc18:	004000e0 	.word	0x004000e0
 800dc1c:	a3200008 	.word	0xa3200008

0800dc20 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b085      	sub	sp, #20
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	460b      	mov	r3, r1
 800dc2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	68fa      	ldr	r2, [r7, #12]
 800dc3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc3e:	f023 0303 	bic.w	r3, r3, #3
 800dc42:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	78fb      	ldrb	r3, [r7, #3]
 800dc4e:	f003 0303 	and.w	r3, r3, #3
 800dc52:	68f9      	ldr	r1, [r7, #12]
 800dc54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800dc58:	4313      	orrs	r3, r2
 800dc5a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800dc5c:	78fb      	ldrb	r3, [r7, #3]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d107      	bne.n	800dc72 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc68:	461a      	mov	r2, r3
 800dc6a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800dc6e:	6053      	str	r3, [r2, #4]
 800dc70:	e009      	b.n	800dc86 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800dc72:	78fb      	ldrb	r3, [r7, #3]
 800dc74:	2b02      	cmp	r3, #2
 800dc76:	d106      	bne.n	800dc86 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc7e:	461a      	mov	r2, r3
 800dc80:	f241 7370 	movw	r3, #6000	; 0x1770
 800dc84:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800dc86:	2300      	movs	r3, #0
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3714      	adds	r7, #20
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr

0800dc94 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800dca0:	2300      	movs	r3, #0
 800dca2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800dcb4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dcbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dcc2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800dcc4:	2064      	movs	r0, #100	; 0x64
 800dcc6:	f7f9 f9ef 	bl	80070a8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dcd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dcd6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800dcd8:	200a      	movs	r0, #10
 800dcda:	f7f9 f9e5 	bl	80070a8 <HAL_Delay>

  return HAL_OK;
 800dcde:	2300      	movs	r3, #0
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3710      	adds	r7, #16
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b085      	sub	sp, #20
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800dd0c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d109      	bne.n	800dd2c <USB_DriveVbus+0x44>
 800dd18:	78fb      	ldrb	r3, [r7, #3]
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d106      	bne.n	800dd2c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	68fa      	ldr	r2, [r7, #12]
 800dd22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dd26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dd2a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dd32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd36:	d109      	bne.n	800dd4c <USB_DriveVbus+0x64>
 800dd38:	78fb      	ldrb	r3, [r7, #3]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d106      	bne.n	800dd4c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	68fa      	ldr	r2, [r7, #12]
 800dd42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dd46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd4a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800dd4c:	2300      	movs	r3, #0
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3714      	adds	r7, #20
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr

0800dd5a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dd5a:	b480      	push	{r7}
 800dd5c:	b085      	sub	sp, #20
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800dd66:	2300      	movs	r3, #0
 800dd68:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	0c5b      	lsrs	r3, r3, #17
 800dd78:	f003 0303 	and.w	r3, r3, #3
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3714      	adds	r7, #20
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b085      	sub	sp, #20
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	b29b      	uxth	r3, r3
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3714      	adds	r7, #20
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr
	...

0800ddac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b088      	sub	sp, #32
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	4608      	mov	r0, r1
 800ddb6:	4611      	mov	r1, r2
 800ddb8:	461a      	mov	r2, r3
 800ddba:	4603      	mov	r3, r0
 800ddbc:	70fb      	strb	r3, [r7, #3]
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	70bb      	strb	r3, [r7, #2]
 800ddc2:	4613      	mov	r3, r2
 800ddc4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ddce:	78fb      	ldrb	r3, [r7, #3]
 800ddd0:	015a      	lsls	r2, r3, #5
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	4413      	add	r3, r2
 800ddd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddda:	461a      	mov	r2, r3
 800dddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dde0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800dde2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dde6:	2b03      	cmp	r3, #3
 800dde8:	d87e      	bhi.n	800dee8 <USB_HC_Init+0x13c>
 800ddea:	a201      	add	r2, pc, #4	; (adr r2, 800ddf0 <USB_HC_Init+0x44>)
 800ddec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddf0:	0800de01 	.word	0x0800de01
 800ddf4:	0800deab 	.word	0x0800deab
 800ddf8:	0800de01 	.word	0x0800de01
 800ddfc:	0800de6d 	.word	0x0800de6d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800de00:	78fb      	ldrb	r3, [r7, #3]
 800de02:	015a      	lsls	r2, r3, #5
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	4413      	add	r3, r2
 800de08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de0c:	461a      	mov	r2, r3
 800de0e:	f240 439d 	movw	r3, #1181	; 0x49d
 800de12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800de14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	da10      	bge.n	800de3e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800de1c:	78fb      	ldrb	r3, [r7, #3]
 800de1e:	015a      	lsls	r2, r3, #5
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	4413      	add	r3, r2
 800de24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de28:	68db      	ldr	r3, [r3, #12]
 800de2a:	78fa      	ldrb	r2, [r7, #3]
 800de2c:	0151      	lsls	r1, r2, #5
 800de2e:	693a      	ldr	r2, [r7, #16]
 800de30:	440a      	add	r2, r1
 800de32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de3a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800de3c:	e057      	b.n	800deee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de46:	2b00      	cmp	r3, #0
 800de48:	d051      	beq.n	800deee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800de4a:	78fb      	ldrb	r3, [r7, #3]
 800de4c:	015a      	lsls	r2, r3, #5
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	4413      	add	r3, r2
 800de52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de56:	68db      	ldr	r3, [r3, #12]
 800de58:	78fa      	ldrb	r2, [r7, #3]
 800de5a:	0151      	lsls	r1, r2, #5
 800de5c:	693a      	ldr	r2, [r7, #16]
 800de5e:	440a      	add	r2, r1
 800de60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800de68:	60d3      	str	r3, [r2, #12]
      break;
 800de6a:	e040      	b.n	800deee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800de6c:	78fb      	ldrb	r3, [r7, #3]
 800de6e:	015a      	lsls	r2, r3, #5
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	4413      	add	r3, r2
 800de74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de78:	461a      	mov	r2, r3
 800de7a:	f240 639d 	movw	r3, #1693	; 0x69d
 800de7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800de80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800de84:	2b00      	cmp	r3, #0
 800de86:	da34      	bge.n	800def2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800de88:	78fb      	ldrb	r3, [r7, #3]
 800de8a:	015a      	lsls	r2, r3, #5
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	4413      	add	r3, r2
 800de90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	78fa      	ldrb	r2, [r7, #3]
 800de98:	0151      	lsls	r1, r2, #5
 800de9a:	693a      	ldr	r2, [r7, #16]
 800de9c:	440a      	add	r2, r1
 800de9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dea6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800dea8:	e023      	b.n	800def2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800deaa:	78fb      	ldrb	r3, [r7, #3]
 800deac:	015a      	lsls	r2, r3, #5
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	4413      	add	r3, r2
 800deb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800deb6:	461a      	mov	r2, r3
 800deb8:	f240 2325 	movw	r3, #549	; 0x225
 800debc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800debe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	da17      	bge.n	800def6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800dec6:	78fb      	ldrb	r3, [r7, #3]
 800dec8:	015a      	lsls	r2, r3, #5
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	4413      	add	r3, r2
 800dece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ded2:	68db      	ldr	r3, [r3, #12]
 800ded4:	78fa      	ldrb	r2, [r7, #3]
 800ded6:	0151      	lsls	r1, r2, #5
 800ded8:	693a      	ldr	r2, [r7, #16]
 800deda:	440a      	add	r2, r1
 800dedc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dee0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800dee4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800dee6:	e006      	b.n	800def6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800dee8:	2301      	movs	r3, #1
 800deea:	77fb      	strb	r3, [r7, #31]
      break;
 800deec:	e004      	b.n	800def8 <USB_HC_Init+0x14c>
      break;
 800deee:	bf00      	nop
 800def0:	e002      	b.n	800def8 <USB_HC_Init+0x14c>
      break;
 800def2:	bf00      	nop
 800def4:	e000      	b.n	800def8 <USB_HC_Init+0x14c>
      break;
 800def6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800defe:	699a      	ldr	r2, [r3, #24]
 800df00:	78fb      	ldrb	r3, [r7, #3]
 800df02:	f003 030f 	and.w	r3, r3, #15
 800df06:	2101      	movs	r1, #1
 800df08:	fa01 f303 	lsl.w	r3, r1, r3
 800df0c:	6939      	ldr	r1, [r7, #16]
 800df0e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800df12:	4313      	orrs	r3, r2
 800df14:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	699b      	ldr	r3, [r3, #24]
 800df1a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800df22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800df26:	2b00      	cmp	r3, #0
 800df28:	da03      	bge.n	800df32 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800df2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df2e:	61bb      	str	r3, [r7, #24]
 800df30:	e001      	b.n	800df36 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800df32:	2300      	movs	r3, #0
 800df34:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7ff ff0f 	bl	800dd5a <USB_GetHostSpeed>
 800df3c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800df3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800df42:	2b02      	cmp	r3, #2
 800df44:	d106      	bne.n	800df54 <USB_HC_Init+0x1a8>
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2b02      	cmp	r3, #2
 800df4a:	d003      	beq.n	800df54 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800df4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800df50:	617b      	str	r3, [r7, #20]
 800df52:	e001      	b.n	800df58 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800df54:	2300      	movs	r3, #0
 800df56:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800df58:	787b      	ldrb	r3, [r7, #1]
 800df5a:	059b      	lsls	r3, r3, #22
 800df5c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800df60:	78bb      	ldrb	r3, [r7, #2]
 800df62:	02db      	lsls	r3, r3, #11
 800df64:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800df68:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800df6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800df6e:	049b      	lsls	r3, r3, #18
 800df70:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800df74:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800df76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800df78:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800df7c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800df7e:	69bb      	ldr	r3, [r7, #24]
 800df80:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800df82:	78fb      	ldrb	r3, [r7, #3]
 800df84:	0159      	lsls	r1, r3, #5
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	440b      	add	r3, r1
 800df8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df8e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800df94:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800df96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800df9a:	2b03      	cmp	r3, #3
 800df9c:	d10f      	bne.n	800dfbe <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800df9e:	78fb      	ldrb	r3, [r7, #3]
 800dfa0:	015a      	lsls	r2, r3, #5
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	4413      	add	r3, r2
 800dfa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	78fa      	ldrb	r2, [r7, #3]
 800dfae:	0151      	lsls	r1, r2, #5
 800dfb0:	693a      	ldr	r2, [r7, #16]
 800dfb2:	440a      	add	r2, r1
 800dfb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dfb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dfbc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800dfbe:	7ffb      	ldrb	r3, [r7, #31]
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3720      	adds	r7, #32
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b08c      	sub	sp, #48	; 0x30
 800dfcc:	af02      	add	r7, sp, #8
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	785b      	ldrb	r3, [r3, #1]
 800dfde:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800dfe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dfe4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d02d      	beq.n	800e04e <USB_HC_StartXfer+0x86>
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	791b      	ldrb	r3, [r3, #4]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d129      	bne.n	800e04e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800dffa:	79fb      	ldrb	r3, [r7, #7]
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d117      	bne.n	800e030 <USB_HC_StartXfer+0x68>
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	79db      	ldrb	r3, [r3, #7]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d003      	beq.n	800e010 <USB_HC_StartXfer+0x48>
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	79db      	ldrb	r3, [r3, #7]
 800e00c:	2b02      	cmp	r3, #2
 800e00e:	d10f      	bne.n	800e030 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	015a      	lsls	r2, r3, #5
 800e014:	6a3b      	ldr	r3, [r7, #32]
 800e016:	4413      	add	r3, r2
 800e018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	69fa      	ldr	r2, [r7, #28]
 800e020:	0151      	lsls	r1, r2, #5
 800e022:	6a3a      	ldr	r2, [r7, #32]
 800e024:	440a      	add	r2, r1
 800e026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e02a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e02e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800e030:	79fb      	ldrb	r3, [r7, #7]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10b      	bne.n	800e04e <USB_HC_StartXfer+0x86>
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	795b      	ldrb	r3, [r3, #5]
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d107      	bne.n	800e04e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	785b      	ldrb	r3, [r3, #1]
 800e042:	4619      	mov	r1, r3
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f000 fa2f 	bl	800e4a8 <USB_DoPing>
      return HAL_OK;
 800e04a:	2300      	movs	r3, #0
 800e04c:	e0f8      	b.n	800e240 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	695b      	ldr	r3, [r3, #20]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d018      	beq.n	800e088 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	695b      	ldr	r3, [r3, #20]
 800e05a:	68ba      	ldr	r2, [r7, #8]
 800e05c:	8912      	ldrh	r2, [r2, #8]
 800e05e:	4413      	add	r3, r2
 800e060:	3b01      	subs	r3, #1
 800e062:	68ba      	ldr	r2, [r7, #8]
 800e064:	8912      	ldrh	r2, [r2, #8]
 800e066:	fbb3 f3f2 	udiv	r3, r3, r2
 800e06a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800e06c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e06e:	8b7b      	ldrh	r3, [r7, #26]
 800e070:	429a      	cmp	r2, r3
 800e072:	d90b      	bls.n	800e08c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800e074:	8b7b      	ldrh	r3, [r7, #26]
 800e076:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e078:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e07a:	68ba      	ldr	r2, [r7, #8]
 800e07c:	8912      	ldrh	r2, [r2, #8]
 800e07e:	fb02 f203 	mul.w	r2, r2, r3
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	611a      	str	r2, [r3, #16]
 800e086:	e001      	b.n	800e08c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800e088:	2301      	movs	r3, #1
 800e08a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	78db      	ldrb	r3, [r3, #3]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d007      	beq.n	800e0a4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e094:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e096:	68ba      	ldr	r2, [r7, #8]
 800e098:	8912      	ldrh	r2, [r2, #8]
 800e09a:	fb02 f203 	mul.w	r2, r2, r3
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	611a      	str	r2, [r3, #16]
 800e0a2:	e003      	b.n	800e0ac <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	695a      	ldr	r2, [r3, #20]
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	691b      	ldr	r3, [r3, #16]
 800e0b0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e0b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e0b6:	04d9      	lsls	r1, r3, #19
 800e0b8:	4b63      	ldr	r3, [pc, #396]	; (800e248 <USB_HC_StartXfer+0x280>)
 800e0ba:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e0bc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	7a9b      	ldrb	r3, [r3, #10]
 800e0c2:	075b      	lsls	r3, r3, #29
 800e0c4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e0c8:	69f9      	ldr	r1, [r7, #28]
 800e0ca:	0148      	lsls	r0, r1, #5
 800e0cc:	6a39      	ldr	r1, [r7, #32]
 800e0ce:	4401      	add	r1, r0
 800e0d0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e0d4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e0d6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e0d8:	79fb      	ldrb	r3, [r7, #7]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d009      	beq.n	800e0f2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	68d9      	ldr	r1, [r3, #12]
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	015a      	lsls	r2, r3, #5
 800e0e6:	6a3b      	ldr	r3, [r7, #32]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0ee:	460a      	mov	r2, r1
 800e0f0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e0f2:	6a3b      	ldr	r3, [r7, #32]
 800e0f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e0f8:	689b      	ldr	r3, [r3, #8]
 800e0fa:	f003 0301 	and.w	r3, r3, #1
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	bf0c      	ite	eq
 800e102:	2301      	moveq	r3, #1
 800e104:	2300      	movne	r3, #0
 800e106:	b2db      	uxtb	r3, r3
 800e108:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	015a      	lsls	r2, r3, #5
 800e10e:	6a3b      	ldr	r3, [r7, #32]
 800e110:	4413      	add	r3, r2
 800e112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	69fa      	ldr	r2, [r7, #28]
 800e11a:	0151      	lsls	r1, r2, #5
 800e11c:	6a3a      	ldr	r2, [r7, #32]
 800e11e:	440a      	add	r2, r1
 800e120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e124:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e128:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e12a:	69fb      	ldr	r3, [r7, #28]
 800e12c:	015a      	lsls	r2, r3, #5
 800e12e:	6a3b      	ldr	r3, [r7, #32]
 800e130:	4413      	add	r3, r2
 800e132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	7e7b      	ldrb	r3, [r7, #25]
 800e13a:	075b      	lsls	r3, r3, #29
 800e13c:	69f9      	ldr	r1, [r7, #28]
 800e13e:	0148      	lsls	r0, r1, #5
 800e140:	6a39      	ldr	r1, [r7, #32]
 800e142:	4401      	add	r1, r0
 800e144:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800e148:	4313      	orrs	r3, r2
 800e14a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	015a      	lsls	r2, r3, #5
 800e150:	6a3b      	ldr	r3, [r7, #32]
 800e152:	4413      	add	r3, r2
 800e154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e162:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	78db      	ldrb	r3, [r3, #3]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d004      	beq.n	800e176 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e172:	613b      	str	r3, [r7, #16]
 800e174:	e003      	b.n	800e17e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e17c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e184:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e186:	69fb      	ldr	r3, [r7, #28]
 800e188:	015a      	lsls	r2, r3, #5
 800e18a:	6a3b      	ldr	r3, [r7, #32]
 800e18c:	4413      	add	r3, r2
 800e18e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e192:	461a      	mov	r2, r3
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e198:	79fb      	ldrb	r3, [r7, #7]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d001      	beq.n	800e1a2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	e04e      	b.n	800e240 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	78db      	ldrb	r3, [r3, #3]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d149      	bne.n	800e23e <USB_HC_StartXfer+0x276>
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	695b      	ldr	r3, [r3, #20]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d045      	beq.n	800e23e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	79db      	ldrb	r3, [r3, #7]
 800e1b6:	2b03      	cmp	r3, #3
 800e1b8:	d830      	bhi.n	800e21c <USB_HC_StartXfer+0x254>
 800e1ba:	a201      	add	r2, pc, #4	; (adr r2, 800e1c0 <USB_HC_StartXfer+0x1f8>)
 800e1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c0:	0800e1d1 	.word	0x0800e1d1
 800e1c4:	0800e1f5 	.word	0x0800e1f5
 800e1c8:	0800e1d1 	.word	0x0800e1d1
 800e1cc:	0800e1f5 	.word	0x0800e1f5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	695b      	ldr	r3, [r3, #20]
 800e1d4:	3303      	adds	r3, #3
 800e1d6:	089b      	lsrs	r3, r3, #2
 800e1d8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e1da:	8afa      	ldrh	r2, [r7, #22]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d91c      	bls.n	800e220 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	699b      	ldr	r3, [r3, #24]
 800e1ea:	f043 0220 	orr.w	r2, r3, #32
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	619a      	str	r2, [r3, #24]
        }
        break;
 800e1f2:	e015      	b.n	800e220 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	695b      	ldr	r3, [r3, #20]
 800e1f8:	3303      	adds	r3, #3
 800e1fa:	089b      	lsrs	r3, r3, #2
 800e1fc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e1fe:	8afa      	ldrh	r2, [r7, #22]
 800e200:	6a3b      	ldr	r3, [r7, #32]
 800e202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e206:	691b      	ldr	r3, [r3, #16]
 800e208:	b29b      	uxth	r3, r3
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d90a      	bls.n	800e224 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	699b      	ldr	r3, [r3, #24]
 800e212:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	619a      	str	r2, [r3, #24]
        }
        break;
 800e21a:	e003      	b.n	800e224 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800e21c:	bf00      	nop
 800e21e:	e002      	b.n	800e226 <USB_HC_StartXfer+0x25e>
        break;
 800e220:	bf00      	nop
 800e222:	e000      	b.n	800e226 <USB_HC_StartXfer+0x25e>
        break;
 800e224:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	68d9      	ldr	r1, [r3, #12]
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	785a      	ldrb	r2, [r3, #1]
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	695b      	ldr	r3, [r3, #20]
 800e232:	b29b      	uxth	r3, r3
 800e234:	2000      	movs	r0, #0
 800e236:	9000      	str	r0, [sp, #0]
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f7ff fb81 	bl	800d940 <USB_WritePacket>
  }

  return HAL_OK;
 800e23e:	2300      	movs	r3, #0
}
 800e240:	4618      	mov	r0, r3
 800e242:	3728      	adds	r7, #40	; 0x28
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	1ff80000 	.word	0x1ff80000

0800e24c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b085      	sub	sp, #20
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e25e:	695b      	ldr	r3, [r3, #20]
 800e260:	b29b      	uxth	r3, r3
}
 800e262:	4618      	mov	r0, r3
 800e264:	3714      	adds	r7, #20
 800e266:	46bd      	mov	sp, r7
 800e268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26c:	4770      	bx	lr

0800e26e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e26e:	b480      	push	{r7}
 800e270:	b089      	sub	sp, #36	; 0x24
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
 800e276:	460b      	mov	r3, r1
 800e278:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800e27e:	78fb      	ldrb	r3, [r7, #3]
 800e280:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800e282:	2300      	movs	r3, #0
 800e284:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	015a      	lsls	r2, r3, #5
 800e28a:	69bb      	ldr	r3, [r7, #24]
 800e28c:	4413      	add	r3, r2
 800e28e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	0c9b      	lsrs	r3, r3, #18
 800e296:	f003 0303 	and.w	r3, r3, #3
 800e29a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	015a      	lsls	r2, r3, #5
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	4413      	add	r3, r2
 800e2a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	0fdb      	lsrs	r3, r3, #31
 800e2ac:	f003 0301 	and.w	r3, r3, #1
 800e2b0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	689b      	ldr	r3, [r3, #8]
 800e2b6:	f003 0320 	and.w	r3, r3, #32
 800e2ba:	2b20      	cmp	r3, #32
 800e2bc:	d104      	bne.n	800e2c8 <USB_HC_Halt+0x5a>
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d101      	bne.n	800e2c8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	e0e8      	b.n	800e49a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d002      	beq.n	800e2d4 <USB_HC_Halt+0x66>
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	2b02      	cmp	r3, #2
 800e2d2:	d173      	bne.n	800e3bc <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	015a      	lsls	r2, r3, #5
 800e2d8:	69bb      	ldr	r3, [r7, #24]
 800e2da:	4413      	add	r3, r2
 800e2dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	697a      	ldr	r2, [r7, #20]
 800e2e4:	0151      	lsls	r1, r2, #5
 800e2e6:	69ba      	ldr	r2, [r7, #24]
 800e2e8:	440a      	add	r2, r1
 800e2ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e2ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e2f2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	689b      	ldr	r3, [r3, #8]
 800e2f8:	f003 0320 	and.w	r3, r3, #32
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	f040 80cb 	bne.w	800e498 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e306:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d143      	bne.n	800e396 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	015a      	lsls	r2, r3, #5
 800e312:	69bb      	ldr	r3, [r7, #24]
 800e314:	4413      	add	r3, r2
 800e316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	697a      	ldr	r2, [r7, #20]
 800e31e:	0151      	lsls	r1, r2, #5
 800e320:	69ba      	ldr	r2, [r7, #24]
 800e322:	440a      	add	r2, r1
 800e324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e328:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e32c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	015a      	lsls	r2, r3, #5
 800e332:	69bb      	ldr	r3, [r7, #24]
 800e334:	4413      	add	r3, r2
 800e336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	697a      	ldr	r2, [r7, #20]
 800e33e:	0151      	lsls	r1, r2, #5
 800e340:	69ba      	ldr	r2, [r7, #24]
 800e342:	440a      	add	r2, r1
 800e344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e34c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	015a      	lsls	r2, r3, #5
 800e352:	69bb      	ldr	r3, [r7, #24]
 800e354:	4413      	add	r3, r2
 800e356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	697a      	ldr	r2, [r7, #20]
 800e35e:	0151      	lsls	r1, r2, #5
 800e360:	69ba      	ldr	r2, [r7, #24]
 800e362:	440a      	add	r2, r1
 800e364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e368:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e36c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800e36e:	69fb      	ldr	r3, [r7, #28]
 800e370:	3301      	adds	r3, #1
 800e372:	61fb      	str	r3, [r7, #28]
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e37a:	d81d      	bhi.n	800e3b8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	015a      	lsls	r2, r3, #5
 800e380:	69bb      	ldr	r3, [r7, #24]
 800e382:	4413      	add	r3, r2
 800e384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e38e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e392:	d0ec      	beq.n	800e36e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e394:	e080      	b.n	800e498 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	015a      	lsls	r2, r3, #5
 800e39a:	69bb      	ldr	r3, [r7, #24]
 800e39c:	4413      	add	r3, r2
 800e39e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	697a      	ldr	r2, [r7, #20]
 800e3a6:	0151      	lsls	r1, r2, #5
 800e3a8:	69ba      	ldr	r2, [r7, #24]
 800e3aa:	440a      	add	r2, r1
 800e3ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e3b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e3b4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e3b6:	e06f      	b.n	800e498 <USB_HC_Halt+0x22a>
            break;
 800e3b8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e3ba:	e06d      	b.n	800e498 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	015a      	lsls	r2, r3, #5
 800e3c0:	69bb      	ldr	r3, [r7, #24]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	697a      	ldr	r2, [r7, #20]
 800e3cc:	0151      	lsls	r1, r2, #5
 800e3ce:	69ba      	ldr	r2, [r7, #24]
 800e3d0:	440a      	add	r2, r1
 800e3d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e3d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e3da:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e3dc:	69bb      	ldr	r3, [r7, #24]
 800e3de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e3e2:	691b      	ldr	r3, [r3, #16]
 800e3e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d143      	bne.n	800e474 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	015a      	lsls	r2, r3, #5
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	697a      	ldr	r2, [r7, #20]
 800e3fc:	0151      	lsls	r1, r2, #5
 800e3fe:	69ba      	ldr	r2, [r7, #24]
 800e400:	440a      	add	r2, r1
 800e402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e40a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	015a      	lsls	r2, r3, #5
 800e410:	69bb      	ldr	r3, [r7, #24]
 800e412:	4413      	add	r3, r2
 800e414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	697a      	ldr	r2, [r7, #20]
 800e41c:	0151      	lsls	r1, r2, #5
 800e41e:	69ba      	ldr	r2, [r7, #24]
 800e420:	440a      	add	r2, r1
 800e422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e426:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e42a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	015a      	lsls	r2, r3, #5
 800e430:	69bb      	ldr	r3, [r7, #24]
 800e432:	4413      	add	r3, r2
 800e434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	697a      	ldr	r2, [r7, #20]
 800e43c:	0151      	lsls	r1, r2, #5
 800e43e:	69ba      	ldr	r2, [r7, #24]
 800e440:	440a      	add	r2, r1
 800e442:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e446:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e44a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	3301      	adds	r3, #1
 800e450:	61fb      	str	r3, [r7, #28]
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e458:	d81d      	bhi.n	800e496 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	015a      	lsls	r2, r3, #5
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	4413      	add	r3, r2
 800e462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e46c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e470:	d0ec      	beq.n	800e44c <USB_HC_Halt+0x1de>
 800e472:	e011      	b.n	800e498 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	015a      	lsls	r2, r3, #5
 800e478:	69bb      	ldr	r3, [r7, #24]
 800e47a:	4413      	add	r3, r2
 800e47c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	697a      	ldr	r2, [r7, #20]
 800e484:	0151      	lsls	r1, r2, #5
 800e486:	69ba      	ldr	r2, [r7, #24]
 800e488:	440a      	add	r2, r1
 800e48a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e48e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e492:	6013      	str	r3, [r2, #0]
 800e494:	e000      	b.n	800e498 <USB_HC_Halt+0x22a>
          break;
 800e496:	bf00      	nop
    }
  }

  return HAL_OK;
 800e498:	2300      	movs	r3, #0
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3724      	adds	r7, #36	; 0x24
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr
	...

0800e4a8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	b087      	sub	sp, #28
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e4b8:	78fb      	ldrb	r3, [r7, #3]
 800e4ba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	04da      	lsls	r2, r3, #19
 800e4c4:	4b15      	ldr	r3, [pc, #84]	; (800e51c <USB_DoPing+0x74>)
 800e4c6:	4013      	ands	r3, r2
 800e4c8:	693a      	ldr	r2, [r7, #16]
 800e4ca:	0151      	lsls	r1, r2, #5
 800e4cc:	697a      	ldr	r2, [r7, #20]
 800e4ce:	440a      	add	r2, r1
 800e4d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e4d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e4d8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	015a      	lsls	r2, r3, #5
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	4413      	add	r3, r2
 800e4e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e4f0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e4f8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	015a      	lsls	r2, r3, #5
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	4413      	add	r3, r2
 800e502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e506:	461a      	mov	r2, r3
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e50c:	2300      	movs	r3, #0
}
 800e50e:	4618      	mov	r0, r3
 800e510:	371c      	adds	r7, #28
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr
 800e51a:	bf00      	nop
 800e51c:	1ff80000 	.word	0x1ff80000

0800e520 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b086      	sub	sp, #24
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800e52c:	2300      	movs	r3, #0
 800e52e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f7ff f981 	bl	800d838 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800e536:	2110      	movs	r1, #16
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f7ff f9b9 	bl	800d8b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f7ff f9dc 	bl	800d8fc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e544:	2300      	movs	r3, #0
 800e546:	613b      	str	r3, [r7, #16]
 800e548:	e01f      	b.n	800e58a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	015a      	lsls	r2, r3, #5
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	4413      	add	r3, r2
 800e552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e560:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e568:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e570:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	015a      	lsls	r2, r3, #5
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	4413      	add	r3, r2
 800e57a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e57e:	461a      	mov	r2, r3
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	3301      	adds	r3, #1
 800e588:	613b      	str	r3, [r7, #16]
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	2b0f      	cmp	r3, #15
 800e58e:	d9dc      	bls.n	800e54a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e590:	2300      	movs	r3, #0
 800e592:	613b      	str	r3, [r7, #16]
 800e594:	e034      	b.n	800e600 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	015a      	lsls	r2, r3, #5
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	4413      	add	r3, r2
 800e59e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e5ac:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e5b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e5bc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	015a      	lsls	r2, r3, #5
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	617b      	str	r3, [r7, #20]
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e5dc:	d80c      	bhi.n	800e5f8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	015a      	lsls	r2, r3, #5
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	4413      	add	r3, r2
 800e5e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5f4:	d0ec      	beq.n	800e5d0 <USB_StopHost+0xb0>
 800e5f6:	e000      	b.n	800e5fa <USB_StopHost+0xda>
        break;
 800e5f8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	613b      	str	r3, [r7, #16]
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	2b0f      	cmp	r3, #15
 800e604:	d9c7      	bls.n	800e596 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e60c:	461a      	mov	r2, r3
 800e60e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e612:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e61a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f7ff f8fa 	bl	800d816 <USB_EnableGlobalInt>

  return HAL_OK;
 800e622:	2300      	movs	r3, #0
}
 800e624:	4618      	mov	r0, r3
 800e626:	3718      	adds	r7, #24
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e62c:	b590      	push	{r4, r7, lr}
 800e62e:	b089      	sub	sp, #36	; 0x24
 800e630:	af04      	add	r7, sp, #16
 800e632:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e634:	2301      	movs	r3, #1
 800e636:	2202      	movs	r2, #2
 800e638:	2102      	movs	r1, #2
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 fc66 	bl	800ef0c <USBH_FindInterface>
 800e640:	4603      	mov	r3, r0
 800e642:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e644:	7bfb      	ldrb	r3, [r7, #15]
 800e646:	2bff      	cmp	r3, #255	; 0xff
 800e648:	d002      	beq.n	800e650 <USBH_CDC_InterfaceInit+0x24>
 800e64a:	7bfb      	ldrb	r3, [r7, #15]
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d901      	bls.n	800e654 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e650:	2302      	movs	r3, #2
 800e652:	e13d      	b.n	800e8d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e654:	7bfb      	ldrb	r3, [r7, #15]
 800e656:	4619      	mov	r1, r3
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f000 fc3b 	bl	800eed4 <USBH_SelectInterface>
 800e65e:	4603      	mov	r3, r0
 800e660:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e662:	7bbb      	ldrb	r3, [r7, #14]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d001      	beq.n	800e66c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e668:	2302      	movs	r3, #2
 800e66a:	e131      	b.n	800e8d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800e672:	2050      	movs	r0, #80	; 0x50
 800e674:	f002 fa18 	bl	8010aa8 <malloc>
 800e678:	4603      	mov	r3, r0
 800e67a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e682:	69db      	ldr	r3, [r3, #28]
 800e684:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d101      	bne.n	800e690 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e68c:	2302      	movs	r3, #2
 800e68e:	e11f      	b.n	800e8d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e690:	2250      	movs	r2, #80	; 0x50
 800e692:	2100      	movs	r1, #0
 800e694:	68b8      	ldr	r0, [r7, #8]
 800e696:	f002 fa25 	bl	8010ae4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e69a:	7bfb      	ldrb	r3, [r7, #15]
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	211a      	movs	r1, #26
 800e6a0:	fb01 f303 	mul.w	r3, r1, r3
 800e6a4:	4413      	add	r3, r2
 800e6a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	b25b      	sxtb	r3, r3
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	da15      	bge.n	800e6de <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e6b2:	7bfb      	ldrb	r3, [r7, #15]
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	211a      	movs	r1, #26
 800e6b8:	fb01 f303 	mul.w	r3, r1, r3
 800e6bc:	4413      	add	r3, r2
 800e6be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e6c2:	781a      	ldrb	r2, [r3, #0]
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e6c8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	211a      	movs	r1, #26
 800e6ce:	fb01 f303 	mul.w	r3, r1, r3
 800e6d2:	4413      	add	r3, r2
 800e6d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e6d8:	881a      	ldrh	r2, [r3, #0]
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	785b      	ldrb	r3, [r3, #1]
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f001 fe32 	bl	801034e <USBH_AllocPipe>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	7819      	ldrb	r1, [r3, #0]
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	7858      	ldrb	r0, [r3, #1]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e706:	68ba      	ldr	r2, [r7, #8]
 800e708:	8952      	ldrh	r2, [r2, #10]
 800e70a:	9202      	str	r2, [sp, #8]
 800e70c:	2203      	movs	r2, #3
 800e70e:	9201      	str	r2, [sp, #4]
 800e710:	9300      	str	r3, [sp, #0]
 800e712:	4623      	mov	r3, r4
 800e714:	4602      	mov	r2, r0
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f001 fdea 	bl	80102f0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	2200      	movs	r2, #0
 800e722:	4619      	mov	r1, r3
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f002 f8f0 	bl	801090a <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e72a:	2300      	movs	r3, #0
 800e72c:	2200      	movs	r2, #0
 800e72e:	210a      	movs	r1, #10
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f000 fbeb 	bl	800ef0c <USBH_FindInterface>
 800e736:	4603      	mov	r3, r0
 800e738:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e73a:	7bfb      	ldrb	r3, [r7, #15]
 800e73c:	2bff      	cmp	r3, #255	; 0xff
 800e73e:	d002      	beq.n	800e746 <USBH_CDC_InterfaceInit+0x11a>
 800e740:	7bfb      	ldrb	r3, [r7, #15]
 800e742:	2b01      	cmp	r3, #1
 800e744:	d901      	bls.n	800e74a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e746:	2302      	movs	r3, #2
 800e748:	e0c2      	b.n	800e8d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e74a:	7bfb      	ldrb	r3, [r7, #15]
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	211a      	movs	r1, #26
 800e750:	fb01 f303 	mul.w	r3, r1, r3
 800e754:	4413      	add	r3, r2
 800e756:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	b25b      	sxtb	r3, r3
 800e75e:	2b00      	cmp	r3, #0
 800e760:	da16      	bge.n	800e790 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e762:	7bfb      	ldrb	r3, [r7, #15]
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	211a      	movs	r1, #26
 800e768:	fb01 f303 	mul.w	r3, r1, r3
 800e76c:	4413      	add	r3, r2
 800e76e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e772:	781a      	ldrb	r2, [r3, #0]
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e778:	7bfb      	ldrb	r3, [r7, #15]
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	211a      	movs	r1, #26
 800e77e:	fb01 f303 	mul.w	r3, r1, r3
 800e782:	4413      	add	r3, r2
 800e784:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e788:	881a      	ldrh	r2, [r3, #0]
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	835a      	strh	r2, [r3, #26]
 800e78e:	e015      	b.n	800e7bc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e790:	7bfb      	ldrb	r3, [r7, #15]
 800e792:	687a      	ldr	r2, [r7, #4]
 800e794:	211a      	movs	r1, #26
 800e796:	fb01 f303 	mul.w	r3, r1, r3
 800e79a:	4413      	add	r3, r2
 800e79c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e7a0:	781a      	ldrb	r2, [r3, #0]
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e7a6:	7bfb      	ldrb	r3, [r7, #15]
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	211a      	movs	r1, #26
 800e7ac:	fb01 f303 	mul.w	r3, r1, r3
 800e7b0:	4413      	add	r3, r2
 800e7b2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e7b6:	881a      	ldrh	r2, [r3, #0]
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e7bc:	7bfb      	ldrb	r3, [r7, #15]
 800e7be:	687a      	ldr	r2, [r7, #4]
 800e7c0:	211a      	movs	r1, #26
 800e7c2:	fb01 f303 	mul.w	r3, r1, r3
 800e7c6:	4413      	add	r3, r2
 800e7c8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	b25b      	sxtb	r3, r3
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	da16      	bge.n	800e802 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e7d4:	7bfb      	ldrb	r3, [r7, #15]
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	211a      	movs	r1, #26
 800e7da:	fb01 f303 	mul.w	r3, r1, r3
 800e7de:	4413      	add	r3, r2
 800e7e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e7e4:	781a      	ldrb	r2, [r3, #0]
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e7ea:	7bfb      	ldrb	r3, [r7, #15]
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	211a      	movs	r1, #26
 800e7f0:	fb01 f303 	mul.w	r3, r1, r3
 800e7f4:	4413      	add	r3, r2
 800e7f6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e7fa:	881a      	ldrh	r2, [r3, #0]
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	835a      	strh	r2, [r3, #26]
 800e800:	e015      	b.n	800e82e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e802:	7bfb      	ldrb	r3, [r7, #15]
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	211a      	movs	r1, #26
 800e808:	fb01 f303 	mul.w	r3, r1, r3
 800e80c:	4413      	add	r3, r2
 800e80e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e812:	781a      	ldrb	r2, [r3, #0]
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e818:	7bfb      	ldrb	r3, [r7, #15]
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	211a      	movs	r1, #26
 800e81e:	fb01 f303 	mul.w	r3, r1, r3
 800e822:	4413      	add	r3, r2
 800e824:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e828:	881a      	ldrh	r2, [r3, #0]
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	7b9b      	ldrb	r3, [r3, #14]
 800e832:	4619      	mov	r1, r3
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f001 fd8a 	bl	801034e <USBH_AllocPipe>
 800e83a:	4603      	mov	r3, r0
 800e83c:	461a      	mov	r2, r3
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	7bdb      	ldrb	r3, [r3, #15]
 800e846:	4619      	mov	r1, r3
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f001 fd80 	bl	801034e <USBH_AllocPipe>
 800e84e:	4603      	mov	r3, r0
 800e850:	461a      	mov	r2, r3
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	7b59      	ldrb	r1, [r3, #13]
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	7b98      	ldrb	r0, [r3, #14]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e86a:	68ba      	ldr	r2, [r7, #8]
 800e86c:	8b12      	ldrh	r2, [r2, #24]
 800e86e:	9202      	str	r2, [sp, #8]
 800e870:	2202      	movs	r2, #2
 800e872:	9201      	str	r2, [sp, #4]
 800e874:	9300      	str	r3, [sp, #0]
 800e876:	4623      	mov	r3, r4
 800e878:	4602      	mov	r2, r0
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f001 fd38 	bl	80102f0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	7b19      	ldrb	r1, [r3, #12]
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	7bd8      	ldrb	r0, [r3, #15]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e894:	68ba      	ldr	r2, [r7, #8]
 800e896:	8b52      	ldrh	r2, [r2, #26]
 800e898:	9202      	str	r2, [sp, #8]
 800e89a:	2202      	movs	r2, #2
 800e89c:	9201      	str	r2, [sp, #4]
 800e89e:	9300      	str	r3, [sp, #0]
 800e8a0:	4623      	mov	r3, r4
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f001 fd23 	bl	80102f0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	7b5b      	ldrb	r3, [r3, #13]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f002 f825 	bl	801090a <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	7b1b      	ldrb	r3, [r3, #12]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f002 f81e 	bl	801090a <USBH_LL_SetToggle>

  return USBH_OK;
 800e8ce:	2300      	movs	r3, #0
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3714      	adds	r7, #20
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd90      	pop	{r4, r7, pc}

0800e8d8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e8e6:	69db      	ldr	r3, [r3, #28]
 800e8e8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d00e      	beq.n	800e910 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f001 fd18 	bl	801032e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	4619      	mov	r1, r3
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f001 fd43 	bl	8010390 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2200      	movs	r2, #0
 800e90e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	7b1b      	ldrb	r3, [r3, #12]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d00e      	beq.n	800e936 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	7b1b      	ldrb	r3, [r3, #12]
 800e91c:	4619      	mov	r1, r3
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f001 fd05 	bl	801032e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	7b1b      	ldrb	r3, [r3, #12]
 800e928:	4619      	mov	r1, r3
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f001 fd30 	bl	8010390 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2200      	movs	r2, #0
 800e934:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	7b5b      	ldrb	r3, [r3, #13]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d00e      	beq.n	800e95c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	7b5b      	ldrb	r3, [r3, #13]
 800e942:	4619      	mov	r1, r3
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f001 fcf2 	bl	801032e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	7b5b      	ldrb	r3, [r3, #13]
 800e94e:	4619      	mov	r1, r3
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f001 fd1d 	bl	8010390 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2200      	movs	r2, #0
 800e95a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e962:	69db      	ldr	r3, [r3, #28]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00b      	beq.n	800e980 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e96e:	69db      	ldr	r3, [r3, #28]
 800e970:	4618      	mov	r0, r3
 800e972:	f002 f8a1 	bl	8010ab8 <free>
    phost->pActiveClass->pData = 0U;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e97c:	2200      	movs	r2, #0
 800e97e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e980:	2300      	movs	r3, #0
}
 800e982:	4618      	mov	r0, r3
 800e984:	3710      	adds	r7, #16
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b084      	sub	sp, #16
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e998:	69db      	ldr	r3, [r3, #28]
 800e99a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	3340      	adds	r3, #64	; 0x40
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f000 f8b1 	bl	800eb0a <GetLineCoding>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e9ac:	7afb      	ldrb	r3, [r7, #11]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d105      	bne.n	800e9be <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e9b8:	2102      	movs	r1, #2
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e9be:	7afb      	ldrb	r3, [r7, #11]
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3710      	adds	r7, #16
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b084      	sub	sp, #16
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e9de:	69db      	ldr	r3, [r3, #28]
 800e9e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e9e8:	2b04      	cmp	r3, #4
 800e9ea:	d877      	bhi.n	800eadc <USBH_CDC_Process+0x114>
 800e9ec:	a201      	add	r2, pc, #4	; (adr r2, 800e9f4 <USBH_CDC_Process+0x2c>)
 800e9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f2:	bf00      	nop
 800e9f4:	0800ea09 	.word	0x0800ea09
 800e9f8:	0800ea0f 	.word	0x0800ea0f
 800e9fc:	0800ea3f 	.word	0x0800ea3f
 800ea00:	0800eab3 	.word	0x0800eab3
 800ea04:	0800eac1 	.word	0x0800eac1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ea0c:	e06d      	b.n	800eaea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea12:	4619      	mov	r1, r3
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f000 f897 	bl	800eb48 <SetLineCoding>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ea1e:	7bbb      	ldrb	r3, [r7, #14]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d104      	bne.n	800ea2e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	2202      	movs	r2, #2
 800ea28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ea2c:	e058      	b.n	800eae0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ea2e:	7bbb      	ldrb	r3, [r7, #14]
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d055      	beq.n	800eae0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	2204      	movs	r2, #4
 800ea38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ea3c:	e050      	b.n	800eae0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	3340      	adds	r3, #64	; 0x40
 800ea42:	4619      	mov	r1, r3
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f000 f860 	bl	800eb0a <GetLineCoding>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ea4e:	7bbb      	ldrb	r3, [r7, #14]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d126      	bne.n	800eaa2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	2200      	movs	r2, #0
 800ea58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea66:	791b      	ldrb	r3, [r3, #4]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d13b      	bne.n	800eae4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea76:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d133      	bne.n	800eae4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea86:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d12b      	bne.n	800eae4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea94:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d124      	bne.n	800eae4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f000 f958 	bl	800ed50 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800eaa0:	e020      	b.n	800eae4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800eaa2:	7bbb      	ldrb	r3, [r7, #14]
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d01d      	beq.n	800eae4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	2204      	movs	r2, #4
 800eaac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800eab0:	e018      	b.n	800eae4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f000 f867 	bl	800eb86 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 f8da 	bl	800ec72 <CDC_ProcessReception>
      break;
 800eabe:	e014      	b.n	800eaea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800eac0:	2100      	movs	r1, #0
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f000 ffe3 	bl	800fa8e <USBH_ClrFeature>
 800eac8:	4603      	mov	r3, r0
 800eaca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800eacc:	7bbb      	ldrb	r3, [r7, #14]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d10a      	bne.n	800eae8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	2200      	movs	r2, #0
 800ead6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800eada:	e005      	b.n	800eae8 <USBH_CDC_Process+0x120>

    default:
      break;
 800eadc:	bf00      	nop
 800eade:	e004      	b.n	800eaea <USBH_CDC_Process+0x122>
      break;
 800eae0:	bf00      	nop
 800eae2:	e002      	b.n	800eaea <USBH_CDC_Process+0x122>
      break;
 800eae4:	bf00      	nop
 800eae6:	e000      	b.n	800eaea <USBH_CDC_Process+0x122>
      break;
 800eae8:	bf00      	nop

  }

  return status;
 800eaea:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3710      	adds	r7, #16
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800eafc:	2300      	movs	r3, #0
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	370c      	adds	r7, #12
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr

0800eb0a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800eb0a:	b580      	push	{r7, lr}
 800eb0c:	b082      	sub	sp, #8
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
 800eb12:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	22a1      	movs	r2, #161	; 0xa1
 800eb18:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2221      	movs	r2, #33	; 0x21
 800eb1e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2200      	movs	r2, #0
 800eb24:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2207      	movs	r2, #7
 800eb30:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	2207      	movs	r2, #7
 800eb36:	4619      	mov	r1, r3
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f001 f988 	bl	800fe4e <USBH_CtlReq>
 800eb3e:	4603      	mov	r3, r0
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3708      	adds	r7, #8
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2221      	movs	r2, #33	; 0x21
 800eb56:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2220      	movs	r2, #32
 800eb5c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2200      	movs	r2, #0
 800eb62:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2207      	movs	r2, #7
 800eb6e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	2207      	movs	r2, #7
 800eb74:	4619      	mov	r1, r3
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f001 f969 	bl	800fe4e <USBH_CtlReq>
 800eb7c:	4603      	mov	r3, r0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3708      	adds	r7, #8
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b086      	sub	sp, #24
 800eb8a:	af02      	add	r7, sp, #8
 800eb8c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eb94:	69db      	ldr	r3, [r3, #28]
 800eb96:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d002      	beq.n	800ebac <CDC_ProcessTransmission+0x26>
 800eba6:	2b02      	cmp	r3, #2
 800eba8:	d023      	beq.n	800ebf2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ebaa:	e05e      	b.n	800ec6a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	8b12      	ldrh	r2, [r2, #24]
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d90b      	bls.n	800ebd0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	69d9      	ldr	r1, [r3, #28]
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	8b1a      	ldrh	r2, [r3, #24]
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	7b5b      	ldrb	r3, [r3, #13]
 800ebc4:	2001      	movs	r0, #1
 800ebc6:	9000      	str	r0, [sp, #0]
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f001 fb4e 	bl	801026a <USBH_BulkSendData>
 800ebce:	e00b      	b.n	800ebe8 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800ebd8:	b29a      	uxth	r2, r3
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	7b5b      	ldrb	r3, [r3, #13]
 800ebde:	2001      	movs	r0, #1
 800ebe0:	9000      	str	r0, [sp, #0]
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f001 fb41 	bl	801026a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2202      	movs	r2, #2
 800ebec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ebf0:	e03b      	b.n	800ec6a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	7b5b      	ldrb	r3, [r3, #13]
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f001 fe65 	bl	80108c8 <USBH_LL_GetURBState>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ec02:	7afb      	ldrb	r3, [r7, #11]
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d128      	bne.n	800ec5a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec0c:	68fa      	ldr	r2, [r7, #12]
 800ec0e:	8b12      	ldrh	r2, [r2, #24]
 800ec10:	4293      	cmp	r3, r2
 800ec12:	d90e      	bls.n	800ec32 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec18:	68fa      	ldr	r2, [r7, #12]
 800ec1a:	8b12      	ldrh	r2, [r2, #24]
 800ec1c:	1a9a      	subs	r2, r3, r2
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	69db      	ldr	r3, [r3, #28]
 800ec26:	68fa      	ldr	r2, [r7, #12]
 800ec28:	8b12      	ldrh	r2, [r2, #24]
 800ec2a:	441a      	add	r2, r3
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	61da      	str	r2, [r3, #28]
 800ec30:	e002      	b.n	800ec38 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2200      	movs	r2, #0
 800ec36:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d004      	beq.n	800ec4a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2201      	movs	r2, #1
 800ec44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ec48:	e00e      	b.n	800ec68 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 f868 	bl	800ed28 <USBH_CDC_TransmitCallback>
      break;
 800ec58:	e006      	b.n	800ec68 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800ec5a:	7afb      	ldrb	r3, [r7, #11]
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d103      	bne.n	800ec68 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2201      	movs	r2, #1
 800ec64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ec68:	bf00      	nop
  }
}
 800ec6a:	bf00      	nop
 800ec6c:	3710      	adds	r7, #16
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b086      	sub	sp, #24
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec80:	69db      	ldr	r3, [r3, #28]
 800ec82:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ec84:	2300      	movs	r3, #0
 800ec86:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ec8e:	2b03      	cmp	r3, #3
 800ec90:	d002      	beq.n	800ec98 <CDC_ProcessReception+0x26>
 800ec92:	2b04      	cmp	r3, #4
 800ec94:	d00e      	beq.n	800ecb4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ec96:	e043      	b.n	800ed20 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	6a19      	ldr	r1, [r3, #32]
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	8b5a      	ldrh	r2, [r3, #26]
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	7b1b      	ldrb	r3, [r3, #12]
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f001 fb05 	bl	80102b4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	2204      	movs	r2, #4
 800ecae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ecb2:	e035      	b.n	800ed20 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	7b1b      	ldrb	r3, [r3, #12]
 800ecb8:	4619      	mov	r1, r3
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f001 fe04 	bl	80108c8 <USBH_LL_GetURBState>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ecc4:	7cfb      	ldrb	r3, [r7, #19]
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d129      	bne.n	800ed1e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	7b1b      	ldrb	r3, [r3, #12]
 800ecce:	4619      	mov	r1, r3
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f001 fd67 	bl	80107a4 <USBH_LL_GetLastXferSize>
 800ecd6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecdc:	68fa      	ldr	r2, [r7, #12]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d016      	beq.n	800ed10 <CDC_ProcessReception+0x9e>
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	8b5b      	ldrh	r3, [r3, #26]
 800ece6:	461a      	mov	r2, r3
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	4293      	cmp	r3, r2
 800ecec:	d910      	bls.n	800ed10 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	1ad2      	subs	r2, r2, r3
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	6a1a      	ldr	r2, [r3, #32]
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	441a      	add	r2, r3
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	2203      	movs	r2, #3
 800ed0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ed0e:	e006      	b.n	800ed1e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	2200      	movs	r2, #0
 800ed14:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f000 f80f 	bl	800ed3c <USBH_CDC_ReceiveCallback>
      break;
 800ed1e:	bf00      	nop
  }
}
 800ed20:	bf00      	nop
 800ed22:	3718      	adds	r7, #24
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ed30:	bf00      	nop
 800ed32:	370c      	adds	r7, #12
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ed44:	bf00      	nop
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b083      	sub	sp, #12
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ed58:	bf00      	nop
 800ed5a:	370c      	adds	r7, #12
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr

0800ed64 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b084      	sub	sp, #16
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	60b9      	str	r1, [r7, #8]
 800ed6e:	4613      	mov	r3, r2
 800ed70:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d101      	bne.n	800ed7c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ed78:	2302      	movs	r3, #2
 800ed7a:	e029      	b.n	800edd0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	79fa      	ldrb	r2, [r7, #7]
 800ed80:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2200      	movs	r2, #0
 800ed88:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ed94:	68f8      	ldr	r0, [r7, #12]
 800ed96:	f000 f81f 	bl	800edd8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2200      	movs	r2, #0
 800eda6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2200      	movs	r2, #0
 800edae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2200      	movs	r2, #0
 800edb6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d003      	beq.n	800edc8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	68ba      	ldr	r2, [r7, #8]
 800edc4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800edc8:	68f8      	ldr	r0, [r7, #12]
 800edca:	f001 fc37 	bl	801063c <USBH_LL_Init>

  return USBH_OK;
 800edce:	2300      	movs	r3, #0
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3710      	adds	r7, #16
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800edd8:	b480      	push	{r7}
 800edda:	b085      	sub	sp, #20
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ede0:	2300      	movs	r3, #0
 800ede2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ede4:	2300      	movs	r3, #0
 800ede6:	60fb      	str	r3, [r7, #12]
 800ede8:	e009      	b.n	800edfe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	33e0      	adds	r3, #224	; 0xe0
 800edf0:	009b      	lsls	r3, r3, #2
 800edf2:	4413      	add	r3, r2
 800edf4:	2200      	movs	r2, #0
 800edf6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	3301      	adds	r3, #1
 800edfc:	60fb      	str	r3, [r7, #12]
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2b0e      	cmp	r3, #14
 800ee02:	d9f2      	bls.n	800edea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ee04:	2300      	movs	r3, #0
 800ee06:	60fb      	str	r3, [r7, #12]
 800ee08:	e009      	b.n	800ee1e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	4413      	add	r3, r2
 800ee10:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ee14:	2200      	movs	r2, #0
 800ee16:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	60fb      	str	r3, [r7, #12]
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee24:	d3f1      	bcc.n	800ee0a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2201      	movs	r2, #1
 800ee36:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2201      	movs	r2, #1
 800ee44:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2240      	movs	r2, #64	; 0x40
 800ee4a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2200      	movs	r2, #0
 800ee56:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2200      	movs	r2, #0
 800ee66:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ee72:	2300      	movs	r3, #0
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3714      	adds	r7, #20
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr

0800ee80 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b085      	sub	sp, #20
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d016      	beq.n	800eec2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d10e      	bne.n	800eebc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800eea4:	1c59      	adds	r1, r3, #1
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	33de      	adds	r3, #222	; 0xde
 800eeb0:	6839      	ldr	r1, [r7, #0]
 800eeb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	73fb      	strb	r3, [r7, #15]
 800eeba:	e004      	b.n	800eec6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800eebc:	2302      	movs	r3, #2
 800eebe:	73fb      	strb	r3, [r7, #15]
 800eec0:	e001      	b.n	800eec6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800eec2:	2302      	movs	r3, #2
 800eec4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800eec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3714      	adds	r7, #20
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr

0800eed4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b085      	sub	sp, #20
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	460b      	mov	r3, r1
 800eede:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800eee0:	2300      	movs	r3, #0
 800eee2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800eeea:	78fa      	ldrb	r2, [r7, #3]
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d204      	bcs.n	800eefa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	78fa      	ldrb	r2, [r7, #3]
 800eef4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800eef8:	e001      	b.n	800eefe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800eefa:	2302      	movs	r3, #2
 800eefc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800eefe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3714      	adds	r7, #20
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr

0800ef0c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b087      	sub	sp, #28
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	4608      	mov	r0, r1
 800ef16:	4611      	mov	r1, r2
 800ef18:	461a      	mov	r2, r3
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	70fb      	strb	r3, [r7, #3]
 800ef1e:	460b      	mov	r3, r1
 800ef20:	70bb      	strb	r3, [r7, #2]
 800ef22:	4613      	mov	r3, r2
 800ef24:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ef26:	2300      	movs	r3, #0
 800ef28:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ef34:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ef36:	e025      	b.n	800ef84 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ef38:	7dfb      	ldrb	r3, [r7, #23]
 800ef3a:	221a      	movs	r2, #26
 800ef3c:	fb02 f303 	mul.w	r3, r2, r3
 800ef40:	3308      	adds	r3, #8
 800ef42:	68fa      	ldr	r2, [r7, #12]
 800ef44:	4413      	add	r3, r2
 800ef46:	3302      	adds	r3, #2
 800ef48:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ef4a:	693b      	ldr	r3, [r7, #16]
 800ef4c:	795b      	ldrb	r3, [r3, #5]
 800ef4e:	78fa      	ldrb	r2, [r7, #3]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d002      	beq.n	800ef5a <USBH_FindInterface+0x4e>
 800ef54:	78fb      	ldrb	r3, [r7, #3]
 800ef56:	2bff      	cmp	r3, #255	; 0xff
 800ef58:	d111      	bne.n	800ef7e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ef5e:	78ba      	ldrb	r2, [r7, #2]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d002      	beq.n	800ef6a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ef64:	78bb      	ldrb	r3, [r7, #2]
 800ef66:	2bff      	cmp	r3, #255	; 0xff
 800ef68:	d109      	bne.n	800ef7e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ef6e:	787a      	ldrb	r2, [r7, #1]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d002      	beq.n	800ef7a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ef74:	787b      	ldrb	r3, [r7, #1]
 800ef76:	2bff      	cmp	r3, #255	; 0xff
 800ef78:	d101      	bne.n	800ef7e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ef7a:	7dfb      	ldrb	r3, [r7, #23]
 800ef7c:	e006      	b.n	800ef8c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ef7e:	7dfb      	ldrb	r3, [r7, #23]
 800ef80:	3301      	adds	r3, #1
 800ef82:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ef84:	7dfb      	ldrb	r3, [r7, #23]
 800ef86:	2b01      	cmp	r3, #1
 800ef88:	d9d6      	bls.n	800ef38 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ef8a:	23ff      	movs	r3, #255	; 0xff
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	371c      	adds	r7, #28
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f001 fb87 	bl	80106b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800efa6:	2101      	movs	r1, #1
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f001 fca0 	bl	80108ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 800efae:	2300      	movs	r3, #0
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3708      	adds	r7, #8
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b088      	sub	sp, #32
 800efbc:	af04      	add	r7, sp, #16
 800efbe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800efc0:	2302      	movs	r3, #2
 800efc2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800efc4:	2300      	movs	r3, #0
 800efc6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	d102      	bne.n	800efda <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2203      	movs	r2, #3
 800efd8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	781b      	ldrb	r3, [r3, #0]
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	2b0b      	cmp	r3, #11
 800efe2:	f200 81b3 	bhi.w	800f34c <USBH_Process+0x394>
 800efe6:	a201      	add	r2, pc, #4	; (adr r2, 800efec <USBH_Process+0x34>)
 800efe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efec:	0800f01d 	.word	0x0800f01d
 800eff0:	0800f04f 	.word	0x0800f04f
 800eff4:	0800f0b7 	.word	0x0800f0b7
 800eff8:	0800f2e7 	.word	0x0800f2e7
 800effc:	0800f34d 	.word	0x0800f34d
 800f000:	0800f15b 	.word	0x0800f15b
 800f004:	0800f28d 	.word	0x0800f28d
 800f008:	0800f191 	.word	0x0800f191
 800f00c:	0800f1b1 	.word	0x0800f1b1
 800f010:	0800f1d1 	.word	0x0800f1d1
 800f014:	0800f1ff 	.word	0x0800f1ff
 800f018:	0800f2cf 	.word	0x0800f2cf
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800f022:	b2db      	uxtb	r3, r3
 800f024:	2b00      	cmp	r3, #0
 800f026:	f000 8193 	beq.w	800f350 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2201      	movs	r2, #1
 800f02e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f030:	20c8      	movs	r0, #200	; 0xc8
 800f032:	f001 fc9a 	bl	801096a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f001 fb99 	bl	801076e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2200      	movs	r2, #0
 800f040:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2200      	movs	r2, #0
 800f048:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f04c:	e180      	b.n	800f350 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800f054:	2b01      	cmp	r3, #1
 800f056:	d107      	bne.n	800f068 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2202      	movs	r2, #2
 800f064:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f066:	e182      	b.n	800f36e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f06e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f072:	d914      	bls.n	800f09e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f07a:	3301      	adds	r3, #1
 800f07c:	b2da      	uxtb	r2, r3
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f08a:	2b03      	cmp	r3, #3
 800f08c:	d903      	bls.n	800f096 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	220d      	movs	r2, #13
 800f092:	701a      	strb	r2, [r3, #0]
      break;
 800f094:	e16b      	b.n	800f36e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2200      	movs	r2, #0
 800f09a:	701a      	strb	r2, [r3, #0]
      break;
 800f09c:	e167      	b.n	800f36e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f0a4:	f103 020a 	add.w	r2, r3, #10
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800f0ae:	200a      	movs	r0, #10
 800f0b0:	f001 fc5b 	bl	801096a <USBH_Delay>
      break;
 800f0b4:	e15b      	b.n	800f36e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d005      	beq.n	800f0cc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f0c6:	2104      	movs	r1, #4
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f0cc:	2064      	movs	r0, #100	; 0x64
 800f0ce:	f001 fc4c 	bl	801096a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f001 fb24 	bl	8010720 <USBH_LL_GetSpeed>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	461a      	mov	r2, r3
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2205      	movs	r2, #5
 800f0e6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f0e8:	2100      	movs	r1, #0
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f001 f92f 	bl	801034e <USBH_AllocPipe>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f0f8:	2180      	movs	r1, #128	; 0x80
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f001 f927 	bl	801034e <USBH_AllocPipe>
 800f100:	4603      	mov	r3, r0
 800f102:	461a      	mov	r2, r3
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	7919      	ldrb	r1, [r3, #4]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f11c:	b292      	uxth	r2, r2
 800f11e:	9202      	str	r2, [sp, #8]
 800f120:	2200      	movs	r2, #0
 800f122:	9201      	str	r2, [sp, #4]
 800f124:	9300      	str	r3, [sp, #0]
 800f126:	4603      	mov	r3, r0
 800f128:	2280      	movs	r2, #128	; 0x80
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f001 f8e0 	bl	80102f0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	7959      	ldrb	r1, [r3, #5]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f144:	b292      	uxth	r2, r2
 800f146:	9202      	str	r2, [sp, #8]
 800f148:	2200      	movs	r2, #0
 800f14a:	9201      	str	r2, [sp, #4]
 800f14c:	9300      	str	r3, [sp, #0]
 800f14e:	4603      	mov	r3, r0
 800f150:	2200      	movs	r2, #0
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f001 f8cc 	bl	80102f0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f158:	e109      	b.n	800f36e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 f90c 	bl	800f378 <USBH_HandleEnum>
 800f160:	4603      	mov	r3, r0
 800f162:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f164:	7bbb      	ldrb	r3, [r7, #14]
 800f166:	b2db      	uxtb	r3, r3
 800f168:	2b00      	cmp	r3, #0
 800f16a:	f040 80f3 	bne.w	800f354 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2200      	movs	r2, #0
 800f172:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	d103      	bne.n	800f188 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2208      	movs	r2, #8
 800f184:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f186:	e0e5      	b.n	800f354 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2207      	movs	r2, #7
 800f18c:	701a      	strb	r2, [r3, #0]
      break;
 800f18e:	e0e1      	b.n	800f354 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f196:	2b00      	cmp	r3, #0
 800f198:	f000 80de 	beq.w	800f358 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f1a2:	2101      	movs	r1, #1
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2208      	movs	r2, #8
 800f1ac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800f1ae:	e0d3      	b.n	800f358 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f000 fc20 	bl	800fa00 <USBH_SetCfg>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	f040 80ca 	bne.w	800f35c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2209      	movs	r2, #9
 800f1cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f1ce:	e0c5      	b.n	800f35c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800f1d6:	f003 0320 	and.w	r3, r3, #32
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00b      	beq.n	800f1f6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800f1de:	2101      	movs	r1, #1
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f000 fc30 	bl	800fa46 <USBH_SetFeature>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	f040 80b9 	bne.w	800f360 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	220a      	movs	r2, #10
 800f1f2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f1f4:	e0b4      	b.n	800f360 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	220a      	movs	r2, #10
 800f1fa:	701a      	strb	r2, [r3, #0]
      break;
 800f1fc:	e0b0      	b.n	800f360 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f204:	2b00      	cmp	r3, #0
 800f206:	f000 80ad 	beq.w	800f364 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2200      	movs	r2, #0
 800f20e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f212:	2300      	movs	r3, #0
 800f214:	73fb      	strb	r3, [r7, #15]
 800f216:	e016      	b.n	800f246 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f218:	7bfa      	ldrb	r2, [r7, #15]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	32de      	adds	r2, #222	; 0xde
 800f21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f222:	791a      	ldrb	r2, [r3, #4]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d108      	bne.n	800f240 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f22e:	7bfa      	ldrb	r2, [r7, #15]
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	32de      	adds	r2, #222	; 0xde
 800f234:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800f23e:	e005      	b.n	800f24c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f240:	7bfb      	ldrb	r3, [r7, #15]
 800f242:	3301      	adds	r3, #1
 800f244:	73fb      	strb	r3, [r7, #15]
 800f246:	7bfb      	ldrb	r3, [r7, #15]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d0e5      	beq.n	800f218 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f252:	2b00      	cmp	r3, #0
 800f254:	d016      	beq.n	800f284 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f25c:	689b      	ldr	r3, [r3, #8]
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	4798      	blx	r3
 800f262:	4603      	mov	r3, r0
 800f264:	2b00      	cmp	r3, #0
 800f266:	d109      	bne.n	800f27c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2206      	movs	r2, #6
 800f26c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f274:	2103      	movs	r1, #3
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f27a:	e073      	b.n	800f364 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	220d      	movs	r2, #13
 800f280:	701a      	strb	r2, [r3, #0]
      break;
 800f282:	e06f      	b.n	800f364 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	220d      	movs	r2, #13
 800f288:	701a      	strb	r2, [r3, #0]
      break;
 800f28a:	e06b      	b.n	800f364 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f292:	2b00      	cmp	r3, #0
 800f294:	d017      	beq.n	800f2c6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f29c:	691b      	ldr	r3, [r3, #16]
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	4798      	blx	r3
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f2a6:	7bbb      	ldrb	r3, [r7, #14]
 800f2a8:	b2db      	uxtb	r3, r3
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d103      	bne.n	800f2b6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	220b      	movs	r2, #11
 800f2b2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f2b4:	e058      	b.n	800f368 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800f2b6:	7bbb      	ldrb	r3, [r7, #14]
 800f2b8:	b2db      	uxtb	r3, r3
 800f2ba:	2b02      	cmp	r3, #2
 800f2bc:	d154      	bne.n	800f368 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	220d      	movs	r2, #13
 800f2c2:	701a      	strb	r2, [r3, #0]
      break;
 800f2c4:	e050      	b.n	800f368 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	220d      	movs	r2, #13
 800f2ca:	701a      	strb	r2, [r3, #0]
      break;
 800f2cc:	e04c      	b.n	800f368 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d049      	beq.n	800f36c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f2de:	695b      	ldr	r3, [r3, #20]
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	4798      	blx	r3
      }
      break;
 800f2e4:	e042      	b.n	800f36c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f7ff fd72 	bl	800edd8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d009      	beq.n	800f312 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2200      	movs	r2, #0
 800f30e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d005      	beq.n	800f328 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f322:	2105      	movs	r1, #5
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800f32e:	b2db      	uxtb	r3, r3
 800f330:	2b01      	cmp	r3, #1
 800f332:	d107      	bne.n	800f344 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2200      	movs	r2, #0
 800f338:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f7ff fe2b 	bl	800ef98 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f342:	e014      	b.n	800f36e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f001 f9b5 	bl	80106b4 <USBH_LL_Start>
      break;
 800f34a:	e010      	b.n	800f36e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800f34c:	bf00      	nop
 800f34e:	e00e      	b.n	800f36e <USBH_Process+0x3b6>
      break;
 800f350:	bf00      	nop
 800f352:	e00c      	b.n	800f36e <USBH_Process+0x3b6>
      break;
 800f354:	bf00      	nop
 800f356:	e00a      	b.n	800f36e <USBH_Process+0x3b6>
    break;
 800f358:	bf00      	nop
 800f35a:	e008      	b.n	800f36e <USBH_Process+0x3b6>
      break;
 800f35c:	bf00      	nop
 800f35e:	e006      	b.n	800f36e <USBH_Process+0x3b6>
      break;
 800f360:	bf00      	nop
 800f362:	e004      	b.n	800f36e <USBH_Process+0x3b6>
      break;
 800f364:	bf00      	nop
 800f366:	e002      	b.n	800f36e <USBH_Process+0x3b6>
      break;
 800f368:	bf00      	nop
 800f36a:	e000      	b.n	800f36e <USBH_Process+0x3b6>
      break;
 800f36c:	bf00      	nop
  }
  return USBH_OK;
 800f36e:	2300      	movs	r3, #0
}
 800f370:	4618      	mov	r0, r3
 800f372:	3710      	adds	r7, #16
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b088      	sub	sp, #32
 800f37c:	af04      	add	r7, sp, #16
 800f37e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f380:	2301      	movs	r3, #1
 800f382:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f384:	2301      	movs	r3, #1
 800f386:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	785b      	ldrb	r3, [r3, #1]
 800f38c:	2b07      	cmp	r3, #7
 800f38e:	f200 81c1 	bhi.w	800f714 <USBH_HandleEnum+0x39c>
 800f392:	a201      	add	r2, pc, #4	; (adr r2, 800f398 <USBH_HandleEnum+0x20>)
 800f394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f398:	0800f3b9 	.word	0x0800f3b9
 800f39c:	0800f477 	.word	0x0800f477
 800f3a0:	0800f4e1 	.word	0x0800f4e1
 800f3a4:	0800f56f 	.word	0x0800f56f
 800f3a8:	0800f5d9 	.word	0x0800f5d9
 800f3ac:	0800f649 	.word	0x0800f649
 800f3b0:	0800f68f 	.word	0x0800f68f
 800f3b4:	0800f6d5 	.word	0x0800f6d5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f3b8:	2108      	movs	r1, #8
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f000 fa50 	bl	800f860 <USBH_Get_DevDesc>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f3c4:	7bbb      	ldrb	r3, [r7, #14]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d130      	bne.n	800f42c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2201      	movs	r2, #1
 800f3d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	7919      	ldrb	r1, [r3, #4]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f3ea:	687a      	ldr	r2, [r7, #4]
 800f3ec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f3ee:	b292      	uxth	r2, r2
 800f3f0:	9202      	str	r2, [sp, #8]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	9201      	str	r2, [sp, #4]
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	2280      	movs	r2, #128	; 0x80
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 ff77 	bl	80102f0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	7959      	ldrb	r1, [r3, #5]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f412:	687a      	ldr	r2, [r7, #4]
 800f414:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f416:	b292      	uxth	r2, r2
 800f418:	9202      	str	r2, [sp, #8]
 800f41a:	2200      	movs	r2, #0
 800f41c:	9201      	str	r2, [sp, #4]
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	4603      	mov	r3, r0
 800f422:	2200      	movs	r2, #0
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 ff63 	bl	80102f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f42a:	e175      	b.n	800f718 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f42c:	7bbb      	ldrb	r3, [r7, #14]
 800f42e:	2b03      	cmp	r3, #3
 800f430:	f040 8172 	bne.w	800f718 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f43a:	3301      	adds	r3, #1
 800f43c:	b2da      	uxtb	r2, r3
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f44a:	2b03      	cmp	r3, #3
 800f44c:	d903      	bls.n	800f456 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	220d      	movs	r2, #13
 800f452:	701a      	strb	r2, [r3, #0]
      break;
 800f454:	e160      	b.n	800f718 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	795b      	ldrb	r3, [r3, #5]
 800f45a:	4619      	mov	r1, r3
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f000 ff97 	bl	8010390 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	791b      	ldrb	r3, [r3, #4]
 800f466:	4619      	mov	r1, r3
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 ff91 	bl	8010390 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2200      	movs	r2, #0
 800f472:	701a      	strb	r2, [r3, #0]
      break;
 800f474:	e150      	b.n	800f718 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f476:	2112      	movs	r1, #18
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f000 f9f1 	bl	800f860 <USBH_Get_DevDesc>
 800f47e:	4603      	mov	r3, r0
 800f480:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f482:	7bbb      	ldrb	r3, [r7, #14]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d103      	bne.n	800f490 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2202      	movs	r2, #2
 800f48c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f48e:	e145      	b.n	800f71c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f490:	7bbb      	ldrb	r3, [r7, #14]
 800f492:	2b03      	cmp	r3, #3
 800f494:	f040 8142 	bne.w	800f71c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f49e:	3301      	adds	r3, #1
 800f4a0:	b2da      	uxtb	r2, r3
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f4ae:	2b03      	cmp	r3, #3
 800f4b0:	d903      	bls.n	800f4ba <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	220d      	movs	r2, #13
 800f4b6:	701a      	strb	r2, [r3, #0]
      break;
 800f4b8:	e130      	b.n	800f71c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	795b      	ldrb	r3, [r3, #5]
 800f4be:	4619      	mov	r1, r3
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 ff65 	bl	8010390 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	791b      	ldrb	r3, [r3, #4]
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f000 ff5f 	bl	8010390 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	701a      	strb	r2, [r3, #0]
      break;
 800f4de:	e11d      	b.n	800f71c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f4e0:	2101      	movs	r1, #1
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 fa68 	bl	800f9b8 <USBH_SetAddress>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f4ec:	7bbb      	ldrb	r3, [r7, #14]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d132      	bne.n	800f558 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800f4f2:	2002      	movs	r0, #2
 800f4f4:	f001 fa39 	bl	801096a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2203      	movs	r2, #3
 800f504:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	7919      	ldrb	r1, [r3, #4]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f516:	687a      	ldr	r2, [r7, #4]
 800f518:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f51a:	b292      	uxth	r2, r2
 800f51c:	9202      	str	r2, [sp, #8]
 800f51e:	2200      	movs	r2, #0
 800f520:	9201      	str	r2, [sp, #4]
 800f522:	9300      	str	r3, [sp, #0]
 800f524:	4603      	mov	r3, r0
 800f526:	2280      	movs	r2, #128	; 0x80
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f000 fee1 	bl	80102f0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	7959      	ldrb	r1, [r3, #5]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f542:	b292      	uxth	r2, r2
 800f544:	9202      	str	r2, [sp, #8]
 800f546:	2200      	movs	r2, #0
 800f548:	9201      	str	r2, [sp, #4]
 800f54a:	9300      	str	r3, [sp, #0]
 800f54c:	4603      	mov	r3, r0
 800f54e:	2200      	movs	r2, #0
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f000 fecd 	bl	80102f0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f556:	e0e3      	b.n	800f720 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f558:	7bbb      	ldrb	r3, [r7, #14]
 800f55a:	2b03      	cmp	r3, #3
 800f55c:	f040 80e0 	bne.w	800f720 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	220d      	movs	r2, #13
 800f564:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2200      	movs	r2, #0
 800f56a:	705a      	strb	r2, [r3, #1]
      break;
 800f56c:	e0d8      	b.n	800f720 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f56e:	2109      	movs	r1, #9
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f000 f99d 	bl	800f8b0 <USBH_Get_CfgDesc>
 800f576:	4603      	mov	r3, r0
 800f578:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f57a:	7bbb      	ldrb	r3, [r7, #14]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d103      	bne.n	800f588 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2204      	movs	r2, #4
 800f584:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f586:	e0cd      	b.n	800f724 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f588:	7bbb      	ldrb	r3, [r7, #14]
 800f58a:	2b03      	cmp	r3, #3
 800f58c:	f040 80ca 	bne.w	800f724 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f596:	3301      	adds	r3, #1
 800f598:	b2da      	uxtb	r2, r3
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f5a6:	2b03      	cmp	r3, #3
 800f5a8:	d903      	bls.n	800f5b2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	220d      	movs	r2, #13
 800f5ae:	701a      	strb	r2, [r3, #0]
      break;
 800f5b0:	e0b8      	b.n	800f724 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	795b      	ldrb	r3, [r3, #5]
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f000 fee9 	bl	8010390 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	791b      	ldrb	r3, [r3, #4]
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f000 fee3 	bl	8010390 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	701a      	strb	r2, [r3, #0]
      break;
 800f5d6:	e0a5      	b.n	800f724 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800f5de:	4619      	mov	r1, r3
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f000 f965 	bl	800f8b0 <USBH_Get_CfgDesc>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f5ea:	7bbb      	ldrb	r3, [r7, #14]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d103      	bne.n	800f5f8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2205      	movs	r2, #5
 800f5f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f5f6:	e097      	b.n	800f728 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f5f8:	7bbb      	ldrb	r3, [r7, #14]
 800f5fa:	2b03      	cmp	r3, #3
 800f5fc:	f040 8094 	bne.w	800f728 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f606:	3301      	adds	r3, #1
 800f608:	b2da      	uxtb	r2, r3
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f616:	2b03      	cmp	r3, #3
 800f618:	d903      	bls.n	800f622 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	220d      	movs	r2, #13
 800f61e:	701a      	strb	r2, [r3, #0]
      break;
 800f620:	e082      	b.n	800f728 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	795b      	ldrb	r3, [r3, #5]
 800f626:	4619      	mov	r1, r3
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f000 feb1 	bl	8010390 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	791b      	ldrb	r3, [r3, #4]
 800f632:	4619      	mov	r1, r3
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f000 feab 	bl	8010390 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2200      	movs	r2, #0
 800f63e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2200      	movs	r2, #0
 800f644:	701a      	strb	r2, [r3, #0]
      break;
 800f646:	e06f      	b.n	800f728 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d019      	beq.n	800f686 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f65e:	23ff      	movs	r3, #255	; 0xff
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f000 f949 	bl	800f8f8 <USBH_Get_StringDesc>
 800f666:	4603      	mov	r3, r0
 800f668:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f66a:	7bbb      	ldrb	r3, [r7, #14]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d103      	bne.n	800f678 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2206      	movs	r2, #6
 800f674:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f676:	e059      	b.n	800f72c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f678:	7bbb      	ldrb	r3, [r7, #14]
 800f67a:	2b03      	cmp	r3, #3
 800f67c:	d156      	bne.n	800f72c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2206      	movs	r2, #6
 800f682:	705a      	strb	r2, [r3, #1]
      break;
 800f684:	e052      	b.n	800f72c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2206      	movs	r2, #6
 800f68a:	705a      	strb	r2, [r3, #1]
      break;
 800f68c:	e04e      	b.n	800f72c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800f694:	2b00      	cmp	r3, #0
 800f696:	d019      	beq.n	800f6cc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f6a4:	23ff      	movs	r3, #255	; 0xff
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f000 f926 	bl	800f8f8 <USBH_Get_StringDesc>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f6b0:	7bbb      	ldrb	r3, [r7, #14]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d103      	bne.n	800f6be <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2207      	movs	r2, #7
 800f6ba:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f6bc:	e038      	b.n	800f730 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f6be:	7bbb      	ldrb	r3, [r7, #14]
 800f6c0:	2b03      	cmp	r3, #3
 800f6c2:	d135      	bne.n	800f730 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2207      	movs	r2, #7
 800f6c8:	705a      	strb	r2, [r3, #1]
      break;
 800f6ca:	e031      	b.n	800f730 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2207      	movs	r2, #7
 800f6d0:	705a      	strb	r2, [r3, #1]
      break;
 800f6d2:	e02d      	b.n	800f730 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d017      	beq.n	800f70e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f6ea:	23ff      	movs	r3, #255	; 0xff
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 f903 	bl	800f8f8 <USBH_Get_StringDesc>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f6f6:	7bbb      	ldrb	r3, [r7, #14]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d102      	bne.n	800f702 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f700:	e018      	b.n	800f734 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f702:	7bbb      	ldrb	r3, [r7, #14]
 800f704:	2b03      	cmp	r3, #3
 800f706:	d115      	bne.n	800f734 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800f708:	2300      	movs	r3, #0
 800f70a:	73fb      	strb	r3, [r7, #15]
      break;
 800f70c:	e012      	b.n	800f734 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800f70e:	2300      	movs	r3, #0
 800f710:	73fb      	strb	r3, [r7, #15]
      break;
 800f712:	e00f      	b.n	800f734 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800f714:	bf00      	nop
 800f716:	e00e      	b.n	800f736 <USBH_HandleEnum+0x3be>
      break;
 800f718:	bf00      	nop
 800f71a:	e00c      	b.n	800f736 <USBH_HandleEnum+0x3be>
      break;
 800f71c:	bf00      	nop
 800f71e:	e00a      	b.n	800f736 <USBH_HandleEnum+0x3be>
      break;
 800f720:	bf00      	nop
 800f722:	e008      	b.n	800f736 <USBH_HandleEnum+0x3be>
      break;
 800f724:	bf00      	nop
 800f726:	e006      	b.n	800f736 <USBH_HandleEnum+0x3be>
      break;
 800f728:	bf00      	nop
 800f72a:	e004      	b.n	800f736 <USBH_HandleEnum+0x3be>
      break;
 800f72c:	bf00      	nop
 800f72e:	e002      	b.n	800f736 <USBH_HandleEnum+0x3be>
      break;
 800f730:	bf00      	nop
 800f732:	e000      	b.n	800f736 <USBH_HandleEnum+0x3be>
      break;
 800f734:	bf00      	nop
  }
  return Status;
 800f736:	7bfb      	ldrb	r3, [r7, #15]
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3710      	adds	r7, #16
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f740:	b480      	push	{r7}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	683a      	ldr	r2, [r7, #0]
 800f74e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800f752:	bf00      	nop
 800f754:	370c      	adds	r7, #12
 800f756:	46bd      	mov	sp, r7
 800f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75c:	4770      	bx	lr

0800f75e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f75e:	b580      	push	{r7, lr}
 800f760:	b082      	sub	sp, #8
 800f762:	af00      	add	r7, sp, #0
 800f764:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f76c:	1c5a      	adds	r2, r3, #1
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f000 f804 	bl	800f782 <USBH_HandleSof>
}
 800f77a:	bf00      	nop
 800f77c:	3708      	adds	r7, #8
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}

0800f782 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f782:	b580      	push	{r7, lr}
 800f784:	b082      	sub	sp, #8
 800f786:	af00      	add	r7, sp, #0
 800f788:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	781b      	ldrb	r3, [r3, #0]
 800f78e:	b2db      	uxtb	r3, r3
 800f790:	2b0b      	cmp	r3, #11
 800f792:	d10a      	bne.n	800f7aa <USBH_HandleSof+0x28>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d005      	beq.n	800f7aa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f7a4:	699b      	ldr	r3, [r3, #24]
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	4798      	blx	r3
  }
}
 800f7aa:	bf00      	nop
 800f7ac:	3708      	adds	r7, #8
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}

0800f7b2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f7b2:	b480      	push	{r7}
 800f7b4:	b083      	sub	sp, #12
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2201      	movs	r2, #1
 800f7be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800f7c2:	bf00      	nop
}
 800f7c4:	370c      	adds	r7, #12
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr

0800f7ce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f7ce:	b480      	push	{r7}
 800f7d0:	b083      	sub	sp, #12
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f7de:	bf00      	nop
}
 800f7e0:	370c      	adds	r7, #12
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr

0800f7ea <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f7ea:	b480      	push	{r7}
 800f7ec:	b083      	sub	sp, #12
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2200      	movs	r2, #0
 800f806:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f80a:	2300      	movs	r3, #0
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	370c      	adds	r7, #12
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr

0800f818 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2201      	movs	r2, #1
 800f824:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2200      	movs	r2, #0
 800f82c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2200      	movs	r2, #0
 800f834:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f000 ff56 	bl	80106ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	791b      	ldrb	r3, [r3, #4]
 800f842:	4619      	mov	r1, r3
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f000 fda3 	bl	8010390 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	795b      	ldrb	r3, [r3, #5]
 800f84e:	4619      	mov	r1, r3
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f000 fd9d 	bl	8010390 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f856:	2300      	movs	r3, #0
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3708      	adds	r7, #8
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b086      	sub	sp, #24
 800f864:	af02      	add	r7, sp, #8
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	460b      	mov	r3, r1
 800f86a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f872:	78fb      	ldrb	r3, [r7, #3]
 800f874:	b29b      	uxth	r3, r3
 800f876:	9300      	str	r3, [sp, #0]
 800f878:	4613      	mov	r3, r2
 800f87a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f87e:	2100      	movs	r1, #0
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f000 f864 	bl	800f94e <USBH_GetDescriptor>
 800f886:	4603      	mov	r3, r0
 800f888:	73fb      	strb	r3, [r7, #15]
 800f88a:	7bfb      	ldrb	r3, [r7, #15]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d10a      	bne.n	800f8a6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f89c:	78fa      	ldrb	r2, [r7, #3]
 800f89e:	b292      	uxth	r2, r2
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	f000 f918 	bl	800fad6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3710      	adds	r7, #16
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b086      	sub	sp, #24
 800f8b4:	af02      	add	r7, sp, #8
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	460b      	mov	r3, r1
 800f8ba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	331c      	adds	r3, #28
 800f8c0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f8c2:	887b      	ldrh	r3, [r7, #2]
 800f8c4:	9300      	str	r3, [sp, #0]
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f8cc:	2100      	movs	r1, #0
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f000 f83d 	bl	800f94e <USBH_GetDescriptor>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	72fb      	strb	r3, [r7, #11]
 800f8d8:	7afb      	ldrb	r3, [r7, #11]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d107      	bne.n	800f8ee <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f8e4:	887a      	ldrh	r2, [r7, #2]
 800f8e6:	68f9      	ldr	r1, [r7, #12]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f000 f964 	bl	800fbb6 <USBH_ParseCfgDesc>
  }

  return status;
 800f8ee:	7afb      	ldrb	r3, [r7, #11]
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3710      	adds	r7, #16
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b088      	sub	sp, #32
 800f8fc:	af02      	add	r7, sp, #8
 800f8fe:	60f8      	str	r0, [r7, #12]
 800f900:	607a      	str	r2, [r7, #4]
 800f902:	461a      	mov	r2, r3
 800f904:	460b      	mov	r3, r1
 800f906:	72fb      	strb	r3, [r7, #11]
 800f908:	4613      	mov	r3, r2
 800f90a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f90c:	7afb      	ldrb	r3, [r7, #11]
 800f90e:	b29b      	uxth	r3, r3
 800f910:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f914:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f91c:	893b      	ldrh	r3, [r7, #8]
 800f91e:	9300      	str	r3, [sp, #0]
 800f920:	460b      	mov	r3, r1
 800f922:	2100      	movs	r1, #0
 800f924:	68f8      	ldr	r0, [r7, #12]
 800f926:	f000 f812 	bl	800f94e <USBH_GetDescriptor>
 800f92a:	4603      	mov	r3, r0
 800f92c:	75fb      	strb	r3, [r7, #23]
 800f92e:	7dfb      	ldrb	r3, [r7, #23]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d107      	bne.n	800f944 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f93a:	893a      	ldrh	r2, [r7, #8]
 800f93c:	6879      	ldr	r1, [r7, #4]
 800f93e:	4618      	mov	r0, r3
 800f940:	f000 fa37 	bl	800fdb2 <USBH_ParseStringDesc>
  }

  return status;
 800f944:	7dfb      	ldrb	r3, [r7, #23]
}
 800f946:	4618      	mov	r0, r3
 800f948:	3718      	adds	r7, #24
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f94e:	b580      	push	{r7, lr}
 800f950:	b084      	sub	sp, #16
 800f952:	af00      	add	r7, sp, #0
 800f954:	60f8      	str	r0, [r7, #12]
 800f956:	607b      	str	r3, [r7, #4]
 800f958:	460b      	mov	r3, r1
 800f95a:	72fb      	strb	r3, [r7, #11]
 800f95c:	4613      	mov	r3, r2
 800f95e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	789b      	ldrb	r3, [r3, #2]
 800f964:	2b01      	cmp	r3, #1
 800f966:	d11c      	bne.n	800f9a2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f968:	7afb      	ldrb	r3, [r7, #11]
 800f96a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f96e:	b2da      	uxtb	r2, r3
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	2206      	movs	r2, #6
 800f978:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	893a      	ldrh	r2, [r7, #8]
 800f97e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f980:	893b      	ldrh	r3, [r7, #8]
 800f982:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f98a:	d104      	bne.n	800f996 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f240 4209 	movw	r2, #1033	; 0x409
 800f992:	829a      	strh	r2, [r3, #20]
 800f994:	e002      	b.n	800f99c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2200      	movs	r2, #0
 800f99a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	8b3a      	ldrh	r2, [r7, #24]
 800f9a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f9a2:	8b3b      	ldrh	r3, [r7, #24]
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	6879      	ldr	r1, [r7, #4]
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f000 fa50 	bl	800fe4e <USBH_CtlReq>
 800f9ae:	4603      	mov	r3, r0
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3710      	adds	r7, #16
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	460b      	mov	r3, r1
 800f9c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	789b      	ldrb	r3, [r3, #2]
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d10f      	bne.n	800f9ec <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2205      	movs	r2, #5
 800f9d6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f9d8:	78fb      	ldrb	r3, [r7, #3]
 800f9da:	b29a      	uxth	r2, r3
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	2100      	movs	r1, #0
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f000 fa2c 	bl	800fe4e <USBH_CtlReq>
 800f9f6:	4603      	mov	r3, r0
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3708      	adds	r7, #8
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b082      	sub	sp, #8
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	460b      	mov	r3, r1
 800fa0a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	789b      	ldrb	r3, [r3, #2]
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	d10e      	bne.n	800fa32 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2200      	movs	r2, #0
 800fa18:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2209      	movs	r2, #9
 800fa1e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	887a      	ldrh	r2, [r7, #2]
 800fa24:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800fa32:	2200      	movs	r2, #0
 800fa34:	2100      	movs	r1, #0
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f000 fa09 	bl	800fe4e <USBH_CtlReq>
 800fa3c:	4603      	mov	r3, r0
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3708      	adds	r7, #8
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}

0800fa46 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800fa46:	b580      	push	{r7, lr}
 800fa48:	b082      	sub	sp, #8
 800fa4a:	af00      	add	r7, sp, #0
 800fa4c:	6078      	str	r0, [r7, #4]
 800fa4e:	460b      	mov	r3, r1
 800fa50:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	789b      	ldrb	r3, [r3, #2]
 800fa56:	2b01      	cmp	r3, #1
 800fa58:	d10f      	bne.n	800fa7a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2203      	movs	r2, #3
 800fa64:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800fa66:	78fb      	ldrb	r3, [r7, #3]
 800fa68:	b29a      	uxth	r2, r3
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2200      	movs	r2, #0
 800fa72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2200      	movs	r2, #0
 800fa78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	2100      	movs	r1, #0
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f000 f9e5 	bl	800fe4e <USBH_CtlReq>
 800fa84:	4603      	mov	r3, r0
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3708      	adds	r7, #8
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}

0800fa8e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800fa8e:	b580      	push	{r7, lr}
 800fa90:	b082      	sub	sp, #8
 800fa92:	af00      	add	r7, sp, #0
 800fa94:	6078      	str	r0, [r7, #4]
 800fa96:	460b      	mov	r3, r1
 800fa98:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	789b      	ldrb	r3, [r3, #2]
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	d10f      	bne.n	800fac2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2202      	movs	r2, #2
 800faa6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2201      	movs	r2, #1
 800faac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2200      	movs	r2, #0
 800fab2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800fab4:	78fb      	ldrb	r3, [r7, #3]
 800fab6:	b29a      	uxth	r2, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2200      	movs	r2, #0
 800fac0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800fac2:	2200      	movs	r2, #0
 800fac4:	2100      	movs	r1, #0
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f000 f9c1 	bl	800fe4e <USBH_CtlReq>
 800facc:	4603      	mov	r3, r0
}
 800face:	4618      	mov	r0, r3
 800fad0:	3708      	adds	r7, #8
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}

0800fad6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800fad6:	b480      	push	{r7}
 800fad8:	b085      	sub	sp, #20
 800fada:	af00      	add	r7, sp, #0
 800fadc:	60f8      	str	r0, [r7, #12]
 800fade:	60b9      	str	r1, [r7, #8]
 800fae0:	4613      	mov	r3, r2
 800fae2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	781a      	ldrb	r2, [r3, #0]
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	785a      	ldrb	r2, [r3, #1]
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	3302      	adds	r3, #2
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	b29a      	uxth	r2, r3
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	3303      	adds	r3, #3
 800fb00:	781b      	ldrb	r3, [r3, #0]
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	021b      	lsls	r3, r3, #8
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	4313      	orrs	r3, r2
 800fb0a:	b29a      	uxth	r2, r3
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	791a      	ldrb	r2, [r3, #4]
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	795a      	ldrb	r2, [r3, #5]
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	799a      	ldrb	r2, [r3, #6]
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	79da      	ldrb	r2, [r3, #7]
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800fb30:	88fb      	ldrh	r3, [r7, #6]
 800fb32:	2b08      	cmp	r3, #8
 800fb34:	d939      	bls.n	800fbaa <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	3308      	adds	r3, #8
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	b29a      	uxth	r2, r3
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	3309      	adds	r3, #9
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	021b      	lsls	r3, r3, #8
 800fb48:	b29b      	uxth	r3, r3
 800fb4a:	4313      	orrs	r3, r2
 800fb4c:	b29a      	uxth	r2, r3
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	330a      	adds	r3, #10
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	b29a      	uxth	r2, r3
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	330b      	adds	r3, #11
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	b29b      	uxth	r3, r3
 800fb62:	021b      	lsls	r3, r3, #8
 800fb64:	b29b      	uxth	r3, r3
 800fb66:	4313      	orrs	r3, r2
 800fb68:	b29a      	uxth	r2, r3
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	330c      	adds	r3, #12
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	330d      	adds	r3, #13
 800fb7a:	781b      	ldrb	r3, [r3, #0]
 800fb7c:	b29b      	uxth	r3, r3
 800fb7e:	021b      	lsls	r3, r3, #8
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	4313      	orrs	r3, r2
 800fb84:	b29a      	uxth	r2, r3
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	7b9a      	ldrb	r2, [r3, #14]
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	7bda      	ldrb	r2, [r3, #15]
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	7c1a      	ldrb	r2, [r3, #16]
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	7c5a      	ldrb	r2, [r3, #17]
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	745a      	strb	r2, [r3, #17]
  }
}
 800fbaa:	bf00      	nop
 800fbac:	3714      	adds	r7, #20
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr

0800fbb6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800fbb6:	b580      	push	{r7, lr}
 800fbb8:	b08a      	sub	sp, #40	; 0x28
 800fbba:	af00      	add	r7, sp, #0
 800fbbc:	60f8      	str	r0, [r7, #12]
 800fbbe:	60b9      	str	r1, [r7, #8]
 800fbc0:	4613      	mov	r3, r2
 800fbc2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	781a      	ldrb	r2, [r3, #0]
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	785a      	ldrb	r2, [r3, #1]
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	3302      	adds	r3, #2
 800fbec:	781b      	ldrb	r3, [r3, #0]
 800fbee:	b29a      	uxth	r2, r3
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	3303      	adds	r3, #3
 800fbf4:	781b      	ldrb	r3, [r3, #0]
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	021b      	lsls	r3, r3, #8
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	b29a      	uxth	r2, r3
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	791a      	ldrb	r2, [r3, #4]
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	795a      	ldrb	r2, [r3, #5]
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	799a      	ldrb	r2, [r3, #6]
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	79da      	ldrb	r2, [r3, #7]
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	7a1a      	ldrb	r2, [r3, #8]
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fc2c:	88fb      	ldrh	r3, [r7, #6]
 800fc2e:	2b09      	cmp	r3, #9
 800fc30:	d95f      	bls.n	800fcf2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800fc32:	2309      	movs	r3, #9
 800fc34:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800fc36:	2300      	movs	r3, #0
 800fc38:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fc3a:	e051      	b.n	800fce0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fc3c:	f107 0316 	add.w	r3, r7, #22
 800fc40:	4619      	mov	r1, r3
 800fc42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc44:	f000 f8e8 	bl	800fe18 <USBH_GetNextDesc>
 800fc48:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800fc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc4c:	785b      	ldrb	r3, [r3, #1]
 800fc4e:	2b04      	cmp	r3, #4
 800fc50:	d146      	bne.n	800fce0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800fc52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc56:	221a      	movs	r2, #26
 800fc58:	fb02 f303 	mul.w	r3, r2, r3
 800fc5c:	3308      	adds	r3, #8
 800fc5e:	68fa      	ldr	r2, [r7, #12]
 800fc60:	4413      	add	r3, r2
 800fc62:	3302      	adds	r3, #2
 800fc64:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800fc66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc68:	69f8      	ldr	r0, [r7, #28]
 800fc6a:	f000 f846 	bl	800fcfa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800fc74:	2300      	movs	r3, #0
 800fc76:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fc78:	e022      	b.n	800fcc0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fc7a:	f107 0316 	add.w	r3, r7, #22
 800fc7e:	4619      	mov	r1, r3
 800fc80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc82:	f000 f8c9 	bl	800fe18 <USBH_GetNextDesc>
 800fc86:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800fc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc8a:	785b      	ldrb	r3, [r3, #1]
 800fc8c:	2b05      	cmp	r3, #5
 800fc8e:	d117      	bne.n	800fcc0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800fc90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc94:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fc98:	3201      	adds	r2, #1
 800fc9a:	00d2      	lsls	r2, r2, #3
 800fc9c:	211a      	movs	r1, #26
 800fc9e:	fb01 f303 	mul.w	r3, r1, r3
 800fca2:	4413      	add	r3, r2
 800fca4:	3308      	adds	r3, #8
 800fca6:	68fa      	ldr	r2, [r7, #12]
 800fca8:	4413      	add	r3, r2
 800fcaa:	3304      	adds	r3, #4
 800fcac:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800fcae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fcb0:	69b8      	ldr	r0, [r7, #24]
 800fcb2:	f000 f851 	bl	800fd58 <USBH_ParseEPDesc>
            ep_ix++;
 800fcb6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fcba:	3301      	adds	r3, #1
 800fcbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	791b      	ldrb	r3, [r3, #4]
 800fcc4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d204      	bcs.n	800fcd6 <USBH_ParseCfgDesc+0x120>
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	885a      	ldrh	r2, [r3, #2]
 800fcd0:	8afb      	ldrh	r3, [r7, #22]
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d8d1      	bhi.n	800fc7a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800fcd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fcda:	3301      	adds	r3, #1
 800fcdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fce0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d804      	bhi.n	800fcf2 <USBH_ParseCfgDesc+0x13c>
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	885a      	ldrh	r2, [r3, #2]
 800fcec:	8afb      	ldrh	r3, [r7, #22]
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d8a4      	bhi.n	800fc3c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800fcf2:	bf00      	nop
 800fcf4:	3728      	adds	r7, #40	; 0x28
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}

0800fcfa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800fcfa:	b480      	push	{r7}
 800fcfc:	b083      	sub	sp, #12
 800fcfe:	af00      	add	r7, sp, #0
 800fd00:	6078      	str	r0, [r7, #4]
 800fd02:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	781a      	ldrb	r2, [r3, #0]
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	785a      	ldrb	r2, [r3, #1]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	789a      	ldrb	r2, [r3, #2]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	78da      	ldrb	r2, [r3, #3]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	791a      	ldrb	r2, [r3, #4]
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	795a      	ldrb	r2, [r3, #5]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	799a      	ldrb	r2, [r3, #6]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	79da      	ldrb	r2, [r3, #7]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	7a1a      	ldrb	r2, [r3, #8]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	721a      	strb	r2, [r3, #8]
}
 800fd4c:	bf00      	nop
 800fd4e:	370c      	adds	r7, #12
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr

0800fd58 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b083      	sub	sp, #12
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	781a      	ldrb	r2, [r3, #0]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	785a      	ldrb	r2, [r3, #1]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	789a      	ldrb	r2, [r3, #2]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	78da      	ldrb	r2, [r3, #3]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	3304      	adds	r3, #4
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	3305      	adds	r3, #5
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	b29b      	uxth	r3, r3
 800fd92:	021b      	lsls	r3, r3, #8
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	4313      	orrs	r3, r2
 800fd98:	b29a      	uxth	r2, r3
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	799a      	ldrb	r2, [r3, #6]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	719a      	strb	r2, [r3, #6]
}
 800fda6:	bf00      	nop
 800fda8:	370c      	adds	r7, #12
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr

0800fdb2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800fdb2:	b480      	push	{r7}
 800fdb4:	b087      	sub	sp, #28
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	60f8      	str	r0, [r7, #12]
 800fdba:	60b9      	str	r1, [r7, #8]
 800fdbc:	4613      	mov	r3, r2
 800fdbe:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	3301      	adds	r3, #1
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	2b03      	cmp	r3, #3
 800fdc8:	d120      	bne.n	800fe0c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	781b      	ldrb	r3, [r3, #0]
 800fdce:	1e9a      	subs	r2, r3, #2
 800fdd0:	88fb      	ldrh	r3, [r7, #6]
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	bf28      	it	cs
 800fdd6:	4613      	movcs	r3, r2
 800fdd8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	3302      	adds	r3, #2
 800fdde:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800fde0:	2300      	movs	r3, #0
 800fde2:	82fb      	strh	r3, [r7, #22]
 800fde4:	e00b      	b.n	800fdfe <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800fde6:	8afb      	ldrh	r3, [r7, #22]
 800fde8:	68fa      	ldr	r2, [r7, #12]
 800fdea:	4413      	add	r3, r2
 800fdec:	781a      	ldrb	r2, [r3, #0]
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800fdf8:	8afb      	ldrh	r3, [r7, #22]
 800fdfa:	3302      	adds	r3, #2
 800fdfc:	82fb      	strh	r3, [r7, #22]
 800fdfe:	8afa      	ldrh	r2, [r7, #22]
 800fe00:	8abb      	ldrh	r3, [r7, #20]
 800fe02:	429a      	cmp	r2, r3
 800fe04:	d3ef      	bcc.n	800fde6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	701a      	strb	r2, [r3, #0]
  }
}
 800fe0c:	bf00      	nop
 800fe0e:	371c      	adds	r7, #28
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr

0800fe18 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b085      	sub	sp, #20
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	881a      	ldrh	r2, [r3, #0]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	4413      	add	r3, r2
 800fe2e:	b29a      	uxth	r2, r3
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fe40:	68fb      	ldr	r3, [r7, #12]
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3714      	adds	r7, #20
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr

0800fe4e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b086      	sub	sp, #24
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	60f8      	str	r0, [r7, #12]
 800fe56:	60b9      	str	r1, [r7, #8]
 800fe58:	4613      	mov	r3, r2
 800fe5a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	789b      	ldrb	r3, [r3, #2]
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d002      	beq.n	800fe6e <USBH_CtlReq+0x20>
 800fe68:	2b02      	cmp	r3, #2
 800fe6a:	d00f      	beq.n	800fe8c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800fe6c:	e027      	b.n	800febe <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	68ba      	ldr	r2, [r7, #8]
 800fe72:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	88fa      	ldrh	r2, [r7, #6]
 800fe78:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	2201      	movs	r2, #1
 800fe7e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	2202      	movs	r2, #2
 800fe84:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800fe86:	2301      	movs	r3, #1
 800fe88:	75fb      	strb	r3, [r7, #23]
      break;
 800fe8a:	e018      	b.n	800febe <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800fe8c:	68f8      	ldr	r0, [r7, #12]
 800fe8e:	f000 f81b 	bl	800fec8 <USBH_HandleControl>
 800fe92:	4603      	mov	r3, r0
 800fe94:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800fe96:	7dfb      	ldrb	r3, [r7, #23]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d002      	beq.n	800fea2 <USBH_CtlReq+0x54>
 800fe9c:	7dfb      	ldrb	r3, [r7, #23]
 800fe9e:	2b03      	cmp	r3, #3
 800fea0:	d106      	bne.n	800feb0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	2201      	movs	r2, #1
 800fea6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2200      	movs	r2, #0
 800feac:	761a      	strb	r2, [r3, #24]
      break;
 800feae:	e005      	b.n	800febc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800feb0:	7dfb      	ldrb	r3, [r7, #23]
 800feb2:	2b02      	cmp	r3, #2
 800feb4:	d102      	bne.n	800febc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	2201      	movs	r2, #1
 800feba:	709a      	strb	r2, [r3, #2]
      break;
 800febc:	bf00      	nop
  }
  return status;
 800febe:	7dfb      	ldrb	r3, [r7, #23]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3718      	adds	r7, #24
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b086      	sub	sp, #24
 800fecc:	af02      	add	r7, sp, #8
 800fece:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fed0:	2301      	movs	r3, #1
 800fed2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fed4:	2300      	movs	r3, #0
 800fed6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	7e1b      	ldrb	r3, [r3, #24]
 800fedc:	3b01      	subs	r3, #1
 800fede:	2b0a      	cmp	r3, #10
 800fee0:	f200 8156 	bhi.w	8010190 <USBH_HandleControl+0x2c8>
 800fee4:	a201      	add	r2, pc, #4	; (adr r2, 800feec <USBH_HandleControl+0x24>)
 800fee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feea:	bf00      	nop
 800feec:	0800ff19 	.word	0x0800ff19
 800fef0:	0800ff33 	.word	0x0800ff33
 800fef4:	0800ff9d 	.word	0x0800ff9d
 800fef8:	0800ffc3 	.word	0x0800ffc3
 800fefc:	0800fffb 	.word	0x0800fffb
 800ff00:	08010025 	.word	0x08010025
 800ff04:	08010077 	.word	0x08010077
 800ff08:	08010099 	.word	0x08010099
 800ff0c:	080100d5 	.word	0x080100d5
 800ff10:	080100fb 	.word	0x080100fb
 800ff14:	08010139 	.word	0x08010139
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f103 0110 	add.w	r1, r3, #16
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	795b      	ldrb	r3, [r3, #5]
 800ff22:	461a      	mov	r2, r3
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 f943 	bl	80101b0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2202      	movs	r2, #2
 800ff2e:	761a      	strb	r2, [r3, #24]
      break;
 800ff30:	e139      	b.n	80101a6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	795b      	ldrb	r3, [r3, #5]
 800ff36:	4619      	mov	r1, r3
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f000 fcc5 	bl	80108c8 <USBH_LL_GetURBState>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ff42:	7bbb      	ldrb	r3, [r7, #14]
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	d11e      	bne.n	800ff86 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	7c1b      	ldrb	r3, [r3, #16]
 800ff4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ff50:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	8adb      	ldrh	r3, [r3, #22]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d00a      	beq.n	800ff70 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ff5a:	7b7b      	ldrb	r3, [r7, #13]
 800ff5c:	2b80      	cmp	r3, #128	; 0x80
 800ff5e:	d103      	bne.n	800ff68 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2203      	movs	r2, #3
 800ff64:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ff66:	e115      	b.n	8010194 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2205      	movs	r2, #5
 800ff6c:	761a      	strb	r2, [r3, #24]
      break;
 800ff6e:	e111      	b.n	8010194 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ff70:	7b7b      	ldrb	r3, [r7, #13]
 800ff72:	2b80      	cmp	r3, #128	; 0x80
 800ff74:	d103      	bne.n	800ff7e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2209      	movs	r2, #9
 800ff7a:	761a      	strb	r2, [r3, #24]
      break;
 800ff7c:	e10a      	b.n	8010194 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2207      	movs	r2, #7
 800ff82:	761a      	strb	r2, [r3, #24]
      break;
 800ff84:	e106      	b.n	8010194 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ff86:	7bbb      	ldrb	r3, [r7, #14]
 800ff88:	2b04      	cmp	r3, #4
 800ff8a:	d003      	beq.n	800ff94 <USBH_HandleControl+0xcc>
 800ff8c:	7bbb      	ldrb	r3, [r7, #14]
 800ff8e:	2b02      	cmp	r3, #2
 800ff90:	f040 8100 	bne.w	8010194 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	220b      	movs	r2, #11
 800ff98:	761a      	strb	r2, [r3, #24]
      break;
 800ff9a:	e0fb      	b.n	8010194 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ffa2:	b29a      	uxth	r2, r3
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6899      	ldr	r1, [r3, #8]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	899a      	ldrh	r2, [r3, #12]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	791b      	ldrb	r3, [r3, #4]
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f000 f93a 	bl	801022e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2204      	movs	r2, #4
 800ffbe:	761a      	strb	r2, [r3, #24]
      break;
 800ffc0:	e0f1      	b.n	80101a6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	791b      	ldrb	r3, [r3, #4]
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f000 fc7d 	bl	80108c8 <USBH_LL_GetURBState>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ffd2:	7bbb      	ldrb	r3, [r7, #14]
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	d102      	bne.n	800ffde <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2209      	movs	r2, #9
 800ffdc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ffde:	7bbb      	ldrb	r3, [r7, #14]
 800ffe0:	2b05      	cmp	r3, #5
 800ffe2:	d102      	bne.n	800ffea <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ffe4:	2303      	movs	r3, #3
 800ffe6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ffe8:	e0d6      	b.n	8010198 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ffea:	7bbb      	ldrb	r3, [r7, #14]
 800ffec:	2b04      	cmp	r3, #4
 800ffee:	f040 80d3 	bne.w	8010198 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	220b      	movs	r2, #11
 800fff6:	761a      	strb	r2, [r3, #24]
      break;
 800fff8:	e0ce      	b.n	8010198 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6899      	ldr	r1, [r3, #8]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	899a      	ldrh	r2, [r3, #12]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	795b      	ldrb	r3, [r3, #5]
 8010006:	2001      	movs	r0, #1
 8010008:	9000      	str	r0, [sp, #0]
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f000 f8ea 	bl	80101e4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010016:	b29a      	uxth	r2, r3
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2206      	movs	r2, #6
 8010020:	761a      	strb	r2, [r3, #24]
      break;
 8010022:	e0c0      	b.n	80101a6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	795b      	ldrb	r3, [r3, #5]
 8010028:	4619      	mov	r1, r3
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f000 fc4c 	bl	80108c8 <USBH_LL_GetURBState>
 8010030:	4603      	mov	r3, r0
 8010032:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010034:	7bbb      	ldrb	r3, [r7, #14]
 8010036:	2b01      	cmp	r3, #1
 8010038:	d103      	bne.n	8010042 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2207      	movs	r2, #7
 801003e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010040:	e0ac      	b.n	801019c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8010042:	7bbb      	ldrb	r3, [r7, #14]
 8010044:	2b05      	cmp	r3, #5
 8010046:	d105      	bne.n	8010054 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	220c      	movs	r2, #12
 801004c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801004e:	2303      	movs	r3, #3
 8010050:	73fb      	strb	r3, [r7, #15]
      break;
 8010052:	e0a3      	b.n	801019c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010054:	7bbb      	ldrb	r3, [r7, #14]
 8010056:	2b02      	cmp	r3, #2
 8010058:	d103      	bne.n	8010062 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2205      	movs	r2, #5
 801005e:	761a      	strb	r2, [r3, #24]
      break;
 8010060:	e09c      	b.n	801019c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8010062:	7bbb      	ldrb	r3, [r7, #14]
 8010064:	2b04      	cmp	r3, #4
 8010066:	f040 8099 	bne.w	801019c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	220b      	movs	r2, #11
 801006e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010070:	2302      	movs	r3, #2
 8010072:	73fb      	strb	r3, [r7, #15]
      break;
 8010074:	e092      	b.n	801019c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	791b      	ldrb	r3, [r3, #4]
 801007a:	2200      	movs	r2, #0
 801007c:	2100      	movs	r1, #0
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f000 f8d5 	bl	801022e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801008a:	b29a      	uxth	r2, r3
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2208      	movs	r2, #8
 8010094:	761a      	strb	r2, [r3, #24]

      break;
 8010096:	e086      	b.n	80101a6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	791b      	ldrb	r3, [r3, #4]
 801009c:	4619      	mov	r1, r3
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f000 fc12 	bl	80108c8 <USBH_LL_GetURBState>
 80100a4:	4603      	mov	r3, r0
 80100a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80100a8:	7bbb      	ldrb	r3, [r7, #14]
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	d105      	bne.n	80100ba <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	220d      	movs	r2, #13
 80100b2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80100b4:	2300      	movs	r3, #0
 80100b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80100b8:	e072      	b.n	80101a0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80100ba:	7bbb      	ldrb	r3, [r7, #14]
 80100bc:	2b04      	cmp	r3, #4
 80100be:	d103      	bne.n	80100c8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	220b      	movs	r2, #11
 80100c4:	761a      	strb	r2, [r3, #24]
      break;
 80100c6:	e06b      	b.n	80101a0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80100c8:	7bbb      	ldrb	r3, [r7, #14]
 80100ca:	2b05      	cmp	r3, #5
 80100cc:	d168      	bne.n	80101a0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80100ce:	2303      	movs	r3, #3
 80100d0:	73fb      	strb	r3, [r7, #15]
      break;
 80100d2:	e065      	b.n	80101a0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	795b      	ldrb	r3, [r3, #5]
 80100d8:	2201      	movs	r2, #1
 80100da:	9200      	str	r2, [sp, #0]
 80100dc:	2200      	movs	r2, #0
 80100de:	2100      	movs	r1, #0
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f000 f87f 	bl	80101e4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80100ec:	b29a      	uxth	r2, r3
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	220a      	movs	r2, #10
 80100f6:	761a      	strb	r2, [r3, #24]
      break;
 80100f8:	e055      	b.n	80101a6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	795b      	ldrb	r3, [r3, #5]
 80100fe:	4619      	mov	r1, r3
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f000 fbe1 	bl	80108c8 <USBH_LL_GetURBState>
 8010106:	4603      	mov	r3, r0
 8010108:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801010a:	7bbb      	ldrb	r3, [r7, #14]
 801010c:	2b01      	cmp	r3, #1
 801010e:	d105      	bne.n	801011c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8010110:	2300      	movs	r3, #0
 8010112:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	220d      	movs	r2, #13
 8010118:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801011a:	e043      	b.n	80101a4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 801011c:	7bbb      	ldrb	r3, [r7, #14]
 801011e:	2b02      	cmp	r3, #2
 8010120:	d103      	bne.n	801012a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2209      	movs	r2, #9
 8010126:	761a      	strb	r2, [r3, #24]
      break;
 8010128:	e03c      	b.n	80101a4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 801012a:	7bbb      	ldrb	r3, [r7, #14]
 801012c:	2b04      	cmp	r3, #4
 801012e:	d139      	bne.n	80101a4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	220b      	movs	r2, #11
 8010134:	761a      	strb	r2, [r3, #24]
      break;
 8010136:	e035      	b.n	80101a4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	7e5b      	ldrb	r3, [r3, #25]
 801013c:	3301      	adds	r3, #1
 801013e:	b2da      	uxtb	r2, r3
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	765a      	strb	r2, [r3, #25]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	7e5b      	ldrb	r3, [r3, #25]
 8010148:	2b02      	cmp	r3, #2
 801014a:	d806      	bhi.n	801015a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2201      	movs	r2, #1
 8010150:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2201      	movs	r2, #1
 8010156:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010158:	e025      	b.n	80101a6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010160:	2106      	movs	r1, #6
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	2200      	movs	r2, #0
 801016a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	795b      	ldrb	r3, [r3, #5]
 8010170:	4619      	mov	r1, r3
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f000 f90c 	bl	8010390 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	791b      	ldrb	r3, [r3, #4]
 801017c:	4619      	mov	r1, r3
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f000 f906 	bl	8010390 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2200      	movs	r2, #0
 8010188:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801018a:	2302      	movs	r3, #2
 801018c:	73fb      	strb	r3, [r7, #15]
      break;
 801018e:	e00a      	b.n	80101a6 <USBH_HandleControl+0x2de>

    default:
      break;
 8010190:	bf00      	nop
 8010192:	e008      	b.n	80101a6 <USBH_HandleControl+0x2de>
      break;
 8010194:	bf00      	nop
 8010196:	e006      	b.n	80101a6 <USBH_HandleControl+0x2de>
      break;
 8010198:	bf00      	nop
 801019a:	e004      	b.n	80101a6 <USBH_HandleControl+0x2de>
      break;
 801019c:	bf00      	nop
 801019e:	e002      	b.n	80101a6 <USBH_HandleControl+0x2de>
      break;
 80101a0:	bf00      	nop
 80101a2:	e000      	b.n	80101a6 <USBH_HandleControl+0x2de>
      break;
 80101a4:	bf00      	nop
  }

  return status;
 80101a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3710      	adds	r7, #16
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b088      	sub	sp, #32
 80101b4:	af04      	add	r7, sp, #16
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	60b9      	str	r1, [r7, #8]
 80101ba:	4613      	mov	r3, r2
 80101bc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80101be:	79f9      	ldrb	r1, [r7, #7]
 80101c0:	2300      	movs	r3, #0
 80101c2:	9303      	str	r3, [sp, #12]
 80101c4:	2308      	movs	r3, #8
 80101c6:	9302      	str	r3, [sp, #8]
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	9301      	str	r3, [sp, #4]
 80101cc:	2300      	movs	r3, #0
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	2300      	movs	r3, #0
 80101d2:	2200      	movs	r2, #0
 80101d4:	68f8      	ldr	r0, [r7, #12]
 80101d6:	f000 fb46 	bl	8010866 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80101da:	2300      	movs	r3, #0
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3710      	adds	r7, #16
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}

080101e4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b088      	sub	sp, #32
 80101e8:	af04      	add	r7, sp, #16
 80101ea:	60f8      	str	r0, [r7, #12]
 80101ec:	60b9      	str	r1, [r7, #8]
 80101ee:	4611      	mov	r1, r2
 80101f0:	461a      	mov	r2, r3
 80101f2:	460b      	mov	r3, r1
 80101f4:	80fb      	strh	r3, [r7, #6]
 80101f6:	4613      	mov	r3, r2
 80101f8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010200:	2b00      	cmp	r3, #0
 8010202:	d001      	beq.n	8010208 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010204:	2300      	movs	r3, #0
 8010206:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010208:	7979      	ldrb	r1, [r7, #5]
 801020a:	7e3b      	ldrb	r3, [r7, #24]
 801020c:	9303      	str	r3, [sp, #12]
 801020e:	88fb      	ldrh	r3, [r7, #6]
 8010210:	9302      	str	r3, [sp, #8]
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	9301      	str	r3, [sp, #4]
 8010216:	2301      	movs	r3, #1
 8010218:	9300      	str	r3, [sp, #0]
 801021a:	2300      	movs	r3, #0
 801021c:	2200      	movs	r2, #0
 801021e:	68f8      	ldr	r0, [r7, #12]
 8010220:	f000 fb21 	bl	8010866 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010224:	2300      	movs	r3, #0
}
 8010226:	4618      	mov	r0, r3
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801022e:	b580      	push	{r7, lr}
 8010230:	b088      	sub	sp, #32
 8010232:	af04      	add	r7, sp, #16
 8010234:	60f8      	str	r0, [r7, #12]
 8010236:	60b9      	str	r1, [r7, #8]
 8010238:	4611      	mov	r1, r2
 801023a:	461a      	mov	r2, r3
 801023c:	460b      	mov	r3, r1
 801023e:	80fb      	strh	r3, [r7, #6]
 8010240:	4613      	mov	r3, r2
 8010242:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010244:	7979      	ldrb	r1, [r7, #5]
 8010246:	2300      	movs	r3, #0
 8010248:	9303      	str	r3, [sp, #12]
 801024a:	88fb      	ldrh	r3, [r7, #6]
 801024c:	9302      	str	r3, [sp, #8]
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	9301      	str	r3, [sp, #4]
 8010252:	2301      	movs	r3, #1
 8010254:	9300      	str	r3, [sp, #0]
 8010256:	2300      	movs	r3, #0
 8010258:	2201      	movs	r2, #1
 801025a:	68f8      	ldr	r0, [r7, #12]
 801025c:	f000 fb03 	bl	8010866 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010260:	2300      	movs	r3, #0

}
 8010262:	4618      	mov	r0, r3
 8010264:	3710      	adds	r7, #16
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}

0801026a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801026a:	b580      	push	{r7, lr}
 801026c:	b088      	sub	sp, #32
 801026e:	af04      	add	r7, sp, #16
 8010270:	60f8      	str	r0, [r7, #12]
 8010272:	60b9      	str	r1, [r7, #8]
 8010274:	4611      	mov	r1, r2
 8010276:	461a      	mov	r2, r3
 8010278:	460b      	mov	r3, r1
 801027a:	80fb      	strh	r3, [r7, #6]
 801027c:	4613      	mov	r3, r2
 801027e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010286:	2b00      	cmp	r3, #0
 8010288:	d001      	beq.n	801028e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801028a:	2300      	movs	r3, #0
 801028c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801028e:	7979      	ldrb	r1, [r7, #5]
 8010290:	7e3b      	ldrb	r3, [r7, #24]
 8010292:	9303      	str	r3, [sp, #12]
 8010294:	88fb      	ldrh	r3, [r7, #6]
 8010296:	9302      	str	r3, [sp, #8]
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	9301      	str	r3, [sp, #4]
 801029c:	2301      	movs	r3, #1
 801029e:	9300      	str	r3, [sp, #0]
 80102a0:	2302      	movs	r3, #2
 80102a2:	2200      	movs	r2, #0
 80102a4:	68f8      	ldr	r0, [r7, #12]
 80102a6:	f000 fade 	bl	8010866 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80102aa:	2300      	movs	r3, #0
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	3710      	adds	r7, #16
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}

080102b4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b088      	sub	sp, #32
 80102b8:	af04      	add	r7, sp, #16
 80102ba:	60f8      	str	r0, [r7, #12]
 80102bc:	60b9      	str	r1, [r7, #8]
 80102be:	4611      	mov	r1, r2
 80102c0:	461a      	mov	r2, r3
 80102c2:	460b      	mov	r3, r1
 80102c4:	80fb      	strh	r3, [r7, #6]
 80102c6:	4613      	mov	r3, r2
 80102c8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80102ca:	7979      	ldrb	r1, [r7, #5]
 80102cc:	2300      	movs	r3, #0
 80102ce:	9303      	str	r3, [sp, #12]
 80102d0:	88fb      	ldrh	r3, [r7, #6]
 80102d2:	9302      	str	r3, [sp, #8]
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	9301      	str	r3, [sp, #4]
 80102d8:	2301      	movs	r3, #1
 80102da:	9300      	str	r3, [sp, #0]
 80102dc:	2302      	movs	r3, #2
 80102de:	2201      	movs	r2, #1
 80102e0:	68f8      	ldr	r0, [r7, #12]
 80102e2:	f000 fac0 	bl	8010866 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80102e6:	2300      	movs	r3, #0
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	3710      	adds	r7, #16
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b086      	sub	sp, #24
 80102f4:	af04      	add	r7, sp, #16
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	4608      	mov	r0, r1
 80102fa:	4611      	mov	r1, r2
 80102fc:	461a      	mov	r2, r3
 80102fe:	4603      	mov	r3, r0
 8010300:	70fb      	strb	r3, [r7, #3]
 8010302:	460b      	mov	r3, r1
 8010304:	70bb      	strb	r3, [r7, #2]
 8010306:	4613      	mov	r3, r2
 8010308:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801030a:	7878      	ldrb	r0, [r7, #1]
 801030c:	78ba      	ldrb	r2, [r7, #2]
 801030e:	78f9      	ldrb	r1, [r7, #3]
 8010310:	8b3b      	ldrh	r3, [r7, #24]
 8010312:	9302      	str	r3, [sp, #8]
 8010314:	7d3b      	ldrb	r3, [r7, #20]
 8010316:	9301      	str	r3, [sp, #4]
 8010318:	7c3b      	ldrb	r3, [r7, #16]
 801031a:	9300      	str	r3, [sp, #0]
 801031c:	4603      	mov	r3, r0
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f000 fa53 	bl	80107ca <USBH_LL_OpenPipe>

  return USBH_OK;
 8010324:	2300      	movs	r3, #0
}
 8010326:	4618      	mov	r0, r3
 8010328:	3708      	adds	r7, #8
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801032e:	b580      	push	{r7, lr}
 8010330:	b082      	sub	sp, #8
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
 8010336:	460b      	mov	r3, r1
 8010338:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 801033a:	78fb      	ldrb	r3, [r7, #3]
 801033c:	4619      	mov	r1, r3
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f000 fa72 	bl	8010828 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010344:	2300      	movs	r3, #0
}
 8010346:	4618      	mov	r0, r3
 8010348:	3708      	adds	r7, #8
 801034a:	46bd      	mov	sp, r7
 801034c:	bd80      	pop	{r7, pc}

0801034e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801034e:	b580      	push	{r7, lr}
 8010350:	b084      	sub	sp, #16
 8010352:	af00      	add	r7, sp, #0
 8010354:	6078      	str	r0, [r7, #4]
 8010356:	460b      	mov	r3, r1
 8010358:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f000 f836 	bl	80103cc <USBH_GetFreePipe>
 8010360:	4603      	mov	r3, r0
 8010362:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010364:	89fb      	ldrh	r3, [r7, #14]
 8010366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801036a:	4293      	cmp	r3, r2
 801036c:	d00a      	beq.n	8010384 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801036e:	78fa      	ldrb	r2, [r7, #3]
 8010370:	89fb      	ldrh	r3, [r7, #14]
 8010372:	f003 030f 	and.w	r3, r3, #15
 8010376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801037a:	6879      	ldr	r1, [r7, #4]
 801037c:	33e0      	adds	r3, #224	; 0xe0
 801037e:	009b      	lsls	r3, r3, #2
 8010380:	440b      	add	r3, r1
 8010382:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010384:	89fb      	ldrh	r3, [r7, #14]
 8010386:	b2db      	uxtb	r3, r3
}
 8010388:	4618      	mov	r0, r3
 801038a:	3710      	adds	r7, #16
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010390:	b480      	push	{r7}
 8010392:	b083      	sub	sp, #12
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	460b      	mov	r3, r1
 801039a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 801039c:	78fb      	ldrb	r3, [r7, #3]
 801039e:	2b0a      	cmp	r3, #10
 80103a0:	d80d      	bhi.n	80103be <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80103a2:	78fb      	ldrb	r3, [r7, #3]
 80103a4:	687a      	ldr	r2, [r7, #4]
 80103a6:	33e0      	adds	r3, #224	; 0xe0
 80103a8:	009b      	lsls	r3, r3, #2
 80103aa:	4413      	add	r3, r2
 80103ac:	685a      	ldr	r2, [r3, #4]
 80103ae:	78fb      	ldrb	r3, [r7, #3]
 80103b0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80103b4:	6879      	ldr	r1, [r7, #4]
 80103b6:	33e0      	adds	r3, #224	; 0xe0
 80103b8:	009b      	lsls	r3, r3, #2
 80103ba:	440b      	add	r3, r1
 80103bc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80103be:	2300      	movs	r3, #0
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	370c      	adds	r7, #12
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80103cc:	b480      	push	{r7}
 80103ce:	b085      	sub	sp, #20
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80103d4:	2300      	movs	r3, #0
 80103d6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80103d8:	2300      	movs	r3, #0
 80103da:	73fb      	strb	r3, [r7, #15]
 80103dc:	e00f      	b.n	80103fe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80103de:	7bfb      	ldrb	r3, [r7, #15]
 80103e0:	687a      	ldr	r2, [r7, #4]
 80103e2:	33e0      	adds	r3, #224	; 0xe0
 80103e4:	009b      	lsls	r3, r3, #2
 80103e6:	4413      	add	r3, r2
 80103e8:	685b      	ldr	r3, [r3, #4]
 80103ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d102      	bne.n	80103f8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80103f2:	7bfb      	ldrb	r3, [r7, #15]
 80103f4:	b29b      	uxth	r3, r3
 80103f6:	e007      	b.n	8010408 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80103f8:	7bfb      	ldrb	r3, [r7, #15]
 80103fa:	3301      	adds	r3, #1
 80103fc:	73fb      	strb	r3, [r7, #15]
 80103fe:	7bfb      	ldrb	r3, [r7, #15]
 8010400:	2b0a      	cmp	r3, #10
 8010402:	d9ec      	bls.n	80103de <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010404:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8010408:	4618      	mov	r0, r3
 801040a:	3714      	adds	r7, #20
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr

08010414 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010418:	2201      	movs	r2, #1
 801041a:	490e      	ldr	r1, [pc, #56]	; (8010454 <MX_USB_HOST_Init+0x40>)
 801041c:	480e      	ldr	r0, [pc, #56]	; (8010458 <MX_USB_HOST_Init+0x44>)
 801041e:	f7fe fca1 	bl	800ed64 <USBH_Init>
 8010422:	4603      	mov	r3, r0
 8010424:	2b00      	cmp	r3, #0
 8010426:	d001      	beq.n	801042c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010428:	f7f1 fc32 	bl	8001c90 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801042c:	490b      	ldr	r1, [pc, #44]	; (801045c <MX_USB_HOST_Init+0x48>)
 801042e:	480a      	ldr	r0, [pc, #40]	; (8010458 <MX_USB_HOST_Init+0x44>)
 8010430:	f7fe fd26 	bl	800ee80 <USBH_RegisterClass>
 8010434:	4603      	mov	r3, r0
 8010436:	2b00      	cmp	r3, #0
 8010438:	d001      	beq.n	801043e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801043a:	f7f1 fc29 	bl	8001c90 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801043e:	4806      	ldr	r0, [pc, #24]	; (8010458 <MX_USB_HOST_Init+0x44>)
 8010440:	f7fe fdaa 	bl	800ef98 <USBH_Start>
 8010444:	4603      	mov	r3, r0
 8010446:	2b00      	cmp	r3, #0
 8010448:	d001      	beq.n	801044e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801044a:	f7f1 fc21 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801044e:	bf00      	nop
 8010450:	bd80      	pop	{r7, pc}
 8010452:	bf00      	nop
 8010454:	08010475 	.word	0x08010475
 8010458:	20000730 	.word	0x20000730
 801045c:	20000274 	.word	0x20000274

08010460 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010464:	4802      	ldr	r0, [pc, #8]	; (8010470 <MX_USB_HOST_Process+0x10>)
 8010466:	f7fe fda7 	bl	800efb8 <USBH_Process>
}
 801046a:	bf00      	nop
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	20000730 	.word	0x20000730

08010474 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010474:	b480      	push	{r7}
 8010476:	b083      	sub	sp, #12
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	460b      	mov	r3, r1
 801047e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010480:	78fb      	ldrb	r3, [r7, #3]
 8010482:	3b01      	subs	r3, #1
 8010484:	2b04      	cmp	r3, #4
 8010486:	d819      	bhi.n	80104bc <USBH_UserProcess+0x48>
 8010488:	a201      	add	r2, pc, #4	; (adr r2, 8010490 <USBH_UserProcess+0x1c>)
 801048a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801048e:	bf00      	nop
 8010490:	080104bd 	.word	0x080104bd
 8010494:	080104ad 	.word	0x080104ad
 8010498:	080104bd 	.word	0x080104bd
 801049c:	080104b5 	.word	0x080104b5
 80104a0:	080104a5 	.word	0x080104a5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80104a4:	4b09      	ldr	r3, [pc, #36]	; (80104cc <USBH_UserProcess+0x58>)
 80104a6:	2203      	movs	r2, #3
 80104a8:	701a      	strb	r2, [r3, #0]
  break;
 80104aa:	e008      	b.n	80104be <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80104ac:	4b07      	ldr	r3, [pc, #28]	; (80104cc <USBH_UserProcess+0x58>)
 80104ae:	2202      	movs	r2, #2
 80104b0:	701a      	strb	r2, [r3, #0]
  break;
 80104b2:	e004      	b.n	80104be <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80104b4:	4b05      	ldr	r3, [pc, #20]	; (80104cc <USBH_UserProcess+0x58>)
 80104b6:	2201      	movs	r2, #1
 80104b8:	701a      	strb	r2, [r3, #0]
  break;
 80104ba:	e000      	b.n	80104be <USBH_UserProcess+0x4a>

  default:
  break;
 80104bc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80104be:	bf00      	nop
 80104c0:	370c      	adds	r7, #12
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr
 80104ca:	bf00      	nop
 80104cc:	2000032d 	.word	0x2000032d

080104d0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b08a      	sub	sp, #40	; 0x28
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80104d8:	f107 0314 	add.w	r3, r7, #20
 80104dc:	2200      	movs	r2, #0
 80104de:	601a      	str	r2, [r3, #0]
 80104e0:	605a      	str	r2, [r3, #4]
 80104e2:	609a      	str	r2, [r3, #8]
 80104e4:	60da      	str	r2, [r3, #12]
 80104e6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80104f0:	d147      	bne.n	8010582 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80104f2:	2300      	movs	r3, #0
 80104f4:	613b      	str	r3, [r7, #16]
 80104f6:	4b25      	ldr	r3, [pc, #148]	; (801058c <HAL_HCD_MspInit+0xbc>)
 80104f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104fa:	4a24      	ldr	r2, [pc, #144]	; (801058c <HAL_HCD_MspInit+0xbc>)
 80104fc:	f043 0301 	orr.w	r3, r3, #1
 8010500:	6313      	str	r3, [r2, #48]	; 0x30
 8010502:	4b22      	ldr	r3, [pc, #136]	; (801058c <HAL_HCD_MspInit+0xbc>)
 8010504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010506:	f003 0301 	and.w	r3, r3, #1
 801050a:	613b      	str	r3, [r7, #16]
 801050c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 801050e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010514:	2300      	movs	r3, #0
 8010516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010518:	2300      	movs	r3, #0
 801051a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 801051c:	f107 0314 	add.w	r3, r7, #20
 8010520:	4619      	mov	r1, r3
 8010522:	481b      	ldr	r0, [pc, #108]	; (8010590 <HAL_HCD_MspInit+0xc0>)
 8010524:	f7f6 fef6 	bl	8007314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010528:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801052c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801052e:	2302      	movs	r3, #2
 8010530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010532:	2300      	movs	r3, #0
 8010534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010536:	2300      	movs	r3, #0
 8010538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801053a:	230a      	movs	r3, #10
 801053c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801053e:	f107 0314 	add.w	r3, r7, #20
 8010542:	4619      	mov	r1, r3
 8010544:	4812      	ldr	r0, [pc, #72]	; (8010590 <HAL_HCD_MspInit+0xc0>)
 8010546:	f7f6 fee5 	bl	8007314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801054a:	4b10      	ldr	r3, [pc, #64]	; (801058c <HAL_HCD_MspInit+0xbc>)
 801054c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801054e:	4a0f      	ldr	r2, [pc, #60]	; (801058c <HAL_HCD_MspInit+0xbc>)
 8010550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010554:	6353      	str	r3, [r2, #52]	; 0x34
 8010556:	2300      	movs	r3, #0
 8010558:	60fb      	str	r3, [r7, #12]
 801055a:	4b0c      	ldr	r3, [pc, #48]	; (801058c <HAL_HCD_MspInit+0xbc>)
 801055c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801055e:	4a0b      	ldr	r2, [pc, #44]	; (801058c <HAL_HCD_MspInit+0xbc>)
 8010560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010564:	6453      	str	r3, [r2, #68]	; 0x44
 8010566:	4b09      	ldr	r3, [pc, #36]	; (801058c <HAL_HCD_MspInit+0xbc>)
 8010568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801056a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801056e:	60fb      	str	r3, [r7, #12]
 8010570:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010572:	2200      	movs	r2, #0
 8010574:	2100      	movs	r1, #0
 8010576:	2043      	movs	r0, #67	; 0x43
 8010578:	f7f6 fe95 	bl	80072a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801057c:	2043      	movs	r0, #67	; 0x43
 801057e:	f7f6 feae 	bl	80072de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010582:	bf00      	nop
 8010584:	3728      	adds	r7, #40	; 0x28
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	bf00      	nop
 801058c:	40023800 	.word	0x40023800
 8010590:	40020000 	.word	0x40020000

08010594 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7ff f8db 	bl	800f75e <USBH_LL_IncTimer>
}
 80105a8:	bf00      	nop
 80105aa:	3708      	adds	r7, #8
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80105be:	4618      	mov	r0, r3
 80105c0:	f7ff f913 	bl	800f7ea <USBH_LL_Connect>
}
 80105c4:	bf00      	nop
 80105c6:	3708      	adds	r7, #8
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80105da:	4618      	mov	r0, r3
 80105dc:	f7ff f91c 	bl	800f818 <USBH_LL_Disconnect>
}
 80105e0:	bf00      	nop
 80105e2:	3708      	adds	r7, #8
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}

080105e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80105e8:	b480      	push	{r7}
 80105ea:	b083      	sub	sp, #12
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	460b      	mov	r3, r1
 80105f2:	70fb      	strb	r3, [r7, #3]
 80105f4:	4613      	mov	r3, r2
 80105f6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80105f8:	bf00      	nop
 80105fa:	370c      	adds	r7, #12
 80105fc:	46bd      	mov	sp, r7
 80105fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010602:	4770      	bx	lr

08010604 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010612:	4618      	mov	r0, r3
 8010614:	f7ff f8cd 	bl	800f7b2 <USBH_LL_PortEnabled>
}
 8010618:	bf00      	nop
 801061a:	3708      	adds	r7, #8
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801062e:	4618      	mov	r0, r3
 8010630:	f7ff f8cd 	bl	800f7ce <USBH_LL_PortDisabled>
}
 8010634:	bf00      	nop
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801064a:	2b01      	cmp	r3, #1
 801064c:	d12a      	bne.n	80106a4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801064e:	4a18      	ldr	r2, [pc, #96]	; (80106b0 <USBH_LL_Init+0x74>)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	4a15      	ldr	r2, [pc, #84]	; (80106b0 <USBH_LL_Init+0x74>)
 801065a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801065e:	4b14      	ldr	r3, [pc, #80]	; (80106b0 <USBH_LL_Init+0x74>)
 8010660:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010664:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010666:	4b12      	ldr	r3, [pc, #72]	; (80106b0 <USBH_LL_Init+0x74>)
 8010668:	2208      	movs	r2, #8
 801066a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801066c:	4b10      	ldr	r3, [pc, #64]	; (80106b0 <USBH_LL_Init+0x74>)
 801066e:	2201      	movs	r2, #1
 8010670:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010672:	4b0f      	ldr	r3, [pc, #60]	; (80106b0 <USBH_LL_Init+0x74>)
 8010674:	2200      	movs	r2, #0
 8010676:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010678:	4b0d      	ldr	r3, [pc, #52]	; (80106b0 <USBH_LL_Init+0x74>)
 801067a:	2202      	movs	r2, #2
 801067c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801067e:	4b0c      	ldr	r3, [pc, #48]	; (80106b0 <USBH_LL_Init+0x74>)
 8010680:	2200      	movs	r2, #0
 8010682:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010684:	480a      	ldr	r0, [pc, #40]	; (80106b0 <USBH_LL_Init+0x74>)
 8010686:	f7f7 f845 	bl	8007714 <HAL_HCD_Init>
 801068a:	4603      	mov	r3, r0
 801068c:	2b00      	cmp	r3, #0
 801068e:	d001      	beq.n	8010694 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010690:	f7f1 fafe 	bl	8001c90 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010694:	4806      	ldr	r0, [pc, #24]	; (80106b0 <USBH_LL_Init+0x74>)
 8010696:	f7f7 fc21 	bl	8007edc <HAL_HCD_GetCurrentFrame>
 801069a:	4603      	mov	r3, r0
 801069c:	4619      	mov	r1, r3
 801069e:	6878      	ldr	r0, [r7, #4]
 80106a0:	f7ff f84e 	bl	800f740 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80106a4:	2300      	movs	r3, #0
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3708      	adds	r7, #8
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	bf00      	nop
 80106b0:	20000b08 	.word	0x20000b08

080106b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b084      	sub	sp, #16
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106bc:	2300      	movs	r3, #0
 80106be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80106c0:	2300      	movs	r3, #0
 80106c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80106ca:	4618      	mov	r0, r3
 80106cc:	f7f7 fb90 	bl	8007df0 <HAL_HCD_Start>
 80106d0:	4603      	mov	r3, r0
 80106d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80106d4:	7bfb      	ldrb	r3, [r7, #15]
 80106d6:	4618      	mov	r0, r3
 80106d8:	f000 f952 	bl	8010980 <USBH_Get_USB_Status>
 80106dc:	4603      	mov	r3, r0
 80106de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3710      	adds	r7, #16
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}

080106ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80106ea:	b580      	push	{r7, lr}
 80106ec:	b084      	sub	sp, #16
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106f2:	2300      	movs	r3, #0
 80106f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80106f6:	2300      	movs	r3, #0
 80106f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010700:	4618      	mov	r0, r3
 8010702:	f7f7 fb98 	bl	8007e36 <HAL_HCD_Stop>
 8010706:	4603      	mov	r3, r0
 8010708:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801070a:	7bfb      	ldrb	r3, [r7, #15]
 801070c:	4618      	mov	r0, r3
 801070e:	f000 f937 	bl	8010980 <USBH_Get_USB_Status>
 8010712:	4603      	mov	r3, r0
 8010714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010716:	7bbb      	ldrb	r3, [r7, #14]
}
 8010718:	4618      	mov	r0, r3
 801071a:	3710      	adds	r7, #16
 801071c:	46bd      	mov	sp, r7
 801071e:	bd80      	pop	{r7, pc}

08010720 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b084      	sub	sp, #16
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010728:	2301      	movs	r3, #1
 801072a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010732:	4618      	mov	r0, r3
 8010734:	f7f7 fbe0 	bl	8007ef8 <HAL_HCD_GetCurrentSpeed>
 8010738:	4603      	mov	r3, r0
 801073a:	2b02      	cmp	r3, #2
 801073c:	d00c      	beq.n	8010758 <USBH_LL_GetSpeed+0x38>
 801073e:	2b02      	cmp	r3, #2
 8010740:	d80d      	bhi.n	801075e <USBH_LL_GetSpeed+0x3e>
 8010742:	2b00      	cmp	r3, #0
 8010744:	d002      	beq.n	801074c <USBH_LL_GetSpeed+0x2c>
 8010746:	2b01      	cmp	r3, #1
 8010748:	d003      	beq.n	8010752 <USBH_LL_GetSpeed+0x32>
 801074a:	e008      	b.n	801075e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801074c:	2300      	movs	r3, #0
 801074e:	73fb      	strb	r3, [r7, #15]
    break;
 8010750:	e008      	b.n	8010764 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010752:	2301      	movs	r3, #1
 8010754:	73fb      	strb	r3, [r7, #15]
    break;
 8010756:	e005      	b.n	8010764 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010758:	2302      	movs	r3, #2
 801075a:	73fb      	strb	r3, [r7, #15]
    break;
 801075c:	e002      	b.n	8010764 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801075e:	2301      	movs	r3, #1
 8010760:	73fb      	strb	r3, [r7, #15]
    break;
 8010762:	bf00      	nop
  }
  return  speed;
 8010764:	7bfb      	ldrb	r3, [r7, #15]
}
 8010766:	4618      	mov	r0, r3
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801076e:	b580      	push	{r7, lr}
 8010770:	b084      	sub	sp, #16
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010776:	2300      	movs	r3, #0
 8010778:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801077a:	2300      	movs	r3, #0
 801077c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010784:	4618      	mov	r0, r3
 8010786:	f7f7 fb73 	bl	8007e70 <HAL_HCD_ResetPort>
 801078a:	4603      	mov	r3, r0
 801078c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801078e:	7bfb      	ldrb	r3, [r7, #15]
 8010790:	4618      	mov	r0, r3
 8010792:	f000 f8f5 	bl	8010980 <USBH_Get_USB_Status>
 8010796:	4603      	mov	r3, r0
 8010798:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801079a:	7bbb      	ldrb	r3, [r7, #14]
}
 801079c:	4618      	mov	r0, r3
 801079e:	3710      	adds	r7, #16
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}

080107a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	460b      	mov	r3, r1
 80107ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80107b6:	78fa      	ldrb	r2, [r7, #3]
 80107b8:	4611      	mov	r1, r2
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7f7 fb7a 	bl	8007eb4 <HAL_HCD_HC_GetXferCount>
 80107c0:	4603      	mov	r3, r0
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3708      	adds	r7, #8
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}

080107ca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80107ca:	b590      	push	{r4, r7, lr}
 80107cc:	b089      	sub	sp, #36	; 0x24
 80107ce:	af04      	add	r7, sp, #16
 80107d0:	6078      	str	r0, [r7, #4]
 80107d2:	4608      	mov	r0, r1
 80107d4:	4611      	mov	r1, r2
 80107d6:	461a      	mov	r2, r3
 80107d8:	4603      	mov	r3, r0
 80107da:	70fb      	strb	r3, [r7, #3]
 80107dc:	460b      	mov	r3, r1
 80107de:	70bb      	strb	r3, [r7, #2]
 80107e0:	4613      	mov	r3, r2
 80107e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107e4:	2300      	movs	r3, #0
 80107e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80107e8:	2300      	movs	r3, #0
 80107ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80107f2:	787c      	ldrb	r4, [r7, #1]
 80107f4:	78ba      	ldrb	r2, [r7, #2]
 80107f6:	78f9      	ldrb	r1, [r7, #3]
 80107f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80107fa:	9302      	str	r3, [sp, #8]
 80107fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010800:	9301      	str	r3, [sp, #4]
 8010802:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010806:	9300      	str	r3, [sp, #0]
 8010808:	4623      	mov	r3, r4
 801080a:	f7f6 ffe5 	bl	80077d8 <HAL_HCD_HC_Init>
 801080e:	4603      	mov	r3, r0
 8010810:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010812:	7bfb      	ldrb	r3, [r7, #15]
 8010814:	4618      	mov	r0, r3
 8010816:	f000 f8b3 	bl	8010980 <USBH_Get_USB_Status>
 801081a:	4603      	mov	r3, r0
 801081c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801081e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010820:	4618      	mov	r0, r3
 8010822:	3714      	adds	r7, #20
 8010824:	46bd      	mov	sp, r7
 8010826:	bd90      	pop	{r4, r7, pc}

08010828 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b084      	sub	sp, #16
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	460b      	mov	r3, r1
 8010832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010834:	2300      	movs	r3, #0
 8010836:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010838:	2300      	movs	r3, #0
 801083a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010842:	78fa      	ldrb	r2, [r7, #3]
 8010844:	4611      	mov	r1, r2
 8010846:	4618      	mov	r0, r3
 8010848:	f7f7 f855 	bl	80078f6 <HAL_HCD_HC_Halt>
 801084c:	4603      	mov	r3, r0
 801084e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010850:	7bfb      	ldrb	r3, [r7, #15]
 8010852:	4618      	mov	r0, r3
 8010854:	f000 f894 	bl	8010980 <USBH_Get_USB_Status>
 8010858:	4603      	mov	r3, r0
 801085a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801085c:	7bbb      	ldrb	r3, [r7, #14]
}
 801085e:	4618      	mov	r0, r3
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}

08010866 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010866:	b590      	push	{r4, r7, lr}
 8010868:	b089      	sub	sp, #36	; 0x24
 801086a:	af04      	add	r7, sp, #16
 801086c:	6078      	str	r0, [r7, #4]
 801086e:	4608      	mov	r0, r1
 8010870:	4611      	mov	r1, r2
 8010872:	461a      	mov	r2, r3
 8010874:	4603      	mov	r3, r0
 8010876:	70fb      	strb	r3, [r7, #3]
 8010878:	460b      	mov	r3, r1
 801087a:	70bb      	strb	r3, [r7, #2]
 801087c:	4613      	mov	r3, r2
 801087e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010880:	2300      	movs	r3, #0
 8010882:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010884:	2300      	movs	r3, #0
 8010886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801088e:	787c      	ldrb	r4, [r7, #1]
 8010890:	78ba      	ldrb	r2, [r7, #2]
 8010892:	78f9      	ldrb	r1, [r7, #3]
 8010894:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010898:	9303      	str	r3, [sp, #12]
 801089a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801089c:	9302      	str	r3, [sp, #8]
 801089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a0:	9301      	str	r3, [sp, #4]
 80108a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80108a6:	9300      	str	r3, [sp, #0]
 80108a8:	4623      	mov	r3, r4
 80108aa:	f7f7 f847 	bl	800793c <HAL_HCD_HC_SubmitRequest>
 80108ae:	4603      	mov	r3, r0
 80108b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80108b2:	7bfb      	ldrb	r3, [r7, #15]
 80108b4:	4618      	mov	r0, r3
 80108b6:	f000 f863 	bl	8010980 <USBH_Get_USB_Status>
 80108ba:	4603      	mov	r3, r0
 80108bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108be:	7bbb      	ldrb	r3, [r7, #14]
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	3714      	adds	r7, #20
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd90      	pop	{r4, r7, pc}

080108c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	460b      	mov	r3, r1
 80108d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80108da:	78fa      	ldrb	r2, [r7, #3]
 80108dc:	4611      	mov	r1, r2
 80108de:	4618      	mov	r0, r3
 80108e0:	f7f7 fad4 	bl	8007e8c <HAL_HCD_HC_GetURBState>
 80108e4:	4603      	mov	r3, r0
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3708      	adds	r7, #8
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}

080108ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80108ee:	b580      	push	{r7, lr}
 80108f0:	b082      	sub	sp, #8
 80108f2:	af00      	add	r7, sp, #0
 80108f4:	6078      	str	r0, [r7, #4]
 80108f6:	460b      	mov	r3, r1
 80108f8:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 80108fa:	20c8      	movs	r0, #200	; 0xc8
 80108fc:	f7f6 fbd4 	bl	80070a8 <HAL_Delay>
  return USBH_OK;
 8010900:	2300      	movs	r3, #0
}
 8010902:	4618      	mov	r0, r3
 8010904:	3708      	adds	r7, #8
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}

0801090a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801090a:	b480      	push	{r7}
 801090c:	b085      	sub	sp, #20
 801090e:	af00      	add	r7, sp, #0
 8010910:	6078      	str	r0, [r7, #4]
 8010912:	460b      	mov	r3, r1
 8010914:	70fb      	strb	r3, [r7, #3]
 8010916:	4613      	mov	r3, r2
 8010918:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010920:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010922:	78fb      	ldrb	r3, [r7, #3]
 8010924:	68fa      	ldr	r2, [r7, #12]
 8010926:	212c      	movs	r1, #44	; 0x2c
 8010928:	fb01 f303 	mul.w	r3, r1, r3
 801092c:	4413      	add	r3, r2
 801092e:	333b      	adds	r3, #59	; 0x3b
 8010930:	781b      	ldrb	r3, [r3, #0]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d009      	beq.n	801094a <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010936:	78fb      	ldrb	r3, [r7, #3]
 8010938:	68fa      	ldr	r2, [r7, #12]
 801093a:	212c      	movs	r1, #44	; 0x2c
 801093c:	fb01 f303 	mul.w	r3, r1, r3
 8010940:	4413      	add	r3, r2
 8010942:	3354      	adds	r3, #84	; 0x54
 8010944:	78ba      	ldrb	r2, [r7, #2]
 8010946:	701a      	strb	r2, [r3, #0]
 8010948:	e008      	b.n	801095c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801094a:	78fb      	ldrb	r3, [r7, #3]
 801094c:	68fa      	ldr	r2, [r7, #12]
 801094e:	212c      	movs	r1, #44	; 0x2c
 8010950:	fb01 f303 	mul.w	r3, r1, r3
 8010954:	4413      	add	r3, r2
 8010956:	3355      	adds	r3, #85	; 0x55
 8010958:	78ba      	ldrb	r2, [r7, #2]
 801095a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801095c:	2300      	movs	r3, #0
}
 801095e:	4618      	mov	r0, r3
 8010960:	3714      	adds	r7, #20
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr

0801096a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801096a:	b580      	push	{r7, lr}
 801096c:	b082      	sub	sp, #8
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f7f6 fb98 	bl	80070a8 <HAL_Delay>
}
 8010978:	bf00      	nop
 801097a:	3708      	adds	r7, #8
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010980:	b480      	push	{r7}
 8010982:	b085      	sub	sp, #20
 8010984:	af00      	add	r7, sp, #0
 8010986:	4603      	mov	r3, r0
 8010988:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801098a:	2300      	movs	r3, #0
 801098c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801098e:	79fb      	ldrb	r3, [r7, #7]
 8010990:	2b03      	cmp	r3, #3
 8010992:	d817      	bhi.n	80109c4 <USBH_Get_USB_Status+0x44>
 8010994:	a201      	add	r2, pc, #4	; (adr r2, 801099c <USBH_Get_USB_Status+0x1c>)
 8010996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801099a:	bf00      	nop
 801099c:	080109ad 	.word	0x080109ad
 80109a0:	080109b3 	.word	0x080109b3
 80109a4:	080109b9 	.word	0x080109b9
 80109a8:	080109bf 	.word	0x080109bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80109ac:	2300      	movs	r3, #0
 80109ae:	73fb      	strb	r3, [r7, #15]
    break;
 80109b0:	e00b      	b.n	80109ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80109b2:	2302      	movs	r3, #2
 80109b4:	73fb      	strb	r3, [r7, #15]
    break;
 80109b6:	e008      	b.n	80109ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80109b8:	2301      	movs	r3, #1
 80109ba:	73fb      	strb	r3, [r7, #15]
    break;
 80109bc:	e005      	b.n	80109ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80109be:	2302      	movs	r3, #2
 80109c0:	73fb      	strb	r3, [r7, #15]
    break;
 80109c2:	e002      	b.n	80109ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80109c4:	2302      	movs	r3, #2
 80109c6:	73fb      	strb	r3, [r7, #15]
    break;
 80109c8:	bf00      	nop
  }
  return usb_status;
 80109ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80109cc:	4618      	mov	r0, r3
 80109ce:	3714      	adds	r7, #20
 80109d0:	46bd      	mov	sp, r7
 80109d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d6:	4770      	bx	lr

080109d8 <gcvt>:
 80109d8:	b530      	push	{r4, r5, lr}
 80109da:	2200      	movs	r2, #0
 80109dc:	b085      	sub	sp, #20
 80109de:	460c      	mov	r4, r1
 80109e0:	4605      	mov	r5, r0
 80109e2:	2300      	movs	r3, #0
 80109e4:	ec51 0b10 	vmov	r0, r1, d0
 80109e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80109ec:	f7f0 f86e 	bl	8000acc <__aeabi_dcmplt>
 80109f0:	ed9d 0b02 	vldr	d0, [sp, #8]
 80109f4:	4622      	mov	r2, r4
 80109f6:	b118      	cbz	r0, 8010a00 <gcvt+0x28>
 80109f8:	232d      	movs	r3, #45	; 0x2d
 80109fa:	f802 3b01 	strb.w	r3, [r2], #1
 80109fe:	3d01      	subs	r5, #1
 8010a00:	2300      	movs	r3, #0
 8010a02:	4806      	ldr	r0, [pc, #24]	; (8010a1c <gcvt+0x44>)
 8010a04:	9300      	str	r3, [sp, #0]
 8010a06:	4629      	mov	r1, r5
 8010a08:	2367      	movs	r3, #103	; 0x67
 8010a0a:	6800      	ldr	r0, [r0, #0]
 8010a0c:	f000 fa08 	bl	8010e20 <_gcvt>
 8010a10:	2800      	cmp	r0, #0
 8010a12:	bf14      	ite	ne
 8010a14:	4620      	movne	r0, r4
 8010a16:	2000      	moveq	r0, #0
 8010a18:	b005      	add	sp, #20
 8010a1a:	bd30      	pop	{r4, r5, pc}
 8010a1c:	20000294 	.word	0x20000294

08010a20 <__errno>:
 8010a20:	4b01      	ldr	r3, [pc, #4]	; (8010a28 <__errno+0x8>)
 8010a22:	6818      	ldr	r0, [r3, #0]
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop
 8010a28:	20000294 	.word	0x20000294

08010a2c <__libc_init_array>:
 8010a2c:	b570      	push	{r4, r5, r6, lr}
 8010a2e:	4d0d      	ldr	r5, [pc, #52]	; (8010a64 <__libc_init_array+0x38>)
 8010a30:	4c0d      	ldr	r4, [pc, #52]	; (8010a68 <__libc_init_array+0x3c>)
 8010a32:	1b64      	subs	r4, r4, r5
 8010a34:	10a4      	asrs	r4, r4, #2
 8010a36:	2600      	movs	r6, #0
 8010a38:	42a6      	cmp	r6, r4
 8010a3a:	d109      	bne.n	8010a50 <__libc_init_array+0x24>
 8010a3c:	4d0b      	ldr	r5, [pc, #44]	; (8010a6c <__libc_init_array+0x40>)
 8010a3e:	4c0c      	ldr	r4, [pc, #48]	; (8010a70 <__libc_init_array+0x44>)
 8010a40:	f002 ff38 	bl	80138b4 <_init>
 8010a44:	1b64      	subs	r4, r4, r5
 8010a46:	10a4      	asrs	r4, r4, #2
 8010a48:	2600      	movs	r6, #0
 8010a4a:	42a6      	cmp	r6, r4
 8010a4c:	d105      	bne.n	8010a5a <__libc_init_array+0x2e>
 8010a4e:	bd70      	pop	{r4, r5, r6, pc}
 8010a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a54:	4798      	blx	r3
 8010a56:	3601      	adds	r6, #1
 8010a58:	e7ee      	b.n	8010a38 <__libc_init_array+0xc>
 8010a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a5e:	4798      	blx	r3
 8010a60:	3601      	adds	r6, #1
 8010a62:	e7f2      	b.n	8010a4a <__libc_init_array+0x1e>
 8010a64:	08014340 	.word	0x08014340
 8010a68:	08014340 	.word	0x08014340
 8010a6c:	08014340 	.word	0x08014340
 8010a70:	08014344 	.word	0x08014344

08010a74 <__itoa>:
 8010a74:	1e93      	subs	r3, r2, #2
 8010a76:	2b22      	cmp	r3, #34	; 0x22
 8010a78:	b510      	push	{r4, lr}
 8010a7a:	460c      	mov	r4, r1
 8010a7c:	d904      	bls.n	8010a88 <__itoa+0x14>
 8010a7e:	2300      	movs	r3, #0
 8010a80:	700b      	strb	r3, [r1, #0]
 8010a82:	461c      	mov	r4, r3
 8010a84:	4620      	mov	r0, r4
 8010a86:	bd10      	pop	{r4, pc}
 8010a88:	2a0a      	cmp	r2, #10
 8010a8a:	d109      	bne.n	8010aa0 <__itoa+0x2c>
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	da07      	bge.n	8010aa0 <__itoa+0x2c>
 8010a90:	232d      	movs	r3, #45	; 0x2d
 8010a92:	700b      	strb	r3, [r1, #0]
 8010a94:	4240      	negs	r0, r0
 8010a96:	2101      	movs	r1, #1
 8010a98:	4421      	add	r1, r4
 8010a9a:	f000 f907 	bl	8010cac <__utoa>
 8010a9e:	e7f1      	b.n	8010a84 <__itoa+0x10>
 8010aa0:	2100      	movs	r1, #0
 8010aa2:	e7f9      	b.n	8010a98 <__itoa+0x24>

08010aa4 <itoa>:
 8010aa4:	f7ff bfe6 	b.w	8010a74 <__itoa>

08010aa8 <malloc>:
 8010aa8:	4b02      	ldr	r3, [pc, #8]	; (8010ab4 <malloc+0xc>)
 8010aaa:	4601      	mov	r1, r0
 8010aac:	6818      	ldr	r0, [r3, #0]
 8010aae:	f000 b871 	b.w	8010b94 <_malloc_r>
 8010ab2:	bf00      	nop
 8010ab4:	20000294 	.word	0x20000294

08010ab8 <free>:
 8010ab8:	4b02      	ldr	r3, [pc, #8]	; (8010ac4 <free+0xc>)
 8010aba:	4601      	mov	r1, r0
 8010abc:	6818      	ldr	r0, [r3, #0]
 8010abe:	f000 b819 	b.w	8010af4 <_free_r>
 8010ac2:	bf00      	nop
 8010ac4:	20000294 	.word	0x20000294

08010ac8 <memcpy>:
 8010ac8:	440a      	add	r2, r1
 8010aca:	4291      	cmp	r1, r2
 8010acc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010ad0:	d100      	bne.n	8010ad4 <memcpy+0xc>
 8010ad2:	4770      	bx	lr
 8010ad4:	b510      	push	{r4, lr}
 8010ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ade:	4291      	cmp	r1, r2
 8010ae0:	d1f9      	bne.n	8010ad6 <memcpy+0xe>
 8010ae2:	bd10      	pop	{r4, pc}

08010ae4 <memset>:
 8010ae4:	4402      	add	r2, r0
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	4293      	cmp	r3, r2
 8010aea:	d100      	bne.n	8010aee <memset+0xa>
 8010aec:	4770      	bx	lr
 8010aee:	f803 1b01 	strb.w	r1, [r3], #1
 8010af2:	e7f9      	b.n	8010ae8 <memset+0x4>

08010af4 <_free_r>:
 8010af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010af6:	2900      	cmp	r1, #0
 8010af8:	d048      	beq.n	8010b8c <_free_r+0x98>
 8010afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010afe:	9001      	str	r0, [sp, #4]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	f1a1 0404 	sub.w	r4, r1, #4
 8010b06:	bfb8      	it	lt
 8010b08:	18e4      	addlt	r4, r4, r3
 8010b0a:	f000 fa49 	bl	8010fa0 <__malloc_lock>
 8010b0e:	4a20      	ldr	r2, [pc, #128]	; (8010b90 <_free_r+0x9c>)
 8010b10:	9801      	ldr	r0, [sp, #4]
 8010b12:	6813      	ldr	r3, [r2, #0]
 8010b14:	4615      	mov	r5, r2
 8010b16:	b933      	cbnz	r3, 8010b26 <_free_r+0x32>
 8010b18:	6063      	str	r3, [r4, #4]
 8010b1a:	6014      	str	r4, [r2, #0]
 8010b1c:	b003      	add	sp, #12
 8010b1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b22:	f000 ba43 	b.w	8010fac <__malloc_unlock>
 8010b26:	42a3      	cmp	r3, r4
 8010b28:	d90b      	bls.n	8010b42 <_free_r+0x4e>
 8010b2a:	6821      	ldr	r1, [r4, #0]
 8010b2c:	1862      	adds	r2, r4, r1
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	bf04      	itt	eq
 8010b32:	681a      	ldreq	r2, [r3, #0]
 8010b34:	685b      	ldreq	r3, [r3, #4]
 8010b36:	6063      	str	r3, [r4, #4]
 8010b38:	bf04      	itt	eq
 8010b3a:	1852      	addeq	r2, r2, r1
 8010b3c:	6022      	streq	r2, [r4, #0]
 8010b3e:	602c      	str	r4, [r5, #0]
 8010b40:	e7ec      	b.n	8010b1c <_free_r+0x28>
 8010b42:	461a      	mov	r2, r3
 8010b44:	685b      	ldr	r3, [r3, #4]
 8010b46:	b10b      	cbz	r3, 8010b4c <_free_r+0x58>
 8010b48:	42a3      	cmp	r3, r4
 8010b4a:	d9fa      	bls.n	8010b42 <_free_r+0x4e>
 8010b4c:	6811      	ldr	r1, [r2, #0]
 8010b4e:	1855      	adds	r5, r2, r1
 8010b50:	42a5      	cmp	r5, r4
 8010b52:	d10b      	bne.n	8010b6c <_free_r+0x78>
 8010b54:	6824      	ldr	r4, [r4, #0]
 8010b56:	4421      	add	r1, r4
 8010b58:	1854      	adds	r4, r2, r1
 8010b5a:	42a3      	cmp	r3, r4
 8010b5c:	6011      	str	r1, [r2, #0]
 8010b5e:	d1dd      	bne.n	8010b1c <_free_r+0x28>
 8010b60:	681c      	ldr	r4, [r3, #0]
 8010b62:	685b      	ldr	r3, [r3, #4]
 8010b64:	6053      	str	r3, [r2, #4]
 8010b66:	4421      	add	r1, r4
 8010b68:	6011      	str	r1, [r2, #0]
 8010b6a:	e7d7      	b.n	8010b1c <_free_r+0x28>
 8010b6c:	d902      	bls.n	8010b74 <_free_r+0x80>
 8010b6e:	230c      	movs	r3, #12
 8010b70:	6003      	str	r3, [r0, #0]
 8010b72:	e7d3      	b.n	8010b1c <_free_r+0x28>
 8010b74:	6825      	ldr	r5, [r4, #0]
 8010b76:	1961      	adds	r1, r4, r5
 8010b78:	428b      	cmp	r3, r1
 8010b7a:	bf04      	itt	eq
 8010b7c:	6819      	ldreq	r1, [r3, #0]
 8010b7e:	685b      	ldreq	r3, [r3, #4]
 8010b80:	6063      	str	r3, [r4, #4]
 8010b82:	bf04      	itt	eq
 8010b84:	1949      	addeq	r1, r1, r5
 8010b86:	6021      	streq	r1, [r4, #0]
 8010b88:	6054      	str	r4, [r2, #4]
 8010b8a:	e7c7      	b.n	8010b1c <_free_r+0x28>
 8010b8c:	b003      	add	sp, #12
 8010b8e:	bd30      	pop	{r4, r5, pc}
 8010b90:	20000330 	.word	0x20000330

08010b94 <_malloc_r>:
 8010b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b96:	1ccd      	adds	r5, r1, #3
 8010b98:	f025 0503 	bic.w	r5, r5, #3
 8010b9c:	3508      	adds	r5, #8
 8010b9e:	2d0c      	cmp	r5, #12
 8010ba0:	bf38      	it	cc
 8010ba2:	250c      	movcc	r5, #12
 8010ba4:	2d00      	cmp	r5, #0
 8010ba6:	4606      	mov	r6, r0
 8010ba8:	db01      	blt.n	8010bae <_malloc_r+0x1a>
 8010baa:	42a9      	cmp	r1, r5
 8010bac:	d903      	bls.n	8010bb6 <_malloc_r+0x22>
 8010bae:	230c      	movs	r3, #12
 8010bb0:	6033      	str	r3, [r6, #0]
 8010bb2:	2000      	movs	r0, #0
 8010bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bb6:	f000 f9f3 	bl	8010fa0 <__malloc_lock>
 8010bba:	4921      	ldr	r1, [pc, #132]	; (8010c40 <_malloc_r+0xac>)
 8010bbc:	680a      	ldr	r2, [r1, #0]
 8010bbe:	4614      	mov	r4, r2
 8010bc0:	b99c      	cbnz	r4, 8010bea <_malloc_r+0x56>
 8010bc2:	4f20      	ldr	r7, [pc, #128]	; (8010c44 <_malloc_r+0xb0>)
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	b923      	cbnz	r3, 8010bd2 <_malloc_r+0x3e>
 8010bc8:	4621      	mov	r1, r4
 8010bca:	4630      	mov	r0, r6
 8010bcc:	f000 f83c 	bl	8010c48 <_sbrk_r>
 8010bd0:	6038      	str	r0, [r7, #0]
 8010bd2:	4629      	mov	r1, r5
 8010bd4:	4630      	mov	r0, r6
 8010bd6:	f000 f837 	bl	8010c48 <_sbrk_r>
 8010bda:	1c43      	adds	r3, r0, #1
 8010bdc:	d123      	bne.n	8010c26 <_malloc_r+0x92>
 8010bde:	230c      	movs	r3, #12
 8010be0:	6033      	str	r3, [r6, #0]
 8010be2:	4630      	mov	r0, r6
 8010be4:	f000 f9e2 	bl	8010fac <__malloc_unlock>
 8010be8:	e7e3      	b.n	8010bb2 <_malloc_r+0x1e>
 8010bea:	6823      	ldr	r3, [r4, #0]
 8010bec:	1b5b      	subs	r3, r3, r5
 8010bee:	d417      	bmi.n	8010c20 <_malloc_r+0x8c>
 8010bf0:	2b0b      	cmp	r3, #11
 8010bf2:	d903      	bls.n	8010bfc <_malloc_r+0x68>
 8010bf4:	6023      	str	r3, [r4, #0]
 8010bf6:	441c      	add	r4, r3
 8010bf8:	6025      	str	r5, [r4, #0]
 8010bfa:	e004      	b.n	8010c06 <_malloc_r+0x72>
 8010bfc:	6863      	ldr	r3, [r4, #4]
 8010bfe:	42a2      	cmp	r2, r4
 8010c00:	bf0c      	ite	eq
 8010c02:	600b      	streq	r3, [r1, #0]
 8010c04:	6053      	strne	r3, [r2, #4]
 8010c06:	4630      	mov	r0, r6
 8010c08:	f000 f9d0 	bl	8010fac <__malloc_unlock>
 8010c0c:	f104 000b 	add.w	r0, r4, #11
 8010c10:	1d23      	adds	r3, r4, #4
 8010c12:	f020 0007 	bic.w	r0, r0, #7
 8010c16:	1ac2      	subs	r2, r0, r3
 8010c18:	d0cc      	beq.n	8010bb4 <_malloc_r+0x20>
 8010c1a:	1a1b      	subs	r3, r3, r0
 8010c1c:	50a3      	str	r3, [r4, r2]
 8010c1e:	e7c9      	b.n	8010bb4 <_malloc_r+0x20>
 8010c20:	4622      	mov	r2, r4
 8010c22:	6864      	ldr	r4, [r4, #4]
 8010c24:	e7cc      	b.n	8010bc0 <_malloc_r+0x2c>
 8010c26:	1cc4      	adds	r4, r0, #3
 8010c28:	f024 0403 	bic.w	r4, r4, #3
 8010c2c:	42a0      	cmp	r0, r4
 8010c2e:	d0e3      	beq.n	8010bf8 <_malloc_r+0x64>
 8010c30:	1a21      	subs	r1, r4, r0
 8010c32:	4630      	mov	r0, r6
 8010c34:	f000 f808 	bl	8010c48 <_sbrk_r>
 8010c38:	3001      	adds	r0, #1
 8010c3a:	d1dd      	bne.n	8010bf8 <_malloc_r+0x64>
 8010c3c:	e7cf      	b.n	8010bde <_malloc_r+0x4a>
 8010c3e:	bf00      	nop
 8010c40:	20000330 	.word	0x20000330
 8010c44:	20000334 	.word	0x20000334

08010c48 <_sbrk_r>:
 8010c48:	b538      	push	{r3, r4, r5, lr}
 8010c4a:	4d06      	ldr	r5, [pc, #24]	; (8010c64 <_sbrk_r+0x1c>)
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	4604      	mov	r4, r0
 8010c50:	4608      	mov	r0, r1
 8010c52:	602b      	str	r3, [r5, #0]
 8010c54:	f7f1 fbe8 	bl	8002428 <_sbrk>
 8010c58:	1c43      	adds	r3, r0, #1
 8010c5a:	d102      	bne.n	8010c62 <_sbrk_r+0x1a>
 8010c5c:	682b      	ldr	r3, [r5, #0]
 8010c5e:	b103      	cbz	r3, 8010c62 <_sbrk_r+0x1a>
 8010c60:	6023      	str	r3, [r4, #0]
 8010c62:	bd38      	pop	{r3, r4, r5, pc}
 8010c64:	20000e0c 	.word	0x20000e0c

08010c68 <strcat>:
 8010c68:	b510      	push	{r4, lr}
 8010c6a:	4602      	mov	r2, r0
 8010c6c:	7814      	ldrb	r4, [r2, #0]
 8010c6e:	4613      	mov	r3, r2
 8010c70:	3201      	adds	r2, #1
 8010c72:	2c00      	cmp	r4, #0
 8010c74:	d1fa      	bne.n	8010c6c <strcat+0x4>
 8010c76:	3b01      	subs	r3, #1
 8010c78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c7c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c80:	2a00      	cmp	r2, #0
 8010c82:	d1f9      	bne.n	8010c78 <strcat+0x10>
 8010c84:	bd10      	pop	{r4, pc}

08010c86 <strncat>:
 8010c86:	b530      	push	{r4, r5, lr}
 8010c88:	4604      	mov	r4, r0
 8010c8a:	7825      	ldrb	r5, [r4, #0]
 8010c8c:	4623      	mov	r3, r4
 8010c8e:	3401      	adds	r4, #1
 8010c90:	2d00      	cmp	r5, #0
 8010c92:	d1fa      	bne.n	8010c8a <strncat+0x4>
 8010c94:	3a01      	subs	r2, #1
 8010c96:	d304      	bcc.n	8010ca2 <strncat+0x1c>
 8010c98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c9c:	f803 4b01 	strb.w	r4, [r3], #1
 8010ca0:	b904      	cbnz	r4, 8010ca4 <strncat+0x1e>
 8010ca2:	bd30      	pop	{r4, r5, pc}
 8010ca4:	2a00      	cmp	r2, #0
 8010ca6:	d1f5      	bne.n	8010c94 <strncat+0xe>
 8010ca8:	701a      	strb	r2, [r3, #0]
 8010caa:	e7f3      	b.n	8010c94 <strncat+0xe>

08010cac <__utoa>:
 8010cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cae:	4c1f      	ldr	r4, [pc, #124]	; (8010d2c <__utoa+0x80>)
 8010cb0:	b08b      	sub	sp, #44	; 0x2c
 8010cb2:	4605      	mov	r5, r0
 8010cb4:	460b      	mov	r3, r1
 8010cb6:	466e      	mov	r6, sp
 8010cb8:	f104 0c20 	add.w	ip, r4, #32
 8010cbc:	6820      	ldr	r0, [r4, #0]
 8010cbe:	6861      	ldr	r1, [r4, #4]
 8010cc0:	4637      	mov	r7, r6
 8010cc2:	c703      	stmia	r7!, {r0, r1}
 8010cc4:	3408      	adds	r4, #8
 8010cc6:	4564      	cmp	r4, ip
 8010cc8:	463e      	mov	r6, r7
 8010cca:	d1f7      	bne.n	8010cbc <__utoa+0x10>
 8010ccc:	7921      	ldrb	r1, [r4, #4]
 8010cce:	7139      	strb	r1, [r7, #4]
 8010cd0:	1e91      	subs	r1, r2, #2
 8010cd2:	6820      	ldr	r0, [r4, #0]
 8010cd4:	6038      	str	r0, [r7, #0]
 8010cd6:	2922      	cmp	r1, #34	; 0x22
 8010cd8:	f04f 0100 	mov.w	r1, #0
 8010cdc:	d904      	bls.n	8010ce8 <__utoa+0x3c>
 8010cde:	7019      	strb	r1, [r3, #0]
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	b00b      	add	sp, #44	; 0x2c
 8010ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ce8:	1e58      	subs	r0, r3, #1
 8010cea:	4684      	mov	ip, r0
 8010cec:	fbb5 f7f2 	udiv	r7, r5, r2
 8010cf0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8010cf4:	fb02 5617 	mls	r6, r2, r7, r5
 8010cf8:	4476      	add	r6, lr
 8010cfa:	460c      	mov	r4, r1
 8010cfc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8010d00:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8010d04:	462e      	mov	r6, r5
 8010d06:	42b2      	cmp	r2, r6
 8010d08:	f101 0101 	add.w	r1, r1, #1
 8010d0c:	463d      	mov	r5, r7
 8010d0e:	d9ed      	bls.n	8010cec <__utoa+0x40>
 8010d10:	2200      	movs	r2, #0
 8010d12:	545a      	strb	r2, [r3, r1]
 8010d14:	1919      	adds	r1, r3, r4
 8010d16:	1aa5      	subs	r5, r4, r2
 8010d18:	42aa      	cmp	r2, r5
 8010d1a:	dae2      	bge.n	8010ce2 <__utoa+0x36>
 8010d1c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8010d20:	780e      	ldrb	r6, [r1, #0]
 8010d22:	7006      	strb	r6, [r0, #0]
 8010d24:	3201      	adds	r2, #1
 8010d26:	f801 5901 	strb.w	r5, [r1], #-1
 8010d2a:	e7f4      	b.n	8010d16 <__utoa+0x6a>
 8010d2c:	08013fd4 	.word	0x08013fd4

08010d30 <print_e>:
 8010d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d32:	b087      	sub	sp, #28
 8010d34:	ec43 2b10 	vmov	d0, r2, r3
 8010d38:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010d3a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8010d3e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8010d40:	ab04      	add	r3, sp, #16
 8010d42:	9301      	str	r3, [sp, #4]
 8010d44:	ab03      	add	r3, sp, #12
 8010d46:	9300      	str	r3, [sp, #0]
 8010d48:	1c62      	adds	r2, r4, #1
 8010d4a:	ab05      	add	r3, sp, #20
 8010d4c:	460f      	mov	r7, r1
 8010d4e:	2102      	movs	r1, #2
 8010d50:	f000 ff22 	bl	8011b98 <_dtoa_r>
 8010d54:	9a05      	ldr	r2, [sp, #20]
 8010d56:	f242 730f 	movw	r3, #9999	; 0x270f
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d105      	bne.n	8010d6a <print_e+0x3a>
 8010d5e:	4601      	mov	r1, r0
 8010d60:	4638      	mov	r0, r7
 8010d62:	f000 fe67 	bl	8011a34 <strcpy>
 8010d66:	b007      	add	sp, #28
 8010d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d6a:	463b      	mov	r3, r7
 8010d6c:	7801      	ldrb	r1, [r0, #0]
 8010d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8010d72:	2c00      	cmp	r4, #0
 8010d74:	bfc8      	it	gt
 8010d76:	2501      	movgt	r5, #1
 8010d78:	212e      	movs	r1, #46	; 0x2e
 8010d7a:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8010d7e:	b10f      	cbz	r7, 8010d84 <print_e+0x54>
 8010d80:	2c00      	cmp	r4, #0
 8010d82:	dc37      	bgt.n	8010df4 <print_e+0xc4>
 8010d84:	2e67      	cmp	r6, #103	; 0x67
 8010d86:	d046      	beq.n	8010e16 <print_e+0xe6>
 8010d88:	2e47      	cmp	r6, #71	; 0x47
 8010d8a:	d046      	beq.n	8010e1a <print_e+0xea>
 8010d8c:	212e      	movs	r1, #46	; 0x2e
 8010d8e:	2030      	movs	r0, #48	; 0x30
 8010d90:	2c00      	cmp	r4, #0
 8010d92:	dc38      	bgt.n	8010e06 <print_e+0xd6>
 8010d94:	1e51      	subs	r1, r2, #1
 8010d96:	2900      	cmp	r1, #0
 8010d98:	bfb8      	it	lt
 8010d9a:	f1c2 0201 	rsblt	r2, r2, #1
 8010d9e:	4618      	mov	r0, r3
 8010da0:	9105      	str	r1, [sp, #20]
 8010da2:	bfbc      	itt	lt
 8010da4:	212d      	movlt	r1, #45	; 0x2d
 8010da6:	9205      	strlt	r2, [sp, #20]
 8010da8:	f800 6b02 	strb.w	r6, [r0], #2
 8010dac:	bfb8      	it	lt
 8010dae:	7059      	strblt	r1, [r3, #1]
 8010db0:	9905      	ldr	r1, [sp, #20]
 8010db2:	bfa4      	itt	ge
 8010db4:	222b      	movge	r2, #43	; 0x2b
 8010db6:	705a      	strbge	r2, [r3, #1]
 8010db8:	2963      	cmp	r1, #99	; 0x63
 8010dba:	dd0b      	ble.n	8010dd4 <print_e+0xa4>
 8010dbc:	2264      	movs	r2, #100	; 0x64
 8010dbe:	fb91 f2f2 	sdiv	r2, r1, r2
 8010dc2:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8010dc6:	1cd8      	adds	r0, r3, #3
 8010dc8:	709c      	strb	r4, [r3, #2]
 8010dca:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8010dce:	fb03 1202 	mla	r2, r3, r2, r1
 8010dd2:	9205      	str	r2, [sp, #20]
 8010dd4:	9a05      	ldr	r2, [sp, #20]
 8010dd6:	230a      	movs	r3, #10
 8010dd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8010ddc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010de0:	7001      	strb	r1, [r0, #0]
 8010de2:	f06f 0109 	mvn.w	r1, #9
 8010de6:	fb01 2303 	mla	r3, r1, r3, r2
 8010dea:	3330      	adds	r3, #48	; 0x30
 8010dec:	7043      	strb	r3, [r0, #1]
 8010dee:	2300      	movs	r3, #0
 8010df0:	7083      	strb	r3, [r0, #2]
 8010df2:	e7b8      	b.n	8010d66 <print_e+0x36>
 8010df4:	b10d      	cbz	r5, 8010dfa <print_e+0xca>
 8010df6:	f803 1b01 	strb.w	r1, [r3], #1
 8010dfa:	7805      	ldrb	r5, [r0, #0]
 8010dfc:	f803 5b01 	strb.w	r5, [r3], #1
 8010e00:	3c01      	subs	r4, #1
 8010e02:	2500      	movs	r5, #0
 8010e04:	e7b9      	b.n	8010d7a <print_e+0x4a>
 8010e06:	b10d      	cbz	r5, 8010e0c <print_e+0xdc>
 8010e08:	f803 1b01 	strb.w	r1, [r3], #1
 8010e0c:	f803 0b01 	strb.w	r0, [r3], #1
 8010e10:	3c01      	subs	r4, #1
 8010e12:	2500      	movs	r5, #0
 8010e14:	e7bc      	b.n	8010d90 <print_e+0x60>
 8010e16:	2665      	movs	r6, #101	; 0x65
 8010e18:	e7bc      	b.n	8010d94 <print_e+0x64>
 8010e1a:	2645      	movs	r6, #69	; 0x45
 8010e1c:	e7ba      	b.n	8010d94 <print_e+0x64>
	...

08010e20 <_gcvt>:
 8010e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e24:	ec55 4b10 	vmov	r4, r5, d0
 8010e28:	b088      	sub	sp, #32
 8010e2a:	4681      	mov	r9, r0
 8010e2c:	4688      	mov	r8, r1
 8010e2e:	4616      	mov	r6, r2
 8010e30:	469a      	mov	sl, r3
 8010e32:	ee10 0a10 	vmov	r0, s0
 8010e36:	2200      	movs	r2, #0
 8010e38:	2300      	movs	r3, #0
 8010e3a:	4629      	mov	r1, r5
 8010e3c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8010e3e:	f7ef fe45 	bl	8000acc <__aeabi_dcmplt>
 8010e42:	b110      	cbz	r0, 8010e4a <_gcvt+0x2a>
 8010e44:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8010e48:	461d      	mov	r5, r3
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	4620      	mov	r0, r4
 8010e50:	4629      	mov	r1, r5
 8010e52:	f7ef fe31 	bl	8000ab8 <__aeabi_dcmpeq>
 8010e56:	b138      	cbz	r0, 8010e68 <_gcvt+0x48>
 8010e58:	2330      	movs	r3, #48	; 0x30
 8010e5a:	7033      	strb	r3, [r6, #0]
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	7073      	strb	r3, [r6, #1]
 8010e60:	4630      	mov	r0, r6
 8010e62:	b008      	add	sp, #32
 8010e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e68:	a34b      	add	r3, pc, #300	; (adr r3, 8010f98 <_gcvt+0x178>)
 8010e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e6e:	4620      	mov	r0, r4
 8010e70:	4629      	mov	r1, r5
 8010e72:	f7ef fe35 	bl	8000ae0 <__aeabi_dcmple>
 8010e76:	b158      	cbz	r0, 8010e90 <_gcvt+0x70>
 8010e78:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8010e7c:	9100      	str	r1, [sp, #0]
 8010e7e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8010e82:	4622      	mov	r2, r4
 8010e84:	462b      	mov	r3, r5
 8010e86:	4631      	mov	r1, r6
 8010e88:	4648      	mov	r0, r9
 8010e8a:	f7ff ff51 	bl	8010d30 <print_e>
 8010e8e:	e7e7      	b.n	8010e60 <_gcvt+0x40>
 8010e90:	4640      	mov	r0, r8
 8010e92:	f000 fc0f 	bl	80116b4 <_mprec_log10>
 8010e96:	4622      	mov	r2, r4
 8010e98:	ec51 0b10 	vmov	r0, r1, d0
 8010e9c:	462b      	mov	r3, r5
 8010e9e:	f7ef fe1f 	bl	8000ae0 <__aeabi_dcmple>
 8010ea2:	2800      	cmp	r0, #0
 8010ea4:	d1e8      	bne.n	8010e78 <_gcvt+0x58>
 8010ea6:	ab07      	add	r3, sp, #28
 8010ea8:	9301      	str	r3, [sp, #4]
 8010eaa:	ab06      	add	r3, sp, #24
 8010eac:	9300      	str	r3, [sp, #0]
 8010eae:	4642      	mov	r2, r8
 8010eb0:	ab05      	add	r3, sp, #20
 8010eb2:	ec45 4b10 	vmov	d0, r4, r5
 8010eb6:	2102      	movs	r1, #2
 8010eb8:	4648      	mov	r0, r9
 8010eba:	f000 fe6d 	bl	8011b98 <_dtoa_r>
 8010ebe:	9a05      	ldr	r2, [sp, #20]
 8010ec0:	f242 730f 	movw	r3, #9999	; 0x270f
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	d00e      	beq.n	8010ee6 <_gcvt+0xc6>
 8010ec8:	4633      	mov	r3, r6
 8010eca:	44b0      	add	r8, r6
 8010ecc:	4604      	mov	r4, r0
 8010ece:	f810 5b01 	ldrb.w	r5, [r0], #1
 8010ed2:	9905      	ldr	r1, [sp, #20]
 8010ed4:	eba8 0203 	sub.w	r2, r8, r3
 8010ed8:	b10d      	cbz	r5, 8010ede <_gcvt+0xbe>
 8010eda:	2900      	cmp	r1, #0
 8010edc:	dc08      	bgt.n	8010ef0 <_gcvt+0xd0>
 8010ede:	2000      	movs	r0, #0
 8010ee0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8010ee4:	e00d      	b.n	8010f02 <_gcvt+0xe2>
 8010ee6:	4601      	mov	r1, r0
 8010ee8:	4630      	mov	r0, r6
 8010eea:	f000 fda3 	bl	8011a34 <strcpy>
 8010eee:	e7b7      	b.n	8010e60 <_gcvt+0x40>
 8010ef0:	3901      	subs	r1, #1
 8010ef2:	f803 5b01 	strb.w	r5, [r3], #1
 8010ef6:	9105      	str	r1, [sp, #20]
 8010ef8:	e7e8      	b.n	8010ecc <_gcvt+0xac>
 8010efa:	f803 cb01 	strb.w	ip, [r3], #1
 8010efe:	3a01      	subs	r2, #1
 8010f00:	2001      	movs	r0, #1
 8010f02:	2900      	cmp	r1, #0
 8010f04:	460d      	mov	r5, r1
 8010f06:	dc2a      	bgt.n	8010f5e <_gcvt+0x13e>
 8010f08:	b100      	cbz	r0, 8010f0c <_gcvt+0xec>
 8010f0a:	9105      	str	r1, [sp, #20]
 8010f0c:	b90f      	cbnz	r7, 8010f12 <_gcvt+0xf2>
 8010f0e:	7821      	ldrb	r1, [r4, #0]
 8010f10:	b311      	cbz	r1, 8010f58 <_gcvt+0x138>
 8010f12:	42b3      	cmp	r3, r6
 8010f14:	bf04      	itt	eq
 8010f16:	2130      	moveq	r1, #48	; 0x30
 8010f18:	f803 1b01 	strbeq.w	r1, [r3], #1
 8010f1c:	212e      	movs	r1, #46	; 0x2e
 8010f1e:	7019      	strb	r1, [r3, #0]
 8010f20:	9905      	ldr	r1, [sp, #20]
 8010f22:	4618      	mov	r0, r3
 8010f24:	2500      	movs	r5, #0
 8010f26:	eba1 0c03 	sub.w	ip, r1, r3
 8010f2a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8010f2e:	eb1c 0f00 	cmn.w	ip, r0
 8010f32:	d41c      	bmi.n	8010f6e <_gcvt+0x14e>
 8010f34:	2900      	cmp	r1, #0
 8010f36:	f1c1 0000 	rsb	r0, r1, #0
 8010f3a:	bfc8      	it	gt
 8010f3c:	2000      	movgt	r0, #0
 8010f3e:	f100 0c01 	add.w	ip, r0, #1
 8010f42:	4463      	add	r3, ip
 8010f44:	4401      	add	r1, r0
 8010f46:	b105      	cbz	r5, 8010f4a <_gcvt+0x12a>
 8010f48:	9105      	str	r1, [sp, #20]
 8010f4a:	1e61      	subs	r1, r4, #1
 8010f4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010f50:	b108      	cbz	r0, 8010f56 <_gcvt+0x136>
 8010f52:	2a00      	cmp	r2, #0
 8010f54:	dc0f      	bgt.n	8010f76 <_gcvt+0x156>
 8010f56:	b9df      	cbnz	r7, 8010f90 <_gcvt+0x170>
 8010f58:	2200      	movs	r2, #0
 8010f5a:	701a      	strb	r2, [r3, #0]
 8010f5c:	e780      	b.n	8010e60 <_gcvt+0x40>
 8010f5e:	2a00      	cmp	r2, #0
 8010f60:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8010f64:	dcc9      	bgt.n	8010efa <_gcvt+0xda>
 8010f66:	2800      	cmp	r0, #0
 8010f68:	d0d0      	beq.n	8010f0c <_gcvt+0xec>
 8010f6a:	9505      	str	r5, [sp, #20]
 8010f6c:	e7ce      	b.n	8010f0c <_gcvt+0xec>
 8010f6e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8010f72:	2501      	movs	r5, #1
 8010f74:	e7db      	b.n	8010f2e <_gcvt+0x10e>
 8010f76:	f803 0b01 	strb.w	r0, [r3], #1
 8010f7a:	3a01      	subs	r2, #1
 8010f7c:	e7e6      	b.n	8010f4c <_gcvt+0x12c>
 8010f7e:	f801 5b01 	strb.w	r5, [r1], #1
 8010f82:	1a60      	subs	r0, r4, r1
 8010f84:	2800      	cmp	r0, #0
 8010f86:	dcfa      	bgt.n	8010f7e <_gcvt+0x15e>
 8010f88:	2a00      	cmp	r2, #0
 8010f8a:	bfa8      	it	ge
 8010f8c:	189b      	addge	r3, r3, r2
 8010f8e:	e7e3      	b.n	8010f58 <_gcvt+0x138>
 8010f90:	4619      	mov	r1, r3
 8010f92:	189c      	adds	r4, r3, r2
 8010f94:	2530      	movs	r5, #48	; 0x30
 8010f96:	e7f4      	b.n	8010f82 <_gcvt+0x162>
 8010f98:	eb1c432d 	.word	0xeb1c432d
 8010f9c:	3f1a36e2 	.word	0x3f1a36e2

08010fa0 <__malloc_lock>:
 8010fa0:	4801      	ldr	r0, [pc, #4]	; (8010fa8 <__malloc_lock+0x8>)
 8010fa2:	f001 bbf8 	b.w	8012796 <__retarget_lock_acquire_recursive>
 8010fa6:	bf00      	nop
 8010fa8:	20000e14 	.word	0x20000e14

08010fac <__malloc_unlock>:
 8010fac:	4801      	ldr	r0, [pc, #4]	; (8010fb4 <__malloc_unlock+0x8>)
 8010fae:	f001 bbf3 	b.w	8012798 <__retarget_lock_release_recursive>
 8010fb2:	bf00      	nop
 8010fb4:	20000e14 	.word	0x20000e14

08010fb8 <_Balloc>:
 8010fb8:	b570      	push	{r4, r5, r6, lr}
 8010fba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010fbc:	4604      	mov	r4, r0
 8010fbe:	460d      	mov	r5, r1
 8010fc0:	b976      	cbnz	r6, 8010fe0 <_Balloc+0x28>
 8010fc2:	2010      	movs	r0, #16
 8010fc4:	f7ff fd70 	bl	8010aa8 <malloc>
 8010fc8:	4602      	mov	r2, r0
 8010fca:	6260      	str	r0, [r4, #36]	; 0x24
 8010fcc:	b920      	cbnz	r0, 8010fd8 <_Balloc+0x20>
 8010fce:	4b18      	ldr	r3, [pc, #96]	; (8011030 <_Balloc+0x78>)
 8010fd0:	4818      	ldr	r0, [pc, #96]	; (8011034 <_Balloc+0x7c>)
 8010fd2:	2166      	movs	r1, #102	; 0x66
 8010fd4:	f000 fd36 	bl	8011a44 <__assert_func>
 8010fd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010fdc:	6006      	str	r6, [r0, #0]
 8010fde:	60c6      	str	r6, [r0, #12]
 8010fe0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010fe2:	68f3      	ldr	r3, [r6, #12]
 8010fe4:	b183      	cbz	r3, 8011008 <_Balloc+0x50>
 8010fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fe8:	68db      	ldr	r3, [r3, #12]
 8010fea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010fee:	b9b8      	cbnz	r0, 8011020 <_Balloc+0x68>
 8010ff0:	2101      	movs	r1, #1
 8010ff2:	fa01 f605 	lsl.w	r6, r1, r5
 8010ff6:	1d72      	adds	r2, r6, #5
 8010ff8:	0092      	lsls	r2, r2, #2
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f000 fb78 	bl	80116f0 <_calloc_r>
 8011000:	b160      	cbz	r0, 801101c <_Balloc+0x64>
 8011002:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011006:	e00e      	b.n	8011026 <_Balloc+0x6e>
 8011008:	2221      	movs	r2, #33	; 0x21
 801100a:	2104      	movs	r1, #4
 801100c:	4620      	mov	r0, r4
 801100e:	f000 fb6f 	bl	80116f0 <_calloc_r>
 8011012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011014:	60f0      	str	r0, [r6, #12]
 8011016:	68db      	ldr	r3, [r3, #12]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d1e4      	bne.n	8010fe6 <_Balloc+0x2e>
 801101c:	2000      	movs	r0, #0
 801101e:	bd70      	pop	{r4, r5, r6, pc}
 8011020:	6802      	ldr	r2, [r0, #0]
 8011022:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011026:	2300      	movs	r3, #0
 8011028:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801102c:	e7f7      	b.n	801101e <_Balloc+0x66>
 801102e:	bf00      	nop
 8011030:	08013ff9 	.word	0x08013ff9
 8011034:	08014010 	.word	0x08014010

08011038 <_Bfree>:
 8011038:	b570      	push	{r4, r5, r6, lr}
 801103a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801103c:	4605      	mov	r5, r0
 801103e:	460c      	mov	r4, r1
 8011040:	b976      	cbnz	r6, 8011060 <_Bfree+0x28>
 8011042:	2010      	movs	r0, #16
 8011044:	f7ff fd30 	bl	8010aa8 <malloc>
 8011048:	4602      	mov	r2, r0
 801104a:	6268      	str	r0, [r5, #36]	; 0x24
 801104c:	b920      	cbnz	r0, 8011058 <_Bfree+0x20>
 801104e:	4b09      	ldr	r3, [pc, #36]	; (8011074 <_Bfree+0x3c>)
 8011050:	4809      	ldr	r0, [pc, #36]	; (8011078 <_Bfree+0x40>)
 8011052:	218a      	movs	r1, #138	; 0x8a
 8011054:	f000 fcf6 	bl	8011a44 <__assert_func>
 8011058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801105c:	6006      	str	r6, [r0, #0]
 801105e:	60c6      	str	r6, [r0, #12]
 8011060:	b13c      	cbz	r4, 8011072 <_Bfree+0x3a>
 8011062:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011064:	6862      	ldr	r2, [r4, #4]
 8011066:	68db      	ldr	r3, [r3, #12]
 8011068:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801106c:	6021      	str	r1, [r4, #0]
 801106e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011072:	bd70      	pop	{r4, r5, r6, pc}
 8011074:	08013ff9 	.word	0x08013ff9
 8011078:	08014010 	.word	0x08014010

0801107c <__multadd>:
 801107c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011080:	690e      	ldr	r6, [r1, #16]
 8011082:	4607      	mov	r7, r0
 8011084:	4698      	mov	r8, r3
 8011086:	460c      	mov	r4, r1
 8011088:	f101 0014 	add.w	r0, r1, #20
 801108c:	2300      	movs	r3, #0
 801108e:	6805      	ldr	r5, [r0, #0]
 8011090:	b2a9      	uxth	r1, r5
 8011092:	fb02 8101 	mla	r1, r2, r1, r8
 8011096:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801109a:	0c2d      	lsrs	r5, r5, #16
 801109c:	fb02 c505 	mla	r5, r2, r5, ip
 80110a0:	b289      	uxth	r1, r1
 80110a2:	3301      	adds	r3, #1
 80110a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80110a8:	429e      	cmp	r6, r3
 80110aa:	f840 1b04 	str.w	r1, [r0], #4
 80110ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80110b2:	dcec      	bgt.n	801108e <__multadd+0x12>
 80110b4:	f1b8 0f00 	cmp.w	r8, #0
 80110b8:	d022      	beq.n	8011100 <__multadd+0x84>
 80110ba:	68a3      	ldr	r3, [r4, #8]
 80110bc:	42b3      	cmp	r3, r6
 80110be:	dc19      	bgt.n	80110f4 <__multadd+0x78>
 80110c0:	6861      	ldr	r1, [r4, #4]
 80110c2:	4638      	mov	r0, r7
 80110c4:	3101      	adds	r1, #1
 80110c6:	f7ff ff77 	bl	8010fb8 <_Balloc>
 80110ca:	4605      	mov	r5, r0
 80110cc:	b928      	cbnz	r0, 80110da <__multadd+0x5e>
 80110ce:	4602      	mov	r2, r0
 80110d0:	4b0d      	ldr	r3, [pc, #52]	; (8011108 <__multadd+0x8c>)
 80110d2:	480e      	ldr	r0, [pc, #56]	; (801110c <__multadd+0x90>)
 80110d4:	21b5      	movs	r1, #181	; 0xb5
 80110d6:	f000 fcb5 	bl	8011a44 <__assert_func>
 80110da:	6922      	ldr	r2, [r4, #16]
 80110dc:	3202      	adds	r2, #2
 80110de:	f104 010c 	add.w	r1, r4, #12
 80110e2:	0092      	lsls	r2, r2, #2
 80110e4:	300c      	adds	r0, #12
 80110e6:	f7ff fcef 	bl	8010ac8 <memcpy>
 80110ea:	4621      	mov	r1, r4
 80110ec:	4638      	mov	r0, r7
 80110ee:	f7ff ffa3 	bl	8011038 <_Bfree>
 80110f2:	462c      	mov	r4, r5
 80110f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80110f8:	3601      	adds	r6, #1
 80110fa:	f8c3 8014 	str.w	r8, [r3, #20]
 80110fe:	6126      	str	r6, [r4, #16]
 8011100:	4620      	mov	r0, r4
 8011102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011106:	bf00      	nop
 8011108:	08014070 	.word	0x08014070
 801110c:	08014010 	.word	0x08014010

08011110 <__hi0bits>:
 8011110:	0c03      	lsrs	r3, r0, #16
 8011112:	041b      	lsls	r3, r3, #16
 8011114:	b9d3      	cbnz	r3, 801114c <__hi0bits+0x3c>
 8011116:	0400      	lsls	r0, r0, #16
 8011118:	2310      	movs	r3, #16
 801111a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801111e:	bf04      	itt	eq
 8011120:	0200      	lsleq	r0, r0, #8
 8011122:	3308      	addeq	r3, #8
 8011124:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011128:	bf04      	itt	eq
 801112a:	0100      	lsleq	r0, r0, #4
 801112c:	3304      	addeq	r3, #4
 801112e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011132:	bf04      	itt	eq
 8011134:	0080      	lsleq	r0, r0, #2
 8011136:	3302      	addeq	r3, #2
 8011138:	2800      	cmp	r0, #0
 801113a:	db05      	blt.n	8011148 <__hi0bits+0x38>
 801113c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011140:	f103 0301 	add.w	r3, r3, #1
 8011144:	bf08      	it	eq
 8011146:	2320      	moveq	r3, #32
 8011148:	4618      	mov	r0, r3
 801114a:	4770      	bx	lr
 801114c:	2300      	movs	r3, #0
 801114e:	e7e4      	b.n	801111a <__hi0bits+0xa>

08011150 <__lo0bits>:
 8011150:	6803      	ldr	r3, [r0, #0]
 8011152:	f013 0207 	ands.w	r2, r3, #7
 8011156:	4601      	mov	r1, r0
 8011158:	d00b      	beq.n	8011172 <__lo0bits+0x22>
 801115a:	07da      	lsls	r2, r3, #31
 801115c:	d424      	bmi.n	80111a8 <__lo0bits+0x58>
 801115e:	0798      	lsls	r0, r3, #30
 8011160:	bf49      	itett	mi
 8011162:	085b      	lsrmi	r3, r3, #1
 8011164:	089b      	lsrpl	r3, r3, #2
 8011166:	2001      	movmi	r0, #1
 8011168:	600b      	strmi	r3, [r1, #0]
 801116a:	bf5c      	itt	pl
 801116c:	600b      	strpl	r3, [r1, #0]
 801116e:	2002      	movpl	r0, #2
 8011170:	4770      	bx	lr
 8011172:	b298      	uxth	r0, r3
 8011174:	b9b0      	cbnz	r0, 80111a4 <__lo0bits+0x54>
 8011176:	0c1b      	lsrs	r3, r3, #16
 8011178:	2010      	movs	r0, #16
 801117a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801117e:	bf04      	itt	eq
 8011180:	0a1b      	lsreq	r3, r3, #8
 8011182:	3008      	addeq	r0, #8
 8011184:	071a      	lsls	r2, r3, #28
 8011186:	bf04      	itt	eq
 8011188:	091b      	lsreq	r3, r3, #4
 801118a:	3004      	addeq	r0, #4
 801118c:	079a      	lsls	r2, r3, #30
 801118e:	bf04      	itt	eq
 8011190:	089b      	lsreq	r3, r3, #2
 8011192:	3002      	addeq	r0, #2
 8011194:	07da      	lsls	r2, r3, #31
 8011196:	d403      	bmi.n	80111a0 <__lo0bits+0x50>
 8011198:	085b      	lsrs	r3, r3, #1
 801119a:	f100 0001 	add.w	r0, r0, #1
 801119e:	d005      	beq.n	80111ac <__lo0bits+0x5c>
 80111a0:	600b      	str	r3, [r1, #0]
 80111a2:	4770      	bx	lr
 80111a4:	4610      	mov	r0, r2
 80111a6:	e7e8      	b.n	801117a <__lo0bits+0x2a>
 80111a8:	2000      	movs	r0, #0
 80111aa:	4770      	bx	lr
 80111ac:	2020      	movs	r0, #32
 80111ae:	4770      	bx	lr

080111b0 <__i2b>:
 80111b0:	b510      	push	{r4, lr}
 80111b2:	460c      	mov	r4, r1
 80111b4:	2101      	movs	r1, #1
 80111b6:	f7ff feff 	bl	8010fb8 <_Balloc>
 80111ba:	4602      	mov	r2, r0
 80111bc:	b928      	cbnz	r0, 80111ca <__i2b+0x1a>
 80111be:	4b05      	ldr	r3, [pc, #20]	; (80111d4 <__i2b+0x24>)
 80111c0:	4805      	ldr	r0, [pc, #20]	; (80111d8 <__i2b+0x28>)
 80111c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80111c6:	f000 fc3d 	bl	8011a44 <__assert_func>
 80111ca:	2301      	movs	r3, #1
 80111cc:	6144      	str	r4, [r0, #20]
 80111ce:	6103      	str	r3, [r0, #16]
 80111d0:	bd10      	pop	{r4, pc}
 80111d2:	bf00      	nop
 80111d4:	08014070 	.word	0x08014070
 80111d8:	08014010 	.word	0x08014010

080111dc <__multiply>:
 80111dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111e0:	4614      	mov	r4, r2
 80111e2:	690a      	ldr	r2, [r1, #16]
 80111e4:	6923      	ldr	r3, [r4, #16]
 80111e6:	429a      	cmp	r2, r3
 80111e8:	bfb8      	it	lt
 80111ea:	460b      	movlt	r3, r1
 80111ec:	460d      	mov	r5, r1
 80111ee:	bfbc      	itt	lt
 80111f0:	4625      	movlt	r5, r4
 80111f2:	461c      	movlt	r4, r3
 80111f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80111f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80111fc:	68ab      	ldr	r3, [r5, #8]
 80111fe:	6869      	ldr	r1, [r5, #4]
 8011200:	eb0a 0709 	add.w	r7, sl, r9
 8011204:	42bb      	cmp	r3, r7
 8011206:	b085      	sub	sp, #20
 8011208:	bfb8      	it	lt
 801120a:	3101      	addlt	r1, #1
 801120c:	f7ff fed4 	bl	8010fb8 <_Balloc>
 8011210:	b930      	cbnz	r0, 8011220 <__multiply+0x44>
 8011212:	4602      	mov	r2, r0
 8011214:	4b42      	ldr	r3, [pc, #264]	; (8011320 <__multiply+0x144>)
 8011216:	4843      	ldr	r0, [pc, #268]	; (8011324 <__multiply+0x148>)
 8011218:	f240 115d 	movw	r1, #349	; 0x15d
 801121c:	f000 fc12 	bl	8011a44 <__assert_func>
 8011220:	f100 0614 	add.w	r6, r0, #20
 8011224:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011228:	4633      	mov	r3, r6
 801122a:	2200      	movs	r2, #0
 801122c:	4543      	cmp	r3, r8
 801122e:	d31e      	bcc.n	801126e <__multiply+0x92>
 8011230:	f105 0c14 	add.w	ip, r5, #20
 8011234:	f104 0314 	add.w	r3, r4, #20
 8011238:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801123c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011240:	9202      	str	r2, [sp, #8]
 8011242:	ebac 0205 	sub.w	r2, ip, r5
 8011246:	3a15      	subs	r2, #21
 8011248:	f022 0203 	bic.w	r2, r2, #3
 801124c:	3204      	adds	r2, #4
 801124e:	f105 0115 	add.w	r1, r5, #21
 8011252:	458c      	cmp	ip, r1
 8011254:	bf38      	it	cc
 8011256:	2204      	movcc	r2, #4
 8011258:	9201      	str	r2, [sp, #4]
 801125a:	9a02      	ldr	r2, [sp, #8]
 801125c:	9303      	str	r3, [sp, #12]
 801125e:	429a      	cmp	r2, r3
 8011260:	d808      	bhi.n	8011274 <__multiply+0x98>
 8011262:	2f00      	cmp	r7, #0
 8011264:	dc55      	bgt.n	8011312 <__multiply+0x136>
 8011266:	6107      	str	r7, [r0, #16]
 8011268:	b005      	add	sp, #20
 801126a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801126e:	f843 2b04 	str.w	r2, [r3], #4
 8011272:	e7db      	b.n	801122c <__multiply+0x50>
 8011274:	f8b3 a000 	ldrh.w	sl, [r3]
 8011278:	f1ba 0f00 	cmp.w	sl, #0
 801127c:	d020      	beq.n	80112c0 <__multiply+0xe4>
 801127e:	f105 0e14 	add.w	lr, r5, #20
 8011282:	46b1      	mov	r9, r6
 8011284:	2200      	movs	r2, #0
 8011286:	f85e 4b04 	ldr.w	r4, [lr], #4
 801128a:	f8d9 b000 	ldr.w	fp, [r9]
 801128e:	b2a1      	uxth	r1, r4
 8011290:	fa1f fb8b 	uxth.w	fp, fp
 8011294:	fb0a b101 	mla	r1, sl, r1, fp
 8011298:	4411      	add	r1, r2
 801129a:	f8d9 2000 	ldr.w	r2, [r9]
 801129e:	0c24      	lsrs	r4, r4, #16
 80112a0:	0c12      	lsrs	r2, r2, #16
 80112a2:	fb0a 2404 	mla	r4, sl, r4, r2
 80112a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80112aa:	b289      	uxth	r1, r1
 80112ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80112b0:	45f4      	cmp	ip, lr
 80112b2:	f849 1b04 	str.w	r1, [r9], #4
 80112b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80112ba:	d8e4      	bhi.n	8011286 <__multiply+0xaa>
 80112bc:	9901      	ldr	r1, [sp, #4]
 80112be:	5072      	str	r2, [r6, r1]
 80112c0:	9a03      	ldr	r2, [sp, #12]
 80112c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80112c6:	3304      	adds	r3, #4
 80112c8:	f1b9 0f00 	cmp.w	r9, #0
 80112cc:	d01f      	beq.n	801130e <__multiply+0x132>
 80112ce:	6834      	ldr	r4, [r6, #0]
 80112d0:	f105 0114 	add.w	r1, r5, #20
 80112d4:	46b6      	mov	lr, r6
 80112d6:	f04f 0a00 	mov.w	sl, #0
 80112da:	880a      	ldrh	r2, [r1, #0]
 80112dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80112e0:	fb09 b202 	mla	r2, r9, r2, fp
 80112e4:	4492      	add	sl, r2
 80112e6:	b2a4      	uxth	r4, r4
 80112e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80112ec:	f84e 4b04 	str.w	r4, [lr], #4
 80112f0:	f851 4b04 	ldr.w	r4, [r1], #4
 80112f4:	f8be 2000 	ldrh.w	r2, [lr]
 80112f8:	0c24      	lsrs	r4, r4, #16
 80112fa:	fb09 2404 	mla	r4, r9, r4, r2
 80112fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011302:	458c      	cmp	ip, r1
 8011304:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011308:	d8e7      	bhi.n	80112da <__multiply+0xfe>
 801130a:	9a01      	ldr	r2, [sp, #4]
 801130c:	50b4      	str	r4, [r6, r2]
 801130e:	3604      	adds	r6, #4
 8011310:	e7a3      	b.n	801125a <__multiply+0x7e>
 8011312:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011316:	2b00      	cmp	r3, #0
 8011318:	d1a5      	bne.n	8011266 <__multiply+0x8a>
 801131a:	3f01      	subs	r7, #1
 801131c:	e7a1      	b.n	8011262 <__multiply+0x86>
 801131e:	bf00      	nop
 8011320:	08014070 	.word	0x08014070
 8011324:	08014010 	.word	0x08014010

08011328 <__pow5mult>:
 8011328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801132c:	4615      	mov	r5, r2
 801132e:	f012 0203 	ands.w	r2, r2, #3
 8011332:	4606      	mov	r6, r0
 8011334:	460f      	mov	r7, r1
 8011336:	d007      	beq.n	8011348 <__pow5mult+0x20>
 8011338:	4c25      	ldr	r4, [pc, #148]	; (80113d0 <__pow5mult+0xa8>)
 801133a:	3a01      	subs	r2, #1
 801133c:	2300      	movs	r3, #0
 801133e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011342:	f7ff fe9b 	bl	801107c <__multadd>
 8011346:	4607      	mov	r7, r0
 8011348:	10ad      	asrs	r5, r5, #2
 801134a:	d03d      	beq.n	80113c8 <__pow5mult+0xa0>
 801134c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801134e:	b97c      	cbnz	r4, 8011370 <__pow5mult+0x48>
 8011350:	2010      	movs	r0, #16
 8011352:	f7ff fba9 	bl	8010aa8 <malloc>
 8011356:	4602      	mov	r2, r0
 8011358:	6270      	str	r0, [r6, #36]	; 0x24
 801135a:	b928      	cbnz	r0, 8011368 <__pow5mult+0x40>
 801135c:	4b1d      	ldr	r3, [pc, #116]	; (80113d4 <__pow5mult+0xac>)
 801135e:	481e      	ldr	r0, [pc, #120]	; (80113d8 <__pow5mult+0xb0>)
 8011360:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011364:	f000 fb6e 	bl	8011a44 <__assert_func>
 8011368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801136c:	6004      	str	r4, [r0, #0]
 801136e:	60c4      	str	r4, [r0, #12]
 8011370:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011378:	b94c      	cbnz	r4, 801138e <__pow5mult+0x66>
 801137a:	f240 2171 	movw	r1, #625	; 0x271
 801137e:	4630      	mov	r0, r6
 8011380:	f7ff ff16 	bl	80111b0 <__i2b>
 8011384:	2300      	movs	r3, #0
 8011386:	f8c8 0008 	str.w	r0, [r8, #8]
 801138a:	4604      	mov	r4, r0
 801138c:	6003      	str	r3, [r0, #0]
 801138e:	f04f 0900 	mov.w	r9, #0
 8011392:	07eb      	lsls	r3, r5, #31
 8011394:	d50a      	bpl.n	80113ac <__pow5mult+0x84>
 8011396:	4639      	mov	r1, r7
 8011398:	4622      	mov	r2, r4
 801139a:	4630      	mov	r0, r6
 801139c:	f7ff ff1e 	bl	80111dc <__multiply>
 80113a0:	4639      	mov	r1, r7
 80113a2:	4680      	mov	r8, r0
 80113a4:	4630      	mov	r0, r6
 80113a6:	f7ff fe47 	bl	8011038 <_Bfree>
 80113aa:	4647      	mov	r7, r8
 80113ac:	106d      	asrs	r5, r5, #1
 80113ae:	d00b      	beq.n	80113c8 <__pow5mult+0xa0>
 80113b0:	6820      	ldr	r0, [r4, #0]
 80113b2:	b938      	cbnz	r0, 80113c4 <__pow5mult+0x9c>
 80113b4:	4622      	mov	r2, r4
 80113b6:	4621      	mov	r1, r4
 80113b8:	4630      	mov	r0, r6
 80113ba:	f7ff ff0f 	bl	80111dc <__multiply>
 80113be:	6020      	str	r0, [r4, #0]
 80113c0:	f8c0 9000 	str.w	r9, [r0]
 80113c4:	4604      	mov	r4, r0
 80113c6:	e7e4      	b.n	8011392 <__pow5mult+0x6a>
 80113c8:	4638      	mov	r0, r7
 80113ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113ce:	bf00      	nop
 80113d0:	08014178 	.word	0x08014178
 80113d4:	08013ff9 	.word	0x08013ff9
 80113d8:	08014010 	.word	0x08014010

080113dc <__lshift>:
 80113dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113e0:	460c      	mov	r4, r1
 80113e2:	6849      	ldr	r1, [r1, #4]
 80113e4:	6923      	ldr	r3, [r4, #16]
 80113e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80113ea:	68a3      	ldr	r3, [r4, #8]
 80113ec:	4607      	mov	r7, r0
 80113ee:	4691      	mov	r9, r2
 80113f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80113f4:	f108 0601 	add.w	r6, r8, #1
 80113f8:	42b3      	cmp	r3, r6
 80113fa:	db0b      	blt.n	8011414 <__lshift+0x38>
 80113fc:	4638      	mov	r0, r7
 80113fe:	f7ff fddb 	bl	8010fb8 <_Balloc>
 8011402:	4605      	mov	r5, r0
 8011404:	b948      	cbnz	r0, 801141a <__lshift+0x3e>
 8011406:	4602      	mov	r2, r0
 8011408:	4b28      	ldr	r3, [pc, #160]	; (80114ac <__lshift+0xd0>)
 801140a:	4829      	ldr	r0, [pc, #164]	; (80114b0 <__lshift+0xd4>)
 801140c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011410:	f000 fb18 	bl	8011a44 <__assert_func>
 8011414:	3101      	adds	r1, #1
 8011416:	005b      	lsls	r3, r3, #1
 8011418:	e7ee      	b.n	80113f8 <__lshift+0x1c>
 801141a:	2300      	movs	r3, #0
 801141c:	f100 0114 	add.w	r1, r0, #20
 8011420:	f100 0210 	add.w	r2, r0, #16
 8011424:	4618      	mov	r0, r3
 8011426:	4553      	cmp	r3, sl
 8011428:	db33      	blt.n	8011492 <__lshift+0xb6>
 801142a:	6920      	ldr	r0, [r4, #16]
 801142c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011430:	f104 0314 	add.w	r3, r4, #20
 8011434:	f019 091f 	ands.w	r9, r9, #31
 8011438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801143c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011440:	d02b      	beq.n	801149a <__lshift+0xbe>
 8011442:	f1c9 0e20 	rsb	lr, r9, #32
 8011446:	468a      	mov	sl, r1
 8011448:	2200      	movs	r2, #0
 801144a:	6818      	ldr	r0, [r3, #0]
 801144c:	fa00 f009 	lsl.w	r0, r0, r9
 8011450:	4302      	orrs	r2, r0
 8011452:	f84a 2b04 	str.w	r2, [sl], #4
 8011456:	f853 2b04 	ldr.w	r2, [r3], #4
 801145a:	459c      	cmp	ip, r3
 801145c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011460:	d8f3      	bhi.n	801144a <__lshift+0x6e>
 8011462:	ebac 0304 	sub.w	r3, ip, r4
 8011466:	3b15      	subs	r3, #21
 8011468:	f023 0303 	bic.w	r3, r3, #3
 801146c:	3304      	adds	r3, #4
 801146e:	f104 0015 	add.w	r0, r4, #21
 8011472:	4584      	cmp	ip, r0
 8011474:	bf38      	it	cc
 8011476:	2304      	movcc	r3, #4
 8011478:	50ca      	str	r2, [r1, r3]
 801147a:	b10a      	cbz	r2, 8011480 <__lshift+0xa4>
 801147c:	f108 0602 	add.w	r6, r8, #2
 8011480:	3e01      	subs	r6, #1
 8011482:	4638      	mov	r0, r7
 8011484:	612e      	str	r6, [r5, #16]
 8011486:	4621      	mov	r1, r4
 8011488:	f7ff fdd6 	bl	8011038 <_Bfree>
 801148c:	4628      	mov	r0, r5
 801148e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011492:	f842 0f04 	str.w	r0, [r2, #4]!
 8011496:	3301      	adds	r3, #1
 8011498:	e7c5      	b.n	8011426 <__lshift+0x4a>
 801149a:	3904      	subs	r1, #4
 801149c:	f853 2b04 	ldr.w	r2, [r3], #4
 80114a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80114a4:	459c      	cmp	ip, r3
 80114a6:	d8f9      	bhi.n	801149c <__lshift+0xc0>
 80114a8:	e7ea      	b.n	8011480 <__lshift+0xa4>
 80114aa:	bf00      	nop
 80114ac:	08014070 	.word	0x08014070
 80114b0:	08014010 	.word	0x08014010

080114b4 <__mcmp>:
 80114b4:	b530      	push	{r4, r5, lr}
 80114b6:	6902      	ldr	r2, [r0, #16]
 80114b8:	690c      	ldr	r4, [r1, #16]
 80114ba:	1b12      	subs	r2, r2, r4
 80114bc:	d10e      	bne.n	80114dc <__mcmp+0x28>
 80114be:	f100 0314 	add.w	r3, r0, #20
 80114c2:	3114      	adds	r1, #20
 80114c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80114c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80114cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80114d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80114d4:	42a5      	cmp	r5, r4
 80114d6:	d003      	beq.n	80114e0 <__mcmp+0x2c>
 80114d8:	d305      	bcc.n	80114e6 <__mcmp+0x32>
 80114da:	2201      	movs	r2, #1
 80114dc:	4610      	mov	r0, r2
 80114de:	bd30      	pop	{r4, r5, pc}
 80114e0:	4283      	cmp	r3, r0
 80114e2:	d3f3      	bcc.n	80114cc <__mcmp+0x18>
 80114e4:	e7fa      	b.n	80114dc <__mcmp+0x28>
 80114e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80114ea:	e7f7      	b.n	80114dc <__mcmp+0x28>

080114ec <__mdiff>:
 80114ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f0:	460c      	mov	r4, r1
 80114f2:	4606      	mov	r6, r0
 80114f4:	4611      	mov	r1, r2
 80114f6:	4620      	mov	r0, r4
 80114f8:	4617      	mov	r7, r2
 80114fa:	f7ff ffdb 	bl	80114b4 <__mcmp>
 80114fe:	1e05      	subs	r5, r0, #0
 8011500:	d110      	bne.n	8011524 <__mdiff+0x38>
 8011502:	4629      	mov	r1, r5
 8011504:	4630      	mov	r0, r6
 8011506:	f7ff fd57 	bl	8010fb8 <_Balloc>
 801150a:	b930      	cbnz	r0, 801151a <__mdiff+0x2e>
 801150c:	4b39      	ldr	r3, [pc, #228]	; (80115f4 <__mdiff+0x108>)
 801150e:	4602      	mov	r2, r0
 8011510:	f240 2132 	movw	r1, #562	; 0x232
 8011514:	4838      	ldr	r0, [pc, #224]	; (80115f8 <__mdiff+0x10c>)
 8011516:	f000 fa95 	bl	8011a44 <__assert_func>
 801151a:	2301      	movs	r3, #1
 801151c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011524:	bfa4      	itt	ge
 8011526:	463b      	movge	r3, r7
 8011528:	4627      	movge	r7, r4
 801152a:	4630      	mov	r0, r6
 801152c:	6879      	ldr	r1, [r7, #4]
 801152e:	bfa6      	itte	ge
 8011530:	461c      	movge	r4, r3
 8011532:	2500      	movge	r5, #0
 8011534:	2501      	movlt	r5, #1
 8011536:	f7ff fd3f 	bl	8010fb8 <_Balloc>
 801153a:	b920      	cbnz	r0, 8011546 <__mdiff+0x5a>
 801153c:	4b2d      	ldr	r3, [pc, #180]	; (80115f4 <__mdiff+0x108>)
 801153e:	4602      	mov	r2, r0
 8011540:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011544:	e7e6      	b.n	8011514 <__mdiff+0x28>
 8011546:	693e      	ldr	r6, [r7, #16]
 8011548:	60c5      	str	r5, [r0, #12]
 801154a:	6925      	ldr	r5, [r4, #16]
 801154c:	f107 0114 	add.w	r1, r7, #20
 8011550:	f104 0914 	add.w	r9, r4, #20
 8011554:	f100 0e14 	add.w	lr, r0, #20
 8011558:	f107 0210 	add.w	r2, r7, #16
 801155c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011560:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011564:	46f2      	mov	sl, lr
 8011566:	2700      	movs	r7, #0
 8011568:	f859 3b04 	ldr.w	r3, [r9], #4
 801156c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011570:	fa1f f883 	uxth.w	r8, r3
 8011574:	fa17 f78b 	uxtah	r7, r7, fp
 8011578:	0c1b      	lsrs	r3, r3, #16
 801157a:	eba7 0808 	sub.w	r8, r7, r8
 801157e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011582:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011586:	fa1f f888 	uxth.w	r8, r8
 801158a:	141f      	asrs	r7, r3, #16
 801158c:	454d      	cmp	r5, r9
 801158e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011592:	f84a 3b04 	str.w	r3, [sl], #4
 8011596:	d8e7      	bhi.n	8011568 <__mdiff+0x7c>
 8011598:	1b2b      	subs	r3, r5, r4
 801159a:	3b15      	subs	r3, #21
 801159c:	f023 0303 	bic.w	r3, r3, #3
 80115a0:	3304      	adds	r3, #4
 80115a2:	3415      	adds	r4, #21
 80115a4:	42a5      	cmp	r5, r4
 80115a6:	bf38      	it	cc
 80115a8:	2304      	movcc	r3, #4
 80115aa:	4419      	add	r1, r3
 80115ac:	4473      	add	r3, lr
 80115ae:	469e      	mov	lr, r3
 80115b0:	460d      	mov	r5, r1
 80115b2:	4565      	cmp	r5, ip
 80115b4:	d30e      	bcc.n	80115d4 <__mdiff+0xe8>
 80115b6:	f10c 0203 	add.w	r2, ip, #3
 80115ba:	1a52      	subs	r2, r2, r1
 80115bc:	f022 0203 	bic.w	r2, r2, #3
 80115c0:	3903      	subs	r1, #3
 80115c2:	458c      	cmp	ip, r1
 80115c4:	bf38      	it	cc
 80115c6:	2200      	movcc	r2, #0
 80115c8:	441a      	add	r2, r3
 80115ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80115ce:	b17b      	cbz	r3, 80115f0 <__mdiff+0x104>
 80115d0:	6106      	str	r6, [r0, #16]
 80115d2:	e7a5      	b.n	8011520 <__mdiff+0x34>
 80115d4:	f855 8b04 	ldr.w	r8, [r5], #4
 80115d8:	fa17 f488 	uxtah	r4, r7, r8
 80115dc:	1422      	asrs	r2, r4, #16
 80115de:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80115e2:	b2a4      	uxth	r4, r4
 80115e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80115e8:	f84e 4b04 	str.w	r4, [lr], #4
 80115ec:	1417      	asrs	r7, r2, #16
 80115ee:	e7e0      	b.n	80115b2 <__mdiff+0xc6>
 80115f0:	3e01      	subs	r6, #1
 80115f2:	e7ea      	b.n	80115ca <__mdiff+0xde>
 80115f4:	08014070 	.word	0x08014070
 80115f8:	08014010 	.word	0x08014010

080115fc <__d2b>:
 80115fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011600:	4689      	mov	r9, r1
 8011602:	2101      	movs	r1, #1
 8011604:	ec57 6b10 	vmov	r6, r7, d0
 8011608:	4690      	mov	r8, r2
 801160a:	f7ff fcd5 	bl	8010fb8 <_Balloc>
 801160e:	4604      	mov	r4, r0
 8011610:	b930      	cbnz	r0, 8011620 <__d2b+0x24>
 8011612:	4602      	mov	r2, r0
 8011614:	4b25      	ldr	r3, [pc, #148]	; (80116ac <__d2b+0xb0>)
 8011616:	4826      	ldr	r0, [pc, #152]	; (80116b0 <__d2b+0xb4>)
 8011618:	f240 310a 	movw	r1, #778	; 0x30a
 801161c:	f000 fa12 	bl	8011a44 <__assert_func>
 8011620:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011624:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011628:	bb35      	cbnz	r5, 8011678 <__d2b+0x7c>
 801162a:	2e00      	cmp	r6, #0
 801162c:	9301      	str	r3, [sp, #4]
 801162e:	d028      	beq.n	8011682 <__d2b+0x86>
 8011630:	4668      	mov	r0, sp
 8011632:	9600      	str	r6, [sp, #0]
 8011634:	f7ff fd8c 	bl	8011150 <__lo0bits>
 8011638:	9900      	ldr	r1, [sp, #0]
 801163a:	b300      	cbz	r0, 801167e <__d2b+0x82>
 801163c:	9a01      	ldr	r2, [sp, #4]
 801163e:	f1c0 0320 	rsb	r3, r0, #32
 8011642:	fa02 f303 	lsl.w	r3, r2, r3
 8011646:	430b      	orrs	r3, r1
 8011648:	40c2      	lsrs	r2, r0
 801164a:	6163      	str	r3, [r4, #20]
 801164c:	9201      	str	r2, [sp, #4]
 801164e:	9b01      	ldr	r3, [sp, #4]
 8011650:	61a3      	str	r3, [r4, #24]
 8011652:	2b00      	cmp	r3, #0
 8011654:	bf14      	ite	ne
 8011656:	2202      	movne	r2, #2
 8011658:	2201      	moveq	r2, #1
 801165a:	6122      	str	r2, [r4, #16]
 801165c:	b1d5      	cbz	r5, 8011694 <__d2b+0x98>
 801165e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011662:	4405      	add	r5, r0
 8011664:	f8c9 5000 	str.w	r5, [r9]
 8011668:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801166c:	f8c8 0000 	str.w	r0, [r8]
 8011670:	4620      	mov	r0, r4
 8011672:	b003      	add	sp, #12
 8011674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801167c:	e7d5      	b.n	801162a <__d2b+0x2e>
 801167e:	6161      	str	r1, [r4, #20]
 8011680:	e7e5      	b.n	801164e <__d2b+0x52>
 8011682:	a801      	add	r0, sp, #4
 8011684:	f7ff fd64 	bl	8011150 <__lo0bits>
 8011688:	9b01      	ldr	r3, [sp, #4]
 801168a:	6163      	str	r3, [r4, #20]
 801168c:	2201      	movs	r2, #1
 801168e:	6122      	str	r2, [r4, #16]
 8011690:	3020      	adds	r0, #32
 8011692:	e7e3      	b.n	801165c <__d2b+0x60>
 8011694:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011698:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801169c:	f8c9 0000 	str.w	r0, [r9]
 80116a0:	6918      	ldr	r0, [r3, #16]
 80116a2:	f7ff fd35 	bl	8011110 <__hi0bits>
 80116a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80116aa:	e7df      	b.n	801166c <__d2b+0x70>
 80116ac:	08014070 	.word	0x08014070
 80116b0:	08014010 	.word	0x08014010

080116b4 <_mprec_log10>:
 80116b4:	2817      	cmp	r0, #23
 80116b6:	b5d0      	push	{r4, r6, r7, lr}
 80116b8:	4604      	mov	r4, r0
 80116ba:	dc07      	bgt.n	80116cc <_mprec_log10+0x18>
 80116bc:	4809      	ldr	r0, [pc, #36]	; (80116e4 <_mprec_log10+0x30>)
 80116be:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80116c2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80116c6:	ec41 0b10 	vmov	d0, r0, r1
 80116ca:	bdd0      	pop	{r4, r6, r7, pc}
 80116cc:	4906      	ldr	r1, [pc, #24]	; (80116e8 <_mprec_log10+0x34>)
 80116ce:	4f07      	ldr	r7, [pc, #28]	; (80116ec <_mprec_log10+0x38>)
 80116d0:	2000      	movs	r0, #0
 80116d2:	2600      	movs	r6, #0
 80116d4:	4632      	mov	r2, r6
 80116d6:	463b      	mov	r3, r7
 80116d8:	f7ee ff86 	bl	80005e8 <__aeabi_dmul>
 80116dc:	3c01      	subs	r4, #1
 80116de:	d1f9      	bne.n	80116d4 <_mprec_log10+0x20>
 80116e0:	e7f1      	b.n	80116c6 <_mprec_log10+0x12>
 80116e2:	bf00      	nop
 80116e4:	080140b0 	.word	0x080140b0
 80116e8:	3ff00000 	.word	0x3ff00000
 80116ec:	40240000 	.word	0x40240000

080116f0 <_calloc_r>:
 80116f0:	b513      	push	{r0, r1, r4, lr}
 80116f2:	434a      	muls	r2, r1
 80116f4:	4611      	mov	r1, r2
 80116f6:	9201      	str	r2, [sp, #4]
 80116f8:	f7ff fa4c 	bl	8010b94 <_malloc_r>
 80116fc:	4604      	mov	r4, r0
 80116fe:	b118      	cbz	r0, 8011708 <_calloc_r+0x18>
 8011700:	9a01      	ldr	r2, [sp, #4]
 8011702:	2100      	movs	r1, #0
 8011704:	f7ff f9ee 	bl	8010ae4 <memset>
 8011708:	4620      	mov	r0, r4
 801170a:	b002      	add	sp, #8
 801170c:	bd10      	pop	{r4, pc}

0801170e <_printf_common>:
 801170e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011712:	4616      	mov	r6, r2
 8011714:	4699      	mov	r9, r3
 8011716:	688a      	ldr	r2, [r1, #8]
 8011718:	690b      	ldr	r3, [r1, #16]
 801171a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801171e:	4293      	cmp	r3, r2
 8011720:	bfb8      	it	lt
 8011722:	4613      	movlt	r3, r2
 8011724:	6033      	str	r3, [r6, #0]
 8011726:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801172a:	4607      	mov	r7, r0
 801172c:	460c      	mov	r4, r1
 801172e:	b10a      	cbz	r2, 8011734 <_printf_common+0x26>
 8011730:	3301      	adds	r3, #1
 8011732:	6033      	str	r3, [r6, #0]
 8011734:	6823      	ldr	r3, [r4, #0]
 8011736:	0699      	lsls	r1, r3, #26
 8011738:	bf42      	ittt	mi
 801173a:	6833      	ldrmi	r3, [r6, #0]
 801173c:	3302      	addmi	r3, #2
 801173e:	6033      	strmi	r3, [r6, #0]
 8011740:	6825      	ldr	r5, [r4, #0]
 8011742:	f015 0506 	ands.w	r5, r5, #6
 8011746:	d106      	bne.n	8011756 <_printf_common+0x48>
 8011748:	f104 0a19 	add.w	sl, r4, #25
 801174c:	68e3      	ldr	r3, [r4, #12]
 801174e:	6832      	ldr	r2, [r6, #0]
 8011750:	1a9b      	subs	r3, r3, r2
 8011752:	42ab      	cmp	r3, r5
 8011754:	dc26      	bgt.n	80117a4 <_printf_common+0x96>
 8011756:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801175a:	1e13      	subs	r3, r2, #0
 801175c:	6822      	ldr	r2, [r4, #0]
 801175e:	bf18      	it	ne
 8011760:	2301      	movne	r3, #1
 8011762:	0692      	lsls	r2, r2, #26
 8011764:	d42b      	bmi.n	80117be <_printf_common+0xb0>
 8011766:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801176a:	4649      	mov	r1, r9
 801176c:	4638      	mov	r0, r7
 801176e:	47c0      	blx	r8
 8011770:	3001      	adds	r0, #1
 8011772:	d01e      	beq.n	80117b2 <_printf_common+0xa4>
 8011774:	6823      	ldr	r3, [r4, #0]
 8011776:	68e5      	ldr	r5, [r4, #12]
 8011778:	6832      	ldr	r2, [r6, #0]
 801177a:	f003 0306 	and.w	r3, r3, #6
 801177e:	2b04      	cmp	r3, #4
 8011780:	bf08      	it	eq
 8011782:	1aad      	subeq	r5, r5, r2
 8011784:	68a3      	ldr	r3, [r4, #8]
 8011786:	6922      	ldr	r2, [r4, #16]
 8011788:	bf0c      	ite	eq
 801178a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801178e:	2500      	movne	r5, #0
 8011790:	4293      	cmp	r3, r2
 8011792:	bfc4      	itt	gt
 8011794:	1a9b      	subgt	r3, r3, r2
 8011796:	18ed      	addgt	r5, r5, r3
 8011798:	2600      	movs	r6, #0
 801179a:	341a      	adds	r4, #26
 801179c:	42b5      	cmp	r5, r6
 801179e:	d11a      	bne.n	80117d6 <_printf_common+0xc8>
 80117a0:	2000      	movs	r0, #0
 80117a2:	e008      	b.n	80117b6 <_printf_common+0xa8>
 80117a4:	2301      	movs	r3, #1
 80117a6:	4652      	mov	r2, sl
 80117a8:	4649      	mov	r1, r9
 80117aa:	4638      	mov	r0, r7
 80117ac:	47c0      	blx	r8
 80117ae:	3001      	adds	r0, #1
 80117b0:	d103      	bne.n	80117ba <_printf_common+0xac>
 80117b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80117b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ba:	3501      	adds	r5, #1
 80117bc:	e7c6      	b.n	801174c <_printf_common+0x3e>
 80117be:	18e1      	adds	r1, r4, r3
 80117c0:	1c5a      	adds	r2, r3, #1
 80117c2:	2030      	movs	r0, #48	; 0x30
 80117c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80117c8:	4422      	add	r2, r4
 80117ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80117ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80117d2:	3302      	adds	r3, #2
 80117d4:	e7c7      	b.n	8011766 <_printf_common+0x58>
 80117d6:	2301      	movs	r3, #1
 80117d8:	4622      	mov	r2, r4
 80117da:	4649      	mov	r1, r9
 80117dc:	4638      	mov	r0, r7
 80117de:	47c0      	blx	r8
 80117e0:	3001      	adds	r0, #1
 80117e2:	d0e6      	beq.n	80117b2 <_printf_common+0xa4>
 80117e4:	3601      	adds	r6, #1
 80117e6:	e7d9      	b.n	801179c <_printf_common+0x8e>

080117e8 <_printf_i>:
 80117e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117ec:	460c      	mov	r4, r1
 80117ee:	4691      	mov	r9, r2
 80117f0:	7e27      	ldrb	r7, [r4, #24]
 80117f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80117f4:	2f78      	cmp	r7, #120	; 0x78
 80117f6:	4680      	mov	r8, r0
 80117f8:	469a      	mov	sl, r3
 80117fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80117fe:	d807      	bhi.n	8011810 <_printf_i+0x28>
 8011800:	2f62      	cmp	r7, #98	; 0x62
 8011802:	d80a      	bhi.n	801181a <_printf_i+0x32>
 8011804:	2f00      	cmp	r7, #0
 8011806:	f000 80d8 	beq.w	80119ba <_printf_i+0x1d2>
 801180a:	2f58      	cmp	r7, #88	; 0x58
 801180c:	f000 80a3 	beq.w	8011956 <_printf_i+0x16e>
 8011810:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011818:	e03a      	b.n	8011890 <_printf_i+0xa8>
 801181a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801181e:	2b15      	cmp	r3, #21
 8011820:	d8f6      	bhi.n	8011810 <_printf_i+0x28>
 8011822:	a001      	add	r0, pc, #4	; (adr r0, 8011828 <_printf_i+0x40>)
 8011824:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011828:	08011881 	.word	0x08011881
 801182c:	08011895 	.word	0x08011895
 8011830:	08011811 	.word	0x08011811
 8011834:	08011811 	.word	0x08011811
 8011838:	08011811 	.word	0x08011811
 801183c:	08011811 	.word	0x08011811
 8011840:	08011895 	.word	0x08011895
 8011844:	08011811 	.word	0x08011811
 8011848:	08011811 	.word	0x08011811
 801184c:	08011811 	.word	0x08011811
 8011850:	08011811 	.word	0x08011811
 8011854:	080119a1 	.word	0x080119a1
 8011858:	080118c5 	.word	0x080118c5
 801185c:	08011983 	.word	0x08011983
 8011860:	08011811 	.word	0x08011811
 8011864:	08011811 	.word	0x08011811
 8011868:	080119c3 	.word	0x080119c3
 801186c:	08011811 	.word	0x08011811
 8011870:	080118c5 	.word	0x080118c5
 8011874:	08011811 	.word	0x08011811
 8011878:	08011811 	.word	0x08011811
 801187c:	0801198b 	.word	0x0801198b
 8011880:	680b      	ldr	r3, [r1, #0]
 8011882:	1d1a      	adds	r2, r3, #4
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	600a      	str	r2, [r1, #0]
 8011888:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801188c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011890:	2301      	movs	r3, #1
 8011892:	e0a3      	b.n	80119dc <_printf_i+0x1f4>
 8011894:	6825      	ldr	r5, [r4, #0]
 8011896:	6808      	ldr	r0, [r1, #0]
 8011898:	062e      	lsls	r6, r5, #24
 801189a:	f100 0304 	add.w	r3, r0, #4
 801189e:	d50a      	bpl.n	80118b6 <_printf_i+0xce>
 80118a0:	6805      	ldr	r5, [r0, #0]
 80118a2:	600b      	str	r3, [r1, #0]
 80118a4:	2d00      	cmp	r5, #0
 80118a6:	da03      	bge.n	80118b0 <_printf_i+0xc8>
 80118a8:	232d      	movs	r3, #45	; 0x2d
 80118aa:	426d      	negs	r5, r5
 80118ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118b0:	485e      	ldr	r0, [pc, #376]	; (8011a2c <_printf_i+0x244>)
 80118b2:	230a      	movs	r3, #10
 80118b4:	e019      	b.n	80118ea <_printf_i+0x102>
 80118b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80118ba:	6805      	ldr	r5, [r0, #0]
 80118bc:	600b      	str	r3, [r1, #0]
 80118be:	bf18      	it	ne
 80118c0:	b22d      	sxthne	r5, r5
 80118c2:	e7ef      	b.n	80118a4 <_printf_i+0xbc>
 80118c4:	680b      	ldr	r3, [r1, #0]
 80118c6:	6825      	ldr	r5, [r4, #0]
 80118c8:	1d18      	adds	r0, r3, #4
 80118ca:	6008      	str	r0, [r1, #0]
 80118cc:	0628      	lsls	r0, r5, #24
 80118ce:	d501      	bpl.n	80118d4 <_printf_i+0xec>
 80118d0:	681d      	ldr	r5, [r3, #0]
 80118d2:	e002      	b.n	80118da <_printf_i+0xf2>
 80118d4:	0669      	lsls	r1, r5, #25
 80118d6:	d5fb      	bpl.n	80118d0 <_printf_i+0xe8>
 80118d8:	881d      	ldrh	r5, [r3, #0]
 80118da:	4854      	ldr	r0, [pc, #336]	; (8011a2c <_printf_i+0x244>)
 80118dc:	2f6f      	cmp	r7, #111	; 0x6f
 80118de:	bf0c      	ite	eq
 80118e0:	2308      	moveq	r3, #8
 80118e2:	230a      	movne	r3, #10
 80118e4:	2100      	movs	r1, #0
 80118e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80118ea:	6866      	ldr	r6, [r4, #4]
 80118ec:	60a6      	str	r6, [r4, #8]
 80118ee:	2e00      	cmp	r6, #0
 80118f0:	bfa2      	ittt	ge
 80118f2:	6821      	ldrge	r1, [r4, #0]
 80118f4:	f021 0104 	bicge.w	r1, r1, #4
 80118f8:	6021      	strge	r1, [r4, #0]
 80118fa:	b90d      	cbnz	r5, 8011900 <_printf_i+0x118>
 80118fc:	2e00      	cmp	r6, #0
 80118fe:	d04d      	beq.n	801199c <_printf_i+0x1b4>
 8011900:	4616      	mov	r6, r2
 8011902:	fbb5 f1f3 	udiv	r1, r5, r3
 8011906:	fb03 5711 	mls	r7, r3, r1, r5
 801190a:	5dc7      	ldrb	r7, [r0, r7]
 801190c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011910:	462f      	mov	r7, r5
 8011912:	42bb      	cmp	r3, r7
 8011914:	460d      	mov	r5, r1
 8011916:	d9f4      	bls.n	8011902 <_printf_i+0x11a>
 8011918:	2b08      	cmp	r3, #8
 801191a:	d10b      	bne.n	8011934 <_printf_i+0x14c>
 801191c:	6823      	ldr	r3, [r4, #0]
 801191e:	07df      	lsls	r7, r3, #31
 8011920:	d508      	bpl.n	8011934 <_printf_i+0x14c>
 8011922:	6923      	ldr	r3, [r4, #16]
 8011924:	6861      	ldr	r1, [r4, #4]
 8011926:	4299      	cmp	r1, r3
 8011928:	bfde      	ittt	le
 801192a:	2330      	movle	r3, #48	; 0x30
 801192c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011930:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8011934:	1b92      	subs	r2, r2, r6
 8011936:	6122      	str	r2, [r4, #16]
 8011938:	f8cd a000 	str.w	sl, [sp]
 801193c:	464b      	mov	r3, r9
 801193e:	aa03      	add	r2, sp, #12
 8011940:	4621      	mov	r1, r4
 8011942:	4640      	mov	r0, r8
 8011944:	f7ff fee3 	bl	801170e <_printf_common>
 8011948:	3001      	adds	r0, #1
 801194a:	d14c      	bne.n	80119e6 <_printf_i+0x1fe>
 801194c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011950:	b004      	add	sp, #16
 8011952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011956:	4835      	ldr	r0, [pc, #212]	; (8011a2c <_printf_i+0x244>)
 8011958:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801195c:	6823      	ldr	r3, [r4, #0]
 801195e:	680e      	ldr	r6, [r1, #0]
 8011960:	061f      	lsls	r7, r3, #24
 8011962:	f856 5b04 	ldr.w	r5, [r6], #4
 8011966:	600e      	str	r6, [r1, #0]
 8011968:	d514      	bpl.n	8011994 <_printf_i+0x1ac>
 801196a:	07d9      	lsls	r1, r3, #31
 801196c:	bf44      	itt	mi
 801196e:	f043 0320 	orrmi.w	r3, r3, #32
 8011972:	6023      	strmi	r3, [r4, #0]
 8011974:	b91d      	cbnz	r5, 801197e <_printf_i+0x196>
 8011976:	6823      	ldr	r3, [r4, #0]
 8011978:	f023 0320 	bic.w	r3, r3, #32
 801197c:	6023      	str	r3, [r4, #0]
 801197e:	2310      	movs	r3, #16
 8011980:	e7b0      	b.n	80118e4 <_printf_i+0xfc>
 8011982:	6823      	ldr	r3, [r4, #0]
 8011984:	f043 0320 	orr.w	r3, r3, #32
 8011988:	6023      	str	r3, [r4, #0]
 801198a:	2378      	movs	r3, #120	; 0x78
 801198c:	4828      	ldr	r0, [pc, #160]	; (8011a30 <_printf_i+0x248>)
 801198e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011992:	e7e3      	b.n	801195c <_printf_i+0x174>
 8011994:	065e      	lsls	r6, r3, #25
 8011996:	bf48      	it	mi
 8011998:	b2ad      	uxthmi	r5, r5
 801199a:	e7e6      	b.n	801196a <_printf_i+0x182>
 801199c:	4616      	mov	r6, r2
 801199e:	e7bb      	b.n	8011918 <_printf_i+0x130>
 80119a0:	680b      	ldr	r3, [r1, #0]
 80119a2:	6826      	ldr	r6, [r4, #0]
 80119a4:	6960      	ldr	r0, [r4, #20]
 80119a6:	1d1d      	adds	r5, r3, #4
 80119a8:	600d      	str	r5, [r1, #0]
 80119aa:	0635      	lsls	r5, r6, #24
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	d501      	bpl.n	80119b4 <_printf_i+0x1cc>
 80119b0:	6018      	str	r0, [r3, #0]
 80119b2:	e002      	b.n	80119ba <_printf_i+0x1d2>
 80119b4:	0671      	lsls	r1, r6, #25
 80119b6:	d5fb      	bpl.n	80119b0 <_printf_i+0x1c8>
 80119b8:	8018      	strh	r0, [r3, #0]
 80119ba:	2300      	movs	r3, #0
 80119bc:	6123      	str	r3, [r4, #16]
 80119be:	4616      	mov	r6, r2
 80119c0:	e7ba      	b.n	8011938 <_printf_i+0x150>
 80119c2:	680b      	ldr	r3, [r1, #0]
 80119c4:	1d1a      	adds	r2, r3, #4
 80119c6:	600a      	str	r2, [r1, #0]
 80119c8:	681e      	ldr	r6, [r3, #0]
 80119ca:	6862      	ldr	r2, [r4, #4]
 80119cc:	2100      	movs	r1, #0
 80119ce:	4630      	mov	r0, r6
 80119d0:	f7ee fbfe 	bl	80001d0 <memchr>
 80119d4:	b108      	cbz	r0, 80119da <_printf_i+0x1f2>
 80119d6:	1b80      	subs	r0, r0, r6
 80119d8:	6060      	str	r0, [r4, #4]
 80119da:	6863      	ldr	r3, [r4, #4]
 80119dc:	6123      	str	r3, [r4, #16]
 80119de:	2300      	movs	r3, #0
 80119e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119e4:	e7a8      	b.n	8011938 <_printf_i+0x150>
 80119e6:	6923      	ldr	r3, [r4, #16]
 80119e8:	4632      	mov	r2, r6
 80119ea:	4649      	mov	r1, r9
 80119ec:	4640      	mov	r0, r8
 80119ee:	47d0      	blx	sl
 80119f0:	3001      	adds	r0, #1
 80119f2:	d0ab      	beq.n	801194c <_printf_i+0x164>
 80119f4:	6823      	ldr	r3, [r4, #0]
 80119f6:	079b      	lsls	r3, r3, #30
 80119f8:	d413      	bmi.n	8011a22 <_printf_i+0x23a>
 80119fa:	68e0      	ldr	r0, [r4, #12]
 80119fc:	9b03      	ldr	r3, [sp, #12]
 80119fe:	4298      	cmp	r0, r3
 8011a00:	bfb8      	it	lt
 8011a02:	4618      	movlt	r0, r3
 8011a04:	e7a4      	b.n	8011950 <_printf_i+0x168>
 8011a06:	2301      	movs	r3, #1
 8011a08:	4632      	mov	r2, r6
 8011a0a:	4649      	mov	r1, r9
 8011a0c:	4640      	mov	r0, r8
 8011a0e:	47d0      	blx	sl
 8011a10:	3001      	adds	r0, #1
 8011a12:	d09b      	beq.n	801194c <_printf_i+0x164>
 8011a14:	3501      	adds	r5, #1
 8011a16:	68e3      	ldr	r3, [r4, #12]
 8011a18:	9903      	ldr	r1, [sp, #12]
 8011a1a:	1a5b      	subs	r3, r3, r1
 8011a1c:	42ab      	cmp	r3, r5
 8011a1e:	dcf2      	bgt.n	8011a06 <_printf_i+0x21e>
 8011a20:	e7eb      	b.n	80119fa <_printf_i+0x212>
 8011a22:	2500      	movs	r5, #0
 8011a24:	f104 0619 	add.w	r6, r4, #25
 8011a28:	e7f5      	b.n	8011a16 <_printf_i+0x22e>
 8011a2a:	bf00      	nop
 8011a2c:	08014184 	.word	0x08014184
 8011a30:	08014195 	.word	0x08014195

08011a34 <strcpy>:
 8011a34:	4603      	mov	r3, r0
 8011a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a3a:	f803 2b01 	strb.w	r2, [r3], #1
 8011a3e:	2a00      	cmp	r2, #0
 8011a40:	d1f9      	bne.n	8011a36 <strcpy+0x2>
 8011a42:	4770      	bx	lr

08011a44 <__assert_func>:
 8011a44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a46:	4614      	mov	r4, r2
 8011a48:	461a      	mov	r2, r3
 8011a4a:	4b09      	ldr	r3, [pc, #36]	; (8011a70 <__assert_func+0x2c>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	4605      	mov	r5, r0
 8011a50:	68d8      	ldr	r0, [r3, #12]
 8011a52:	b14c      	cbz	r4, 8011a68 <__assert_func+0x24>
 8011a54:	4b07      	ldr	r3, [pc, #28]	; (8011a74 <__assert_func+0x30>)
 8011a56:	9100      	str	r1, [sp, #0]
 8011a58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a5c:	4906      	ldr	r1, [pc, #24]	; (8011a78 <__assert_func+0x34>)
 8011a5e:	462b      	mov	r3, r5
 8011a60:	f000 fe86 	bl	8012770 <fiprintf>
 8011a64:	f001 f8b2 	bl	8012bcc <abort>
 8011a68:	4b04      	ldr	r3, [pc, #16]	; (8011a7c <__assert_func+0x38>)
 8011a6a:	461c      	mov	r4, r3
 8011a6c:	e7f3      	b.n	8011a56 <__assert_func+0x12>
 8011a6e:	bf00      	nop
 8011a70:	20000294 	.word	0x20000294
 8011a74:	080141a6 	.word	0x080141a6
 8011a78:	080141b3 	.word	0x080141b3
 8011a7c:	080141e1 	.word	0x080141e1

08011a80 <quorem>:
 8011a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a84:	6903      	ldr	r3, [r0, #16]
 8011a86:	690c      	ldr	r4, [r1, #16]
 8011a88:	42a3      	cmp	r3, r4
 8011a8a:	4607      	mov	r7, r0
 8011a8c:	f2c0 8081 	blt.w	8011b92 <quorem+0x112>
 8011a90:	3c01      	subs	r4, #1
 8011a92:	f101 0814 	add.w	r8, r1, #20
 8011a96:	f100 0514 	add.w	r5, r0, #20
 8011a9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a9e:	9301      	str	r3, [sp, #4]
 8011aa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011aa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011ab0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011ab4:	fbb2 f6f3 	udiv	r6, r2, r3
 8011ab8:	d331      	bcc.n	8011b1e <quorem+0x9e>
 8011aba:	f04f 0e00 	mov.w	lr, #0
 8011abe:	4640      	mov	r0, r8
 8011ac0:	46ac      	mov	ip, r5
 8011ac2:	46f2      	mov	sl, lr
 8011ac4:	f850 2b04 	ldr.w	r2, [r0], #4
 8011ac8:	b293      	uxth	r3, r2
 8011aca:	fb06 e303 	mla	r3, r6, r3, lr
 8011ace:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	ebaa 0303 	sub.w	r3, sl, r3
 8011ad8:	0c12      	lsrs	r2, r2, #16
 8011ada:	f8dc a000 	ldr.w	sl, [ip]
 8011ade:	fb06 e202 	mla	r2, r6, r2, lr
 8011ae2:	fa13 f38a 	uxtah	r3, r3, sl
 8011ae6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011aea:	fa1f fa82 	uxth.w	sl, r2
 8011aee:	f8dc 2000 	ldr.w	r2, [ip]
 8011af2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011af6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011afa:	b29b      	uxth	r3, r3
 8011afc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011b00:	4581      	cmp	r9, r0
 8011b02:	f84c 3b04 	str.w	r3, [ip], #4
 8011b06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011b0a:	d2db      	bcs.n	8011ac4 <quorem+0x44>
 8011b0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8011b10:	b92b      	cbnz	r3, 8011b1e <quorem+0x9e>
 8011b12:	9b01      	ldr	r3, [sp, #4]
 8011b14:	3b04      	subs	r3, #4
 8011b16:	429d      	cmp	r5, r3
 8011b18:	461a      	mov	r2, r3
 8011b1a:	d32e      	bcc.n	8011b7a <quorem+0xfa>
 8011b1c:	613c      	str	r4, [r7, #16]
 8011b1e:	4638      	mov	r0, r7
 8011b20:	f7ff fcc8 	bl	80114b4 <__mcmp>
 8011b24:	2800      	cmp	r0, #0
 8011b26:	db24      	blt.n	8011b72 <quorem+0xf2>
 8011b28:	3601      	adds	r6, #1
 8011b2a:	4628      	mov	r0, r5
 8011b2c:	f04f 0c00 	mov.w	ip, #0
 8011b30:	f858 2b04 	ldr.w	r2, [r8], #4
 8011b34:	f8d0 e000 	ldr.w	lr, [r0]
 8011b38:	b293      	uxth	r3, r2
 8011b3a:	ebac 0303 	sub.w	r3, ip, r3
 8011b3e:	0c12      	lsrs	r2, r2, #16
 8011b40:	fa13 f38e 	uxtah	r3, r3, lr
 8011b44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011b48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011b4c:	b29b      	uxth	r3, r3
 8011b4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011b52:	45c1      	cmp	r9, r8
 8011b54:	f840 3b04 	str.w	r3, [r0], #4
 8011b58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011b5c:	d2e8      	bcs.n	8011b30 <quorem+0xb0>
 8011b5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011b62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011b66:	b922      	cbnz	r2, 8011b72 <quorem+0xf2>
 8011b68:	3b04      	subs	r3, #4
 8011b6a:	429d      	cmp	r5, r3
 8011b6c:	461a      	mov	r2, r3
 8011b6e:	d30a      	bcc.n	8011b86 <quorem+0x106>
 8011b70:	613c      	str	r4, [r7, #16]
 8011b72:	4630      	mov	r0, r6
 8011b74:	b003      	add	sp, #12
 8011b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b7a:	6812      	ldr	r2, [r2, #0]
 8011b7c:	3b04      	subs	r3, #4
 8011b7e:	2a00      	cmp	r2, #0
 8011b80:	d1cc      	bne.n	8011b1c <quorem+0x9c>
 8011b82:	3c01      	subs	r4, #1
 8011b84:	e7c7      	b.n	8011b16 <quorem+0x96>
 8011b86:	6812      	ldr	r2, [r2, #0]
 8011b88:	3b04      	subs	r3, #4
 8011b8a:	2a00      	cmp	r2, #0
 8011b8c:	d1f0      	bne.n	8011b70 <quorem+0xf0>
 8011b8e:	3c01      	subs	r4, #1
 8011b90:	e7eb      	b.n	8011b6a <quorem+0xea>
 8011b92:	2000      	movs	r0, #0
 8011b94:	e7ee      	b.n	8011b74 <quorem+0xf4>
	...

08011b98 <_dtoa_r>:
 8011b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b9c:	ed2d 8b02 	vpush	{d8}
 8011ba0:	ec57 6b10 	vmov	r6, r7, d0
 8011ba4:	b095      	sub	sp, #84	; 0x54
 8011ba6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011ba8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011bac:	9105      	str	r1, [sp, #20]
 8011bae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011bb2:	4604      	mov	r4, r0
 8011bb4:	9209      	str	r2, [sp, #36]	; 0x24
 8011bb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8011bb8:	b975      	cbnz	r5, 8011bd8 <_dtoa_r+0x40>
 8011bba:	2010      	movs	r0, #16
 8011bbc:	f7fe ff74 	bl	8010aa8 <malloc>
 8011bc0:	4602      	mov	r2, r0
 8011bc2:	6260      	str	r0, [r4, #36]	; 0x24
 8011bc4:	b920      	cbnz	r0, 8011bd0 <_dtoa_r+0x38>
 8011bc6:	4bb2      	ldr	r3, [pc, #712]	; (8011e90 <_dtoa_r+0x2f8>)
 8011bc8:	21ea      	movs	r1, #234	; 0xea
 8011bca:	48b2      	ldr	r0, [pc, #712]	; (8011e94 <_dtoa_r+0x2fc>)
 8011bcc:	f7ff ff3a 	bl	8011a44 <__assert_func>
 8011bd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011bd4:	6005      	str	r5, [r0, #0]
 8011bd6:	60c5      	str	r5, [r0, #12]
 8011bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011bda:	6819      	ldr	r1, [r3, #0]
 8011bdc:	b151      	cbz	r1, 8011bf4 <_dtoa_r+0x5c>
 8011bde:	685a      	ldr	r2, [r3, #4]
 8011be0:	604a      	str	r2, [r1, #4]
 8011be2:	2301      	movs	r3, #1
 8011be4:	4093      	lsls	r3, r2
 8011be6:	608b      	str	r3, [r1, #8]
 8011be8:	4620      	mov	r0, r4
 8011bea:	f7ff fa25 	bl	8011038 <_Bfree>
 8011bee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	601a      	str	r2, [r3, #0]
 8011bf4:	1e3b      	subs	r3, r7, #0
 8011bf6:	bfb9      	ittee	lt
 8011bf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011bfc:	9303      	strlt	r3, [sp, #12]
 8011bfe:	2300      	movge	r3, #0
 8011c00:	f8c8 3000 	strge.w	r3, [r8]
 8011c04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011c08:	4ba3      	ldr	r3, [pc, #652]	; (8011e98 <_dtoa_r+0x300>)
 8011c0a:	bfbc      	itt	lt
 8011c0c:	2201      	movlt	r2, #1
 8011c0e:	f8c8 2000 	strlt.w	r2, [r8]
 8011c12:	ea33 0309 	bics.w	r3, r3, r9
 8011c16:	d11b      	bne.n	8011c50 <_dtoa_r+0xb8>
 8011c18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8011c1e:	6013      	str	r3, [r2, #0]
 8011c20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c24:	4333      	orrs	r3, r6
 8011c26:	f000 857a 	beq.w	801271e <_dtoa_r+0xb86>
 8011c2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c2c:	b963      	cbnz	r3, 8011c48 <_dtoa_r+0xb0>
 8011c2e:	4b9b      	ldr	r3, [pc, #620]	; (8011e9c <_dtoa_r+0x304>)
 8011c30:	e024      	b.n	8011c7c <_dtoa_r+0xe4>
 8011c32:	4b9b      	ldr	r3, [pc, #620]	; (8011ea0 <_dtoa_r+0x308>)
 8011c34:	9300      	str	r3, [sp, #0]
 8011c36:	3308      	adds	r3, #8
 8011c38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011c3a:	6013      	str	r3, [r2, #0]
 8011c3c:	9800      	ldr	r0, [sp, #0]
 8011c3e:	b015      	add	sp, #84	; 0x54
 8011c40:	ecbd 8b02 	vpop	{d8}
 8011c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c48:	4b94      	ldr	r3, [pc, #592]	; (8011e9c <_dtoa_r+0x304>)
 8011c4a:	9300      	str	r3, [sp, #0]
 8011c4c:	3303      	adds	r3, #3
 8011c4e:	e7f3      	b.n	8011c38 <_dtoa_r+0xa0>
 8011c50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c54:	2200      	movs	r2, #0
 8011c56:	ec51 0b17 	vmov	r0, r1, d7
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011c60:	f7ee ff2a 	bl	8000ab8 <__aeabi_dcmpeq>
 8011c64:	4680      	mov	r8, r0
 8011c66:	b158      	cbz	r0, 8011c80 <_dtoa_r+0xe8>
 8011c68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	6013      	str	r3, [r2, #0]
 8011c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	f000 8551 	beq.w	8012718 <_dtoa_r+0xb80>
 8011c76:	488b      	ldr	r0, [pc, #556]	; (8011ea4 <_dtoa_r+0x30c>)
 8011c78:	6018      	str	r0, [r3, #0]
 8011c7a:	1e43      	subs	r3, r0, #1
 8011c7c:	9300      	str	r3, [sp, #0]
 8011c7e:	e7dd      	b.n	8011c3c <_dtoa_r+0xa4>
 8011c80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011c84:	aa12      	add	r2, sp, #72	; 0x48
 8011c86:	a913      	add	r1, sp, #76	; 0x4c
 8011c88:	4620      	mov	r0, r4
 8011c8a:	f7ff fcb7 	bl	80115fc <__d2b>
 8011c8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011c92:	4683      	mov	fp, r0
 8011c94:	2d00      	cmp	r5, #0
 8011c96:	d07c      	beq.n	8011d92 <_dtoa_r+0x1fa>
 8011c98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011c9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ca2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8011ca6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011caa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011cae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011cb2:	4b7d      	ldr	r3, [pc, #500]	; (8011ea8 <_dtoa_r+0x310>)
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	4630      	mov	r0, r6
 8011cb8:	4639      	mov	r1, r7
 8011cba:	f7ee fadd 	bl	8000278 <__aeabi_dsub>
 8011cbe:	a36e      	add	r3, pc, #440	; (adr r3, 8011e78 <_dtoa_r+0x2e0>)
 8011cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc4:	f7ee fc90 	bl	80005e8 <__aeabi_dmul>
 8011cc8:	a36d      	add	r3, pc, #436	; (adr r3, 8011e80 <_dtoa_r+0x2e8>)
 8011cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cce:	f7ee fad5 	bl	800027c <__adddf3>
 8011cd2:	4606      	mov	r6, r0
 8011cd4:	4628      	mov	r0, r5
 8011cd6:	460f      	mov	r7, r1
 8011cd8:	f7ee fc1c 	bl	8000514 <__aeabi_i2d>
 8011cdc:	a36a      	add	r3, pc, #424	; (adr r3, 8011e88 <_dtoa_r+0x2f0>)
 8011cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce2:	f7ee fc81 	bl	80005e8 <__aeabi_dmul>
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	460b      	mov	r3, r1
 8011cea:	4630      	mov	r0, r6
 8011cec:	4639      	mov	r1, r7
 8011cee:	f7ee fac5 	bl	800027c <__adddf3>
 8011cf2:	4606      	mov	r6, r0
 8011cf4:	460f      	mov	r7, r1
 8011cf6:	f7ee ff27 	bl	8000b48 <__aeabi_d2iz>
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	4682      	mov	sl, r0
 8011cfe:	2300      	movs	r3, #0
 8011d00:	4630      	mov	r0, r6
 8011d02:	4639      	mov	r1, r7
 8011d04:	f7ee fee2 	bl	8000acc <__aeabi_dcmplt>
 8011d08:	b148      	cbz	r0, 8011d1e <_dtoa_r+0x186>
 8011d0a:	4650      	mov	r0, sl
 8011d0c:	f7ee fc02 	bl	8000514 <__aeabi_i2d>
 8011d10:	4632      	mov	r2, r6
 8011d12:	463b      	mov	r3, r7
 8011d14:	f7ee fed0 	bl	8000ab8 <__aeabi_dcmpeq>
 8011d18:	b908      	cbnz	r0, 8011d1e <_dtoa_r+0x186>
 8011d1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011d1e:	f1ba 0f16 	cmp.w	sl, #22
 8011d22:	d854      	bhi.n	8011dce <_dtoa_r+0x236>
 8011d24:	4b61      	ldr	r3, [pc, #388]	; (8011eac <_dtoa_r+0x314>)
 8011d26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011d32:	f7ee fecb 	bl	8000acc <__aeabi_dcmplt>
 8011d36:	2800      	cmp	r0, #0
 8011d38:	d04b      	beq.n	8011dd2 <_dtoa_r+0x23a>
 8011d3a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011d3e:	2300      	movs	r3, #0
 8011d40:	930e      	str	r3, [sp, #56]	; 0x38
 8011d42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011d44:	1b5d      	subs	r5, r3, r5
 8011d46:	1e6b      	subs	r3, r5, #1
 8011d48:	9304      	str	r3, [sp, #16]
 8011d4a:	bf43      	ittte	mi
 8011d4c:	2300      	movmi	r3, #0
 8011d4e:	f1c5 0801 	rsbmi	r8, r5, #1
 8011d52:	9304      	strmi	r3, [sp, #16]
 8011d54:	f04f 0800 	movpl.w	r8, #0
 8011d58:	f1ba 0f00 	cmp.w	sl, #0
 8011d5c:	db3b      	blt.n	8011dd6 <_dtoa_r+0x23e>
 8011d5e:	9b04      	ldr	r3, [sp, #16]
 8011d60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8011d64:	4453      	add	r3, sl
 8011d66:	9304      	str	r3, [sp, #16]
 8011d68:	2300      	movs	r3, #0
 8011d6a:	9306      	str	r3, [sp, #24]
 8011d6c:	9b05      	ldr	r3, [sp, #20]
 8011d6e:	2b09      	cmp	r3, #9
 8011d70:	d869      	bhi.n	8011e46 <_dtoa_r+0x2ae>
 8011d72:	2b05      	cmp	r3, #5
 8011d74:	bfc4      	itt	gt
 8011d76:	3b04      	subgt	r3, #4
 8011d78:	9305      	strgt	r3, [sp, #20]
 8011d7a:	9b05      	ldr	r3, [sp, #20]
 8011d7c:	f1a3 0302 	sub.w	r3, r3, #2
 8011d80:	bfcc      	ite	gt
 8011d82:	2500      	movgt	r5, #0
 8011d84:	2501      	movle	r5, #1
 8011d86:	2b03      	cmp	r3, #3
 8011d88:	d869      	bhi.n	8011e5e <_dtoa_r+0x2c6>
 8011d8a:	e8df f003 	tbb	[pc, r3]
 8011d8e:	4e2c      	.short	0x4e2c
 8011d90:	5a4c      	.short	0x5a4c
 8011d92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8011d96:	441d      	add	r5, r3
 8011d98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011d9c:	2b20      	cmp	r3, #32
 8011d9e:	bfc1      	itttt	gt
 8011da0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011da4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011da8:	fa09 f303 	lslgt.w	r3, r9, r3
 8011dac:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011db0:	bfda      	itte	le
 8011db2:	f1c3 0320 	rsble	r3, r3, #32
 8011db6:	fa06 f003 	lslle.w	r0, r6, r3
 8011dba:	4318      	orrgt	r0, r3
 8011dbc:	f7ee fb9a 	bl	80004f4 <__aeabi_ui2d>
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	4606      	mov	r6, r0
 8011dc4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011dc8:	3d01      	subs	r5, #1
 8011dca:	9310      	str	r3, [sp, #64]	; 0x40
 8011dcc:	e771      	b.n	8011cb2 <_dtoa_r+0x11a>
 8011dce:	2301      	movs	r3, #1
 8011dd0:	e7b6      	b.n	8011d40 <_dtoa_r+0x1a8>
 8011dd2:	900e      	str	r0, [sp, #56]	; 0x38
 8011dd4:	e7b5      	b.n	8011d42 <_dtoa_r+0x1aa>
 8011dd6:	f1ca 0300 	rsb	r3, sl, #0
 8011dda:	9306      	str	r3, [sp, #24]
 8011ddc:	2300      	movs	r3, #0
 8011dde:	eba8 080a 	sub.w	r8, r8, sl
 8011de2:	930d      	str	r3, [sp, #52]	; 0x34
 8011de4:	e7c2      	b.n	8011d6c <_dtoa_r+0x1d4>
 8011de6:	2300      	movs	r3, #0
 8011de8:	9308      	str	r3, [sp, #32]
 8011dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	dc39      	bgt.n	8011e64 <_dtoa_r+0x2cc>
 8011df0:	f04f 0901 	mov.w	r9, #1
 8011df4:	f8cd 9004 	str.w	r9, [sp, #4]
 8011df8:	464b      	mov	r3, r9
 8011dfa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011dfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011e00:	2200      	movs	r2, #0
 8011e02:	6042      	str	r2, [r0, #4]
 8011e04:	2204      	movs	r2, #4
 8011e06:	f102 0614 	add.w	r6, r2, #20
 8011e0a:	429e      	cmp	r6, r3
 8011e0c:	6841      	ldr	r1, [r0, #4]
 8011e0e:	d92f      	bls.n	8011e70 <_dtoa_r+0x2d8>
 8011e10:	4620      	mov	r0, r4
 8011e12:	f7ff f8d1 	bl	8010fb8 <_Balloc>
 8011e16:	9000      	str	r0, [sp, #0]
 8011e18:	2800      	cmp	r0, #0
 8011e1a:	d14b      	bne.n	8011eb4 <_dtoa_r+0x31c>
 8011e1c:	4b24      	ldr	r3, [pc, #144]	; (8011eb0 <_dtoa_r+0x318>)
 8011e1e:	4602      	mov	r2, r0
 8011e20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011e24:	e6d1      	b.n	8011bca <_dtoa_r+0x32>
 8011e26:	2301      	movs	r3, #1
 8011e28:	e7de      	b.n	8011de8 <_dtoa_r+0x250>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	9308      	str	r3, [sp, #32]
 8011e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e30:	eb0a 0903 	add.w	r9, sl, r3
 8011e34:	f109 0301 	add.w	r3, r9, #1
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	9301      	str	r3, [sp, #4]
 8011e3c:	bfb8      	it	lt
 8011e3e:	2301      	movlt	r3, #1
 8011e40:	e7dd      	b.n	8011dfe <_dtoa_r+0x266>
 8011e42:	2301      	movs	r3, #1
 8011e44:	e7f2      	b.n	8011e2c <_dtoa_r+0x294>
 8011e46:	2501      	movs	r5, #1
 8011e48:	2300      	movs	r3, #0
 8011e4a:	9305      	str	r3, [sp, #20]
 8011e4c:	9508      	str	r5, [sp, #32]
 8011e4e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8011e52:	2200      	movs	r2, #0
 8011e54:	f8cd 9004 	str.w	r9, [sp, #4]
 8011e58:	2312      	movs	r3, #18
 8011e5a:	9209      	str	r2, [sp, #36]	; 0x24
 8011e5c:	e7cf      	b.n	8011dfe <_dtoa_r+0x266>
 8011e5e:	2301      	movs	r3, #1
 8011e60:	9308      	str	r3, [sp, #32]
 8011e62:	e7f4      	b.n	8011e4e <_dtoa_r+0x2b6>
 8011e64:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011e68:	f8cd 9004 	str.w	r9, [sp, #4]
 8011e6c:	464b      	mov	r3, r9
 8011e6e:	e7c6      	b.n	8011dfe <_dtoa_r+0x266>
 8011e70:	3101      	adds	r1, #1
 8011e72:	6041      	str	r1, [r0, #4]
 8011e74:	0052      	lsls	r2, r2, #1
 8011e76:	e7c6      	b.n	8011e06 <_dtoa_r+0x26e>
 8011e78:	636f4361 	.word	0x636f4361
 8011e7c:	3fd287a7 	.word	0x3fd287a7
 8011e80:	8b60c8b3 	.word	0x8b60c8b3
 8011e84:	3fc68a28 	.word	0x3fc68a28
 8011e88:	509f79fb 	.word	0x509f79fb
 8011e8c:	3fd34413 	.word	0x3fd34413
 8011e90:	08013ff9 	.word	0x08013ff9
 8011e94:	080141f1 	.word	0x080141f1
 8011e98:	7ff00000 	.word	0x7ff00000
 8011e9c:	080141eb 	.word	0x080141eb
 8011ea0:	080141e2 	.word	0x080141e2
 8011ea4:	080141f0 	.word	0x080141f0
 8011ea8:	3ff80000 	.word	0x3ff80000
 8011eac:	080140b0 	.word	0x080140b0
 8011eb0:	08014070 	.word	0x08014070
 8011eb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011eb6:	9a00      	ldr	r2, [sp, #0]
 8011eb8:	601a      	str	r2, [r3, #0]
 8011eba:	9b01      	ldr	r3, [sp, #4]
 8011ebc:	2b0e      	cmp	r3, #14
 8011ebe:	f200 80ad 	bhi.w	801201c <_dtoa_r+0x484>
 8011ec2:	2d00      	cmp	r5, #0
 8011ec4:	f000 80aa 	beq.w	801201c <_dtoa_r+0x484>
 8011ec8:	f1ba 0f00 	cmp.w	sl, #0
 8011ecc:	dd36      	ble.n	8011f3c <_dtoa_r+0x3a4>
 8011ece:	4ac3      	ldr	r2, [pc, #780]	; (80121dc <_dtoa_r+0x644>)
 8011ed0:	f00a 030f 	and.w	r3, sl, #15
 8011ed4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011ed8:	ed93 7b00 	vldr	d7, [r3]
 8011edc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011ee0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8011ee4:	eeb0 8a47 	vmov.f32	s16, s14
 8011ee8:	eef0 8a67 	vmov.f32	s17, s15
 8011eec:	d016      	beq.n	8011f1c <_dtoa_r+0x384>
 8011eee:	4bbc      	ldr	r3, [pc, #752]	; (80121e0 <_dtoa_r+0x648>)
 8011ef0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011ef4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011ef8:	f7ee fca0 	bl	800083c <__aeabi_ddiv>
 8011efc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f00:	f007 070f 	and.w	r7, r7, #15
 8011f04:	2503      	movs	r5, #3
 8011f06:	4eb6      	ldr	r6, [pc, #728]	; (80121e0 <_dtoa_r+0x648>)
 8011f08:	b957      	cbnz	r7, 8011f20 <_dtoa_r+0x388>
 8011f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f0e:	ec53 2b18 	vmov	r2, r3, d8
 8011f12:	f7ee fc93 	bl	800083c <__aeabi_ddiv>
 8011f16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f1a:	e029      	b.n	8011f70 <_dtoa_r+0x3d8>
 8011f1c:	2502      	movs	r5, #2
 8011f1e:	e7f2      	b.n	8011f06 <_dtoa_r+0x36e>
 8011f20:	07f9      	lsls	r1, r7, #31
 8011f22:	d508      	bpl.n	8011f36 <_dtoa_r+0x39e>
 8011f24:	ec51 0b18 	vmov	r0, r1, d8
 8011f28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011f2c:	f7ee fb5c 	bl	80005e8 <__aeabi_dmul>
 8011f30:	ec41 0b18 	vmov	d8, r0, r1
 8011f34:	3501      	adds	r5, #1
 8011f36:	107f      	asrs	r7, r7, #1
 8011f38:	3608      	adds	r6, #8
 8011f3a:	e7e5      	b.n	8011f08 <_dtoa_r+0x370>
 8011f3c:	f000 80a6 	beq.w	801208c <_dtoa_r+0x4f4>
 8011f40:	f1ca 0600 	rsb	r6, sl, #0
 8011f44:	4ba5      	ldr	r3, [pc, #660]	; (80121dc <_dtoa_r+0x644>)
 8011f46:	4fa6      	ldr	r7, [pc, #664]	; (80121e0 <_dtoa_r+0x648>)
 8011f48:	f006 020f 	and.w	r2, r6, #15
 8011f4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011f58:	f7ee fb46 	bl	80005e8 <__aeabi_dmul>
 8011f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f60:	1136      	asrs	r6, r6, #4
 8011f62:	2300      	movs	r3, #0
 8011f64:	2502      	movs	r5, #2
 8011f66:	2e00      	cmp	r6, #0
 8011f68:	f040 8085 	bne.w	8012076 <_dtoa_r+0x4de>
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d1d2      	bne.n	8011f16 <_dtoa_r+0x37e>
 8011f70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	f000 808c 	beq.w	8012090 <_dtoa_r+0x4f8>
 8011f78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011f7c:	4b99      	ldr	r3, [pc, #612]	; (80121e4 <_dtoa_r+0x64c>)
 8011f7e:	2200      	movs	r2, #0
 8011f80:	4630      	mov	r0, r6
 8011f82:	4639      	mov	r1, r7
 8011f84:	f7ee fda2 	bl	8000acc <__aeabi_dcmplt>
 8011f88:	2800      	cmp	r0, #0
 8011f8a:	f000 8081 	beq.w	8012090 <_dtoa_r+0x4f8>
 8011f8e:	9b01      	ldr	r3, [sp, #4]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d07d      	beq.n	8012090 <_dtoa_r+0x4f8>
 8011f94:	f1b9 0f00 	cmp.w	r9, #0
 8011f98:	dd3c      	ble.n	8012014 <_dtoa_r+0x47c>
 8011f9a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011f9e:	9307      	str	r3, [sp, #28]
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	4b91      	ldr	r3, [pc, #580]	; (80121e8 <_dtoa_r+0x650>)
 8011fa4:	4630      	mov	r0, r6
 8011fa6:	4639      	mov	r1, r7
 8011fa8:	f7ee fb1e 	bl	80005e8 <__aeabi_dmul>
 8011fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fb0:	3501      	adds	r5, #1
 8011fb2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8011fb6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011fba:	4628      	mov	r0, r5
 8011fbc:	f7ee faaa 	bl	8000514 <__aeabi_i2d>
 8011fc0:	4632      	mov	r2, r6
 8011fc2:	463b      	mov	r3, r7
 8011fc4:	f7ee fb10 	bl	80005e8 <__aeabi_dmul>
 8011fc8:	4b88      	ldr	r3, [pc, #544]	; (80121ec <_dtoa_r+0x654>)
 8011fca:	2200      	movs	r2, #0
 8011fcc:	f7ee f956 	bl	800027c <__adddf3>
 8011fd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fd8:	9303      	str	r3, [sp, #12]
 8011fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d15c      	bne.n	801209a <_dtoa_r+0x502>
 8011fe0:	4b83      	ldr	r3, [pc, #524]	; (80121f0 <_dtoa_r+0x658>)
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	4630      	mov	r0, r6
 8011fe6:	4639      	mov	r1, r7
 8011fe8:	f7ee f946 	bl	8000278 <__aeabi_dsub>
 8011fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ff0:	4606      	mov	r6, r0
 8011ff2:	460f      	mov	r7, r1
 8011ff4:	f7ee fd88 	bl	8000b08 <__aeabi_dcmpgt>
 8011ff8:	2800      	cmp	r0, #0
 8011ffa:	f040 8296 	bne.w	801252a <_dtoa_r+0x992>
 8011ffe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012002:	4630      	mov	r0, r6
 8012004:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012008:	4639      	mov	r1, r7
 801200a:	f7ee fd5f 	bl	8000acc <__aeabi_dcmplt>
 801200e:	2800      	cmp	r0, #0
 8012010:	f040 8288 	bne.w	8012524 <_dtoa_r+0x98c>
 8012014:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012018:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801201c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801201e:	2b00      	cmp	r3, #0
 8012020:	f2c0 8158 	blt.w	80122d4 <_dtoa_r+0x73c>
 8012024:	f1ba 0f0e 	cmp.w	sl, #14
 8012028:	f300 8154 	bgt.w	80122d4 <_dtoa_r+0x73c>
 801202c:	4b6b      	ldr	r3, [pc, #428]	; (80121dc <_dtoa_r+0x644>)
 801202e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012032:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012038:	2b00      	cmp	r3, #0
 801203a:	f280 80e3 	bge.w	8012204 <_dtoa_r+0x66c>
 801203e:	9b01      	ldr	r3, [sp, #4]
 8012040:	2b00      	cmp	r3, #0
 8012042:	f300 80df 	bgt.w	8012204 <_dtoa_r+0x66c>
 8012046:	f040 826d 	bne.w	8012524 <_dtoa_r+0x98c>
 801204a:	4b69      	ldr	r3, [pc, #420]	; (80121f0 <_dtoa_r+0x658>)
 801204c:	2200      	movs	r2, #0
 801204e:	4640      	mov	r0, r8
 8012050:	4649      	mov	r1, r9
 8012052:	f7ee fac9 	bl	80005e8 <__aeabi_dmul>
 8012056:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801205a:	f7ee fd4b 	bl	8000af4 <__aeabi_dcmpge>
 801205e:	9e01      	ldr	r6, [sp, #4]
 8012060:	4637      	mov	r7, r6
 8012062:	2800      	cmp	r0, #0
 8012064:	f040 8243 	bne.w	80124ee <_dtoa_r+0x956>
 8012068:	9d00      	ldr	r5, [sp, #0]
 801206a:	2331      	movs	r3, #49	; 0x31
 801206c:	f805 3b01 	strb.w	r3, [r5], #1
 8012070:	f10a 0a01 	add.w	sl, sl, #1
 8012074:	e23f      	b.n	80124f6 <_dtoa_r+0x95e>
 8012076:	07f2      	lsls	r2, r6, #31
 8012078:	d505      	bpl.n	8012086 <_dtoa_r+0x4ee>
 801207a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801207e:	f7ee fab3 	bl	80005e8 <__aeabi_dmul>
 8012082:	3501      	adds	r5, #1
 8012084:	2301      	movs	r3, #1
 8012086:	1076      	asrs	r6, r6, #1
 8012088:	3708      	adds	r7, #8
 801208a:	e76c      	b.n	8011f66 <_dtoa_r+0x3ce>
 801208c:	2502      	movs	r5, #2
 801208e:	e76f      	b.n	8011f70 <_dtoa_r+0x3d8>
 8012090:	9b01      	ldr	r3, [sp, #4]
 8012092:	f8cd a01c 	str.w	sl, [sp, #28]
 8012096:	930c      	str	r3, [sp, #48]	; 0x30
 8012098:	e78d      	b.n	8011fb6 <_dtoa_r+0x41e>
 801209a:	9900      	ldr	r1, [sp, #0]
 801209c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801209e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80120a0:	4b4e      	ldr	r3, [pc, #312]	; (80121dc <_dtoa_r+0x644>)
 80120a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80120a6:	4401      	add	r1, r0
 80120a8:	9102      	str	r1, [sp, #8]
 80120aa:	9908      	ldr	r1, [sp, #32]
 80120ac:	eeb0 8a47 	vmov.f32	s16, s14
 80120b0:	eef0 8a67 	vmov.f32	s17, s15
 80120b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80120b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80120bc:	2900      	cmp	r1, #0
 80120be:	d045      	beq.n	801214c <_dtoa_r+0x5b4>
 80120c0:	494c      	ldr	r1, [pc, #304]	; (80121f4 <_dtoa_r+0x65c>)
 80120c2:	2000      	movs	r0, #0
 80120c4:	f7ee fbba 	bl	800083c <__aeabi_ddiv>
 80120c8:	ec53 2b18 	vmov	r2, r3, d8
 80120cc:	f7ee f8d4 	bl	8000278 <__aeabi_dsub>
 80120d0:	9d00      	ldr	r5, [sp, #0]
 80120d2:	ec41 0b18 	vmov	d8, r0, r1
 80120d6:	4639      	mov	r1, r7
 80120d8:	4630      	mov	r0, r6
 80120da:	f7ee fd35 	bl	8000b48 <__aeabi_d2iz>
 80120de:	900c      	str	r0, [sp, #48]	; 0x30
 80120e0:	f7ee fa18 	bl	8000514 <__aeabi_i2d>
 80120e4:	4602      	mov	r2, r0
 80120e6:	460b      	mov	r3, r1
 80120e8:	4630      	mov	r0, r6
 80120ea:	4639      	mov	r1, r7
 80120ec:	f7ee f8c4 	bl	8000278 <__aeabi_dsub>
 80120f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120f2:	3330      	adds	r3, #48	; 0x30
 80120f4:	f805 3b01 	strb.w	r3, [r5], #1
 80120f8:	ec53 2b18 	vmov	r2, r3, d8
 80120fc:	4606      	mov	r6, r0
 80120fe:	460f      	mov	r7, r1
 8012100:	f7ee fce4 	bl	8000acc <__aeabi_dcmplt>
 8012104:	2800      	cmp	r0, #0
 8012106:	d165      	bne.n	80121d4 <_dtoa_r+0x63c>
 8012108:	4632      	mov	r2, r6
 801210a:	463b      	mov	r3, r7
 801210c:	4935      	ldr	r1, [pc, #212]	; (80121e4 <_dtoa_r+0x64c>)
 801210e:	2000      	movs	r0, #0
 8012110:	f7ee f8b2 	bl	8000278 <__aeabi_dsub>
 8012114:	ec53 2b18 	vmov	r2, r3, d8
 8012118:	f7ee fcd8 	bl	8000acc <__aeabi_dcmplt>
 801211c:	2800      	cmp	r0, #0
 801211e:	f040 80b9 	bne.w	8012294 <_dtoa_r+0x6fc>
 8012122:	9b02      	ldr	r3, [sp, #8]
 8012124:	429d      	cmp	r5, r3
 8012126:	f43f af75 	beq.w	8012014 <_dtoa_r+0x47c>
 801212a:	4b2f      	ldr	r3, [pc, #188]	; (80121e8 <_dtoa_r+0x650>)
 801212c:	ec51 0b18 	vmov	r0, r1, d8
 8012130:	2200      	movs	r2, #0
 8012132:	f7ee fa59 	bl	80005e8 <__aeabi_dmul>
 8012136:	4b2c      	ldr	r3, [pc, #176]	; (80121e8 <_dtoa_r+0x650>)
 8012138:	ec41 0b18 	vmov	d8, r0, r1
 801213c:	2200      	movs	r2, #0
 801213e:	4630      	mov	r0, r6
 8012140:	4639      	mov	r1, r7
 8012142:	f7ee fa51 	bl	80005e8 <__aeabi_dmul>
 8012146:	4606      	mov	r6, r0
 8012148:	460f      	mov	r7, r1
 801214a:	e7c4      	b.n	80120d6 <_dtoa_r+0x53e>
 801214c:	ec51 0b17 	vmov	r0, r1, d7
 8012150:	f7ee fa4a 	bl	80005e8 <__aeabi_dmul>
 8012154:	9b02      	ldr	r3, [sp, #8]
 8012156:	9d00      	ldr	r5, [sp, #0]
 8012158:	930c      	str	r3, [sp, #48]	; 0x30
 801215a:	ec41 0b18 	vmov	d8, r0, r1
 801215e:	4639      	mov	r1, r7
 8012160:	4630      	mov	r0, r6
 8012162:	f7ee fcf1 	bl	8000b48 <__aeabi_d2iz>
 8012166:	9011      	str	r0, [sp, #68]	; 0x44
 8012168:	f7ee f9d4 	bl	8000514 <__aeabi_i2d>
 801216c:	4602      	mov	r2, r0
 801216e:	460b      	mov	r3, r1
 8012170:	4630      	mov	r0, r6
 8012172:	4639      	mov	r1, r7
 8012174:	f7ee f880 	bl	8000278 <__aeabi_dsub>
 8012178:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801217a:	3330      	adds	r3, #48	; 0x30
 801217c:	f805 3b01 	strb.w	r3, [r5], #1
 8012180:	9b02      	ldr	r3, [sp, #8]
 8012182:	429d      	cmp	r5, r3
 8012184:	4606      	mov	r6, r0
 8012186:	460f      	mov	r7, r1
 8012188:	f04f 0200 	mov.w	r2, #0
 801218c:	d134      	bne.n	80121f8 <_dtoa_r+0x660>
 801218e:	4b19      	ldr	r3, [pc, #100]	; (80121f4 <_dtoa_r+0x65c>)
 8012190:	ec51 0b18 	vmov	r0, r1, d8
 8012194:	f7ee f872 	bl	800027c <__adddf3>
 8012198:	4602      	mov	r2, r0
 801219a:	460b      	mov	r3, r1
 801219c:	4630      	mov	r0, r6
 801219e:	4639      	mov	r1, r7
 80121a0:	f7ee fcb2 	bl	8000b08 <__aeabi_dcmpgt>
 80121a4:	2800      	cmp	r0, #0
 80121a6:	d175      	bne.n	8012294 <_dtoa_r+0x6fc>
 80121a8:	ec53 2b18 	vmov	r2, r3, d8
 80121ac:	4911      	ldr	r1, [pc, #68]	; (80121f4 <_dtoa_r+0x65c>)
 80121ae:	2000      	movs	r0, #0
 80121b0:	f7ee f862 	bl	8000278 <__aeabi_dsub>
 80121b4:	4602      	mov	r2, r0
 80121b6:	460b      	mov	r3, r1
 80121b8:	4630      	mov	r0, r6
 80121ba:	4639      	mov	r1, r7
 80121bc:	f7ee fc86 	bl	8000acc <__aeabi_dcmplt>
 80121c0:	2800      	cmp	r0, #0
 80121c2:	f43f af27 	beq.w	8012014 <_dtoa_r+0x47c>
 80121c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80121c8:	1e6b      	subs	r3, r5, #1
 80121ca:	930c      	str	r3, [sp, #48]	; 0x30
 80121cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80121d0:	2b30      	cmp	r3, #48	; 0x30
 80121d2:	d0f8      	beq.n	80121c6 <_dtoa_r+0x62e>
 80121d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80121d8:	e04a      	b.n	8012270 <_dtoa_r+0x6d8>
 80121da:	bf00      	nop
 80121dc:	080140b0 	.word	0x080140b0
 80121e0:	08014088 	.word	0x08014088
 80121e4:	3ff00000 	.word	0x3ff00000
 80121e8:	40240000 	.word	0x40240000
 80121ec:	401c0000 	.word	0x401c0000
 80121f0:	40140000 	.word	0x40140000
 80121f4:	3fe00000 	.word	0x3fe00000
 80121f8:	4baf      	ldr	r3, [pc, #700]	; (80124b8 <_dtoa_r+0x920>)
 80121fa:	f7ee f9f5 	bl	80005e8 <__aeabi_dmul>
 80121fe:	4606      	mov	r6, r0
 8012200:	460f      	mov	r7, r1
 8012202:	e7ac      	b.n	801215e <_dtoa_r+0x5c6>
 8012204:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012208:	9d00      	ldr	r5, [sp, #0]
 801220a:	4642      	mov	r2, r8
 801220c:	464b      	mov	r3, r9
 801220e:	4630      	mov	r0, r6
 8012210:	4639      	mov	r1, r7
 8012212:	f7ee fb13 	bl	800083c <__aeabi_ddiv>
 8012216:	f7ee fc97 	bl	8000b48 <__aeabi_d2iz>
 801221a:	9002      	str	r0, [sp, #8]
 801221c:	f7ee f97a 	bl	8000514 <__aeabi_i2d>
 8012220:	4642      	mov	r2, r8
 8012222:	464b      	mov	r3, r9
 8012224:	f7ee f9e0 	bl	80005e8 <__aeabi_dmul>
 8012228:	4602      	mov	r2, r0
 801222a:	460b      	mov	r3, r1
 801222c:	4630      	mov	r0, r6
 801222e:	4639      	mov	r1, r7
 8012230:	f7ee f822 	bl	8000278 <__aeabi_dsub>
 8012234:	9e02      	ldr	r6, [sp, #8]
 8012236:	9f01      	ldr	r7, [sp, #4]
 8012238:	3630      	adds	r6, #48	; 0x30
 801223a:	f805 6b01 	strb.w	r6, [r5], #1
 801223e:	9e00      	ldr	r6, [sp, #0]
 8012240:	1bae      	subs	r6, r5, r6
 8012242:	42b7      	cmp	r7, r6
 8012244:	4602      	mov	r2, r0
 8012246:	460b      	mov	r3, r1
 8012248:	d137      	bne.n	80122ba <_dtoa_r+0x722>
 801224a:	f7ee f817 	bl	800027c <__adddf3>
 801224e:	4642      	mov	r2, r8
 8012250:	464b      	mov	r3, r9
 8012252:	4606      	mov	r6, r0
 8012254:	460f      	mov	r7, r1
 8012256:	f7ee fc57 	bl	8000b08 <__aeabi_dcmpgt>
 801225a:	b9c8      	cbnz	r0, 8012290 <_dtoa_r+0x6f8>
 801225c:	4642      	mov	r2, r8
 801225e:	464b      	mov	r3, r9
 8012260:	4630      	mov	r0, r6
 8012262:	4639      	mov	r1, r7
 8012264:	f7ee fc28 	bl	8000ab8 <__aeabi_dcmpeq>
 8012268:	b110      	cbz	r0, 8012270 <_dtoa_r+0x6d8>
 801226a:	9b02      	ldr	r3, [sp, #8]
 801226c:	07d9      	lsls	r1, r3, #31
 801226e:	d40f      	bmi.n	8012290 <_dtoa_r+0x6f8>
 8012270:	4620      	mov	r0, r4
 8012272:	4659      	mov	r1, fp
 8012274:	f7fe fee0 	bl	8011038 <_Bfree>
 8012278:	2300      	movs	r3, #0
 801227a:	702b      	strb	r3, [r5, #0]
 801227c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801227e:	f10a 0001 	add.w	r0, sl, #1
 8012282:	6018      	str	r0, [r3, #0]
 8012284:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012286:	2b00      	cmp	r3, #0
 8012288:	f43f acd8 	beq.w	8011c3c <_dtoa_r+0xa4>
 801228c:	601d      	str	r5, [r3, #0]
 801228e:	e4d5      	b.n	8011c3c <_dtoa_r+0xa4>
 8012290:	f8cd a01c 	str.w	sl, [sp, #28]
 8012294:	462b      	mov	r3, r5
 8012296:	461d      	mov	r5, r3
 8012298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801229c:	2a39      	cmp	r2, #57	; 0x39
 801229e:	d108      	bne.n	80122b2 <_dtoa_r+0x71a>
 80122a0:	9a00      	ldr	r2, [sp, #0]
 80122a2:	429a      	cmp	r2, r3
 80122a4:	d1f7      	bne.n	8012296 <_dtoa_r+0x6fe>
 80122a6:	9a07      	ldr	r2, [sp, #28]
 80122a8:	9900      	ldr	r1, [sp, #0]
 80122aa:	3201      	adds	r2, #1
 80122ac:	9207      	str	r2, [sp, #28]
 80122ae:	2230      	movs	r2, #48	; 0x30
 80122b0:	700a      	strb	r2, [r1, #0]
 80122b2:	781a      	ldrb	r2, [r3, #0]
 80122b4:	3201      	adds	r2, #1
 80122b6:	701a      	strb	r2, [r3, #0]
 80122b8:	e78c      	b.n	80121d4 <_dtoa_r+0x63c>
 80122ba:	4b7f      	ldr	r3, [pc, #508]	; (80124b8 <_dtoa_r+0x920>)
 80122bc:	2200      	movs	r2, #0
 80122be:	f7ee f993 	bl	80005e8 <__aeabi_dmul>
 80122c2:	2200      	movs	r2, #0
 80122c4:	2300      	movs	r3, #0
 80122c6:	4606      	mov	r6, r0
 80122c8:	460f      	mov	r7, r1
 80122ca:	f7ee fbf5 	bl	8000ab8 <__aeabi_dcmpeq>
 80122ce:	2800      	cmp	r0, #0
 80122d0:	d09b      	beq.n	801220a <_dtoa_r+0x672>
 80122d2:	e7cd      	b.n	8012270 <_dtoa_r+0x6d8>
 80122d4:	9a08      	ldr	r2, [sp, #32]
 80122d6:	2a00      	cmp	r2, #0
 80122d8:	f000 80c4 	beq.w	8012464 <_dtoa_r+0x8cc>
 80122dc:	9a05      	ldr	r2, [sp, #20]
 80122de:	2a01      	cmp	r2, #1
 80122e0:	f300 80a8 	bgt.w	8012434 <_dtoa_r+0x89c>
 80122e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80122e6:	2a00      	cmp	r2, #0
 80122e8:	f000 80a0 	beq.w	801242c <_dtoa_r+0x894>
 80122ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80122f0:	9e06      	ldr	r6, [sp, #24]
 80122f2:	4645      	mov	r5, r8
 80122f4:	9a04      	ldr	r2, [sp, #16]
 80122f6:	2101      	movs	r1, #1
 80122f8:	441a      	add	r2, r3
 80122fa:	4620      	mov	r0, r4
 80122fc:	4498      	add	r8, r3
 80122fe:	9204      	str	r2, [sp, #16]
 8012300:	f7fe ff56 	bl	80111b0 <__i2b>
 8012304:	4607      	mov	r7, r0
 8012306:	2d00      	cmp	r5, #0
 8012308:	dd0b      	ble.n	8012322 <_dtoa_r+0x78a>
 801230a:	9b04      	ldr	r3, [sp, #16]
 801230c:	2b00      	cmp	r3, #0
 801230e:	dd08      	ble.n	8012322 <_dtoa_r+0x78a>
 8012310:	42ab      	cmp	r3, r5
 8012312:	9a04      	ldr	r2, [sp, #16]
 8012314:	bfa8      	it	ge
 8012316:	462b      	movge	r3, r5
 8012318:	eba8 0803 	sub.w	r8, r8, r3
 801231c:	1aed      	subs	r5, r5, r3
 801231e:	1ad3      	subs	r3, r2, r3
 8012320:	9304      	str	r3, [sp, #16]
 8012322:	9b06      	ldr	r3, [sp, #24]
 8012324:	b1fb      	cbz	r3, 8012366 <_dtoa_r+0x7ce>
 8012326:	9b08      	ldr	r3, [sp, #32]
 8012328:	2b00      	cmp	r3, #0
 801232a:	f000 809f 	beq.w	801246c <_dtoa_r+0x8d4>
 801232e:	2e00      	cmp	r6, #0
 8012330:	dd11      	ble.n	8012356 <_dtoa_r+0x7be>
 8012332:	4639      	mov	r1, r7
 8012334:	4632      	mov	r2, r6
 8012336:	4620      	mov	r0, r4
 8012338:	f7fe fff6 	bl	8011328 <__pow5mult>
 801233c:	465a      	mov	r2, fp
 801233e:	4601      	mov	r1, r0
 8012340:	4607      	mov	r7, r0
 8012342:	4620      	mov	r0, r4
 8012344:	f7fe ff4a 	bl	80111dc <__multiply>
 8012348:	4659      	mov	r1, fp
 801234a:	9007      	str	r0, [sp, #28]
 801234c:	4620      	mov	r0, r4
 801234e:	f7fe fe73 	bl	8011038 <_Bfree>
 8012352:	9b07      	ldr	r3, [sp, #28]
 8012354:	469b      	mov	fp, r3
 8012356:	9b06      	ldr	r3, [sp, #24]
 8012358:	1b9a      	subs	r2, r3, r6
 801235a:	d004      	beq.n	8012366 <_dtoa_r+0x7ce>
 801235c:	4659      	mov	r1, fp
 801235e:	4620      	mov	r0, r4
 8012360:	f7fe ffe2 	bl	8011328 <__pow5mult>
 8012364:	4683      	mov	fp, r0
 8012366:	2101      	movs	r1, #1
 8012368:	4620      	mov	r0, r4
 801236a:	f7fe ff21 	bl	80111b0 <__i2b>
 801236e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012370:	2b00      	cmp	r3, #0
 8012372:	4606      	mov	r6, r0
 8012374:	dd7c      	ble.n	8012470 <_dtoa_r+0x8d8>
 8012376:	461a      	mov	r2, r3
 8012378:	4601      	mov	r1, r0
 801237a:	4620      	mov	r0, r4
 801237c:	f7fe ffd4 	bl	8011328 <__pow5mult>
 8012380:	9b05      	ldr	r3, [sp, #20]
 8012382:	2b01      	cmp	r3, #1
 8012384:	4606      	mov	r6, r0
 8012386:	dd76      	ble.n	8012476 <_dtoa_r+0x8de>
 8012388:	2300      	movs	r3, #0
 801238a:	9306      	str	r3, [sp, #24]
 801238c:	6933      	ldr	r3, [r6, #16]
 801238e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012392:	6918      	ldr	r0, [r3, #16]
 8012394:	f7fe febc 	bl	8011110 <__hi0bits>
 8012398:	f1c0 0020 	rsb	r0, r0, #32
 801239c:	9b04      	ldr	r3, [sp, #16]
 801239e:	4418      	add	r0, r3
 80123a0:	f010 001f 	ands.w	r0, r0, #31
 80123a4:	f000 8086 	beq.w	80124b4 <_dtoa_r+0x91c>
 80123a8:	f1c0 0320 	rsb	r3, r0, #32
 80123ac:	2b04      	cmp	r3, #4
 80123ae:	dd7f      	ble.n	80124b0 <_dtoa_r+0x918>
 80123b0:	f1c0 001c 	rsb	r0, r0, #28
 80123b4:	9b04      	ldr	r3, [sp, #16]
 80123b6:	4403      	add	r3, r0
 80123b8:	4480      	add	r8, r0
 80123ba:	4405      	add	r5, r0
 80123bc:	9304      	str	r3, [sp, #16]
 80123be:	f1b8 0f00 	cmp.w	r8, #0
 80123c2:	dd05      	ble.n	80123d0 <_dtoa_r+0x838>
 80123c4:	4659      	mov	r1, fp
 80123c6:	4642      	mov	r2, r8
 80123c8:	4620      	mov	r0, r4
 80123ca:	f7ff f807 	bl	80113dc <__lshift>
 80123ce:	4683      	mov	fp, r0
 80123d0:	9b04      	ldr	r3, [sp, #16]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	dd05      	ble.n	80123e2 <_dtoa_r+0x84a>
 80123d6:	4631      	mov	r1, r6
 80123d8:	461a      	mov	r2, r3
 80123da:	4620      	mov	r0, r4
 80123dc:	f7fe fffe 	bl	80113dc <__lshift>
 80123e0:	4606      	mov	r6, r0
 80123e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d069      	beq.n	80124bc <_dtoa_r+0x924>
 80123e8:	4631      	mov	r1, r6
 80123ea:	4658      	mov	r0, fp
 80123ec:	f7ff f862 	bl	80114b4 <__mcmp>
 80123f0:	2800      	cmp	r0, #0
 80123f2:	da63      	bge.n	80124bc <_dtoa_r+0x924>
 80123f4:	2300      	movs	r3, #0
 80123f6:	4659      	mov	r1, fp
 80123f8:	220a      	movs	r2, #10
 80123fa:	4620      	mov	r0, r4
 80123fc:	f7fe fe3e 	bl	801107c <__multadd>
 8012400:	9b08      	ldr	r3, [sp, #32]
 8012402:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012406:	4683      	mov	fp, r0
 8012408:	2b00      	cmp	r3, #0
 801240a:	f000 818f 	beq.w	801272c <_dtoa_r+0xb94>
 801240e:	4639      	mov	r1, r7
 8012410:	2300      	movs	r3, #0
 8012412:	220a      	movs	r2, #10
 8012414:	4620      	mov	r0, r4
 8012416:	f7fe fe31 	bl	801107c <__multadd>
 801241a:	f1b9 0f00 	cmp.w	r9, #0
 801241e:	4607      	mov	r7, r0
 8012420:	f300 808e 	bgt.w	8012540 <_dtoa_r+0x9a8>
 8012424:	9b05      	ldr	r3, [sp, #20]
 8012426:	2b02      	cmp	r3, #2
 8012428:	dc50      	bgt.n	80124cc <_dtoa_r+0x934>
 801242a:	e089      	b.n	8012540 <_dtoa_r+0x9a8>
 801242c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801242e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012432:	e75d      	b.n	80122f0 <_dtoa_r+0x758>
 8012434:	9b01      	ldr	r3, [sp, #4]
 8012436:	1e5e      	subs	r6, r3, #1
 8012438:	9b06      	ldr	r3, [sp, #24]
 801243a:	42b3      	cmp	r3, r6
 801243c:	bfbf      	itttt	lt
 801243e:	9b06      	ldrlt	r3, [sp, #24]
 8012440:	9606      	strlt	r6, [sp, #24]
 8012442:	1af2      	sublt	r2, r6, r3
 8012444:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012446:	bfb6      	itet	lt
 8012448:	189b      	addlt	r3, r3, r2
 801244a:	1b9e      	subge	r6, r3, r6
 801244c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801244e:	9b01      	ldr	r3, [sp, #4]
 8012450:	bfb8      	it	lt
 8012452:	2600      	movlt	r6, #0
 8012454:	2b00      	cmp	r3, #0
 8012456:	bfb5      	itete	lt
 8012458:	eba8 0503 	sublt.w	r5, r8, r3
 801245c:	9b01      	ldrge	r3, [sp, #4]
 801245e:	2300      	movlt	r3, #0
 8012460:	4645      	movge	r5, r8
 8012462:	e747      	b.n	80122f4 <_dtoa_r+0x75c>
 8012464:	9e06      	ldr	r6, [sp, #24]
 8012466:	9f08      	ldr	r7, [sp, #32]
 8012468:	4645      	mov	r5, r8
 801246a:	e74c      	b.n	8012306 <_dtoa_r+0x76e>
 801246c:	9a06      	ldr	r2, [sp, #24]
 801246e:	e775      	b.n	801235c <_dtoa_r+0x7c4>
 8012470:	9b05      	ldr	r3, [sp, #20]
 8012472:	2b01      	cmp	r3, #1
 8012474:	dc18      	bgt.n	80124a8 <_dtoa_r+0x910>
 8012476:	9b02      	ldr	r3, [sp, #8]
 8012478:	b9b3      	cbnz	r3, 80124a8 <_dtoa_r+0x910>
 801247a:	9b03      	ldr	r3, [sp, #12]
 801247c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012480:	b9a3      	cbnz	r3, 80124ac <_dtoa_r+0x914>
 8012482:	9b03      	ldr	r3, [sp, #12]
 8012484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012488:	0d1b      	lsrs	r3, r3, #20
 801248a:	051b      	lsls	r3, r3, #20
 801248c:	b12b      	cbz	r3, 801249a <_dtoa_r+0x902>
 801248e:	9b04      	ldr	r3, [sp, #16]
 8012490:	3301      	adds	r3, #1
 8012492:	9304      	str	r3, [sp, #16]
 8012494:	f108 0801 	add.w	r8, r8, #1
 8012498:	2301      	movs	r3, #1
 801249a:	9306      	str	r3, [sp, #24]
 801249c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801249e:	2b00      	cmp	r3, #0
 80124a0:	f47f af74 	bne.w	801238c <_dtoa_r+0x7f4>
 80124a4:	2001      	movs	r0, #1
 80124a6:	e779      	b.n	801239c <_dtoa_r+0x804>
 80124a8:	2300      	movs	r3, #0
 80124aa:	e7f6      	b.n	801249a <_dtoa_r+0x902>
 80124ac:	9b02      	ldr	r3, [sp, #8]
 80124ae:	e7f4      	b.n	801249a <_dtoa_r+0x902>
 80124b0:	d085      	beq.n	80123be <_dtoa_r+0x826>
 80124b2:	4618      	mov	r0, r3
 80124b4:	301c      	adds	r0, #28
 80124b6:	e77d      	b.n	80123b4 <_dtoa_r+0x81c>
 80124b8:	40240000 	.word	0x40240000
 80124bc:	9b01      	ldr	r3, [sp, #4]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	dc38      	bgt.n	8012534 <_dtoa_r+0x99c>
 80124c2:	9b05      	ldr	r3, [sp, #20]
 80124c4:	2b02      	cmp	r3, #2
 80124c6:	dd35      	ble.n	8012534 <_dtoa_r+0x99c>
 80124c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80124cc:	f1b9 0f00 	cmp.w	r9, #0
 80124d0:	d10d      	bne.n	80124ee <_dtoa_r+0x956>
 80124d2:	4631      	mov	r1, r6
 80124d4:	464b      	mov	r3, r9
 80124d6:	2205      	movs	r2, #5
 80124d8:	4620      	mov	r0, r4
 80124da:	f7fe fdcf 	bl	801107c <__multadd>
 80124de:	4601      	mov	r1, r0
 80124e0:	4606      	mov	r6, r0
 80124e2:	4658      	mov	r0, fp
 80124e4:	f7fe ffe6 	bl	80114b4 <__mcmp>
 80124e8:	2800      	cmp	r0, #0
 80124ea:	f73f adbd 	bgt.w	8012068 <_dtoa_r+0x4d0>
 80124ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124f0:	9d00      	ldr	r5, [sp, #0]
 80124f2:	ea6f 0a03 	mvn.w	sl, r3
 80124f6:	f04f 0800 	mov.w	r8, #0
 80124fa:	4631      	mov	r1, r6
 80124fc:	4620      	mov	r0, r4
 80124fe:	f7fe fd9b 	bl	8011038 <_Bfree>
 8012502:	2f00      	cmp	r7, #0
 8012504:	f43f aeb4 	beq.w	8012270 <_dtoa_r+0x6d8>
 8012508:	f1b8 0f00 	cmp.w	r8, #0
 801250c:	d005      	beq.n	801251a <_dtoa_r+0x982>
 801250e:	45b8      	cmp	r8, r7
 8012510:	d003      	beq.n	801251a <_dtoa_r+0x982>
 8012512:	4641      	mov	r1, r8
 8012514:	4620      	mov	r0, r4
 8012516:	f7fe fd8f 	bl	8011038 <_Bfree>
 801251a:	4639      	mov	r1, r7
 801251c:	4620      	mov	r0, r4
 801251e:	f7fe fd8b 	bl	8011038 <_Bfree>
 8012522:	e6a5      	b.n	8012270 <_dtoa_r+0x6d8>
 8012524:	2600      	movs	r6, #0
 8012526:	4637      	mov	r7, r6
 8012528:	e7e1      	b.n	80124ee <_dtoa_r+0x956>
 801252a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801252c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012530:	4637      	mov	r7, r6
 8012532:	e599      	b.n	8012068 <_dtoa_r+0x4d0>
 8012534:	9b08      	ldr	r3, [sp, #32]
 8012536:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801253a:	2b00      	cmp	r3, #0
 801253c:	f000 80fd 	beq.w	801273a <_dtoa_r+0xba2>
 8012540:	2d00      	cmp	r5, #0
 8012542:	dd05      	ble.n	8012550 <_dtoa_r+0x9b8>
 8012544:	4639      	mov	r1, r7
 8012546:	462a      	mov	r2, r5
 8012548:	4620      	mov	r0, r4
 801254a:	f7fe ff47 	bl	80113dc <__lshift>
 801254e:	4607      	mov	r7, r0
 8012550:	9b06      	ldr	r3, [sp, #24]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d05c      	beq.n	8012610 <_dtoa_r+0xa78>
 8012556:	6879      	ldr	r1, [r7, #4]
 8012558:	4620      	mov	r0, r4
 801255a:	f7fe fd2d 	bl	8010fb8 <_Balloc>
 801255e:	4605      	mov	r5, r0
 8012560:	b928      	cbnz	r0, 801256e <_dtoa_r+0x9d6>
 8012562:	4b80      	ldr	r3, [pc, #512]	; (8012764 <_dtoa_r+0xbcc>)
 8012564:	4602      	mov	r2, r0
 8012566:	f240 21ea 	movw	r1, #746	; 0x2ea
 801256a:	f7ff bb2e 	b.w	8011bca <_dtoa_r+0x32>
 801256e:	693a      	ldr	r2, [r7, #16]
 8012570:	3202      	adds	r2, #2
 8012572:	0092      	lsls	r2, r2, #2
 8012574:	f107 010c 	add.w	r1, r7, #12
 8012578:	300c      	adds	r0, #12
 801257a:	f7fe faa5 	bl	8010ac8 <memcpy>
 801257e:	2201      	movs	r2, #1
 8012580:	4629      	mov	r1, r5
 8012582:	4620      	mov	r0, r4
 8012584:	f7fe ff2a 	bl	80113dc <__lshift>
 8012588:	9b00      	ldr	r3, [sp, #0]
 801258a:	3301      	adds	r3, #1
 801258c:	9301      	str	r3, [sp, #4]
 801258e:	9b00      	ldr	r3, [sp, #0]
 8012590:	444b      	add	r3, r9
 8012592:	9307      	str	r3, [sp, #28]
 8012594:	9b02      	ldr	r3, [sp, #8]
 8012596:	f003 0301 	and.w	r3, r3, #1
 801259a:	46b8      	mov	r8, r7
 801259c:	9306      	str	r3, [sp, #24]
 801259e:	4607      	mov	r7, r0
 80125a0:	9b01      	ldr	r3, [sp, #4]
 80125a2:	4631      	mov	r1, r6
 80125a4:	3b01      	subs	r3, #1
 80125a6:	4658      	mov	r0, fp
 80125a8:	9302      	str	r3, [sp, #8]
 80125aa:	f7ff fa69 	bl	8011a80 <quorem>
 80125ae:	4603      	mov	r3, r0
 80125b0:	3330      	adds	r3, #48	; 0x30
 80125b2:	9004      	str	r0, [sp, #16]
 80125b4:	4641      	mov	r1, r8
 80125b6:	4658      	mov	r0, fp
 80125b8:	9308      	str	r3, [sp, #32]
 80125ba:	f7fe ff7b 	bl	80114b4 <__mcmp>
 80125be:	463a      	mov	r2, r7
 80125c0:	4681      	mov	r9, r0
 80125c2:	4631      	mov	r1, r6
 80125c4:	4620      	mov	r0, r4
 80125c6:	f7fe ff91 	bl	80114ec <__mdiff>
 80125ca:	68c2      	ldr	r2, [r0, #12]
 80125cc:	9b08      	ldr	r3, [sp, #32]
 80125ce:	4605      	mov	r5, r0
 80125d0:	bb02      	cbnz	r2, 8012614 <_dtoa_r+0xa7c>
 80125d2:	4601      	mov	r1, r0
 80125d4:	4658      	mov	r0, fp
 80125d6:	f7fe ff6d 	bl	80114b4 <__mcmp>
 80125da:	9b08      	ldr	r3, [sp, #32]
 80125dc:	4602      	mov	r2, r0
 80125de:	4629      	mov	r1, r5
 80125e0:	4620      	mov	r0, r4
 80125e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80125e6:	f7fe fd27 	bl	8011038 <_Bfree>
 80125ea:	9b05      	ldr	r3, [sp, #20]
 80125ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125ee:	9d01      	ldr	r5, [sp, #4]
 80125f0:	ea43 0102 	orr.w	r1, r3, r2
 80125f4:	9b06      	ldr	r3, [sp, #24]
 80125f6:	430b      	orrs	r3, r1
 80125f8:	9b08      	ldr	r3, [sp, #32]
 80125fa:	d10d      	bne.n	8012618 <_dtoa_r+0xa80>
 80125fc:	2b39      	cmp	r3, #57	; 0x39
 80125fe:	d029      	beq.n	8012654 <_dtoa_r+0xabc>
 8012600:	f1b9 0f00 	cmp.w	r9, #0
 8012604:	dd01      	ble.n	801260a <_dtoa_r+0xa72>
 8012606:	9b04      	ldr	r3, [sp, #16]
 8012608:	3331      	adds	r3, #49	; 0x31
 801260a:	9a02      	ldr	r2, [sp, #8]
 801260c:	7013      	strb	r3, [r2, #0]
 801260e:	e774      	b.n	80124fa <_dtoa_r+0x962>
 8012610:	4638      	mov	r0, r7
 8012612:	e7b9      	b.n	8012588 <_dtoa_r+0x9f0>
 8012614:	2201      	movs	r2, #1
 8012616:	e7e2      	b.n	80125de <_dtoa_r+0xa46>
 8012618:	f1b9 0f00 	cmp.w	r9, #0
 801261c:	db06      	blt.n	801262c <_dtoa_r+0xa94>
 801261e:	9905      	ldr	r1, [sp, #20]
 8012620:	ea41 0909 	orr.w	r9, r1, r9
 8012624:	9906      	ldr	r1, [sp, #24]
 8012626:	ea59 0101 	orrs.w	r1, r9, r1
 801262a:	d120      	bne.n	801266e <_dtoa_r+0xad6>
 801262c:	2a00      	cmp	r2, #0
 801262e:	ddec      	ble.n	801260a <_dtoa_r+0xa72>
 8012630:	4659      	mov	r1, fp
 8012632:	2201      	movs	r2, #1
 8012634:	4620      	mov	r0, r4
 8012636:	9301      	str	r3, [sp, #4]
 8012638:	f7fe fed0 	bl	80113dc <__lshift>
 801263c:	4631      	mov	r1, r6
 801263e:	4683      	mov	fp, r0
 8012640:	f7fe ff38 	bl	80114b4 <__mcmp>
 8012644:	2800      	cmp	r0, #0
 8012646:	9b01      	ldr	r3, [sp, #4]
 8012648:	dc02      	bgt.n	8012650 <_dtoa_r+0xab8>
 801264a:	d1de      	bne.n	801260a <_dtoa_r+0xa72>
 801264c:	07da      	lsls	r2, r3, #31
 801264e:	d5dc      	bpl.n	801260a <_dtoa_r+0xa72>
 8012650:	2b39      	cmp	r3, #57	; 0x39
 8012652:	d1d8      	bne.n	8012606 <_dtoa_r+0xa6e>
 8012654:	9a02      	ldr	r2, [sp, #8]
 8012656:	2339      	movs	r3, #57	; 0x39
 8012658:	7013      	strb	r3, [r2, #0]
 801265a:	462b      	mov	r3, r5
 801265c:	461d      	mov	r5, r3
 801265e:	3b01      	subs	r3, #1
 8012660:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012664:	2a39      	cmp	r2, #57	; 0x39
 8012666:	d050      	beq.n	801270a <_dtoa_r+0xb72>
 8012668:	3201      	adds	r2, #1
 801266a:	701a      	strb	r2, [r3, #0]
 801266c:	e745      	b.n	80124fa <_dtoa_r+0x962>
 801266e:	2a00      	cmp	r2, #0
 8012670:	dd03      	ble.n	801267a <_dtoa_r+0xae2>
 8012672:	2b39      	cmp	r3, #57	; 0x39
 8012674:	d0ee      	beq.n	8012654 <_dtoa_r+0xabc>
 8012676:	3301      	adds	r3, #1
 8012678:	e7c7      	b.n	801260a <_dtoa_r+0xa72>
 801267a:	9a01      	ldr	r2, [sp, #4]
 801267c:	9907      	ldr	r1, [sp, #28]
 801267e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012682:	428a      	cmp	r2, r1
 8012684:	d02a      	beq.n	80126dc <_dtoa_r+0xb44>
 8012686:	4659      	mov	r1, fp
 8012688:	2300      	movs	r3, #0
 801268a:	220a      	movs	r2, #10
 801268c:	4620      	mov	r0, r4
 801268e:	f7fe fcf5 	bl	801107c <__multadd>
 8012692:	45b8      	cmp	r8, r7
 8012694:	4683      	mov	fp, r0
 8012696:	f04f 0300 	mov.w	r3, #0
 801269a:	f04f 020a 	mov.w	r2, #10
 801269e:	4641      	mov	r1, r8
 80126a0:	4620      	mov	r0, r4
 80126a2:	d107      	bne.n	80126b4 <_dtoa_r+0xb1c>
 80126a4:	f7fe fcea 	bl	801107c <__multadd>
 80126a8:	4680      	mov	r8, r0
 80126aa:	4607      	mov	r7, r0
 80126ac:	9b01      	ldr	r3, [sp, #4]
 80126ae:	3301      	adds	r3, #1
 80126b0:	9301      	str	r3, [sp, #4]
 80126b2:	e775      	b.n	80125a0 <_dtoa_r+0xa08>
 80126b4:	f7fe fce2 	bl	801107c <__multadd>
 80126b8:	4639      	mov	r1, r7
 80126ba:	4680      	mov	r8, r0
 80126bc:	2300      	movs	r3, #0
 80126be:	220a      	movs	r2, #10
 80126c0:	4620      	mov	r0, r4
 80126c2:	f7fe fcdb 	bl	801107c <__multadd>
 80126c6:	4607      	mov	r7, r0
 80126c8:	e7f0      	b.n	80126ac <_dtoa_r+0xb14>
 80126ca:	f1b9 0f00 	cmp.w	r9, #0
 80126ce:	9a00      	ldr	r2, [sp, #0]
 80126d0:	bfcc      	ite	gt
 80126d2:	464d      	movgt	r5, r9
 80126d4:	2501      	movle	r5, #1
 80126d6:	4415      	add	r5, r2
 80126d8:	f04f 0800 	mov.w	r8, #0
 80126dc:	4659      	mov	r1, fp
 80126de:	2201      	movs	r2, #1
 80126e0:	4620      	mov	r0, r4
 80126e2:	9301      	str	r3, [sp, #4]
 80126e4:	f7fe fe7a 	bl	80113dc <__lshift>
 80126e8:	4631      	mov	r1, r6
 80126ea:	4683      	mov	fp, r0
 80126ec:	f7fe fee2 	bl	80114b4 <__mcmp>
 80126f0:	2800      	cmp	r0, #0
 80126f2:	dcb2      	bgt.n	801265a <_dtoa_r+0xac2>
 80126f4:	d102      	bne.n	80126fc <_dtoa_r+0xb64>
 80126f6:	9b01      	ldr	r3, [sp, #4]
 80126f8:	07db      	lsls	r3, r3, #31
 80126fa:	d4ae      	bmi.n	801265a <_dtoa_r+0xac2>
 80126fc:	462b      	mov	r3, r5
 80126fe:	461d      	mov	r5, r3
 8012700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012704:	2a30      	cmp	r2, #48	; 0x30
 8012706:	d0fa      	beq.n	80126fe <_dtoa_r+0xb66>
 8012708:	e6f7      	b.n	80124fa <_dtoa_r+0x962>
 801270a:	9a00      	ldr	r2, [sp, #0]
 801270c:	429a      	cmp	r2, r3
 801270e:	d1a5      	bne.n	801265c <_dtoa_r+0xac4>
 8012710:	f10a 0a01 	add.w	sl, sl, #1
 8012714:	2331      	movs	r3, #49	; 0x31
 8012716:	e779      	b.n	801260c <_dtoa_r+0xa74>
 8012718:	4b13      	ldr	r3, [pc, #76]	; (8012768 <_dtoa_r+0xbd0>)
 801271a:	f7ff baaf 	b.w	8011c7c <_dtoa_r+0xe4>
 801271e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012720:	2b00      	cmp	r3, #0
 8012722:	f47f aa86 	bne.w	8011c32 <_dtoa_r+0x9a>
 8012726:	4b11      	ldr	r3, [pc, #68]	; (801276c <_dtoa_r+0xbd4>)
 8012728:	f7ff baa8 	b.w	8011c7c <_dtoa_r+0xe4>
 801272c:	f1b9 0f00 	cmp.w	r9, #0
 8012730:	dc03      	bgt.n	801273a <_dtoa_r+0xba2>
 8012732:	9b05      	ldr	r3, [sp, #20]
 8012734:	2b02      	cmp	r3, #2
 8012736:	f73f aec9 	bgt.w	80124cc <_dtoa_r+0x934>
 801273a:	9d00      	ldr	r5, [sp, #0]
 801273c:	4631      	mov	r1, r6
 801273e:	4658      	mov	r0, fp
 8012740:	f7ff f99e 	bl	8011a80 <quorem>
 8012744:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012748:	f805 3b01 	strb.w	r3, [r5], #1
 801274c:	9a00      	ldr	r2, [sp, #0]
 801274e:	1aaa      	subs	r2, r5, r2
 8012750:	4591      	cmp	r9, r2
 8012752:	ddba      	ble.n	80126ca <_dtoa_r+0xb32>
 8012754:	4659      	mov	r1, fp
 8012756:	2300      	movs	r3, #0
 8012758:	220a      	movs	r2, #10
 801275a:	4620      	mov	r0, r4
 801275c:	f7fe fc8e 	bl	801107c <__multadd>
 8012760:	4683      	mov	fp, r0
 8012762:	e7eb      	b.n	801273c <_dtoa_r+0xba4>
 8012764:	08014070 	.word	0x08014070
 8012768:	080141ef 	.word	0x080141ef
 801276c:	080141e2 	.word	0x080141e2

08012770 <fiprintf>:
 8012770:	b40e      	push	{r1, r2, r3}
 8012772:	b503      	push	{r0, r1, lr}
 8012774:	4601      	mov	r1, r0
 8012776:	ab03      	add	r3, sp, #12
 8012778:	4805      	ldr	r0, [pc, #20]	; (8012790 <fiprintf+0x20>)
 801277a:	f853 2b04 	ldr.w	r2, [r3], #4
 801277e:	6800      	ldr	r0, [r0, #0]
 8012780:	9301      	str	r3, [sp, #4]
 8012782:	f000 f833 	bl	80127ec <_vfiprintf_r>
 8012786:	b002      	add	sp, #8
 8012788:	f85d eb04 	ldr.w	lr, [sp], #4
 801278c:	b003      	add	sp, #12
 801278e:	4770      	bx	lr
 8012790:	20000294 	.word	0x20000294

08012794 <__retarget_lock_init_recursive>:
 8012794:	4770      	bx	lr

08012796 <__retarget_lock_acquire_recursive>:
 8012796:	4770      	bx	lr

08012798 <__retarget_lock_release_recursive>:
 8012798:	4770      	bx	lr

0801279a <__sfputc_r>:
 801279a:	6893      	ldr	r3, [r2, #8]
 801279c:	3b01      	subs	r3, #1
 801279e:	2b00      	cmp	r3, #0
 80127a0:	b410      	push	{r4}
 80127a2:	6093      	str	r3, [r2, #8]
 80127a4:	da08      	bge.n	80127b8 <__sfputc_r+0x1e>
 80127a6:	6994      	ldr	r4, [r2, #24]
 80127a8:	42a3      	cmp	r3, r4
 80127aa:	db01      	blt.n	80127b0 <__sfputc_r+0x16>
 80127ac:	290a      	cmp	r1, #10
 80127ae:	d103      	bne.n	80127b8 <__sfputc_r+0x1e>
 80127b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127b4:	f000 b94a 	b.w	8012a4c <__swbuf_r>
 80127b8:	6813      	ldr	r3, [r2, #0]
 80127ba:	1c58      	adds	r0, r3, #1
 80127bc:	6010      	str	r0, [r2, #0]
 80127be:	7019      	strb	r1, [r3, #0]
 80127c0:	4608      	mov	r0, r1
 80127c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127c6:	4770      	bx	lr

080127c8 <__sfputs_r>:
 80127c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ca:	4606      	mov	r6, r0
 80127cc:	460f      	mov	r7, r1
 80127ce:	4614      	mov	r4, r2
 80127d0:	18d5      	adds	r5, r2, r3
 80127d2:	42ac      	cmp	r4, r5
 80127d4:	d101      	bne.n	80127da <__sfputs_r+0x12>
 80127d6:	2000      	movs	r0, #0
 80127d8:	e007      	b.n	80127ea <__sfputs_r+0x22>
 80127da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127de:	463a      	mov	r2, r7
 80127e0:	4630      	mov	r0, r6
 80127e2:	f7ff ffda 	bl	801279a <__sfputc_r>
 80127e6:	1c43      	adds	r3, r0, #1
 80127e8:	d1f3      	bne.n	80127d2 <__sfputs_r+0xa>
 80127ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080127ec <_vfiprintf_r>:
 80127ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127f0:	460d      	mov	r5, r1
 80127f2:	b09d      	sub	sp, #116	; 0x74
 80127f4:	4614      	mov	r4, r2
 80127f6:	4698      	mov	r8, r3
 80127f8:	4606      	mov	r6, r0
 80127fa:	b118      	cbz	r0, 8012804 <_vfiprintf_r+0x18>
 80127fc:	6983      	ldr	r3, [r0, #24]
 80127fe:	b90b      	cbnz	r3, 8012804 <_vfiprintf_r+0x18>
 8012800:	f000 fb06 	bl	8012e10 <__sinit>
 8012804:	4b89      	ldr	r3, [pc, #548]	; (8012a2c <_vfiprintf_r+0x240>)
 8012806:	429d      	cmp	r5, r3
 8012808:	d11b      	bne.n	8012842 <_vfiprintf_r+0x56>
 801280a:	6875      	ldr	r5, [r6, #4]
 801280c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801280e:	07d9      	lsls	r1, r3, #31
 8012810:	d405      	bmi.n	801281e <_vfiprintf_r+0x32>
 8012812:	89ab      	ldrh	r3, [r5, #12]
 8012814:	059a      	lsls	r2, r3, #22
 8012816:	d402      	bmi.n	801281e <_vfiprintf_r+0x32>
 8012818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801281a:	f7ff ffbc 	bl	8012796 <__retarget_lock_acquire_recursive>
 801281e:	89ab      	ldrh	r3, [r5, #12]
 8012820:	071b      	lsls	r3, r3, #28
 8012822:	d501      	bpl.n	8012828 <_vfiprintf_r+0x3c>
 8012824:	692b      	ldr	r3, [r5, #16]
 8012826:	b9eb      	cbnz	r3, 8012864 <_vfiprintf_r+0x78>
 8012828:	4629      	mov	r1, r5
 801282a:	4630      	mov	r0, r6
 801282c:	f000 f960 	bl	8012af0 <__swsetup_r>
 8012830:	b1c0      	cbz	r0, 8012864 <_vfiprintf_r+0x78>
 8012832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012834:	07dc      	lsls	r4, r3, #31
 8012836:	d50e      	bpl.n	8012856 <_vfiprintf_r+0x6a>
 8012838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801283c:	b01d      	add	sp, #116	; 0x74
 801283e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012842:	4b7b      	ldr	r3, [pc, #492]	; (8012a30 <_vfiprintf_r+0x244>)
 8012844:	429d      	cmp	r5, r3
 8012846:	d101      	bne.n	801284c <_vfiprintf_r+0x60>
 8012848:	68b5      	ldr	r5, [r6, #8]
 801284a:	e7df      	b.n	801280c <_vfiprintf_r+0x20>
 801284c:	4b79      	ldr	r3, [pc, #484]	; (8012a34 <_vfiprintf_r+0x248>)
 801284e:	429d      	cmp	r5, r3
 8012850:	bf08      	it	eq
 8012852:	68f5      	ldreq	r5, [r6, #12]
 8012854:	e7da      	b.n	801280c <_vfiprintf_r+0x20>
 8012856:	89ab      	ldrh	r3, [r5, #12]
 8012858:	0598      	lsls	r0, r3, #22
 801285a:	d4ed      	bmi.n	8012838 <_vfiprintf_r+0x4c>
 801285c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801285e:	f7ff ff9b 	bl	8012798 <__retarget_lock_release_recursive>
 8012862:	e7e9      	b.n	8012838 <_vfiprintf_r+0x4c>
 8012864:	2300      	movs	r3, #0
 8012866:	9309      	str	r3, [sp, #36]	; 0x24
 8012868:	2320      	movs	r3, #32
 801286a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801286e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012872:	2330      	movs	r3, #48	; 0x30
 8012874:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012a38 <_vfiprintf_r+0x24c>
 8012878:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801287c:	f04f 0901 	mov.w	r9, #1
 8012880:	4623      	mov	r3, r4
 8012882:	469a      	mov	sl, r3
 8012884:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012888:	b10a      	cbz	r2, 801288e <_vfiprintf_r+0xa2>
 801288a:	2a25      	cmp	r2, #37	; 0x25
 801288c:	d1f9      	bne.n	8012882 <_vfiprintf_r+0x96>
 801288e:	ebba 0b04 	subs.w	fp, sl, r4
 8012892:	d00b      	beq.n	80128ac <_vfiprintf_r+0xc0>
 8012894:	465b      	mov	r3, fp
 8012896:	4622      	mov	r2, r4
 8012898:	4629      	mov	r1, r5
 801289a:	4630      	mov	r0, r6
 801289c:	f7ff ff94 	bl	80127c8 <__sfputs_r>
 80128a0:	3001      	adds	r0, #1
 80128a2:	f000 80aa 	beq.w	80129fa <_vfiprintf_r+0x20e>
 80128a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80128a8:	445a      	add	r2, fp
 80128aa:	9209      	str	r2, [sp, #36]	; 0x24
 80128ac:	f89a 3000 	ldrb.w	r3, [sl]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	f000 80a2 	beq.w	80129fa <_vfiprintf_r+0x20e>
 80128b6:	2300      	movs	r3, #0
 80128b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80128bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128c0:	f10a 0a01 	add.w	sl, sl, #1
 80128c4:	9304      	str	r3, [sp, #16]
 80128c6:	9307      	str	r3, [sp, #28]
 80128c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128cc:	931a      	str	r3, [sp, #104]	; 0x68
 80128ce:	4654      	mov	r4, sl
 80128d0:	2205      	movs	r2, #5
 80128d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128d6:	4858      	ldr	r0, [pc, #352]	; (8012a38 <_vfiprintf_r+0x24c>)
 80128d8:	f7ed fc7a 	bl	80001d0 <memchr>
 80128dc:	9a04      	ldr	r2, [sp, #16]
 80128de:	b9d8      	cbnz	r0, 8012918 <_vfiprintf_r+0x12c>
 80128e0:	06d1      	lsls	r1, r2, #27
 80128e2:	bf44      	itt	mi
 80128e4:	2320      	movmi	r3, #32
 80128e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128ea:	0713      	lsls	r3, r2, #28
 80128ec:	bf44      	itt	mi
 80128ee:	232b      	movmi	r3, #43	; 0x2b
 80128f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128f4:	f89a 3000 	ldrb.w	r3, [sl]
 80128f8:	2b2a      	cmp	r3, #42	; 0x2a
 80128fa:	d015      	beq.n	8012928 <_vfiprintf_r+0x13c>
 80128fc:	9a07      	ldr	r2, [sp, #28]
 80128fe:	4654      	mov	r4, sl
 8012900:	2000      	movs	r0, #0
 8012902:	f04f 0c0a 	mov.w	ip, #10
 8012906:	4621      	mov	r1, r4
 8012908:	f811 3b01 	ldrb.w	r3, [r1], #1
 801290c:	3b30      	subs	r3, #48	; 0x30
 801290e:	2b09      	cmp	r3, #9
 8012910:	d94e      	bls.n	80129b0 <_vfiprintf_r+0x1c4>
 8012912:	b1b0      	cbz	r0, 8012942 <_vfiprintf_r+0x156>
 8012914:	9207      	str	r2, [sp, #28]
 8012916:	e014      	b.n	8012942 <_vfiprintf_r+0x156>
 8012918:	eba0 0308 	sub.w	r3, r0, r8
 801291c:	fa09 f303 	lsl.w	r3, r9, r3
 8012920:	4313      	orrs	r3, r2
 8012922:	9304      	str	r3, [sp, #16]
 8012924:	46a2      	mov	sl, r4
 8012926:	e7d2      	b.n	80128ce <_vfiprintf_r+0xe2>
 8012928:	9b03      	ldr	r3, [sp, #12]
 801292a:	1d19      	adds	r1, r3, #4
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	9103      	str	r1, [sp, #12]
 8012930:	2b00      	cmp	r3, #0
 8012932:	bfbb      	ittet	lt
 8012934:	425b      	neglt	r3, r3
 8012936:	f042 0202 	orrlt.w	r2, r2, #2
 801293a:	9307      	strge	r3, [sp, #28]
 801293c:	9307      	strlt	r3, [sp, #28]
 801293e:	bfb8      	it	lt
 8012940:	9204      	strlt	r2, [sp, #16]
 8012942:	7823      	ldrb	r3, [r4, #0]
 8012944:	2b2e      	cmp	r3, #46	; 0x2e
 8012946:	d10c      	bne.n	8012962 <_vfiprintf_r+0x176>
 8012948:	7863      	ldrb	r3, [r4, #1]
 801294a:	2b2a      	cmp	r3, #42	; 0x2a
 801294c:	d135      	bne.n	80129ba <_vfiprintf_r+0x1ce>
 801294e:	9b03      	ldr	r3, [sp, #12]
 8012950:	1d1a      	adds	r2, r3, #4
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	9203      	str	r2, [sp, #12]
 8012956:	2b00      	cmp	r3, #0
 8012958:	bfb8      	it	lt
 801295a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801295e:	3402      	adds	r4, #2
 8012960:	9305      	str	r3, [sp, #20]
 8012962:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012a48 <_vfiprintf_r+0x25c>
 8012966:	7821      	ldrb	r1, [r4, #0]
 8012968:	2203      	movs	r2, #3
 801296a:	4650      	mov	r0, sl
 801296c:	f7ed fc30 	bl	80001d0 <memchr>
 8012970:	b140      	cbz	r0, 8012984 <_vfiprintf_r+0x198>
 8012972:	2340      	movs	r3, #64	; 0x40
 8012974:	eba0 000a 	sub.w	r0, r0, sl
 8012978:	fa03 f000 	lsl.w	r0, r3, r0
 801297c:	9b04      	ldr	r3, [sp, #16]
 801297e:	4303      	orrs	r3, r0
 8012980:	3401      	adds	r4, #1
 8012982:	9304      	str	r3, [sp, #16]
 8012984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012988:	482c      	ldr	r0, [pc, #176]	; (8012a3c <_vfiprintf_r+0x250>)
 801298a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801298e:	2206      	movs	r2, #6
 8012990:	f7ed fc1e 	bl	80001d0 <memchr>
 8012994:	2800      	cmp	r0, #0
 8012996:	d03f      	beq.n	8012a18 <_vfiprintf_r+0x22c>
 8012998:	4b29      	ldr	r3, [pc, #164]	; (8012a40 <_vfiprintf_r+0x254>)
 801299a:	bb1b      	cbnz	r3, 80129e4 <_vfiprintf_r+0x1f8>
 801299c:	9b03      	ldr	r3, [sp, #12]
 801299e:	3307      	adds	r3, #7
 80129a0:	f023 0307 	bic.w	r3, r3, #7
 80129a4:	3308      	adds	r3, #8
 80129a6:	9303      	str	r3, [sp, #12]
 80129a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129aa:	443b      	add	r3, r7
 80129ac:	9309      	str	r3, [sp, #36]	; 0x24
 80129ae:	e767      	b.n	8012880 <_vfiprintf_r+0x94>
 80129b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80129b4:	460c      	mov	r4, r1
 80129b6:	2001      	movs	r0, #1
 80129b8:	e7a5      	b.n	8012906 <_vfiprintf_r+0x11a>
 80129ba:	2300      	movs	r3, #0
 80129bc:	3401      	adds	r4, #1
 80129be:	9305      	str	r3, [sp, #20]
 80129c0:	4619      	mov	r1, r3
 80129c2:	f04f 0c0a 	mov.w	ip, #10
 80129c6:	4620      	mov	r0, r4
 80129c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129cc:	3a30      	subs	r2, #48	; 0x30
 80129ce:	2a09      	cmp	r2, #9
 80129d0:	d903      	bls.n	80129da <_vfiprintf_r+0x1ee>
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d0c5      	beq.n	8012962 <_vfiprintf_r+0x176>
 80129d6:	9105      	str	r1, [sp, #20]
 80129d8:	e7c3      	b.n	8012962 <_vfiprintf_r+0x176>
 80129da:	fb0c 2101 	mla	r1, ip, r1, r2
 80129de:	4604      	mov	r4, r0
 80129e0:	2301      	movs	r3, #1
 80129e2:	e7f0      	b.n	80129c6 <_vfiprintf_r+0x1da>
 80129e4:	ab03      	add	r3, sp, #12
 80129e6:	9300      	str	r3, [sp, #0]
 80129e8:	462a      	mov	r2, r5
 80129ea:	4b16      	ldr	r3, [pc, #88]	; (8012a44 <_vfiprintf_r+0x258>)
 80129ec:	a904      	add	r1, sp, #16
 80129ee:	4630      	mov	r0, r6
 80129f0:	f3af 8000 	nop.w
 80129f4:	4607      	mov	r7, r0
 80129f6:	1c78      	adds	r0, r7, #1
 80129f8:	d1d6      	bne.n	80129a8 <_vfiprintf_r+0x1bc>
 80129fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80129fc:	07d9      	lsls	r1, r3, #31
 80129fe:	d405      	bmi.n	8012a0c <_vfiprintf_r+0x220>
 8012a00:	89ab      	ldrh	r3, [r5, #12]
 8012a02:	059a      	lsls	r2, r3, #22
 8012a04:	d402      	bmi.n	8012a0c <_vfiprintf_r+0x220>
 8012a06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a08:	f7ff fec6 	bl	8012798 <__retarget_lock_release_recursive>
 8012a0c:	89ab      	ldrh	r3, [r5, #12]
 8012a0e:	065b      	lsls	r3, r3, #25
 8012a10:	f53f af12 	bmi.w	8012838 <_vfiprintf_r+0x4c>
 8012a14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a16:	e711      	b.n	801283c <_vfiprintf_r+0x50>
 8012a18:	ab03      	add	r3, sp, #12
 8012a1a:	9300      	str	r3, [sp, #0]
 8012a1c:	462a      	mov	r2, r5
 8012a1e:	4b09      	ldr	r3, [pc, #36]	; (8012a44 <_vfiprintf_r+0x258>)
 8012a20:	a904      	add	r1, sp, #16
 8012a22:	4630      	mov	r0, r6
 8012a24:	f7fe fee0 	bl	80117e8 <_printf_i>
 8012a28:	e7e4      	b.n	80129f4 <_vfiprintf_r+0x208>
 8012a2a:	bf00      	nop
 8012a2c:	08014284 	.word	0x08014284
 8012a30:	080142a4 	.word	0x080142a4
 8012a34:	08014264 	.word	0x08014264
 8012a38:	08014250 	.word	0x08014250
 8012a3c:	0801425a 	.word	0x0801425a
 8012a40:	00000000 	.word	0x00000000
 8012a44:	080127c9 	.word	0x080127c9
 8012a48:	08014256 	.word	0x08014256

08012a4c <__swbuf_r>:
 8012a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a4e:	460e      	mov	r6, r1
 8012a50:	4614      	mov	r4, r2
 8012a52:	4605      	mov	r5, r0
 8012a54:	b118      	cbz	r0, 8012a5e <__swbuf_r+0x12>
 8012a56:	6983      	ldr	r3, [r0, #24]
 8012a58:	b90b      	cbnz	r3, 8012a5e <__swbuf_r+0x12>
 8012a5a:	f000 f9d9 	bl	8012e10 <__sinit>
 8012a5e:	4b21      	ldr	r3, [pc, #132]	; (8012ae4 <__swbuf_r+0x98>)
 8012a60:	429c      	cmp	r4, r3
 8012a62:	d12b      	bne.n	8012abc <__swbuf_r+0x70>
 8012a64:	686c      	ldr	r4, [r5, #4]
 8012a66:	69a3      	ldr	r3, [r4, #24]
 8012a68:	60a3      	str	r3, [r4, #8]
 8012a6a:	89a3      	ldrh	r3, [r4, #12]
 8012a6c:	071a      	lsls	r2, r3, #28
 8012a6e:	d52f      	bpl.n	8012ad0 <__swbuf_r+0x84>
 8012a70:	6923      	ldr	r3, [r4, #16]
 8012a72:	b36b      	cbz	r3, 8012ad0 <__swbuf_r+0x84>
 8012a74:	6923      	ldr	r3, [r4, #16]
 8012a76:	6820      	ldr	r0, [r4, #0]
 8012a78:	1ac0      	subs	r0, r0, r3
 8012a7a:	6963      	ldr	r3, [r4, #20]
 8012a7c:	b2f6      	uxtb	r6, r6
 8012a7e:	4283      	cmp	r3, r0
 8012a80:	4637      	mov	r7, r6
 8012a82:	dc04      	bgt.n	8012a8e <__swbuf_r+0x42>
 8012a84:	4621      	mov	r1, r4
 8012a86:	4628      	mov	r0, r5
 8012a88:	f000 f92e 	bl	8012ce8 <_fflush_r>
 8012a8c:	bb30      	cbnz	r0, 8012adc <__swbuf_r+0x90>
 8012a8e:	68a3      	ldr	r3, [r4, #8]
 8012a90:	3b01      	subs	r3, #1
 8012a92:	60a3      	str	r3, [r4, #8]
 8012a94:	6823      	ldr	r3, [r4, #0]
 8012a96:	1c5a      	adds	r2, r3, #1
 8012a98:	6022      	str	r2, [r4, #0]
 8012a9a:	701e      	strb	r6, [r3, #0]
 8012a9c:	6963      	ldr	r3, [r4, #20]
 8012a9e:	3001      	adds	r0, #1
 8012aa0:	4283      	cmp	r3, r0
 8012aa2:	d004      	beq.n	8012aae <__swbuf_r+0x62>
 8012aa4:	89a3      	ldrh	r3, [r4, #12]
 8012aa6:	07db      	lsls	r3, r3, #31
 8012aa8:	d506      	bpl.n	8012ab8 <__swbuf_r+0x6c>
 8012aaa:	2e0a      	cmp	r6, #10
 8012aac:	d104      	bne.n	8012ab8 <__swbuf_r+0x6c>
 8012aae:	4621      	mov	r1, r4
 8012ab0:	4628      	mov	r0, r5
 8012ab2:	f000 f919 	bl	8012ce8 <_fflush_r>
 8012ab6:	b988      	cbnz	r0, 8012adc <__swbuf_r+0x90>
 8012ab8:	4638      	mov	r0, r7
 8012aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012abc:	4b0a      	ldr	r3, [pc, #40]	; (8012ae8 <__swbuf_r+0x9c>)
 8012abe:	429c      	cmp	r4, r3
 8012ac0:	d101      	bne.n	8012ac6 <__swbuf_r+0x7a>
 8012ac2:	68ac      	ldr	r4, [r5, #8]
 8012ac4:	e7cf      	b.n	8012a66 <__swbuf_r+0x1a>
 8012ac6:	4b09      	ldr	r3, [pc, #36]	; (8012aec <__swbuf_r+0xa0>)
 8012ac8:	429c      	cmp	r4, r3
 8012aca:	bf08      	it	eq
 8012acc:	68ec      	ldreq	r4, [r5, #12]
 8012ace:	e7ca      	b.n	8012a66 <__swbuf_r+0x1a>
 8012ad0:	4621      	mov	r1, r4
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	f000 f80c 	bl	8012af0 <__swsetup_r>
 8012ad8:	2800      	cmp	r0, #0
 8012ada:	d0cb      	beq.n	8012a74 <__swbuf_r+0x28>
 8012adc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012ae0:	e7ea      	b.n	8012ab8 <__swbuf_r+0x6c>
 8012ae2:	bf00      	nop
 8012ae4:	08014284 	.word	0x08014284
 8012ae8:	080142a4 	.word	0x080142a4
 8012aec:	08014264 	.word	0x08014264

08012af0 <__swsetup_r>:
 8012af0:	4b32      	ldr	r3, [pc, #200]	; (8012bbc <__swsetup_r+0xcc>)
 8012af2:	b570      	push	{r4, r5, r6, lr}
 8012af4:	681d      	ldr	r5, [r3, #0]
 8012af6:	4606      	mov	r6, r0
 8012af8:	460c      	mov	r4, r1
 8012afa:	b125      	cbz	r5, 8012b06 <__swsetup_r+0x16>
 8012afc:	69ab      	ldr	r3, [r5, #24]
 8012afe:	b913      	cbnz	r3, 8012b06 <__swsetup_r+0x16>
 8012b00:	4628      	mov	r0, r5
 8012b02:	f000 f985 	bl	8012e10 <__sinit>
 8012b06:	4b2e      	ldr	r3, [pc, #184]	; (8012bc0 <__swsetup_r+0xd0>)
 8012b08:	429c      	cmp	r4, r3
 8012b0a:	d10f      	bne.n	8012b2c <__swsetup_r+0x3c>
 8012b0c:	686c      	ldr	r4, [r5, #4]
 8012b0e:	89a3      	ldrh	r3, [r4, #12]
 8012b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b14:	0719      	lsls	r1, r3, #28
 8012b16:	d42c      	bmi.n	8012b72 <__swsetup_r+0x82>
 8012b18:	06dd      	lsls	r5, r3, #27
 8012b1a:	d411      	bmi.n	8012b40 <__swsetup_r+0x50>
 8012b1c:	2309      	movs	r3, #9
 8012b1e:	6033      	str	r3, [r6, #0]
 8012b20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012b24:	81a3      	strh	r3, [r4, #12]
 8012b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b2a:	e03e      	b.n	8012baa <__swsetup_r+0xba>
 8012b2c:	4b25      	ldr	r3, [pc, #148]	; (8012bc4 <__swsetup_r+0xd4>)
 8012b2e:	429c      	cmp	r4, r3
 8012b30:	d101      	bne.n	8012b36 <__swsetup_r+0x46>
 8012b32:	68ac      	ldr	r4, [r5, #8]
 8012b34:	e7eb      	b.n	8012b0e <__swsetup_r+0x1e>
 8012b36:	4b24      	ldr	r3, [pc, #144]	; (8012bc8 <__swsetup_r+0xd8>)
 8012b38:	429c      	cmp	r4, r3
 8012b3a:	bf08      	it	eq
 8012b3c:	68ec      	ldreq	r4, [r5, #12]
 8012b3e:	e7e6      	b.n	8012b0e <__swsetup_r+0x1e>
 8012b40:	0758      	lsls	r0, r3, #29
 8012b42:	d512      	bpl.n	8012b6a <__swsetup_r+0x7a>
 8012b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b46:	b141      	cbz	r1, 8012b5a <__swsetup_r+0x6a>
 8012b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b4c:	4299      	cmp	r1, r3
 8012b4e:	d002      	beq.n	8012b56 <__swsetup_r+0x66>
 8012b50:	4630      	mov	r0, r6
 8012b52:	f7fd ffcf 	bl	8010af4 <_free_r>
 8012b56:	2300      	movs	r3, #0
 8012b58:	6363      	str	r3, [r4, #52]	; 0x34
 8012b5a:	89a3      	ldrh	r3, [r4, #12]
 8012b5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b60:	81a3      	strh	r3, [r4, #12]
 8012b62:	2300      	movs	r3, #0
 8012b64:	6063      	str	r3, [r4, #4]
 8012b66:	6923      	ldr	r3, [r4, #16]
 8012b68:	6023      	str	r3, [r4, #0]
 8012b6a:	89a3      	ldrh	r3, [r4, #12]
 8012b6c:	f043 0308 	orr.w	r3, r3, #8
 8012b70:	81a3      	strh	r3, [r4, #12]
 8012b72:	6923      	ldr	r3, [r4, #16]
 8012b74:	b94b      	cbnz	r3, 8012b8a <__swsetup_r+0x9a>
 8012b76:	89a3      	ldrh	r3, [r4, #12]
 8012b78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b80:	d003      	beq.n	8012b8a <__swsetup_r+0x9a>
 8012b82:	4621      	mov	r1, r4
 8012b84:	4630      	mov	r0, r6
 8012b86:	f000 fa05 	bl	8012f94 <__smakebuf_r>
 8012b8a:	89a0      	ldrh	r0, [r4, #12]
 8012b8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b90:	f010 0301 	ands.w	r3, r0, #1
 8012b94:	d00a      	beq.n	8012bac <__swsetup_r+0xbc>
 8012b96:	2300      	movs	r3, #0
 8012b98:	60a3      	str	r3, [r4, #8]
 8012b9a:	6963      	ldr	r3, [r4, #20]
 8012b9c:	425b      	negs	r3, r3
 8012b9e:	61a3      	str	r3, [r4, #24]
 8012ba0:	6923      	ldr	r3, [r4, #16]
 8012ba2:	b943      	cbnz	r3, 8012bb6 <__swsetup_r+0xc6>
 8012ba4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012ba8:	d1ba      	bne.n	8012b20 <__swsetup_r+0x30>
 8012baa:	bd70      	pop	{r4, r5, r6, pc}
 8012bac:	0781      	lsls	r1, r0, #30
 8012bae:	bf58      	it	pl
 8012bb0:	6963      	ldrpl	r3, [r4, #20]
 8012bb2:	60a3      	str	r3, [r4, #8]
 8012bb4:	e7f4      	b.n	8012ba0 <__swsetup_r+0xb0>
 8012bb6:	2000      	movs	r0, #0
 8012bb8:	e7f7      	b.n	8012baa <__swsetup_r+0xba>
 8012bba:	bf00      	nop
 8012bbc:	20000294 	.word	0x20000294
 8012bc0:	08014284 	.word	0x08014284
 8012bc4:	080142a4 	.word	0x080142a4
 8012bc8:	08014264 	.word	0x08014264

08012bcc <abort>:
 8012bcc:	b508      	push	{r3, lr}
 8012bce:	2006      	movs	r0, #6
 8012bd0:	f000 fa48 	bl	8013064 <raise>
 8012bd4:	2001      	movs	r0, #1
 8012bd6:	f7ef fbaf 	bl	8002338 <_exit>
	...

08012bdc <__sflush_r>:
 8012bdc:	898a      	ldrh	r2, [r1, #12]
 8012bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012be2:	4605      	mov	r5, r0
 8012be4:	0710      	lsls	r0, r2, #28
 8012be6:	460c      	mov	r4, r1
 8012be8:	d458      	bmi.n	8012c9c <__sflush_r+0xc0>
 8012bea:	684b      	ldr	r3, [r1, #4]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	dc05      	bgt.n	8012bfc <__sflush_r+0x20>
 8012bf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	dc02      	bgt.n	8012bfc <__sflush_r+0x20>
 8012bf6:	2000      	movs	r0, #0
 8012bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012bfe:	2e00      	cmp	r6, #0
 8012c00:	d0f9      	beq.n	8012bf6 <__sflush_r+0x1a>
 8012c02:	2300      	movs	r3, #0
 8012c04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012c08:	682f      	ldr	r7, [r5, #0]
 8012c0a:	602b      	str	r3, [r5, #0]
 8012c0c:	d032      	beq.n	8012c74 <__sflush_r+0x98>
 8012c0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012c10:	89a3      	ldrh	r3, [r4, #12]
 8012c12:	075a      	lsls	r2, r3, #29
 8012c14:	d505      	bpl.n	8012c22 <__sflush_r+0x46>
 8012c16:	6863      	ldr	r3, [r4, #4]
 8012c18:	1ac0      	subs	r0, r0, r3
 8012c1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c1c:	b10b      	cbz	r3, 8012c22 <__sflush_r+0x46>
 8012c1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012c20:	1ac0      	subs	r0, r0, r3
 8012c22:	2300      	movs	r3, #0
 8012c24:	4602      	mov	r2, r0
 8012c26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c28:	6a21      	ldr	r1, [r4, #32]
 8012c2a:	4628      	mov	r0, r5
 8012c2c:	47b0      	blx	r6
 8012c2e:	1c43      	adds	r3, r0, #1
 8012c30:	89a3      	ldrh	r3, [r4, #12]
 8012c32:	d106      	bne.n	8012c42 <__sflush_r+0x66>
 8012c34:	6829      	ldr	r1, [r5, #0]
 8012c36:	291d      	cmp	r1, #29
 8012c38:	d82c      	bhi.n	8012c94 <__sflush_r+0xb8>
 8012c3a:	4a2a      	ldr	r2, [pc, #168]	; (8012ce4 <__sflush_r+0x108>)
 8012c3c:	40ca      	lsrs	r2, r1
 8012c3e:	07d6      	lsls	r6, r2, #31
 8012c40:	d528      	bpl.n	8012c94 <__sflush_r+0xb8>
 8012c42:	2200      	movs	r2, #0
 8012c44:	6062      	str	r2, [r4, #4]
 8012c46:	04d9      	lsls	r1, r3, #19
 8012c48:	6922      	ldr	r2, [r4, #16]
 8012c4a:	6022      	str	r2, [r4, #0]
 8012c4c:	d504      	bpl.n	8012c58 <__sflush_r+0x7c>
 8012c4e:	1c42      	adds	r2, r0, #1
 8012c50:	d101      	bne.n	8012c56 <__sflush_r+0x7a>
 8012c52:	682b      	ldr	r3, [r5, #0]
 8012c54:	b903      	cbnz	r3, 8012c58 <__sflush_r+0x7c>
 8012c56:	6560      	str	r0, [r4, #84]	; 0x54
 8012c58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c5a:	602f      	str	r7, [r5, #0]
 8012c5c:	2900      	cmp	r1, #0
 8012c5e:	d0ca      	beq.n	8012bf6 <__sflush_r+0x1a>
 8012c60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c64:	4299      	cmp	r1, r3
 8012c66:	d002      	beq.n	8012c6e <__sflush_r+0x92>
 8012c68:	4628      	mov	r0, r5
 8012c6a:	f7fd ff43 	bl	8010af4 <_free_r>
 8012c6e:	2000      	movs	r0, #0
 8012c70:	6360      	str	r0, [r4, #52]	; 0x34
 8012c72:	e7c1      	b.n	8012bf8 <__sflush_r+0x1c>
 8012c74:	6a21      	ldr	r1, [r4, #32]
 8012c76:	2301      	movs	r3, #1
 8012c78:	4628      	mov	r0, r5
 8012c7a:	47b0      	blx	r6
 8012c7c:	1c41      	adds	r1, r0, #1
 8012c7e:	d1c7      	bne.n	8012c10 <__sflush_r+0x34>
 8012c80:	682b      	ldr	r3, [r5, #0]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d0c4      	beq.n	8012c10 <__sflush_r+0x34>
 8012c86:	2b1d      	cmp	r3, #29
 8012c88:	d001      	beq.n	8012c8e <__sflush_r+0xb2>
 8012c8a:	2b16      	cmp	r3, #22
 8012c8c:	d101      	bne.n	8012c92 <__sflush_r+0xb6>
 8012c8e:	602f      	str	r7, [r5, #0]
 8012c90:	e7b1      	b.n	8012bf6 <__sflush_r+0x1a>
 8012c92:	89a3      	ldrh	r3, [r4, #12]
 8012c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c98:	81a3      	strh	r3, [r4, #12]
 8012c9a:	e7ad      	b.n	8012bf8 <__sflush_r+0x1c>
 8012c9c:	690f      	ldr	r7, [r1, #16]
 8012c9e:	2f00      	cmp	r7, #0
 8012ca0:	d0a9      	beq.n	8012bf6 <__sflush_r+0x1a>
 8012ca2:	0793      	lsls	r3, r2, #30
 8012ca4:	680e      	ldr	r6, [r1, #0]
 8012ca6:	bf08      	it	eq
 8012ca8:	694b      	ldreq	r3, [r1, #20]
 8012caa:	600f      	str	r7, [r1, #0]
 8012cac:	bf18      	it	ne
 8012cae:	2300      	movne	r3, #0
 8012cb0:	eba6 0807 	sub.w	r8, r6, r7
 8012cb4:	608b      	str	r3, [r1, #8]
 8012cb6:	f1b8 0f00 	cmp.w	r8, #0
 8012cba:	dd9c      	ble.n	8012bf6 <__sflush_r+0x1a>
 8012cbc:	6a21      	ldr	r1, [r4, #32]
 8012cbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012cc0:	4643      	mov	r3, r8
 8012cc2:	463a      	mov	r2, r7
 8012cc4:	4628      	mov	r0, r5
 8012cc6:	47b0      	blx	r6
 8012cc8:	2800      	cmp	r0, #0
 8012cca:	dc06      	bgt.n	8012cda <__sflush_r+0xfe>
 8012ccc:	89a3      	ldrh	r3, [r4, #12]
 8012cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cd2:	81a3      	strh	r3, [r4, #12]
 8012cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012cd8:	e78e      	b.n	8012bf8 <__sflush_r+0x1c>
 8012cda:	4407      	add	r7, r0
 8012cdc:	eba8 0800 	sub.w	r8, r8, r0
 8012ce0:	e7e9      	b.n	8012cb6 <__sflush_r+0xda>
 8012ce2:	bf00      	nop
 8012ce4:	20400001 	.word	0x20400001

08012ce8 <_fflush_r>:
 8012ce8:	b538      	push	{r3, r4, r5, lr}
 8012cea:	690b      	ldr	r3, [r1, #16]
 8012cec:	4605      	mov	r5, r0
 8012cee:	460c      	mov	r4, r1
 8012cf0:	b913      	cbnz	r3, 8012cf8 <_fflush_r+0x10>
 8012cf2:	2500      	movs	r5, #0
 8012cf4:	4628      	mov	r0, r5
 8012cf6:	bd38      	pop	{r3, r4, r5, pc}
 8012cf8:	b118      	cbz	r0, 8012d02 <_fflush_r+0x1a>
 8012cfa:	6983      	ldr	r3, [r0, #24]
 8012cfc:	b90b      	cbnz	r3, 8012d02 <_fflush_r+0x1a>
 8012cfe:	f000 f887 	bl	8012e10 <__sinit>
 8012d02:	4b14      	ldr	r3, [pc, #80]	; (8012d54 <_fflush_r+0x6c>)
 8012d04:	429c      	cmp	r4, r3
 8012d06:	d11b      	bne.n	8012d40 <_fflush_r+0x58>
 8012d08:	686c      	ldr	r4, [r5, #4]
 8012d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d0ef      	beq.n	8012cf2 <_fflush_r+0xa>
 8012d12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012d14:	07d0      	lsls	r0, r2, #31
 8012d16:	d404      	bmi.n	8012d22 <_fflush_r+0x3a>
 8012d18:	0599      	lsls	r1, r3, #22
 8012d1a:	d402      	bmi.n	8012d22 <_fflush_r+0x3a>
 8012d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d1e:	f7ff fd3a 	bl	8012796 <__retarget_lock_acquire_recursive>
 8012d22:	4628      	mov	r0, r5
 8012d24:	4621      	mov	r1, r4
 8012d26:	f7ff ff59 	bl	8012bdc <__sflush_r>
 8012d2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d2c:	07da      	lsls	r2, r3, #31
 8012d2e:	4605      	mov	r5, r0
 8012d30:	d4e0      	bmi.n	8012cf4 <_fflush_r+0xc>
 8012d32:	89a3      	ldrh	r3, [r4, #12]
 8012d34:	059b      	lsls	r3, r3, #22
 8012d36:	d4dd      	bmi.n	8012cf4 <_fflush_r+0xc>
 8012d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d3a:	f7ff fd2d 	bl	8012798 <__retarget_lock_release_recursive>
 8012d3e:	e7d9      	b.n	8012cf4 <_fflush_r+0xc>
 8012d40:	4b05      	ldr	r3, [pc, #20]	; (8012d58 <_fflush_r+0x70>)
 8012d42:	429c      	cmp	r4, r3
 8012d44:	d101      	bne.n	8012d4a <_fflush_r+0x62>
 8012d46:	68ac      	ldr	r4, [r5, #8]
 8012d48:	e7df      	b.n	8012d0a <_fflush_r+0x22>
 8012d4a:	4b04      	ldr	r3, [pc, #16]	; (8012d5c <_fflush_r+0x74>)
 8012d4c:	429c      	cmp	r4, r3
 8012d4e:	bf08      	it	eq
 8012d50:	68ec      	ldreq	r4, [r5, #12]
 8012d52:	e7da      	b.n	8012d0a <_fflush_r+0x22>
 8012d54:	08014284 	.word	0x08014284
 8012d58:	080142a4 	.word	0x080142a4
 8012d5c:	08014264 	.word	0x08014264

08012d60 <std>:
 8012d60:	2300      	movs	r3, #0
 8012d62:	b510      	push	{r4, lr}
 8012d64:	4604      	mov	r4, r0
 8012d66:	e9c0 3300 	strd	r3, r3, [r0]
 8012d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012d6e:	6083      	str	r3, [r0, #8]
 8012d70:	8181      	strh	r1, [r0, #12]
 8012d72:	6643      	str	r3, [r0, #100]	; 0x64
 8012d74:	81c2      	strh	r2, [r0, #14]
 8012d76:	6183      	str	r3, [r0, #24]
 8012d78:	4619      	mov	r1, r3
 8012d7a:	2208      	movs	r2, #8
 8012d7c:	305c      	adds	r0, #92	; 0x5c
 8012d7e:	f7fd feb1 	bl	8010ae4 <memset>
 8012d82:	4b05      	ldr	r3, [pc, #20]	; (8012d98 <std+0x38>)
 8012d84:	6263      	str	r3, [r4, #36]	; 0x24
 8012d86:	4b05      	ldr	r3, [pc, #20]	; (8012d9c <std+0x3c>)
 8012d88:	62a3      	str	r3, [r4, #40]	; 0x28
 8012d8a:	4b05      	ldr	r3, [pc, #20]	; (8012da0 <std+0x40>)
 8012d8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012d8e:	4b05      	ldr	r3, [pc, #20]	; (8012da4 <std+0x44>)
 8012d90:	6224      	str	r4, [r4, #32]
 8012d92:	6323      	str	r3, [r4, #48]	; 0x30
 8012d94:	bd10      	pop	{r4, pc}
 8012d96:	bf00      	nop
 8012d98:	0801309d 	.word	0x0801309d
 8012d9c:	080130bf 	.word	0x080130bf
 8012da0:	080130f7 	.word	0x080130f7
 8012da4:	0801311b 	.word	0x0801311b

08012da8 <_cleanup_r>:
 8012da8:	4901      	ldr	r1, [pc, #4]	; (8012db0 <_cleanup_r+0x8>)
 8012daa:	f000 b8af 	b.w	8012f0c <_fwalk_reent>
 8012dae:	bf00      	nop
 8012db0:	08012ce9 	.word	0x08012ce9

08012db4 <__sfmoreglue>:
 8012db4:	b570      	push	{r4, r5, r6, lr}
 8012db6:	1e4a      	subs	r2, r1, #1
 8012db8:	2568      	movs	r5, #104	; 0x68
 8012dba:	4355      	muls	r5, r2
 8012dbc:	460e      	mov	r6, r1
 8012dbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012dc2:	f7fd fee7 	bl	8010b94 <_malloc_r>
 8012dc6:	4604      	mov	r4, r0
 8012dc8:	b140      	cbz	r0, 8012ddc <__sfmoreglue+0x28>
 8012dca:	2100      	movs	r1, #0
 8012dcc:	e9c0 1600 	strd	r1, r6, [r0]
 8012dd0:	300c      	adds	r0, #12
 8012dd2:	60a0      	str	r0, [r4, #8]
 8012dd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012dd8:	f7fd fe84 	bl	8010ae4 <memset>
 8012ddc:	4620      	mov	r0, r4
 8012dde:	bd70      	pop	{r4, r5, r6, pc}

08012de0 <__sfp_lock_acquire>:
 8012de0:	4801      	ldr	r0, [pc, #4]	; (8012de8 <__sfp_lock_acquire+0x8>)
 8012de2:	f7ff bcd8 	b.w	8012796 <__retarget_lock_acquire_recursive>
 8012de6:	bf00      	nop
 8012de8:	20000e18 	.word	0x20000e18

08012dec <__sfp_lock_release>:
 8012dec:	4801      	ldr	r0, [pc, #4]	; (8012df4 <__sfp_lock_release+0x8>)
 8012dee:	f7ff bcd3 	b.w	8012798 <__retarget_lock_release_recursive>
 8012df2:	bf00      	nop
 8012df4:	20000e18 	.word	0x20000e18

08012df8 <__sinit_lock_acquire>:
 8012df8:	4801      	ldr	r0, [pc, #4]	; (8012e00 <__sinit_lock_acquire+0x8>)
 8012dfa:	f7ff bccc 	b.w	8012796 <__retarget_lock_acquire_recursive>
 8012dfe:	bf00      	nop
 8012e00:	20000e13 	.word	0x20000e13

08012e04 <__sinit_lock_release>:
 8012e04:	4801      	ldr	r0, [pc, #4]	; (8012e0c <__sinit_lock_release+0x8>)
 8012e06:	f7ff bcc7 	b.w	8012798 <__retarget_lock_release_recursive>
 8012e0a:	bf00      	nop
 8012e0c:	20000e13 	.word	0x20000e13

08012e10 <__sinit>:
 8012e10:	b510      	push	{r4, lr}
 8012e12:	4604      	mov	r4, r0
 8012e14:	f7ff fff0 	bl	8012df8 <__sinit_lock_acquire>
 8012e18:	69a3      	ldr	r3, [r4, #24]
 8012e1a:	b11b      	cbz	r3, 8012e24 <__sinit+0x14>
 8012e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e20:	f7ff bff0 	b.w	8012e04 <__sinit_lock_release>
 8012e24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012e28:	6523      	str	r3, [r4, #80]	; 0x50
 8012e2a:	4b13      	ldr	r3, [pc, #76]	; (8012e78 <__sinit+0x68>)
 8012e2c:	4a13      	ldr	r2, [pc, #76]	; (8012e7c <__sinit+0x6c>)
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	62a2      	str	r2, [r4, #40]	; 0x28
 8012e32:	42a3      	cmp	r3, r4
 8012e34:	bf04      	itt	eq
 8012e36:	2301      	moveq	r3, #1
 8012e38:	61a3      	streq	r3, [r4, #24]
 8012e3a:	4620      	mov	r0, r4
 8012e3c:	f000 f820 	bl	8012e80 <__sfp>
 8012e40:	6060      	str	r0, [r4, #4]
 8012e42:	4620      	mov	r0, r4
 8012e44:	f000 f81c 	bl	8012e80 <__sfp>
 8012e48:	60a0      	str	r0, [r4, #8]
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	f000 f818 	bl	8012e80 <__sfp>
 8012e50:	2200      	movs	r2, #0
 8012e52:	60e0      	str	r0, [r4, #12]
 8012e54:	2104      	movs	r1, #4
 8012e56:	6860      	ldr	r0, [r4, #4]
 8012e58:	f7ff ff82 	bl	8012d60 <std>
 8012e5c:	68a0      	ldr	r0, [r4, #8]
 8012e5e:	2201      	movs	r2, #1
 8012e60:	2109      	movs	r1, #9
 8012e62:	f7ff ff7d 	bl	8012d60 <std>
 8012e66:	68e0      	ldr	r0, [r4, #12]
 8012e68:	2202      	movs	r2, #2
 8012e6a:	2112      	movs	r1, #18
 8012e6c:	f7ff ff78 	bl	8012d60 <std>
 8012e70:	2301      	movs	r3, #1
 8012e72:	61a3      	str	r3, [r4, #24]
 8012e74:	e7d2      	b.n	8012e1c <__sinit+0xc>
 8012e76:	bf00      	nop
 8012e78:	08013fd0 	.word	0x08013fd0
 8012e7c:	08012da9 	.word	0x08012da9

08012e80 <__sfp>:
 8012e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e82:	4607      	mov	r7, r0
 8012e84:	f7ff ffac 	bl	8012de0 <__sfp_lock_acquire>
 8012e88:	4b1e      	ldr	r3, [pc, #120]	; (8012f04 <__sfp+0x84>)
 8012e8a:	681e      	ldr	r6, [r3, #0]
 8012e8c:	69b3      	ldr	r3, [r6, #24]
 8012e8e:	b913      	cbnz	r3, 8012e96 <__sfp+0x16>
 8012e90:	4630      	mov	r0, r6
 8012e92:	f7ff ffbd 	bl	8012e10 <__sinit>
 8012e96:	3648      	adds	r6, #72	; 0x48
 8012e98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012e9c:	3b01      	subs	r3, #1
 8012e9e:	d503      	bpl.n	8012ea8 <__sfp+0x28>
 8012ea0:	6833      	ldr	r3, [r6, #0]
 8012ea2:	b30b      	cbz	r3, 8012ee8 <__sfp+0x68>
 8012ea4:	6836      	ldr	r6, [r6, #0]
 8012ea6:	e7f7      	b.n	8012e98 <__sfp+0x18>
 8012ea8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012eac:	b9d5      	cbnz	r5, 8012ee4 <__sfp+0x64>
 8012eae:	4b16      	ldr	r3, [pc, #88]	; (8012f08 <__sfp+0x88>)
 8012eb0:	60e3      	str	r3, [r4, #12]
 8012eb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012eb6:	6665      	str	r5, [r4, #100]	; 0x64
 8012eb8:	f7ff fc6c 	bl	8012794 <__retarget_lock_init_recursive>
 8012ebc:	f7ff ff96 	bl	8012dec <__sfp_lock_release>
 8012ec0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012ec4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012ec8:	6025      	str	r5, [r4, #0]
 8012eca:	61a5      	str	r5, [r4, #24]
 8012ecc:	2208      	movs	r2, #8
 8012ece:	4629      	mov	r1, r5
 8012ed0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012ed4:	f7fd fe06 	bl	8010ae4 <memset>
 8012ed8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012edc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ee4:	3468      	adds	r4, #104	; 0x68
 8012ee6:	e7d9      	b.n	8012e9c <__sfp+0x1c>
 8012ee8:	2104      	movs	r1, #4
 8012eea:	4638      	mov	r0, r7
 8012eec:	f7ff ff62 	bl	8012db4 <__sfmoreglue>
 8012ef0:	4604      	mov	r4, r0
 8012ef2:	6030      	str	r0, [r6, #0]
 8012ef4:	2800      	cmp	r0, #0
 8012ef6:	d1d5      	bne.n	8012ea4 <__sfp+0x24>
 8012ef8:	f7ff ff78 	bl	8012dec <__sfp_lock_release>
 8012efc:	230c      	movs	r3, #12
 8012efe:	603b      	str	r3, [r7, #0]
 8012f00:	e7ee      	b.n	8012ee0 <__sfp+0x60>
 8012f02:	bf00      	nop
 8012f04:	08013fd0 	.word	0x08013fd0
 8012f08:	ffff0001 	.word	0xffff0001

08012f0c <_fwalk_reent>:
 8012f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f10:	4606      	mov	r6, r0
 8012f12:	4688      	mov	r8, r1
 8012f14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012f18:	2700      	movs	r7, #0
 8012f1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f1e:	f1b9 0901 	subs.w	r9, r9, #1
 8012f22:	d505      	bpl.n	8012f30 <_fwalk_reent+0x24>
 8012f24:	6824      	ldr	r4, [r4, #0]
 8012f26:	2c00      	cmp	r4, #0
 8012f28:	d1f7      	bne.n	8012f1a <_fwalk_reent+0xe>
 8012f2a:	4638      	mov	r0, r7
 8012f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f30:	89ab      	ldrh	r3, [r5, #12]
 8012f32:	2b01      	cmp	r3, #1
 8012f34:	d907      	bls.n	8012f46 <_fwalk_reent+0x3a>
 8012f36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	d003      	beq.n	8012f46 <_fwalk_reent+0x3a>
 8012f3e:	4629      	mov	r1, r5
 8012f40:	4630      	mov	r0, r6
 8012f42:	47c0      	blx	r8
 8012f44:	4307      	orrs	r7, r0
 8012f46:	3568      	adds	r5, #104	; 0x68
 8012f48:	e7e9      	b.n	8012f1e <_fwalk_reent+0x12>

08012f4a <__swhatbuf_r>:
 8012f4a:	b570      	push	{r4, r5, r6, lr}
 8012f4c:	460e      	mov	r6, r1
 8012f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f52:	2900      	cmp	r1, #0
 8012f54:	b096      	sub	sp, #88	; 0x58
 8012f56:	4614      	mov	r4, r2
 8012f58:	461d      	mov	r5, r3
 8012f5a:	da07      	bge.n	8012f6c <__swhatbuf_r+0x22>
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	602b      	str	r3, [r5, #0]
 8012f60:	89b3      	ldrh	r3, [r6, #12]
 8012f62:	061a      	lsls	r2, r3, #24
 8012f64:	d410      	bmi.n	8012f88 <__swhatbuf_r+0x3e>
 8012f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f6a:	e00e      	b.n	8012f8a <__swhatbuf_r+0x40>
 8012f6c:	466a      	mov	r2, sp
 8012f6e:	f000 f8fb 	bl	8013168 <_fstat_r>
 8012f72:	2800      	cmp	r0, #0
 8012f74:	dbf2      	blt.n	8012f5c <__swhatbuf_r+0x12>
 8012f76:	9a01      	ldr	r2, [sp, #4]
 8012f78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012f7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012f80:	425a      	negs	r2, r3
 8012f82:	415a      	adcs	r2, r3
 8012f84:	602a      	str	r2, [r5, #0]
 8012f86:	e7ee      	b.n	8012f66 <__swhatbuf_r+0x1c>
 8012f88:	2340      	movs	r3, #64	; 0x40
 8012f8a:	2000      	movs	r0, #0
 8012f8c:	6023      	str	r3, [r4, #0]
 8012f8e:	b016      	add	sp, #88	; 0x58
 8012f90:	bd70      	pop	{r4, r5, r6, pc}
	...

08012f94 <__smakebuf_r>:
 8012f94:	898b      	ldrh	r3, [r1, #12]
 8012f96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012f98:	079d      	lsls	r5, r3, #30
 8012f9a:	4606      	mov	r6, r0
 8012f9c:	460c      	mov	r4, r1
 8012f9e:	d507      	bpl.n	8012fb0 <__smakebuf_r+0x1c>
 8012fa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012fa4:	6023      	str	r3, [r4, #0]
 8012fa6:	6123      	str	r3, [r4, #16]
 8012fa8:	2301      	movs	r3, #1
 8012faa:	6163      	str	r3, [r4, #20]
 8012fac:	b002      	add	sp, #8
 8012fae:	bd70      	pop	{r4, r5, r6, pc}
 8012fb0:	ab01      	add	r3, sp, #4
 8012fb2:	466a      	mov	r2, sp
 8012fb4:	f7ff ffc9 	bl	8012f4a <__swhatbuf_r>
 8012fb8:	9900      	ldr	r1, [sp, #0]
 8012fba:	4605      	mov	r5, r0
 8012fbc:	4630      	mov	r0, r6
 8012fbe:	f7fd fde9 	bl	8010b94 <_malloc_r>
 8012fc2:	b948      	cbnz	r0, 8012fd8 <__smakebuf_r+0x44>
 8012fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fc8:	059a      	lsls	r2, r3, #22
 8012fca:	d4ef      	bmi.n	8012fac <__smakebuf_r+0x18>
 8012fcc:	f023 0303 	bic.w	r3, r3, #3
 8012fd0:	f043 0302 	orr.w	r3, r3, #2
 8012fd4:	81a3      	strh	r3, [r4, #12]
 8012fd6:	e7e3      	b.n	8012fa0 <__smakebuf_r+0xc>
 8012fd8:	4b0d      	ldr	r3, [pc, #52]	; (8013010 <__smakebuf_r+0x7c>)
 8012fda:	62b3      	str	r3, [r6, #40]	; 0x28
 8012fdc:	89a3      	ldrh	r3, [r4, #12]
 8012fde:	6020      	str	r0, [r4, #0]
 8012fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fe4:	81a3      	strh	r3, [r4, #12]
 8012fe6:	9b00      	ldr	r3, [sp, #0]
 8012fe8:	6163      	str	r3, [r4, #20]
 8012fea:	9b01      	ldr	r3, [sp, #4]
 8012fec:	6120      	str	r0, [r4, #16]
 8012fee:	b15b      	cbz	r3, 8013008 <__smakebuf_r+0x74>
 8012ff0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ff4:	4630      	mov	r0, r6
 8012ff6:	f000 f8c9 	bl	801318c <_isatty_r>
 8012ffa:	b128      	cbz	r0, 8013008 <__smakebuf_r+0x74>
 8012ffc:	89a3      	ldrh	r3, [r4, #12]
 8012ffe:	f023 0303 	bic.w	r3, r3, #3
 8013002:	f043 0301 	orr.w	r3, r3, #1
 8013006:	81a3      	strh	r3, [r4, #12]
 8013008:	89a0      	ldrh	r0, [r4, #12]
 801300a:	4305      	orrs	r5, r0
 801300c:	81a5      	strh	r5, [r4, #12]
 801300e:	e7cd      	b.n	8012fac <__smakebuf_r+0x18>
 8013010:	08012da9 	.word	0x08012da9

08013014 <_raise_r>:
 8013014:	291f      	cmp	r1, #31
 8013016:	b538      	push	{r3, r4, r5, lr}
 8013018:	4604      	mov	r4, r0
 801301a:	460d      	mov	r5, r1
 801301c:	d904      	bls.n	8013028 <_raise_r+0x14>
 801301e:	2316      	movs	r3, #22
 8013020:	6003      	str	r3, [r0, #0]
 8013022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013026:	bd38      	pop	{r3, r4, r5, pc}
 8013028:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801302a:	b112      	cbz	r2, 8013032 <_raise_r+0x1e>
 801302c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013030:	b94b      	cbnz	r3, 8013046 <_raise_r+0x32>
 8013032:	4620      	mov	r0, r4
 8013034:	f000 f830 	bl	8013098 <_getpid_r>
 8013038:	462a      	mov	r2, r5
 801303a:	4601      	mov	r1, r0
 801303c:	4620      	mov	r0, r4
 801303e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013042:	f000 b817 	b.w	8013074 <_kill_r>
 8013046:	2b01      	cmp	r3, #1
 8013048:	d00a      	beq.n	8013060 <_raise_r+0x4c>
 801304a:	1c59      	adds	r1, r3, #1
 801304c:	d103      	bne.n	8013056 <_raise_r+0x42>
 801304e:	2316      	movs	r3, #22
 8013050:	6003      	str	r3, [r0, #0]
 8013052:	2001      	movs	r0, #1
 8013054:	e7e7      	b.n	8013026 <_raise_r+0x12>
 8013056:	2400      	movs	r4, #0
 8013058:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801305c:	4628      	mov	r0, r5
 801305e:	4798      	blx	r3
 8013060:	2000      	movs	r0, #0
 8013062:	e7e0      	b.n	8013026 <_raise_r+0x12>

08013064 <raise>:
 8013064:	4b02      	ldr	r3, [pc, #8]	; (8013070 <raise+0xc>)
 8013066:	4601      	mov	r1, r0
 8013068:	6818      	ldr	r0, [r3, #0]
 801306a:	f7ff bfd3 	b.w	8013014 <_raise_r>
 801306e:	bf00      	nop
 8013070:	20000294 	.word	0x20000294

08013074 <_kill_r>:
 8013074:	b538      	push	{r3, r4, r5, lr}
 8013076:	4d07      	ldr	r5, [pc, #28]	; (8013094 <_kill_r+0x20>)
 8013078:	2300      	movs	r3, #0
 801307a:	4604      	mov	r4, r0
 801307c:	4608      	mov	r0, r1
 801307e:	4611      	mov	r1, r2
 8013080:	602b      	str	r3, [r5, #0]
 8013082:	f7ef f949 	bl	8002318 <_kill>
 8013086:	1c43      	adds	r3, r0, #1
 8013088:	d102      	bne.n	8013090 <_kill_r+0x1c>
 801308a:	682b      	ldr	r3, [r5, #0]
 801308c:	b103      	cbz	r3, 8013090 <_kill_r+0x1c>
 801308e:	6023      	str	r3, [r4, #0]
 8013090:	bd38      	pop	{r3, r4, r5, pc}
 8013092:	bf00      	nop
 8013094:	20000e0c 	.word	0x20000e0c

08013098 <_getpid_r>:
 8013098:	f7ef b936 	b.w	8002308 <_getpid>

0801309c <__sread>:
 801309c:	b510      	push	{r4, lr}
 801309e:	460c      	mov	r4, r1
 80130a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130a4:	f000 f894 	bl	80131d0 <_read_r>
 80130a8:	2800      	cmp	r0, #0
 80130aa:	bfab      	itete	ge
 80130ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80130ae:	89a3      	ldrhlt	r3, [r4, #12]
 80130b0:	181b      	addge	r3, r3, r0
 80130b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80130b6:	bfac      	ite	ge
 80130b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80130ba:	81a3      	strhlt	r3, [r4, #12]
 80130bc:	bd10      	pop	{r4, pc}

080130be <__swrite>:
 80130be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130c2:	461f      	mov	r7, r3
 80130c4:	898b      	ldrh	r3, [r1, #12]
 80130c6:	05db      	lsls	r3, r3, #23
 80130c8:	4605      	mov	r5, r0
 80130ca:	460c      	mov	r4, r1
 80130cc:	4616      	mov	r6, r2
 80130ce:	d505      	bpl.n	80130dc <__swrite+0x1e>
 80130d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130d4:	2302      	movs	r3, #2
 80130d6:	2200      	movs	r2, #0
 80130d8:	f000 f868 	bl	80131ac <_lseek_r>
 80130dc:	89a3      	ldrh	r3, [r4, #12]
 80130de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80130e6:	81a3      	strh	r3, [r4, #12]
 80130e8:	4632      	mov	r2, r6
 80130ea:	463b      	mov	r3, r7
 80130ec:	4628      	mov	r0, r5
 80130ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130f2:	f000 b817 	b.w	8013124 <_write_r>

080130f6 <__sseek>:
 80130f6:	b510      	push	{r4, lr}
 80130f8:	460c      	mov	r4, r1
 80130fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130fe:	f000 f855 	bl	80131ac <_lseek_r>
 8013102:	1c43      	adds	r3, r0, #1
 8013104:	89a3      	ldrh	r3, [r4, #12]
 8013106:	bf15      	itete	ne
 8013108:	6560      	strne	r0, [r4, #84]	; 0x54
 801310a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801310e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013112:	81a3      	strheq	r3, [r4, #12]
 8013114:	bf18      	it	ne
 8013116:	81a3      	strhne	r3, [r4, #12]
 8013118:	bd10      	pop	{r4, pc}

0801311a <__sclose>:
 801311a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801311e:	f000 b813 	b.w	8013148 <_close_r>
	...

08013124 <_write_r>:
 8013124:	b538      	push	{r3, r4, r5, lr}
 8013126:	4d07      	ldr	r5, [pc, #28]	; (8013144 <_write_r+0x20>)
 8013128:	4604      	mov	r4, r0
 801312a:	4608      	mov	r0, r1
 801312c:	4611      	mov	r1, r2
 801312e:	2200      	movs	r2, #0
 8013130:	602a      	str	r2, [r5, #0]
 8013132:	461a      	mov	r2, r3
 8013134:	f7ef f927 	bl	8002386 <_write>
 8013138:	1c43      	adds	r3, r0, #1
 801313a:	d102      	bne.n	8013142 <_write_r+0x1e>
 801313c:	682b      	ldr	r3, [r5, #0]
 801313e:	b103      	cbz	r3, 8013142 <_write_r+0x1e>
 8013140:	6023      	str	r3, [r4, #0]
 8013142:	bd38      	pop	{r3, r4, r5, pc}
 8013144:	20000e0c 	.word	0x20000e0c

08013148 <_close_r>:
 8013148:	b538      	push	{r3, r4, r5, lr}
 801314a:	4d06      	ldr	r5, [pc, #24]	; (8013164 <_close_r+0x1c>)
 801314c:	2300      	movs	r3, #0
 801314e:	4604      	mov	r4, r0
 8013150:	4608      	mov	r0, r1
 8013152:	602b      	str	r3, [r5, #0]
 8013154:	f7ef f933 	bl	80023be <_close>
 8013158:	1c43      	adds	r3, r0, #1
 801315a:	d102      	bne.n	8013162 <_close_r+0x1a>
 801315c:	682b      	ldr	r3, [r5, #0]
 801315e:	b103      	cbz	r3, 8013162 <_close_r+0x1a>
 8013160:	6023      	str	r3, [r4, #0]
 8013162:	bd38      	pop	{r3, r4, r5, pc}
 8013164:	20000e0c 	.word	0x20000e0c

08013168 <_fstat_r>:
 8013168:	b538      	push	{r3, r4, r5, lr}
 801316a:	4d07      	ldr	r5, [pc, #28]	; (8013188 <_fstat_r+0x20>)
 801316c:	2300      	movs	r3, #0
 801316e:	4604      	mov	r4, r0
 8013170:	4608      	mov	r0, r1
 8013172:	4611      	mov	r1, r2
 8013174:	602b      	str	r3, [r5, #0]
 8013176:	f7ef f92e 	bl	80023d6 <_fstat>
 801317a:	1c43      	adds	r3, r0, #1
 801317c:	d102      	bne.n	8013184 <_fstat_r+0x1c>
 801317e:	682b      	ldr	r3, [r5, #0]
 8013180:	b103      	cbz	r3, 8013184 <_fstat_r+0x1c>
 8013182:	6023      	str	r3, [r4, #0]
 8013184:	bd38      	pop	{r3, r4, r5, pc}
 8013186:	bf00      	nop
 8013188:	20000e0c 	.word	0x20000e0c

0801318c <_isatty_r>:
 801318c:	b538      	push	{r3, r4, r5, lr}
 801318e:	4d06      	ldr	r5, [pc, #24]	; (80131a8 <_isatty_r+0x1c>)
 8013190:	2300      	movs	r3, #0
 8013192:	4604      	mov	r4, r0
 8013194:	4608      	mov	r0, r1
 8013196:	602b      	str	r3, [r5, #0]
 8013198:	f7ef f92d 	bl	80023f6 <_isatty>
 801319c:	1c43      	adds	r3, r0, #1
 801319e:	d102      	bne.n	80131a6 <_isatty_r+0x1a>
 80131a0:	682b      	ldr	r3, [r5, #0]
 80131a2:	b103      	cbz	r3, 80131a6 <_isatty_r+0x1a>
 80131a4:	6023      	str	r3, [r4, #0]
 80131a6:	bd38      	pop	{r3, r4, r5, pc}
 80131a8:	20000e0c 	.word	0x20000e0c

080131ac <_lseek_r>:
 80131ac:	b538      	push	{r3, r4, r5, lr}
 80131ae:	4d07      	ldr	r5, [pc, #28]	; (80131cc <_lseek_r+0x20>)
 80131b0:	4604      	mov	r4, r0
 80131b2:	4608      	mov	r0, r1
 80131b4:	4611      	mov	r1, r2
 80131b6:	2200      	movs	r2, #0
 80131b8:	602a      	str	r2, [r5, #0]
 80131ba:	461a      	mov	r2, r3
 80131bc:	f7ef f926 	bl	800240c <_lseek>
 80131c0:	1c43      	adds	r3, r0, #1
 80131c2:	d102      	bne.n	80131ca <_lseek_r+0x1e>
 80131c4:	682b      	ldr	r3, [r5, #0]
 80131c6:	b103      	cbz	r3, 80131ca <_lseek_r+0x1e>
 80131c8:	6023      	str	r3, [r4, #0]
 80131ca:	bd38      	pop	{r3, r4, r5, pc}
 80131cc:	20000e0c 	.word	0x20000e0c

080131d0 <_read_r>:
 80131d0:	b538      	push	{r3, r4, r5, lr}
 80131d2:	4d07      	ldr	r5, [pc, #28]	; (80131f0 <_read_r+0x20>)
 80131d4:	4604      	mov	r4, r0
 80131d6:	4608      	mov	r0, r1
 80131d8:	4611      	mov	r1, r2
 80131da:	2200      	movs	r2, #0
 80131dc:	602a      	str	r2, [r5, #0]
 80131de:	461a      	mov	r2, r3
 80131e0:	f7ef f8b4 	bl	800234c <_read>
 80131e4:	1c43      	adds	r3, r0, #1
 80131e6:	d102      	bne.n	80131ee <_read_r+0x1e>
 80131e8:	682b      	ldr	r3, [r5, #0]
 80131ea:	b103      	cbz	r3, 80131ee <_read_r+0x1e>
 80131ec:	6023      	str	r3, [r4, #0]
 80131ee:	bd38      	pop	{r3, r4, r5, pc}
 80131f0:	20000e0c 	.word	0x20000e0c
 80131f4:	00000000 	.word	0x00000000

080131f8 <atan>:
 80131f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131fc:	ec55 4b10 	vmov	r4, r5, d0
 8013200:	4bc3      	ldr	r3, [pc, #780]	; (8013510 <atan+0x318>)
 8013202:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013206:	429e      	cmp	r6, r3
 8013208:	46ab      	mov	fp, r5
 801320a:	dd18      	ble.n	801323e <atan+0x46>
 801320c:	4bc1      	ldr	r3, [pc, #772]	; (8013514 <atan+0x31c>)
 801320e:	429e      	cmp	r6, r3
 8013210:	dc01      	bgt.n	8013216 <atan+0x1e>
 8013212:	d109      	bne.n	8013228 <atan+0x30>
 8013214:	b144      	cbz	r4, 8013228 <atan+0x30>
 8013216:	4622      	mov	r2, r4
 8013218:	462b      	mov	r3, r5
 801321a:	4620      	mov	r0, r4
 801321c:	4629      	mov	r1, r5
 801321e:	f7ed f82d 	bl	800027c <__adddf3>
 8013222:	4604      	mov	r4, r0
 8013224:	460d      	mov	r5, r1
 8013226:	e006      	b.n	8013236 <atan+0x3e>
 8013228:	f1bb 0f00 	cmp.w	fp, #0
 801322c:	f300 8131 	bgt.w	8013492 <atan+0x29a>
 8013230:	a59b      	add	r5, pc, #620	; (adr r5, 80134a0 <atan+0x2a8>)
 8013232:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013236:	ec45 4b10 	vmov	d0, r4, r5
 801323a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801323e:	4bb6      	ldr	r3, [pc, #728]	; (8013518 <atan+0x320>)
 8013240:	429e      	cmp	r6, r3
 8013242:	dc14      	bgt.n	801326e <atan+0x76>
 8013244:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8013248:	429e      	cmp	r6, r3
 801324a:	dc0d      	bgt.n	8013268 <atan+0x70>
 801324c:	a396      	add	r3, pc, #600	; (adr r3, 80134a8 <atan+0x2b0>)
 801324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013252:	ee10 0a10 	vmov	r0, s0
 8013256:	4629      	mov	r1, r5
 8013258:	f7ed f810 	bl	800027c <__adddf3>
 801325c:	4baf      	ldr	r3, [pc, #700]	; (801351c <atan+0x324>)
 801325e:	2200      	movs	r2, #0
 8013260:	f7ed fc52 	bl	8000b08 <__aeabi_dcmpgt>
 8013264:	2800      	cmp	r0, #0
 8013266:	d1e6      	bne.n	8013236 <atan+0x3e>
 8013268:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801326c:	e02b      	b.n	80132c6 <atan+0xce>
 801326e:	f000 f963 	bl	8013538 <fabs>
 8013272:	4bab      	ldr	r3, [pc, #684]	; (8013520 <atan+0x328>)
 8013274:	429e      	cmp	r6, r3
 8013276:	ec55 4b10 	vmov	r4, r5, d0
 801327a:	f300 80bf 	bgt.w	80133fc <atan+0x204>
 801327e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8013282:	429e      	cmp	r6, r3
 8013284:	f300 80a0 	bgt.w	80133c8 <atan+0x1d0>
 8013288:	ee10 2a10 	vmov	r2, s0
 801328c:	ee10 0a10 	vmov	r0, s0
 8013290:	462b      	mov	r3, r5
 8013292:	4629      	mov	r1, r5
 8013294:	f7ec fff2 	bl	800027c <__adddf3>
 8013298:	4ba0      	ldr	r3, [pc, #640]	; (801351c <atan+0x324>)
 801329a:	2200      	movs	r2, #0
 801329c:	f7ec ffec 	bl	8000278 <__aeabi_dsub>
 80132a0:	2200      	movs	r2, #0
 80132a2:	4606      	mov	r6, r0
 80132a4:	460f      	mov	r7, r1
 80132a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80132aa:	4620      	mov	r0, r4
 80132ac:	4629      	mov	r1, r5
 80132ae:	f7ec ffe5 	bl	800027c <__adddf3>
 80132b2:	4602      	mov	r2, r0
 80132b4:	460b      	mov	r3, r1
 80132b6:	4630      	mov	r0, r6
 80132b8:	4639      	mov	r1, r7
 80132ba:	f7ed fabf 	bl	800083c <__aeabi_ddiv>
 80132be:	f04f 0a00 	mov.w	sl, #0
 80132c2:	4604      	mov	r4, r0
 80132c4:	460d      	mov	r5, r1
 80132c6:	4622      	mov	r2, r4
 80132c8:	462b      	mov	r3, r5
 80132ca:	4620      	mov	r0, r4
 80132cc:	4629      	mov	r1, r5
 80132ce:	f7ed f98b 	bl	80005e8 <__aeabi_dmul>
 80132d2:	4602      	mov	r2, r0
 80132d4:	460b      	mov	r3, r1
 80132d6:	4680      	mov	r8, r0
 80132d8:	4689      	mov	r9, r1
 80132da:	f7ed f985 	bl	80005e8 <__aeabi_dmul>
 80132de:	a374      	add	r3, pc, #464	; (adr r3, 80134b0 <atan+0x2b8>)
 80132e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e4:	4606      	mov	r6, r0
 80132e6:	460f      	mov	r7, r1
 80132e8:	f7ed f97e 	bl	80005e8 <__aeabi_dmul>
 80132ec:	a372      	add	r3, pc, #456	; (adr r3, 80134b8 <atan+0x2c0>)
 80132ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f2:	f7ec ffc3 	bl	800027c <__adddf3>
 80132f6:	4632      	mov	r2, r6
 80132f8:	463b      	mov	r3, r7
 80132fa:	f7ed f975 	bl	80005e8 <__aeabi_dmul>
 80132fe:	a370      	add	r3, pc, #448	; (adr r3, 80134c0 <atan+0x2c8>)
 8013300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013304:	f7ec ffba 	bl	800027c <__adddf3>
 8013308:	4632      	mov	r2, r6
 801330a:	463b      	mov	r3, r7
 801330c:	f7ed f96c 	bl	80005e8 <__aeabi_dmul>
 8013310:	a36d      	add	r3, pc, #436	; (adr r3, 80134c8 <atan+0x2d0>)
 8013312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013316:	f7ec ffb1 	bl	800027c <__adddf3>
 801331a:	4632      	mov	r2, r6
 801331c:	463b      	mov	r3, r7
 801331e:	f7ed f963 	bl	80005e8 <__aeabi_dmul>
 8013322:	a36b      	add	r3, pc, #428	; (adr r3, 80134d0 <atan+0x2d8>)
 8013324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013328:	f7ec ffa8 	bl	800027c <__adddf3>
 801332c:	4632      	mov	r2, r6
 801332e:	463b      	mov	r3, r7
 8013330:	f7ed f95a 	bl	80005e8 <__aeabi_dmul>
 8013334:	a368      	add	r3, pc, #416	; (adr r3, 80134d8 <atan+0x2e0>)
 8013336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333a:	f7ec ff9f 	bl	800027c <__adddf3>
 801333e:	4642      	mov	r2, r8
 8013340:	464b      	mov	r3, r9
 8013342:	f7ed f951 	bl	80005e8 <__aeabi_dmul>
 8013346:	a366      	add	r3, pc, #408	; (adr r3, 80134e0 <atan+0x2e8>)
 8013348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334c:	4680      	mov	r8, r0
 801334e:	4689      	mov	r9, r1
 8013350:	4630      	mov	r0, r6
 8013352:	4639      	mov	r1, r7
 8013354:	f7ed f948 	bl	80005e8 <__aeabi_dmul>
 8013358:	a363      	add	r3, pc, #396	; (adr r3, 80134e8 <atan+0x2f0>)
 801335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801335e:	f7ec ff8b 	bl	8000278 <__aeabi_dsub>
 8013362:	4632      	mov	r2, r6
 8013364:	463b      	mov	r3, r7
 8013366:	f7ed f93f 	bl	80005e8 <__aeabi_dmul>
 801336a:	a361      	add	r3, pc, #388	; (adr r3, 80134f0 <atan+0x2f8>)
 801336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013370:	f7ec ff82 	bl	8000278 <__aeabi_dsub>
 8013374:	4632      	mov	r2, r6
 8013376:	463b      	mov	r3, r7
 8013378:	f7ed f936 	bl	80005e8 <__aeabi_dmul>
 801337c:	a35e      	add	r3, pc, #376	; (adr r3, 80134f8 <atan+0x300>)
 801337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013382:	f7ec ff79 	bl	8000278 <__aeabi_dsub>
 8013386:	4632      	mov	r2, r6
 8013388:	463b      	mov	r3, r7
 801338a:	f7ed f92d 	bl	80005e8 <__aeabi_dmul>
 801338e:	a35c      	add	r3, pc, #368	; (adr r3, 8013500 <atan+0x308>)
 8013390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013394:	f7ec ff70 	bl	8000278 <__aeabi_dsub>
 8013398:	4632      	mov	r2, r6
 801339a:	463b      	mov	r3, r7
 801339c:	f7ed f924 	bl	80005e8 <__aeabi_dmul>
 80133a0:	4602      	mov	r2, r0
 80133a2:	460b      	mov	r3, r1
 80133a4:	4640      	mov	r0, r8
 80133a6:	4649      	mov	r1, r9
 80133a8:	f7ec ff68 	bl	800027c <__adddf3>
 80133ac:	4622      	mov	r2, r4
 80133ae:	462b      	mov	r3, r5
 80133b0:	f7ed f91a 	bl	80005e8 <__aeabi_dmul>
 80133b4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80133b8:	4602      	mov	r2, r0
 80133ba:	460b      	mov	r3, r1
 80133bc:	d14b      	bne.n	8013456 <atan+0x25e>
 80133be:	4620      	mov	r0, r4
 80133c0:	4629      	mov	r1, r5
 80133c2:	f7ec ff59 	bl	8000278 <__aeabi_dsub>
 80133c6:	e72c      	b.n	8013222 <atan+0x2a>
 80133c8:	ee10 0a10 	vmov	r0, s0
 80133cc:	4b53      	ldr	r3, [pc, #332]	; (801351c <atan+0x324>)
 80133ce:	2200      	movs	r2, #0
 80133d0:	4629      	mov	r1, r5
 80133d2:	f7ec ff51 	bl	8000278 <__aeabi_dsub>
 80133d6:	4b51      	ldr	r3, [pc, #324]	; (801351c <atan+0x324>)
 80133d8:	4606      	mov	r6, r0
 80133da:	460f      	mov	r7, r1
 80133dc:	2200      	movs	r2, #0
 80133de:	4620      	mov	r0, r4
 80133e0:	4629      	mov	r1, r5
 80133e2:	f7ec ff4b 	bl	800027c <__adddf3>
 80133e6:	4602      	mov	r2, r0
 80133e8:	460b      	mov	r3, r1
 80133ea:	4630      	mov	r0, r6
 80133ec:	4639      	mov	r1, r7
 80133ee:	f7ed fa25 	bl	800083c <__aeabi_ddiv>
 80133f2:	f04f 0a01 	mov.w	sl, #1
 80133f6:	4604      	mov	r4, r0
 80133f8:	460d      	mov	r5, r1
 80133fa:	e764      	b.n	80132c6 <atan+0xce>
 80133fc:	4b49      	ldr	r3, [pc, #292]	; (8013524 <atan+0x32c>)
 80133fe:	429e      	cmp	r6, r3
 8013400:	da1d      	bge.n	801343e <atan+0x246>
 8013402:	ee10 0a10 	vmov	r0, s0
 8013406:	4b48      	ldr	r3, [pc, #288]	; (8013528 <atan+0x330>)
 8013408:	2200      	movs	r2, #0
 801340a:	4629      	mov	r1, r5
 801340c:	f7ec ff34 	bl	8000278 <__aeabi_dsub>
 8013410:	4b45      	ldr	r3, [pc, #276]	; (8013528 <atan+0x330>)
 8013412:	4606      	mov	r6, r0
 8013414:	460f      	mov	r7, r1
 8013416:	2200      	movs	r2, #0
 8013418:	4620      	mov	r0, r4
 801341a:	4629      	mov	r1, r5
 801341c:	f7ed f8e4 	bl	80005e8 <__aeabi_dmul>
 8013420:	4b3e      	ldr	r3, [pc, #248]	; (801351c <atan+0x324>)
 8013422:	2200      	movs	r2, #0
 8013424:	f7ec ff2a 	bl	800027c <__adddf3>
 8013428:	4602      	mov	r2, r0
 801342a:	460b      	mov	r3, r1
 801342c:	4630      	mov	r0, r6
 801342e:	4639      	mov	r1, r7
 8013430:	f7ed fa04 	bl	800083c <__aeabi_ddiv>
 8013434:	f04f 0a02 	mov.w	sl, #2
 8013438:	4604      	mov	r4, r0
 801343a:	460d      	mov	r5, r1
 801343c:	e743      	b.n	80132c6 <atan+0xce>
 801343e:	462b      	mov	r3, r5
 8013440:	ee10 2a10 	vmov	r2, s0
 8013444:	4939      	ldr	r1, [pc, #228]	; (801352c <atan+0x334>)
 8013446:	2000      	movs	r0, #0
 8013448:	f7ed f9f8 	bl	800083c <__aeabi_ddiv>
 801344c:	f04f 0a03 	mov.w	sl, #3
 8013450:	4604      	mov	r4, r0
 8013452:	460d      	mov	r5, r1
 8013454:	e737      	b.n	80132c6 <atan+0xce>
 8013456:	4b36      	ldr	r3, [pc, #216]	; (8013530 <atan+0x338>)
 8013458:	4e36      	ldr	r6, [pc, #216]	; (8013534 <atan+0x33c>)
 801345a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801345e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8013462:	e9da 2300 	ldrd	r2, r3, [sl]
 8013466:	f7ec ff07 	bl	8000278 <__aeabi_dsub>
 801346a:	4622      	mov	r2, r4
 801346c:	462b      	mov	r3, r5
 801346e:	f7ec ff03 	bl	8000278 <__aeabi_dsub>
 8013472:	4602      	mov	r2, r0
 8013474:	460b      	mov	r3, r1
 8013476:	e9d6 0100 	ldrd	r0, r1, [r6]
 801347a:	f7ec fefd 	bl	8000278 <__aeabi_dsub>
 801347e:	f1bb 0f00 	cmp.w	fp, #0
 8013482:	4604      	mov	r4, r0
 8013484:	460d      	mov	r5, r1
 8013486:	f6bf aed6 	bge.w	8013236 <atan+0x3e>
 801348a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801348e:	461d      	mov	r5, r3
 8013490:	e6d1      	b.n	8013236 <atan+0x3e>
 8013492:	a51d      	add	r5, pc, #116	; (adr r5, 8013508 <atan+0x310>)
 8013494:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013498:	e6cd      	b.n	8013236 <atan+0x3e>
 801349a:	bf00      	nop
 801349c:	f3af 8000 	nop.w
 80134a0:	54442d18 	.word	0x54442d18
 80134a4:	bff921fb 	.word	0xbff921fb
 80134a8:	8800759c 	.word	0x8800759c
 80134ac:	7e37e43c 	.word	0x7e37e43c
 80134b0:	e322da11 	.word	0xe322da11
 80134b4:	3f90ad3a 	.word	0x3f90ad3a
 80134b8:	24760deb 	.word	0x24760deb
 80134bc:	3fa97b4b 	.word	0x3fa97b4b
 80134c0:	a0d03d51 	.word	0xa0d03d51
 80134c4:	3fb10d66 	.word	0x3fb10d66
 80134c8:	c54c206e 	.word	0xc54c206e
 80134cc:	3fb745cd 	.word	0x3fb745cd
 80134d0:	920083ff 	.word	0x920083ff
 80134d4:	3fc24924 	.word	0x3fc24924
 80134d8:	5555550d 	.word	0x5555550d
 80134dc:	3fd55555 	.word	0x3fd55555
 80134e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80134e4:	bfa2b444 	.word	0xbfa2b444
 80134e8:	52defd9a 	.word	0x52defd9a
 80134ec:	3fadde2d 	.word	0x3fadde2d
 80134f0:	af749a6d 	.word	0xaf749a6d
 80134f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80134f8:	fe231671 	.word	0xfe231671
 80134fc:	3fbc71c6 	.word	0x3fbc71c6
 8013500:	9998ebc4 	.word	0x9998ebc4
 8013504:	3fc99999 	.word	0x3fc99999
 8013508:	54442d18 	.word	0x54442d18
 801350c:	3ff921fb 	.word	0x3ff921fb
 8013510:	440fffff 	.word	0x440fffff
 8013514:	7ff00000 	.word	0x7ff00000
 8013518:	3fdbffff 	.word	0x3fdbffff
 801351c:	3ff00000 	.word	0x3ff00000
 8013520:	3ff2ffff 	.word	0x3ff2ffff
 8013524:	40038000 	.word	0x40038000
 8013528:	3ff80000 	.word	0x3ff80000
 801352c:	bff00000 	.word	0xbff00000
 8013530:	080142e8 	.word	0x080142e8
 8013534:	080142c8 	.word	0x080142c8

08013538 <fabs>:
 8013538:	ec51 0b10 	vmov	r0, r1, d0
 801353c:	ee10 2a10 	vmov	r2, s0
 8013540:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013544:	ec43 2b10 	vmov	d0, r2, r3
 8013548:	4770      	bx	lr

0801354a <atan2>:
 801354a:	f000 b835 	b.w	80135b8 <__ieee754_atan2>
	...

08013550 <sqrt>:
 8013550:	b538      	push	{r3, r4, r5, lr}
 8013552:	ed2d 8b02 	vpush	{d8}
 8013556:	ec55 4b10 	vmov	r4, r5, d0
 801355a:	f000 f8f7 	bl	801374c <__ieee754_sqrt>
 801355e:	4b15      	ldr	r3, [pc, #84]	; (80135b4 <sqrt+0x64>)
 8013560:	eeb0 8a40 	vmov.f32	s16, s0
 8013564:	eef0 8a60 	vmov.f32	s17, s1
 8013568:	f993 3000 	ldrsb.w	r3, [r3]
 801356c:	3301      	adds	r3, #1
 801356e:	d019      	beq.n	80135a4 <sqrt+0x54>
 8013570:	4622      	mov	r2, r4
 8013572:	462b      	mov	r3, r5
 8013574:	4620      	mov	r0, r4
 8013576:	4629      	mov	r1, r5
 8013578:	f7ed fad0 	bl	8000b1c <__aeabi_dcmpun>
 801357c:	b990      	cbnz	r0, 80135a4 <sqrt+0x54>
 801357e:	2200      	movs	r2, #0
 8013580:	2300      	movs	r3, #0
 8013582:	4620      	mov	r0, r4
 8013584:	4629      	mov	r1, r5
 8013586:	f7ed faa1 	bl	8000acc <__aeabi_dcmplt>
 801358a:	b158      	cbz	r0, 80135a4 <sqrt+0x54>
 801358c:	f7fd fa48 	bl	8010a20 <__errno>
 8013590:	2321      	movs	r3, #33	; 0x21
 8013592:	6003      	str	r3, [r0, #0]
 8013594:	2200      	movs	r2, #0
 8013596:	2300      	movs	r3, #0
 8013598:	4610      	mov	r0, r2
 801359a:	4619      	mov	r1, r3
 801359c:	f7ed f94e 	bl	800083c <__aeabi_ddiv>
 80135a0:	ec41 0b18 	vmov	d8, r0, r1
 80135a4:	eeb0 0a48 	vmov.f32	s0, s16
 80135a8:	eef0 0a68 	vmov.f32	s1, s17
 80135ac:	ecbd 8b02 	vpop	{d8}
 80135b0:	bd38      	pop	{r3, r4, r5, pc}
 80135b2:	bf00      	nop
 80135b4:	200002f8 	.word	0x200002f8

080135b8 <__ieee754_atan2>:
 80135b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135bc:	ec57 6b11 	vmov	r6, r7, d1
 80135c0:	4273      	negs	r3, r6
 80135c2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8013748 <__ieee754_atan2+0x190>
 80135c6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80135ca:	4333      	orrs	r3, r6
 80135cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80135d0:	4573      	cmp	r3, lr
 80135d2:	ec51 0b10 	vmov	r0, r1, d0
 80135d6:	ee11 8a10 	vmov	r8, s2
 80135da:	d80a      	bhi.n	80135f2 <__ieee754_atan2+0x3a>
 80135dc:	4244      	negs	r4, r0
 80135de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80135e2:	4304      	orrs	r4, r0
 80135e4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80135e8:	4574      	cmp	r4, lr
 80135ea:	ee10 9a10 	vmov	r9, s0
 80135ee:	468c      	mov	ip, r1
 80135f0:	d907      	bls.n	8013602 <__ieee754_atan2+0x4a>
 80135f2:	4632      	mov	r2, r6
 80135f4:	463b      	mov	r3, r7
 80135f6:	f7ec fe41 	bl	800027c <__adddf3>
 80135fa:	ec41 0b10 	vmov	d0, r0, r1
 80135fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013602:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8013606:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801360a:	4334      	orrs	r4, r6
 801360c:	d103      	bne.n	8013616 <__ieee754_atan2+0x5e>
 801360e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013612:	f7ff bdf1 	b.w	80131f8 <atan>
 8013616:	17bc      	asrs	r4, r7, #30
 8013618:	f004 0402 	and.w	r4, r4, #2
 801361c:	ea53 0909 	orrs.w	r9, r3, r9
 8013620:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013624:	d107      	bne.n	8013636 <__ieee754_atan2+0x7e>
 8013626:	2c02      	cmp	r4, #2
 8013628:	d060      	beq.n	80136ec <__ieee754_atan2+0x134>
 801362a:	2c03      	cmp	r4, #3
 801362c:	d1e5      	bne.n	80135fa <__ieee754_atan2+0x42>
 801362e:	a142      	add	r1, pc, #264	; (adr r1, 8013738 <__ieee754_atan2+0x180>)
 8013630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013634:	e7e1      	b.n	80135fa <__ieee754_atan2+0x42>
 8013636:	ea52 0808 	orrs.w	r8, r2, r8
 801363a:	d106      	bne.n	801364a <__ieee754_atan2+0x92>
 801363c:	f1bc 0f00 	cmp.w	ip, #0
 8013640:	da5f      	bge.n	8013702 <__ieee754_atan2+0x14a>
 8013642:	a13f      	add	r1, pc, #252	; (adr r1, 8013740 <__ieee754_atan2+0x188>)
 8013644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013648:	e7d7      	b.n	80135fa <__ieee754_atan2+0x42>
 801364a:	4572      	cmp	r2, lr
 801364c:	d10f      	bne.n	801366e <__ieee754_atan2+0xb6>
 801364e:	4293      	cmp	r3, r2
 8013650:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8013654:	d107      	bne.n	8013666 <__ieee754_atan2+0xae>
 8013656:	2c02      	cmp	r4, #2
 8013658:	d84c      	bhi.n	80136f4 <__ieee754_atan2+0x13c>
 801365a:	4b35      	ldr	r3, [pc, #212]	; (8013730 <__ieee754_atan2+0x178>)
 801365c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013660:	e9d4 0100 	ldrd	r0, r1, [r4]
 8013664:	e7c9      	b.n	80135fa <__ieee754_atan2+0x42>
 8013666:	2c02      	cmp	r4, #2
 8013668:	d848      	bhi.n	80136fc <__ieee754_atan2+0x144>
 801366a:	4b32      	ldr	r3, [pc, #200]	; (8013734 <__ieee754_atan2+0x17c>)
 801366c:	e7f6      	b.n	801365c <__ieee754_atan2+0xa4>
 801366e:	4573      	cmp	r3, lr
 8013670:	d0e4      	beq.n	801363c <__ieee754_atan2+0x84>
 8013672:	1a9b      	subs	r3, r3, r2
 8013674:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8013678:	ea4f 5223 	mov.w	r2, r3, asr #20
 801367c:	da1e      	bge.n	80136bc <__ieee754_atan2+0x104>
 801367e:	2f00      	cmp	r7, #0
 8013680:	da01      	bge.n	8013686 <__ieee754_atan2+0xce>
 8013682:	323c      	adds	r2, #60	; 0x3c
 8013684:	db1e      	blt.n	80136c4 <__ieee754_atan2+0x10c>
 8013686:	4632      	mov	r2, r6
 8013688:	463b      	mov	r3, r7
 801368a:	f7ed f8d7 	bl	800083c <__aeabi_ddiv>
 801368e:	ec41 0b10 	vmov	d0, r0, r1
 8013692:	f7ff ff51 	bl	8013538 <fabs>
 8013696:	f7ff fdaf 	bl	80131f8 <atan>
 801369a:	ec51 0b10 	vmov	r0, r1, d0
 801369e:	2c01      	cmp	r4, #1
 80136a0:	d013      	beq.n	80136ca <__ieee754_atan2+0x112>
 80136a2:	2c02      	cmp	r4, #2
 80136a4:	d015      	beq.n	80136d2 <__ieee754_atan2+0x11a>
 80136a6:	2c00      	cmp	r4, #0
 80136a8:	d0a7      	beq.n	80135fa <__ieee754_atan2+0x42>
 80136aa:	a319      	add	r3, pc, #100	; (adr r3, 8013710 <__ieee754_atan2+0x158>)
 80136ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b0:	f7ec fde2 	bl	8000278 <__aeabi_dsub>
 80136b4:	a318      	add	r3, pc, #96	; (adr r3, 8013718 <__ieee754_atan2+0x160>)
 80136b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ba:	e014      	b.n	80136e6 <__ieee754_atan2+0x12e>
 80136bc:	a118      	add	r1, pc, #96	; (adr r1, 8013720 <__ieee754_atan2+0x168>)
 80136be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136c2:	e7ec      	b.n	801369e <__ieee754_atan2+0xe6>
 80136c4:	2000      	movs	r0, #0
 80136c6:	2100      	movs	r1, #0
 80136c8:	e7e9      	b.n	801369e <__ieee754_atan2+0xe6>
 80136ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80136ce:	4619      	mov	r1, r3
 80136d0:	e793      	b.n	80135fa <__ieee754_atan2+0x42>
 80136d2:	a30f      	add	r3, pc, #60	; (adr r3, 8013710 <__ieee754_atan2+0x158>)
 80136d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136d8:	f7ec fdce 	bl	8000278 <__aeabi_dsub>
 80136dc:	4602      	mov	r2, r0
 80136de:	460b      	mov	r3, r1
 80136e0:	a10d      	add	r1, pc, #52	; (adr r1, 8013718 <__ieee754_atan2+0x160>)
 80136e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136e6:	f7ec fdc7 	bl	8000278 <__aeabi_dsub>
 80136ea:	e786      	b.n	80135fa <__ieee754_atan2+0x42>
 80136ec:	a10a      	add	r1, pc, #40	; (adr r1, 8013718 <__ieee754_atan2+0x160>)
 80136ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136f2:	e782      	b.n	80135fa <__ieee754_atan2+0x42>
 80136f4:	a10c      	add	r1, pc, #48	; (adr r1, 8013728 <__ieee754_atan2+0x170>)
 80136f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136fa:	e77e      	b.n	80135fa <__ieee754_atan2+0x42>
 80136fc:	2000      	movs	r0, #0
 80136fe:	2100      	movs	r1, #0
 8013700:	e77b      	b.n	80135fa <__ieee754_atan2+0x42>
 8013702:	a107      	add	r1, pc, #28	; (adr r1, 8013720 <__ieee754_atan2+0x168>)
 8013704:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013708:	e777      	b.n	80135fa <__ieee754_atan2+0x42>
 801370a:	bf00      	nop
 801370c:	f3af 8000 	nop.w
 8013710:	33145c07 	.word	0x33145c07
 8013714:	3ca1a626 	.word	0x3ca1a626
 8013718:	54442d18 	.word	0x54442d18
 801371c:	400921fb 	.word	0x400921fb
 8013720:	54442d18 	.word	0x54442d18
 8013724:	3ff921fb 	.word	0x3ff921fb
 8013728:	54442d18 	.word	0x54442d18
 801372c:	3fe921fb 	.word	0x3fe921fb
 8013730:	08014308 	.word	0x08014308
 8013734:	08014320 	.word	0x08014320
 8013738:	54442d18 	.word	0x54442d18
 801373c:	c00921fb 	.word	0xc00921fb
 8013740:	54442d18 	.word	0x54442d18
 8013744:	bff921fb 	.word	0xbff921fb
 8013748:	7ff00000 	.word	0x7ff00000

0801374c <__ieee754_sqrt>:
 801374c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013750:	ec55 4b10 	vmov	r4, r5, d0
 8013754:	4e56      	ldr	r6, [pc, #344]	; (80138b0 <__ieee754_sqrt+0x164>)
 8013756:	43ae      	bics	r6, r5
 8013758:	ee10 0a10 	vmov	r0, s0
 801375c:	ee10 3a10 	vmov	r3, s0
 8013760:	4629      	mov	r1, r5
 8013762:	462a      	mov	r2, r5
 8013764:	d110      	bne.n	8013788 <__ieee754_sqrt+0x3c>
 8013766:	ee10 2a10 	vmov	r2, s0
 801376a:	462b      	mov	r3, r5
 801376c:	f7ec ff3c 	bl	80005e8 <__aeabi_dmul>
 8013770:	4602      	mov	r2, r0
 8013772:	460b      	mov	r3, r1
 8013774:	4620      	mov	r0, r4
 8013776:	4629      	mov	r1, r5
 8013778:	f7ec fd80 	bl	800027c <__adddf3>
 801377c:	4604      	mov	r4, r0
 801377e:	460d      	mov	r5, r1
 8013780:	ec45 4b10 	vmov	d0, r4, r5
 8013784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013788:	2d00      	cmp	r5, #0
 801378a:	dc10      	bgt.n	80137ae <__ieee754_sqrt+0x62>
 801378c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013790:	4330      	orrs	r0, r6
 8013792:	d0f5      	beq.n	8013780 <__ieee754_sqrt+0x34>
 8013794:	b15d      	cbz	r5, 80137ae <__ieee754_sqrt+0x62>
 8013796:	ee10 2a10 	vmov	r2, s0
 801379a:	462b      	mov	r3, r5
 801379c:	ee10 0a10 	vmov	r0, s0
 80137a0:	f7ec fd6a 	bl	8000278 <__aeabi_dsub>
 80137a4:	4602      	mov	r2, r0
 80137a6:	460b      	mov	r3, r1
 80137a8:	f7ed f848 	bl	800083c <__aeabi_ddiv>
 80137ac:	e7e6      	b.n	801377c <__ieee754_sqrt+0x30>
 80137ae:	1509      	asrs	r1, r1, #20
 80137b0:	d076      	beq.n	80138a0 <__ieee754_sqrt+0x154>
 80137b2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80137b6:	07ce      	lsls	r6, r1, #31
 80137b8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80137bc:	bf5e      	ittt	pl
 80137be:	0fda      	lsrpl	r2, r3, #31
 80137c0:	005b      	lslpl	r3, r3, #1
 80137c2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80137c6:	0fda      	lsrs	r2, r3, #31
 80137c8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80137cc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80137d0:	2000      	movs	r0, #0
 80137d2:	106d      	asrs	r5, r5, #1
 80137d4:	005b      	lsls	r3, r3, #1
 80137d6:	f04f 0e16 	mov.w	lr, #22
 80137da:	4684      	mov	ip, r0
 80137dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80137e0:	eb0c 0401 	add.w	r4, ip, r1
 80137e4:	4294      	cmp	r4, r2
 80137e6:	bfde      	ittt	le
 80137e8:	1b12      	suble	r2, r2, r4
 80137ea:	eb04 0c01 	addle.w	ip, r4, r1
 80137ee:	1840      	addle	r0, r0, r1
 80137f0:	0052      	lsls	r2, r2, #1
 80137f2:	f1be 0e01 	subs.w	lr, lr, #1
 80137f6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80137fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80137fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013802:	d1ed      	bne.n	80137e0 <__ieee754_sqrt+0x94>
 8013804:	4671      	mov	r1, lr
 8013806:	2720      	movs	r7, #32
 8013808:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801380c:	4562      	cmp	r2, ip
 801380e:	eb04 060e 	add.w	r6, r4, lr
 8013812:	dc02      	bgt.n	801381a <__ieee754_sqrt+0xce>
 8013814:	d113      	bne.n	801383e <__ieee754_sqrt+0xf2>
 8013816:	429e      	cmp	r6, r3
 8013818:	d811      	bhi.n	801383e <__ieee754_sqrt+0xf2>
 801381a:	2e00      	cmp	r6, #0
 801381c:	eb06 0e04 	add.w	lr, r6, r4
 8013820:	da43      	bge.n	80138aa <__ieee754_sqrt+0x15e>
 8013822:	f1be 0f00 	cmp.w	lr, #0
 8013826:	db40      	blt.n	80138aa <__ieee754_sqrt+0x15e>
 8013828:	f10c 0801 	add.w	r8, ip, #1
 801382c:	eba2 020c 	sub.w	r2, r2, ip
 8013830:	429e      	cmp	r6, r3
 8013832:	bf88      	it	hi
 8013834:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8013838:	1b9b      	subs	r3, r3, r6
 801383a:	4421      	add	r1, r4
 801383c:	46c4      	mov	ip, r8
 801383e:	0052      	lsls	r2, r2, #1
 8013840:	3f01      	subs	r7, #1
 8013842:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8013846:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801384a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801384e:	d1dd      	bne.n	801380c <__ieee754_sqrt+0xc0>
 8013850:	4313      	orrs	r3, r2
 8013852:	d006      	beq.n	8013862 <__ieee754_sqrt+0x116>
 8013854:	1c4c      	adds	r4, r1, #1
 8013856:	bf13      	iteet	ne
 8013858:	3101      	addne	r1, #1
 801385a:	3001      	addeq	r0, #1
 801385c:	4639      	moveq	r1, r7
 801385e:	f021 0101 	bicne.w	r1, r1, #1
 8013862:	1043      	asrs	r3, r0, #1
 8013864:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013868:	0849      	lsrs	r1, r1, #1
 801386a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801386e:	07c2      	lsls	r2, r0, #31
 8013870:	bf48      	it	mi
 8013872:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8013876:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801387a:	460c      	mov	r4, r1
 801387c:	463d      	mov	r5, r7
 801387e:	e77f      	b.n	8013780 <__ieee754_sqrt+0x34>
 8013880:	0ada      	lsrs	r2, r3, #11
 8013882:	3815      	subs	r0, #21
 8013884:	055b      	lsls	r3, r3, #21
 8013886:	2a00      	cmp	r2, #0
 8013888:	d0fa      	beq.n	8013880 <__ieee754_sqrt+0x134>
 801388a:	02d7      	lsls	r7, r2, #11
 801388c:	d50a      	bpl.n	80138a4 <__ieee754_sqrt+0x158>
 801388e:	f1c1 0420 	rsb	r4, r1, #32
 8013892:	fa23 f404 	lsr.w	r4, r3, r4
 8013896:	1e4d      	subs	r5, r1, #1
 8013898:	408b      	lsls	r3, r1
 801389a:	4322      	orrs	r2, r4
 801389c:	1b41      	subs	r1, r0, r5
 801389e:	e788      	b.n	80137b2 <__ieee754_sqrt+0x66>
 80138a0:	4608      	mov	r0, r1
 80138a2:	e7f0      	b.n	8013886 <__ieee754_sqrt+0x13a>
 80138a4:	0052      	lsls	r2, r2, #1
 80138a6:	3101      	adds	r1, #1
 80138a8:	e7ef      	b.n	801388a <__ieee754_sqrt+0x13e>
 80138aa:	46e0      	mov	r8, ip
 80138ac:	e7be      	b.n	801382c <__ieee754_sqrt+0xe0>
 80138ae:	bf00      	nop
 80138b0:	7ff00000 	.word	0x7ff00000

080138b4 <_init>:
 80138b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138b6:	bf00      	nop
 80138b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138ba:	bc08      	pop	{r3}
 80138bc:	469e      	mov	lr, r3
 80138be:	4770      	bx	lr

080138c0 <_fini>:
 80138c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138c2:	bf00      	nop
 80138c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138c6:	bc08      	pop	{r3}
 80138c8:	469e      	mov	lr, r3
 80138ca:	4770      	bx	lr
