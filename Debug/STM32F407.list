
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f58  08002f58  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f60  08002f60  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f60  08002f60  00012f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000010  08002f78  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002f78  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c73f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0d  00000000  00000000  0002c77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002e590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002efe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000226a  00000000  00000000  0002f970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e15e  00000000  00000000  00031bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c57d3  00000000  00000000  0003fd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010550b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029fc  00000000  00000000  00105560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f28 	.word	0x08002f28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002f28 	.word	0x08002f28

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f001 f8e3 	bl	8001690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f81f 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f935 	bl	800073c <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d2:	f000 f8c7 	bl	8000664 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004d6:	f000 f8fb 	bl	80006d0 <MX_SPI2_Init>
  MX_RNG_Init();
 80004da:	f000 f8af 	bl	800063c <MX_RNG_Init>
  MX_I2C2_Init();
 80004de:	f000 f87f 	bl	80005e0 <MX_I2C2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80004e2:	f000 fdcd 	bl	8001080 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80004e6:	2000      	movs	r0, #0
 80004e8:	f000 ff70 	bl	80013cc <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 80004ec:	2003      	movs	r0, #3
 80004ee:	f000 fd69 	bl	8000fc4 <ILI9341_Set_Rotation>

  ILI9341_Fill_Screen(BLACK);
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 ff6a 	bl	80013cc <ILI9341_Fill_Screen>
  int number_of_tests = 150;
 80004f8:	2396      	movs	r3, #150	; 0x96
 80004fa:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f001 f853 	bl	80015a8 <speed_test_LCD>
  ILI9341_Fill_Screen(BLACK);
 8000502:	2000      	movs	r0, #0
 8000504:	f000 ff62 	bl	80013cc <ILI9341_Fill_Screen>


  while (1)
 8000508:	e7fe      	b.n	8000508 <main+0x48>
	...

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f002 fcfc 	bl	8002f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a27      	ldr	r2, [pc, #156]	; (80005d8 <SystemClock_Config+0xcc>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <SystemClock_Config+0xd0>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000568:	2301      	movs	r3, #1
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057c:	2308      	movs	r3, #8
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000580:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058a:	2307      	movs	r3, #7
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	4618      	mov	r0, r3
 8000594:	f001 fd1e 	bl	8001fd4 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059e:	f000 fa45 	bl	8000a2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2302      	movs	r3, #2
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2105      	movs	r1, #5
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 ff7f 	bl	80024c4 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005cc:	f000 fa2e 	bl	8000a2c <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3750      	adds	r7, #80	; 0x50
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_I2C2_Init+0x50>)
 80005e6:	4a13      	ldr	r2, [pc, #76]	; (8000634 <MX_I2C2_Init+0x54>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_I2C2_Init+0x50>)
 80005ec:	4a12      	ldr	r2, [pc, #72]	; (8000638 <MX_I2C2_Init+0x58>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_I2C2_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_I2C2_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_I2C2_Init+0x50>)
 80005fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000602:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <MX_I2C2_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_I2C2_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <MX_I2C2_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_I2C2_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_I2C2_Init+0x50>)
 800061e:	f001 fb95 	bl	8001d4c <HAL_I2C_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000628:	f000 fa00 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000084 	.word	0x20000084
 8000634:	40005800 	.word	0x40005800
 8000638:	000186a0 	.word	0x000186a0

0800063c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_RNG_Init+0x20>)
 8000642:	4a07      	ldr	r2, [pc, #28]	; (8000660 <MX_RNG_Init+0x24>)
 8000644:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_RNG_Init+0x20>)
 8000648:	f002 f924 	bl	8002894 <HAL_RNG_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000652:	f000 f9eb 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	200000d8 	.word	0x200000d8
 8000660:	50060800 	.word	0x50060800

08000664 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000668:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_SPI1_Init+0x64>)
 800066a:	4a18      	ldr	r2, [pc, #96]	; (80006cc <MX_SPI1_Init+0x68>)
 800066c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_SPI1_Init+0x64>)
 8000670:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000674:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_SPI1_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_SPI1_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_SPI1_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_SPI1_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_SPI1_Init+0x64>)
 8000690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000694:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_SPI1_Init+0x64>)
 8000698:	2228      	movs	r2, #40	; 0x28
 800069a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_SPI1_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_SPI1_Init+0x64>)
 80006b0:	220a      	movs	r2, #10
 80006b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_SPI1_Init+0x64>)
 80006b6:	f002 f97b 	bl	80029b0 <HAL_SPI_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006c0:	f000 f9b4 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200000e8 	.word	0x200000e8
 80006cc:	40013000 	.word	0x40013000

080006d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_SPI2_Init+0x64>)
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <MX_SPI2_Init+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_SPI2_Init+0x64>)
 80006dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_SPI2_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_SPI2_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_SPI2_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_SPI2_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_SPI2_Init+0x64>)
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_SPI2_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_SPI2_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_SPI2_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_SPI2_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_SPI2_Init+0x64>)
 800071c:	220a      	movs	r2, #10
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_SPI2_Init+0x64>)
 8000722:	f002 f945 	bl	80029b0 <HAL_SPI_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800072c:	f000 f97e 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000002c 	.word	0x2000002c
 8000738:	40003800 	.word	0x40003800

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
 8000756:	4bae      	ldr	r3, [pc, #696]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4aad      	ldr	r2, [pc, #692]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 800075c:	f043 0310 	orr.w	r3, r3, #16
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4bab      	ldr	r3, [pc, #684]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0310 	and.w	r3, r3, #16
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	4ba7      	ldr	r3, [pc, #668]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4aa6      	ldr	r2, [pc, #664]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4ba4      	ldr	r3, [pc, #656]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4ba0      	ldr	r3, [pc, #640]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a9f      	ldr	r2, [pc, #636]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b9d      	ldr	r3, [pc, #628]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b99      	ldr	r3, [pc, #612]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a98      	ldr	r2, [pc, #608]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b96      	ldr	r3, [pc, #600]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b92      	ldr	r3, [pc, #584]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a91      	ldr	r2, [pc, #580]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b8f      	ldr	r3, [pc, #572]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b8b      	ldr	r3, [pc, #556]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a8a      	ldr	r2, [pc, #552]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b88      	ldr	r3, [pc, #544]	; (8000a10 <MX_GPIO_Init+0x2d4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 80007fa:	2200      	movs	r2, #0
 80007fc:	217c      	movs	r1, #124	; 0x7c
 80007fe:	4885      	ldr	r0, [pc, #532]	; (8000a14 <MX_GPIO_Init+0x2d8>)
 8000800:	f001 fa8a 	bl	8001d18 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2101      	movs	r1, #1
 8000808:	4883      	ldr	r0, [pc, #524]	; (8000a18 <MX_GPIO_Init+0x2dc>)
 800080a:	f001 fa85 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000814:	4881      	ldr	r0, [pc, #516]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 8000816:	f001 fa7f 	bl	8001d18 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000820:	487f      	ldr	r0, [pc, #508]	; (8000a20 <MX_GPIO_Init+0x2e4>)
 8000822:	f001 fa79 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8000826:	2374      	movs	r3, #116	; 0x74
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4875      	ldr	r0, [pc, #468]	; (8000a14 <MX_GPIO_Init+0x2d8>)
 800083e:	f001 f8cf 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000842:	2308      	movs	r3, #8
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	486e      	ldr	r0, [pc, #440]	; (8000a14 <MX_GPIO_Init+0x2d8>)
 800085a:	f001 f8c1 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_IRQ_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|AM2302_Pin;
 800085e:	f242 0302 	movw	r3, #8194	; 0x2002
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4869      	ldr	r0, [pc, #420]	; (8000a18 <MX_GPIO_Init+0x2dc>)
 8000874:	f001 f8b4 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000878:	2301      	movs	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4862      	ldr	r0, [pc, #392]	; (8000a18 <MX_GPIO_Init+0x2dc>)
 8000890:	f001 f8a6 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000894:	2308      	movs	r3, #8
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a4:	2305      	movs	r3, #5
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	485a      	ldr	r0, [pc, #360]	; (8000a18 <MX_GPIO_Init+0x2dc>)
 80008b0:	f001 f896 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008b4:	2310      	movs	r3, #16
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008c4:	2306      	movs	r3, #6
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4855      	ldr	r0, [pc, #340]	; (8000a24 <MX_GPIO_Init+0x2e8>)
 80008d0:	f001 f886 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008d4:	2304      	movs	r3, #4
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	484e      	ldr	r0, [pc, #312]	; (8000a20 <MX_GPIO_Init+0x2e4>)
 80008e8:	f001 f87a 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 80008ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4844      	ldr	r0, [pc, #272]	; (8000a14 <MX_GPIO_Init+0x2d8>)
 8000902:	f001 f86d 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8000906:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000910:	2301      	movs	r3, #1
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4841      	ldr	r0, [pc, #260]	; (8000a20 <MX_GPIO_Init+0x2e4>)
 800091c:	f001 f860 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8000920:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000924:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4838      	ldr	r0, [pc, #224]	; (8000a1c <MX_GPIO_Init+0x2e0>)
 800093a:	f001 f851 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800093e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4834      	ldr	r0, [pc, #208]	; (8000a24 <MX_GPIO_Init+0x2e8>)
 8000954:	f001 f844 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_DM_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin;
 8000958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800096a:	230a      	movs	r3, #10
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_DM_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	482b      	ldr	r0, [pc, #172]	; (8000a24 <MX_GPIO_Init+0x2e8>)
 8000976:	f001 f833 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800097a:	2340      	movs	r3, #64	; 0x40
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4823      	ldr	r0, [pc, #140]	; (8000a20 <MX_GPIO_Init+0x2e4>)
 8000992:	f001 f825 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8000996:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	481c      	ldr	r0, [pc, #112]	; (8000a20 <MX_GPIO_Init+0x2e4>)
 80009b0:	f001 f816 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 80009b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ba:	2312      	movs	r3, #18
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009be:	2301      	movs	r3, #1
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c6:	2304      	movs	r3, #4
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4813      	ldr	r0, [pc, #76]	; (8000a20 <MX_GPIO_Init+0x2e4>)
 80009d2:	f001 f805 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	480a      	ldr	r0, [pc, #40]	; (8000a14 <MX_GPIO_Init+0x2d8>)
 80009ea:	f000 fff9 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <MX_GPIO_Init+0x2ec>)
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_GPIO_Init+0x2d8>)
 8000a02:	f000 ffed 	bl	80019e0 <HAL_GPIO_Init>

}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	; 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40020000 	.word	0x40020000
 8000a28:	10120000 	.word	0x10120000

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a0c      	ldr	r2, [pc, #48]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a76:	2007      	movs	r0, #7
 8000a78:	f000 ff70 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2005      	movs	r0, #5
 8000a82:	f000 ff76 	bl	8001972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a86:	2005      	movs	r0, #5
 8000a88:	f000 ff8f 	bl	80019aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <HAL_I2C_MspInit+0x84>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d12c      	bne.n	8000b14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ad6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000adc:	2312      	movs	r3, #18
 8000ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	480c      	ldr	r0, [pc, #48]	; (8000b24 <HAL_I2C_MspInit+0x8c>)
 8000af4:	f000 ff74 	bl	80019e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	; 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40005800 	.word	0x40005800
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020400 	.word	0x40020400

08000b28 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <HAL_RNG_MspInit+0x3c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d10d      	bne.n	8000b56 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_RNG_MspInit+0x40>)
 8000b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b42:	4a09      	ldr	r2, [pc, #36]	; (8000b68 <HAL_RNG_MspInit+0x40>)
 8000b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b48:	6353      	str	r3, [r2, #52]	; 0x34
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <HAL_RNG_MspInit+0x40>)
 8000b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	50060800 	.word	0x50060800
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	; 0x30
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a41      	ldr	r2, [pc, #260]	; (8000c90 <HAL_SPI_MspInit+0x124>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d12c      	bne.n	8000be8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
 8000b92:	4b40      	ldr	r3, [pc, #256]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a3f      	ldr	r2, [pc, #252]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000b98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b3d      	ldr	r3, [pc, #244]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ba6:	61bb      	str	r3, [r7, #24]
 8000ba8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a38      	ldr	r2, [pc, #224]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b36      	ldr	r3, [pc, #216]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bc6:	23e0      	movs	r3, #224	; 0xe0
 8000bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	482d      	ldr	r0, [pc, #180]	; (8000c98 <HAL_SPI_MspInit+0x12c>)
 8000be2:	f000 fefd 	bl	80019e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000be6:	e04f      	b.n	8000c88 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a2b      	ldr	r2, [pc, #172]	; (8000c9c <HAL_SPI_MspInit+0x130>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d14a      	bne.n	8000c88 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a26      	ldr	r2, [pc, #152]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a1f      	ldr	r2, [pc, #124]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_SPI_MspInit+0x128>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c46:	2304      	movs	r3, #4
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c56:	2305      	movs	r3, #5
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480f      	ldr	r0, [pc, #60]	; (8000ca0 <HAL_SPI_MspInit+0x134>)
 8000c62:	f000 febd 	bl	80019e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000c66:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c78:	2305      	movs	r3, #5
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <HAL_SPI_MspInit+0x138>)
 8000c84:	f000 feac 	bl	80019e0 <HAL_GPIO_Init>
}
 8000c88:	bf00      	nop
 8000c8a:	3730      	adds	r7, #48	; 0x30
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40013000 	.word	0x40013000
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	40003800 	.word	0x40003800
 8000ca0:	40020800 	.word	0x40020800
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf4:	f000 fd1e 	bl	8001734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b08b      	sub	sp, #44	; 0x2c
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4604      	mov	r4, r0
 8000d38:	4608      	mov	r0, r1
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4623      	mov	r3, r4
 8000d40:	80fb      	strh	r3, [r7, #6]
 8000d42:	4603      	mov	r3, r0
 8000d44:	80bb      	strh	r3, [r7, #4]
 8000d46:	460b      	mov	r3, r1
 8000d48:	807b      	strh	r3, [r7, #2]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8000d4e:	887b      	ldrh	r3, [r7, #2]
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	f1c3 0301 	rsb	r3, r3, #1
 8000d5e:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8000d68:	e061      	b.n	8000e2e <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8000d6a:	88fa      	ldrh	r2, [r7, #6]
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	e018      	b.n	8000da6 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	b298      	uxth	r0, r3
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	88bb      	ldrh	r3, [r7, #4]
 8000d7e:	4413      	add	r3, r2
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	883a      	ldrh	r2, [r7, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f000 fb47 	bl	8001418 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	b298      	uxth	r0, r3
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	88ba      	ldrh	r2, [r7, #4]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	883a      	ldrh	r2, [r7, #0]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f000 fb3c 	bl	8001418 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	3301      	adds	r3, #1
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	88fa      	ldrh	r2, [r7, #6]
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	4413      	add	r3, r2
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	dde0      	ble.n	8000d74 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8000db2:	88fa      	ldrh	r2, [r7, #6]
 8000db4:	6a3b      	ldr	r3, [r7, #32]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	e018      	b.n	8000dee <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	b298      	uxth	r0, r3
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	88bb      	ldrh	r3, [r7, #4]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	883a      	ldrh	r2, [r7, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f000 fb23 	bl	8001418 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	b298      	uxth	r0, r3
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	88ba      	ldrh	r2, [r7, #4]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	883a      	ldrh	r2, [r7, #0]
 8000de2:	4619      	mov	r1, r3
 8000de4:	f000 fb18 	bl	8001418 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	88fa      	ldrh	r2, [r7, #6]
 8000df0:	6a3b      	ldr	r3, [r7, #32]
 8000df2:	4413      	add	r3, r2
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	dde0      	ble.n	8000dbc <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8000dfa:	6a3b      	ldr	r3, [r7, #32]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	4413      	add	r3, r2
 8000e06:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005a      	lsls	r2, r3, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	4413      	add	r3, r2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	dd09      	ble.n	8000e2e <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	4413      	add	r3, r2
 8000e26:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8000e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e30:	6a3b      	ldr	r3, [r7, #32]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	da99      	bge.n	8000d6a <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	372c      	adds	r7, #44	; 0x2c
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd90      	pop	{r4, r7, pc}

08000e40 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000e44:	2200      	movs	r2, #0
 8000e46:	2110      	movs	r1, #16
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <ILI9341_SPI_Init+0x14>)
 8000e4a:	f000 ff65 	bl	8001d18 <HAL_GPIO_WritePin>
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000e62:	1df9      	adds	r1, r7, #7
 8000e64:	2301      	movs	r3, #1
 8000e66:	2201      	movs	r2, #1
 8000e68:	4803      	ldr	r0, [pc, #12]	; (8000e78 <ILI9341_SPI_Send+0x20>)
 8000e6a:	f001 fe2a 	bl	8002ac2 <HAL_SPI_Transmit>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2000002c 	.word	0x2000002c

08000e7c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2110      	movs	r1, #16
 8000e8a:	480a      	ldr	r0, [pc, #40]	; (8000eb4 <ILI9341_Write_Command+0x38>)
 8000e8c:	f000 ff44 	bl	8001d18 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000e90:	2200      	movs	r2, #0
 8000e92:	2140      	movs	r1, #64	; 0x40
 8000e94:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <ILI9341_Write_Command+0x38>)
 8000e96:	f000 ff3f 	bl	8001d18 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ffdb 	bl	8000e58 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2110      	movs	r1, #16
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <ILI9341_Write_Command+0x38>)
 8000ea8:	f000 ff36 	bl	8001d18 <HAL_GPIO_WritePin>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2140      	movs	r1, #64	; 0x40
 8000ec6:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <ILI9341_Write_Data+0x38>)
 8000ec8:	f000 ff26 	bl	8001d18 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2110      	movs	r1, #16
 8000ed0:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <ILI9341_Write_Data+0x38>)
 8000ed2:	f000 ff21 	bl	8001d18 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ffbd 	bl	8000e58 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2110      	movs	r1, #16
 8000ee2:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <ILI9341_Write_Data+0x38>)
 8000ee4:	f000 ff18 	bl	8001d18 <HAL_GPIO_WritePin>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4604      	mov	r4, r0
 8000efc:	4608      	mov	r0, r1
 8000efe:	4611      	mov	r1, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4623      	mov	r3, r4
 8000f04:	80fb      	strh	r3, [r7, #6]
 8000f06:	4603      	mov	r3, r0
 8000f08:	80bb      	strh	r3, [r7, #4]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	807b      	strh	r3, [r7, #2]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000f12:	202a      	movs	r0, #42	; 0x2a
 8000f14:	f7ff ffb2 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ffc9 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ffc4 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	0a1b      	lsrs	r3, r3, #8
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ffbd 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000f3e:	887b      	ldrh	r3, [r7, #2]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ffb8 	bl	8000eb8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000f48:	202b      	movs	r0, #43	; 0x2b
 8000f4a:	f7ff ff97 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ffae 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000f5c:	88bb      	ldrh	r3, [r7, #4]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ffa9 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000f66:	883b      	ldrh	r3, [r7, #0]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ffa2 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000f74:	883b      	ldrh	r3, [r7, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff9d 	bl	8000eb8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000f7e:	202c      	movs	r0, #44	; 0x2c
 8000f80:	f7ff ff7c 	bl	8000e7c <ILI9341_Write_Command>
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd90      	pop	{r4, r7, pc}

08000f8c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2120      	movs	r1, #32
 8000f94:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <ILI9341_Reset+0x34>)
 8000f96:	f000 febf 	bl	8001d18 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000f9a:	20c8      	movs	r0, #200	; 0xc8
 8000f9c:	f000 fbea 	bl	8001774 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <ILI9341_Reset+0x34>)
 8000fa6:	f000 feb7 	bl	8001d18 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000faa:	20c8      	movs	r0, #200	; 0xc8
 8000fac:	f000 fbe2 	bl	8001774 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <ILI9341_Reset+0x34>)
 8000fb6:	f000 feaf 	bl	8001d18 <HAL_GPIO_WritePin>
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000fd2:	2036      	movs	r0, #54	; 0x36
 8000fd4:	f7ff ff52 	bl	8000e7c <ILI9341_Write_Command>
HAL_Delay(1);
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f000 fbcb 	bl	8001774 <HAL_Delay>
	
switch(screen_rotation) 
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d837      	bhi.n	8001054 <ILI9341_Set_Rotation+0x90>
 8000fe4:	a201      	add	r2, pc, #4	; (adr r2, 8000fec <ILI9341_Set_Rotation+0x28>)
 8000fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fea:	bf00      	nop
 8000fec:	08000ffd 	.word	0x08000ffd
 8000ff0:	08001013 	.word	0x08001013
 8000ff4:	08001029 	.word	0x08001029
 8000ff8:	0800103f 	.word	0x0800103f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000ffc:	2048      	movs	r0, #72	; 0x48
 8000ffe:	f7ff ff5b 	bl	8000eb8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <ILI9341_Set_Rotation+0x9c>)
 8001004:	22f0      	movs	r2, #240	; 0xf0
 8001006:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <ILI9341_Set_Rotation+0xa0>)
 800100a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800100e:	801a      	strh	r2, [r3, #0]
			break;
 8001010:	e021      	b.n	8001056 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001012:	2028      	movs	r0, #40	; 0x28
 8001014:	f7ff ff50 	bl	8000eb8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <ILI9341_Set_Rotation+0x9c>)
 800101a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800101e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <ILI9341_Set_Rotation+0xa0>)
 8001022:	22f0      	movs	r2, #240	; 0xf0
 8001024:	801a      	strh	r2, [r3, #0]
			break;
 8001026:	e016      	b.n	8001056 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001028:	2088      	movs	r0, #136	; 0x88
 800102a:	f7ff ff45 	bl	8000eb8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <ILI9341_Set_Rotation+0x9c>)
 8001030:	22f0      	movs	r2, #240	; 0xf0
 8001032:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <ILI9341_Set_Rotation+0xa0>)
 8001036:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800103a:	801a      	strh	r2, [r3, #0]
			break;
 800103c:	e00b      	b.n	8001056 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800103e:	20e8      	movs	r0, #232	; 0xe8
 8001040:	f7ff ff3a 	bl	8000eb8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <ILI9341_Set_Rotation+0x9c>)
 8001046:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800104a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <ILI9341_Set_Rotation+0xa0>)
 800104e:	22f0      	movs	r2, #240	; 0xf0
 8001050:	801a      	strh	r2, [r3, #0]
			break;
 8001052:	e000      	b.n	8001056 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001054:	bf00      	nop
	}
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000006 	.word	0x20000006
 8001064:	20000004 	.word	0x20000004

08001068 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	2120      	movs	r1, #32
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <ILI9341_Enable+0x14>)
 8001072:	f000 fe51 	bl	8001d18 <HAL_GPIO_WritePin>
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001084:	f7ff fff0 	bl	8001068 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001088:	f7ff feda 	bl	8000e40 <ILI9341_SPI_Init>
ILI9341_Reset();
 800108c:	f7ff ff7e 	bl	8000f8c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001090:	2001      	movs	r0, #1
 8001092:	f7ff fef3 	bl	8000e7c <ILI9341_Write_Command>
HAL_Delay(1000);
 8001096:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800109a:	f000 fb6b 	bl	8001774 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800109e:	20cb      	movs	r0, #203	; 0xcb
 80010a0:	f7ff feec 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80010a4:	2039      	movs	r0, #57	; 0x39
 80010a6:	f7ff ff07 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80010aa:	202c      	movs	r0, #44	; 0x2c
 80010ac:	f7ff ff04 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff ff01 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80010b6:	2034      	movs	r0, #52	; 0x34
 80010b8:	f7ff fefe 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80010bc:	2002      	movs	r0, #2
 80010be:	f7ff fefb 	bl	8000eb8 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80010c2:	20cf      	movs	r0, #207	; 0xcf
 80010c4:	f7ff feda 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f7ff fef5 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80010ce:	20c1      	movs	r0, #193	; 0xc1
 80010d0:	f7ff fef2 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80010d4:	2030      	movs	r0, #48	; 0x30
 80010d6:	f7ff feef 	bl	8000eb8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80010da:	20e8      	movs	r0, #232	; 0xe8
 80010dc:	f7ff fece 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80010e0:	2085      	movs	r0, #133	; 0x85
 80010e2:	f7ff fee9 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f7ff fee6 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80010ec:	2078      	movs	r0, #120	; 0x78
 80010ee:	f7ff fee3 	bl	8000eb8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80010f2:	20ea      	movs	r0, #234	; 0xea
 80010f4:	f7ff fec2 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff fedd 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff feda 	bl	8000eb8 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001104:	20ed      	movs	r0, #237	; 0xed
 8001106:	f7ff feb9 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800110a:	2064      	movs	r0, #100	; 0x64
 800110c:	f7ff fed4 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001110:	2003      	movs	r0, #3
 8001112:	f7ff fed1 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001116:	2012      	movs	r0, #18
 8001118:	f7ff fece 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 800111c:	2081      	movs	r0, #129	; 0x81
 800111e:	f7ff fecb 	bl	8000eb8 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001122:	20f7      	movs	r0, #247	; 0xf7
 8001124:	f7ff feaa 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001128:	2020      	movs	r0, #32
 800112a:	f7ff fec5 	bl	8000eb8 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800112e:	20c0      	movs	r0, #192	; 0xc0
 8001130:	f7ff fea4 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001134:	2023      	movs	r0, #35	; 0x23
 8001136:	f7ff febf 	bl	8000eb8 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800113a:	20c1      	movs	r0, #193	; 0xc1
 800113c:	f7ff fe9e 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001140:	2010      	movs	r0, #16
 8001142:	f7ff feb9 	bl	8000eb8 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001146:	20c5      	movs	r0, #197	; 0xc5
 8001148:	f7ff fe98 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800114c:	203e      	movs	r0, #62	; 0x3e
 800114e:	f7ff feb3 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001152:	2028      	movs	r0, #40	; 0x28
 8001154:	f7ff feb0 	bl	8000eb8 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001158:	20c7      	movs	r0, #199	; 0xc7
 800115a:	f7ff fe8f 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800115e:	2086      	movs	r0, #134	; 0x86
 8001160:	f7ff feaa 	bl	8000eb8 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001164:	2036      	movs	r0, #54	; 0x36
 8001166:	f7ff fe89 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800116a:	2048      	movs	r0, #72	; 0x48
 800116c:	f7ff fea4 	bl	8000eb8 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001170:	203a      	movs	r0, #58	; 0x3a
 8001172:	f7ff fe83 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001176:	2055      	movs	r0, #85	; 0x55
 8001178:	f7ff fe9e 	bl	8000eb8 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800117c:	20b1      	movs	r0, #177	; 0xb1
 800117e:	f7ff fe7d 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff fe98 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001188:	2018      	movs	r0, #24
 800118a:	f7ff fe95 	bl	8000eb8 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800118e:	20b6      	movs	r0, #182	; 0xb6
 8001190:	f7ff fe74 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001194:	2008      	movs	r0, #8
 8001196:	f7ff fe8f 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800119a:	2082      	movs	r0, #130	; 0x82
 800119c:	f7ff fe8c 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80011a0:	2027      	movs	r0, #39	; 0x27
 80011a2:	f7ff fe89 	bl	8000eb8 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80011a6:	20f2      	movs	r0, #242	; 0xf2
 80011a8:	f7ff fe68 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff fe83 	bl	8000eb8 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80011b2:	2026      	movs	r0, #38	; 0x26
 80011b4:	f7ff fe62 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7ff fe7d 	bl	8000eb8 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80011be:	20e0      	movs	r0, #224	; 0xe0
 80011c0:	f7ff fe5c 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80011c4:	200f      	movs	r0, #15
 80011c6:	f7ff fe77 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80011ca:	2031      	movs	r0, #49	; 0x31
 80011cc:	f7ff fe74 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80011d0:	202b      	movs	r0, #43	; 0x2b
 80011d2:	f7ff fe71 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80011d6:	200c      	movs	r0, #12
 80011d8:	f7ff fe6e 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80011dc:	200e      	movs	r0, #14
 80011de:	f7ff fe6b 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80011e2:	2008      	movs	r0, #8
 80011e4:	f7ff fe68 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80011e8:	204e      	movs	r0, #78	; 0x4e
 80011ea:	f7ff fe65 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80011ee:	20f1      	movs	r0, #241	; 0xf1
 80011f0:	f7ff fe62 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80011f4:	2037      	movs	r0, #55	; 0x37
 80011f6:	f7ff fe5f 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80011fa:	2007      	movs	r0, #7
 80011fc:	f7ff fe5c 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001200:	2010      	movs	r0, #16
 8001202:	f7ff fe59 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001206:	2003      	movs	r0, #3
 8001208:	f7ff fe56 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800120c:	200e      	movs	r0, #14
 800120e:	f7ff fe53 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001212:	2009      	movs	r0, #9
 8001214:	f7ff fe50 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff fe4d 	bl	8000eb8 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800121e:	20e1      	movs	r0, #225	; 0xe1
 8001220:	f7ff fe2c 	bl	8000e7c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff fe47 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800122a:	200e      	movs	r0, #14
 800122c:	f7ff fe44 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001230:	2014      	movs	r0, #20
 8001232:	f7ff fe41 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001236:	2003      	movs	r0, #3
 8001238:	f7ff fe3e 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 800123c:	2011      	movs	r0, #17
 800123e:	f7ff fe3b 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001242:	2007      	movs	r0, #7
 8001244:	f7ff fe38 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001248:	2031      	movs	r0, #49	; 0x31
 800124a:	f7ff fe35 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800124e:	20c1      	movs	r0, #193	; 0xc1
 8001250:	f7ff fe32 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001254:	2048      	movs	r0, #72	; 0x48
 8001256:	f7ff fe2f 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800125a:	2008      	movs	r0, #8
 800125c:	f7ff fe2c 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001260:	200f      	movs	r0, #15
 8001262:	f7ff fe29 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001266:	200c      	movs	r0, #12
 8001268:	f7ff fe26 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800126c:	2031      	movs	r0, #49	; 0x31
 800126e:	f7ff fe23 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001272:	2036      	movs	r0, #54	; 0x36
 8001274:	f7ff fe20 	bl	8000eb8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001278:	200f      	movs	r0, #15
 800127a:	f7ff fe1d 	bl	8000eb8 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800127e:	2011      	movs	r0, #17
 8001280:	f7ff fdfc 	bl	8000e7c <ILI9341_Write_Command>
HAL_Delay(120);
 8001284:	2078      	movs	r0, #120	; 0x78
 8001286:	f000 fa75 	bl	8001774 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800128a:	2029      	movs	r0, #41	; 0x29
 800128c:	f7ff fdf6 	bl	8000e7c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001290:	2003      	movs	r0, #3
 8001292:	f7ff fe97 	bl	8000fc4 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8001296:	200a      	movs	r0, #10
 8001298:	f000 fa6c 	bl	8001774 <HAL_Delay>
//
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b08c      	sub	sp, #48	; 0x30
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	80fb      	strh	r3, [r7, #6]
 80012ac:	466b      	mov	r3, sp
 80012ae:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012bc:	d202      	bcs.n	80012c4 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
 80012c2:	e002      	b.n	80012ca <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80012c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80012ca:	2201      	movs	r2, #1
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	483d      	ldr	r0, [pc, #244]	; (80013c4 <ILI9341_Draw_Colour_Burst+0x124>)
 80012d0:	f000 fd22 	bl	8001d18 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2110      	movs	r1, #16
 80012d8:	483a      	ldr	r0, [pc, #232]	; (80013c4 <ILI9341_Draw_Colour_Burst+0x124>)
 80012da:	f000 fd1d 	bl	8001d18 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80012e8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80012ea:	4623      	mov	r3, r4
 80012ec:	3b01      	subs	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	4620      	mov	r0, r4
 80012f2:	f04f 0100 	mov.w	r1, #0
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	00cb      	lsls	r3, r1, #3
 8001300:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001304:	00c2      	lsls	r2, r0, #3
 8001306:	4620      	mov	r0, r4
 8001308:	f04f 0100 	mov.w	r1, #0
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	00cb      	lsls	r3, r1, #3
 8001316:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800131a:	00c2      	lsls	r2, r0, #3
 800131c:	1de3      	adds	r3, r4, #7
 800131e:	08db      	lsrs	r3, r3, #3
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	ebad 0d03 	sub.w	sp, sp, r3
 8001326:	466b      	mov	r3, sp
 8001328:	3300      	adds	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001330:	e00e      	b.n	8001350 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001336:	4413      	add	r3, r2
 8001338:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800133c:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 800133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001340:	3301      	adds	r3, #1
 8001342:	88fa      	ldrh	r2, [r7, #6]
 8001344:	b2d1      	uxtb	r1, r2
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800134a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134c:	3302      	adds	r3, #2
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	429a      	cmp	r2, r3
 8001356:	d3ec      	bcc.n	8001332 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800136c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001372:	fb01 f202 	mul.w	r2, r1, r2
 8001376:	1a9b      	subs	r3, r3, r2
 8001378:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d010      	beq.n	80013a2 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001384:	e009      	b.n	800139a <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001386:	69b9      	ldr	r1, [r7, #24]
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	b29a      	uxth	r2, r3
 800138c:	230a      	movs	r3, #10
 800138e:	480e      	ldr	r0, [pc, #56]	; (80013c8 <ILI9341_Draw_Colour_Burst+0x128>)
 8001390:	f001 fb97 	bl	8002ac2 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001396:	3301      	adds	r3, #1
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800139a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d3f1      	bcc.n	8001386 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80013a2:	69b9      	ldr	r1, [r7, #24]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	230a      	movs	r3, #10
 80013aa:	4807      	ldr	r0, [pc, #28]	; (80013c8 <ILI9341_Draw_Colour_Burst+0x128>)
 80013ac:	f001 fb89 	bl	8002ac2 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	2110      	movs	r1, #16
 80013b4:	4803      	ldr	r0, [pc, #12]	; (80013c4 <ILI9341_Draw_Colour_Burst+0x124>)
 80013b6:	f000 fcaf 	bl	8001d18 <HAL_GPIO_WritePin>
 80013ba:	46ad      	mov	sp, r5
}
 80013bc:	bf00      	nop
 80013be:	3730      	adds	r7, #48	; 0x30
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bdb0      	pop	{r4, r5, r7, pc}
 80013c4:	40021000 	.word	0x40021000
 80013c8:	2000002c 	.word	0x2000002c

080013cc <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <ILI9341_Fill_Screen+0x44>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <ILI9341_Fill_Screen+0x48>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	2100      	movs	r1, #0
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fd85 	bl	8000ef4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <ILI9341_Fill_Screen+0x44>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <ILI9341_Fill_Screen+0x48>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	fb03 f302 	mul.w	r3, r3, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff4c 	bl	80012a0 <ILI9341_Draw_Colour_Burst>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000006 	.word	0x20000006
 8001414:	20000004 	.word	0x20000004

08001418 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
 8001422:	460b      	mov	r3, r1
 8001424:	80bb      	strh	r3, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800142a:	4b5b      	ldr	r3, [pc, #364]	; (8001598 <ILI9341_Draw_Pixel+0x180>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	88fa      	ldrh	r2, [r7, #6]
 8001432:	429a      	cmp	r2, r3
 8001434:	f080 80ac 	bcs.w	8001590 <ILI9341_Draw_Pixel+0x178>
 8001438:	4b58      	ldr	r3, [pc, #352]	; (800159c <ILI9341_Draw_Pixel+0x184>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	88ba      	ldrh	r2, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	f080 80a5 	bcs.w	8001590 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001446:	2200      	movs	r2, #0
 8001448:	2140      	movs	r1, #64	; 0x40
 800144a:	4855      	ldr	r0, [pc, #340]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 800144c:	f000 fc64 	bl	8001d18 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	2110      	movs	r1, #16
 8001454:	4852      	ldr	r0, [pc, #328]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 8001456:	f000 fc5f 	bl	8001d18 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800145a:	202a      	movs	r0, #42	; 0x2a
 800145c:	f7ff fcfc 	bl	8000e58 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001460:	2201      	movs	r2, #1
 8001462:	2140      	movs	r1, #64	; 0x40
 8001464:	484e      	ldr	r0, [pc, #312]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 8001466:	f000 fc57 	bl	8001d18 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800146a:	2201      	movs	r2, #1
 800146c:	2110      	movs	r1, #16
 800146e:	484c      	ldr	r0, [pc, #304]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 8001470:	f000 fc52 	bl	8001d18 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001474:	2200      	movs	r2, #0
 8001476:	2110      	movs	r1, #16
 8001478:	4849      	ldr	r0, [pc, #292]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 800147a:	f000 fc4d 	bl	8001d18 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	b29b      	uxth	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	753b      	strb	r3, [r7, #20]
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	757b      	strb	r3, [r7, #21]
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	3301      	adds	r3, #1
 8001492:	121b      	asrs	r3, r3, #8
 8001494:	b2db      	uxtb	r3, r3
 8001496:	75bb      	strb	r3, [r7, #22]
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	3301      	adds	r3, #1
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80014a2:	f107 0114 	add.w	r1, r7, #20
 80014a6:	2301      	movs	r3, #1
 80014a8:	2204      	movs	r2, #4
 80014aa:	483e      	ldr	r0, [pc, #248]	; (80015a4 <ILI9341_Draw_Pixel+0x18c>)
 80014ac:	f001 fb09 	bl	8002ac2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	2110      	movs	r1, #16
 80014b4:	483a      	ldr	r0, [pc, #232]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 80014b6:	f000 fc2f 	bl	8001d18 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80014ba:	2200      	movs	r2, #0
 80014bc:	2140      	movs	r1, #64	; 0x40
 80014be:	4838      	ldr	r0, [pc, #224]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 80014c0:	f000 fc2a 	bl	8001d18 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80014c4:	2200      	movs	r2, #0
 80014c6:	2110      	movs	r1, #16
 80014c8:	4835      	ldr	r0, [pc, #212]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 80014ca:	f000 fc25 	bl	8001d18 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80014ce:	202b      	movs	r0, #43	; 0x2b
 80014d0:	f7ff fcc2 	bl	8000e58 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80014d4:	2201      	movs	r2, #1
 80014d6:	2140      	movs	r1, #64	; 0x40
 80014d8:	4831      	ldr	r0, [pc, #196]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 80014da:	f000 fc1d 	bl	8001d18 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80014de:	2201      	movs	r2, #1
 80014e0:	2110      	movs	r1, #16
 80014e2:	482f      	ldr	r0, [pc, #188]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 80014e4:	f000 fc18 	bl	8001d18 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2110      	movs	r1, #16
 80014ec:	482c      	ldr	r0, [pc, #176]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 80014ee:	f000 fc13 	bl	8001d18 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80014f2:	88bb      	ldrh	r3, [r7, #4]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	743b      	strb	r3, [r7, #16]
 80014fc:	88bb      	ldrh	r3, [r7, #4]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	747b      	strb	r3, [r7, #17]
 8001502:	88bb      	ldrh	r3, [r7, #4]
 8001504:	3301      	adds	r3, #1
 8001506:	121b      	asrs	r3, r3, #8
 8001508:	b2db      	uxtb	r3, r3
 800150a:	74bb      	strb	r3, [r7, #18]
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	3301      	adds	r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001516:	f107 0110 	add.w	r1, r7, #16
 800151a:	2301      	movs	r3, #1
 800151c:	2204      	movs	r2, #4
 800151e:	4821      	ldr	r0, [pc, #132]	; (80015a4 <ILI9341_Draw_Pixel+0x18c>)
 8001520:	f001 facf 	bl	8002ac2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	481d      	ldr	r0, [pc, #116]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 800152a:	f000 fbf5 	bl	8001d18 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800152e:	2200      	movs	r2, #0
 8001530:	2140      	movs	r1, #64	; 0x40
 8001532:	481b      	ldr	r0, [pc, #108]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 8001534:	f000 fbf0 	bl	8001d18 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001538:	2200      	movs	r2, #0
 800153a:	2110      	movs	r1, #16
 800153c:	4818      	ldr	r0, [pc, #96]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 800153e:	f000 fbeb 	bl	8001d18 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001542:	202c      	movs	r0, #44	; 0x2c
 8001544:	f7ff fc88 	bl	8000e58 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001548:	2201      	movs	r2, #1
 800154a:	2140      	movs	r1, #64	; 0x40
 800154c:	4814      	ldr	r0, [pc, #80]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 800154e:	f000 fbe3 	bl	8001d18 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001552:	2201      	movs	r2, #1
 8001554:	2110      	movs	r1, #16
 8001556:	4812      	ldr	r0, [pc, #72]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 8001558:	f000 fbde 	bl	8001d18 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	2110      	movs	r1, #16
 8001560:	480f      	ldr	r0, [pc, #60]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 8001562:	f000 fbd9 	bl	8001d18 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	b29b      	uxth	r3, r3
 800156c:	b2db      	uxtb	r3, r3
 800156e:	733b      	strb	r3, [r7, #12]
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001576:	f107 010c 	add.w	r1, r7, #12
 800157a:	2301      	movs	r3, #1
 800157c:	2202      	movs	r2, #2
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <ILI9341_Draw_Pixel+0x18c>)
 8001580:	f001 fa9f 	bl	8002ac2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001584:	2201      	movs	r2, #1
 8001586:	2110      	movs	r1, #16
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <ILI9341_Draw_Pixel+0x188>)
 800158a:	f000 fbc5 	bl	8001d18 <HAL_GPIO_WritePin>
 800158e:	e000      	b.n	8001592 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001590:	bf00      	nop
	
}
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000006 	.word	0x20000006
 800159c:	20000004 	.word	0x20000004
 80015a0:	40021000 	.word	0x40021000
 80015a4:	2000002c 	.word	0x2000002c

080015a8 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	int i =0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 80015b4:	e036      	b.n	8001624 <speed_test_LCD+0x7c>
	{
		i ++;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80015d0:	4819      	ldr	r0, [pc, #100]	; (8001638 <speed_test_LCD+0x90>)
 80015d2:	f001 f9d8 	bl	8002986 <HAL_RNG_GetRandomNumber>
 80015d6:	6138      	str	r0, [r7, #16]
		xr = random_num;
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80015dc:	4816      	ldr	r0, [pc, #88]	; (8001638 <speed_test_LCD+0x90>)
 80015de:	f001 f9d2 	bl	8002986 <HAL_RNG_GetRandomNumber>
 80015e2:	6138      	str	r0, [r7, #16]
		yr = random_num;
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <speed_test_LCD+0x90>)
 80015ea:	f001 f9cc 	bl	8002986 <HAL_RNG_GetRandomNumber>
 80015ee:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80015f4:	4810      	ldr	r0, [pc, #64]	; (8001638 <speed_test_LCD+0x90>)
 80015f6:	f001 f9c6 	bl	8002986 <HAL_RNG_GetRandomNumber>
 80015fa:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8001600:	89fb      	ldrh	r3, [r7, #14]
 8001602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001606:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8001608:	89bb      	ldrh	r3, [r7, #12]
 800160a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800160e:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8001610:	897b      	ldrh	r3, [r7, #10]
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8001618:	893b      	ldrh	r3, [r7, #8]
 800161a:	897a      	ldrh	r2, [r7, #10]
 800161c:	89b9      	ldrh	r1, [r7, #12]
 800161e:	89f8      	ldrh	r0, [r7, #14]
 8001620:	f7ff fb86 	bl	8000d30 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	ddc4      	ble.n	80015b6 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200000d8 	.word	0x200000d8

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001640:	480d      	ldr	r0, [pc, #52]	; (8001678 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001642:	490e      	ldr	r1, [pc, #56]	; (800167c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001658:	4c0b      	ldr	r4, [pc, #44]	; (8001688 <LoopFillZerobss+0x26>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001666:	f7ff fb51 	bl	8000d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800166a:	f001 fc31 	bl	8002ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7fe ff27 	bl	80004c0 <main>
  bx  lr    
 8001672:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001674:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001680:	08002f68 	.word	0x08002f68
  ldr r2, =_sbss
 8001684:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001688:	20000144 	.word	0x20000144

0800168c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC_IRQHandler>
	...

08001690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <HAL_Init+0x40>)
 800169a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_Init+0x40>)
 80016a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_Init+0x40>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f000 f94f 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 f808 	bl	80016d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c4:	f7ff f9b8 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023c00 	.word	0x40023c00

080016d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_InitTick+0x54>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x58>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f967 	bl	80019c6 <HAL_SYSTICK_Config>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e00e      	b.n	8001720 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d80a      	bhi.n	800171e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001708:	2200      	movs	r2, #0
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001710:	f000 f92f 	bl	8001972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001714:	4a06      	ldr	r2, [pc, #24]	; (8001730 <HAL_InitTick+0x5c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e000      	b.n	8001720 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000000 	.word	0x20000000
 800172c:	2000000c 	.word	0x2000000c
 8001730:	20000008 	.word	0x20000008

08001734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x20>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x24>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <HAL_IncTick+0x24>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	2000000c 	.word	0x2000000c
 8001758:	20000140 	.word	0x20000140

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000140 	.word	0x20000140

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff ffee 	bl	800175c <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800178c:	d005      	beq.n	800179a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_Delay+0x44>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800179a:	bf00      	nop
 800179c:	f7ff ffde 	bl	800175c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d8f7      	bhi.n	800179c <HAL_Delay+0x28>
  {
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000000c 	.word	0x2000000c

080017bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ee:	4a04      	ldr	r2, [pc, #16]	; (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60d3      	str	r3, [r2, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	2b00      	cmp	r3, #0
 8001830:	db0b      	blt.n	800184a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <__NVIC_EnableIRQ+0x38>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2001      	movs	r0, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e100 	.word	0xe000e100

0800185c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	; (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
         );
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001928:	d301      	bcc.n	800192e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192a:	2301      	movs	r3, #1
 800192c:	e00f      	b.n	800194e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <SysTick_Config+0x40>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001936:	210f      	movs	r1, #15
 8001938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800193c:	f7ff ff8e 	bl	800185c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <SysTick_Config+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <SysTick_Config+0x40>)
 8001948:	2207      	movs	r2, #7
 800194a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	e000e010 	.word	0xe000e010

0800195c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff29 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001984:	f7ff ff3e 	bl	8001804 <__NVIC_GetPriorityGrouping>
 8001988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f7ff ff8e 	bl	80018b0 <NVIC_EncodePriority>
 8001994:	4602      	mov	r2, r0
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff5d 	bl	800185c <__NVIC_SetPriority>
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff31 	bl	8001820 <__NVIC_EnableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffa2 	bl	8001918 <SysTick_Config>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e16b      	b.n	8001cd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019fc:	2201      	movs	r2, #1
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	f040 815a 	bne.w	8001cce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d005      	beq.n	8001a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d130      	bne.n	8001a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 0201 	and.w	r2, r3, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d017      	beq.n	8001ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d123      	bne.n	8001b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	69b9      	ldr	r1, [r7, #24]
 8001b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80b4 	beq.w	8001cce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b60      	ldr	r3, [pc, #384]	; (8001cec <HAL_GPIO_Init+0x30c>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a5f      	ldr	r2, [pc, #380]	; (8001cec <HAL_GPIO_Init+0x30c>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <HAL_GPIO_Init+0x30c>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b82:	4a5b      	ldr	r2, [pc, #364]	; (8001cf0 <HAL_GPIO_Init+0x310>)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a52      	ldr	r2, [pc, #328]	; (8001cf4 <HAL_GPIO_Init+0x314>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d02b      	beq.n	8001c06 <HAL_GPIO_Init+0x226>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a51      	ldr	r2, [pc, #324]	; (8001cf8 <HAL_GPIO_Init+0x318>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d025      	beq.n	8001c02 <HAL_GPIO_Init+0x222>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a50      	ldr	r2, [pc, #320]	; (8001cfc <HAL_GPIO_Init+0x31c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d01f      	beq.n	8001bfe <HAL_GPIO_Init+0x21e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4f      	ldr	r2, [pc, #316]	; (8001d00 <HAL_GPIO_Init+0x320>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d019      	beq.n	8001bfa <HAL_GPIO_Init+0x21a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4e      	ldr	r2, [pc, #312]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0x216>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4d      	ldr	r2, [pc, #308]	; (8001d08 <HAL_GPIO_Init+0x328>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4c      	ldr	r2, [pc, #304]	; (8001d0c <HAL_GPIO_Init+0x32c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d007      	beq.n	8001bee <HAL_GPIO_Init+0x20e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4b      	ldr	r2, [pc, #300]	; (8001d10 <HAL_GPIO_Init+0x330>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_GPIO_Init+0x20a>
 8001be6:	2307      	movs	r3, #7
 8001be8:	e00e      	b.n	8001c08 <HAL_GPIO_Init+0x228>
 8001bea:	2308      	movs	r3, #8
 8001bec:	e00c      	b.n	8001c08 <HAL_GPIO_Init+0x228>
 8001bee:	2306      	movs	r3, #6
 8001bf0:	e00a      	b.n	8001c08 <HAL_GPIO_Init+0x228>
 8001bf2:	2305      	movs	r3, #5
 8001bf4:	e008      	b.n	8001c08 <HAL_GPIO_Init+0x228>
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x228>
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e004      	b.n	8001c08 <HAL_GPIO_Init+0x228>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e002      	b.n	8001c08 <HAL_GPIO_Init+0x228>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_GPIO_Init+0x228>
 8001c06:	2300      	movs	r3, #0
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	f002 0203 	and.w	r2, r2, #3
 8001c0e:	0092      	lsls	r2, r2, #2
 8001c10:	4093      	lsls	r3, r2
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c18:	4935      	ldr	r1, [pc, #212]	; (8001cf0 <HAL_GPIO_Init+0x310>)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	3302      	adds	r3, #2
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c26:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c4a:	4a32      	ldr	r2, [pc, #200]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c50:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c74:	4a27      	ldr	r2, [pc, #156]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9e:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc8:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <HAL_GPIO_Init+0x334>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	2b0f      	cmp	r3, #15
 8001cd8:	f67f ae90 	bls.w	80019fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40013800 	.word	0x40013800
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	40020c00 	.word	0x40020c00
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40021400 	.word	0x40021400
 8001d0c:	40021800 	.word	0x40021800
 8001d10:	40021c00 	.word	0x40021c00
 8001d14:	40013c00 	.word	0x40013c00

08001d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
 8001d24:	4613      	mov	r3, r2
 8001d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d28:	787b      	ldrb	r3, [r7, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d34:	e003      	b.n	8001d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d36:	887b      	ldrh	r3, [r7, #2]
 8001d38:	041a      	lsls	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	619a      	str	r2, [r3, #24]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e12b      	b.n	8001fb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fe90 	bl	8000a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2224      	movs	r2, #36	; 0x24
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001db0:	f000 fd5c 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8001db4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4a81      	ldr	r2, [pc, #516]	; (8001fc0 <HAL_I2C_Init+0x274>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d807      	bhi.n	8001dd0 <HAL_I2C_Init+0x84>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4a80      	ldr	r2, [pc, #512]	; (8001fc4 <HAL_I2C_Init+0x278>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	bf94      	ite	ls
 8001dc8:	2301      	movls	r3, #1
 8001dca:	2300      	movhi	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	e006      	b.n	8001dde <HAL_I2C_Init+0x92>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a7d      	ldr	r2, [pc, #500]	; (8001fc8 <HAL_I2C_Init+0x27c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	bf94      	ite	ls
 8001dd8:	2301      	movls	r3, #1
 8001dda:	2300      	movhi	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0e7      	b.n	8001fb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4a78      	ldr	r2, [pc, #480]	; (8001fcc <HAL_I2C_Init+0x280>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0c9b      	lsrs	r3, r3, #18
 8001df0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4a6a      	ldr	r2, [pc, #424]	; (8001fc0 <HAL_I2C_Init+0x274>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d802      	bhi.n	8001e20 <HAL_I2C_Init+0xd4>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	e009      	b.n	8001e34 <HAL_I2C_Init+0xe8>
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	4a69      	ldr	r2, [pc, #420]	; (8001fd0 <HAL_I2C_Init+0x284>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	3301      	adds	r3, #1
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	495c      	ldr	r1, [pc, #368]	; (8001fc0 <HAL_I2C_Init+0x274>)
 8001e50:	428b      	cmp	r3, r1
 8001e52:	d819      	bhi.n	8001e88 <HAL_I2C_Init+0x13c>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e59      	subs	r1, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e62:	1c59      	adds	r1, r3, #1
 8001e64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e68:	400b      	ands	r3, r1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <HAL_I2C_Init+0x138>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1e59      	subs	r1, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e82:	e051      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001e84:	2304      	movs	r3, #4
 8001e86:	e04f      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d111      	bne.n	8001eb4 <HAL_I2C_Init+0x168>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	440b      	add	r3, r1
 8001e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	e012      	b.n	8001eda <HAL_I2C_Init+0x18e>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1e58      	subs	r0, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	0099      	lsls	r1, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Init+0x196>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e022      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10e      	bne.n	8001f08 <HAL_I2C_Init+0x1bc>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1e58      	subs	r0, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6859      	ldr	r1, [r3, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	440b      	add	r3, r1
 8001ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efc:	3301      	adds	r3, #1
 8001efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f06:	e00f      	b.n	8001f28 <HAL_I2C_Init+0x1dc>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1e58      	subs	r0, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	0099      	lsls	r1, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	6809      	ldr	r1, [r1, #0]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6911      	ldr	r1, [r2, #16]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68d2      	ldr	r2, [r2, #12]
 8001f62:	4311      	orrs	r1, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	000186a0 	.word	0x000186a0
 8001fc4:	001e847f 	.word	0x001e847f
 8001fc8:	003d08ff 	.word	0x003d08ff
 8001fcc:	431bde83 	.word	0x431bde83
 8001fd0:	10624dd3 	.word	0x10624dd3

08001fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e264      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d075      	beq.n	80020de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ff2:	4ba3      	ldr	r3, [pc, #652]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d00c      	beq.n	8002018 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ffe:	4ba0      	ldr	r3, [pc, #640]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002006:	2b08      	cmp	r3, #8
 8002008:	d112      	bne.n	8002030 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200a:	4b9d      	ldr	r3, [pc, #628]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002016:	d10b      	bne.n	8002030 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	4b99      	ldr	r3, [pc, #612]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d05b      	beq.n	80020dc <HAL_RCC_OscConfig+0x108>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d157      	bne.n	80020dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e23f      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002038:	d106      	bne.n	8002048 <HAL_RCC_OscConfig+0x74>
 800203a:	4b91      	ldr	r3, [pc, #580]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a90      	ldr	r2, [pc, #576]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	e01d      	b.n	8002084 <HAL_RCC_OscConfig+0xb0>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x98>
 8002052:	4b8b      	ldr	r3, [pc, #556]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a8a      	ldr	r2, [pc, #552]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b88      	ldr	r3, [pc, #544]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a87      	ldr	r2, [pc, #540]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e00b      	b.n	8002084 <HAL_RCC_OscConfig+0xb0>
 800206c:	4b84      	ldr	r3, [pc, #528]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a83      	ldr	r2, [pc, #524]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b81      	ldr	r3, [pc, #516]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a80      	ldr	r2, [pc, #512]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 800207e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff fb66 	bl	800175c <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002094:	f7ff fb62 	bl	800175c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e204      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	4b76      	ldr	r3, [pc, #472]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0xc0>
 80020b2:	e014      	b.n	80020de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7ff fb52 	bl	800175c <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020bc:	f7ff fb4e 	bl	800175c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e1f0      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	4b6c      	ldr	r3, [pc, #432]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0xe8>
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d063      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ea:	4b65      	ldr	r3, [pc, #404]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f6:	4b62      	ldr	r3, [pc, #392]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d11c      	bne.n	800213c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002102:	4b5f      	ldr	r3, [pc, #380]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d116      	bne.n	800213c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	4b5c      	ldr	r3, [pc, #368]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x152>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e1c4      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002126:	4b56      	ldr	r3, [pc, #344]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4952      	ldr	r1, [pc, #328]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	e03a      	b.n	80021b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d020      	beq.n	8002186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002144:	4b4f      	ldr	r3, [pc, #316]	; (8002284 <HAL_RCC_OscConfig+0x2b0>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7ff fb07 	bl	800175c <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002152:	f7ff fb03 	bl	800175c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e1a5      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	4b46      	ldr	r3, [pc, #280]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002170:	4b43      	ldr	r3, [pc, #268]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4940      	ldr	r1, [pc, #256]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
 8002184:	e015      	b.n	80021b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002186:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <HAL_RCC_OscConfig+0x2b0>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff fae6 	bl	800175c <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002194:	f7ff fae2 	bl	800175c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e184      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d030      	beq.n	8002220 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d016      	beq.n	80021f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c6:	4b30      	ldr	r3, [pc, #192]	; (8002288 <HAL_RCC_OscConfig+0x2b4>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7ff fac6 	bl	800175c <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d4:	f7ff fac2 	bl	800175c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e164      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	4b26      	ldr	r3, [pc, #152]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x200>
 80021f2:	e015      	b.n	8002220 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f4:	4b24      	ldr	r3, [pc, #144]	; (8002288 <HAL_RCC_OscConfig+0x2b4>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7ff faaf 	bl	800175c <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002202:	f7ff faab 	bl	800175c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e14d      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80a0 	beq.w	800236e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10f      	bne.n	800225e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4a0e      	ldr	r2, [pc, #56]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224c:	6413      	str	r3, [r2, #64]	; 0x40
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225a:	2301      	movs	r3, #1
 800225c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_OscConfig+0x2b8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d121      	bne.n	80022ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_RCC_OscConfig+0x2b8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a07      	ldr	r2, [pc, #28]	; (800228c <HAL_RCC_OscConfig+0x2b8>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002276:	f7ff fa71 	bl	800175c <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	e011      	b.n	80022a2 <HAL_RCC_OscConfig+0x2ce>
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	42470000 	.word	0x42470000
 8002288:	42470e80 	.word	0x42470e80
 800228c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002290:	f7ff fa64 	bl	800175c <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e106      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a2:	4b85      	ldr	r3, [pc, #532]	; (80024b8 <HAL_RCC_OscConfig+0x4e4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d106      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2f0>
 80022b6:	4b81      	ldr	r3, [pc, #516]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	4a80      	ldr	r2, [pc, #512]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6713      	str	r3, [r2, #112]	; 0x70
 80022c2:	e01c      	b.n	80022fe <HAL_RCC_OscConfig+0x32a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b05      	cmp	r3, #5
 80022ca:	d10c      	bne.n	80022e6 <HAL_RCC_OscConfig+0x312>
 80022cc:	4b7b      	ldr	r3, [pc, #492]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	4a7a      	ldr	r2, [pc, #488]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022d2:	f043 0304 	orr.w	r3, r3, #4
 80022d6:	6713      	str	r3, [r2, #112]	; 0x70
 80022d8:	4b78      	ldr	r3, [pc, #480]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	4a77      	ldr	r2, [pc, #476]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6713      	str	r3, [r2, #112]	; 0x70
 80022e4:	e00b      	b.n	80022fe <HAL_RCC_OscConfig+0x32a>
 80022e6:	4b75      	ldr	r3, [pc, #468]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	4a74      	ldr	r2, [pc, #464]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	6713      	str	r3, [r2, #112]	; 0x70
 80022f2:	4b72      	ldr	r3, [pc, #456]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a71      	ldr	r2, [pc, #452]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d015      	beq.n	8002332 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002306:	f7ff fa29 	bl	800175c <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7ff fa25 	bl	800175c <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	; 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e0c5      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002324:	4b65      	ldr	r3, [pc, #404]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0ee      	beq.n	800230e <HAL_RCC_OscConfig+0x33a>
 8002330:	e014      	b.n	800235c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002332:	f7ff fa13 	bl	800175c <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002338:	e00a      	b.n	8002350 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7ff fa0f 	bl	800175c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	; 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e0af      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002350:	4b5a      	ldr	r3, [pc, #360]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1ee      	bne.n	800233a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800235c:	7dfb      	ldrb	r3, [r7, #23]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002362:	4b56      	ldr	r3, [pc, #344]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	4a55      	ldr	r2, [pc, #340]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 809b 	beq.w	80024ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b08      	cmp	r3, #8
 8002382:	d05c      	beq.n	800243e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d141      	bne.n	8002410 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238c:	4b4c      	ldr	r3, [pc, #304]	; (80024c0 <HAL_RCC_OscConfig+0x4ec>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7ff f9e3 	bl	800175c <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239a:	f7ff f9df 	bl	800175c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e081      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ac:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f0      	bne.n	800239a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	019b      	lsls	r3, r3, #6
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	3b01      	subs	r3, #1
 80023d2:	041b      	lsls	r3, r3, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	061b      	lsls	r3, r3, #24
 80023dc:	4937      	ldr	r1, [pc, #220]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e2:	4b37      	ldr	r3, [pc, #220]	; (80024c0 <HAL_RCC_OscConfig+0x4ec>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7ff f9b8 	bl	800175c <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f0:	f7ff f9b4 	bl	800175c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e056      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	4b2e      	ldr	r3, [pc, #184]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x41c>
 800240e:	e04e      	b.n	80024ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002410:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <HAL_RCC_OscConfig+0x4ec>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7ff f9a1 	bl	800175c <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241e:	f7ff f99d 	bl	800175c <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e03f      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f0      	bne.n	800241e <HAL_RCC_OscConfig+0x44a>
 800243c:	e037      	b.n	80024ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e032      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_RCC_OscConfig+0x4e8>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d028      	beq.n	80024aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d121      	bne.n	80024aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002470:	429a      	cmp	r2, r3
 8002472:	d11a      	bne.n	80024aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800247a:	4013      	ands	r3, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002480:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002482:	4293      	cmp	r3, r2
 8002484:	d111      	bne.n	80024aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	085b      	lsrs	r3, r3, #1
 8002492:	3b01      	subs	r3, #1
 8002494:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d107      	bne.n	80024aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40007000 	.word	0x40007000
 80024bc:	40023800 	.word	0x40023800
 80024c0:	42470060 	.word	0x42470060

080024c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0cc      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d90c      	bls.n	8002500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b65      	ldr	r3, [pc, #404]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b63      	ldr	r3, [pc, #396]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0b8      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d020      	beq.n	800254e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002518:	4b59      	ldr	r3, [pc, #356]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a58      	ldr	r2, [pc, #352]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002530:	4b53      	ldr	r3, [pc, #332]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a52      	ldr	r2, [pc, #328]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800253a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253c:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	494d      	ldr	r1, [pc, #308]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d044      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d119      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e07f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d003      	beq.n	8002582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257e:	2b03      	cmp	r3, #3
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002582:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e067      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a2:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4934      	ldr	r1, [pc, #208]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b4:	f7ff f8d2 	bl	800175c <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7ff f8ce 	bl	800175c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e04f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 020c 	and.w	r2, r3, #12
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1eb      	bne.n	80025bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d20c      	bcs.n	800260c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b20      	ldr	r3, [pc, #128]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e032      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4916      	ldr	r1, [pc, #88]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	490e      	ldr	r1, [pc, #56]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800264a:	f000 f821 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 800264e:	4602      	mov	r2, r0
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	490a      	ldr	r1, [pc, #40]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	5ccb      	ldrb	r3, [r1, r3]
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	4a09      	ldr	r2, [pc, #36]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x1c8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff f832 	bl	80016d4 <HAL_InitTick>

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023c00 	.word	0x40023c00
 8002680:	40023800 	.word	0x40023800
 8002684:	08002f40 	.word	0x08002f40
 8002688:	20000000 	.word	0x20000000
 800268c:	20000008 	.word	0x20000008

08002690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002690:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	2300      	movs	r3, #0
 80026a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a8:	4b67      	ldr	r3, [pc, #412]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d00d      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x40>
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	f200 80bd 	bhi.w	8002834 <HAL_RCC_GetSysClockFreq+0x1a4>
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x34>
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d003      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0x3a>
 80026c2:	e0b7      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b61      	ldr	r3, [pc, #388]	; (800284c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026c6:	60bb      	str	r3, [r7, #8]
       break;
 80026c8:	e0b7      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ca:	4b61      	ldr	r3, [pc, #388]	; (8002850 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80026cc:	60bb      	str	r3, [r7, #8]
      break;
 80026ce:	e0b4      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d0:	4b5d      	ldr	r3, [pc, #372]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026da:	4b5b      	ldr	r3, [pc, #364]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d04d      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e6:	4b58      	ldr	r3, [pc, #352]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	099b      	lsrs	r3, r3, #6
 80026ec:	461a      	mov	r2, r3
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	ea02 0800 	and.w	r8, r2, r0
 80026fe:	ea03 0901 	and.w	r9, r3, r1
 8002702:	4640      	mov	r0, r8
 8002704:	4649      	mov	r1, r9
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	014b      	lsls	r3, r1, #5
 8002710:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002714:	0142      	lsls	r2, r0, #5
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	ebb0 0008 	subs.w	r0, r0, r8
 800271e:	eb61 0109 	sbc.w	r1, r1, r9
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	018b      	lsls	r3, r1, #6
 800272c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002730:	0182      	lsls	r2, r0, #6
 8002732:	1a12      	subs	r2, r2, r0
 8002734:	eb63 0301 	sbc.w	r3, r3, r1
 8002738:	f04f 0000 	mov.w	r0, #0
 800273c:	f04f 0100 	mov.w	r1, #0
 8002740:	00d9      	lsls	r1, r3, #3
 8002742:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002746:	00d0      	lsls	r0, r2, #3
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	eb12 0208 	adds.w	r2, r2, r8
 8002750:	eb43 0309 	adc.w	r3, r3, r9
 8002754:	f04f 0000 	mov.w	r0, #0
 8002758:	f04f 0100 	mov.w	r1, #0
 800275c:	0259      	lsls	r1, r3, #9
 800275e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002762:	0250      	lsls	r0, r2, #9
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	461a      	mov	r2, r3
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	f7fd fd28 	bl	80001c8 <__aeabi_uldivmod>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4613      	mov	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e04a      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002782:	4b31      	ldr	r3, [pc, #196]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	099b      	lsrs	r3, r3, #6
 8002788:	461a      	mov	r2, r3
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	ea02 0400 	and.w	r4, r2, r0
 800279a:	ea03 0501 	and.w	r5, r3, r1
 800279e:	4620      	mov	r0, r4
 80027a0:	4629      	mov	r1, r5
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	014b      	lsls	r3, r1, #5
 80027ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027b0:	0142      	lsls	r2, r0, #5
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	1b00      	subs	r0, r0, r4
 80027b8:	eb61 0105 	sbc.w	r1, r1, r5
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	018b      	lsls	r3, r1, #6
 80027c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027ca:	0182      	lsls	r2, r0, #6
 80027cc:	1a12      	subs	r2, r2, r0
 80027ce:	eb63 0301 	sbc.w	r3, r3, r1
 80027d2:	f04f 0000 	mov.w	r0, #0
 80027d6:	f04f 0100 	mov.w	r1, #0
 80027da:	00d9      	lsls	r1, r3, #3
 80027dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027e0:	00d0      	lsls	r0, r2, #3
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	1912      	adds	r2, r2, r4
 80027e8:	eb45 0303 	adc.w	r3, r5, r3
 80027ec:	f04f 0000 	mov.w	r0, #0
 80027f0:	f04f 0100 	mov.w	r1, #0
 80027f4:	0299      	lsls	r1, r3, #10
 80027f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027fa:	0290      	lsls	r0, r2, #10
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	461a      	mov	r2, r3
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	f7fd fcdc 	bl	80001c8 <__aeabi_uldivmod>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4613      	mov	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	3301      	adds	r3, #1
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002830:	60bb      	str	r3, [r7, #8]
      break;
 8002832:	e002      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002836:	60bb      	str	r3, [r7, #8]
      break;
 8002838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283a:	68bb      	ldr	r3, [r7, #8]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	00f42400 	.word	0x00f42400
 8002850:	007a1200 	.word	0x007a1200

08002854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_RCC_GetHCLKFreq+0x14>)
 800285a:	681b      	ldr	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20000000 	.word	0x20000000

0800286c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002870:	f7ff fff0 	bl	8002854 <HAL_RCC_GetHCLKFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	0a9b      	lsrs	r3, r3, #10
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4903      	ldr	r1, [pc, #12]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40023800 	.word	0x40023800
 8002890:	08002f50 	.word	0x08002f50

08002894 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e01c      	b.n	80028e0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	795b      	ldrb	r3, [r3, #5]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d105      	bne.n	80028bc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7fe f936 	bl	8000b28 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 0204 	orr.w	r2, r2, #4
 80028d0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	791b      	ldrb	r3, [r3, #4]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_RNG_GenerateRandomNumber+0x1a>
 80028fe:	2302      	movs	r3, #2
 8002900:	e03d      	b.n	800297e <HAL_RNG_GenerateRandomNumber+0x96>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	795b      	ldrb	r3, [r3, #5]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d12c      	bne.n	800296c <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2202      	movs	r2, #2
 8002916:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002918:	f7fe ff20 	bl	800175c <HAL_GetTick>
 800291c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800291e:	e011      	b.n	8002944 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002920:	f7fe ff1c 	bl	800175c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d90a      	bls.n	8002944 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e01c      	b.n	800297e <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b01      	cmp	r3, #1
 8002950:	d1e6      	bne.n	8002920 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	715a      	strb	r2, [r3, #5]
 800296a:	e004      	b.n	8002976 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2204      	movs	r2, #4
 8002970:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	711a      	strb	r2, [r3, #4]

  return status;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	330c      	adds	r3, #12
 8002992:	4619      	mov	r1, r3
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ffa7 	bl	80028e8 <HAL_RNG_GenerateRandomNumber>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d102      	bne.n	80029a6 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	e000      	b.n	80029a8 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 80029a6:	2300      	movs	r3, #0
  }
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e07b      	b.n	8002aba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d108      	bne.n	80029dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029d2:	d009      	beq.n	80029e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
 80029da:	e005      	b.n	80029e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fe f8b2 	bl	8000b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6c:	ea42 0103 	orr.w	r1, r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	0c1b      	lsrs	r3, r3, #16
 8002a86:	f003 0104 	and.w	r1, r3, #4
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	f003 0210 	and.w	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aa8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b088      	sub	sp, #32
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	603b      	str	r3, [r7, #0]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_SPI_Transmit+0x22>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e126      	b.n	8002d32 <HAL_SPI_Transmit+0x270>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aec:	f7fe fe36 	bl	800175c <HAL_GetTick>
 8002af0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d002      	beq.n	8002b08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b02:	2302      	movs	r3, #2
 8002b04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b06:	e10b      	b.n	8002d20 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_SPI_Transmit+0x52>
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b18:	e102      	b.n	8002d20 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	88fa      	ldrh	r2, [r7, #6]
 8002b32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	88fa      	ldrh	r2, [r7, #6]
 8002b38:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b60:	d10f      	bne.n	8002b82 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	2b40      	cmp	r3, #64	; 0x40
 8002b8e:	d007      	beq.n	8002ba0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ba8:	d14b      	bne.n	8002c42 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_SPI_Transmit+0xf6>
 8002bb2:	8afb      	ldrh	r3, [r7, #22]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d13e      	bne.n	8002c36 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	881a      	ldrh	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	1c9a      	adds	r2, r3, #2
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bdc:	e02b      	b.n	8002c36 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d112      	bne.n	8002c12 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	881a      	ldrh	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	1c9a      	adds	r2, r3, #2
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c10:	e011      	b.n	8002c36 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c12:	f7fe fda3 	bl	800175c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d803      	bhi.n	8002c2a <HAL_SPI_Transmit+0x168>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c28:	d102      	bne.n	8002c30 <HAL_SPI_Transmit+0x16e>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c34:	e074      	b.n	8002d20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1ce      	bne.n	8002bde <HAL_SPI_Transmit+0x11c>
 8002c40:	e04c      	b.n	8002cdc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_SPI_Transmit+0x18e>
 8002c4a:	8afb      	ldrh	r3, [r7, #22]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d140      	bne.n	8002cd2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	7812      	ldrb	r2, [r2, #0]
 8002c5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c76:	e02c      	b.n	8002cd2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d113      	bne.n	8002cae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	330c      	adds	r3, #12
 8002c90:	7812      	ldrb	r2, [r2, #0]
 8002c92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cac:	e011      	b.n	8002cd2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cae:	f7fe fd55 	bl	800175c <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d803      	bhi.n	8002cc6 <HAL_SPI_Transmit+0x204>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cc4:	d102      	bne.n	8002ccc <HAL_SPI_Transmit+0x20a>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cd0:	e026      	b.n	8002d20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1cd      	bne.n	8002c78 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	6839      	ldr	r1, [r7, #0]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f8b3 	bl	8002e4c <SPI_EndRxTxTransaction>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	77fb      	strb	r3, [r7, #31]
 8002d1c:	e000      	b.n	8002d20 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002d1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d30:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3720      	adds	r7, #32
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d4c:	f7fe fd06 	bl	800175c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	4413      	add	r3, r2
 8002d5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d5c:	f7fe fcfe 	bl	800175c <HAL_GetTick>
 8002d60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d62:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	015b      	lsls	r3, r3, #5
 8002d68:	0d1b      	lsrs	r3, r3, #20
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	fb02 f303 	mul.w	r3, r2, r3
 8002d70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d72:	e054      	b.n	8002e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d7a:	d050      	beq.n	8002e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d7c:	f7fe fcee 	bl	800175c <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d902      	bls.n	8002d92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d13d      	bne.n	8002e0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002da0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002daa:	d111      	bne.n	8002dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db4:	d004      	beq.n	8002dc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dbe:	d107      	bne.n	8002dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd8:	d10f      	bne.n	8002dfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002df8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e017      	b.n	8002e3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4013      	ands	r3, r2
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2301      	moveq	r3, #1
 8002e30:	2300      	movne	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d19b      	bne.n	8002d74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000000 	.word	0x20000000

08002e4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <SPI_EndRxTxTransaction+0x7c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ecc <SPI_EndRxTxTransaction+0x80>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	0d5b      	lsrs	r3, r3, #21
 8002e64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e68:	fb02 f303 	mul.w	r3, r2, r3
 8002e6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e76:	d112      	bne.n	8002e9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2180      	movs	r1, #128	; 0x80
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f7ff ff5a 	bl	8002d3c <SPI_WaitFlagStateUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d016      	beq.n	8002ebc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	f043 0220 	orr.w	r2, r3, #32
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e00f      	b.n	8002ebe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb4:	2b80      	cmp	r3, #128	; 0x80
 8002eb6:	d0f2      	beq.n	8002e9e <SPI_EndRxTxTransaction+0x52>
 8002eb8:	e000      	b.n	8002ebc <SPI_EndRxTxTransaction+0x70>
        break;
 8002eba:	bf00      	nop
  }

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000000 	.word	0x20000000
 8002ecc:	165e9f81 	.word	0x165e9f81

08002ed0 <__libc_init_array>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	4d0d      	ldr	r5, [pc, #52]	; (8002f08 <__libc_init_array+0x38>)
 8002ed4:	4c0d      	ldr	r4, [pc, #52]	; (8002f0c <__libc_init_array+0x3c>)
 8002ed6:	1b64      	subs	r4, r4, r5
 8002ed8:	10a4      	asrs	r4, r4, #2
 8002eda:	2600      	movs	r6, #0
 8002edc:	42a6      	cmp	r6, r4
 8002ede:	d109      	bne.n	8002ef4 <__libc_init_array+0x24>
 8002ee0:	4d0b      	ldr	r5, [pc, #44]	; (8002f10 <__libc_init_array+0x40>)
 8002ee2:	4c0c      	ldr	r4, [pc, #48]	; (8002f14 <__libc_init_array+0x44>)
 8002ee4:	f000 f820 	bl	8002f28 <_init>
 8002ee8:	1b64      	subs	r4, r4, r5
 8002eea:	10a4      	asrs	r4, r4, #2
 8002eec:	2600      	movs	r6, #0
 8002eee:	42a6      	cmp	r6, r4
 8002ef0:	d105      	bne.n	8002efe <__libc_init_array+0x2e>
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
 8002ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef8:	4798      	blx	r3
 8002efa:	3601      	adds	r6, #1
 8002efc:	e7ee      	b.n	8002edc <__libc_init_array+0xc>
 8002efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f02:	4798      	blx	r3
 8002f04:	3601      	adds	r6, #1
 8002f06:	e7f2      	b.n	8002eee <__libc_init_array+0x1e>
 8002f08:	08002f60 	.word	0x08002f60
 8002f0c:	08002f60 	.word	0x08002f60
 8002f10:	08002f60 	.word	0x08002f60
 8002f14:	08002f64 	.word	0x08002f64

08002f18 <memset>:
 8002f18:	4402      	add	r2, r0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d100      	bne.n	8002f22 <memset+0xa>
 8002f20:	4770      	bx	lr
 8002f22:	f803 1b01 	strb.w	r1, [r3], #1
 8002f26:	e7f9      	b.n	8002f1c <memset+0x4>

08002f28 <_init>:
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2a:	bf00      	nop
 8002f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2e:	bc08      	pop	{r3}
 8002f30:	469e      	mov	lr, r3
 8002f32:	4770      	bx	lr

08002f34 <_fini>:
 8002f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f36:	bf00      	nop
 8002f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f3a:	bc08      	pop	{r3}
 8002f3c:	469e      	mov	lr, r3
 8002f3e:	4770      	bx	lr
