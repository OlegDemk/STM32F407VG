
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800acf8  0800acf8  0001acf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b130  0800b130  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b130  0800b130  0001b130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b138  0800b138  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b138  0800b138  0001b138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b13c  0800b13c  0001b13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800b140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000984  2000009c  0800b1dc  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  0800b1dc  00020a20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023bc5  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bf1  00000000  00000000  00043c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  00048888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f8  00000000  00000000  0004a150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cc8  00000000  00000000  0004b848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b78  00000000  00000000  00071510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4ec1  00000000  00000000  00094088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00168f49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a38  00000000  00000000  00168f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ace0 	.word	0x0800ace0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	0800ace0 	.word	0x0800ace0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b08b      	sub	sp, #44	; 0x2c
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4604      	mov	r4, r0
 80004c8:	4608      	mov	r0, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	461a      	mov	r2, r3
 80004ce:	4623      	mov	r3, r4
 80004d0:	80fb      	strh	r3, [r7, #6]
 80004d2:	4603      	mov	r3, r0
 80004d4:	80bb      	strh	r3, [r7, #4]
 80004d6:	460b      	mov	r3, r1
 80004d8:	807b      	strh	r3, [r7, #2]
 80004da:	4613      	mov	r3, r2
 80004dc:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80004de:	887b      	ldrh	r3, [r7, #2]
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80004e6:	887b      	ldrh	r3, [r7, #2]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	f1c3 0301 	rsb	r3, r3, #1
 80004ee:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80004f8:	e061      	b.n	80005be <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80004fa:	88fa      	ldrh	r2, [r7, #6]
 80004fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	613b      	str	r3, [r7, #16]
 8000502:	e018      	b.n	8000536 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	b298      	uxth	r0, r3
 8000508:	6a3b      	ldr	r3, [r7, #32]
 800050a:	b29a      	uxth	r2, r3
 800050c:	88bb      	ldrh	r3, [r7, #4]
 800050e:	4413      	add	r3, r2
 8000510:	b29b      	uxth	r3, r3
 8000512:	883a      	ldrh	r2, [r7, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	f000 fc0b 	bl	8000d30 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	b298      	uxth	r0, r3
 800051e:	6a3b      	ldr	r3, [r7, #32]
 8000520:	b29b      	uxth	r3, r3
 8000522:	88ba      	ldrh	r2, [r7, #4]
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	b29b      	uxth	r3, r3
 8000528:	883a      	ldrh	r2, [r7, #0]
 800052a:	4619      	mov	r1, r3
 800052c:	f000 fc00 	bl	8000d30 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	3301      	adds	r3, #1
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	88fa      	ldrh	r2, [r7, #6]
 8000538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053a:	4413      	add	r3, r2
 800053c:	693a      	ldr	r2, [r7, #16]
 800053e:	429a      	cmp	r2, r3
 8000540:	dde0      	ble.n	8000504 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8000542:	88fa      	ldrh	r2, [r7, #6]
 8000544:	6a3b      	ldr	r3, [r7, #32]
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e018      	b.n	800057e <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	b298      	uxth	r0, r3
 8000550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000552:	b29a      	uxth	r2, r3
 8000554:	88bb      	ldrh	r3, [r7, #4]
 8000556:	4413      	add	r3, r2
 8000558:	b29b      	uxth	r3, r3
 800055a:	883a      	ldrh	r2, [r7, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	f000 fbe7 	bl	8000d30 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	b298      	uxth	r0, r3
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	b29b      	uxth	r3, r3
 800056a:	88ba      	ldrh	r2, [r7, #4]
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	b29b      	uxth	r3, r3
 8000570:	883a      	ldrh	r2, [r7, #0]
 8000572:	4619      	mov	r1, r3
 8000574:	f000 fbdc 	bl	8000d30 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	88fa      	ldrh	r2, [r7, #6]
 8000580:	6a3b      	ldr	r3, [r7, #32]
 8000582:	4413      	add	r3, r2
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	429a      	cmp	r2, r3
 8000588:	dde0      	ble.n	800054c <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800058a:	6a3b      	ldr	r3, [r7, #32]
 800058c:	3301      	adds	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000590:	697a      	ldr	r2, [r7, #20]
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	4413      	add	r3, r2
 8000596:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	3302      	adds	r3, #2
 800059c:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	005a      	lsls	r2, r3, #1
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	4413      	add	r3, r2
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	dd09      	ble.n	80005be <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	3b01      	subs	r3, #1
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	4413      	add	r3, r2
 80005b6:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	3302      	adds	r3, #2
 80005bc:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80005be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005c0:	6a3b      	ldr	r3, [r7, #32]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	da99      	bge.n	80004fa <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80005c6:	bf00      	nop
 80005c8:	bf00      	nop
 80005ca:	372c      	adds	r7, #44	; 0x2c
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd90      	pop	{r4, r7, pc}

080005d0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	4604      	mov	r4, r0
 80005d8:	4608      	mov	r0, r1
 80005da:	4611      	mov	r1, r2
 80005dc:	461a      	mov	r2, r3
 80005de:	4623      	mov	r3, r4
 80005e0:	71fb      	strb	r3, [r7, #7]
 80005e2:	4603      	mov	r3, r0
 80005e4:	80bb      	strh	r3, [r7, #4]
 80005e6:	460b      	mov	r3, r1
 80005e8:	71bb      	strb	r3, [r7, #6]
 80005ea:	4613      	mov	r3, r2
 80005ec:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	2b1f      	cmp	r3, #31
 80005f6:	d902      	bls.n	80005fe <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	3b20      	subs	r3, #32
 80005fc:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80005fe:	2300      	movs	r3, #0
 8000600:	753b      	strb	r3, [r7, #20]
 8000602:	e012      	b.n	800062a <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 8000604:	7dfa      	ldrb	r2, [r7, #23]
 8000606:	7d38      	ldrb	r0, [r7, #20]
 8000608:	7d39      	ldrb	r1, [r7, #20]
 800060a:	4c3b      	ldr	r4, [pc, #236]	; (80006f8 <ILI9341_Draw_Char+0x128>)
 800060c:	4613      	mov	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	4413      	add	r3, r2
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	4423      	add	r3, r4
 8000616:	4403      	add	r3, r0
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	440b      	add	r3, r1
 8000620:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000624:	7d3b      	ldrb	r3, [r7, #20]
 8000626:	3301      	adds	r3, #1
 8000628:	753b      	strb	r3, [r7, #20]
 800062a:	7d3b      	ldrb	r3, [r7, #20]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d9e9      	bls.n	8000604 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	b299      	uxth	r1, r3
 8000634:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000636:	461a      	mov	r2, r3
 8000638:	0052      	lsls	r2, r2, #1
 800063a:	4413      	add	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	b29a      	uxth	r2, r3
 8000640:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	b29c      	uxth	r4, r3
 8000646:	88b8      	ldrh	r0, [r7, #4]
 8000648:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	4623      	mov	r3, r4
 800064e:	f000 fc37 	bl	8000ec0 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000652:	2300      	movs	r3, #0
 8000654:	757b      	strb	r3, [r7, #21]
 8000656:	e046      	b.n	80006e6 <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000658:	2300      	movs	r3, #0
 800065a:	75bb      	strb	r3, [r7, #22]
 800065c:	e03d      	b.n	80006da <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 800065e:	7d7b      	ldrb	r3, [r7, #21]
 8000660:	f107 0218 	add.w	r2, r7, #24
 8000664:	4413      	add	r3, r2
 8000666:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800066a:	461a      	mov	r2, r3
 800066c:	7dbb      	ldrb	r3, [r7, #22]
 800066e:	fa42 f303 	asr.w	r3, r2, r3
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	2b00      	cmp	r3, #0
 8000678:	d02c      	beq.n	80006d4 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 800067a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800067c:	2b01      	cmp	r3, #1
 800067e:	d10f      	bne.n	80006a0 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000680:	7d7b      	ldrb	r3, [r7, #21]
 8000682:	b29a      	uxth	r2, r3
 8000684:	88bb      	ldrh	r3, [r7, #4]
 8000686:	4413      	add	r3, r2
 8000688:	b298      	uxth	r0, r3
 800068a:	79bb      	ldrb	r3, [r7, #6]
 800068c:	b29a      	uxth	r2, r3
 800068e:	7dbb      	ldrb	r3, [r7, #22]
 8000690:	b29b      	uxth	r3, r3
 8000692:	4413      	add	r3, r2
 8000694:	b29b      	uxth	r3, r3
 8000696:	887a      	ldrh	r2, [r7, #2]
 8000698:	4619      	mov	r1, r3
 800069a:	f000 fb49 	bl	8000d30 <ILI9341_Draw_Pixel>
 800069e:	e019      	b.n	80006d4 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80006a0:	7d7b      	ldrb	r3, [r7, #21]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80006a6:	fb12 f303 	smulbb	r3, r2, r3
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	88bb      	ldrh	r3, [r7, #4]
 80006ae:	4413      	add	r3, r2
 80006b0:	b298      	uxth	r0, r3
 80006b2:	79bb      	ldrb	r3, [r7, #6]
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	7dbb      	ldrb	r3, [r7, #22]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80006bc:	fb11 f303 	smulbb	r3, r1, r3
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	4413      	add	r3, r2
 80006c4:	b299      	uxth	r1, r3
 80006c6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80006c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80006ca:	887b      	ldrh	r3, [r7, #2]
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	4623      	mov	r3, r4
 80006d0:	f000 fbf6 	bl	8000ec0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80006d4:	7dbb      	ldrb	r3, [r7, #22]
 80006d6:	3301      	adds	r3, #1
 80006d8:	75bb      	strb	r3, [r7, #22]
 80006da:	7dbb      	ldrb	r3, [r7, #22]
 80006dc:	2b07      	cmp	r3, #7
 80006de:	d9be      	bls.n	800065e <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 80006e0:	7d7b      	ldrb	r3, [r7, #21]
 80006e2:	3301      	adds	r3, #1
 80006e4:	757b      	strb	r3, [r7, #21]
 80006e6:	7d7b      	ldrb	r3, [r7, #21]
 80006e8:	2b05      	cmp	r3, #5
 80006ea:	d9b5      	bls.n	8000658 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	371c      	adds	r7, #28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd90      	pop	{r4, r7, pc}
 80006f6:	bf00      	nop
 80006f8:	0800ad88 	.word	0x0800ad88

080006fc <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b087      	sub	sp, #28
 8000700:	af02      	add	r7, sp, #8
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	4608      	mov	r0, r1
 8000706:	4611      	mov	r1, r2
 8000708:	461a      	mov	r2, r3
 800070a:	4603      	mov	r3, r0
 800070c:	817b      	strh	r3, [r7, #10]
 800070e:	460b      	mov	r3, r1
 8000710:	727b      	strb	r3, [r7, #9]
 8000712:	4613      	mov	r3, r2
 8000714:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8000716:	e016      	b.n	8000746 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	60fa      	str	r2, [r7, #12]
 800071e:	7818      	ldrb	r0, [r3, #0]
 8000720:	88fc      	ldrh	r4, [r7, #6]
 8000722:	7a7a      	ldrb	r2, [r7, #9]
 8000724:	8979      	ldrh	r1, [r7, #10]
 8000726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000728:	9301      	str	r3, [sp, #4]
 800072a:	8c3b      	ldrh	r3, [r7, #32]
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	4623      	mov	r3, r4
 8000730:	f7ff ff4e 	bl	80005d0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000734:	8c3b      	ldrh	r3, [r7, #32]
 8000736:	461a      	mov	r2, r3
 8000738:	0052      	lsls	r2, r2, #1
 800073a:	4413      	add	r3, r2
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	b29a      	uxth	r2, r3
 8000740:	897b      	ldrh	r3, [r7, #10]
 8000742:	4413      	add	r3, r2
 8000744:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1e4      	bne.n	8000718 <ILI9341_Draw_Text+0x1c>
    }
}
 800074e:	bf00      	nop
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	bd90      	pop	{r4, r7, pc}

08000758 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800075c:	2200      	movs	r2, #0
 800075e:	2110      	movs	r1, #16
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <ILI9341_SPI_Init+0x14>)
 8000762:	f002 fad3 	bl	8002d0c <HAL_GPIO_WritePin>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800077a:	1df9      	adds	r1, r7, #7
 800077c:	2301      	movs	r3, #1
 800077e:	2201      	movs	r2, #1
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <ILI9341_SPI_Send+0x20>)
 8000782:	f005 fcf6 	bl	8006172 <HAL_SPI_Transmit>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000150 	.word	0x20000150

08000794 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2110      	movs	r1, #16
 80007a2:	480a      	ldr	r0, [pc, #40]	; (80007cc <ILI9341_Write_Command+0x38>)
 80007a4:	f002 fab2 	bl	8002d0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80007a8:	2200      	movs	r2, #0
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	4807      	ldr	r0, [pc, #28]	; (80007cc <ILI9341_Write_Command+0x38>)
 80007ae:	f002 faad 	bl	8002d0c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffdb 	bl	8000770 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80007ba:	2201      	movs	r2, #1
 80007bc:	2110      	movs	r1, #16
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <ILI9341_Write_Command+0x38>)
 80007c0:	f002 faa4 	bl	8002d0c <HAL_GPIO_WritePin>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000

080007d0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80007da:	2201      	movs	r2, #1
 80007dc:	2140      	movs	r1, #64	; 0x40
 80007de:	480a      	ldr	r0, [pc, #40]	; (8000808 <ILI9341_Write_Data+0x38>)
 80007e0:	f002 fa94 	bl	8002d0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2110      	movs	r1, #16
 80007e8:	4807      	ldr	r0, [pc, #28]	; (8000808 <ILI9341_Write_Data+0x38>)
 80007ea:	f002 fa8f 	bl	8002d0c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ffbd 	bl	8000770 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2110      	movs	r1, #16
 80007fa:	4803      	ldr	r0, [pc, #12]	; (8000808 <ILI9341_Write_Data+0x38>)
 80007fc:	f002 fa86 	bl	8002d0c <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000

0800080c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4604      	mov	r4, r0
 8000814:	4608      	mov	r0, r1
 8000816:	4611      	mov	r1, r2
 8000818:	461a      	mov	r2, r3
 800081a:	4623      	mov	r3, r4
 800081c:	80fb      	strh	r3, [r7, #6]
 800081e:	4603      	mov	r3, r0
 8000820:	80bb      	strh	r3, [r7, #4]
 8000822:	460b      	mov	r3, r1
 8000824:	807b      	strh	r3, [r7, #2]
 8000826:	4613      	mov	r3, r2
 8000828:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800082a:	202a      	movs	r0, #42	; 0x2a
 800082c:	f7ff ffb2 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	0a1b      	lsrs	r3, r3, #8
 8000834:	b29b      	uxth	r3, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ffc9 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ffc4 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	0a1b      	lsrs	r3, r3, #8
 800084c:	b29b      	uxth	r3, r3
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ffbd 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000856:	887b      	ldrh	r3, [r7, #2]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ffb8 	bl	80007d0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000860:	202b      	movs	r0, #43	; 0x2b
 8000862:	f7ff ff97 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000866:	88bb      	ldrh	r3, [r7, #4]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	b29b      	uxth	r3, r3
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ffae 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000874:	88bb      	ldrh	r3, [r7, #4]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ffa9 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800087e:	883b      	ldrh	r3, [r7, #0]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	b29b      	uxth	r3, r3
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ffa2 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800088c:	883b      	ldrh	r3, [r7, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff9d 	bl	80007d0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000896:	202c      	movs	r0, #44	; 0x2c
 8000898:	f7ff ff7c 	bl	8000794 <ILI9341_Write_Command>
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd90      	pop	{r4, r7, pc}

080008a4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2120      	movs	r1, #32
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <ILI9341_Reset+0x34>)
 80008ae:	f002 fa2d 	bl	8002d0c <HAL_GPIO_WritePin>
HAL_Delay(200);
 80008b2:	20c8      	movs	r0, #200	; 0xc8
 80008b4:	f001 ff40 	bl	8002738 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2110      	movs	r1, #16
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <ILI9341_Reset+0x34>)
 80008be:	f002 fa25 	bl	8002d0c <HAL_GPIO_WritePin>
HAL_Delay(200);
 80008c2:	20c8      	movs	r0, #200	; 0xc8
 80008c4:	f001 ff38 	bl	8002738 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80008c8:	2201      	movs	r2, #1
 80008ca:	2120      	movs	r1, #32
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <ILI9341_Reset+0x34>)
 80008ce:	f002 fa1d 	bl	8002d0c <HAL_GPIO_WritePin>
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80008ea:	2036      	movs	r0, #54	; 0x36
 80008ec:	f7ff ff52 	bl	8000794 <ILI9341_Write_Command>
HAL_Delay(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f001 ff21 	bl	8002738 <HAL_Delay>
	
switch(screen_rotation) 
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d837      	bhi.n	800096c <ILI9341_Set_Rotation+0x90>
 80008fc:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <ILI9341_Set_Rotation+0x28>)
 80008fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000902:	bf00      	nop
 8000904:	08000915 	.word	0x08000915
 8000908:	0800092b 	.word	0x0800092b
 800090c:	08000941 	.word	0x08000941
 8000910:	08000957 	.word	0x08000957
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000914:	2048      	movs	r0, #72	; 0x48
 8000916:	f7ff ff5b 	bl	80007d0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <ILI9341_Set_Rotation+0x9c>)
 800091c:	22f0      	movs	r2, #240	; 0xf0
 800091e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <ILI9341_Set_Rotation+0xa0>)
 8000922:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000926:	801a      	strh	r2, [r3, #0]
			break;
 8000928:	e021      	b.n	800096e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800092a:	2028      	movs	r0, #40	; 0x28
 800092c:	f7ff ff50 	bl	80007d0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <ILI9341_Set_Rotation+0x9c>)
 8000932:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000936:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <ILI9341_Set_Rotation+0xa0>)
 800093a:	22f0      	movs	r2, #240	; 0xf0
 800093c:	801a      	strh	r2, [r3, #0]
			break;
 800093e:	e016      	b.n	800096e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000940:	2088      	movs	r0, #136	; 0x88
 8000942:	f7ff ff45 	bl	80007d0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <ILI9341_Set_Rotation+0x9c>)
 8000948:	22f0      	movs	r2, #240	; 0xf0
 800094a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <ILI9341_Set_Rotation+0xa0>)
 800094e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000952:	801a      	strh	r2, [r3, #0]
			break;
 8000954:	e00b      	b.n	800096e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000956:	20e8      	movs	r0, #232	; 0xe8
 8000958:	f7ff ff3a 	bl	80007d0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <ILI9341_Set_Rotation+0x9c>)
 800095e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000962:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <ILI9341_Set_Rotation+0xa0>)
 8000966:	22f0      	movs	r2, #240	; 0xf0
 8000968:	801a      	strh	r2, [r3, #0]
			break;
 800096a:	e000      	b.n	800096e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800096c:	bf00      	nop
	}
}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000002 	.word	0x20000002
 800097c:	20000000 	.word	0x20000000

08000980 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2120      	movs	r1, #32
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <ILI9341_Enable+0x14>)
 800098a:	f002 f9bf 	bl	8002d0c <HAL_GPIO_WritePin>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800099c:	f7ff fff0 	bl	8000980 <ILI9341_Enable>
ILI9341_SPI_Init();
 80009a0:	f7ff feda 	bl	8000758 <ILI9341_SPI_Init>
ILI9341_Reset();
 80009a4:	f7ff ff7e 	bl	80008a4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff fef3 	bl	8000794 <ILI9341_Write_Command>
HAL_Delay(1000);
 80009ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b2:	f001 fec1 	bl	8002738 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80009b6:	20cb      	movs	r0, #203	; 0xcb
 80009b8:	f7ff feec 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80009bc:	2039      	movs	r0, #57	; 0x39
 80009be:	f7ff ff07 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80009c2:	202c      	movs	r0, #44	; 0x2c
 80009c4:	f7ff ff04 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ff01 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80009ce:	2034      	movs	r0, #52	; 0x34
 80009d0:	f7ff fefe 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80009d4:	2002      	movs	r0, #2
 80009d6:	f7ff fefb 	bl	80007d0 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80009da:	20cf      	movs	r0, #207	; 0xcf
 80009dc:	f7ff feda 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff fef5 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80009e6:	20c1      	movs	r0, #193	; 0xc1
 80009e8:	f7ff fef2 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80009ec:	2030      	movs	r0, #48	; 0x30
 80009ee:	f7ff feef 	bl	80007d0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80009f2:	20e8      	movs	r0, #232	; 0xe8
 80009f4:	f7ff fece 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80009f8:	2085      	movs	r0, #133	; 0x85
 80009fa:	f7ff fee9 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff fee6 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000a04:	2078      	movs	r0, #120	; 0x78
 8000a06:	f7ff fee3 	bl	80007d0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000a0a:	20ea      	movs	r0, #234	; 0xea
 8000a0c:	f7ff fec2 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fedd 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff feda 	bl	80007d0 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000a1c:	20ed      	movs	r0, #237	; 0xed
 8000a1e:	f7ff feb9 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000a22:	2064      	movs	r0, #100	; 0x64
 8000a24:	f7ff fed4 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f7ff fed1 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000a2e:	2012      	movs	r0, #18
 8000a30:	f7ff fece 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000a34:	2081      	movs	r0, #129	; 0x81
 8000a36:	f7ff fecb 	bl	80007d0 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000a3a:	20f7      	movs	r0, #247	; 0xf7
 8000a3c:	f7ff feaa 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000a40:	2020      	movs	r0, #32
 8000a42:	f7ff fec5 	bl	80007d0 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000a46:	20c0      	movs	r0, #192	; 0xc0
 8000a48:	f7ff fea4 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000a4c:	2023      	movs	r0, #35	; 0x23
 8000a4e:	f7ff febf 	bl	80007d0 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000a52:	20c1      	movs	r0, #193	; 0xc1
 8000a54:	f7ff fe9e 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000a58:	2010      	movs	r0, #16
 8000a5a:	f7ff feb9 	bl	80007d0 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000a5e:	20c5      	movs	r0, #197	; 0xc5
 8000a60:	f7ff fe98 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000a64:	203e      	movs	r0, #62	; 0x3e
 8000a66:	f7ff feb3 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000a6a:	2028      	movs	r0, #40	; 0x28
 8000a6c:	f7ff feb0 	bl	80007d0 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000a70:	20c7      	movs	r0, #199	; 0xc7
 8000a72:	f7ff fe8f 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000a76:	2086      	movs	r0, #134	; 0x86
 8000a78:	f7ff feaa 	bl	80007d0 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000a7c:	2036      	movs	r0, #54	; 0x36
 8000a7e:	f7ff fe89 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000a82:	2048      	movs	r0, #72	; 0x48
 8000a84:	f7ff fea4 	bl	80007d0 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000a88:	203a      	movs	r0, #58	; 0x3a
 8000a8a:	f7ff fe83 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000a8e:	2055      	movs	r0, #85	; 0x55
 8000a90:	f7ff fe9e 	bl	80007d0 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000a94:	20b1      	movs	r0, #177	; 0xb1
 8000a96:	f7ff fe7d 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fe98 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000aa0:	2018      	movs	r0, #24
 8000aa2:	f7ff fe95 	bl	80007d0 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000aa6:	20b6      	movs	r0, #182	; 0xb6
 8000aa8:	f7ff fe74 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000aac:	2008      	movs	r0, #8
 8000aae:	f7ff fe8f 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000ab2:	2082      	movs	r0, #130	; 0x82
 8000ab4:	f7ff fe8c 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000ab8:	2027      	movs	r0, #39	; 0x27
 8000aba:	f7ff fe89 	bl	80007d0 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000abe:	20f2      	movs	r0, #242	; 0xf2
 8000ac0:	f7ff fe68 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff fe83 	bl	80007d0 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000aca:	2026      	movs	r0, #38	; 0x26
 8000acc:	f7ff fe62 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff fe7d 	bl	80007d0 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000ad6:	20e0      	movs	r0, #224	; 0xe0
 8000ad8:	f7ff fe5c 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000adc:	200f      	movs	r0, #15
 8000ade:	f7ff fe77 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000ae2:	2031      	movs	r0, #49	; 0x31
 8000ae4:	f7ff fe74 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000ae8:	202b      	movs	r0, #43	; 0x2b
 8000aea:	f7ff fe71 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000aee:	200c      	movs	r0, #12
 8000af0:	f7ff fe6e 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000af4:	200e      	movs	r0, #14
 8000af6:	f7ff fe6b 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000afa:	2008      	movs	r0, #8
 8000afc:	f7ff fe68 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000b00:	204e      	movs	r0, #78	; 0x4e
 8000b02:	f7ff fe65 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000b06:	20f1      	movs	r0, #241	; 0xf1
 8000b08:	f7ff fe62 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000b0c:	2037      	movs	r0, #55	; 0x37
 8000b0e:	f7ff fe5f 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000b12:	2007      	movs	r0, #7
 8000b14:	f7ff fe5c 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000b18:	2010      	movs	r0, #16
 8000b1a:	f7ff fe59 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f7ff fe56 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000b24:	200e      	movs	r0, #14
 8000b26:	f7ff fe53 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000b2a:	2009      	movs	r0, #9
 8000b2c:	f7ff fe50 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000b30:	2000      	movs	r0, #0
 8000b32:	f7ff fe4d 	bl	80007d0 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000b36:	20e1      	movs	r0, #225	; 0xe1
 8000b38:	f7ff fe2c 	bl	8000794 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff fe47 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff fe44 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000b48:	2014      	movs	r0, #20
 8000b4a:	f7ff fe41 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f7ff fe3e 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000b54:	2011      	movs	r0, #17
 8000b56:	f7ff fe3b 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000b5a:	2007      	movs	r0, #7
 8000b5c:	f7ff fe38 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000b60:	2031      	movs	r0, #49	; 0x31
 8000b62:	f7ff fe35 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000b66:	20c1      	movs	r0, #193	; 0xc1
 8000b68:	f7ff fe32 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000b6c:	2048      	movs	r0, #72	; 0x48
 8000b6e:	f7ff fe2f 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000b72:	2008      	movs	r0, #8
 8000b74:	f7ff fe2c 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000b78:	200f      	movs	r0, #15
 8000b7a:	f7ff fe29 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000b7e:	200c      	movs	r0, #12
 8000b80:	f7ff fe26 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000b84:	2031      	movs	r0, #49	; 0x31
 8000b86:	f7ff fe23 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000b8a:	2036      	movs	r0, #54	; 0x36
 8000b8c:	f7ff fe20 	bl	80007d0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000b90:	200f      	movs	r0, #15
 8000b92:	f7ff fe1d 	bl	80007d0 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000b96:	2011      	movs	r0, #17
 8000b98:	f7ff fdfc 	bl	8000794 <ILI9341_Write_Command>
HAL_Delay(120);
 8000b9c:	2078      	movs	r0, #120	; 0x78
 8000b9e:	f001 fdcb 	bl	8002738 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000ba2:	2029      	movs	r0, #41	; 0x29
 8000ba4:	f7ff fdf6 	bl	8000794 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f7ff fe97 	bl	80008dc <ILI9341_Set_Rotation>

HAL_Delay(10);
 8000bae:	200a      	movs	r0, #10
 8000bb0:	f001 fdc2 	bl	8002738 <HAL_Delay>
//
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	80fb      	strh	r3, [r7, #6]
 8000bc4:	466b      	mov	r3, sp
 8000bc6:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bd4:	d202      	bcs.n	8000bdc <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bda:	e002      	b.n	8000be2 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000bdc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000be2:	2201      	movs	r2, #1
 8000be4:	2140      	movs	r1, #64	; 0x40
 8000be6:	483d      	ldr	r0, [pc, #244]	; (8000cdc <ILI9341_Draw_Colour_Burst+0x124>)
 8000be8:	f002 f890 	bl	8002d0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2110      	movs	r1, #16
 8000bf0:	483a      	ldr	r0, [pc, #232]	; (8000cdc <ILI9341_Draw_Colour_Burst+0x124>)
 8000bf2:	f002 f88b 	bl	8002d0c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000c00:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000c02:	4623      	mov	r3, r4
 8000c04:	3b01      	subs	r3, #1
 8000c06:	61fb      	str	r3, [r7, #28]
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f04f 0100 	mov.w	r1, #0
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	f04f 0300 	mov.w	r3, #0
 8000c16:	00cb      	lsls	r3, r1, #3
 8000c18:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c1c:	00c2      	lsls	r2, r0, #3
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f04f 0100 	mov.w	r1, #0
 8000c24:	f04f 0200 	mov.w	r2, #0
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	00cb      	lsls	r3, r1, #3
 8000c2e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c32:	00c2      	lsls	r2, r0, #3
 8000c34:	1de3      	adds	r3, r4, #7
 8000c36:	08db      	lsrs	r3, r3, #3
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	ebad 0d03 	sub.w	sp, sp, r3
 8000c3e:	466b      	mov	r3, sp
 8000c40:	3300      	adds	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c48:	e00e      	b.n	8000c68 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4e:	4413      	add	r3, r2
 8000c50:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c54:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c58:	3301      	adds	r3, #1
 8000c5a:	88fa      	ldrh	r2, [r7, #6]
 8000c5c:	b2d1      	uxtb	r1, r2
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c64:	3302      	adds	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d3ec      	bcc.n	8000c4a <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c84:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c8a:	fb01 f202 	mul.w	r2, r1, r2
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d010      	beq.n	8000cba <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c9c:	e009      	b.n	8000cb2 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000c9e:	69b9      	ldr	r1, [r7, #24]
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	230a      	movs	r3, #10
 8000ca6:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <ILI9341_Draw_Colour_Burst+0x128>)
 8000ca8:	f005 fa63 	bl	8006172 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cae:	3301      	adds	r3, #1
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d3f1      	bcc.n	8000c9e <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000cba:	69b9      	ldr	r1, [r7, #24]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	230a      	movs	r3, #10
 8000cc2:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <ILI9341_Draw_Colour_Burst+0x128>)
 8000cc4:	f005 fa55 	bl	8006172 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2110      	movs	r1, #16
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <ILI9341_Draw_Colour_Burst+0x124>)
 8000cce:	f002 f81d 	bl	8002d0c <HAL_GPIO_WritePin>
 8000cd2:	46ad      	mov	sp, r5
}
 8000cd4:	bf00      	nop
 8000cd6:	3730      	adds	r7, #48	; 0x30
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bdb0      	pop	{r4, r5, r7, pc}
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	20000150 	.word	0x20000150

08000ce4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <ILI9341_Fill_Screen+0x44>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <ILI9341_Fill_Screen+0x48>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff fd85 	bl	800080c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <ILI9341_Fill_Screen+0x44>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <ILI9341_Fill_Screen+0x48>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	fb03 f302 	mul.w	r3, r3, r2
 8000d14:	461a      	mov	r2, r3
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff4c 	bl	8000bb8 <ILI9341_Draw_Colour_Burst>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000002 	.word	0x20000002
 8000d2c:	20000000 	.word	0x20000000

08000d30 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	80bb      	strh	r3, [r7, #4]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000d42:	4b5b      	ldr	r3, [pc, #364]	; (8000eb0 <ILI9341_Draw_Pixel+0x180>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	88fa      	ldrh	r2, [r7, #6]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	f080 80ac 	bcs.w	8000ea8 <ILI9341_Draw_Pixel+0x178>
 8000d50:	4b58      	ldr	r3, [pc, #352]	; (8000eb4 <ILI9341_Draw_Pixel+0x184>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	88ba      	ldrh	r2, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f080 80a5 	bcs.w	8000ea8 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2140      	movs	r1, #64	; 0x40
 8000d62:	4855      	ldr	r0, [pc, #340]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000d64:	f001 ffd2 	bl	8002d0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	4852      	ldr	r0, [pc, #328]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000d6e:	f001 ffcd 	bl	8002d0c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000d72:	202a      	movs	r0, #42	; 0x2a
 8000d74:	f7ff fcfc 	bl	8000770 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2140      	movs	r1, #64	; 0x40
 8000d7c:	484e      	ldr	r0, [pc, #312]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000d7e:	f001 ffc5 	bl	8002d0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000d82:	2201      	movs	r2, #1
 8000d84:	2110      	movs	r1, #16
 8000d86:	484c      	ldr	r0, [pc, #304]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000d88:	f001 ffc0 	bl	8002d0c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4849      	ldr	r0, [pc, #292]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000d92:	f001 ffbb 	bl	8002d0c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	753b      	strb	r3, [r7, #20]
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	757b      	strb	r3, [r7, #21]
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	3301      	adds	r3, #1
 8000daa:	121b      	asrs	r3, r3, #8
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	75bb      	strb	r3, [r7, #22]
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	3301      	adds	r3, #1
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000dba:	f107 0114 	add.w	r1, r7, #20
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	483e      	ldr	r0, [pc, #248]	; (8000ebc <ILI9341_Draw_Pixel+0x18c>)
 8000dc4:	f005 f9d5 	bl	8006172 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2110      	movs	r1, #16
 8000dcc:	483a      	ldr	r0, [pc, #232]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000dce:	f001 ff9d 	bl	8002d0c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2140      	movs	r1, #64	; 0x40
 8000dd6:	4838      	ldr	r0, [pc, #224]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000dd8:	f001 ff98 	bl	8002d0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2110      	movs	r1, #16
 8000de0:	4835      	ldr	r0, [pc, #212]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000de2:	f001 ff93 	bl	8002d0c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000de6:	202b      	movs	r0, #43	; 0x2b
 8000de8:	f7ff fcc2 	bl	8000770 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000dec:	2201      	movs	r2, #1
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	4831      	ldr	r0, [pc, #196]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000df2:	f001 ff8b 	bl	8002d0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000df6:	2201      	movs	r2, #1
 8000df8:	2110      	movs	r1, #16
 8000dfa:	482f      	ldr	r0, [pc, #188]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000dfc:	f001 ff86 	bl	8002d0c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2110      	movs	r1, #16
 8000e04:	482c      	ldr	r0, [pc, #176]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e06:	f001 ff81 	bl	8002d0c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000e0a:	88bb      	ldrh	r3, [r7, #4]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	743b      	strb	r3, [r7, #16]
 8000e14:	88bb      	ldrh	r3, [r7, #4]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	747b      	strb	r3, [r7, #17]
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	121b      	asrs	r3, r3, #8
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	74bb      	strb	r3, [r7, #18]
 8000e24:	88bb      	ldrh	r3, [r7, #4]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	3301      	adds	r3, #1
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000e2e:	f107 0110 	add.w	r1, r7, #16
 8000e32:	2301      	movs	r3, #1
 8000e34:	2204      	movs	r2, #4
 8000e36:	4821      	ldr	r0, [pc, #132]	; (8000ebc <ILI9341_Draw_Pixel+0x18c>)
 8000e38:	f005 f99b 	bl	8006172 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2110      	movs	r1, #16
 8000e40:	481d      	ldr	r0, [pc, #116]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e42:	f001 ff63 	bl	8002d0c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000e46:	2200      	movs	r2, #0
 8000e48:	2140      	movs	r1, #64	; 0x40
 8000e4a:	481b      	ldr	r0, [pc, #108]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e4c:	f001 ff5e 	bl	8002d0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000e50:	2200      	movs	r2, #0
 8000e52:	2110      	movs	r1, #16
 8000e54:	4818      	ldr	r0, [pc, #96]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e56:	f001 ff59 	bl	8002d0c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000e5a:	202c      	movs	r0, #44	; 0x2c
 8000e5c:	f7ff fc88 	bl	8000770 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000e60:	2201      	movs	r2, #1
 8000e62:	2140      	movs	r1, #64	; 0x40
 8000e64:	4814      	ldr	r0, [pc, #80]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e66:	f001 ff51 	bl	8002d0c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	4812      	ldr	r0, [pc, #72]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e70:	f001 ff4c 	bl	8002d0c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2110      	movs	r1, #16
 8000e78:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000e7a:	f001 ff47 	bl	8002d0c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	733b      	strb	r3, [r7, #12]
 8000e88:	887b      	ldrh	r3, [r7, #2]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000e8e:	f107 010c 	add.w	r1, r7, #12
 8000e92:	2301      	movs	r3, #1
 8000e94:	2202      	movs	r2, #2
 8000e96:	4809      	ldr	r0, [pc, #36]	; (8000ebc <ILI9341_Draw_Pixel+0x18c>)
 8000e98:	f005 f96b 	bl	8006172 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <ILI9341_Draw_Pixel+0x188>)
 8000ea2:	f001 ff33 	bl	8002d0c <HAL_GPIO_WritePin>
 8000ea6:	e000      	b.n	8000eaa <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000ea8:	bf00      	nop
	
}
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000002 	.word	0x20000002
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	20000150 	.word	0x20000150

08000ec0 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	4608      	mov	r0, r1
 8000eca:	4611      	mov	r1, r2
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4623      	mov	r3, r4
 8000ed0:	80fb      	strh	r3, [r7, #6]
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80bb      	strh	r3, [r7, #4]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	807b      	strh	r3, [r7, #2]
 8000eda:	4613      	mov	r3, r2
 8000edc:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000ede:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <ILI9341_Draw_Rectangle+0xb0>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	88fa      	ldrh	r2, [r7, #6]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d23d      	bcs.n	8000f66 <ILI9341_Draw_Rectangle+0xa6>
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <ILI9341_Draw_Rectangle+0xb4>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	88ba      	ldrh	r2, [r7, #4]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d237      	bcs.n	8000f66 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8000ef6:	88fa      	ldrh	r2, [r7, #6]
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <ILI9341_Draw_Rectangle+0xb0>)
 8000efe:	8812      	ldrh	r2, [r2, #0]
 8000f00:	b292      	uxth	r2, r2
 8000f02:	4293      	cmp	r3, r2
 8000f04:	dd05      	ble.n	8000f12 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <ILI9341_Draw_Rectangle+0xb0>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8000f12:	88ba      	ldrh	r2, [r7, #4]
 8000f14:	883b      	ldrh	r3, [r7, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <ILI9341_Draw_Rectangle+0xb4>)
 8000f1a:	8812      	ldrh	r2, [r2, #0]
 8000f1c:	b292      	uxth	r2, r2
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	dd05      	ble.n	8000f2e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <ILI9341_Draw_Rectangle+0xb4>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	88bb      	ldrh	r3, [r7, #4]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000f2e:	88fa      	ldrh	r2, [r7, #6]
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	4413      	add	r3, r2
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	3b01      	subs	r3, #1
 8000f38:	b29c      	uxth	r4, r3
 8000f3a:	88ba      	ldrh	r2, [r7, #4]
 8000f3c:	883b      	ldrh	r3, [r7, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	3b01      	subs	r3, #1
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	88b9      	ldrh	r1, [r7, #4]
 8000f48:	88f8      	ldrh	r0, [r7, #6]
 8000f4a:	4622      	mov	r2, r4
 8000f4c:	f7ff fc5e 	bl	800080c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000f50:	883b      	ldrh	r3, [r7, #0]
 8000f52:	887a      	ldrh	r2, [r7, #2]
 8000f54:	fb02 f303 	mul.w	r3, r2, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	8b3b      	ldrh	r3, [r7, #24]
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fe2a 	bl	8000bb8 <ILI9341_Draw_Colour_Burst>
 8000f64:	e000      	b.n	8000f68 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000f66:	bf00      	nop
}
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd90      	pop	{r4, r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000002 	.word	0x20000002
 8000f74:	20000000 	.word	0x20000000

08000f78 <menu>:


bool flagPressed = false;						// flag presed key

void menu()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
//	bool flagPressed = false;						// flag presed key
	//Menu_Navigate(&Menu_1);			// <<<<<<< What ti i????????????????????????
	Menu_SetGenericWriteCallback(Generic_Write);
 8000f7e:	482e      	ldr	r0, [pc, #184]	; (8001038 <menu+0xc0>)
 8000f80:	f000 f952 	bl	8001228 <Menu_SetGenericWriteCallback>
	Menu_Navigate(&Menu_1);
 8000f84:	482d      	ldr	r0, [pc, #180]	; (800103c <menu+0xc4>)
 8000f86:	f000 f921 	bl	80011cc <Menu_Navigate>
	while (1)
	  {
	   uint8_t pressed_key = getPressKey();
 8000f8a:	f000 f85b 	bl	8001044 <getPressKey>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]

	   if (pressed_key != BUTTON_NOTHING && !flagPressed)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2bff      	cmp	r3, #255	; 0xff
 8000f96:	d042      	beq.n	800101e <menu+0xa6>
 8000f98:	4b29      	ldr	r3, [pc, #164]	; (8001040 <menu+0xc8>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	f083 0301 	eor.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d03b      	beq.n	800101e <menu+0xa6>
	   {
//		    Menu_Navigate(&Menu_1);			// <<<<<<< What ti i????????????????????????
			//Menu_SetGenericWriteCallback(Generic_Write);	// print menu
			flagPressed = true;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <menu+0xc8>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
			pressed_key = getPressKey();
 8000fac:	f000 f84a 	bl	8001044 <getPressKey>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]
			switch(pressed_key)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d82f      	bhi.n	800101a <menu+0xa2>
 8000fba:	a201      	add	r2, pc, #4	; (adr r2, 8000fc0 <menu+0x48>)
 8000fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc0:	08000fd5 	.word	0x08000fd5
 8000fc4:	08000fe5 	.word	0x08000fe5
 8000fc8:	08000ff5 	.word	0x08000ff5
 8000fcc:	08001005 	.word	0x08001005
 8000fd0:	08001015 	.word	0x08001015
			{
			 case BUTTON_LEFT:
			  Menu_Navigate(MENU_PARENT);
 8000fd4:	f000 f8ee 	bl	80011b4 <Menu_GetCurrentMenu>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 f8f5 	bl	80011cc <Menu_Navigate>
			  break;
 8000fe2:	e01b      	b.n	800101c <menu+0xa4>
			 case BUTTON_UP:
			  Menu_Navigate(MENU_PREVIOUS);
 8000fe4:	f000 f8e6 	bl	80011b4 <Menu_GetCurrentMenu>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f8ed 	bl	80011cc <Menu_Navigate>
			  break;
 8000ff2:	e013      	b.n	800101c <menu+0xa4>
			 case BUTTON_DOWN:
			  Menu_Navigate(MENU_NEXT);
 8000ff4:	f000 f8de 	bl	80011b4 <Menu_GetCurrentMenu>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f8e5 	bl	80011cc <Menu_Navigate>
			  break;
 8001002:	e00b      	b.n	800101c <menu+0xa4>
			 case BUTTON_RIGHT:
			  Menu_Navigate(MENU_CHILD);
 8001004:	f000 f8d6 	bl	80011b4 <Menu_GetCurrentMenu>
 8001008:	4603      	mov	r3, r0
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f8dd 	bl	80011cc <Menu_Navigate>
			  break;
 8001012:	e003      	b.n	800101c <menu+0xa4>
			 case BUTTON_SELECT:
			  Menu_EnterCurrentItem();
 8001014:	f000 f91c 	bl	8001250 <Menu_EnterCurrentItem>
			  break;
 8001018:	e000      	b.n	800101c <menu+0xa4>
			 default:
			  break;
 800101a:	bf00      	nop
			switch(pressed_key)
 800101c:	e00b      	b.n	8001036 <menu+0xbe>
			}
	   }
	   else if (getPressKey() == BUTTON_NOTHING && flagPressed)
 800101e:	f000 f811 	bl	8001044 <getPressKey>
 8001022:	4603      	mov	r3, r0
 8001024:	2bff      	cmp	r3, #255	; 0xff
 8001026:	d1b0      	bne.n	8000f8a <menu+0x12>
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <menu+0xc8>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0ac      	beq.n	8000f8a <menu+0x12>
	   {
		   flagPressed = false;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <menu+0xc8>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
	  {
 8001036:	e7a8      	b.n	8000f8a <menu+0x12>
 8001038:	0800116d 	.word	0x0800116d
 800103c:	0800afe0 	.word	0x0800afe0
 8001040:	200000bc 	.word	0x200000bc

08001044 <getPressKey>:
{
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
}
// -----------------------------------------------------------------------
static uint8_t getPressKey()		// Simulation keyboard
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af02      	add	r7, sp, #8
////	BUTTON_SELECT  = 4,
////	BUTTON_NOTHING  = 255
//	//flagPressed = true;


	char digit = '\0';
 800104a:	2300      	movs	r3, #0
 800104c:	75fb      	strb	r3, [r7, #23]
	char buff_lcd[20] = "KEY: ";
 800104e:	4a46      	ldr	r2, [pc, #280]	; (8001168 <getPressKey+0x124>)
 8001050:	463b      	mov	r3, r7
 8001052:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001056:	6018      	str	r0, [r3, #0]
 8001058:	3304      	adds	r3, #4
 800105a:	8019      	strh	r1, [r3, #0]
 800105c:	1dbb      	adds	r3, r7, #6
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	819a      	strh	r2, [r3, #12]
	digit = read_one_digit_from_keyboard();
 8001068:	f000 f9b4 	bl	80013d4 <read_one_digit_from_keyboard>
 800106c:	4603      	mov	r3, r0
 800106e:	b2db      	uxtb	r3, r3
 8001070:	75fb      	strb	r3, [r7, #23]
	switch(digit)
 8001072:	7dfb      	ldrb	r3, [r7, #23]
 8001074:	3b30      	subs	r3, #48	; 0x30
 8001076:	2b04      	cmp	r3, #4
 8001078:	d870      	bhi.n	800115c <getPressKey+0x118>
 800107a:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <getPressKey+0x3c>)
 800107c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001080:	08001095 	.word	0x08001095
 8001084:	080010bd 	.word	0x080010bd
 8001088:	080010e5 	.word	0x080010e5
 800108c:	0800110d 	.word	0x0800110d
 8001090:	08001135 	.word	0x08001135
	{
		flagPressed = true;			// Flag: Key was pressed
		case '0':
		{
			strncat(buff_lcd, &digit, 1);
 8001094:	f107 0117 	add.w	r1, r7, #23
 8001098:	463b      	mov	r3, r7
 800109a:	2201      	movs	r2, #1
 800109c:	4618      	mov	r0, r3
 800109e:	f009 fdfd 	bl	800ac9c <strncat>
			ILI9341_Draw_Text( buff_lcd, 10, 180, WHITE, 3, BLACK);
 80010a2:	4638      	mov	r0, r7
 80010a4:	2300      	movs	r3, #0
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	2303      	movs	r3, #3
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b0:	22b4      	movs	r2, #180	; 0xb4
 80010b2:	210a      	movs	r1, #10
 80010b4:	f7ff fb22 	bl	80006fc <ILI9341_Draw_Text>
			return BUTTON_LEFT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	e050      	b.n	800115e <getPressKey+0x11a>
		}
		case '1':
		{
			strncat(buff_lcd, &digit, 1);
 80010bc:	f107 0117 	add.w	r1, r7, #23
 80010c0:	463b      	mov	r3, r7
 80010c2:	2201      	movs	r2, #1
 80010c4:	4618      	mov	r0, r3
 80010c6:	f009 fde9 	bl	800ac9c <strncat>
			ILI9341_Draw_Text( buff_lcd, 10, 180, WHITE, 3, BLACK);
 80010ca:	4638      	mov	r0, r7
 80010cc:	2300      	movs	r3, #0
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	2303      	movs	r3, #3
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010d8:	22b4      	movs	r2, #180	; 0xb4
 80010da:	210a      	movs	r1, #10
 80010dc:	f7ff fb0e 	bl	80006fc <ILI9341_Draw_Text>
			return BUTTON_UP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e03c      	b.n	800115e <getPressKey+0x11a>
		}
		case '2':
		{
			strncat(buff_lcd, &digit, 1);
 80010e4:	f107 0117 	add.w	r1, r7, #23
 80010e8:	463b      	mov	r3, r7
 80010ea:	2201      	movs	r2, #1
 80010ec:	4618      	mov	r0, r3
 80010ee:	f009 fdd5 	bl	800ac9c <strncat>
			ILI9341_Draw_Text( buff_lcd, 10, 180, WHITE, 3, BLACK);
 80010f2:	4638      	mov	r0, r7
 80010f4:	2300      	movs	r3, #0
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	2303      	movs	r3, #3
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001100:	22b4      	movs	r2, #180	; 0xb4
 8001102:	210a      	movs	r1, #10
 8001104:	f7ff fafa 	bl	80006fc <ILI9341_Draw_Text>
			return BUTTON_DOWN;
 8001108:	2302      	movs	r3, #2
 800110a:	e028      	b.n	800115e <getPressKey+0x11a>
		}
		case '3':
		{
			strncat(buff_lcd, &digit, 1);
 800110c:	f107 0117 	add.w	r1, r7, #23
 8001110:	463b      	mov	r3, r7
 8001112:	2201      	movs	r2, #1
 8001114:	4618      	mov	r0, r3
 8001116:	f009 fdc1 	bl	800ac9c <strncat>
			ILI9341_Draw_Text( buff_lcd, 10, 180, WHITE, 3, BLACK);
 800111a:	4638      	mov	r0, r7
 800111c:	2300      	movs	r3, #0
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	2303      	movs	r3, #3
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001128:	22b4      	movs	r2, #180	; 0xb4
 800112a:	210a      	movs	r1, #10
 800112c:	f7ff fae6 	bl	80006fc <ILI9341_Draw_Text>
			return BUTTON_RIGHT;
 8001130:	2303      	movs	r3, #3
 8001132:	e014      	b.n	800115e <getPressKey+0x11a>
		}
		case '4':
		{
			strncat(buff_lcd, &digit, 1);
 8001134:	f107 0117 	add.w	r1, r7, #23
 8001138:	463b      	mov	r3, r7
 800113a:	2201      	movs	r2, #1
 800113c:	4618      	mov	r0, r3
 800113e:	f009 fdad 	bl	800ac9c <strncat>
			ILI9341_Draw_Text( buff_lcd, 10, 180, WHITE, 3, BLACK);
 8001142:	4638      	mov	r0, r7
 8001144:	2300      	movs	r3, #0
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	2303      	movs	r3, #3
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001150:	22b4      	movs	r2, #180	; 0xb4
 8001152:	210a      	movs	r1, #10
 8001154:	f7ff fad2 	bl	80006fc <ILI9341_Draw_Text>
			return BUTTON_SELECT;
 8001158:	2304      	movs	r3, #4
 800115a:	e000      	b.n	800115e <getPressKey+0x11a>
		}
		default:
			return BUTTON_NOTHING;
 800115c:	23ff      	movs	r3, #255	; 0xff
			break;
	}
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	0800acf8 	.word	0x0800acf8

0800116c <Generic_Write>:
// -----------------------------------------------------------------------
void Generic_Write(const char* Text)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af02      	add	r7, sp, #8
 8001172:	6078      	str	r0, [r7, #4]
	if (Text)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d015      	beq.n	80011a6 <Generic_Write+0x3a>
	{
//		lcdClrScr();
//		lcdPuts(Text);

		ILI9341_Draw_Text( "                   ", 10, 10, WHITE, 3, BLACK);
 800117a:	2300      	movs	r3, #0
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	2303      	movs	r3, #3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001186:	220a      	movs	r2, #10
 8001188:	210a      	movs	r1, #10
 800118a:	4809      	ldr	r0, [pc, #36]	; (80011b0 <Generic_Write+0x44>)
 800118c:	f7ff fab6 	bl	80006fc <ILI9341_Draw_Text>
		ILI9341_Draw_Text( Text, 10, 10, WHITE, 3, BLACK);
 8001190:	2300      	movs	r3, #0
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	2303      	movs	r3, #3
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800119c:	220a      	movs	r2, #10
 800119e:	210a      	movs	r1, #10
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff faab 	bl	80006fc <ILI9341_Draw_Text>
	}
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	0800ad0c 	.word	0x0800ad0c

080011b4 <Menu_GetCurrentMenu>:
// -----------------------------------------------------------------------
Menu_Item_t* Menu_GetCurrentMenu(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
 return CurrentMenuItem;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <Menu_GetCurrentMenu+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000004 	.word	0x20000004

080011cc <Menu_Navigate>:
// -----------------------------------------------------------------------
void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a11      	ldr	r2, [pc, #68]	; (800121c <Menu_Navigate+0x50>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d01a      	beq.n	8001212 <Menu_Navigate+0x46>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d017      	beq.n	8001212 <Menu_Navigate+0x46>
 {
	 return;
 }

 CurrentMenuItem = NewMenu;
 80011e2:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <Menu_Navigate+0x54>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6013      	str	r3, [r2, #0]

 if (MenuWriteFunc)
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <Menu_Navigate+0x58>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <Menu_Navigate+0x32>
 {
	 MenuWriteFunc(CurrentMenuItem->Text);
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <Menu_Navigate+0x58>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <Menu_Navigate+0x54>)
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	3218      	adds	r2, #24
 80011fa:	4610      	mov	r0, r2
 80011fc:	4798      	blx	r3
 }

 void (*SelectCallback)(void) = CurrentMenuItem->SelectCallback;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <Menu_Navigate+0x54>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	60fb      	str	r3, [r7, #12]

 if (SelectCallback)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <Menu_Navigate+0x48>
 {
	 SelectCallback();
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4798      	blx	r3
 8001210:	e000      	b.n	8001214 <Menu_Navigate+0x48>
	 return;
 8001212:	bf00      	nop
 }
}
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	0800afc8 	.word	0x0800afc8
 8001220:	20000004 	.word	0x20000004
 8001224:	200000b8 	.word	0x200000b8

08001228 <Menu_SetGenericWriteCallback>:
// -----------------------------------------------------------------------
void Menu_SetGenericWriteCallback(void (*WriteFunc)(const char* Text))
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 MenuWriteFunc = WriteFunc;
 8001230:	4a05      	ldr	r2, [pc, #20]	; (8001248 <Menu_SetGenericWriteCallback+0x20>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
 Menu_Navigate(CurrentMenuItem);
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <Menu_SetGenericWriteCallback+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ffc6 	bl	80011cc <Menu_Navigate>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200000b8 	.word	0x200000b8
 800124c:	20000004 	.word	0x20000004

08001250 <Menu_EnterCurrentItem>:
// -----------------------------------------------------------------------
void Menu_EnterCurrentItem(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <Menu_EnterCurrentItem+0x34>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <Menu_EnterCurrentItem+0x38>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d00d      	beq.n	800127c <Menu_EnterCurrentItem+0x2c>
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <Menu_EnterCurrentItem+0x34>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d009      	beq.n	800127c <Menu_EnterCurrentItem+0x2c>
  return;

 void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <Menu_EnterCurrentItem+0x34>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	607b      	str	r3, [r7, #4]

 if (EnterCallback)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <Menu_EnterCurrentItem+0x2e>
  EnterCallback();
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4798      	blx	r3
 800127a:	e000      	b.n	800127e <Menu_EnterCurrentItem+0x2e>
  return;
 800127c:	bf00      	nop
}// -----------------------------------------------------------------------
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000004 	.word	0x20000004
 8001288:	0800afc8 	.word	0x0800afc8

0800128c <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	int i =0;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8001298:	e036      	b.n	8001308 <speed_test_LCD+0x7c>
	{
		i ++;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80012b4:	4819      	ldr	r0, [pc, #100]	; (800131c <speed_test_LCD+0x90>)
 80012b6:	f004 febe 	bl	8006036 <HAL_RNG_GetRandomNumber>
 80012ba:	6138      	str	r0, [r7, #16]
		xr = random_num;
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80012c0:	4816      	ldr	r0, [pc, #88]	; (800131c <speed_test_LCD+0x90>)
 80012c2:	f004 feb8 	bl	8006036 <HAL_RNG_GetRandomNumber>
 80012c6:	6138      	str	r0, [r7, #16]
		yr = random_num;
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80012cc:	4813      	ldr	r0, [pc, #76]	; (800131c <speed_test_LCD+0x90>)
 80012ce:	f004 feb2 	bl	8006036 <HAL_RNG_GetRandomNumber>
 80012d2:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80012d8:	4810      	ldr	r0, [pc, #64]	; (800131c <speed_test_LCD+0x90>)
 80012da:	f004 feac 	bl	8006036 <HAL_RNG_GetRandomNumber>
 80012de:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 80012e4:	89fb      	ldrh	r3, [r7, #14]
 80012e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012ea:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 80012ec:	89bb      	ldrh	r3, [r7, #12]
 80012ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012f2:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 80012f4:	897b      	ldrh	r3, [r7, #10]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 80012fc:	893b      	ldrh	r3, [r7, #8]
 80012fe:	897a      	ldrh	r2, [r7, #10]
 8001300:	89b9      	ldrh	r1, [r7, #12]
 8001302:	89f8      	ldrh	r0, [r7, #14]
 8001304:	f7ff f8dc 	bl	80004c0 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	429a      	cmp	r2, r3
 800130e:	ddc4      	ble.n	800129a <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000238 	.word	0x20000238

08001320 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
	char digith = 0;;
 8001326:	2300      	movs	r3, #0
 8001328:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 800132a:	f000 f853 	bl	80013d4 <read_one_digit_from_keyboard>
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b23      	cmp	r3, #35	; 0x23
 8001336:	d10a      	bne.n	800134e <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 8001338:	221e      	movs	r2, #30
 800133a:	2100      	movs	r1, #0
 800133c:	4824      	ldr	r0, [pc, #144]	; (80013d0 <read_digits+0xb0>)
 800133e:	f009 fbeb 	bl	800ab18 <memset>
		keyboard.read_digits_position = 0;
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <read_digits+0xb0>)
 8001344:	2200      	movs	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 8001348:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <read_digits+0xb0>)
 800134a:	2200      	movs	r2, #0
 800134c:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b2a      	cmp	r3, #42	; 0x2a
 8001352:	d109      	bne.n	8001368 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <read_digits+0xb0>)
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <read_digits+0xb0>)
 800135e:	2200      	movs	r2, #0
 8001360:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <read_digits+0xb0>)
 8001364:	2200      	movs	r2, #0
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d028      	beq.n	80013c0 <read_digits+0xa0>
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	2b23      	cmp	r3, #35	; 0x23
 8001372:	d025      	beq.n	80013c0 <read_digits+0xa0>
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2b2a      	cmp	r3, #42	; 0x2a
 8001378:	d022      	beq.n	80013c0 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <read_digits+0xb0>)
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <read_digits+0xb0>)
 8001380:	7f92      	ldrb	r2, [r2, #30]
 8001382:	4293      	cmp	r3, r2
 8001384:	dc11      	bgt.n	80013aa <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <read_digits+0xb0>)
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	4911      	ldr	r1, [pc, #68]	; (80013d0 <read_digits+0xb0>)
 800138c:	79fa      	ldrb	r2, [r7, #7]
 800138e:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <read_digits+0xb0>)
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	3301      	adds	r3, #1
 8001396:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <read_digits+0xb0>)
 8001398:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <read_digits+0xb0>)
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <read_digits+0xb0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 80013a8:	e00e      	b.n	80013c8 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <read_digits+0xb0>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <read_digits+0xb0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <read_digits+0xb0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 80013be:	e003      	b.n	80013c8 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <read_digits+0xb0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	77da      	strb	r2, [r3, #31]
	}
}
 80013c6:	bf00      	nop
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200000d4 	.word	0x200000d4

080013d4 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
	char digit = '\0';
 80013da:	2300      	movs	r3, #0
 80013dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e4:	48cf      	ldr	r0, [pc, #828]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 80013e6:	f001 fc91 	bl	8002d0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013f0:	48cc      	ldr	r0, [pc, #816]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 80013f2:	f001 fc8b 	bl	8002d0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013fc:	48c9      	ldr	r0, [pc, #804]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 80013fe:	f001 fc85 	bl	8002d0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001408:	48c6      	ldr	r0, [pc, #792]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 800140a:	f001 fc7f 	bl	8002d0c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800140e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001412:	48c5      	ldr	r0, [pc, #788]	; (8001728 <read_one_digit_from_keyboard+0x354>)
 8001414:	f001 fc62 	bl	8002cdc <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d169      	bne.n	80014f2 <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001424:	48bf      	ldr	r0, [pc, #764]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 8001426:	f001 fc71 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800142a:	2201      	movs	r2, #1
 800142c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001430:	48bc      	ldr	r0, [pc, #752]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 8001432:	f001 fc6b 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800143c:	48b9      	ldr	r0, [pc, #740]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 800143e:	f001 fc65 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001448:	48b6      	ldr	r0, [pc, #728]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 800144a:	f001 fc5f 	bl	8002d0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800144e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001452:	48b5      	ldr	r0, [pc, #724]	; (8001728 <read_one_digit_from_keyboard+0x354>)
 8001454:	f001 fc42 	bl	8002cdc <HAL_GPIO_ReadPin>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 800145e:	2331      	movs	r3, #49	; 0x31
 8001460:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001468:	48ae      	ldr	r0, [pc, #696]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 800146a:	f001 fc4f 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001474:	48ab      	ldr	r0, [pc, #684]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 8001476:	f001 fc49 	bl	8002d0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800147a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800147e:	48aa      	ldr	r0, [pc, #680]	; (8001728 <read_one_digit_from_keyboard+0x354>)
 8001480:	f001 fc2c 	bl	8002cdc <HAL_GPIO_ReadPin>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 800148a:	2334      	movs	r3, #52	; 0x34
 800148c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800148e:	2201      	movs	r2, #1
 8001490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001494:	48a3      	ldr	r0, [pc, #652]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 8001496:	f001 fc39 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a0:	48a0      	ldr	r0, [pc, #640]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 80014a2:	f001 fc33 	bl	8002d0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80014a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014aa:	489f      	ldr	r0, [pc, #636]	; (8001728 <read_one_digit_from_keyboard+0x354>)
 80014ac:	f001 fc16 	bl	8002cdc <HAL_GPIO_ReadPin>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 80014b6:	2337      	movs	r3, #55	; 0x37
 80014b8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c0:	4898      	ldr	r0, [pc, #608]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 80014c2:	f001 fc23 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014cc:	4895      	ldr	r0, [pc, #596]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 80014ce:	f001 fc1d 	bl	8002d0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80014d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014d6:	4894      	ldr	r0, [pc, #592]	; (8001728 <read_one_digit_from_keyboard+0x354>)
 80014d8:	f001 fc00 	bl	8002cdc <HAL_GPIO_ReadPin>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 80014e2:	232a      	movs	r3, #42	; 0x2a
 80014e4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80014e6:	2201      	movs	r2, #1
 80014e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ec:	488d      	ldr	r0, [pc, #564]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 80014ee:	f001 fc0d 	bl	8002d0c <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f8:	488a      	ldr	r0, [pc, #552]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 80014fa:	f001 fc07 	bl	8002d0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001504:	4887      	ldr	r0, [pc, #540]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 8001506:	f001 fc01 	bl	8002d0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001510:	4884      	ldr	r0, [pc, #528]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 8001512:	f001 fbfb 	bl	8002d0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151c:	4881      	ldr	r0, [pc, #516]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 800151e:	f001 fbf5 	bl	8002d0c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 8001522:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001526:	4880      	ldr	r0, [pc, #512]	; (8001728 <read_one_digit_from_keyboard+0x354>)
 8001528:	f001 fbd8 	bl	8002cdc <HAL_GPIO_ReadPin>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d169      	bne.n	8001606 <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001538:	487a      	ldr	r0, [pc, #488]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 800153a:	f001 fbe7 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001544:	4877      	ldr	r0, [pc, #476]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 8001546:	f001 fbe1 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001550:	4874      	ldr	r0, [pc, #464]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 8001552:	f001 fbdb 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001556:	2201      	movs	r2, #1
 8001558:	f44f 7180 	mov.w	r1, #256	; 0x100
 800155c:	4871      	ldr	r0, [pc, #452]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 800155e:	f001 fbd5 	bl	8002d0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001566:	4870      	ldr	r0, [pc, #448]	; (8001728 <read_one_digit_from_keyboard+0x354>)
 8001568:	f001 fbb8 	bl	8002cdc <HAL_GPIO_ReadPin>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 8001572:	2332      	movs	r3, #50	; 0x32
 8001574:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8001576:	2201      	movs	r2, #1
 8001578:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800157c:	4869      	ldr	r0, [pc, #420]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 800157e:	f001 fbc5 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001588:	4866      	ldr	r0, [pc, #408]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 800158a:	f001 fbbf 	bl	8002d0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800158e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001592:	4865      	ldr	r0, [pc, #404]	; (8001728 <read_one_digit_from_keyboard+0x354>)
 8001594:	f001 fba2 	bl	8002cdc <HAL_GPIO_ReadPin>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 800159e:	2335      	movs	r3, #53	; 0x35
 80015a0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015a8:	485e      	ldr	r0, [pc, #376]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 80015aa:	f001 fbaf 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b4:	485b      	ldr	r0, [pc, #364]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 80015b6:	f001 fba9 	bl	8002d0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80015ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015be:	485a      	ldr	r0, [pc, #360]	; (8001728 <read_one_digit_from_keyboard+0x354>)
 80015c0:	f001 fb8c 	bl	8002cdc <HAL_GPIO_ReadPin>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 80015ca:	2338      	movs	r3, #56	; 0x38
 80015cc:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80015ce:	2201      	movs	r2, #1
 80015d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d4:	4853      	ldr	r0, [pc, #332]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 80015d6:	f001 fb99 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e0:	4850      	ldr	r0, [pc, #320]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 80015e2:	f001 fb93 	bl	8002d0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80015e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ea:	484f      	ldr	r0, [pc, #316]	; (8001728 <read_one_digit_from_keyboard+0x354>)
 80015ec:	f001 fb76 	bl	8002cdc <HAL_GPIO_ReadPin>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 80015f6:	2330      	movs	r3, #48	; 0x30
 80015f8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001600:	4848      	ldr	r0, [pc, #288]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 8001602:	f001 fb83 	bl	8002d0c <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800160c:	4845      	ldr	r0, [pc, #276]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 800160e:	f001 fb7d 	bl	8002d0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001618:	4842      	ldr	r0, [pc, #264]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 800161a:	f001 fb77 	bl	8002d0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001624:	483f      	ldr	r0, [pc, #252]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 8001626:	f001 fb71 	bl	8002d0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001630:	483c      	ldr	r0, [pc, #240]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 8001632:	f001 fb6b 	bl	8002d0c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №
 8001636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800163a:	483b      	ldr	r0, [pc, #236]	; (8001728 <read_one_digit_from_keyboard+0x354>)
 800163c:	f001 fb4e 	bl	8002cdc <HAL_GPIO_ReadPin>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d169      	bne.n	800171a <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800164c:	4835      	ldr	r0, [pc, #212]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 800164e:	f001 fb5d 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001652:	2201      	movs	r2, #1
 8001654:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001658:	4832      	ldr	r0, [pc, #200]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 800165a:	f001 fb57 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001664:	482f      	ldr	r0, [pc, #188]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 8001666:	f001 fb51 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800166a:	2201      	movs	r2, #1
 800166c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001670:	482c      	ldr	r0, [pc, #176]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 8001672:	f001 fb4b 	bl	8002d0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800167a:	482b      	ldr	r0, [pc, #172]	; (8001728 <read_one_digit_from_keyboard+0x354>)
 800167c:	f001 fb2e 	bl	8002cdc <HAL_GPIO_ReadPin>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 8001686:	2333      	movs	r3, #51	; 0x33
 8001688:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 800168a:	2201      	movs	r2, #1
 800168c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001690:	4824      	ldr	r0, [pc, #144]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 8001692:	f001 fb3b 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800169c:	4821      	ldr	r0, [pc, #132]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 800169e:	f001 fb35 	bl	8002d0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80016a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a6:	4820      	ldr	r0, [pc, #128]	; (8001728 <read_one_digit_from_keyboard+0x354>)
 80016a8:	f001 fb18 	bl	8002cdc <HAL_GPIO_ReadPin>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 80016b2:	2336      	movs	r3, #54	; 0x36
 80016b4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016bc:	4819      	ldr	r0, [pc, #100]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 80016be:	f001 fb25 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c8:	4816      	ldr	r0, [pc, #88]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 80016ca:	f001 fb1f 	bl	8002d0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80016ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d2:	4815      	ldr	r0, [pc, #84]	; (8001728 <read_one_digit_from_keyboard+0x354>)
 80016d4:	f001 fb02 	bl	8002cdc <HAL_GPIO_ReadPin>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 80016de:	2339      	movs	r3, #57	; 0x39
 80016e0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e8:	480e      	ldr	r0, [pc, #56]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 80016ea:	f001 fb0f 	bl	8002d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f4:	480b      	ldr	r0, [pc, #44]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 80016f6:	f001 fb09 	bl	8002d0c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80016fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016fe:	480a      	ldr	r0, [pc, #40]	; (8001728 <read_one_digit_from_keyboard+0x354>)
 8001700:	f001 faec 	bl	8002cdc <HAL_GPIO_ReadPin>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 800170a:	2323      	movs	r3, #35	; 0x23
 800170c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800170e:	2201      	movs	r2, #1
 8001710:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001714:	4803      	ldr	r0, [pc, #12]	; (8001724 <read_one_digit_from_keyboard+0x350>)
 8001716:	f001 faf9 	bl	8002d0c <HAL_GPIO_WritePin>
	}
	return digit;
 800171a:	79fb      	ldrb	r3, [r7, #7]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40020c00 	.word	0x40020c00
 8001728:	40020400 	.word	0x40020400

0800172c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001732:	f000 ff8f 	bl	8002654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001736:	f000 f83d 	bl	80017b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800173a:	f000 fac1 	bl	8001cc0 <MX_GPIO_Init>
  MX_I2S3_Init();
 800173e:	f000 f8f5 	bl	800192c <MX_I2S3_Init>
  MX_SPI1_Init();
 8001742:	f000 f937 	bl	80019b4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001746:	f008 fea5 	bl	800a494 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 800174a:	f000 f9f7 	bl	8001b3c <MX_TIM2_Init>
  MX_SPI2_Init();
 800174e:	f000 f967 	bl	8001a20 <MX_SPI2_Init>
  MX_RNG_Init();
 8001752:	f000 f91b 	bl	800198c <MX_RNG_Init>
  MX_TIM3_Init();
 8001756:	f000 fa3f 	bl	8001bd8 <MX_TIM3_Init>
  MX_TIM1_Init();
 800175a:	f000 f997 	bl	8001a8c <MX_TIM1_Init>
  MX_I2C3_Init();
 800175e:	f000 f8b7 	bl	80018d0 <MX_I2C3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001762:	f000 f8a9 	bl	80018b8 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 8001766:	f7ff f917 	bl	8000998 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 800176a:	2000      	movs	r0, #0
 800176c:	f7ff faba 	bl	8000ce4 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8001770:	2003      	movs	r0, #3
 8001772:	f7ff f8b3 	bl	80008dc <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff fab4 	bl	8000ce4 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 800177c:	2364      	movs	r3, #100	; 0x64
 800177e:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fd83 	bl	800128c <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 8001786:	2000      	movs	r0, #0
 8001788:	f7ff faac 	bl	8000ce4 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 800178c:	4807      	ldr	r0, [pc, #28]	; (80017ac <main+0x80>)
 800178e:	f004 ff47 	bl	8006620 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001792:	2100      	movs	r1, #0
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <main+0x80>)
 8001796:	f004 ffb3 	bl	8006700 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <main+0x84>)
 800179c:	220a      	movs	r2, #10
 800179e:	779a      	strb	r2, [r3, #30]
  ////////////////////////////////////////////////////
  while (1)
  {
	  /////////////////////////////////////////////////////////////////

	 menu();
 80017a0:	f7ff fbea 	bl	8000f78 <menu>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80017a4:	f008 fe9c 	bl	800a4e0 <MX_USB_HOST_Process>
	 menu();
 80017a8:	e7fa      	b.n	80017a0 <main+0x74>
 80017aa:	bf00      	nop
 80017ac:	200001a8 	.word	0x200001a8
 80017b0:	200000d4 	.word	0x200000d4

080017b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b098      	sub	sp, #96	; 0x60
 80017b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017be:	2230      	movs	r2, #48	; 0x30
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f009 f9a8 	bl	800ab18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c8:	f107 031c 	add.w	r3, r7, #28
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <SystemClock_Config+0xfc>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	4a30      	ldr	r2, [pc, #192]	; (80018b0 <SystemClock_Config+0xfc>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6413      	str	r3, [r2, #64]	; 0x40
 80017f6:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <SystemClock_Config+0xfc>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <SystemClock_Config+0x100>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a2a      	ldr	r2, [pc, #168]	; (80018b4 <SystemClock_Config+0x100>)
 800180c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <SystemClock_Config+0x100>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800181e:	2301      	movs	r3, #1
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001822:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001826:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001828:	2302      	movs	r3, #2
 800182a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800182c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001830:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001832:	2308      	movs	r3, #8
 8001834:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001836:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800183a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800183c:	2302      	movs	r3, #2
 800183e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001840:	2307      	movs	r3, #7
 8001842:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001844:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001848:	4618      	mov	r0, r3
 800184a:	f003 fddb 	bl	8005404 <HAL_RCC_OscConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001854:	f000 fbae 	bl	8001fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001858:	230f      	movs	r3, #15
 800185a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800185c:	2302      	movs	r3, #2
 800185e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001860:	2300      	movs	r3, #0
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001864:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800186a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	2105      	movs	r1, #5
 8001876:	4618      	mov	r0, r3
 8001878:	f004 f83c 	bl	80058f4 <HAL_RCC_ClockConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001882:	f000 fb97 	bl	8001fb4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001886:	2301      	movs	r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800188a:	23c0      	movs	r3, #192	; 0xc0
 800188c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800188e:	2302      	movs	r3, #2
 8001890:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	4618      	mov	r0, r3
 8001898:	f004 fa14 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80018a2:	f000 fb87 	bl	8001fb4 <Error_Handler>
  }
}
 80018a6:	bf00      	nop
 80018a8:	3760      	adds	r7, #96	; 0x60
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40007000 	.word	0x40007000

080018b8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	201c      	movs	r0, #28
 80018c2:	f001 f838 	bl	8002936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c6:	201c      	movs	r0, #28
 80018c8:	f001 f851 	bl	800296e <HAL_NVIC_EnableIRQ>
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <MX_I2C3_Init+0x50>)
 80018d6:	4a13      	ldr	r2, [pc, #76]	; (8001924 <MX_I2C3_Init+0x54>)
 80018d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_I2C3_Init+0x50>)
 80018dc:	4a12      	ldr	r2, [pc, #72]	; (8001928 <MX_I2C3_Init+0x58>)
 80018de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_I2C3_Init+0x50>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_I2C3_Init+0x50>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_I2C3_Init+0x50>)
 80018ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018f2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <MX_I2C3_Init+0x50>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_I2C3_Init+0x50>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <MX_I2C3_Init+0x50>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_I2C3_Init+0x50>)
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <MX_I2C3_Init+0x50>)
 800190e:	f002 ff95 	bl	800483c <HAL_I2C_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001918:	f000 fb4c 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200000fc 	.word	0x200000fc
 8001924:	40005c00 	.word	0x40005c00
 8001928:	000186a0 	.word	0x000186a0

0800192c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <MX_I2S3_Init+0x54>)
 8001932:	4a14      	ldr	r2, [pc, #80]	; (8001984 <MX_I2S3_Init+0x58>)
 8001934:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <MX_I2S3_Init+0x54>)
 8001938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800193c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <MX_I2S3_Init+0x54>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_I2S3_Init+0x54>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <MX_I2S3_Init+0x54>)
 800194c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001950:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_I2S3_Init+0x54>)
 8001954:	4a0c      	ldr	r2, [pc, #48]	; (8001988 <MX_I2S3_Init+0x5c>)
 8001956:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_I2S3_Init+0x54>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_I2S3_Init+0x54>)
 8001960:	2200      	movs	r2, #0
 8001962:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_I2S3_Init+0x54>)
 8001966:	2200      	movs	r2, #0
 8001968:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_I2S3_Init+0x54>)
 800196c:	f003 f8aa 	bl	8004ac4 <HAL_I2S_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001976:	f000 fb1d 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200002e8 	.word	0x200002e8
 8001984:	40003c00 	.word	0x40003c00
 8001988:	00017700 	.word	0x00017700

0800198c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_RNG_Init+0x20>)
 8001992:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <MX_RNG_Init+0x24>)
 8001994:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_RNG_Init+0x20>)
 8001998:	f004 fad4 	bl	8005f44 <HAL_RNG_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80019a2:	f000 fb07 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000238 	.word	0x20000238
 80019b0:	50060800 	.word	0x50060800

080019b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019ba:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <MX_SPI1_Init+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019be:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <MX_SPI1_Init+0x64>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_SPI1_Init+0x64>)
 8001a00:	220a      	movs	r2, #10
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <MX_SPI1_Init+0x64>)
 8001a06:	f004 fb2b 	bl	8006060 <HAL_SPI_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a10:	f000 fad0 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000248 	.word	0x20000248
 8001a1c:	40013000 	.word	0x40013000

08001a20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a26:	4a18      	ldr	r2, [pc, #96]	; (8001a88 <MX_SPI2_Init+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a50:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a6c:	220a      	movs	r2, #10
 8001a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <MX_SPI2_Init+0x64>)
 8001a72:	f004 faf5 	bl	8006060 <HAL_SPI_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a7c:	f000 fa9a 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000150 	.word	0x20000150
 8001a88:	40003800 	.word	0x40003800

08001a8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	; 0x30
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	2224      	movs	r2, #36	; 0x24
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f009 f83c 	bl	800ab18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <MX_TIM1_Init+0xa8>)
 8001aaa:	4a23      	ldr	r2, [pc, #140]	; (8001b38 <MX_TIM1_Init+0xac>)
 8001aac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001aae:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <MX_TIM1_Init+0xa8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <MX_TIM1_Init+0xa8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001aba:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <MX_TIM1_Init+0xa8>)
 8001abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <MX_TIM1_Init+0xa8>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <MX_TIM1_Init+0xa8>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <MX_TIM1_Init+0xa8>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001adc:	2301      	movs	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aec:	2301      	movs	r3, #1
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4619      	mov	r1, r3
 8001afe:	480d      	ldr	r0, [pc, #52]	; (8001b34 <MX_TIM1_Init+0xa8>)
 8001b00:	f004 ff65 	bl	80069ce <HAL_TIM_Encoder_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001b0a:	f000 fa53 	bl	8001fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4806      	ldr	r0, [pc, #24]	; (8001b34 <MX_TIM1_Init+0xa8>)
 8001b1c:	f005 fdca 	bl	80076b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001b26:	f000 fa45 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	3730      	adds	r7, #48	; 0x30
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200001f0 	.word	0x200001f0
 8001b38:	40010000 	.word	0x40010000

08001b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	463b      	mov	r3, r7
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b58:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001b5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001b62:	f240 3247 	movw	r2, #839	; 0x347
 8001b66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001b70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b82:	4814      	ldr	r0, [pc, #80]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001b84:	f004 fcfc 	bl	8006580 <HAL_TIM_Base_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b8e:	f000 fa11 	bl	8001fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b98:	f107 0308 	add.w	r3, r7, #8
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001ba0:	f005 f982 	bl	8006ea8 <HAL_TIM_ConfigClockSource>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001baa:	f000 fa03 	bl	8001fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001bae:	2310      	movs	r3, #16
 8001bb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <MX_TIM2_Init+0x98>)
 8001bbc:	f005 fd7a 	bl	80076b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bc6:	f000 f9f5 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200002a0 	.word	0x200002a0

08001bd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08e      	sub	sp, #56	; 0x38
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bec:	f107 0320 	add.w	r3, r7, #32
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
 8001c04:	615a      	str	r2, [r3, #20]
 8001c06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <MX_TIM3_Init+0xe0>)
 8001c0a:	4a2c      	ldr	r2, [pc, #176]	; (8001cbc <MX_TIM3_Init+0xe4>)
 8001c0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <MX_TIM3_Init+0xe0>)
 8001c10:	f640 0233 	movw	r2, #2099	; 0x833
 8001c14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <MX_TIM3_Init+0xe0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001c1c:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <MX_TIM3_Init+0xe0>)
 8001c1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c24:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <MX_TIM3_Init+0xe0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <MX_TIM3_Init+0xe0>)
 8001c2c:	2280      	movs	r2, #128	; 0x80
 8001c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c30:	4821      	ldr	r0, [pc, #132]	; (8001cb8 <MX_TIM3_Init+0xe0>)
 8001c32:	f004 fca5 	bl	8006580 <HAL_TIM_Base_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c3c:	f000 f9ba 	bl	8001fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	481a      	ldr	r0, [pc, #104]	; (8001cb8 <MX_TIM3_Init+0xe0>)
 8001c4e:	f005 f92b 	bl	8006ea8 <HAL_TIM_ConfigClockSource>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c58:	f000 f9ac 	bl	8001fb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c5c:	4816      	ldr	r0, [pc, #88]	; (8001cb8 <MX_TIM3_Init+0xe0>)
 8001c5e:	f004 fe5d 	bl	800691c <HAL_TIM_PWM_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c68:	f000 f9a4 	bl	8001fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c74:	f107 0320 	add.w	r3, r7, #32
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480f      	ldr	r0, [pc, #60]	; (8001cb8 <MX_TIM3_Init+0xe0>)
 8001c7c:	f005 fd1a 	bl	80076b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c86:	f000 f995 	bl	8001fb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8a:	2360      	movs	r3, #96	; 0x60
 8001c8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <MX_TIM3_Init+0xe0>)
 8001ca2:	f005 f843 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001cac:	f000 f982 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	3738      	adds	r7, #56	; 0x38
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200001a8 	.word	0x200001a8
 8001cbc:	40000400 	.word	0x40000400

08001cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	; 0x30
 8001cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
 8001cda:	4baf      	ldr	r3, [pc, #700]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4aae      	ldr	r2, [pc, #696]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001ce0:	f043 0310 	orr.w	r3, r3, #16
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4bac      	ldr	r3, [pc, #688]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	4ba8      	ldr	r3, [pc, #672]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4aa7      	ldr	r2, [pc, #668]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4ba5      	ldr	r3, [pc, #660]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	4ba1      	ldr	r3, [pc, #644]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4aa0      	ldr	r2, [pc, #640]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b9e      	ldr	r3, [pc, #632]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	4b9a      	ldr	r3, [pc, #616]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a99      	ldr	r2, [pc, #612]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b97      	ldr	r3, [pc, #604]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b93      	ldr	r3, [pc, #588]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a92      	ldr	r2, [pc, #584]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b90      	ldr	r3, [pc, #576]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	4b8c      	ldr	r3, [pc, #560]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a8b      	ldr	r2, [pc, #556]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001d6c:	f043 0308 	orr.w	r3, r3, #8
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b89      	ldr	r3, [pc, #548]	; (8001f98 <MX_GPIO_Init+0x2d8>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001d7e:	2200      	movs	r2, #0
 8001d80:	217c      	movs	r1, #124	; 0x7c
 8001d82:	4886      	ldr	r0, [pc, #536]	; (8001f9c <MX_GPIO_Init+0x2dc>)
 8001d84:	f000 ffc2 	bl	8002d0c <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	4884      	ldr	r0, [pc, #528]	; (8001fa0 <MX_GPIO_Init+0x2e0>)
 8001d8e:	f000 ffbd 	bl	8002d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001d92:	2200      	movs	r2, #0
 8001d94:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001d98:	4882      	ldr	r0, [pc, #520]	; (8001fa4 <MX_GPIO_Init+0x2e4>)
 8001d9a:	f000 ffb7 	bl	8002d0c <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001da4:	487e      	ldr	r0, [pc, #504]	; (8001fa0 <MX_GPIO_Init+0x2e0>)
 8001da6:	f000 ffb1 	bl	8002d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001daa:	2200      	movs	r2, #0
 8001dac:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001db0:	487d      	ldr	r0, [pc, #500]	; (8001fa8 <MX_GPIO_Init+0x2e8>)
 8001db2:	f000 ffab 	bl	8002d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001db6:	2374      	movs	r3, #116	; 0x74
 8001db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dc6:	f107 031c 	add.w	r3, r7, #28
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4873      	ldr	r0, [pc, #460]	; (8001f9c <MX_GPIO_Init+0x2dc>)
 8001dce:	f000 fde9 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001dd2:	2308      	movs	r3, #8
 8001dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 031c 	add.w	r3, r7, #28
 8001de6:	4619      	mov	r1, r3
 8001de8:	486c      	ldr	r0, [pc, #432]	; (8001f9c <MX_GPIO_Init+0x2dc>)
 8001dea:	f000 fddb 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df4:	2300      	movs	r3, #0
 8001df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	4619      	mov	r1, r3
 8001e02:	4867      	ldr	r0, [pc, #412]	; (8001fa0 <MX_GPIO_Init+0x2e0>)
 8001e04:	f000 fdce 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 8001e08:	f640 0341 	movw	r3, #2113	; 0x841
 8001e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	4619      	mov	r1, r3
 8001e20:	485f      	ldr	r0, [pc, #380]	; (8001fa0 <MX_GPIO_Init+0x2e0>)
 8001e22:	f000 fdbf 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001e26:	2308      	movs	r3, #8
 8001e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e36:	2305      	movs	r3, #5
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4857      	ldr	r0, [pc, #348]	; (8001fa0 <MX_GPIO_Init+0x2e0>)
 8001e42:	f000 fdaf 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e46:	2301      	movs	r3, #1
 8001e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e4a:	4b58      	ldr	r3, [pc, #352]	; (8001fac <MX_GPIO_Init+0x2ec>)
 8001e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	4619      	mov	r1, r3
 8001e58:	4855      	ldr	r0, [pc, #340]	; (8001fb0 <MX_GPIO_Init+0x2f0>)
 8001e5a:	f000 fda3 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001e5e:	2304      	movs	r3, #4
 8001e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4619      	mov	r1, r3
 8001e70:	484d      	ldr	r0, [pc, #308]	; (8001fa8 <MX_GPIO_Init+0x2e8>)
 8001e72:	f000 fd97 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 8001e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e80:	2301      	movs	r3, #1
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4844      	ldr	r0, [pc, #272]	; (8001f9c <MX_GPIO_Init+0x2dc>)
 8001e8c:	f000 fd8a 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ea2:	2305      	movs	r3, #5
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	483e      	ldr	r0, [pc, #248]	; (8001fa8 <MX_GPIO_Init+0x2e8>)
 8001eae:	f000 fd79 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001eb2:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8001eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4838      	ldr	r0, [pc, #224]	; (8001fa8 <MX_GPIO_Init+0x2e8>)
 8001ec8:	f000 fd6c 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001ecc:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001ed0:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ede:	f107 031c 	add.w	r3, r7, #28
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	482f      	ldr	r0, [pc, #188]	; (8001fa4 <MX_GPIO_Init+0x2e4>)
 8001ee6:	f000 fd5d 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001eea:	2320      	movs	r3, #32
 8001eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ef6:	f107 031c 	add.w	r3, r7, #28
 8001efa:	4619      	mov	r1, r3
 8001efc:	4829      	ldr	r0, [pc, #164]	; (8001fa4 <MX_GPIO_Init+0x2e4>)
 8001efe:	f000 fd51 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f02:	2340      	movs	r3, #64	; 0x40
 8001f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f06:	2301      	movs	r3, #1
 8001f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	f107 031c 	add.w	r3, r7, #28
 8001f16:	4619      	mov	r1, r3
 8001f18:	4823      	ldr	r0, [pc, #140]	; (8001fa8 <MX_GPIO_Init+0x2e8>)
 8001f1a:	f000 fd43 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001f1e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f24:	2301      	movs	r3, #1
 8001f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	4619      	mov	r1, r3
 8001f36:	481c      	ldr	r0, [pc, #112]	; (8001fa8 <MX_GPIO_Init+0x2e8>)
 8001f38:	f000 fd34 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f42:	2312      	movs	r3, #18
 8001f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f46:	2301      	movs	r3, #1
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f4e:	2304      	movs	r3, #4
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001f52:	f107 031c 	add.w	r3, r7, #28
 8001f56:	4619      	mov	r1, r3
 8001f58:	4813      	ldr	r0, [pc, #76]	; (8001fa8 <MX_GPIO_Init+0x2e8>)
 8001f5a:	f000 fd23 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	480a      	ldr	r0, [pc, #40]	; (8001f9c <MX_GPIO_Init+0x2dc>)
 8001f72:	f000 fd17 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001f76:	2302      	movs	r3, #2
 8001f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <MX_GPIO_Init+0x2ec>)
 8001f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001f82:	f107 031c 	add.w	r3, r7, #28
 8001f86:	4619      	mov	r1, r3
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <MX_GPIO_Init+0x2dc>)
 8001f8a:	f000 fd0b 	bl	80029a4 <HAL_GPIO_Init>

}
 8001f8e:	bf00      	nop
 8001f90:	3730      	adds	r7, #48	; 0x30
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40020800 	.word	0x40020800
 8001fa4:	40020c00 	.word	0x40020c00
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	10120000 	.word	0x10120000
 8001fb0:	40020000 	.word	0x40020000

08001fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb8:	b672      	cpsid	i
}
 8001fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <Error_Handler+0x8>
	...

08001fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <HAL_MspInit+0x5c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a13      	ldr	r2, [pc, #76]	; (800201c <HAL_MspInit+0x5c>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_MspInit+0x5c>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_MspInit+0x5c>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a0c      	ldr	r2, [pc, #48]	; (800201c <HAL_MspInit+0x5c>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <HAL_MspInit+0x5c>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ffe:	2007      	movs	r0, #7
 8002000:	f000 fc8e 	bl	8002920 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	2100      	movs	r1, #0
 8002008:	2005      	movs	r0, #5
 800200a:	f000 fc94 	bl	8002936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800200e:	2005      	movs	r0, #5
 8002010:	f000 fcad 	bl	800296e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40023800 	.word	0x40023800

08002020 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a29      	ldr	r2, [pc, #164]	; (80020e4 <HAL_I2C_MspInit+0xc4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d14b      	bne.n	80020da <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_I2C_MspInit+0xc8>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <HAL_I2C_MspInit+0xc8>)
 800204c:	f043 0304 	orr.w	r3, r3, #4
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_I2C_MspInit+0xc8>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <HAL_I2C_MspInit+0xc8>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a20      	ldr	r2, [pc, #128]	; (80020e8 <HAL_I2C_MspInit+0xc8>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <HAL_I2C_MspInit+0xc8>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800207a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002080:	2312      	movs	r3, #18
 8002082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002084:	2301      	movs	r3, #1
 8002086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800208c:	2304      	movs	r3, #4
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4619      	mov	r1, r3
 8002096:	4815      	ldr	r0, [pc, #84]	; (80020ec <HAL_I2C_MspInit+0xcc>)
 8002098:	f000 fc84 	bl	80029a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800209c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020a2:	2312      	movs	r3, #18
 80020a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020a6:	2301      	movs	r3, #1
 80020a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020ae:	2304      	movs	r3, #4
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	480d      	ldr	r0, [pc, #52]	; (80020f0 <HAL_I2C_MspInit+0xd0>)
 80020ba:	f000 fc73 	bl	80029a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_I2C_MspInit+0xc8>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <HAL_I2C_MspInit+0xc8>)
 80020c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_I2C_MspInit+0xc8>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80020da:	bf00      	nop
 80020dc:	3728      	adds	r7, #40	; 0x28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40005c00 	.word	0x40005c00
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40020800 	.word	0x40020800
 80020f0:	40020000 	.word	0x40020000

080020f4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a28      	ldr	r2, [pc, #160]	; (80021b4 <HAL_I2S_MspInit+0xc0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d14a      	bne.n	80021ac <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <HAL_I2S_MspInit+0xc4>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <HAL_I2S_MspInit+0xc4>)
 8002120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <HAL_I2S_MspInit+0xc4>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_I2S_MspInit+0xc4>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <HAL_I2S_MspInit+0xc4>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <HAL_I2S_MspInit+0xc4>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_I2S_MspInit+0xc4>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <HAL_I2S_MspInit+0xc4>)
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <HAL_I2S_MspInit+0xc4>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800216a:	2310      	movs	r3, #16
 800216c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800217a:	2306      	movs	r3, #6
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	480d      	ldr	r0, [pc, #52]	; (80021bc <HAL_I2S_MspInit+0xc8>)
 8002186:	f000 fc0d 	bl	80029a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800218a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800218e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800219c:	2306      	movs	r3, #6
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	4619      	mov	r1, r3
 80021a6:	4806      	ldr	r0, [pc, #24]	; (80021c0 <HAL_I2S_MspInit+0xcc>)
 80021a8:	f000 fbfc 	bl	80029a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80021ac:	bf00      	nop
 80021ae:	3728      	adds	r7, #40	; 0x28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40003c00 	.word	0x40003c00
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40020000 	.word	0x40020000
 80021c0:	40020800 	.word	0x40020800

080021c4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <HAL_RNG_MspInit+0x3c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10d      	bne.n	80021f2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_RNG_MspInit+0x40>)
 80021dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_RNG_MspInit+0x40>)
 80021e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e4:	6353      	str	r3, [r2, #52]	; 0x34
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <HAL_RNG_MspInit+0x40>)
 80021e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	50060800 	.word	0x50060800
 8002204:	40023800 	.word	0x40023800

08002208 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08c      	sub	sp, #48	; 0x30
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a41      	ldr	r2, [pc, #260]	; (800232c <HAL_SPI_MspInit+0x124>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d12c      	bne.n	8002284 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	4b40      	ldr	r3, [pc, #256]	; (8002330 <HAL_SPI_MspInit+0x128>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	4a3f      	ldr	r2, [pc, #252]	; (8002330 <HAL_SPI_MspInit+0x128>)
 8002234:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002238:	6453      	str	r3, [r2, #68]	; 0x44
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_SPI_MspInit+0x128>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002242:	61bb      	str	r3, [r7, #24]
 8002244:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	4b39      	ldr	r3, [pc, #228]	; (8002330 <HAL_SPI_MspInit+0x128>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a38      	ldr	r2, [pc, #224]	; (8002330 <HAL_SPI_MspInit+0x128>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b36      	ldr	r3, [pc, #216]	; (8002330 <HAL_SPI_MspInit+0x128>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002262:	23e0      	movs	r3, #224	; 0xe0
 8002264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226e:	2303      	movs	r3, #3
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002272:	2305      	movs	r3, #5
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	4619      	mov	r1, r3
 800227c:	482d      	ldr	r0, [pc, #180]	; (8002334 <HAL_SPI_MspInit+0x12c>)
 800227e:	f000 fb91 	bl	80029a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002282:	e04f      	b.n	8002324 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2b      	ldr	r2, [pc, #172]	; (8002338 <HAL_SPI_MspInit+0x130>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d14a      	bne.n	8002324 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	4b27      	ldr	r3, [pc, #156]	; (8002330 <HAL_SPI_MspInit+0x128>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	4a26      	ldr	r2, [pc, #152]	; (8002330 <HAL_SPI_MspInit+0x128>)
 8002298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229c:	6413      	str	r3, [r2, #64]	; 0x40
 800229e:	4b24      	ldr	r3, [pc, #144]	; (8002330 <HAL_SPI_MspInit+0x128>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b20      	ldr	r3, [pc, #128]	; (8002330 <HAL_SPI_MspInit+0x128>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <HAL_SPI_MspInit+0x128>)
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_SPI_MspInit+0x128>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_SPI_MspInit+0x128>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a18      	ldr	r2, [pc, #96]	; (8002330 <HAL_SPI_MspInit+0x128>)
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b16      	ldr	r3, [pc, #88]	; (8002330 <HAL_SPI_MspInit+0x128>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022e2:	2304      	movs	r3, #4
 80022e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ee:	2303      	movs	r3, #3
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022f2:	2305      	movs	r3, #5
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f6:	f107 031c 	add.w	r3, r7, #28
 80022fa:	4619      	mov	r1, r3
 80022fc:	480f      	ldr	r0, [pc, #60]	; (800233c <HAL_SPI_MspInit+0x134>)
 80022fe:	f000 fb51 	bl	80029a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002302:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002314:	2305      	movs	r3, #5
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002318:	f107 031c 	add.w	r3, r7, #28
 800231c:	4619      	mov	r1, r3
 800231e:	4808      	ldr	r0, [pc, #32]	; (8002340 <HAL_SPI_MspInit+0x138>)
 8002320:	f000 fb40 	bl	80029a4 <HAL_GPIO_Init>
}
 8002324:	bf00      	nop
 8002326:	3730      	adds	r7, #48	; 0x30
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40013000 	.word	0x40013000
 8002330:	40023800 	.word	0x40023800
 8002334:	40020000 	.word	0x40020000
 8002338:	40003800 	.word	0x40003800
 800233c:	40020800 	.word	0x40020800
 8002340:	40020400 	.word	0x40020400

08002344 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a19      	ldr	r2, [pc, #100]	; (80023c8 <HAL_TIM_Encoder_MspInit+0x84>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d12c      	bne.n	80023c0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	4b18      	ldr	r3, [pc, #96]	; (80023cc <HAL_TIM_Encoder_MspInit+0x88>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_TIM_Encoder_MspInit+0x88>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_TIM_Encoder_MspInit+0x88>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HAL_TIM_Encoder_MspInit+0x88>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a10      	ldr	r2, [pc, #64]	; (80023cc <HAL_TIM_Encoder_MspInit+0x88>)
 800238c:	f043 0310 	orr.w	r3, r3, #16
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <HAL_TIM_Encoder_MspInit+0x88>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800239e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80023a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023a8:	2301      	movs	r3, #1
 80023aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023b0:	2301      	movs	r3, #1
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4619      	mov	r1, r3
 80023ba:	4805      	ldr	r0, [pc, #20]	; (80023d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 80023bc:	f000 faf2 	bl	80029a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023c0:	bf00      	nop
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40010000 	.word	0x40010000
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40021000 	.word	0x40021000

080023d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e4:	d10e      	bne.n	8002404 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b16      	ldr	r3, [pc, #88]	; (8002444 <HAL_TIM_Base_MspInit+0x70>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a15      	ldr	r2, [pc, #84]	; (8002444 <HAL_TIM_Base_MspInit+0x70>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <HAL_TIM_Base_MspInit+0x70>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002402:	e01a      	b.n	800243a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <HAL_TIM_Base_MspInit+0x74>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d115      	bne.n	800243a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <HAL_TIM_Base_MspInit+0x70>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <HAL_TIM_Base_MspInit+0x70>)
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_TIM_Base_MspInit+0x70>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	201d      	movs	r0, #29
 8002430:	f000 fa81 	bl	8002936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002434:	201d      	movs	r0, #29
 8002436:	f000 fa9a 	bl	800296e <HAL_NVIC_EnableIRQ>
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
 8002448:	40000400 	.word	0x40000400

0800244c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <NMI_Handler+0x4>

08002452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002456:	e7fe      	b.n	8002456 <HardFault_Handler+0x4>

08002458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800245c:	e7fe      	b.n	800245c <MemManage_Handler+0x4>

0800245e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <BusFault_Handler+0x4>

08002464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <UsageFault_Handler+0x4>

0800246a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002498:	f000 f92e 	bl	80026f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}

080024a0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 80024b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024b8:	481b      	ldr	r0, [pc, #108]	; (8002528 <TIM2_IRQHandler+0x78>)
 80024ba:	f000 fc40 	bl	8002d3e <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 80024be:	4b1b      	ldr	r3, [pc, #108]	; (800252c <TIM2_IRQHandler+0x7c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d111      	bne.n	80024ea <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <TIM2_IRQHandler+0x80>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2bc8      	cmp	r3, #200	; 0xc8
 80024cc:	dc0a      	bgt.n	80024e4 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <TIM2_IRQHandler+0x80>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	4b18      	ldr	r3, [pc, #96]	; (8002534 <TIM2_IRQHandler+0x84>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <TIM2_IRQHandler+0x80>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	3301      	adds	r3, #1
 80024de:	4a14      	ldr	r2, [pc, #80]	; (8002530 <TIM2_IRQHandler+0x80>)
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e002      	b.n	80024ea <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <TIM2_IRQHandler+0x7c>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <TIM2_IRQHandler+0x7c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d114      	bne.n	800251c <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 80024f2:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <TIM2_IRQHandler+0x80>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b63      	cmp	r3, #99	; 0x63
 80024f8:	dd0a      	ble.n	8002510 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80024fa:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <TIM2_IRQHandler+0x80>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <TIM2_IRQHandler+0x84>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <TIM2_IRQHandler+0x80>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	3b01      	subs	r3, #1
 800250a:	4a09      	ldr	r2, [pc, #36]	; (8002530 <TIM2_IRQHandler+0x80>)
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e005      	b.n	800251c <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <TIM2_IRQHandler+0x7c>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
		  i = 100;
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <TIM2_IRQHandler+0x80>)
 8002518:	2264      	movs	r2, #100	; 0x64
 800251a:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800251c:	4805      	ldr	r0, [pc, #20]	; (8002534 <TIM2_IRQHandler+0x84>)
 800251e:	f004 fafc 	bl	8006b1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40020c00 	.word	0x40020c00
 800252c:	200000c0 	.word	0x200000c0
 8002530:	20000008 	.word	0x20000008
 8002534:	200002a0 	.word	0x200002a0

08002538 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800253c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002540:	4804      	ldr	r0, [pc, #16]	; (8002554 <TIM3_IRQHandler+0x1c>)
 8002542:	f000 fbfc 	bl	8002d3e <HAL_GPIO_TogglePin>
  read_digits();
 8002546:	f7fe feeb 	bl	8001320 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800254a:	4803      	ldr	r0, [pc, #12]	; (8002558 <TIM3_IRQHandler+0x20>)
 800254c:	f004 fae5 	bl	8006b1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40020c00 	.word	0x40020c00
 8002558:	200001a8 	.word	0x200001a8

0800255c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <OTG_FS_IRQHandler+0x10>)
 8002562:	f000 fe71 	bl	8003248 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	2000070c 	.word	0x2000070c

08002570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002578:	4a14      	ldr	r2, [pc, #80]	; (80025cc <_sbrk+0x5c>)
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <_sbrk+0x60>)
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <_sbrk+0x64>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800258c:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <_sbrk+0x64>)
 800258e:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <_sbrk+0x68>)
 8002590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <_sbrk+0x64>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	429a      	cmp	r2, r3
 800259e:	d207      	bcs.n	80025b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a0:	f008 fa80 	bl	800aaa4 <__errno>
 80025a4:	4603      	mov	r3, r0
 80025a6:	220c      	movs	r2, #12
 80025a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ae:	e009      	b.n	80025c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <_sbrk+0x64>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b6:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <_sbrk+0x64>)
 80025c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025c2:	68fb      	ldr	r3, [r7, #12]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20020000 	.word	0x20020000
 80025d0:	00000400 	.word	0x00000400
 80025d4:	200000c4 	.word	0x200000c4
 80025d8:	20000a20 	.word	0x20000a20

080025dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <SystemInit+0x20>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <SystemInit+0x20>)
 80025e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002638 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002604:	480d      	ldr	r0, [pc, #52]	; (800263c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002606:	490e      	ldr	r1, [pc, #56]	; (8002640 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002608:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800260c:	e002      	b.n	8002614 <LoopCopyDataInit>

0800260e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002612:	3304      	adds	r3, #4

08002614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002618:	d3f9      	bcc.n	800260e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800261c:	4c0b      	ldr	r4, [pc, #44]	; (800264c <LoopFillZerobss+0x26>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002620:	e001      	b.n	8002626 <LoopFillZerobss>

08002622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002624:	3204      	adds	r2, #4

08002626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002628:	d3fb      	bcc.n	8002622 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800262a:	f7ff ffd7 	bl	80025dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262e:	f008 fa3f 	bl	800aab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002632:	f7ff f87b 	bl	800172c <main>
  bx  lr    
 8002636:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800263c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002640:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002644:	0800b140 	.word	0x0800b140
  ldr r2, =_sbss
 8002648:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800264c:	20000a20 	.word	0x20000a20

08002650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002650:	e7fe      	b.n	8002650 <ADC_IRQHandler>
	...

08002654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_Init+0x40>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0d      	ldr	r2, [pc, #52]	; (8002694 <HAL_Init+0x40>)
 800265e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <HAL_Init+0x40>)
 800266a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800266e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_Init+0x40>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a07      	ldr	r2, [pc, #28]	; (8002694 <HAL_Init+0x40>)
 8002676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800267c:	2003      	movs	r0, #3
 800267e:	f000 f94f 	bl	8002920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002682:	2000      	movs	r0, #0
 8002684:	f000 f808 	bl	8002698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002688:	f7ff fc9a 	bl	8001fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023c00 	.word	0x40023c00

08002698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_InitTick+0x54>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_InitTick+0x58>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f967 	bl	800298a <HAL_SYSTICK_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00e      	b.n	80026e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b0f      	cmp	r3, #15
 80026ca:	d80a      	bhi.n	80026e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026cc:	2200      	movs	r2, #0
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026d4:	f000 f92f 	bl	8002936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d8:	4a06      	ldr	r2, [pc, #24]	; (80026f4 <HAL_InitTick+0x5c>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	2000000c 	.word	0x2000000c
 80026f0:	20000014 	.word	0x20000014
 80026f4:	20000010 	.word	0x20000010

080026f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x20>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_IncTick+0x24>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4413      	add	r3, r2
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_IncTick+0x24>)
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000014 	.word	0x20000014
 800271c:	20000330 	.word	0x20000330

08002720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return uwTick;
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_GetTick+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000330 	.word	0x20000330

08002738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002740:	f7ff ffee 	bl	8002720 <HAL_GetTick>
 8002744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002750:	d005      	beq.n	800275e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002752:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_Delay+0x44>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4413      	add	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800275e:	bf00      	nop
 8002760:	f7ff ffde 	bl	8002720 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	429a      	cmp	r2, r3
 800276e:	d8f7      	bhi.n	8002760 <HAL_Delay+0x28>
  {
  }
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000014 	.word	0x20000014

08002780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800279c:	4013      	ands	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027b2:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	60d3      	str	r3, [r2, #12]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	f003 0307 	and.w	r3, r3, #7
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	db0b      	blt.n	800280e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	f003 021f 	and.w	r2, r3, #31
 80027fc:	4907      	ldr	r1, [pc, #28]	; (800281c <__NVIC_EnableIRQ+0x38>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	2001      	movs	r0, #1
 8002806:	fa00 f202 	lsl.w	r2, r0, r2
 800280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000e100 	.word	0xe000e100

08002820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	6039      	str	r1, [r7, #0]
 800282a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	2b00      	cmp	r3, #0
 8002832:	db0a      	blt.n	800284a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	b2da      	uxtb	r2, r3
 8002838:	490c      	ldr	r1, [pc, #48]	; (800286c <__NVIC_SetPriority+0x4c>)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	0112      	lsls	r2, r2, #4
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	440b      	add	r3, r1
 8002844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002848:	e00a      	b.n	8002860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	4908      	ldr	r1, [pc, #32]	; (8002870 <__NVIC_SetPriority+0x50>)
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	3b04      	subs	r3, #4
 8002858:	0112      	lsls	r2, r2, #4
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	440b      	add	r3, r1
 800285e:	761a      	strb	r2, [r3, #24]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000e100 	.word	0xe000e100
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002874:	b480      	push	{r7}
 8002876:	b089      	sub	sp, #36	; 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f1c3 0307 	rsb	r3, r3, #7
 800288e:	2b04      	cmp	r3, #4
 8002890:	bf28      	it	cs
 8002892:	2304      	movcs	r3, #4
 8002894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3304      	adds	r3, #4
 800289a:	2b06      	cmp	r3, #6
 800289c:	d902      	bls.n	80028a4 <NVIC_EncodePriority+0x30>
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3b03      	subs	r3, #3
 80028a2:	e000      	b.n	80028a6 <NVIC_EncodePriority+0x32>
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43da      	mvns	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	401a      	ands	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	43d9      	mvns	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	4313      	orrs	r3, r2
         );
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3724      	adds	r7, #36	; 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ec:	d301      	bcc.n	80028f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ee:	2301      	movs	r3, #1
 80028f0:	e00f      	b.n	8002912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028f2:	4a0a      	ldr	r2, [pc, #40]	; (800291c <SysTick_Config+0x40>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028fa:	210f      	movs	r1, #15
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002900:	f7ff ff8e 	bl	8002820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <SysTick_Config+0x40>)
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <SysTick_Config+0x40>)
 800290c:	2207      	movs	r2, #7
 800290e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	e000e010 	.word	0xe000e010

08002920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff ff29 	bl	8002780 <__NVIC_SetPriorityGrouping>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	4603      	mov	r3, r0
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002948:	f7ff ff3e 	bl	80027c8 <__NVIC_GetPriorityGrouping>
 800294c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f7ff ff8e 	bl	8002874 <NVIC_EncodePriority>
 8002958:	4602      	mov	r2, r0
 800295a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff5d 	bl	8002820 <__NVIC_SetPriority>
}
 8002966:	bf00      	nop
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff31 	bl	80027e4 <__NVIC_EnableIRQ>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ffa2 	bl	80028dc <SysTick_Config>
 8002998:	4603      	mov	r3, r0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	e16b      	b.n	8002c98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029c0:	2201      	movs	r2, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	429a      	cmp	r2, r3
 80029da:	f040 815a 	bne.w	8002c92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d005      	beq.n	80029f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d130      	bne.n	8002a58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 0201 	and.w	r2, r3, #1
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d017      	beq.n	8002a94 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d123      	bne.n	8002ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	08da      	lsrs	r2, r3, #3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3208      	adds	r2, #8
 8002aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	220f      	movs	r2, #15
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	08da      	lsrs	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3208      	adds	r2, #8
 8002ae2:	69b9      	ldr	r1, [r7, #24]
 8002ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0203 	and.w	r2, r3, #3
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80b4 	beq.w	8002c92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b60      	ldr	r3, [pc, #384]	; (8002cb0 <HAL_GPIO_Init+0x30c>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	4a5f      	ldr	r2, [pc, #380]	; (8002cb0 <HAL_GPIO_Init+0x30c>)
 8002b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b38:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	; (8002cb0 <HAL_GPIO_Init+0x30c>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b46:	4a5b      	ldr	r2, [pc, #364]	; (8002cb4 <HAL_GPIO_Init+0x310>)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <HAL_GPIO_Init+0x314>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d02b      	beq.n	8002bca <HAL_GPIO_Init+0x226>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a51      	ldr	r2, [pc, #324]	; (8002cbc <HAL_GPIO_Init+0x318>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d025      	beq.n	8002bc6 <HAL_GPIO_Init+0x222>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a50      	ldr	r2, [pc, #320]	; (8002cc0 <HAL_GPIO_Init+0x31c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d01f      	beq.n	8002bc2 <HAL_GPIO_Init+0x21e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4f      	ldr	r2, [pc, #316]	; (8002cc4 <HAL_GPIO_Init+0x320>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d019      	beq.n	8002bbe <HAL_GPIO_Init+0x21a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4e      	ldr	r2, [pc, #312]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d013      	beq.n	8002bba <HAL_GPIO_Init+0x216>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4d      	ldr	r2, [pc, #308]	; (8002ccc <HAL_GPIO_Init+0x328>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00d      	beq.n	8002bb6 <HAL_GPIO_Init+0x212>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a4c      	ldr	r2, [pc, #304]	; (8002cd0 <HAL_GPIO_Init+0x32c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d007      	beq.n	8002bb2 <HAL_GPIO_Init+0x20e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a4b      	ldr	r2, [pc, #300]	; (8002cd4 <HAL_GPIO_Init+0x330>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d101      	bne.n	8002bae <HAL_GPIO_Init+0x20a>
 8002baa:	2307      	movs	r3, #7
 8002bac:	e00e      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bae:	2308      	movs	r3, #8
 8002bb0:	e00c      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bb2:	2306      	movs	r3, #6
 8002bb4:	e00a      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bb6:	2305      	movs	r3, #5
 8002bb8:	e008      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e006      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e004      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e002      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	f002 0203 	and.w	r2, r2, #3
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	4093      	lsls	r3, r2
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bdc:	4935      	ldr	r1, [pc, #212]	; (8002cb4 <HAL_GPIO_Init+0x310>)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bea:	4b3b      	ldr	r3, [pc, #236]	; (8002cd8 <HAL_GPIO_Init+0x334>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c0e:	4a32      	ldr	r2, [pc, #200]	; (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c14:	4b30      	ldr	r3, [pc, #192]	; (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c38:	4a27      	ldr	r2, [pc, #156]	; (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3e:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c62:	4a1d      	ldr	r2, [pc, #116]	; (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c68:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c8c:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3301      	adds	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b0f      	cmp	r3, #15
 8002c9c:	f67f ae90 	bls.w	80029c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	3724      	adds	r7, #36	; 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40013800 	.word	0x40013800
 8002cb8:	40020000 	.word	0x40020000
 8002cbc:	40020400 	.word	0x40020400
 8002cc0:	40020800 	.word	0x40020800
 8002cc4:	40020c00 	.word	0x40020c00
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40021400 	.word	0x40021400
 8002cd0:	40021800 	.word	0x40021800
 8002cd4:	40021c00 	.word	0x40021c00
 8002cd8:	40013c00 	.word	0x40013c00

08002cdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	887b      	ldrh	r3, [r7, #2]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
 8002cf8:	e001      	b.n	8002cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d1c:	787b      	ldrb	r3, [r7, #1]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d22:	887a      	ldrh	r2, [r7, #2]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d28:	e003      	b.n	8002d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d2a:	887b      	ldrh	r3, [r7, #2]
 8002d2c:	041a      	lsls	r2, r3, #16
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	619a      	str	r2, [r3, #24]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b085      	sub	sp, #20
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d50:	887a      	ldrh	r2, [r7, #2]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4013      	ands	r3, r2
 8002d56:	041a      	lsls	r2, r3, #16
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	43d9      	mvns	r1, r3
 8002d5c:	887b      	ldrh	r3, [r7, #2]
 8002d5e:	400b      	ands	r3, r1
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	619a      	str	r2, [r3, #24]
}
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d74:	b08f      	sub	sp, #60	; 0x3c
 8002d76:	af0a      	add	r7, sp, #40	; 0x28
 8002d78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e054      	b.n	8002e2e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f007 fbd6 	bl	800a550 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2203      	movs	r2, #3
 8002da8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f004 fd78 	bl	80078b8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	687e      	ldr	r6, [r7, #4]
 8002dd0:	466d      	mov	r5, sp
 8002dd2:	f106 0410 	add.w	r4, r6, #16
 8002dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002de2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002de6:	1d33      	adds	r3, r6, #4
 8002de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dea:	6838      	ldr	r0, [r7, #0]
 8002dec:	f004 fcf2 	bl	80077d4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2101      	movs	r1, #1
 8002df6:	4618      	mov	r0, r3
 8002df8:	f004 fd6f 	bl	80078da <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	603b      	str	r3, [r7, #0]
 8002e02:	687e      	ldr	r6, [r7, #4]
 8002e04:	466d      	mov	r5, sp
 8002e06:	f106 0410 	add.w	r4, r6, #16
 8002e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e16:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e1a:	1d33      	adds	r3, r6, #4
 8002e1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e1e:	6838      	ldr	r0, [r7, #0]
 8002e20:	f004 fe82 	bl	8007b28 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e36 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002e36:	b590      	push	{r4, r7, lr}
 8002e38:	b089      	sub	sp, #36	; 0x24
 8002e3a:	af04      	add	r7, sp, #16
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	4608      	mov	r0, r1
 8002e40:	4611      	mov	r1, r2
 8002e42:	461a      	mov	r2, r3
 8002e44:	4603      	mov	r3, r0
 8002e46:	70fb      	strb	r3, [r7, #3]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	70bb      	strb	r3, [r7, #2]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_HCD_HC_Init+0x28>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e076      	b.n	8002f4c <HAL_HCD_HC_Init+0x116>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	333d      	adds	r3, #61	; 0x3d
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	212c      	movs	r1, #44	; 0x2c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3338      	adds	r3, #56	; 0x38
 8002e86:	787a      	ldrb	r2, [r7, #1]
 8002e88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	212c      	movs	r1, #44	; 0x2c
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	3340      	adds	r3, #64	; 0x40
 8002e98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e9a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	212c      	movs	r1, #44	; 0x2c
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3339      	adds	r3, #57	; 0x39
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	333f      	adds	r3, #63	; 0x3f
 8002ebc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002ec0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	78ba      	ldrb	r2, [r7, #2]
 8002ec6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002eca:	b2d0      	uxtb	r0, r2
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	212c      	movs	r1, #44	; 0x2c
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	333a      	adds	r3, #58	; 0x3a
 8002ed8:	4602      	mov	r2, r0
 8002eda:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002edc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	da09      	bge.n	8002ef8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	212c      	movs	r1, #44	; 0x2c
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	333b      	adds	r3, #59	; 0x3b
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e008      	b.n	8002f0a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	333b      	adds	r3, #59	; 0x3b
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	212c      	movs	r1, #44	; 0x2c
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	333c      	adds	r3, #60	; 0x3c
 8002f18:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f1c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	787c      	ldrb	r4, [r7, #1]
 8002f24:	78ba      	ldrb	r2, [r7, #2]
 8002f26:	78f9      	ldrb	r1, [r7, #3]
 8002f28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f2a:	9302      	str	r3, [sp, #8]
 8002f2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f30:	9301      	str	r3, [sp, #4]
 8002f32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	4623      	mov	r3, r4
 8002f3a:	f004 ff77 	bl	8007e2c <USB_HC_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd90      	pop	{r4, r7, pc}

08002f54 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_HCD_HC_Halt+0x1e>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e00f      	b.n	8002f92 <HAL_HCD_HC_Halt+0x3e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f005 f9b3 	bl	80082ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4603      	mov	r3, r0
 8002fac:	70fb      	strb	r3, [r7, #3]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	70bb      	strb	r3, [r7, #2]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	333b      	adds	r3, #59	; 0x3b
 8002fc4:	78ba      	ldrb	r2, [r7, #2]
 8002fc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	333f      	adds	r3, #63	; 0x3f
 8002fd6:	787a      	ldrb	r2, [r7, #1]
 8002fd8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002fda:	7c3b      	ldrb	r3, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d112      	bne.n	8003006 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	212c      	movs	r1, #44	; 0x2c
 8002fe6:	fb01 f303 	mul.w	r3, r1, r3
 8002fea:	4413      	add	r3, r2
 8002fec:	3342      	adds	r3, #66	; 0x42
 8002fee:	2203      	movs	r2, #3
 8002ff0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	212c      	movs	r1, #44	; 0x2c
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	333d      	adds	r3, #61	; 0x3d
 8003000:	7f3a      	ldrb	r2, [r7, #28]
 8003002:	701a      	strb	r2, [r3, #0]
 8003004:	e008      	b.n	8003018 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	3342      	adds	r3, #66	; 0x42
 8003014:	2202      	movs	r2, #2
 8003016:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003018:	787b      	ldrb	r3, [r7, #1]
 800301a:	2b03      	cmp	r3, #3
 800301c:	f200 80c6 	bhi.w	80031ac <HAL_HCD_HC_SubmitRequest+0x210>
 8003020:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003026:	bf00      	nop
 8003028:	08003039 	.word	0x08003039
 800302c:	08003199 	.word	0x08003199
 8003030:	0800309d 	.word	0x0800309d
 8003034:	0800311b 	.word	0x0800311b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003038:	7c3b      	ldrb	r3, [r7, #16]
 800303a:	2b01      	cmp	r3, #1
 800303c:	f040 80b8 	bne.w	80031b0 <HAL_HCD_HC_SubmitRequest+0x214>
 8003040:	78bb      	ldrb	r3, [r7, #2]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f040 80b4 	bne.w	80031b0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003048:	8b3b      	ldrh	r3, [r7, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d108      	bne.n	8003060 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3355      	adds	r3, #85	; 0x55
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	3355      	adds	r3, #85	; 0x55
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d109      	bne.n	8003088 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	3342      	adds	r3, #66	; 0x42
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003086:	e093      	b.n	80031b0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	3342      	adds	r3, #66	; 0x42
 8003096:	2202      	movs	r2, #2
 8003098:	701a      	strb	r2, [r3, #0]
      break;
 800309a:	e089      	b.n	80031b0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800309c:	78bb      	ldrb	r3, [r7, #2]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d11d      	bne.n	80030de <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	3355      	adds	r3, #85	; 0x55
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030b6:	78fb      	ldrb	r3, [r7, #3]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	3342      	adds	r3, #66	; 0x42
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80030c8:	e073      	b.n	80031b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030ca:	78fb      	ldrb	r3, [r7, #3]
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	212c      	movs	r1, #44	; 0x2c
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	3342      	adds	r3, #66	; 0x42
 80030d8:	2202      	movs	r2, #2
 80030da:	701a      	strb	r2, [r3, #0]
      break;
 80030dc:	e069      	b.n	80031b2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	212c      	movs	r1, #44	; 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	3354      	adds	r3, #84	; 0x54
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	3342      	adds	r3, #66	; 0x42
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
      break;
 8003104:	e055      	b.n	80031b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	212c      	movs	r1, #44	; 0x2c
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	4413      	add	r3, r2
 8003112:	3342      	adds	r3, #66	; 0x42
 8003114:	2202      	movs	r2, #2
 8003116:	701a      	strb	r2, [r3, #0]
      break;
 8003118:	e04b      	b.n	80031b2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800311a:	78bb      	ldrb	r3, [r7, #2]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d11d      	bne.n	800315c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	212c      	movs	r1, #44	; 0x2c
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	3355      	adds	r3, #85	; 0x55
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d109      	bne.n	8003148 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	212c      	movs	r1, #44	; 0x2c
 800313a:	fb01 f303 	mul.w	r3, r1, r3
 800313e:	4413      	add	r3, r2
 8003140:	3342      	adds	r3, #66	; 0x42
 8003142:	2200      	movs	r2, #0
 8003144:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003146:	e034      	b.n	80031b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	212c      	movs	r1, #44	; 0x2c
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	4413      	add	r3, r2
 8003154:	3342      	adds	r3, #66	; 0x42
 8003156:	2202      	movs	r2, #2
 8003158:	701a      	strb	r2, [r3, #0]
      break;
 800315a:	e02a      	b.n	80031b2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	212c      	movs	r1, #44	; 0x2c
 8003162:	fb01 f303 	mul.w	r3, r1, r3
 8003166:	4413      	add	r3, r2
 8003168:	3354      	adds	r3, #84	; 0x54
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	3342      	adds	r3, #66	; 0x42
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
      break;
 8003182:	e016      	b.n	80031b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	212c      	movs	r1, #44	; 0x2c
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	3342      	adds	r3, #66	; 0x42
 8003192:	2202      	movs	r2, #2
 8003194:	701a      	strb	r2, [r3, #0]
      break;
 8003196:	e00c      	b.n	80031b2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	3342      	adds	r3, #66	; 0x42
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
      break;
 80031aa:	e002      	b.n	80031b2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80031ac:	bf00      	nop
 80031ae:	e000      	b.n	80031b2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80031b0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	212c      	movs	r1, #44	; 0x2c
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	3344      	adds	r3, #68	; 0x44
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	8b3a      	ldrh	r2, [r7, #24]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	202c      	movs	r0, #44	; 0x2c
 80031cc:	fb00 f303 	mul.w	r3, r0, r3
 80031d0:	440b      	add	r3, r1
 80031d2:	334c      	adds	r3, #76	; 0x4c
 80031d4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	3360      	adds	r3, #96	; 0x60
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	212c      	movs	r1, #44	; 0x2c
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	3350      	adds	r3, #80	; 0x50
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	3339      	adds	r3, #57	; 0x39
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	3361      	adds	r3, #97	; 0x61
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	222c      	movs	r2, #44	; 0x2c
 8003226:	fb02 f303 	mul.w	r3, r2, r3
 800322a:	3338      	adds	r3, #56	; 0x38
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	18d1      	adds	r1, r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	f004 ff06 	bl	8008048 <USB_HC_StartXfer>
 800323c:	4603      	mov	r3, r0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop

08003248 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f004 fc1f 	bl	8007aa2 <USB_GetMode>
 8003264:	4603      	mov	r3, r0
 8003266:	2b01      	cmp	r3, #1
 8003268:	f040 80ef 	bne.w	800344a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f004 fc03 	bl	8007a7c <USB_ReadInterrupts>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80e5 	beq.w	8003448 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f004 fbfa 	bl	8007a7c <USB_ReadInterrupts>
 8003288:	4603      	mov	r3, r0
 800328a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800328e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003292:	d104      	bne.n	800329e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800329c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f004 fbea 	bl	8007a7c <USB_ReadInterrupts>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b2:	d104      	bne.n	80032be <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f004 fbda 	bl	8007a7c <USB_ReadInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032d2:	d104      	bne.n	80032de <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f004 fbca 	bl	8007a7c <USB_ReadInterrupts>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d103      	bne.n	80032fa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2202      	movs	r2, #2
 80032f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f004 fbbc 	bl	8007a7c <USB_ReadInterrupts>
 8003304:	4603      	mov	r3, r0
 8003306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800330a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800330e:	d115      	bne.n	800333c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003318:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d108      	bne.n	800333c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f007 f98e 	bl	800a64c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2101      	movs	r1, #1
 8003336:	4618      	mov	r0, r3
 8003338:	f004 fcb2 	bl	8007ca0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f004 fb9b 	bl	8007a7c <USB_ReadInterrupts>
 8003346:	4603      	mov	r3, r0
 8003348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800334c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003350:	d102      	bne.n	8003358 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f001 f9ff 	bl	8004756 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f004 fb8d 	bl	8007a7c <USB_ReadInterrupts>
 8003362:	4603      	mov	r3, r0
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b08      	cmp	r3, #8
 800336a:	d106      	bne.n	800337a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f007 f951 	bl	800a614 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2208      	movs	r2, #8
 8003378:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f004 fb7c 	bl	8007a7c <USB_ReadInterrupts>
 8003384:	4603      	mov	r3, r0
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b10      	cmp	r3, #16
 800338c:	d101      	bne.n	8003392 <HAL_HCD_IRQHandler+0x14a>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_HCD_IRQHandler+0x14c>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d012      	beq.n	80033be <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0210 	bic.w	r2, r2, #16
 80033a6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f001 f902 	bl	80045b2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0210 	orr.w	r2, r2, #16
 80033bc:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f004 fb5a 	bl	8007a7c <USB_ReadInterrupts>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033d2:	d13a      	bne.n	800344a <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f004 ff77 	bl	80082cc <USB_HC_ReadInterrupt>
 80033de:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	e025      	b.n	8003432 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	fa22 f303 	lsr.w	r3, r2, r3
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d018      	beq.n	800342c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4413      	add	r3, r2
 8003402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800340c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003410:	d106      	bne.n	8003420 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	4619      	mov	r1, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f8ab 	bl	8003574 <HCD_HC_IN_IRQHandler>
 800341e:	e005      	b.n	800342c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	4619      	mov	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fcc6 	bl	8003db8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	3301      	adds	r3, #1
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	429a      	cmp	r2, r3
 800343a:	d3d4      	bcc.n	80033e6 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003444:	615a      	str	r2, [r3, #20]
 8003446:	e000      	b.n	800344a <HAL_HCD_IRQHandler+0x202>
      return;
 8003448:	bf00      	nop
    }
  }
}
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_HCD_Start+0x16>
 8003462:	2302      	movs	r3, #2
 8003464:	e013      	b.n	800348e <HAL_HCD_Start+0x3e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f004 fa0f 	bl	8007896 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2101      	movs	r1, #1
 800347e:	4618      	mov	r0, r3
 8003480:	f004 fc72 	bl	8007d68 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_HCD_Stop+0x16>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e00d      	b.n	80034c8 <HAL_HCD_Stop+0x32>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f005 f871 	bl	80085a0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f004 fc19 	bl	8007d14 <USB_ResetPort>
 80034e2:	4603      	mov	r3, r0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	212c      	movs	r1, #44	; 0x2c
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	4413      	add	r3, r2
 8003504:	3360      	adds	r3, #96	; 0x60
 8003506:	781b      	ldrb	r3, [r3, #0]
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	212c      	movs	r1, #44	; 0x2c
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	4413      	add	r3, r2
 800352c:	3350      	adds	r3, #80	; 0x50
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f004 fc5d 	bl	8007e08 <USB_GetCurrentFrame>
 800354e:	4603      	mov	r3, r0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f004 fc38 	bl	8007dda <USB_GetHostSpeed>
 800356a:	4603      	mov	r3, r0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4413      	add	r3, r2
 8003596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d119      	bne.n	80035d8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b0:	461a      	mov	r2, r3
 80035b2:	2304      	movs	r3, #4
 80035b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	0151      	lsls	r1, r2, #5
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	440a      	add	r2, r1
 80035cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035d0:	f043 0302 	orr.w	r3, r3, #2
 80035d4:	60d3      	str	r3, [r2, #12]
 80035d6:	e101      	b.n	80037dc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ee:	d12b      	bne.n	8003648 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fc:	461a      	mov	r2, r3
 80035fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003602:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	212c      	movs	r1, #44	; 0x2c
 800360a:	fb01 f303 	mul.w	r3, r1, r3
 800360e:	4413      	add	r3, r2
 8003610:	3361      	adds	r3, #97	; 0x61
 8003612:	2207      	movs	r2, #7
 8003614:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4413      	add	r3, r2
 800361e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	0151      	lsls	r1, r2, #5
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	440a      	add	r2, r1
 800362c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003630:	f043 0302 	orr.w	r3, r3, #2
 8003634:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f004 fe54 	bl	80082ee <USB_HC_Halt>
 8003646:	e0c9      	b.n	80037dc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b20      	cmp	r3, #32
 800365c:	d109      	bne.n	8003672 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4413      	add	r3, r2
 8003666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366a:	461a      	mov	r2, r3
 800366c:	2320      	movs	r3, #32
 800366e:	6093      	str	r3, [r2, #8]
 8003670:	e0b4      	b.n	80037dc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4413      	add	r3, r2
 800367a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b08      	cmp	r3, #8
 8003686:	d133      	bne.n	80036f0 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	0151      	lsls	r1, r2, #5
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	440a      	add	r2, r1
 800369e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036a2:	f043 0302 	orr.w	r3, r3, #2
 80036a6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	3361      	adds	r3, #97	; 0x61
 80036b6:	2205      	movs	r2, #5
 80036b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c6:	461a      	mov	r2, r3
 80036c8:	2310      	movs	r3, #16
 80036ca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d8:	461a      	mov	r2, r3
 80036da:	2308      	movs	r3, #8
 80036dc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f004 fe00 	bl	80082ee <USB_HC_Halt>
 80036ee:	e075      	b.n	80037dc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003706:	d134      	bne.n	8003772 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4413      	add	r3, r2
 8003710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	0151      	lsls	r1, r2, #5
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	440a      	add	r2, r1
 800371e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003722:	f043 0302 	orr.w	r3, r3, #2
 8003726:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	212c      	movs	r1, #44	; 0x2c
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	3361      	adds	r3, #97	; 0x61
 8003736:	2208      	movs	r2, #8
 8003738:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4413      	add	r3, r2
 8003742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003746:	461a      	mov	r2, r3
 8003748:	2310      	movs	r3, #16
 800374a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003758:	461a      	mov	r2, r3
 800375a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800375e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	4611      	mov	r1, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f004 fdbf 	bl	80082ee <USB_HC_Halt>
 8003770:	e034      	b.n	80037dc <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4413      	add	r3, r2
 800377a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003784:	2b80      	cmp	r3, #128	; 0x80
 8003786:	d129      	bne.n	80037dc <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	0151      	lsls	r1, r2, #5
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	440a      	add	r2, r1
 800379e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037a2:	f043 0302 	orr.w	r3, r3, #2
 80037a6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	212c      	movs	r1, #44	; 0x2c
 80037ae:	fb01 f303 	mul.w	r3, r1, r3
 80037b2:	4413      	add	r3, r2
 80037b4:	3361      	adds	r3, #97	; 0x61
 80037b6:	2206      	movs	r2, #6
 80037b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	4611      	mov	r1, r2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f004 fd92 	bl	80082ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d6:	461a      	mov	r2, r3
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f2:	d122      	bne.n	800383a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	0151      	lsls	r1, r2, #5
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	440a      	add	r2, r1
 800380a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800380e:	f043 0302 	orr.w	r3, r3, #2
 8003812:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	4611      	mov	r1, r2
 800381e:	4618      	mov	r0, r3
 8003820:	f004 fd65 	bl	80082ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4413      	add	r3, r2
 800382c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003830:	461a      	mov	r2, r3
 8003832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003836:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003838:	e2ba      	b.n	8003db0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4413      	add	r3, r2
 8003842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	f040 811b 	bne.w	8003a88 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d019      	beq.n	800388e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	212c      	movs	r1, #44	; 0x2c
 8003860:	fb01 f303 	mul.w	r3, r1, r3
 8003864:	4413      	add	r3, r2
 8003866:	3348      	adds	r3, #72	; 0x48
 8003868:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	0159      	lsls	r1, r3, #5
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	440b      	add	r3, r1
 8003872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800387c:	1ad2      	subs	r2, r2, r3
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	202c      	movs	r0, #44	; 0x2c
 8003884:	fb00 f303 	mul.w	r3, r0, r3
 8003888:	440b      	add	r3, r1
 800388a:	3350      	adds	r3, #80	; 0x50
 800388c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	212c      	movs	r1, #44	; 0x2c
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	4413      	add	r3, r2
 800389a:	3361      	adds	r3, #97	; 0x61
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	212c      	movs	r1, #44	; 0x2c
 80038a6:	fb01 f303 	mul.w	r3, r1, r3
 80038aa:	4413      	add	r3, r2
 80038ac:	335c      	adds	r3, #92	; 0x5c
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038be:	461a      	mov	r2, r3
 80038c0:	2301      	movs	r3, #1
 80038c2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	212c      	movs	r1, #44	; 0x2c
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	333f      	adds	r3, #63	; 0x3f
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	212c      	movs	r1, #44	; 0x2c
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	4413      	add	r3, r2
 80038e4:	333f      	adds	r3, #63	; 0x3f
 80038e6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d121      	bne.n	8003930 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	0151      	lsls	r1, r2, #5
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	440a      	add	r2, r1
 8003902:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003906:	f043 0302 	orr.w	r3, r3, #2
 800390a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	4611      	mov	r1, r2
 8003916:	4618      	mov	r0, r3
 8003918:	f004 fce9 	bl	80082ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4413      	add	r3, r2
 8003924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003928:	461a      	mov	r2, r3
 800392a:	2310      	movs	r3, #16
 800392c:	6093      	str	r3, [r2, #8]
 800392e:	e066      	b.n	80039fe <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	212c      	movs	r1, #44	; 0x2c
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	333f      	adds	r3, #63	; 0x3f
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b03      	cmp	r3, #3
 8003942:	d127      	bne.n	8003994 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4413      	add	r3, r2
 800394c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	0151      	lsls	r1, r2, #5
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	440a      	add	r2, r1
 800395a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800395e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003962:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	212c      	movs	r1, #44	; 0x2c
 800396a:	fb01 f303 	mul.w	r3, r1, r3
 800396e:	4413      	add	r3, r2
 8003970:	3360      	adds	r3, #96	; 0x60
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	b2d9      	uxtb	r1, r3
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	202c      	movs	r0, #44	; 0x2c
 8003980:	fb00 f303 	mul.w	r3, r0, r3
 8003984:	4413      	add	r3, r2
 8003986:	3360      	adds	r3, #96	; 0x60
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f006 fe6b 	bl	800a668 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003992:	e034      	b.n	80039fe <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	212c      	movs	r1, #44	; 0x2c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	333f      	adds	r3, #63	; 0x3f
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d12a      	bne.n	80039fe <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	212c      	movs	r1, #44	; 0x2c
 80039ae:	fb01 f303 	mul.w	r3, r1, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	3360      	adds	r3, #96	; 0x60
 80039b6:	2201      	movs	r2, #1
 80039b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	212c      	movs	r1, #44	; 0x2c
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	3354      	adds	r3, #84	; 0x54
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	f083 0301 	eor.w	r3, r3, #1
 80039ce:	b2d8      	uxtb	r0, r3
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	212c      	movs	r1, #44	; 0x2c
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	4413      	add	r3, r2
 80039dc:	3354      	adds	r3, #84	; 0x54
 80039de:	4602      	mov	r2, r0
 80039e0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	b2d9      	uxtb	r1, r3
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	202c      	movs	r0, #44	; 0x2c
 80039ec:	fb00 f303 	mul.w	r3, r0, r3
 80039f0:	4413      	add	r3, r2
 80039f2:	3360      	adds	r3, #96	; 0x60
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f006 fe35 	bl	800a668 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d12b      	bne.n	8003a5e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	212c      	movs	r1, #44	; 0x2c
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	3348      	adds	r3, #72	; 0x48
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	202c      	movs	r0, #44	; 0x2c
 8003a1c:	fb00 f202 	mul.w	r2, r0, r2
 8003a20:	440a      	add	r2, r1
 8003a22:	3240      	adds	r2, #64	; 0x40
 8003a24:	8812      	ldrh	r2, [r2, #0]
 8003a26:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 81be 	beq.w	8003db0 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	3354      	adds	r3, #84	; 0x54
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	f083 0301 	eor.w	r3, r3, #1
 8003a48:	b2d8      	uxtb	r0, r3
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	3354      	adds	r3, #84	; 0x54
 8003a58:	4602      	mov	r2, r0
 8003a5a:	701a      	strb	r2, [r3, #0]
}
 8003a5c:	e1a8      	b.n	8003db0 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	212c      	movs	r1, #44	; 0x2c
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	4413      	add	r3, r2
 8003a6a:	3354      	adds	r3, #84	; 0x54
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	f083 0301 	eor.w	r3, r3, #1
 8003a72:	b2d8      	uxtb	r0, r3
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	212c      	movs	r1, #44	; 0x2c
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	3354      	adds	r3, #84	; 0x54
 8003a82:	4602      	mov	r2, r0
 8003a84:	701a      	strb	r2, [r3, #0]
}
 8003a86:	e193      	b.n	8003db0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	f040 8106 	bne.w	8003cac <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	0151      	lsls	r1, r2, #5
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	440a      	add	r2, r1
 8003ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aba:	f023 0302 	bic.w	r3, r3, #2
 8003abe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	212c      	movs	r1, #44	; 0x2c
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	3361      	adds	r3, #97	; 0x61
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d109      	bne.n	8003ae8 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	212c      	movs	r1, #44	; 0x2c
 8003ada:	fb01 f303 	mul.w	r3, r1, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	3360      	adds	r3, #96	; 0x60
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	e0c9      	b.n	8003c7c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	212c      	movs	r1, #44	; 0x2c
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	4413      	add	r3, r2
 8003af4:	3361      	adds	r3, #97	; 0x61
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b05      	cmp	r3, #5
 8003afa:	d109      	bne.n	8003b10 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	212c      	movs	r1, #44	; 0x2c
 8003b02:	fb01 f303 	mul.w	r3, r1, r3
 8003b06:	4413      	add	r3, r2
 8003b08:	3360      	adds	r3, #96	; 0x60
 8003b0a:	2205      	movs	r2, #5
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	e0b5      	b.n	8003c7c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	212c      	movs	r1, #44	; 0x2c
 8003b16:	fb01 f303 	mul.w	r3, r1, r3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3361      	adds	r3, #97	; 0x61
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b06      	cmp	r3, #6
 8003b22:	d009      	beq.n	8003b38 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	212c      	movs	r1, #44	; 0x2c
 8003b2a:	fb01 f303 	mul.w	r3, r1, r3
 8003b2e:	4413      	add	r3, r2
 8003b30:	3361      	adds	r3, #97	; 0x61
 8003b32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d150      	bne.n	8003bda <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	212c      	movs	r1, #44	; 0x2c
 8003b3e:	fb01 f303 	mul.w	r3, r1, r3
 8003b42:	4413      	add	r3, r2
 8003b44:	335c      	adds	r3, #92	; 0x5c
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	202c      	movs	r0, #44	; 0x2c
 8003b50:	fb00 f303 	mul.w	r3, r0, r3
 8003b54:	440b      	add	r3, r1
 8003b56:	335c      	adds	r3, #92	; 0x5c
 8003b58:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	212c      	movs	r1, #44	; 0x2c
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	4413      	add	r3, r2
 8003b66:	335c      	adds	r3, #92	; 0x5c
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d912      	bls.n	8003b94 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	212c      	movs	r1, #44	; 0x2c
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	4413      	add	r3, r2
 8003b7a:	335c      	adds	r3, #92	; 0x5c
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	212c      	movs	r1, #44	; 0x2c
 8003b86:	fb01 f303 	mul.w	r3, r1, r3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3360      	adds	r3, #96	; 0x60
 8003b8e:	2204      	movs	r2, #4
 8003b90:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b92:	e073      	b.n	8003c7c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	212c      	movs	r1, #44	; 0x2c
 8003b9a:	fb01 f303 	mul.w	r3, r1, r3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3360      	adds	r3, #96	; 0x60
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bbc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bc4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bd8:	e050      	b.n	8003c7c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	212c      	movs	r1, #44	; 0x2c
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	3361      	adds	r3, #97	; 0x61
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d122      	bne.n	8003c34 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	212c      	movs	r1, #44	; 0x2c
 8003bf4:	fb01 f303 	mul.w	r3, r1, r3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3360      	adds	r3, #96	; 0x60
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c16:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c1e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e023      	b.n	8003c7c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	212c      	movs	r1, #44	; 0x2c
 8003c3a:	fb01 f303 	mul.w	r3, r1, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	3361      	adds	r3, #97	; 0x61
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b07      	cmp	r3, #7
 8003c46:	d119      	bne.n	8003c7c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	212c      	movs	r1, #44	; 0x2c
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	335c      	adds	r3, #92	; 0x5c
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	202c      	movs	r0, #44	; 0x2c
 8003c60:	fb00 f303 	mul.w	r3, r0, r3
 8003c64:	440b      	add	r3, r1
 8003c66:	335c      	adds	r3, #92	; 0x5c
 8003c68:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	212c      	movs	r1, #44	; 0x2c
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	4413      	add	r3, r2
 8003c76:	3360      	adds	r3, #96	; 0x60
 8003c78:	2204      	movs	r2, #4
 8003c7a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c88:	461a      	mov	r2, r3
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	b2d9      	uxtb	r1, r3
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	202c      	movs	r0, #44	; 0x2c
 8003c98:	fb00 f303 	mul.w	r3, r0, r3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3360      	adds	r3, #96	; 0x60
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f006 fcdf 	bl	800a668 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003caa:	e081      	b.n	8003db0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d176      	bne.n	8003db0 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	212c      	movs	r1, #44	; 0x2c
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	333f      	adds	r3, #63	; 0x3f
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d121      	bne.n	8003d1a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	335c      	adds	r3, #92	; 0x5c
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	0151      	lsls	r1, r2, #5
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	440a      	add	r2, r1
 8003cfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d02:	f043 0302 	orr.w	r3, r3, #2
 8003d06:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	4611      	mov	r1, r2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f004 faeb 	bl	80082ee <USB_HC_Halt>
 8003d18:	e041      	b.n	8003d9e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	212c      	movs	r1, #44	; 0x2c
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	4413      	add	r3, r2
 8003d26:	333f      	adds	r3, #63	; 0x3f
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d009      	beq.n	8003d42 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	212c      	movs	r1, #44	; 0x2c
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	4413      	add	r3, r2
 8003d3a:	333f      	adds	r3, #63	; 0x3f
 8003d3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d12d      	bne.n	8003d9e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	212c      	movs	r1, #44	; 0x2c
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	335c      	adds	r3, #92	; 0x5c
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d120      	bne.n	8003d9e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	212c      	movs	r1, #44	; 0x2c
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	3361      	adds	r3, #97	; 0x61
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	0151      	lsls	r1, r2, #5
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	440a      	add	r2, r1
 8003d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d88:	f043 0302 	orr.w	r3, r3, #2
 8003d8c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f004 faa8 	bl	80082ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003daa:	461a      	mov	r2, r3
 8003dac:	2310      	movs	r3, #16
 8003dae:	6093      	str	r3, [r2, #8]
}
 8003db0:	bf00      	nop
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d119      	bne.n	8003e1c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df4:	461a      	mov	r2, r3
 8003df6:	2304      	movs	r3, #4
 8003df8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	0151      	lsls	r1, r2, #5
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	440a      	add	r2, r1
 8003e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e14:	f043 0302 	orr.w	r3, r3, #2
 8003e18:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003e1a:	e3c6      	b.n	80045aa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d13e      	bne.n	8003eb0 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3e:	461a      	mov	r2, r3
 8003e40:	2320      	movs	r3, #32
 8003e42:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	212c      	movs	r1, #44	; 0x2c
 8003e4a:	fb01 f303 	mul.w	r3, r1, r3
 8003e4e:	4413      	add	r3, r2
 8003e50:	333d      	adds	r3, #61	; 0x3d
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	f040 83a8 	bne.w	80045aa <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	212c      	movs	r1, #44	; 0x2c
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	4413      	add	r3, r2
 8003e66:	333d      	adds	r3, #61	; 0x3d
 8003e68:	2200      	movs	r2, #0
 8003e6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	212c      	movs	r1, #44	; 0x2c
 8003e72:	fb01 f303 	mul.w	r3, r1, r3
 8003e76:	4413      	add	r3, r2
 8003e78:	3360      	adds	r3, #96	; 0x60
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	0151      	lsls	r1, r2, #5
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	440a      	add	r2, r1
 8003e94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e98:	f043 0302 	orr.w	r3, r3, #2
 8003e9c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f004 fa20 	bl	80082ee <USB_HC_Halt>
}
 8003eae:	e37c      	b.n	80045aa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec6:	d122      	bne.n	8003f0e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	0151      	lsls	r1, r2, #5
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	440a      	add	r2, r1
 8003ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ee2:	f043 0302 	orr.w	r3, r3, #2
 8003ee6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f004 f9fb 	bl	80082ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f04:	461a      	mov	r2, r3
 8003f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f0a:	6093      	str	r3, [r2, #8]
}
 8003f0c:	e34d      	b.n	80045aa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d150      	bne.n	8003fc6 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	212c      	movs	r1, #44	; 0x2c
 8003f2a:	fb01 f303 	mul.w	r3, r1, r3
 8003f2e:	4413      	add	r3, r2
 8003f30:	335c      	adds	r3, #92	; 0x5c
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d111      	bne.n	8003f70 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	212c      	movs	r1, #44	; 0x2c
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	4413      	add	r3, r2
 8003f58:	333d      	adds	r3, #61	; 0x3d
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2340      	movs	r3, #64	; 0x40
 8003f6e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	0151      	lsls	r1, r2, #5
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	440a      	add	r2, r1
 8003f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f8a:	f043 0302 	orr.w	r3, r3, #2
 8003f8e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	4611      	mov	r1, r2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f004 f9a7 	bl	80082ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fac:	461a      	mov	r2, r3
 8003fae:	2301      	movs	r3, #1
 8003fb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	212c      	movs	r1, #44	; 0x2c
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3361      	adds	r3, #97	; 0x61
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	701a      	strb	r2, [r3, #0]
}
 8003fc4:	e2f1      	b.n	80045aa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	2b40      	cmp	r3, #64	; 0x40
 8003fda:	d13c      	bne.n	8004056 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	212c      	movs	r1, #44	; 0x2c
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3361      	adds	r3, #97	; 0x61
 8003fea:	2204      	movs	r2, #4
 8003fec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	212c      	movs	r1, #44	; 0x2c
 8003ff4:	fb01 f303 	mul.w	r3, r1, r3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	333d      	adds	r3, #61	; 0x3d
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	212c      	movs	r1, #44	; 0x2c
 8004006:	fb01 f303 	mul.w	r3, r1, r3
 800400a:	4413      	add	r3, r2
 800400c:	335c      	adds	r3, #92	; 0x5c
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	4413      	add	r3, r2
 800401a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	0151      	lsls	r1, r2, #5
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	440a      	add	r2, r1
 8004028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800402c:	f043 0302 	orr.w	r3, r3, #2
 8004030:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f004 f956 	bl	80082ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	4413      	add	r3, r2
 800404a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404e:	461a      	mov	r2, r3
 8004050:	2340      	movs	r3, #64	; 0x40
 8004052:	6093      	str	r3, [r2, #8]
}
 8004054:	e2a9      	b.n	80045aa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	4413      	add	r3, r2
 800405e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b08      	cmp	r3, #8
 800406a:	d12a      	bne.n	80040c2 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	4413      	add	r3, r2
 8004074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004078:	461a      	mov	r2, r3
 800407a:	2308      	movs	r3, #8
 800407c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	4413      	add	r3, r2
 8004086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	0151      	lsls	r1, r2, #5
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	440a      	add	r2, r1
 8004094:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004098:	f043 0302 	orr.w	r3, r3, #2
 800409c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	4611      	mov	r1, r2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f004 f920 	bl	80082ee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	212c      	movs	r1, #44	; 0x2c
 80040b4:	fb01 f303 	mul.w	r3, r1, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	3361      	adds	r3, #97	; 0x61
 80040bc:	2205      	movs	r2, #5
 80040be:	701a      	strb	r2, [r3, #0]
}
 80040c0:	e273      	b.n	80045aa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b10      	cmp	r3, #16
 80040d6:	d150      	bne.n	800417a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	212c      	movs	r1, #44	; 0x2c
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	335c      	adds	r3, #92	; 0x5c
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	212c      	movs	r1, #44	; 0x2c
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	4413      	add	r3, r2
 80040f6:	3361      	adds	r3, #97	; 0x61
 80040f8:	2203      	movs	r2, #3
 80040fa:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	212c      	movs	r1, #44	; 0x2c
 8004102:	fb01 f303 	mul.w	r3, r1, r3
 8004106:	4413      	add	r3, r2
 8004108:	333d      	adds	r3, #61	; 0x3d
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d112      	bne.n	8004136 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	212c      	movs	r1, #44	; 0x2c
 8004116:	fb01 f303 	mul.w	r3, r1, r3
 800411a:	4413      	add	r3, r2
 800411c:	333c      	adds	r3, #60	; 0x3c
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d108      	bne.n	8004136 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	212c      	movs	r1, #44	; 0x2c
 800412a:	fb01 f303 	mul.w	r3, r1, r3
 800412e:	4413      	add	r3, r2
 8004130:	333d      	adds	r3, #61	; 0x3d
 8004132:	2201      	movs	r2, #1
 8004134:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	4413      	add	r3, r2
 800413e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	0151      	lsls	r1, r2, #5
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	440a      	add	r2, r1
 800414c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004150:	f043 0302 	orr.w	r3, r3, #2
 8004154:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f004 f8c4 	bl	80082ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	4413      	add	r3, r2
 800416e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004172:	461a      	mov	r2, r3
 8004174:	2310      	movs	r3, #16
 8004176:	6093      	str	r3, [r2, #8]
}
 8004178:	e217      	b.n	80045aa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	4413      	add	r3, r2
 8004182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b80      	cmp	r3, #128	; 0x80
 800418e:	d174      	bne.n	800427a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d121      	bne.n	80041dc <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3361      	adds	r3, #97	; 0x61
 80041a6:	2206      	movs	r2, #6
 80041a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	0151      	lsls	r1, r2, #5
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	440a      	add	r2, r1
 80041c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	4611      	mov	r1, r2
 80041d4:	4618      	mov	r0, r3
 80041d6:	f004 f88a 	bl	80082ee <USB_HC_Halt>
 80041da:	e044      	b.n	8004266 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	212c      	movs	r1, #44	; 0x2c
 80041e2:	fb01 f303 	mul.w	r3, r1, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	335c      	adds	r3, #92	; 0x5c
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	202c      	movs	r0, #44	; 0x2c
 80041f4:	fb00 f303 	mul.w	r3, r0, r3
 80041f8:	440b      	add	r3, r1
 80041fa:	335c      	adds	r3, #92	; 0x5c
 80041fc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	212c      	movs	r1, #44	; 0x2c
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	4413      	add	r3, r2
 800420a:	335c      	adds	r3, #92	; 0x5c
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d920      	bls.n	8004254 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	212c      	movs	r1, #44	; 0x2c
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	4413      	add	r3, r2
 800421e:	335c      	adds	r3, #92	; 0x5c
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	212c      	movs	r1, #44	; 0x2c
 800422a:	fb01 f303 	mul.w	r3, r1, r3
 800422e:	4413      	add	r3, r2
 8004230:	3360      	adds	r3, #96	; 0x60
 8004232:	2204      	movs	r2, #4
 8004234:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	b2d9      	uxtb	r1, r3
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	202c      	movs	r0, #44	; 0x2c
 8004240:	fb00 f303 	mul.w	r3, r0, r3
 8004244:	4413      	add	r3, r2
 8004246:	3360      	adds	r3, #96	; 0x60
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f006 fa0b 	bl	800a668 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004252:	e008      	b.n	8004266 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	212c      	movs	r1, #44	; 0x2c
 800425a:	fb01 f303 	mul.w	r3, r1, r3
 800425e:	4413      	add	r3, r2
 8004260:	3360      	adds	r3, #96	; 0x60
 8004262:	2202      	movs	r2, #2
 8004264:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	4413      	add	r3, r2
 800426e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004272:	461a      	mov	r2, r3
 8004274:	2380      	movs	r3, #128	; 0x80
 8004276:	6093      	str	r3, [r2, #8]
}
 8004278:	e197      	b.n	80045aa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	4413      	add	r3, r2
 8004282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004290:	d134      	bne.n	80042fc <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	4413      	add	r3, r2
 800429a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ac:	f043 0302 	orr.w	r3, r3, #2
 80042b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	4611      	mov	r1, r2
 80042bc:	4618      	mov	r0, r3
 80042be:	f004 f816 	bl	80082ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ce:	461a      	mov	r2, r3
 80042d0:	2310      	movs	r3, #16
 80042d2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e0:	461a      	mov	r2, r3
 80042e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	212c      	movs	r1, #44	; 0x2c
 80042ee:	fb01 f303 	mul.w	r3, r1, r3
 80042f2:	4413      	add	r3, r2
 80042f4:	3361      	adds	r3, #97	; 0x61
 80042f6:	2208      	movs	r2, #8
 80042f8:	701a      	strb	r2, [r3, #0]
}
 80042fa:	e156      	b.n	80045aa <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b02      	cmp	r3, #2
 8004310:	f040 814b 	bne.w	80045aa <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	4413      	add	r3, r2
 800431c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	0151      	lsls	r1, r2, #5
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	440a      	add	r2, r1
 800432a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800432e:	f023 0302 	bic.w	r3, r3, #2
 8004332:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	212c      	movs	r1, #44	; 0x2c
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	4413      	add	r3, r2
 8004340:	3361      	adds	r3, #97	; 0x61
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d179      	bne.n	800443c <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	212c      	movs	r1, #44	; 0x2c
 800434e:	fb01 f303 	mul.w	r3, r1, r3
 8004352:	4413      	add	r3, r2
 8004354:	3360      	adds	r3, #96	; 0x60
 8004356:	2201      	movs	r2, #1
 8004358:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	212c      	movs	r1, #44	; 0x2c
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	4413      	add	r3, r2
 8004366:	333f      	adds	r3, #63	; 0x3f
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d00a      	beq.n	8004384 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	212c      	movs	r1, #44	; 0x2c
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	4413      	add	r3, r2
 800437a:	333f      	adds	r3, #63	; 0x3f
 800437c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800437e:	2b03      	cmp	r3, #3
 8004380:	f040 80fc 	bne.w	800457c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d142      	bne.n	8004412 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	212c      	movs	r1, #44	; 0x2c
 8004392:	fb01 f303 	mul.w	r3, r1, r3
 8004396:	4413      	add	r3, r2
 8004398:	334c      	adds	r3, #76	; 0x4c
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 80ed 	beq.w	800457c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	212c      	movs	r1, #44	; 0x2c
 80043a8:	fb01 f303 	mul.w	r3, r1, r3
 80043ac:	4413      	add	r3, r2
 80043ae:	334c      	adds	r3, #76	; 0x4c
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	202c      	movs	r0, #44	; 0x2c
 80043b8:	fb00 f202 	mul.w	r2, r0, r2
 80043bc:	440a      	add	r2, r1
 80043be:	3240      	adds	r2, #64	; 0x40
 80043c0:	8812      	ldrh	r2, [r2, #0]
 80043c2:	4413      	add	r3, r2
 80043c4:	3b01      	subs	r3, #1
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	202c      	movs	r0, #44	; 0x2c
 80043cc:	fb00 f202 	mul.w	r2, r0, r2
 80043d0:	440a      	add	r2, r1
 80043d2:	3240      	adds	r2, #64	; 0x40
 80043d4:	8812      	ldrh	r2, [r2, #0]
 80043d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80ca 	beq.w	800457c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	212c      	movs	r1, #44	; 0x2c
 80043ee:	fb01 f303 	mul.w	r3, r1, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	3355      	adds	r3, #85	; 0x55
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	f083 0301 	eor.w	r3, r3, #1
 80043fc:	b2d8      	uxtb	r0, r3
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	212c      	movs	r1, #44	; 0x2c
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	4413      	add	r3, r2
 800440a:	3355      	adds	r3, #85	; 0x55
 800440c:	4602      	mov	r2, r0
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	e0b4      	b.n	800457c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	212c      	movs	r1, #44	; 0x2c
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	4413      	add	r3, r2
 800441e:	3355      	adds	r3, #85	; 0x55
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	f083 0301 	eor.w	r3, r3, #1
 8004426:	b2d8      	uxtb	r0, r3
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	212c      	movs	r1, #44	; 0x2c
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	4413      	add	r3, r2
 8004434:	3355      	adds	r3, #85	; 0x55
 8004436:	4602      	mov	r2, r0
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	e09f      	b.n	800457c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	212c      	movs	r1, #44	; 0x2c
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	4413      	add	r3, r2
 8004448:	3361      	adds	r3, #97	; 0x61
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b03      	cmp	r3, #3
 800444e:	d109      	bne.n	8004464 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	212c      	movs	r1, #44	; 0x2c
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	4413      	add	r3, r2
 800445c:	3360      	adds	r3, #96	; 0x60
 800445e:	2202      	movs	r2, #2
 8004460:	701a      	strb	r2, [r3, #0]
 8004462:	e08b      	b.n	800457c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	212c      	movs	r1, #44	; 0x2c
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	4413      	add	r3, r2
 8004470:	3361      	adds	r3, #97	; 0x61
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b04      	cmp	r3, #4
 8004476:	d109      	bne.n	800448c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	212c      	movs	r1, #44	; 0x2c
 800447e:	fb01 f303 	mul.w	r3, r1, r3
 8004482:	4413      	add	r3, r2
 8004484:	3360      	adds	r3, #96	; 0x60
 8004486:	2202      	movs	r2, #2
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	e077      	b.n	800457c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	212c      	movs	r1, #44	; 0x2c
 8004492:	fb01 f303 	mul.w	r3, r1, r3
 8004496:	4413      	add	r3, r2
 8004498:	3361      	adds	r3, #97	; 0x61
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b05      	cmp	r3, #5
 800449e:	d109      	bne.n	80044b4 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	212c      	movs	r1, #44	; 0x2c
 80044a6:	fb01 f303 	mul.w	r3, r1, r3
 80044aa:	4413      	add	r3, r2
 80044ac:	3360      	adds	r3, #96	; 0x60
 80044ae:	2205      	movs	r2, #5
 80044b0:	701a      	strb	r2, [r3, #0]
 80044b2:	e063      	b.n	800457c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	212c      	movs	r1, #44	; 0x2c
 80044ba:	fb01 f303 	mul.w	r3, r1, r3
 80044be:	4413      	add	r3, r2
 80044c0:	3361      	adds	r3, #97	; 0x61
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b06      	cmp	r3, #6
 80044c6:	d009      	beq.n	80044dc <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	212c      	movs	r1, #44	; 0x2c
 80044ce:	fb01 f303 	mul.w	r3, r1, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	3361      	adds	r3, #97	; 0x61
 80044d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d14f      	bne.n	800457c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	212c      	movs	r1, #44	; 0x2c
 80044e2:	fb01 f303 	mul.w	r3, r1, r3
 80044e6:	4413      	add	r3, r2
 80044e8:	335c      	adds	r3, #92	; 0x5c
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	202c      	movs	r0, #44	; 0x2c
 80044f4:	fb00 f303 	mul.w	r3, r0, r3
 80044f8:	440b      	add	r3, r1
 80044fa:	335c      	adds	r3, #92	; 0x5c
 80044fc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	212c      	movs	r1, #44	; 0x2c
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	4413      	add	r3, r2
 800450a:	335c      	adds	r3, #92	; 0x5c
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d912      	bls.n	8004538 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	212c      	movs	r1, #44	; 0x2c
 8004518:	fb01 f303 	mul.w	r3, r1, r3
 800451c:	4413      	add	r3, r2
 800451e:	335c      	adds	r3, #92	; 0x5c
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	212c      	movs	r1, #44	; 0x2c
 800452a:	fb01 f303 	mul.w	r3, r1, r3
 800452e:	4413      	add	r3, r2
 8004530:	3360      	adds	r3, #96	; 0x60
 8004532:	2204      	movs	r2, #4
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	e021      	b.n	800457c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	212c      	movs	r1, #44	; 0x2c
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	4413      	add	r3, r2
 8004544:	3360      	adds	r3, #96	; 0x60
 8004546:	2202      	movs	r2, #2
 8004548:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	4413      	add	r3, r2
 8004552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004560:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004568:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	4413      	add	r3, r2
 8004572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004576:	461a      	mov	r2, r3
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	4413      	add	r3, r2
 8004584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004588:	461a      	mov	r2, r3
 800458a:	2302      	movs	r3, #2
 800458c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	b2d9      	uxtb	r1, r3
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	202c      	movs	r0, #44	; 0x2c
 8004598:	fb00 f303 	mul.w	r3, r0, r3
 800459c:	4413      	add	r3, r2
 800459e:	3360      	adds	r3, #96	; 0x60
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f006 f85f 	bl	800a668 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80045aa:	bf00      	nop
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b08a      	sub	sp, #40	; 0x28
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	0c5b      	lsrs	r3, r3, #17
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	091b      	lsrs	r3, r3, #4
 80045e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045e6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d004      	beq.n	80045f8 <HCD_RXQLVL_IRQHandler+0x46>
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b05      	cmp	r3, #5
 80045f2:	f000 80a9 	beq.w	8004748 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80045f6:	e0aa      	b.n	800474e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80a6 	beq.w	800474c <HCD_RXQLVL_IRQHandler+0x19a>
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	212c      	movs	r1, #44	; 0x2c
 8004606:	fb01 f303 	mul.w	r3, r1, r3
 800460a:	4413      	add	r3, r2
 800460c:	3344      	adds	r3, #68	; 0x44
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 809b 	beq.w	800474c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	212c      	movs	r1, #44	; 0x2c
 800461c:	fb01 f303 	mul.w	r3, r1, r3
 8004620:	4413      	add	r3, r2
 8004622:	3350      	adds	r3, #80	; 0x50
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	441a      	add	r2, r3
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	202c      	movs	r0, #44	; 0x2c
 8004630:	fb00 f303 	mul.w	r3, r0, r3
 8004634:	440b      	add	r3, r1
 8004636:	334c      	adds	r3, #76	; 0x4c
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d87a      	bhi.n	8004734 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	212c      	movs	r1, #44	; 0x2c
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	4413      	add	r3, r2
 800464e:	3344      	adds	r3, #68	; 0x44
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	b292      	uxth	r2, r2
 8004656:	4619      	mov	r1, r3
 8004658:	f003 f9e7 	bl	8007a2a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	212c      	movs	r1, #44	; 0x2c
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	4413      	add	r3, r2
 8004668:	3344      	adds	r3, #68	; 0x44
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	441a      	add	r2, r3
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	202c      	movs	r0, #44	; 0x2c
 8004676:	fb00 f303 	mul.w	r3, r0, r3
 800467a:	440b      	add	r3, r1
 800467c:	3344      	adds	r3, #68	; 0x44
 800467e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	212c      	movs	r1, #44	; 0x2c
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	4413      	add	r3, r2
 800468c:	3350      	adds	r3, #80	; 0x50
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	441a      	add	r2, r3
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	202c      	movs	r0, #44	; 0x2c
 800469a:	fb00 f303 	mul.w	r3, r0, r3
 800469e:	440b      	add	r3, r1
 80046a0:	3350      	adds	r3, #80	; 0x50
 80046a2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	0cdb      	lsrs	r3, r3, #19
 80046b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046b8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	212c      	movs	r1, #44	; 0x2c
 80046c0:	fb01 f303 	mul.w	r3, r1, r3
 80046c4:	4413      	add	r3, r2
 80046c6:	3340      	adds	r3, #64	; 0x40
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d13c      	bne.n	800474c <HCD_RXQLVL_IRQHandler+0x19a>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d039      	beq.n	800474c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046ee:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046f6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004704:	461a      	mov	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	212c      	movs	r1, #44	; 0x2c
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	4413      	add	r3, r2
 8004716:	3354      	adds	r3, #84	; 0x54
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	f083 0301 	eor.w	r3, r3, #1
 800471e:	b2d8      	uxtb	r0, r3
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	212c      	movs	r1, #44	; 0x2c
 8004726:	fb01 f303 	mul.w	r3, r1, r3
 800472a:	4413      	add	r3, r2
 800472c:	3354      	adds	r3, #84	; 0x54
 800472e:	4602      	mov	r2, r0
 8004730:	701a      	strb	r2, [r3, #0]
      break;
 8004732:	e00b      	b.n	800474c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	212c      	movs	r1, #44	; 0x2c
 800473a:	fb01 f303 	mul.w	r3, r1, r3
 800473e:	4413      	add	r3, r2
 8004740:	3360      	adds	r3, #96	; 0x60
 8004742:	2204      	movs	r2, #4
 8004744:	701a      	strb	r2, [r3, #0]
      break;
 8004746:	e001      	b.n	800474c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800474c:	bf00      	nop
  }
}
 800474e:	bf00      	nop
 8004750:	3728      	adds	r7, #40	; 0x28
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b086      	sub	sp, #24
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004782:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b02      	cmp	r3, #2
 800478c:	d10b      	bne.n	80047a6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d102      	bne.n	800479e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f005 ff49 	bl	800a630 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f043 0302 	orr.w	r3, r3, #2
 80047a4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d132      	bne.n	8004816 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f043 0308 	orr.w	r3, r3, #8
 80047b6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d126      	bne.n	8004810 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d113      	bne.n	80047f2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80047d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047d4:	d106      	bne.n	80047e4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2102      	movs	r1, #2
 80047dc:	4618      	mov	r0, r3
 80047de:	f003 fa5f 	bl	8007ca0 <USB_InitFSLSPClkSel>
 80047e2:	e011      	b.n	8004808 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2101      	movs	r1, #1
 80047ea:	4618      	mov	r0, r3
 80047ec:	f003 fa58 	bl	8007ca0 <USB_InitFSLSPClkSel>
 80047f0:	e00a      	b.n	8004808 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d106      	bne.n	8004808 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004800:	461a      	mov	r2, r3
 8004802:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004806:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f005 ff3b 	bl	800a684 <HAL_HCD_PortEnabled_Callback>
 800480e:	e002      	b.n	8004816 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f005 ff45 	bl	800a6a0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b20      	cmp	r3, #32
 800481e:	d103      	bne.n	8004828 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f043 0320 	orr.w	r3, r3, #32
 8004826:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800482e:	461a      	mov	r2, r3
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	6013      	str	r3, [r2, #0]
}
 8004834:	bf00      	nop
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e12b      	b.n	8004aa6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fd fbdc 	bl	8002020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2224      	movs	r2, #36	; 0x24
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0201 	bic.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800488e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800489e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048a0:	f001 f9fc 	bl	8005c9c <HAL_RCC_GetPCLK1Freq>
 80048a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4a81      	ldr	r2, [pc, #516]	; (8004ab0 <HAL_I2C_Init+0x274>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d807      	bhi.n	80048c0 <HAL_I2C_Init+0x84>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4a80      	ldr	r2, [pc, #512]	; (8004ab4 <HAL_I2C_Init+0x278>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	bf94      	ite	ls
 80048b8:	2301      	movls	r3, #1
 80048ba:	2300      	movhi	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	e006      	b.n	80048ce <HAL_I2C_Init+0x92>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a7d      	ldr	r2, [pc, #500]	; (8004ab8 <HAL_I2C_Init+0x27c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	bf94      	ite	ls
 80048c8:	2301      	movls	r3, #1
 80048ca:	2300      	movhi	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e0e7      	b.n	8004aa6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4a78      	ldr	r2, [pc, #480]	; (8004abc <HAL_I2C_Init+0x280>)
 80048da:	fba2 2303 	umull	r2, r3, r2, r3
 80048de:	0c9b      	lsrs	r3, r3, #18
 80048e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4a6a      	ldr	r2, [pc, #424]	; (8004ab0 <HAL_I2C_Init+0x274>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d802      	bhi.n	8004910 <HAL_I2C_Init+0xd4>
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	3301      	adds	r3, #1
 800490e:	e009      	b.n	8004924 <HAL_I2C_Init+0xe8>
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004916:	fb02 f303 	mul.w	r3, r2, r3
 800491a:	4a69      	ldr	r2, [pc, #420]	; (8004ac0 <HAL_I2C_Init+0x284>)
 800491c:	fba2 2303 	umull	r2, r3, r2, r3
 8004920:	099b      	lsrs	r3, r3, #6
 8004922:	3301      	adds	r3, #1
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6812      	ldr	r2, [r2, #0]
 8004928:	430b      	orrs	r3, r1
 800492a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004936:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	495c      	ldr	r1, [pc, #368]	; (8004ab0 <HAL_I2C_Init+0x274>)
 8004940:	428b      	cmp	r3, r1
 8004942:	d819      	bhi.n	8004978 <HAL_I2C_Init+0x13c>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1e59      	subs	r1, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004952:	1c59      	adds	r1, r3, #1
 8004954:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004958:	400b      	ands	r3, r1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <HAL_I2C_Init+0x138>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1e59      	subs	r1, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	fbb1 f3f3 	udiv	r3, r1, r3
 800496c:	3301      	adds	r3, #1
 800496e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004972:	e051      	b.n	8004a18 <HAL_I2C_Init+0x1dc>
 8004974:	2304      	movs	r3, #4
 8004976:	e04f      	b.n	8004a18 <HAL_I2C_Init+0x1dc>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d111      	bne.n	80049a4 <HAL_I2C_Init+0x168>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	1e58      	subs	r0, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6859      	ldr	r1, [r3, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	440b      	add	r3, r1
 800498e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004992:	3301      	adds	r3, #1
 8004994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e012      	b.n	80049ca <HAL_I2C_Init+0x18e>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	1e58      	subs	r0, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6859      	ldr	r1, [r3, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	0099      	lsls	r1, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ba:	3301      	adds	r3, #1
 80049bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <HAL_I2C_Init+0x196>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e022      	b.n	8004a18 <HAL_I2C_Init+0x1dc>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10e      	bne.n	80049f8 <HAL_I2C_Init+0x1bc>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1e58      	subs	r0, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6859      	ldr	r1, [r3, #4]
 80049e2:	460b      	mov	r3, r1
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	440b      	add	r3, r1
 80049e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ec:	3301      	adds	r3, #1
 80049ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f6:	e00f      	b.n	8004a18 <HAL_I2C_Init+0x1dc>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1e58      	subs	r0, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6859      	ldr	r1, [r3, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	0099      	lsls	r1, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a0e:	3301      	adds	r3, #1
 8004a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	6809      	ldr	r1, [r1, #0]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69da      	ldr	r2, [r3, #28]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6911      	ldr	r1, [r2, #16]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68d2      	ldr	r2, [r2, #12]
 8004a52:	4311      	orrs	r1, r2
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695a      	ldr	r2, [r3, #20]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	000186a0 	.word	0x000186a0
 8004ab4:	001e847f 	.word	0x001e847f
 8004ab8:	003d08ff 	.word	0x003d08ff
 8004abc:	431bde83 	.word	0x431bde83
 8004ac0:	10624dd3 	.word	0x10624dd3

08004ac4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e128      	b.n	8004d28 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a90      	ldr	r2, [pc, #576]	; (8004d30 <HAL_I2S_Init+0x26c>)
 8004aee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7fd faff 	bl	80020f4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b0c:	f023 030f 	bic.w	r3, r3, #15
 8004b10:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2202      	movs	r2, #2
 8004b18:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d060      	beq.n	8004be4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d102      	bne.n	8004b30 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004b2a:	2310      	movs	r3, #16
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	e001      	b.n	8004b34 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004b30:	2320      	movs	r3, #32
 8004b32:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d802      	bhi.n	8004b42 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004b42:	2001      	movs	r0, #1
 8004b44:	f001 f9a0 	bl	8005e88 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b48:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b52:	d125      	bne.n	8004ba0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d010      	beq.n	8004b7e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	461a      	mov	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	3305      	adds	r3, #5
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	e01f      	b.n	8004bbe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b88:	4613      	mov	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	461a      	mov	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	3305      	adds	r3, #5
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	e00e      	b.n	8004bbe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bba:	3305      	adds	r3, #5
 8004bbc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4a5c      	ldr	r2, [pc, #368]	; (8004d34 <HAL_I2S_Init+0x270>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	08db      	lsrs	r3, r3, #3
 8004bc8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	085b      	lsrs	r3, r3, #1
 8004bda:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	e003      	b.n	8004bec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004be4:	2302      	movs	r3, #2
 8004be6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d902      	bls.n	8004bf8 <HAL_I2S_Init+0x134>
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	2bff      	cmp	r3, #255	; 0xff
 8004bf6:	d907      	bls.n	8004c08 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfc:	f043 0210 	orr.w	r2, r3, #16
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e08f      	b.n	8004d28 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	ea42 0103 	orr.w	r1, r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c26:	f023 030f 	bic.w	r3, r3, #15
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6851      	ldr	r1, [r2, #4]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6892      	ldr	r2, [r2, #8]
 8004c32:	4311      	orrs	r1, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	68d2      	ldr	r2, [r2, #12]
 8004c38:	4311      	orrs	r1, r2
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6992      	ldr	r2, [r2, #24]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d161      	bne.n	8004d18 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a38      	ldr	r2, [pc, #224]	; (8004d38 <HAL_I2S_Init+0x274>)
 8004c58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a37      	ldr	r2, [pc, #220]	; (8004d3c <HAL_I2S_Init+0x278>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d101      	bne.n	8004c68 <HAL_I2S_Init+0x1a4>
 8004c64:	4b36      	ldr	r3, [pc, #216]	; (8004d40 <HAL_I2S_Init+0x27c>)
 8004c66:	e001      	b.n	8004c6c <HAL_I2S_Init+0x1a8>
 8004c68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6812      	ldr	r2, [r2, #0]
 8004c72:	4932      	ldr	r1, [pc, #200]	; (8004d3c <HAL_I2S_Init+0x278>)
 8004c74:	428a      	cmp	r2, r1
 8004c76:	d101      	bne.n	8004c7c <HAL_I2S_Init+0x1b8>
 8004c78:	4a31      	ldr	r2, [pc, #196]	; (8004d40 <HAL_I2S_Init+0x27c>)
 8004c7a:	e001      	b.n	8004c80 <HAL_I2S_Init+0x1bc>
 8004c7c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004c80:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c84:	f023 030f 	bic.w	r3, r3, #15
 8004c88:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a2b      	ldr	r2, [pc, #172]	; (8004d3c <HAL_I2S_Init+0x278>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d101      	bne.n	8004c98 <HAL_I2S_Init+0x1d4>
 8004c94:	4b2a      	ldr	r3, [pc, #168]	; (8004d40 <HAL_I2S_Init+0x27c>)
 8004c96:	e001      	b.n	8004c9c <HAL_I2S_Init+0x1d8>
 8004c98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a25      	ldr	r2, [pc, #148]	; (8004d3c <HAL_I2S_Init+0x278>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d101      	bne.n	8004cae <HAL_I2S_Init+0x1ea>
 8004caa:	4b25      	ldr	r3, [pc, #148]	; (8004d40 <HAL_I2S_Init+0x27c>)
 8004cac:	e001      	b.n	8004cb2 <HAL_I2S_Init+0x1ee>
 8004cae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cbe:	d003      	beq.n	8004cc8 <HAL_I2S_Init+0x204>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d103      	bne.n	8004cd0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	e001      	b.n	8004cd4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	897b      	ldrh	r3, [r7, #10]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d00:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a0d      	ldr	r2, [pc, #52]	; (8004d3c <HAL_I2S_Init+0x278>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d101      	bne.n	8004d10 <HAL_I2S_Init+0x24c>
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <HAL_I2S_Init+0x27c>)
 8004d0e:	e001      	b.n	8004d14 <HAL_I2S_Init+0x250>
 8004d10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d14:	897a      	ldrh	r2, [r7, #10]
 8004d16:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	08004e3b 	.word	0x08004e3b
 8004d34:	cccccccd 	.word	0xcccccccd
 8004d38:	08004f51 	.word	0x08004f51
 8004d3c:	40003800 	.word	0x40003800
 8004d40:	40003400 	.word	0x40003400

08004d44 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	881a      	ldrh	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	1c9a      	adds	r2, r3, #2
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10e      	bne.n	8004dd4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dc4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff ffb8 	bl	8004d44 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dee:	b292      	uxth	r2, r2
 8004df0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	1c9a      	adds	r2, r3, #2
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10e      	bne.n	8004e32 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e22:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff ff93 	bl	8004d58 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e32:	bf00      	nop
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b086      	sub	sp, #24
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d13a      	bne.n	8004ecc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d109      	bne.n	8004e74 <I2S_IRQHandler+0x3a>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6a:	2b40      	cmp	r3, #64	; 0x40
 8004e6c:	d102      	bne.n	8004e74 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff ffb4 	bl	8004ddc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d126      	bne.n	8004ecc <I2S_IRQHandler+0x92>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d11f      	bne.n	8004ecc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	613b      	str	r3, [r7, #16]
 8004eb0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ebe:	f043 0202 	orr.w	r2, r3, #2
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff ff50 	bl	8004d6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d136      	bne.n	8004f46 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d109      	bne.n	8004ef6 <I2S_IRQHandler+0xbc>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eec:	2b80      	cmp	r3, #128	; 0x80
 8004eee:	d102      	bne.n	8004ef6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff ff45 	bl	8004d80 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d122      	bne.n	8004f46 <I2S_IRQHandler+0x10c>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d11b      	bne.n	8004f46 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f1c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f38:	f043 0204 	orr.w	r2, r3, #4
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7ff ff13 	bl	8004d6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f46:	bf00      	nop
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4aa2      	ldr	r2, [pc, #648]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d101      	bne.n	8004f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004f6a:	4ba2      	ldr	r3, [pc, #648]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f6c:	e001      	b.n	8004f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a9b      	ldr	r2, [pc, #620]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d101      	bne.n	8004f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004f88:	4b9a      	ldr	r3, [pc, #616]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f8a:	e001      	b.n	8004f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004f8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f9c:	d004      	beq.n	8004fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f040 8099 	bne.w	80050da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d107      	bne.n	8004fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f925 	bl	800520c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d107      	bne.n	8004fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f9c8 	bl	800536c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d13a      	bne.n	800505c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d035      	beq.n	800505c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a7e      	ldr	r2, [pc, #504]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d101      	bne.n	8004ffe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004ffa:	4b7e      	ldr	r3, [pc, #504]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ffc:	e001      	b.n	8005002 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004ffe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4979      	ldr	r1, [pc, #484]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800500a:	428b      	cmp	r3, r1
 800500c:	d101      	bne.n	8005012 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800500e:	4b79      	ldr	r3, [pc, #484]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005010:	e001      	b.n	8005016 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005012:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005016:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800501a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800502a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504e:	f043 0202 	orr.w	r2, r3, #2
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7ff fe88 	bl	8004d6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b08      	cmp	r3, #8
 8005064:	f040 80be 	bne.w	80051e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 80b8 	beq.w	80051e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005082:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a59      	ldr	r2, [pc, #356]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d101      	bne.n	8005092 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800508e:	4b59      	ldr	r3, [pc, #356]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005090:	e001      	b.n	8005096 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005092:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4954      	ldr	r1, [pc, #336]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800509e:	428b      	cmp	r3, r1
 80050a0:	d101      	bne.n	80050a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80050a2:	4b54      	ldr	r3, [pc, #336]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050a4:	e001      	b.n	80050aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80050a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050ae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80050b0:	2300      	movs	r3, #0
 80050b2:	60bb      	str	r3, [r7, #8]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	60bb      	str	r3, [r7, #8]
 80050bc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ca:	f043 0204 	orr.w	r2, r3, #4
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff fe4a 	bl	8004d6c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050d8:	e084      	b.n	80051e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d107      	bne.n	80050f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f8be 	bl	8005270 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d107      	bne.n	800510e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f8fd 	bl	8005308 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d12f      	bne.n	8005178 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b00      	cmp	r3, #0
 8005120:	d02a      	beq.n	8005178 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005130:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2e      	ldr	r2, [pc, #184]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d101      	bne.n	8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800513c:	4b2d      	ldr	r3, [pc, #180]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800513e:	e001      	b.n	8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005140:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4929      	ldr	r1, [pc, #164]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800514c:	428b      	cmp	r3, r1
 800514e:	d101      	bne.n	8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005150:	4b28      	ldr	r3, [pc, #160]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005152:	e001      	b.n	8005158 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005154:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005158:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800515c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	f043 0202 	orr.w	r2, r3, #2
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff fdfa 	bl	8004d6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b08      	cmp	r3, #8
 8005180:	d131      	bne.n	80051e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b00      	cmp	r3, #0
 800518a:	d02c      	beq.n	80051e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a17      	ldr	r2, [pc, #92]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d101      	bne.n	800519a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005196:	4b17      	ldr	r3, [pc, #92]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005198:	e001      	b.n	800519e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800519a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4912      	ldr	r1, [pc, #72]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051a6:	428b      	cmp	r3, r1
 80051a8:	d101      	bne.n	80051ae <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80051aa:	4b12      	ldr	r3, [pc, #72]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051ac:	e001      	b.n	80051b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80051ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051b6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051c6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d4:	f043 0204 	orr.w	r2, r3, #4
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff fdc5 	bl	8004d6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051e2:	e000      	b.n	80051e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051e4:	bf00      	nop
}
 80051e6:	bf00      	nop
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40003800 	.word	0x40003800
 80051f4:	40003400 	.word	0x40003400

080051f8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	1c99      	adds	r1, r3, #2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6251      	str	r1, [r2, #36]	; 0x24
 800521e:	881a      	ldrh	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d113      	bne.n	8005266 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800524c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005252:	b29b      	uxth	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d106      	bne.n	8005266 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff ffc9 	bl	80051f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005266:	bf00      	nop
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	1c99      	adds	r1, r3, #2
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6251      	str	r1, [r2, #36]	; 0x24
 8005282:	8819      	ldrh	r1, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1d      	ldr	r2, [pc, #116]	; (8005300 <I2SEx_TxISR_I2SExt+0x90>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d101      	bne.n	8005292 <I2SEx_TxISR_I2SExt+0x22>
 800528e:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <I2SEx_TxISR_I2SExt+0x94>)
 8005290:	e001      	b.n	8005296 <I2SEx_TxISR_I2SExt+0x26>
 8005292:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005296:	460a      	mov	r2, r1
 8005298:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d121      	bne.n	80052f6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a12      	ldr	r2, [pc, #72]	; (8005300 <I2SEx_TxISR_I2SExt+0x90>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d101      	bne.n	80052c0 <I2SEx_TxISR_I2SExt+0x50>
 80052bc:	4b11      	ldr	r3, [pc, #68]	; (8005304 <I2SEx_TxISR_I2SExt+0x94>)
 80052be:	e001      	b.n	80052c4 <I2SEx_TxISR_I2SExt+0x54>
 80052c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	490d      	ldr	r1, [pc, #52]	; (8005300 <I2SEx_TxISR_I2SExt+0x90>)
 80052cc:	428b      	cmp	r3, r1
 80052ce:	d101      	bne.n	80052d4 <I2SEx_TxISR_I2SExt+0x64>
 80052d0:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <I2SEx_TxISR_I2SExt+0x94>)
 80052d2:	e001      	b.n	80052d8 <I2SEx_TxISR_I2SExt+0x68>
 80052d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d106      	bne.n	80052f6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff ff81 	bl	80051f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052f6:	bf00      	nop
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	40003800 	.word	0x40003800
 8005304:	40003400 	.word	0x40003400

08005308 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68d8      	ldr	r0, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531a:	1c99      	adds	r1, r3, #2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005320:	b282      	uxth	r2, r0
 8005322:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d113      	bne.n	8005364 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800534a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d106      	bne.n	8005364 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff ff4a 	bl	80051f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005364:	bf00      	nop
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a20      	ldr	r2, [pc, #128]	; (80053fc <I2SEx_RxISR_I2SExt+0x90>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d101      	bne.n	8005382 <I2SEx_RxISR_I2SExt+0x16>
 800537e:	4b20      	ldr	r3, [pc, #128]	; (8005400 <I2SEx_RxISR_I2SExt+0x94>)
 8005380:	e001      	b.n	8005386 <I2SEx_RxISR_I2SExt+0x1a>
 8005382:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005386:	68d8      	ldr	r0, [r3, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	1c99      	adds	r1, r3, #2
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005392:	b282      	uxth	r2, r0
 8005394:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d121      	bne.n	80053f2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a12      	ldr	r2, [pc, #72]	; (80053fc <I2SEx_RxISR_I2SExt+0x90>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d101      	bne.n	80053bc <I2SEx_RxISR_I2SExt+0x50>
 80053b8:	4b11      	ldr	r3, [pc, #68]	; (8005400 <I2SEx_RxISR_I2SExt+0x94>)
 80053ba:	e001      	b.n	80053c0 <I2SEx_RxISR_I2SExt+0x54>
 80053bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	490d      	ldr	r1, [pc, #52]	; (80053fc <I2SEx_RxISR_I2SExt+0x90>)
 80053c8:	428b      	cmp	r3, r1
 80053ca:	d101      	bne.n	80053d0 <I2SEx_RxISR_I2SExt+0x64>
 80053cc:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <I2SEx_RxISR_I2SExt+0x94>)
 80053ce:	e001      	b.n	80053d4 <I2SEx_RxISR_I2SExt+0x68>
 80053d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053d8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d106      	bne.n	80053f2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff ff03 	bl	80051f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053f2:	bf00      	nop
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40003800 	.word	0x40003800
 8005400:	40003400 	.word	0x40003400

08005404 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e264      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d075      	beq.n	800550e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005422:	4ba3      	ldr	r3, [pc, #652]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 030c 	and.w	r3, r3, #12
 800542a:	2b04      	cmp	r3, #4
 800542c:	d00c      	beq.n	8005448 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800542e:	4ba0      	ldr	r3, [pc, #640]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005436:	2b08      	cmp	r3, #8
 8005438:	d112      	bne.n	8005460 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800543a:	4b9d      	ldr	r3, [pc, #628]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005446:	d10b      	bne.n	8005460 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005448:	4b99      	ldr	r3, [pc, #612]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d05b      	beq.n	800550c <HAL_RCC_OscConfig+0x108>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d157      	bne.n	800550c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e23f      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005468:	d106      	bne.n	8005478 <HAL_RCC_OscConfig+0x74>
 800546a:	4b91      	ldr	r3, [pc, #580]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a90      	ldr	r2, [pc, #576]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	e01d      	b.n	80054b4 <HAL_RCC_OscConfig+0xb0>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005480:	d10c      	bne.n	800549c <HAL_RCC_OscConfig+0x98>
 8005482:	4b8b      	ldr	r3, [pc, #556]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a8a      	ldr	r2, [pc, #552]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	4b88      	ldr	r3, [pc, #544]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a87      	ldr	r2, [pc, #540]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	e00b      	b.n	80054b4 <HAL_RCC_OscConfig+0xb0>
 800549c:	4b84      	ldr	r3, [pc, #528]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a83      	ldr	r2, [pc, #524]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 80054a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	4b81      	ldr	r3, [pc, #516]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a80      	ldr	r2, [pc, #512]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 80054ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d013      	beq.n	80054e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054bc:	f7fd f930 	bl	8002720 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054c4:	f7fd f92c 	bl	8002720 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b64      	cmp	r3, #100	; 0x64
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e204      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d6:	4b76      	ldr	r3, [pc, #472]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0f0      	beq.n	80054c4 <HAL_RCC_OscConfig+0xc0>
 80054e2:	e014      	b.n	800550e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e4:	f7fd f91c 	bl	8002720 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054ec:	f7fd f918 	bl	8002720 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b64      	cmp	r3, #100	; 0x64
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e1f0      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054fe:	4b6c      	ldr	r3, [pc, #432]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f0      	bne.n	80054ec <HAL_RCC_OscConfig+0xe8>
 800550a:	e000      	b.n	800550e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800550c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d063      	beq.n	80055e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800551a:	4b65      	ldr	r3, [pc, #404]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 030c 	and.w	r3, r3, #12
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005526:	4b62      	ldr	r3, [pc, #392]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800552e:	2b08      	cmp	r3, #8
 8005530:	d11c      	bne.n	800556c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005532:	4b5f      	ldr	r3, [pc, #380]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d116      	bne.n	800556c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800553e:	4b5c      	ldr	r3, [pc, #368]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d005      	beq.n	8005556 <HAL_RCC_OscConfig+0x152>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d001      	beq.n	8005556 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e1c4      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005556:	4b56      	ldr	r3, [pc, #344]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	4952      	ldr	r1, [pc, #328]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005566:	4313      	orrs	r3, r2
 8005568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800556a:	e03a      	b.n	80055e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d020      	beq.n	80055b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005574:	4b4f      	ldr	r3, [pc, #316]	; (80056b4 <HAL_RCC_OscConfig+0x2b0>)
 8005576:	2201      	movs	r2, #1
 8005578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557a:	f7fd f8d1 	bl	8002720 <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005582:	f7fd f8cd 	bl	8002720 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e1a5      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005594:	4b46      	ldr	r3, [pc, #280]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f0      	beq.n	8005582 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055a0:	4b43      	ldr	r3, [pc, #268]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	4940      	ldr	r1, [pc, #256]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	600b      	str	r3, [r1, #0]
 80055b4:	e015      	b.n	80055e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055b6:	4b3f      	ldr	r3, [pc, #252]	; (80056b4 <HAL_RCC_OscConfig+0x2b0>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055bc:	f7fd f8b0 	bl	8002720 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055c4:	f7fd f8ac 	bl	8002720 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e184      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055d6:	4b36      	ldr	r3, [pc, #216]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d030      	beq.n	8005650 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d016      	beq.n	8005624 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055f6:	4b30      	ldr	r3, [pc, #192]	; (80056b8 <HAL_RCC_OscConfig+0x2b4>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7fd f890 	bl	8002720 <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005604:	f7fd f88c 	bl	8002720 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e164      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005616:	4b26      	ldr	r3, [pc, #152]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f0      	beq.n	8005604 <HAL_RCC_OscConfig+0x200>
 8005622:	e015      	b.n	8005650 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005624:	4b24      	ldr	r3, [pc, #144]	; (80056b8 <HAL_RCC_OscConfig+0x2b4>)
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800562a:	f7fd f879 	bl	8002720 <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005632:	f7fd f875 	bl	8002720 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e14d      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005644:	4b1a      	ldr	r3, [pc, #104]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1f0      	bne.n	8005632 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80a0 	beq.w	800579e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800565e:	2300      	movs	r3, #0
 8005660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005662:	4b13      	ldr	r3, [pc, #76]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10f      	bne.n	800568e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800566e:	2300      	movs	r3, #0
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	4b0f      	ldr	r3, [pc, #60]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	4a0e      	ldr	r2, [pc, #56]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800567c:	6413      	str	r3, [r2, #64]	; 0x40
 800567e:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <HAL_RCC_OscConfig+0x2ac>)
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005686:	60bb      	str	r3, [r7, #8]
 8005688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800568a:	2301      	movs	r3, #1
 800568c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568e:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <HAL_RCC_OscConfig+0x2b8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005696:	2b00      	cmp	r3, #0
 8005698:	d121      	bne.n	80056de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800569a:	4b08      	ldr	r3, [pc, #32]	; (80056bc <HAL_RCC_OscConfig+0x2b8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a07      	ldr	r2, [pc, #28]	; (80056bc <HAL_RCC_OscConfig+0x2b8>)
 80056a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056a6:	f7fd f83b 	bl	8002720 <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ac:	e011      	b.n	80056d2 <HAL_RCC_OscConfig+0x2ce>
 80056ae:	bf00      	nop
 80056b0:	40023800 	.word	0x40023800
 80056b4:	42470000 	.word	0x42470000
 80056b8:	42470e80 	.word	0x42470e80
 80056bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c0:	f7fd f82e 	bl	8002720 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e106      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d2:	4b85      	ldr	r3, [pc, #532]	; (80058e8 <HAL_RCC_OscConfig+0x4e4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0f0      	beq.n	80056c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d106      	bne.n	80056f4 <HAL_RCC_OscConfig+0x2f0>
 80056e6:	4b81      	ldr	r3, [pc, #516]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 80056e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ea:	4a80      	ldr	r2, [pc, #512]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	6713      	str	r3, [r2, #112]	; 0x70
 80056f2:	e01c      	b.n	800572e <HAL_RCC_OscConfig+0x32a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	2b05      	cmp	r3, #5
 80056fa:	d10c      	bne.n	8005716 <HAL_RCC_OscConfig+0x312>
 80056fc:	4b7b      	ldr	r3, [pc, #492]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 80056fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005700:	4a7a      	ldr	r2, [pc, #488]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 8005702:	f043 0304 	orr.w	r3, r3, #4
 8005706:	6713      	str	r3, [r2, #112]	; 0x70
 8005708:	4b78      	ldr	r3, [pc, #480]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570c:	4a77      	ldr	r2, [pc, #476]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 800570e:	f043 0301 	orr.w	r3, r3, #1
 8005712:	6713      	str	r3, [r2, #112]	; 0x70
 8005714:	e00b      	b.n	800572e <HAL_RCC_OscConfig+0x32a>
 8005716:	4b75      	ldr	r3, [pc, #468]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 8005718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571a:	4a74      	ldr	r2, [pc, #464]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 800571c:	f023 0301 	bic.w	r3, r3, #1
 8005720:	6713      	str	r3, [r2, #112]	; 0x70
 8005722:	4b72      	ldr	r3, [pc, #456]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 8005724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005726:	4a71      	ldr	r2, [pc, #452]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 8005728:	f023 0304 	bic.w	r3, r3, #4
 800572c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d015      	beq.n	8005762 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005736:	f7fc fff3 	bl	8002720 <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573c:	e00a      	b.n	8005754 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800573e:	f7fc ffef 	bl	8002720 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	f241 3288 	movw	r2, #5000	; 0x1388
 800574c:	4293      	cmp	r3, r2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e0c5      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005754:	4b65      	ldr	r3, [pc, #404]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 8005756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0ee      	beq.n	800573e <HAL_RCC_OscConfig+0x33a>
 8005760:	e014      	b.n	800578c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005762:	f7fc ffdd 	bl	8002720 <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005768:	e00a      	b.n	8005780 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800576a:	f7fc ffd9 	bl	8002720 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	f241 3288 	movw	r2, #5000	; 0x1388
 8005778:	4293      	cmp	r3, r2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e0af      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005780:	4b5a      	ldr	r3, [pc, #360]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 8005782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1ee      	bne.n	800576a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800578c:	7dfb      	ldrb	r3, [r7, #23]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d105      	bne.n	800579e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005792:	4b56      	ldr	r3, [pc, #344]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	4a55      	ldr	r2, [pc, #340]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 8005798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800579c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 809b 	beq.w	80058de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057a8:	4b50      	ldr	r3, [pc, #320]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 030c 	and.w	r3, r3, #12
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d05c      	beq.n	800586e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d141      	bne.n	8005840 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057bc:	4b4c      	ldr	r3, [pc, #304]	; (80058f0 <HAL_RCC_OscConfig+0x4ec>)
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c2:	f7fc ffad 	bl	8002720 <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ca:	f7fc ffa9 	bl	8002720 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e081      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057dc:	4b43      	ldr	r3, [pc, #268]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1f0      	bne.n	80057ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	69da      	ldr	r2, [r3, #28]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	019b      	lsls	r3, r3, #6
 80057f8:	431a      	orrs	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	085b      	lsrs	r3, r3, #1
 8005800:	3b01      	subs	r3, #1
 8005802:	041b      	lsls	r3, r3, #16
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	061b      	lsls	r3, r3, #24
 800580c:	4937      	ldr	r1, [pc, #220]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 800580e:	4313      	orrs	r3, r2
 8005810:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005812:	4b37      	ldr	r3, [pc, #220]	; (80058f0 <HAL_RCC_OscConfig+0x4ec>)
 8005814:	2201      	movs	r2, #1
 8005816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005818:	f7fc ff82 	bl	8002720 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005820:	f7fc ff7e 	bl	8002720 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e056      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005832:	4b2e      	ldr	r3, [pc, #184]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f0      	beq.n	8005820 <HAL_RCC_OscConfig+0x41c>
 800583e:	e04e      	b.n	80058de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005840:	4b2b      	ldr	r3, [pc, #172]	; (80058f0 <HAL_RCC_OscConfig+0x4ec>)
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005846:	f7fc ff6b 	bl	8002720 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800584e:	f7fc ff67 	bl	8002720 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e03f      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005860:	4b22      	ldr	r3, [pc, #136]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f0      	bne.n	800584e <HAL_RCC_OscConfig+0x44a>
 800586c:	e037      	b.n	80058de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e032      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800587a:	4b1c      	ldr	r3, [pc, #112]	; (80058ec <HAL_RCC_OscConfig+0x4e8>)
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d028      	beq.n	80058da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005892:	429a      	cmp	r2, r3
 8005894:	d121      	bne.n	80058da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d11a      	bne.n	80058da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058aa:	4013      	ands	r3, r2
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d111      	bne.n	80058da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	085b      	lsrs	r3, r3, #1
 80058c2:	3b01      	subs	r3, #1
 80058c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d107      	bne.n	80058da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d001      	beq.n	80058de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40007000 	.word	0x40007000
 80058ec:	40023800 	.word	0x40023800
 80058f0:	42470060 	.word	0x42470060

080058f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0cc      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005908:	4b68      	ldr	r3, [pc, #416]	; (8005aac <HAL_RCC_ClockConfig+0x1b8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d90c      	bls.n	8005930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005916:	4b65      	ldr	r3, [pc, #404]	; (8005aac <HAL_RCC_ClockConfig+0x1b8>)
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800591e:	4b63      	ldr	r3, [pc, #396]	; (8005aac <HAL_RCC_ClockConfig+0x1b8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d001      	beq.n	8005930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e0b8      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d020      	beq.n	800597e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005948:	4b59      	ldr	r3, [pc, #356]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	4a58      	ldr	r2, [pc, #352]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800594e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005960:	4b53      	ldr	r3, [pc, #332]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	4a52      	ldr	r2, [pc, #328]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800596a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800596c:	4b50      	ldr	r3, [pc, #320]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	494d      	ldr	r1, [pc, #308]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800597a:	4313      	orrs	r3, r2
 800597c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d044      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d107      	bne.n	80059a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005992:	4b47      	ldr	r3, [pc, #284]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d119      	bne.n	80059d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e07f      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d003      	beq.n	80059b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	d107      	bne.n	80059c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059b2:	4b3f      	ldr	r3, [pc, #252]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d109      	bne.n	80059d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e06f      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c2:	4b3b      	ldr	r3, [pc, #236]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e067      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059d2:	4b37      	ldr	r3, [pc, #220]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f023 0203 	bic.w	r2, r3, #3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	4934      	ldr	r1, [pc, #208]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059e4:	f7fc fe9c 	bl	8002720 <HAL_GetTick>
 80059e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ea:	e00a      	b.n	8005a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ec:	f7fc fe98 	bl	8002720 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e04f      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a02:	4b2b      	ldr	r3, [pc, #172]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 020c 	and.w	r2, r3, #12
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d1eb      	bne.n	80059ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a14:	4b25      	ldr	r3, [pc, #148]	; (8005aac <HAL_RCC_ClockConfig+0x1b8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d20c      	bcs.n	8005a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a22:	4b22      	ldr	r3, [pc, #136]	; (8005aac <HAL_RCC_ClockConfig+0x1b8>)
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a2a:	4b20      	ldr	r3, [pc, #128]	; (8005aac <HAL_RCC_ClockConfig+0x1b8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d001      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e032      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d008      	beq.n	8005a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a48:	4b19      	ldr	r3, [pc, #100]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	4916      	ldr	r1, [pc, #88]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d009      	beq.n	8005a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a66:	4b12      	ldr	r3, [pc, #72]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	490e      	ldr	r1, [pc, #56]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a7a:	f000 f821 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	490a      	ldr	r1, [pc, #40]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a8c:	5ccb      	ldrb	r3, [r1, r3]
 8005a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a92:	4a09      	ldr	r2, [pc, #36]	; (8005ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a96:	4b09      	ldr	r3, [pc, #36]	; (8005abc <HAL_RCC_ClockConfig+0x1c8>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fc fdfc 	bl	8002698 <HAL_InitTick>

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40023c00 	.word	0x40023c00
 8005ab0:	40023800 	.word	0x40023800
 8005ab4:	0800b118 	.word	0x0800b118
 8005ab8:	2000000c 	.word	0x2000000c
 8005abc:	20000010 	.word	0x20000010

08005ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ac0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	607b      	str	r3, [r7, #4]
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ad8:	4b67      	ldr	r3, [pc, #412]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 030c 	and.w	r3, r3, #12
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d00d      	beq.n	8005b00 <HAL_RCC_GetSysClockFreq+0x40>
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	f200 80bd 	bhi.w	8005c64 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_RCC_GetSysClockFreq+0x34>
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d003      	beq.n	8005afa <HAL_RCC_GetSysClockFreq+0x3a>
 8005af2:	e0b7      	b.n	8005c64 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005af4:	4b61      	ldr	r3, [pc, #388]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005af6:	60bb      	str	r3, [r7, #8]
       break;
 8005af8:	e0b7      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005afa:	4b61      	ldr	r3, [pc, #388]	; (8005c80 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005afc:	60bb      	str	r3, [r7, #8]
      break;
 8005afe:	e0b4      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b00:	4b5d      	ldr	r3, [pc, #372]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b0a:	4b5b      	ldr	r3, [pc, #364]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d04d      	beq.n	8005bb2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b16:	4b58      	ldr	r3, [pc, #352]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	099b      	lsrs	r3, r3, #6
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b26:	f04f 0100 	mov.w	r1, #0
 8005b2a:	ea02 0800 	and.w	r8, r2, r0
 8005b2e:	ea03 0901 	and.w	r9, r3, r1
 8005b32:	4640      	mov	r0, r8
 8005b34:	4649      	mov	r1, r9
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	014b      	lsls	r3, r1, #5
 8005b40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b44:	0142      	lsls	r2, r0, #5
 8005b46:	4610      	mov	r0, r2
 8005b48:	4619      	mov	r1, r3
 8005b4a:	ebb0 0008 	subs.w	r0, r0, r8
 8005b4e:	eb61 0109 	sbc.w	r1, r1, r9
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	018b      	lsls	r3, r1, #6
 8005b5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b60:	0182      	lsls	r2, r0, #6
 8005b62:	1a12      	subs	r2, r2, r0
 8005b64:	eb63 0301 	sbc.w	r3, r3, r1
 8005b68:	f04f 0000 	mov.w	r0, #0
 8005b6c:	f04f 0100 	mov.w	r1, #0
 8005b70:	00d9      	lsls	r1, r3, #3
 8005b72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b76:	00d0      	lsls	r0, r2, #3
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	eb12 0208 	adds.w	r2, r2, r8
 8005b80:	eb43 0309 	adc.w	r3, r3, r9
 8005b84:	f04f 0000 	mov.w	r0, #0
 8005b88:	f04f 0100 	mov.w	r1, #0
 8005b8c:	0259      	lsls	r1, r3, #9
 8005b8e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005b92:	0250      	lsls	r0, r2, #9
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4610      	mov	r0, r2
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	f7fa fb10 	bl	80001c8 <__aeabi_uldivmod>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4613      	mov	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	e04a      	b.n	8005c48 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bb2:	4b31      	ldr	r3, [pc, #196]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	099b      	lsrs	r3, r3, #6
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f04f 0300 	mov.w	r3, #0
 8005bbe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005bc2:	f04f 0100 	mov.w	r1, #0
 8005bc6:	ea02 0400 	and.w	r4, r2, r0
 8005bca:	ea03 0501 	and.w	r5, r3, r1
 8005bce:	4620      	mov	r0, r4
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	014b      	lsls	r3, r1, #5
 8005bdc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005be0:	0142      	lsls	r2, r0, #5
 8005be2:	4610      	mov	r0, r2
 8005be4:	4619      	mov	r1, r3
 8005be6:	1b00      	subs	r0, r0, r4
 8005be8:	eb61 0105 	sbc.w	r1, r1, r5
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	018b      	lsls	r3, r1, #6
 8005bf6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005bfa:	0182      	lsls	r2, r0, #6
 8005bfc:	1a12      	subs	r2, r2, r0
 8005bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8005c02:	f04f 0000 	mov.w	r0, #0
 8005c06:	f04f 0100 	mov.w	r1, #0
 8005c0a:	00d9      	lsls	r1, r3, #3
 8005c0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c10:	00d0      	lsls	r0, r2, #3
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	1912      	adds	r2, r2, r4
 8005c18:	eb45 0303 	adc.w	r3, r5, r3
 8005c1c:	f04f 0000 	mov.w	r0, #0
 8005c20:	f04f 0100 	mov.w	r1, #0
 8005c24:	0299      	lsls	r1, r3, #10
 8005c26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c2a:	0290      	lsls	r0, r2, #10
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4610      	mov	r0, r2
 8005c32:	4619      	mov	r1, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	461a      	mov	r2, r3
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	f7fa fac4 	bl	80001c8 <__aeabi_uldivmod>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4613      	mov	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c48:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	0c1b      	lsrs	r3, r3, #16
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	3301      	adds	r3, #1
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c60:	60bb      	str	r3, [r7, #8]
      break;
 8005c62:	e002      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c66:	60bb      	str	r3, [r7, #8]
      break;
 8005c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c76:	bf00      	nop
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	00f42400 	.word	0x00f42400
 8005c80:	007a1200 	.word	0x007a1200

08005c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c88:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	2000000c 	.word	0x2000000c

08005c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ca0:	f7ff fff0 	bl	8005c84 <HAL_RCC_GetHCLKFreq>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	0a9b      	lsrs	r3, r3, #10
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	4903      	ldr	r1, [pc, #12]	; (8005cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cb2:	5ccb      	ldrb	r3, [r1, r3]
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	0800b128 	.word	0x0800b128

08005cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d105      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d035      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cec:	4b62      	ldr	r3, [pc, #392]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cf2:	f7fc fd15 	bl	8002720 <HAL_GetTick>
 8005cf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cf8:	e008      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cfa:	f7fc fd11 	bl	8002720 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e0b0      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d0c:	4b5b      	ldr	r3, [pc, #364]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1f0      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	019a      	lsls	r2, r3, #6
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	071b      	lsls	r3, r3, #28
 8005d24:	4955      	ldr	r1, [pc, #340]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d2c:	4b52      	ldr	r3, [pc, #328]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d32:	f7fc fcf5 	bl	8002720 <HAL_GetTick>
 8005d36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d38:	e008      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d3a:	f7fc fcf1 	bl	8002720 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e090      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d4c:	4b4b      	ldr	r3, [pc, #300]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0f0      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8083 	beq.w	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	4b44      	ldr	r3, [pc, #272]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	4a43      	ldr	r2, [pc, #268]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d74:	6413      	str	r3, [r2, #64]	; 0x40
 8005d76:	4b41      	ldr	r3, [pc, #260]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d82:	4b3f      	ldr	r3, [pc, #252]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a3e      	ldr	r2, [pc, #248]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d8e:	f7fc fcc7 	bl	8002720 <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d94:	e008      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d96:	f7fc fcc3 	bl	8002720 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e062      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005da8:	4b35      	ldr	r3, [pc, #212]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0f0      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005db4:	4b31      	ldr	r3, [pc, #196]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dbc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d02f      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d028      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dd2:	4b2a      	ldr	r3, [pc, #168]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dda:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ddc:	4b29      	ldr	r3, [pc, #164]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dde:	2201      	movs	r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005de2:	4b28      	ldr	r3, [pc, #160]	; (8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005de8:	4a24      	ldr	r2, [pc, #144]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dee:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d114      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005dfa:	f7fc fc91 	bl	8002720 <HAL_GetTick>
 8005dfe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e00:	e00a      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e02:	f7fc fc8d 	bl	8002720 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e02a      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e18:	4b18      	ldr	r3, [pc, #96]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0ee      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e30:	d10d      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e32:	4b12      	ldr	r3, [pc, #72]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e46:	490d      	ldr	r1, [pc, #52]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	608b      	str	r3, [r1, #8]
 8005e4c:	e005      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e4e:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	4a0a      	ldr	r2, [pc, #40]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e54:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e58:	6093      	str	r3, [r2, #8]
 8005e5a:	4b08      	ldr	r3, [pc, #32]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e66:	4905      	ldr	r1, [pc, #20]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	42470068 	.word	0x42470068
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	40007000 	.word	0x40007000
 8005e84:	42470e40 	.word	0x42470e40

08005e88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d13e      	bne.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005ea6:	4b23      	ldr	r3, [pc, #140]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d005      	beq.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d12f      	bne.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ebc:	4b1e      	ldr	r3, [pc, #120]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ebe:	617b      	str	r3, [r7, #20]
          break;
 8005ec0:	e02f      	b.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ec2:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ece:	d108      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ed0:	4b18      	ldr	r3, [pc, #96]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ed8:	4a18      	ldr	r2, [pc, #96]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ede:	613b      	str	r3, [r7, #16]
 8005ee0:	e007      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ee2:	4b14      	ldr	r3, [pc, #80]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eea:	4a15      	ldr	r2, [pc, #84]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005ef2:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ef8:	099b      	lsrs	r3, r3, #6
 8005efa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	fb02 f303 	mul.w	r3, r2, r3
 8005f04:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005f06:	4b0b      	ldr	r3, [pc, #44]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f0c:	0f1b      	lsrs	r3, r3, #28
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f18:	617b      	str	r3, [r7, #20]
          break;
 8005f1a:	e002      	b.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
          break;
 8005f20:	bf00      	nop
        }
      }
      break;
 8005f22:	bf00      	nop
    }
  }
  return frequency;
 8005f24:	697b      	ldr	r3, [r7, #20]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	40023800 	.word	0x40023800
 8005f38:	00bb8000 	.word	0x00bb8000
 8005f3c:	007a1200 	.word	0x007a1200
 8005f40:	00f42400 	.word	0x00f42400

08005f44 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e01c      	b.n	8005f90 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	795b      	ldrb	r3, [r3, #5]
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7fc f92c 	bl	80021c4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f042 0204 	orr.w	r2, r2, #4
 8005f80:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	791b      	ldrb	r3, [r3, #4]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	e03d      	b.n	800602e <HAL_RNG_GenerateRandomNumber+0x96>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	795b      	ldrb	r3, [r3, #5]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d12c      	bne.n	800601c <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fc8:	f7fc fbaa 	bl	8002720 <HAL_GetTick>
 8005fcc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005fce:	e011      	b.n	8005ff4 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005fd0:	f7fc fba6 	bl	8002720 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d90a      	bls.n	8005ff4 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e01c      	b.n	800602e <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d1e6      	bne.n	8005fd0 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	715a      	strb	r2, [r3, #5]
 800601a:	e004      	b.n	8006026 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2204      	movs	r2, #4
 8006020:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	711a      	strb	r2, [r3, #4]

  return status;
 800602c:	7bfb      	ldrb	r3, [r7, #15]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	330c      	adds	r3, #12
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff ffa7 	bl	8005f98 <HAL_RNG_GenerateRandomNumber>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d102      	bne.n	8006056 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	e000      	b.n	8006058 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8006056:	2300      	movs	r3, #0
  }
}
 8006058:	4618      	mov	r0, r3
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e07b      	b.n	800616a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	2b00      	cmp	r3, #0
 8006078:	d108      	bne.n	800608c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006082:	d009      	beq.n	8006098 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	61da      	str	r2, [r3, #28]
 800608a:	e005      	b.n	8006098 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fc f8a8 	bl	8002208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060e0:	431a      	orrs	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	431a      	orrs	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611c:	ea42 0103 	orr.w	r1, r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	0c1b      	lsrs	r3, r3, #16
 8006136:	f003 0104 	and.w	r1, r3, #4
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	f003 0210 	and.w	r2, r3, #16
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006158:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b088      	sub	sp, #32
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	603b      	str	r3, [r7, #0]
 800617e:	4613      	mov	r3, r2
 8006180:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_SPI_Transmit+0x22>
 8006190:	2302      	movs	r3, #2
 8006192:	e126      	b.n	80063e2 <HAL_SPI_Transmit+0x270>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800619c:	f7fc fac0 	bl	8002720 <HAL_GetTick>
 80061a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80061a2:	88fb      	ldrh	r3, [r7, #6]
 80061a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d002      	beq.n	80061b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80061b2:	2302      	movs	r3, #2
 80061b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061b6:	e10b      	b.n	80063d0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <HAL_SPI_Transmit+0x52>
 80061be:	88fb      	ldrh	r3, [r7, #6]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061c8:	e102      	b.n	80063d0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2203      	movs	r2, #3
 80061ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	88fa      	ldrh	r2, [r7, #6]
 80061e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	88fa      	ldrh	r2, [r7, #6]
 80061e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006210:	d10f      	bne.n	8006232 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006220:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006230:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623c:	2b40      	cmp	r3, #64	; 0x40
 800623e:	d007      	beq.n	8006250 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800624e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006258:	d14b      	bne.n	80062f2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <HAL_SPI_Transmit+0xf6>
 8006262:	8afb      	ldrh	r3, [r7, #22]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d13e      	bne.n	80062e6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626c:	881a      	ldrh	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006278:	1c9a      	adds	r2, r3, #2
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006282:	b29b      	uxth	r3, r3
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800628c:	e02b      	b.n	80062e6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b02      	cmp	r3, #2
 800629a:	d112      	bne.n	80062c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	881a      	ldrh	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ac:	1c9a      	adds	r2, r3, #2
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	86da      	strh	r2, [r3, #54]	; 0x36
 80062c0:	e011      	b.n	80062e6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062c2:	f7fc fa2d 	bl	8002720 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d803      	bhi.n	80062da <HAL_SPI_Transmit+0x168>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062d8:	d102      	bne.n	80062e0 <HAL_SPI_Transmit+0x16e>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d102      	bne.n	80062e6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062e4:	e074      	b.n	80063d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1ce      	bne.n	800628e <HAL_SPI_Transmit+0x11c>
 80062f0:	e04c      	b.n	800638c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <HAL_SPI_Transmit+0x18e>
 80062fa:	8afb      	ldrh	r3, [r7, #22]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d140      	bne.n	8006382 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	7812      	ldrb	r2, [r2, #0]
 800630c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800631c:	b29b      	uxth	r3, r3
 800631e:	3b01      	subs	r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006326:	e02c      	b.n	8006382 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b02      	cmp	r3, #2
 8006334:	d113      	bne.n	800635e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	330c      	adds	r3, #12
 8006340:	7812      	ldrb	r2, [r2, #0]
 8006342:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	86da      	strh	r2, [r3, #54]	; 0x36
 800635c:	e011      	b.n	8006382 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800635e:	f7fc f9df 	bl	8002720 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d803      	bhi.n	8006376 <HAL_SPI_Transmit+0x204>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006374:	d102      	bne.n	800637c <HAL_SPI_Transmit+0x20a>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d102      	bne.n	8006382 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006380:	e026      	b.n	80063d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006386:	b29b      	uxth	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1cd      	bne.n	8006328 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 f8b3 	bl	80064fc <SPI_EndRxTxTransaction>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2220      	movs	r2, #32
 80063a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063aa:	2300      	movs	r3, #0
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e000      	b.n	80063d0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80063ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3720      	adds	r7, #32
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
	...

080063ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	4613      	mov	r3, r2
 80063fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063fc:	f7fc f990 	bl	8002720 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	1a9b      	subs	r3, r3, r2
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	4413      	add	r3, r2
 800640a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800640c:	f7fc f988 	bl	8002720 <HAL_GetTick>
 8006410:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006412:	4b39      	ldr	r3, [pc, #228]	; (80064f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	015b      	lsls	r3, r3, #5
 8006418:	0d1b      	lsrs	r3, r3, #20
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	fb02 f303 	mul.w	r3, r2, r3
 8006420:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006422:	e054      	b.n	80064ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800642a:	d050      	beq.n	80064ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800642c:	f7fc f978 	bl	8002720 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	429a      	cmp	r2, r3
 800643a:	d902      	bls.n	8006442 <SPI_WaitFlagStateUntilTimeout+0x56>
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d13d      	bne.n	80064be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006450:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800645a:	d111      	bne.n	8006480 <SPI_WaitFlagStateUntilTimeout+0x94>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006464:	d004      	beq.n	8006470 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646e:	d107      	bne.n	8006480 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800647e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006488:	d10f      	bne.n	80064aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e017      	b.n	80064ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4013      	ands	r3, r2
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	429a      	cmp	r2, r3
 80064dc:	bf0c      	ite	eq
 80064de:	2301      	moveq	r3, #1
 80064e0:	2300      	movne	r3, #0
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	461a      	mov	r2, r3
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d19b      	bne.n	8006424 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	2000000c 	.word	0x2000000c

080064fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b088      	sub	sp, #32
 8006500:	af02      	add	r7, sp, #8
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006508:	4b1b      	ldr	r3, [pc, #108]	; (8006578 <SPI_EndRxTxTransaction+0x7c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1b      	ldr	r2, [pc, #108]	; (800657c <SPI_EndRxTxTransaction+0x80>)
 800650e:	fba2 2303 	umull	r2, r3, r2, r3
 8006512:	0d5b      	lsrs	r3, r3, #21
 8006514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006518:	fb02 f303 	mul.w	r3, r2, r3
 800651c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006526:	d112      	bne.n	800654e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2200      	movs	r2, #0
 8006530:	2180      	movs	r1, #128	; 0x80
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f7ff ff5a 	bl	80063ec <SPI_WaitFlagStateUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d016      	beq.n	800656c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006542:	f043 0220 	orr.w	r2, r3, #32
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e00f      	b.n	800656e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00a      	beq.n	800656a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	3b01      	subs	r3, #1
 8006558:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006564:	2b80      	cmp	r3, #128	; 0x80
 8006566:	d0f2      	beq.n	800654e <SPI_EndRxTxTransaction+0x52>
 8006568:	e000      	b.n	800656c <SPI_EndRxTxTransaction+0x70>
        break;
 800656a:	bf00      	nop
  }

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	2000000c 	.word	0x2000000c
 800657c:	165e9f81 	.word	0x165e9f81

08006580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e041      	b.n	8006616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fb ff14 	bl	80023d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3304      	adds	r3, #4
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f000 fd68 	bl	8007094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b01      	cmp	r3, #1
 8006632:	d001      	beq.n	8006638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e04e      	b.n	80066d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0201 	orr.w	r2, r2, #1
 800664e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a23      	ldr	r2, [pc, #140]	; (80066e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d022      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0x80>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006662:	d01d      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0x80>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a1f      	ldr	r2, [pc, #124]	; (80066e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d018      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0x80>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1e      	ldr	r2, [pc, #120]	; (80066ec <HAL_TIM_Base_Start_IT+0xcc>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d013      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0x80>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a1c      	ldr	r2, [pc, #112]	; (80066f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00e      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0x80>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1b      	ldr	r2, [pc, #108]	; (80066f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d009      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0x80>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a19      	ldr	r2, [pc, #100]	; (80066f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d004      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0x80>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a18      	ldr	r2, [pc, #96]	; (80066fc <HAL_TIM_Base_Start_IT+0xdc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d111      	bne.n	80066c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b06      	cmp	r3, #6
 80066b0:	d010      	beq.n	80066d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0201 	orr.w	r2, r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c2:	e007      	b.n	80066d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f042 0201 	orr.w	r2, r2, #1
 80066d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40010000 	.word	0x40010000
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40010400 	.word	0x40010400
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40001800 	.word	0x40001800

08006700 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d109      	bne.n	8006724 <HAL_TIM_OC_Start_IT+0x24>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b01      	cmp	r3, #1
 800671a:	bf14      	ite	ne
 800671c:	2301      	movne	r3, #1
 800671e:	2300      	moveq	r3, #0
 8006720:	b2db      	uxtb	r3, r3
 8006722:	e022      	b.n	800676a <HAL_TIM_OC_Start_IT+0x6a>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b04      	cmp	r3, #4
 8006728:	d109      	bne.n	800673e <HAL_TIM_OC_Start_IT+0x3e>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b01      	cmp	r3, #1
 8006734:	bf14      	ite	ne
 8006736:	2301      	movne	r3, #1
 8006738:	2300      	moveq	r3, #0
 800673a:	b2db      	uxtb	r3, r3
 800673c:	e015      	b.n	800676a <HAL_TIM_OC_Start_IT+0x6a>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b08      	cmp	r3, #8
 8006742:	d109      	bne.n	8006758 <HAL_TIM_OC_Start_IT+0x58>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b01      	cmp	r3, #1
 800674e:	bf14      	ite	ne
 8006750:	2301      	movne	r3, #1
 8006752:	2300      	moveq	r3, #0
 8006754:	b2db      	uxtb	r3, r3
 8006756:	e008      	b.n	800676a <HAL_TIM_OC_Start_IT+0x6a>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b01      	cmp	r3, #1
 8006762:	bf14      	ite	ne
 8006764:	2301      	movne	r3, #1
 8006766:	2300      	moveq	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e0c2      	b.n	80068f8 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d104      	bne.n	8006782 <HAL_TIM_OC_Start_IT+0x82>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006780:	e013      	b.n	80067aa <HAL_TIM_OC_Start_IT+0xaa>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b04      	cmp	r3, #4
 8006786:	d104      	bne.n	8006792 <HAL_TIM_OC_Start_IT+0x92>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2202      	movs	r2, #2
 800678c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006790:	e00b      	b.n	80067aa <HAL_TIM_OC_Start_IT+0xaa>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b08      	cmp	r3, #8
 8006796:	d104      	bne.n	80067a2 <HAL_TIM_OC_Start_IT+0xa2>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067a0:	e003      	b.n	80067aa <HAL_TIM_OC_Start_IT+0xaa>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2202      	movs	r2, #2
 80067a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b0c      	cmp	r3, #12
 80067ae:	d841      	bhi.n	8006834 <HAL_TIM_OC_Start_IT+0x134>
 80067b0:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <HAL_TIM_OC_Start_IT+0xb8>)
 80067b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b6:	bf00      	nop
 80067b8:	080067ed 	.word	0x080067ed
 80067bc:	08006835 	.word	0x08006835
 80067c0:	08006835 	.word	0x08006835
 80067c4:	08006835 	.word	0x08006835
 80067c8:	080067ff 	.word	0x080067ff
 80067cc:	08006835 	.word	0x08006835
 80067d0:	08006835 	.word	0x08006835
 80067d4:	08006835 	.word	0x08006835
 80067d8:	08006811 	.word	0x08006811
 80067dc:	08006835 	.word	0x08006835
 80067e0:	08006835 	.word	0x08006835
 80067e4:	08006835 	.word	0x08006835
 80067e8:	08006823 	.word	0x08006823
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0202 	orr.w	r2, r2, #2
 80067fa:	60da      	str	r2, [r3, #12]
      break;
 80067fc:	e01b      	b.n	8006836 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f042 0204 	orr.w	r2, r2, #4
 800680c:	60da      	str	r2, [r3, #12]
      break;
 800680e:	e012      	b.n	8006836 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0208 	orr.w	r2, r2, #8
 800681e:	60da      	str	r2, [r3, #12]
      break;
 8006820:	e009      	b.n	8006836 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 0210 	orr.w	r2, r2, #16
 8006830:	60da      	str	r2, [r3, #12]
      break;
 8006832:	e000      	b.n	8006836 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8006834:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2201      	movs	r2, #1
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f000 ff12 	bl	8007668 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a2d      	ldr	r2, [pc, #180]	; (8006900 <HAL_TIM_OC_Start_IT+0x200>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d004      	beq.n	8006858 <HAL_TIM_OC_Start_IT+0x158>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a2c      	ldr	r2, [pc, #176]	; (8006904 <HAL_TIM_OC_Start_IT+0x204>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d101      	bne.n	800685c <HAL_TIM_OC_Start_IT+0x15c>
 8006858:	2301      	movs	r3, #1
 800685a:	e000      	b.n	800685e <HAL_TIM_OC_Start_IT+0x15e>
 800685c:	2300      	movs	r3, #0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d007      	beq.n	8006872 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006870:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a22      	ldr	r2, [pc, #136]	; (8006900 <HAL_TIM_OC_Start_IT+0x200>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d022      	beq.n	80068c2 <HAL_TIM_OC_Start_IT+0x1c2>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006884:	d01d      	beq.n	80068c2 <HAL_TIM_OC_Start_IT+0x1c2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a1f      	ldr	r2, [pc, #124]	; (8006908 <HAL_TIM_OC_Start_IT+0x208>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d018      	beq.n	80068c2 <HAL_TIM_OC_Start_IT+0x1c2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a1d      	ldr	r2, [pc, #116]	; (800690c <HAL_TIM_OC_Start_IT+0x20c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d013      	beq.n	80068c2 <HAL_TIM_OC_Start_IT+0x1c2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a1c      	ldr	r2, [pc, #112]	; (8006910 <HAL_TIM_OC_Start_IT+0x210>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00e      	beq.n	80068c2 <HAL_TIM_OC_Start_IT+0x1c2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a16      	ldr	r2, [pc, #88]	; (8006904 <HAL_TIM_OC_Start_IT+0x204>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d009      	beq.n	80068c2 <HAL_TIM_OC_Start_IT+0x1c2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a18      	ldr	r2, [pc, #96]	; (8006914 <HAL_TIM_OC_Start_IT+0x214>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d004      	beq.n	80068c2 <HAL_TIM_OC_Start_IT+0x1c2>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a16      	ldr	r2, [pc, #88]	; (8006918 <HAL_TIM_OC_Start_IT+0x218>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d111      	bne.n	80068e6 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f003 0307 	and.w	r3, r3, #7
 80068cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2b06      	cmp	r3, #6
 80068d2:	d010      	beq.n	80068f6 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f042 0201 	orr.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e4:	e007      	b.n	80068f6 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f042 0201 	orr.w	r2, r2, #1
 80068f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	40010000 	.word	0x40010000
 8006904:	40010400 	.word	0x40010400
 8006908:	40000400 	.word	0x40000400
 800690c:	40000800 	.word	0x40000800
 8006910:	40000c00 	.word	0x40000c00
 8006914:	40014000 	.word	0x40014000
 8006918:	40001800 	.word	0x40001800

0800691c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e041      	b.n	80069b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f839 	bl	80069ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3304      	adds	r3, #4
 8006958:	4619      	mov	r1, r3
 800695a:	4610      	mov	r0, r2
 800695c:	f000 fb9a 	bl	8007094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b086      	sub	sp, #24
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e097      	b.n	8006b12 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fb fca4 	bl	8002344 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6812      	ldr	r2, [r2, #0]
 8006a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a12:	f023 0307 	bic.w	r3, r3, #7
 8006a16:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	4619      	mov	r1, r3
 8006a22:	4610      	mov	r0, r2
 8006a24:	f000 fb36 	bl	8007094 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a50:	f023 0303 	bic.w	r3, r3, #3
 8006a54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	4313      	orrs	r3, r2
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006a6e:	f023 030c 	bic.w	r3, r3, #12
 8006a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	021b      	lsls	r3, r3, #8
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	011a      	lsls	r2, r3, #4
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	031b      	lsls	r3, r3, #12
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006aac:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006ab4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	011b      	lsls	r3, r3, #4
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d122      	bne.n	8006b76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d11b      	bne.n	8006b76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f06f 0202 	mvn.w	r2, #2
 8006b46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	f003 0303 	and.w	r3, r3, #3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fa7b 	bl	8007058 <HAL_TIM_IC_CaptureCallback>
 8006b62:	e005      	b.n	8006b70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fa6d 	bl	8007044 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fa7e 	bl	800706c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d122      	bne.n	8006bca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d11b      	bne.n	8006bca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f06f 0204 	mvn.w	r2, #4
 8006b9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fa51 	bl	8007058 <HAL_TIM_IC_CaptureCallback>
 8006bb6:	e005      	b.n	8006bc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fa43 	bl	8007044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fa54 	bl	800706c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	d122      	bne.n	8006c1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f003 0308 	and.w	r3, r3, #8
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	d11b      	bne.n	8006c1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f06f 0208 	mvn.w	r2, #8
 8006bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2204      	movs	r2, #4
 8006bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	f003 0303 	and.w	r3, r3, #3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fa27 	bl	8007058 <HAL_TIM_IC_CaptureCallback>
 8006c0a:	e005      	b.n	8006c18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fa19 	bl	8007044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fa2a 	bl	800706c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f003 0310 	and.w	r3, r3, #16
 8006c28:	2b10      	cmp	r3, #16
 8006c2a:	d122      	bne.n	8006c72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f003 0310 	and.w	r3, r3, #16
 8006c36:	2b10      	cmp	r3, #16
 8006c38:	d11b      	bne.n	8006c72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f06f 0210 	mvn.w	r2, #16
 8006c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2208      	movs	r2, #8
 8006c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f9fd 	bl	8007058 <HAL_TIM_IC_CaptureCallback>
 8006c5e:	e005      	b.n	8006c6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f9ef 	bl	8007044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fa00 	bl	800706c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d10e      	bne.n	8006c9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d107      	bne.n	8006c9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f06f 0201 	mvn.w	r2, #1
 8006c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f9c9 	bl	8007030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca8:	2b80      	cmp	r3, #128	; 0x80
 8006caa:	d10e      	bne.n	8006cca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb6:	2b80      	cmp	r3, #128	; 0x80
 8006cb8:	d107      	bne.n	8006cca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fd7b 	bl	80077c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd4:	2b40      	cmp	r3, #64	; 0x40
 8006cd6:	d10e      	bne.n	8006cf6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce2:	2b40      	cmp	r3, #64	; 0x40
 8006ce4:	d107      	bne.n	8006cf6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f9c5 	bl	8007080 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b20      	cmp	r3, #32
 8006d02:	d10e      	bne.n	8006d22 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d107      	bne.n	8006d22 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f06f 0220 	mvn.w	r2, #32
 8006d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fd45 	bl	80077ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d22:	bf00      	nop
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e0ac      	b.n	8006ea0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b0c      	cmp	r3, #12
 8006d52:	f200 809f 	bhi.w	8006e94 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006d56:	a201      	add	r2, pc, #4	; (adr r2, 8006d5c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5c:	08006d91 	.word	0x08006d91
 8006d60:	08006e95 	.word	0x08006e95
 8006d64:	08006e95 	.word	0x08006e95
 8006d68:	08006e95 	.word	0x08006e95
 8006d6c:	08006dd1 	.word	0x08006dd1
 8006d70:	08006e95 	.word	0x08006e95
 8006d74:	08006e95 	.word	0x08006e95
 8006d78:	08006e95 	.word	0x08006e95
 8006d7c:	08006e13 	.word	0x08006e13
 8006d80:	08006e95 	.word	0x08006e95
 8006d84:	08006e95 	.word	0x08006e95
 8006d88:	08006e95 	.word	0x08006e95
 8006d8c:	08006e53 	.word	0x08006e53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68b9      	ldr	r1, [r7, #8]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fa1c 	bl	80071d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f042 0208 	orr.w	r2, r2, #8
 8006daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699a      	ldr	r2, [r3, #24]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0204 	bic.w	r2, r2, #4
 8006dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6999      	ldr	r1, [r3, #24]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	691a      	ldr	r2, [r3, #16]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	619a      	str	r2, [r3, #24]
      break;
 8006dce:	e062      	b.n	8006e96 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68b9      	ldr	r1, [r7, #8]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fa6c 	bl	80072b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699a      	ldr	r2, [r3, #24]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6999      	ldr	r1, [r3, #24]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	021a      	lsls	r2, r3, #8
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	619a      	str	r2, [r3, #24]
      break;
 8006e10:	e041      	b.n	8006e96 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68b9      	ldr	r1, [r7, #8]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fac1 	bl	80073a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f042 0208 	orr.w	r2, r2, #8
 8006e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69da      	ldr	r2, [r3, #28]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0204 	bic.w	r2, r2, #4
 8006e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69d9      	ldr	r1, [r3, #28]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	61da      	str	r2, [r3, #28]
      break;
 8006e50:	e021      	b.n	8006e96 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68b9      	ldr	r1, [r7, #8]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 fb15 	bl	8007488 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69da      	ldr	r2, [r3, #28]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69d9      	ldr	r1, [r3, #28]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	021a      	lsls	r2, r3, #8
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	61da      	str	r2, [r3, #28]
      break;
 8006e92:	e000      	b.n	8006e96 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006e94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d101      	bne.n	8006ec0 <HAL_TIM_ConfigClockSource+0x18>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e0b3      	b.n	8007028 <HAL_TIM_ConfigClockSource+0x180>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ede:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ee6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef8:	d03e      	beq.n	8006f78 <HAL_TIM_ConfigClockSource+0xd0>
 8006efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006efe:	f200 8087 	bhi.w	8007010 <HAL_TIM_ConfigClockSource+0x168>
 8006f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f06:	f000 8085 	beq.w	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0e:	d87f      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x168>
 8006f10:	2b70      	cmp	r3, #112	; 0x70
 8006f12:	d01a      	beq.n	8006f4a <HAL_TIM_ConfigClockSource+0xa2>
 8006f14:	2b70      	cmp	r3, #112	; 0x70
 8006f16:	d87b      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x168>
 8006f18:	2b60      	cmp	r3, #96	; 0x60
 8006f1a:	d050      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x116>
 8006f1c:	2b60      	cmp	r3, #96	; 0x60
 8006f1e:	d877      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x168>
 8006f20:	2b50      	cmp	r3, #80	; 0x50
 8006f22:	d03c      	beq.n	8006f9e <HAL_TIM_ConfigClockSource+0xf6>
 8006f24:	2b50      	cmp	r3, #80	; 0x50
 8006f26:	d873      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x168>
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d058      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0x136>
 8006f2c:	2b40      	cmp	r3, #64	; 0x40
 8006f2e:	d86f      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x168>
 8006f30:	2b30      	cmp	r3, #48	; 0x30
 8006f32:	d064      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0x156>
 8006f34:	2b30      	cmp	r3, #48	; 0x30
 8006f36:	d86b      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x168>
 8006f38:	2b20      	cmp	r3, #32
 8006f3a:	d060      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0x156>
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d867      	bhi.n	8007010 <HAL_TIM_ConfigClockSource+0x168>
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d05c      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0x156>
 8006f44:	2b10      	cmp	r3, #16
 8006f46:	d05a      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006f48:	e062      	b.n	8007010 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	6899      	ldr	r1, [r3, #8]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f000 fb65 	bl	8007628 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	609a      	str	r2, [r3, #8]
      break;
 8006f76:	e04e      	b.n	8007016 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6818      	ldr	r0, [r3, #0]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	6899      	ldr	r1, [r3, #8]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f000 fb4e 	bl	8007628 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f9a:	609a      	str	r2, [r3, #8]
      break;
 8006f9c:	e03b      	b.n	8007016 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6859      	ldr	r1, [r3, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f000 fac2 	bl	8007534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2150      	movs	r1, #80	; 0x50
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fb1b 	bl	80075f2 <TIM_ITRx_SetConfig>
      break;
 8006fbc:	e02b      	b.n	8007016 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6818      	ldr	r0, [r3, #0]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	6859      	ldr	r1, [r3, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f000 fae1 	bl	8007592 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2160      	movs	r1, #96	; 0x60
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fb0b 	bl	80075f2 <TIM_ITRx_SetConfig>
      break;
 8006fdc:	e01b      	b.n	8007016 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6818      	ldr	r0, [r3, #0]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	6859      	ldr	r1, [r3, #4]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	461a      	mov	r2, r3
 8006fec:	f000 faa2 	bl	8007534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2140      	movs	r1, #64	; 0x40
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fafb 	bl	80075f2 <TIM_ITRx_SetConfig>
      break;
 8006ffc:	e00b      	b.n	8007016 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4619      	mov	r1, r3
 8007008:	4610      	mov	r0, r2
 800700a:	f000 faf2 	bl	80075f2 <TIM_ITRx_SetConfig>
        break;
 800700e:	e002      	b.n	8007016 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007010:	bf00      	nop
 8007012:	e000      	b.n	8007016 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007014:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a40      	ldr	r2, [pc, #256]	; (80071a8 <TIM_Base_SetConfig+0x114>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d013      	beq.n	80070d4 <TIM_Base_SetConfig+0x40>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b2:	d00f      	beq.n	80070d4 <TIM_Base_SetConfig+0x40>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a3d      	ldr	r2, [pc, #244]	; (80071ac <TIM_Base_SetConfig+0x118>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d00b      	beq.n	80070d4 <TIM_Base_SetConfig+0x40>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a3c      	ldr	r2, [pc, #240]	; (80071b0 <TIM_Base_SetConfig+0x11c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d007      	beq.n	80070d4 <TIM_Base_SetConfig+0x40>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a3b      	ldr	r2, [pc, #236]	; (80071b4 <TIM_Base_SetConfig+0x120>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d003      	beq.n	80070d4 <TIM_Base_SetConfig+0x40>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a3a      	ldr	r2, [pc, #232]	; (80071b8 <TIM_Base_SetConfig+0x124>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d108      	bne.n	80070e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a2f      	ldr	r2, [pc, #188]	; (80071a8 <TIM_Base_SetConfig+0x114>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d02b      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f4:	d027      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a2c      	ldr	r2, [pc, #176]	; (80071ac <TIM_Base_SetConfig+0x118>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d023      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a2b      	ldr	r2, [pc, #172]	; (80071b0 <TIM_Base_SetConfig+0x11c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d01f      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a2a      	ldr	r2, [pc, #168]	; (80071b4 <TIM_Base_SetConfig+0x120>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d01b      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a29      	ldr	r2, [pc, #164]	; (80071b8 <TIM_Base_SetConfig+0x124>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d017      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a28      	ldr	r2, [pc, #160]	; (80071bc <TIM_Base_SetConfig+0x128>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d013      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a27      	ldr	r2, [pc, #156]	; (80071c0 <TIM_Base_SetConfig+0x12c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d00f      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a26      	ldr	r2, [pc, #152]	; (80071c4 <TIM_Base_SetConfig+0x130>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00b      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a25      	ldr	r2, [pc, #148]	; (80071c8 <TIM_Base_SetConfig+0x134>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d007      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a24      	ldr	r2, [pc, #144]	; (80071cc <TIM_Base_SetConfig+0x138>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d003      	beq.n	8007146 <TIM_Base_SetConfig+0xb2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a23      	ldr	r2, [pc, #140]	; (80071d0 <TIM_Base_SetConfig+0x13c>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d108      	bne.n	8007158 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800714c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a0a      	ldr	r2, [pc, #40]	; (80071a8 <TIM_Base_SetConfig+0x114>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d003      	beq.n	800718c <TIM_Base_SetConfig+0xf8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a0c      	ldr	r2, [pc, #48]	; (80071b8 <TIM_Base_SetConfig+0x124>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d103      	bne.n	8007194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	691a      	ldr	r2, [r3, #16]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	615a      	str	r2, [r3, #20]
}
 800719a:	bf00      	nop
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	40010000 	.word	0x40010000
 80071ac:	40000400 	.word	0x40000400
 80071b0:	40000800 	.word	0x40000800
 80071b4:	40000c00 	.word	0x40000c00
 80071b8:	40010400 	.word	0x40010400
 80071bc:	40014000 	.word	0x40014000
 80071c0:	40014400 	.word	0x40014400
 80071c4:	40014800 	.word	0x40014800
 80071c8:	40001800 	.word	0x40001800
 80071cc:	40001c00 	.word	0x40001c00
 80071d0:	40002000 	.word	0x40002000

080071d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	f023 0201 	bic.w	r2, r3, #1
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f023 0303 	bic.w	r3, r3, #3
 800720a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	4313      	orrs	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f023 0302 	bic.w	r3, r3, #2
 800721c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	4313      	orrs	r3, r2
 8007226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a20      	ldr	r2, [pc, #128]	; (80072ac <TIM_OC1_SetConfig+0xd8>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d003      	beq.n	8007238 <TIM_OC1_SetConfig+0x64>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a1f      	ldr	r2, [pc, #124]	; (80072b0 <TIM_OC1_SetConfig+0xdc>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d10c      	bne.n	8007252 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f023 0308 	bic.w	r3, r3, #8
 800723e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	4313      	orrs	r3, r2
 8007248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f023 0304 	bic.w	r3, r3, #4
 8007250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a15      	ldr	r2, [pc, #84]	; (80072ac <TIM_OC1_SetConfig+0xd8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d003      	beq.n	8007262 <TIM_OC1_SetConfig+0x8e>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a14      	ldr	r2, [pc, #80]	; (80072b0 <TIM_OC1_SetConfig+0xdc>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d111      	bne.n	8007286 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	4313      	orrs	r3, r2
 800727a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4313      	orrs	r3, r2
 8007284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	621a      	str	r2, [r3, #32]
}
 80072a0:	bf00      	nop
 80072a2:	371c      	adds	r7, #28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40010400 	.word	0x40010400

080072b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f023 0210 	bic.w	r2, r3, #16
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	021b      	lsls	r3, r3, #8
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f023 0320 	bic.w	r3, r3, #32
 80072fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	011b      	lsls	r3, r3, #4
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	4313      	orrs	r3, r2
 800730a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a22      	ldr	r2, [pc, #136]	; (8007398 <TIM_OC2_SetConfig+0xe4>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d003      	beq.n	800731c <TIM_OC2_SetConfig+0x68>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a21      	ldr	r2, [pc, #132]	; (800739c <TIM_OC2_SetConfig+0xe8>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d10d      	bne.n	8007338 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	011b      	lsls	r3, r3, #4
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007336:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a17      	ldr	r2, [pc, #92]	; (8007398 <TIM_OC2_SetConfig+0xe4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d003      	beq.n	8007348 <TIM_OC2_SetConfig+0x94>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a16      	ldr	r2, [pc, #88]	; (800739c <TIM_OC2_SetConfig+0xe8>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d113      	bne.n	8007370 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800734e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007356:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	4313      	orrs	r3, r2
 8007362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	4313      	orrs	r3, r2
 800736e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	621a      	str	r2, [r3, #32]
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	40010000 	.word	0x40010000
 800739c:	40010400 	.word	0x40010400

080073a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0303 	bic.w	r3, r3, #3
 80073d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	021b      	lsls	r3, r3, #8
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a21      	ldr	r2, [pc, #132]	; (8007480 <TIM_OC3_SetConfig+0xe0>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d003      	beq.n	8007406 <TIM_OC3_SetConfig+0x66>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a20      	ldr	r2, [pc, #128]	; (8007484 <TIM_OC3_SetConfig+0xe4>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d10d      	bne.n	8007422 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800740c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	021b      	lsls	r3, r3, #8
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a16      	ldr	r2, [pc, #88]	; (8007480 <TIM_OC3_SetConfig+0xe0>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d003      	beq.n	8007432 <TIM_OC3_SetConfig+0x92>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a15      	ldr	r2, [pc, #84]	; (8007484 <TIM_OC3_SetConfig+0xe4>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d113      	bne.n	800745a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4313      	orrs	r3, r2
 800744c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	621a      	str	r2, [r3, #32]
}
 8007474:	bf00      	nop
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	40010000 	.word	0x40010000
 8007484:	40010400 	.word	0x40010400

08007488 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	021b      	lsls	r3, r3, #8
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	031b      	lsls	r3, r3, #12
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	4313      	orrs	r3, r2
 80074de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a12      	ldr	r2, [pc, #72]	; (800752c <TIM_OC4_SetConfig+0xa4>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d003      	beq.n	80074f0 <TIM_OC4_SetConfig+0x68>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a11      	ldr	r2, [pc, #68]	; (8007530 <TIM_OC4_SetConfig+0xa8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d109      	bne.n	8007504 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	019b      	lsls	r3, r3, #6
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	4313      	orrs	r3, r2
 8007502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	621a      	str	r2, [r3, #32]
}
 800751e:	bf00      	nop
 8007520:	371c      	adds	r7, #28
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	40010000 	.word	0x40010000
 8007530:	40010400 	.word	0x40010400

08007534 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	f023 0201 	bic.w	r2, r3, #1
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800755e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	011b      	lsls	r3, r3, #4
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	4313      	orrs	r3, r2
 8007568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f023 030a 	bic.w	r3, r3, #10
 8007570:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	4313      	orrs	r3, r2
 8007578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	621a      	str	r2, [r3, #32]
}
 8007586:	bf00      	nop
 8007588:	371c      	adds	r7, #28
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007592:	b480      	push	{r7}
 8007594:	b087      	sub	sp, #28
 8007596:	af00      	add	r7, sp, #0
 8007598:	60f8      	str	r0, [r7, #12]
 800759a:	60b9      	str	r1, [r7, #8]
 800759c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	f023 0210 	bic.w	r2, r3, #16
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	031b      	lsls	r3, r3, #12
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	011b      	lsls	r3, r3, #4
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	621a      	str	r2, [r3, #32]
}
 80075e6:	bf00      	nop
 80075e8:	371c      	adds	r7, #28
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b085      	sub	sp, #20
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4313      	orrs	r3, r2
 8007610:	f043 0307 	orr.w	r3, r3, #7
 8007614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	609a      	str	r2, [r3, #8]
}
 800761c:	bf00      	nop
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	021a      	lsls	r2, r3, #8
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	431a      	orrs	r2, r3
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	4313      	orrs	r3, r2
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	4313      	orrs	r3, r2
 8007654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	609a      	str	r2, [r3, #8]
}
 800765c:	bf00      	nop
 800765e:	371c      	adds	r7, #28
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f003 031f 	and.w	r3, r3, #31
 800767a:	2201      	movs	r2, #1
 800767c:	fa02 f303 	lsl.w	r3, r2, r3
 8007680:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6a1a      	ldr	r2, [r3, #32]
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	43db      	mvns	r3, r3
 800768a:	401a      	ands	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6a1a      	ldr	r2, [r3, #32]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f003 031f 	and.w	r3, r3, #31
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	fa01 f303 	lsl.w	r3, r1, r3
 80076a0:	431a      	orrs	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	621a      	str	r2, [r3, #32]
}
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
	...

080076b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076c8:	2302      	movs	r3, #2
 80076ca:	e05a      	b.n	8007782 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a21      	ldr	r2, [pc, #132]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d022      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007718:	d01d      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1d      	ldr	r2, [pc, #116]	; (8007794 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d018      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1b      	ldr	r2, [pc, #108]	; (8007798 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d013      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1a      	ldr	r2, [pc, #104]	; (800779c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d00e      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a18      	ldr	r2, [pc, #96]	; (80077a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d009      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a17      	ldr	r2, [pc, #92]	; (80077a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d004      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a15      	ldr	r2, [pc, #84]	; (80077a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d10c      	bne.n	8007770 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800775c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	4313      	orrs	r3, r2
 8007766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	40010000 	.word	0x40010000
 8007794:	40000400 	.word	0x40000400
 8007798:	40000800 	.word	0x40000800
 800779c:	40000c00 	.word	0x40000c00
 80077a0:	40010400 	.word	0x40010400
 80077a4:	40014000 	.word	0x40014000
 80077a8:	40001800 	.word	0x40001800

080077ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077d4:	b084      	sub	sp, #16
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	f107 001c 	add.w	r0, r7, #28
 80077e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d122      	bne.n	8007832 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007816:	2b01      	cmp	r3, #1
 8007818:	d105      	bne.n	8007826 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f94a 	bl	8007ac0 <USB_CoreReset>
 800782c:	4603      	mov	r3, r0
 800782e:	73fb      	strb	r3, [r7, #15]
 8007830:	e01a      	b.n	8007868 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f93e 	bl	8007ac0 <USB_CoreReset>
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007852:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	639a      	str	r2, [r3, #56]	; 0x38
 800785a:	e005      	b.n	8007868 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	2b01      	cmp	r3, #1
 800786c:	d10b      	bne.n	8007886 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f043 0206 	orr.w	r2, r3, #6
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f043 0220 	orr.w	r2, r3, #32
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007886:	7bfb      	ldrb	r3, [r7, #15]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007892:	b004      	add	sp, #16
 8007894:	4770      	bx	lr

08007896 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f043 0201 	orr.w	r2, r3, #1
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f023 0201 	bic.w	r2, r3, #1
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b082      	sub	sp, #8
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078f2:	78fb      	ldrb	r3, [r7, #3]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d106      	bne.n	8007906 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	60da      	str	r2, [r3, #12]
 8007904:	e00b      	b.n	800791e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d106      	bne.n	800791a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	60da      	str	r2, [r3, #12]
 8007918:	e001      	b.n	800791e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e003      	b.n	8007926 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800791e:	2032      	movs	r0, #50	; 0x32
 8007920:	f7fa ff0a 	bl	8002738 <HAL_Delay>

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
	...

08007930 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	019b      	lsls	r3, r3, #6
 8007942:	f043 0220 	orr.w	r2, r3, #32
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3301      	adds	r3, #1
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4a09      	ldr	r2, [pc, #36]	; (8007978 <USB_FlushTxFifo+0x48>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d901      	bls.n	800795c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e006      	b.n	800796a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	f003 0320 	and.w	r3, r3, #32
 8007964:	2b20      	cmp	r3, #32
 8007966:	d0f0      	beq.n	800794a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	00030d40 	.word	0x00030d40

0800797c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007984:	2300      	movs	r3, #0
 8007986:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2210      	movs	r2, #16
 800798c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3301      	adds	r3, #1
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4a09      	ldr	r2, [pc, #36]	; (80079bc <USB_FlushRxFifo+0x40>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d901      	bls.n	80079a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e006      	b.n	80079ae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b10      	cmp	r3, #16
 80079aa:	d0f0      	beq.n	800798e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	00030d40 	.word	0x00030d40

080079c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b089      	sub	sp, #36	; 0x24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	4611      	mov	r1, r2
 80079cc:	461a      	mov	r2, r3
 80079ce:	460b      	mov	r3, r1
 80079d0:	71fb      	strb	r3, [r7, #7]
 80079d2:	4613      	mov	r3, r2
 80079d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80079de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d11a      	bne.n	8007a1c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80079e6:	88bb      	ldrh	r3, [r7, #4]
 80079e8:	3303      	adds	r3, #3
 80079ea:	089b      	lsrs	r3, r3, #2
 80079ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80079ee:	2300      	movs	r3, #0
 80079f0:	61bb      	str	r3, [r7, #24]
 80079f2:	e00f      	b.n	8007a14 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079f4:	79fb      	ldrb	r3, [r7, #7]
 80079f6:	031a      	lsls	r2, r3, #12
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a00:	461a      	mov	r2, r3
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	3301      	adds	r3, #1
 8007a12:	61bb      	str	r3, [r7, #24]
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d3eb      	bcc.n	80079f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3724      	adds	r7, #36	; 0x24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b089      	sub	sp, #36	; 0x24
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	4613      	mov	r3, r2
 8007a36:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007a40:	88fb      	ldrh	r3, [r7, #6]
 8007a42:	3303      	adds	r3, #3
 8007a44:	089b      	lsrs	r3, r3, #2
 8007a46:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007a48:	2300      	movs	r3, #0
 8007a4a:	61bb      	str	r3, [r7, #24]
 8007a4c:	e00b      	b.n	8007a66 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	3301      	adds	r3, #1
 8007a64:	61bb      	str	r3, [r7, #24]
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d3ef      	bcc.n	8007a4e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007a6e:	69fb      	ldr	r3, [r7, #28]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3724      	adds	r7, #36	; 0x24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4013      	ands	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a94:	68fb      	ldr	r3, [r7, #12]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	f003 0301 	and.w	r3, r3, #1
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
	...

08007ac0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4a13      	ldr	r2, [pc, #76]	; (8007b24 <USB_CoreReset+0x64>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d901      	bls.n	8007ade <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e01b      	b.n	8007b16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	daf2      	bge.n	8007acc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f043 0201 	orr.w	r2, r3, #1
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3301      	adds	r3, #1
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4a09      	ldr	r2, [pc, #36]	; (8007b24 <USB_CoreReset+0x64>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d901      	bls.n	8007b08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e006      	b.n	8007b16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d0f0      	beq.n	8007af6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	00030d40 	.word	0x00030d40

08007b28 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b28:	b084      	sub	sp, #16
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	f107 001c 	add.w	r0, r7, #28
 8007b36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b44:	461a      	mov	r2, r3
 8007b46:	2300      	movs	r3, #0
 8007b48:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b66:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d018      	beq.n	8007bac <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d10a      	bne.n	8007b96 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b8e:	f043 0304 	orr.w	r3, r3, #4
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	e014      	b.n	8007bc0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ba4:	f023 0304 	bic.w	r3, r3, #4
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	e009      	b.n	8007bc0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007bba:	f023 0304 	bic.w	r3, r3, #4
 8007bbe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007bc0:	2110      	movs	r1, #16
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7ff feb4 	bl	8007930 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff fed7 	bl	800797c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	e015      	b.n	8007c00 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be0:	461a      	mov	r2, r3
 8007be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007be6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d3e5      	bcc.n	8007bd4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007c08:	2101      	movs	r1, #1
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f8ac 	bl	8007d68 <USB_DriveVbus>

  HAL_Delay(200U);
 8007c10:	20c8      	movs	r0, #200	; 0xc8
 8007c12:	f7fa fd91 	bl	8002738 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c22:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c36:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a14      	ldr	r2, [pc, #80]	; (8007c8c <USB_HostInit+0x164>)
 8007c3c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a13      	ldr	r2, [pc, #76]	; (8007c90 <USB_HostInit+0x168>)
 8007c42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007c46:	e009      	b.n	8007c5c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2280      	movs	r2, #128	; 0x80
 8007c4c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a10      	ldr	r2, [pc, #64]	; (8007c94 <USB_HostInit+0x16c>)
 8007c52:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a10      	ldr	r2, [pc, #64]	; (8007c98 <USB_HostInit+0x170>)
 8007c58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d105      	bne.n	8007c6e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	f043 0210 	orr.w	r2, r3, #16
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	699a      	ldr	r2, [r3, #24]
 8007c72:	4b0a      	ldr	r3, [pc, #40]	; (8007c9c <USB_HostInit+0x174>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c86:	b004      	add	sp, #16
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	01000200 	.word	0x01000200
 8007c90:	00e00300 	.word	0x00e00300
 8007c94:	00600080 	.word	0x00600080
 8007c98:	004000e0 	.word	0x004000e0
 8007c9c:	a3200008 	.word	0xa3200008

08007ca0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007cbe:	f023 0303 	bic.w	r3, r3, #3
 8007cc2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	78fb      	ldrb	r3, [r7, #3]
 8007cce:	f003 0303 	and.w	r3, r3, #3
 8007cd2:	68f9      	ldr	r1, [r7, #12]
 8007cd4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007cdc:	78fb      	ldrb	r3, [r7, #3]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d107      	bne.n	8007cf2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ce8:	461a      	mov	r2, r3
 8007cea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007cee:	6053      	str	r3, [r2, #4]
 8007cf0:	e009      	b.n	8007d06 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007cf2:	78fb      	ldrb	r3, [r7, #3]
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d106      	bne.n	8007d06 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f241 7370 	movw	r3, #6000	; 0x1770
 8007d04:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007d34:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d42:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007d44:	2064      	movs	r0, #100	; 0x64
 8007d46:	f7fa fcf7 	bl	8002738 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007d52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d56:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007d58:	200a      	movs	r0, #10
 8007d5a:	f7fa fced 	bl	8002738 <HAL_Delay>

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007d8c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d109      	bne.n	8007dac <USB_DriveVbus+0x44>
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d106      	bne.n	8007dac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007da6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007daa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db6:	d109      	bne.n	8007dcc <USB_DriveVbus+0x64>
 8007db8:	78fb      	ldrb	r3, [r7, #3]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d106      	bne.n	8007dcc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007dc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b085      	sub	sp, #20
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	0c5b      	lsrs	r3, r3, #17
 8007df8:	f003 0303 	and.w	r3, r3, #3
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	b29b      	uxth	r3, r3
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
	...

08007e2c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b088      	sub	sp, #32
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	4608      	mov	r0, r1
 8007e36:	4611      	mov	r1, r2
 8007e38:	461a      	mov	r2, r3
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	70fb      	strb	r3, [r7, #3]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	70bb      	strb	r3, [r7, #2]
 8007e42:	4613      	mov	r3, r2
 8007e44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007e4e:	78fb      	ldrb	r3, [r7, #3]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e60:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007e62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d87e      	bhi.n	8007f68 <USB_HC_Init+0x13c>
 8007e6a:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <USB_HC_Init+0x44>)
 8007e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e70:	08007e81 	.word	0x08007e81
 8007e74:	08007f2b 	.word	0x08007f2b
 8007e78:	08007e81 	.word	0x08007e81
 8007e7c:	08007eed 	.word	0x08007eed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	015a      	lsls	r2, r3, #5
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	4413      	add	r3, r2
 8007e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007e92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007e94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	da10      	bge.n	8007ebe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	78fa      	ldrb	r2, [r7, #3]
 8007eac:	0151      	lsls	r1, r2, #5
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	440a      	add	r2, r1
 8007eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eba:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007ebc:	e057      	b.n	8007f6e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d051      	beq.n	8007f6e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007eca:	78fb      	ldrb	r3, [r7, #3]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	78fa      	ldrb	r2, [r7, #3]
 8007eda:	0151      	lsls	r1, r2, #5
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	440a      	add	r2, r1
 8007ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ee4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007ee8:	60d3      	str	r3, [r2, #12]
      break;
 8007eea:	e040      	b.n	8007f6e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007eec:	78fb      	ldrb	r3, [r7, #3]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ef8:	461a      	mov	r2, r3
 8007efa:	f240 639d 	movw	r3, #1693	; 0x69d
 8007efe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007f00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	da34      	bge.n	8007f72 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007f08:	78fb      	ldrb	r3, [r7, #3]
 8007f0a:	015a      	lsls	r2, r3, #5
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	78fa      	ldrb	r2, [r7, #3]
 8007f18:	0151      	lsls	r1, r2, #5
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	440a      	add	r2, r1
 8007f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f26:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007f28:	e023      	b.n	8007f72 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007f2a:	78fb      	ldrb	r3, [r7, #3]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f36:	461a      	mov	r2, r3
 8007f38:	f240 2325 	movw	r3, #549	; 0x225
 8007f3c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007f3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	da17      	bge.n	8007f76 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007f46:	78fb      	ldrb	r3, [r7, #3]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	78fa      	ldrb	r2, [r7, #3]
 8007f56:	0151      	lsls	r1, r2, #5
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	440a      	add	r2, r1
 8007f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f60:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007f64:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007f66:	e006      	b.n	8007f76 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	77fb      	strb	r3, [r7, #31]
      break;
 8007f6c:	e004      	b.n	8007f78 <USB_HC_Init+0x14c>
      break;
 8007f6e:	bf00      	nop
 8007f70:	e002      	b.n	8007f78 <USB_HC_Init+0x14c>
      break;
 8007f72:	bf00      	nop
 8007f74:	e000      	b.n	8007f78 <USB_HC_Init+0x14c>
      break;
 8007f76:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f7e:	699a      	ldr	r2, [r3, #24]
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	2101      	movs	r1, #1
 8007f88:	fa01 f303 	lsl.w	r3, r1, r3
 8007f8c:	6939      	ldr	r1, [r7, #16]
 8007f8e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007f92:	4313      	orrs	r3, r2
 8007f94:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007fa2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	da03      	bge.n	8007fb2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fae:	61bb      	str	r3, [r7, #24]
 8007fb0:	e001      	b.n	8007fb6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7ff ff0f 	bl	8007dda <USB_GetHostSpeed>
 8007fbc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007fbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d106      	bne.n	8007fd4 <USB_HC_Init+0x1a8>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d003      	beq.n	8007fd4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007fd0:	617b      	str	r3, [r7, #20]
 8007fd2:	e001      	b.n	8007fd8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fd8:	787b      	ldrb	r3, [r7, #1]
 8007fda:	059b      	lsls	r3, r3, #22
 8007fdc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007fe0:	78bb      	ldrb	r3, [r7, #2]
 8007fe2:	02db      	lsls	r3, r3, #11
 8007fe4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fe8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007fea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007fee:	049b      	lsls	r3, r3, #18
 8007ff0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007ff4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007ff6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007ff8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007ffc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008002:	78fb      	ldrb	r3, [r7, #3]
 8008004:	0159      	lsls	r1, r3, #5
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	440b      	add	r3, r1
 800800a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800800e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008014:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008016:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800801a:	2b03      	cmp	r3, #3
 800801c:	d10f      	bne.n	800803e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	4413      	add	r3, r2
 8008026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	78fa      	ldrb	r2, [r7, #3]
 800802e:	0151      	lsls	r1, r2, #5
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	440a      	add	r2, r1
 8008034:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008038:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800803c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800803e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3720      	adds	r7, #32
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08c      	sub	sp, #48	; 0x30
 800804c:	af02      	add	r7, sp, #8
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	4613      	mov	r3, r2
 8008054:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	785b      	ldrb	r3, [r3, #1]
 800805e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008064:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806e:	2b00      	cmp	r3, #0
 8008070:	d02d      	beq.n	80080ce <USB_HC_StartXfer+0x86>
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	791b      	ldrb	r3, [r3, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d129      	bne.n	80080ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d117      	bne.n	80080b0 <USB_HC_StartXfer+0x68>
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	79db      	ldrb	r3, [r3, #7]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d003      	beq.n	8008090 <USB_HC_StartXfer+0x48>
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	79db      	ldrb	r3, [r3, #7]
 800808c:	2b02      	cmp	r3, #2
 800808e:	d10f      	bne.n	80080b0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	4413      	add	r3, r2
 8008098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	69fa      	ldr	r2, [r7, #28]
 80080a0:	0151      	lsls	r1, r2, #5
 80080a2:	6a3a      	ldr	r2, [r7, #32]
 80080a4:	440a      	add	r2, r1
 80080a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ae:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80080b0:	79fb      	ldrb	r3, [r7, #7]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10b      	bne.n	80080ce <USB_HC_StartXfer+0x86>
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	795b      	ldrb	r3, [r3, #5]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d107      	bne.n	80080ce <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	785b      	ldrb	r3, [r3, #1]
 80080c2:	4619      	mov	r1, r3
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 fa2f 	bl	8008528 <USB_DoPing>
      return HAL_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	e0f8      	b.n	80082c0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d018      	beq.n	8008108 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	8912      	ldrh	r2, [r2, #8]
 80080de:	4413      	add	r3, r2
 80080e0:	3b01      	subs	r3, #1
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	8912      	ldrh	r2, [r2, #8]
 80080e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80080ea:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80080ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80080ee:	8b7b      	ldrh	r3, [r7, #26]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d90b      	bls.n	800810c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80080f4:	8b7b      	ldrh	r3, [r7, #26]
 80080f6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80080f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	8912      	ldrh	r2, [r2, #8]
 80080fe:	fb02 f203 	mul.w	r2, r2, r3
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	611a      	str	r2, [r3, #16]
 8008106:	e001      	b.n	800810c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008108:	2301      	movs	r3, #1
 800810a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	78db      	ldrb	r3, [r3, #3]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d007      	beq.n	8008124 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008114:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	8912      	ldrh	r2, [r2, #8]
 800811a:	fb02 f203 	mul.w	r2, r2, r3
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	611a      	str	r2, [r3, #16]
 8008122:	e003      	b.n	800812c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	695a      	ldr	r2, [r3, #20]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008134:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008136:	04d9      	lsls	r1, r3, #19
 8008138:	4b63      	ldr	r3, [pc, #396]	; (80082c8 <USB_HC_StartXfer+0x280>)
 800813a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800813c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	7a9b      	ldrb	r3, [r3, #10]
 8008142:	075b      	lsls	r3, r3, #29
 8008144:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008148:	69f9      	ldr	r1, [r7, #28]
 800814a:	0148      	lsls	r0, r1, #5
 800814c:	6a39      	ldr	r1, [r7, #32]
 800814e:	4401      	add	r1, r0
 8008150:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008154:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008156:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008158:	79fb      	ldrb	r3, [r7, #7]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d009      	beq.n	8008172 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	68d9      	ldr	r1, [r3, #12]
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	4413      	add	r3, r2
 800816a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800816e:	460a      	mov	r2, r1
 8008170:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b00      	cmp	r3, #0
 8008180:	bf0c      	ite	eq
 8008182:	2301      	moveq	r3, #1
 8008184:	2300      	movne	r3, #0
 8008186:	b2db      	uxtb	r3, r3
 8008188:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	4413      	add	r3, r2
 8008192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	69fa      	ldr	r2, [r7, #28]
 800819a:	0151      	lsls	r1, r2, #5
 800819c:	6a3a      	ldr	r2, [r7, #32]
 800819e:	440a      	add	r2, r1
 80081a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80081a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	7e7b      	ldrb	r3, [r7, #25]
 80081ba:	075b      	lsls	r3, r3, #29
 80081bc:	69f9      	ldr	r1, [r7, #28]
 80081be:	0148      	lsls	r0, r1, #5
 80081c0:	6a39      	ldr	r1, [r7, #32]
 80081c2:	4401      	add	r1, r0
 80081c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80081c8:	4313      	orrs	r3, r2
 80081ca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081e2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	78db      	ldrb	r3, [r3, #3]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d004      	beq.n	80081f6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081f2:	613b      	str	r3, [r7, #16]
 80081f4:	e003      	b.n	80081fe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081fc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008204:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	4413      	add	r3, r2
 800820e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008212:	461a      	mov	r2, r3
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	e04e      	b.n	80082c0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	78db      	ldrb	r3, [r3, #3]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d149      	bne.n	80082be <USB_HC_StartXfer+0x276>
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d045      	beq.n	80082be <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	79db      	ldrb	r3, [r3, #7]
 8008236:	2b03      	cmp	r3, #3
 8008238:	d830      	bhi.n	800829c <USB_HC_StartXfer+0x254>
 800823a:	a201      	add	r2, pc, #4	; (adr r2, 8008240 <USB_HC_StartXfer+0x1f8>)
 800823c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008240:	08008251 	.word	0x08008251
 8008244:	08008275 	.word	0x08008275
 8008248:	08008251 	.word	0x08008251
 800824c:	08008275 	.word	0x08008275
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	3303      	adds	r3, #3
 8008256:	089b      	lsrs	r3, r3, #2
 8008258:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800825a:	8afa      	ldrh	r2, [r7, #22]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	b29b      	uxth	r3, r3
 8008262:	429a      	cmp	r2, r3
 8008264:	d91c      	bls.n	80082a0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	f043 0220 	orr.w	r2, r3, #32
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	619a      	str	r2, [r3, #24]
        }
        break;
 8008272:	e015      	b.n	80082a0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	3303      	adds	r3, #3
 800827a:	089b      	lsrs	r3, r3, #2
 800827c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800827e:	8afa      	ldrh	r2, [r7, #22]
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	b29b      	uxth	r3, r3
 800828a:	429a      	cmp	r2, r3
 800828c:	d90a      	bls.n	80082a4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	619a      	str	r2, [r3, #24]
        }
        break;
 800829a:	e003      	b.n	80082a4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800829c:	bf00      	nop
 800829e:	e002      	b.n	80082a6 <USB_HC_StartXfer+0x25e>
        break;
 80082a0:	bf00      	nop
 80082a2:	e000      	b.n	80082a6 <USB_HC_StartXfer+0x25e>
        break;
 80082a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	68d9      	ldr	r1, [r3, #12]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	785a      	ldrb	r2, [r3, #1]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	2000      	movs	r0, #0
 80082b6:	9000      	str	r0, [sp, #0]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f7ff fb81 	bl	80079c0 <USB_WritePacket>
  }

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3728      	adds	r7, #40	; 0x28
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	1ff80000 	.word	0x1ff80000

080082cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	b29b      	uxth	r3, r3
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3714      	adds	r7, #20
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b089      	sub	sp, #36	; 0x24
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	460b      	mov	r3, r1
 80082f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80082fe:	78fb      	ldrb	r3, [r7, #3]
 8008300:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	015a      	lsls	r2, r3, #5
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	4413      	add	r3, r2
 800830e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	0c9b      	lsrs	r3, r3, #18
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	4413      	add	r3, r2
 8008324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	0fdb      	lsrs	r3, r3, #31
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b20      	cmp	r3, #32
 800833c:	d104      	bne.n	8008348 <USB_HC_Halt+0x5a>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d101      	bne.n	8008348 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	e0e8      	b.n	800851a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <USB_HC_Halt+0x66>
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	2b02      	cmp	r3, #2
 8008352:	d173      	bne.n	800843c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	4413      	add	r3, r2
 800835c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	0151      	lsls	r1, r2, #5
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	440a      	add	r2, r1
 800836a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800836e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008372:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	f003 0320 	and.w	r3, r3, #32
 800837c:	2b00      	cmp	r3, #0
 800837e:	f040 80cb 	bne.w	8008518 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008386:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d143      	bne.n	8008416 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	4413      	add	r3, r2
 8008396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	0151      	lsls	r1, r2, #5
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	440a      	add	r2, r1
 80083a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	0151      	lsls	r1, r2, #5
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	440a      	add	r2, r1
 80083c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083cc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	0151      	lsls	r1, r2, #5
 80083e0:	69ba      	ldr	r2, [r7, #24]
 80083e2:	440a      	add	r2, r1
 80083e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083ec:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	3301      	adds	r3, #1
 80083f2:	61fb      	str	r3, [r7, #28]
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083fa:	d81d      	bhi.n	8008438 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	4413      	add	r3, r2
 8008404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800840e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008412:	d0ec      	beq.n	80083ee <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008414:	e080      	b.n	8008518 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	4413      	add	r3, r2
 800841e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	0151      	lsls	r1, r2, #5
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	440a      	add	r2, r1
 800842c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008430:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008434:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008436:	e06f      	b.n	8008518 <USB_HC_Halt+0x22a>
            break;
 8008438:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800843a:	e06d      	b.n	8008518 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	015a      	lsls	r2, r3, #5
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	4413      	add	r3, r2
 8008444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	0151      	lsls	r1, r2, #5
 800844e:	69ba      	ldr	r2, [r7, #24]
 8008450:	440a      	add	r2, r1
 8008452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008456:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800845a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d143      	bne.n	80084f4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	4413      	add	r3, r2
 8008474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	0151      	lsls	r1, r2, #5
 800847e:	69ba      	ldr	r2, [r7, #24]
 8008480:	440a      	add	r2, r1
 8008482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008486:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800848a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	4413      	add	r3, r2
 8008494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	0151      	lsls	r1, r2, #5
 800849e:	69ba      	ldr	r2, [r7, #24]
 80084a0:	440a      	add	r2, r1
 80084a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	0151      	lsls	r1, r2, #5
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	440a      	add	r2, r1
 80084c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084ca:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	3301      	adds	r3, #1
 80084d0:	61fb      	str	r3, [r7, #28]
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084d8:	d81d      	bhi.n	8008516 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084f0:	d0ec      	beq.n	80084cc <USB_HC_Halt+0x1de>
 80084f2:	e011      	b.n	8008518 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	0151      	lsls	r1, r2, #5
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	440a      	add	r2, r1
 800850a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800850e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008512:	6013      	str	r3, [r2, #0]
 8008514:	e000      	b.n	8008518 <USB_HC_Halt+0x22a>
          break;
 8008516:	bf00      	nop
    }
  }

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3724      	adds	r7, #36	; 0x24
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
	...

08008528 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008538:	78fb      	ldrb	r3, [r7, #3]
 800853a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800853c:	2301      	movs	r3, #1
 800853e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	04da      	lsls	r2, r3, #19
 8008544:	4b15      	ldr	r3, [pc, #84]	; (800859c <USB_DoPing+0x74>)
 8008546:	4013      	ands	r3, r2
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	0151      	lsls	r1, r2, #5
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	440a      	add	r2, r1
 8008550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008558:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	4413      	add	r3, r2
 8008562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008570:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008578:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	4413      	add	r3, r2
 8008582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008586:	461a      	mov	r2, r3
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	371c      	adds	r7, #28
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	1ff80000 	.word	0x1ff80000

080085a0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7ff f981 	bl	80078b8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80085b6:	2110      	movs	r1, #16
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7ff f9b9 	bl	8007930 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7ff f9dc 	bl	800797c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80085c4:	2300      	movs	r3, #0
 80085c6:	613b      	str	r3, [r7, #16]
 80085c8:	e01f      	b.n	800860a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085f0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	015a      	lsls	r2, r3, #5
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	4413      	add	r3, r2
 80085fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085fe:	461a      	mov	r2, r3
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	3301      	adds	r3, #1
 8008608:	613b      	str	r3, [r7, #16]
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	2b0f      	cmp	r3, #15
 800860e:	d9dc      	bls.n	80085ca <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008610:	2300      	movs	r3, #0
 8008612:	613b      	str	r3, [r7, #16]
 8008614:	e034      	b.n	8008680 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	4413      	add	r3, r2
 800861e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800862c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008634:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800863c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	4413      	add	r3, r2
 8008646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800864a:	461a      	mov	r2, r3
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	3301      	adds	r3, #1
 8008654:	617b      	str	r3, [r7, #20]
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800865c:	d80c      	bhi.n	8008678 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	4413      	add	r3, r2
 8008666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008674:	d0ec      	beq.n	8008650 <USB_StopHost+0xb0>
 8008676:	e000      	b.n	800867a <USB_StopHost+0xda>
        break;
 8008678:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	3301      	adds	r3, #1
 800867e:	613b      	str	r3, [r7, #16]
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	2b0f      	cmp	r3, #15
 8008684:	d9c7      	bls.n	8008616 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800868c:	461a      	mov	r2, r3
 800868e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008692:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800869a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7ff f8fa 	bl	8007896 <USB_EnableGlobalInt>

  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3718      	adds	r7, #24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80086ac:	b590      	push	{r4, r7, lr}
 80086ae:	b089      	sub	sp, #36	; 0x24
 80086b0:	af04      	add	r7, sp, #16
 80086b2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80086b4:	2301      	movs	r3, #1
 80086b6:	2202      	movs	r2, #2
 80086b8:	2102      	movs	r1, #2
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fc66 	bl	8008f8c <USBH_FindInterface>
 80086c0:	4603      	mov	r3, r0
 80086c2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	2bff      	cmp	r3, #255	; 0xff
 80086c8:	d002      	beq.n	80086d0 <USBH_CDC_InterfaceInit+0x24>
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d901      	bls.n	80086d4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80086d0:	2302      	movs	r3, #2
 80086d2:	e13d      	b.n	8008950 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fc3b 	bl	8008f54 <USBH_SelectInterface>
 80086de:	4603      	mov	r3, r0
 80086e0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d001      	beq.n	80086ec <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80086e8:	2302      	movs	r3, #2
 80086ea:	e131      	b.n	8008950 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80086f2:	2050      	movs	r0, #80	; 0x50
 80086f4:	f002 fa00 	bl	800aaf8 <malloc>
 80086f8:	4603      	mov	r3, r0
 80086fa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008702:	69db      	ldr	r3, [r3, #28]
 8008704:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800870c:	2302      	movs	r3, #2
 800870e:	e11f      	b.n	8008950 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008710:	2250      	movs	r2, #80	; 0x50
 8008712:	2100      	movs	r1, #0
 8008714:	68b8      	ldr	r0, [r7, #8]
 8008716:	f002 f9ff 	bl	800ab18 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800871a:	7bfb      	ldrb	r3, [r7, #15]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	211a      	movs	r1, #26
 8008720:	fb01 f303 	mul.w	r3, r1, r3
 8008724:	4413      	add	r3, r2
 8008726:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	b25b      	sxtb	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	da15      	bge.n	800875e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	211a      	movs	r1, #26
 8008738:	fb01 f303 	mul.w	r3, r1, r3
 800873c:	4413      	add	r3, r2
 800873e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008742:	781a      	ldrb	r2, [r3, #0]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	211a      	movs	r1, #26
 800874e:	fb01 f303 	mul.w	r3, r1, r3
 8008752:	4413      	add	r3, r2
 8008754:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008758:	881a      	ldrh	r2, [r3, #0]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	785b      	ldrb	r3, [r3, #1]
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f001 fe32 	bl	800a3ce <USBH_AllocPipe>
 800876a:	4603      	mov	r3, r0
 800876c:	461a      	mov	r2, r3
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	7819      	ldrb	r1, [r3, #0]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	7858      	ldrb	r0, [r3, #1]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	8952      	ldrh	r2, [r2, #10]
 800878a:	9202      	str	r2, [sp, #8]
 800878c:	2203      	movs	r2, #3
 800878e:	9201      	str	r2, [sp, #4]
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	4623      	mov	r3, r4
 8008794:	4602      	mov	r2, r0
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f001 fdea 	bl	800a370 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2200      	movs	r2, #0
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f002 f8f9 	bl	800a99c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80087aa:	2300      	movs	r3, #0
 80087ac:	2200      	movs	r2, #0
 80087ae:	210a      	movs	r1, #10
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fbeb 	bl	8008f8c <USBH_FindInterface>
 80087b6:	4603      	mov	r3, r0
 80087b8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
 80087bc:	2bff      	cmp	r3, #255	; 0xff
 80087be:	d002      	beq.n	80087c6 <USBH_CDC_InterfaceInit+0x11a>
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d901      	bls.n	80087ca <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80087c6:	2302      	movs	r3, #2
 80087c8:	e0c2      	b.n	8008950 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	211a      	movs	r1, #26
 80087d0:	fb01 f303 	mul.w	r3, r1, r3
 80087d4:	4413      	add	r3, r2
 80087d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	b25b      	sxtb	r3, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	da16      	bge.n	8008810 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	211a      	movs	r1, #26
 80087e8:	fb01 f303 	mul.w	r3, r1, r3
 80087ec:	4413      	add	r3, r2
 80087ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80087f2:	781a      	ldrb	r2, [r3, #0]
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	211a      	movs	r1, #26
 80087fe:	fb01 f303 	mul.w	r3, r1, r3
 8008802:	4413      	add	r3, r2
 8008804:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008808:	881a      	ldrh	r2, [r3, #0]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	835a      	strh	r2, [r3, #26]
 800880e:	e015      	b.n	800883c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	211a      	movs	r1, #26
 8008816:	fb01 f303 	mul.w	r3, r1, r3
 800881a:	4413      	add	r3, r2
 800881c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008820:	781a      	ldrb	r2, [r3, #0]
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	211a      	movs	r1, #26
 800882c:	fb01 f303 	mul.w	r3, r1, r3
 8008830:	4413      	add	r3, r2
 8008832:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008836:	881a      	ldrh	r2, [r3, #0]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	211a      	movs	r1, #26
 8008842:	fb01 f303 	mul.w	r3, r1, r3
 8008846:	4413      	add	r3, r2
 8008848:	f203 3356 	addw	r3, r3, #854	; 0x356
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	b25b      	sxtb	r3, r3
 8008850:	2b00      	cmp	r3, #0
 8008852:	da16      	bge.n	8008882 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008854:	7bfb      	ldrb	r3, [r7, #15]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	211a      	movs	r1, #26
 800885a:	fb01 f303 	mul.w	r3, r1, r3
 800885e:	4413      	add	r3, r2
 8008860:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008864:	781a      	ldrb	r2, [r3, #0]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800886a:	7bfb      	ldrb	r3, [r7, #15]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	211a      	movs	r1, #26
 8008870:	fb01 f303 	mul.w	r3, r1, r3
 8008874:	4413      	add	r3, r2
 8008876:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800887a:	881a      	ldrh	r2, [r3, #0]
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	835a      	strh	r2, [r3, #26]
 8008880:	e015      	b.n	80088ae <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008882:	7bfb      	ldrb	r3, [r7, #15]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	211a      	movs	r1, #26
 8008888:	fb01 f303 	mul.w	r3, r1, r3
 800888c:	4413      	add	r3, r2
 800888e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008892:	781a      	ldrb	r2, [r3, #0]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008898:	7bfb      	ldrb	r3, [r7, #15]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	211a      	movs	r1, #26
 800889e:	fb01 f303 	mul.w	r3, r1, r3
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80088a8:	881a      	ldrh	r2, [r3, #0]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	7b9b      	ldrb	r3, [r3, #14]
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 fd8a 	bl	800a3ce <USBH_AllocPipe>
 80088ba:	4603      	mov	r3, r0
 80088bc:	461a      	mov	r2, r3
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	7bdb      	ldrb	r3, [r3, #15]
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f001 fd80 	bl	800a3ce <USBH_AllocPipe>
 80088ce:	4603      	mov	r3, r0
 80088d0:	461a      	mov	r2, r3
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	7b59      	ldrb	r1, [r3, #13]
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	7b98      	ldrb	r0, [r3, #14]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	8b12      	ldrh	r2, [r2, #24]
 80088ee:	9202      	str	r2, [sp, #8]
 80088f0:	2202      	movs	r2, #2
 80088f2:	9201      	str	r2, [sp, #4]
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	4623      	mov	r3, r4
 80088f8:	4602      	mov	r2, r0
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f001 fd38 	bl	800a370 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	7b19      	ldrb	r1, [r3, #12]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	7bd8      	ldrb	r0, [r3, #15]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	8b52      	ldrh	r2, [r2, #26]
 8008918:	9202      	str	r2, [sp, #8]
 800891a:	2202      	movs	r2, #2
 800891c:	9201      	str	r2, [sp, #4]
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	4623      	mov	r3, r4
 8008922:	4602      	mov	r2, r0
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f001 fd23 	bl	800a370 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	7b5b      	ldrb	r3, [r3, #13]
 8008936:	2200      	movs	r2, #0
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f002 f82e 	bl	800a99c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	7b1b      	ldrb	r3, [r3, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f002 f827 	bl	800a99c <USBH_LL_SetToggle>

  return USBH_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	bd90      	pop	{r4, r7, pc}

08008958 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008966:	69db      	ldr	r3, [r3, #28]
 8008968:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00e      	beq.n	8008990 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f001 fd18 	bl	800a3ae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 fd43 	bl	800a410 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	7b1b      	ldrb	r3, [r3, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00e      	beq.n	80089b6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	7b1b      	ldrb	r3, [r3, #12]
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 fd05 	bl	800a3ae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	7b1b      	ldrb	r3, [r3, #12]
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 fd30 	bl	800a410 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	7b5b      	ldrb	r3, [r3, #13]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00e      	beq.n	80089dc <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	7b5b      	ldrb	r3, [r3, #13]
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f001 fcf2 	bl	800a3ae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	7b5b      	ldrb	r3, [r3, #13]
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 fd1d 	bl	800a410 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089e2:	69db      	ldr	r3, [r3, #28]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089ee:	69db      	ldr	r3, [r3, #28]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f002 f889 	bl	800ab08 <free>
    phost->pActiveClass->pData = 0U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089fc:	2200      	movs	r2, #0
 80089fe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	3340      	adds	r3, #64	; 0x40
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f8b1 	bl	8008b8a <GetLineCoding>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008a2c:	7afb      	ldrb	r3, [r7, #11]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d105      	bne.n	8008a3e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a38:	2102      	movs	r1, #2
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008a3e:	7afb      	ldrb	r3, [r7, #11]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008a50:	2301      	movs	r3, #1
 8008a52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a5e:	69db      	ldr	r3, [r3, #28]
 8008a60:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d877      	bhi.n	8008b5c <USBH_CDC_Process+0x114>
 8008a6c:	a201      	add	r2, pc, #4	; (adr r2, 8008a74 <USBH_CDC_Process+0x2c>)
 8008a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a72:	bf00      	nop
 8008a74:	08008a89 	.word	0x08008a89
 8008a78:	08008a8f 	.word	0x08008a8f
 8008a7c:	08008abf 	.word	0x08008abf
 8008a80:	08008b33 	.word	0x08008b33
 8008a84:	08008b41 	.word	0x08008b41
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a8c:	e06d      	b.n	8008b6a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f897 	bl	8008bc8 <SetLineCoding>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d104      	bne.n	8008aae <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2202      	movs	r2, #2
 8008aa8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008aac:	e058      	b.n	8008b60 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008aae:	7bbb      	ldrb	r3, [r7, #14]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d055      	beq.n	8008b60 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2204      	movs	r2, #4
 8008ab8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008abc:	e050      	b.n	8008b60 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	3340      	adds	r3, #64	; 0x40
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f860 	bl	8008b8a <GetLineCoding>
 8008aca:	4603      	mov	r3, r0
 8008acc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d126      	bne.n	8008b22 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ae6:	791b      	ldrb	r3, [r3, #4]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d13b      	bne.n	8008b64 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008af6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d133      	bne.n	8008b64 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b06:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d12b      	bne.n	8008b64 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b14:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d124      	bne.n	8008b64 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f958 	bl	8008dd0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008b20:	e020      	b.n	8008b64 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d01d      	beq.n	8008b64 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	2204      	movs	r2, #4
 8008b2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008b30:	e018      	b.n	8008b64 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f867 	bl	8008c06 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f8da 	bl	8008cf2 <CDC_ProcessReception>
      break;
 8008b3e:	e014      	b.n	8008b6a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008b40:	2100      	movs	r1, #0
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 ffe3 	bl	8009b0e <USBH_ClrFeature>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10a      	bne.n	8008b68 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008b5a:	e005      	b.n	8008b68 <USBH_CDC_Process+0x120>

    default:
      break;
 8008b5c:	bf00      	nop
 8008b5e:	e004      	b.n	8008b6a <USBH_CDC_Process+0x122>
      break;
 8008b60:	bf00      	nop
 8008b62:	e002      	b.n	8008b6a <USBH_CDC_Process+0x122>
      break;
 8008b64:	bf00      	nop
 8008b66:	e000      	b.n	8008b6a <USBH_CDC_Process+0x122>
      break;
 8008b68:	bf00      	nop

  }

  return status;
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	22a1      	movs	r2, #161	; 0xa1
 8008b98:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2221      	movs	r2, #33	; 0x21
 8008b9e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2207      	movs	r2, #7
 8008bb0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2207      	movs	r2, #7
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 f988 	bl	8009ece <USBH_CtlReq>
 8008bbe:	4603      	mov	r3, r0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2221      	movs	r2, #33	; 0x21
 8008bd6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2207      	movs	r2, #7
 8008bee:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	2207      	movs	r2, #7
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f001 f969 	bl	8009ece <USBH_CtlReq>
 8008bfc:	4603      	mov	r3, r0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b086      	sub	sp, #24
 8008c0a:	af02      	add	r7, sp, #8
 8008c0c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d002      	beq.n	8008c2c <CDC_ProcessTransmission+0x26>
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d023      	beq.n	8008c72 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008c2a:	e05e      	b.n	8008cea <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	8b12      	ldrh	r2, [r2, #24]
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d90b      	bls.n	8008c50 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	69d9      	ldr	r1, [r3, #28]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	8b1a      	ldrh	r2, [r3, #24]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	7b5b      	ldrb	r3, [r3, #13]
 8008c44:	2001      	movs	r0, #1
 8008c46:	9000      	str	r0, [sp, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f001 fb4e 	bl	800a2ea <USBH_BulkSendData>
 8008c4e:	e00b      	b.n	8008c68 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	7b5b      	ldrb	r3, [r3, #13]
 8008c5e:	2001      	movs	r0, #1
 8008c60:	9000      	str	r0, [sp, #0]
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f001 fb41 	bl	800a2ea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008c70:	e03b      	b.n	8008cea <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	7b5b      	ldrb	r3, [r3, #13]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 fe65 	bl	800a948 <USBH_LL_GetURBState>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008c82:	7afb      	ldrb	r3, [r7, #11]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d128      	bne.n	8008cda <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	8b12      	ldrh	r2, [r2, #24]
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d90e      	bls.n	8008cb2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	8b12      	ldrh	r2, [r2, #24]
 8008c9c:	1a9a      	subs	r2, r3, r2
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	8b12      	ldrh	r2, [r2, #24]
 8008caa:	441a      	add	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	61da      	str	r2, [r3, #28]
 8008cb0:	e002      	b.n	8008cb8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d004      	beq.n	8008cca <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008cc8:	e00e      	b.n	8008ce8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f868 	bl	8008da8 <USBH_CDC_TransmitCallback>
      break;
 8008cd8:	e006      	b.n	8008ce8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008cda:	7afb      	ldrb	r3, [r7, #11]
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d103      	bne.n	8008ce8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008ce8:	bf00      	nop
  }
}
 8008cea:	bf00      	nop
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b086      	sub	sp, #24
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d00:	69db      	ldr	r3, [r3, #28]
 8008d02:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d04:	2300      	movs	r3, #0
 8008d06:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d002      	beq.n	8008d18 <CDC_ProcessReception+0x26>
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	d00e      	beq.n	8008d34 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008d16:	e043      	b.n	8008da0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	6a19      	ldr	r1, [r3, #32]
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	8b5a      	ldrh	r2, [r3, #26]
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	7b1b      	ldrb	r3, [r3, #12]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f001 fb05 	bl	800a334 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2204      	movs	r2, #4
 8008d2e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008d32:	e035      	b.n	8008da0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	7b1b      	ldrb	r3, [r3, #12]
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f001 fe04 	bl	800a948 <USBH_LL_GetURBState>
 8008d40:	4603      	mov	r3, r0
 8008d42:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008d44:	7cfb      	ldrb	r3, [r7, #19]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d129      	bne.n	8008d9e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	7b1b      	ldrb	r3, [r3, #12]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 fd67 	bl	800a824 <USBH_LL_GetLastXferSize>
 8008d56:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d016      	beq.n	8008d90 <CDC_ProcessReception+0x9e>
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	8b5b      	ldrh	r3, [r3, #26]
 8008d66:	461a      	mov	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d910      	bls.n	8008d90 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	1ad2      	subs	r2, r2, r3
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	6a1a      	ldr	r2, [r3, #32]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	441a      	add	r2, r3
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	2203      	movs	r2, #3
 8008d8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008d8e:	e006      	b.n	8008d9e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f80f 	bl	8008dbc <USBH_CDC_ReceiveCallback>
      break;
 8008d9e:	bf00      	nop
  }
}
 8008da0:	bf00      	nop
 8008da2:	3718      	adds	r7, #24
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	4613      	mov	r3, r2
 8008df0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008df8:	2302      	movs	r3, #2
 8008dfa:	e029      	b.n	8008e50 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	79fa      	ldrb	r2, [r7, #7]
 8008e00:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f000 f81f 	bl	8008e58 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d003      	beq.n	8008e48 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f001 fc37 	bl	800a6bc <USBH_LL_Init>

  return USBH_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008e60:	2300      	movs	r3, #0
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	e009      	b.n	8008e7e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	33e0      	adds	r3, #224	; 0xe0
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	2200      	movs	r2, #0
 8008e76:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2b0e      	cmp	r3, #14
 8008e82:	d9f2      	bls.n	8008e6a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e84:	2300      	movs	r3, #0
 8008e86:	60fb      	str	r3, [r7, #12]
 8008e88:	e009      	b.n	8008e9e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4413      	add	r3, r2
 8008e90:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008e94:	2200      	movs	r2, #0
 8008e96:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	60fb      	str	r3, [r7, #12]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea4:	d3f1      	bcc.n	8008e8a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2240      	movs	r2, #64	; 0x40
 8008eca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d016      	beq.n	8008f42 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10e      	bne.n	8008f3c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008f24:	1c59      	adds	r1, r3, #1
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	33de      	adds	r3, #222	; 0xde
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73fb      	strb	r3, [r7, #15]
 8008f3a:	e004      	b.n	8008f46 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	73fb      	strb	r3, [r7, #15]
 8008f40:	e001      	b.n	8008f46 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008f42:	2302      	movs	r3, #2
 8008f44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008f60:	2300      	movs	r3, #0
 8008f62:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d204      	bcs.n	8008f7a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	78fa      	ldrb	r2, [r7, #3]
 8008f74:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008f78:	e001      	b.n	8008f7e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b087      	sub	sp, #28
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	4608      	mov	r0, r1
 8008f96:	4611      	mov	r1, r2
 8008f98:	461a      	mov	r2, r3
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	70fb      	strb	r3, [r7, #3]
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	70bb      	strb	r3, [r7, #2]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008fb4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008fb6:	e025      	b.n	8009004 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008fb8:	7dfb      	ldrb	r3, [r7, #23]
 8008fba:	221a      	movs	r2, #26
 8008fbc:	fb02 f303 	mul.w	r3, r2, r3
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	3302      	adds	r3, #2
 8008fc8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	795b      	ldrb	r3, [r3, #5]
 8008fce:	78fa      	ldrb	r2, [r7, #3]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d002      	beq.n	8008fda <USBH_FindInterface+0x4e>
 8008fd4:	78fb      	ldrb	r3, [r7, #3]
 8008fd6:	2bff      	cmp	r3, #255	; 0xff
 8008fd8:	d111      	bne.n	8008ffe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008fde:	78ba      	ldrb	r2, [r7, #2]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d002      	beq.n	8008fea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008fe4:	78bb      	ldrb	r3, [r7, #2]
 8008fe6:	2bff      	cmp	r3, #255	; 0xff
 8008fe8:	d109      	bne.n	8008ffe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008fee:	787a      	ldrb	r2, [r7, #1]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d002      	beq.n	8008ffa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008ff4:	787b      	ldrb	r3, [r7, #1]
 8008ff6:	2bff      	cmp	r3, #255	; 0xff
 8008ff8:	d101      	bne.n	8008ffe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	e006      	b.n	800900c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
 8009000:	3301      	adds	r3, #1
 8009002:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009004:	7dfb      	ldrb	r3, [r7, #23]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d9d6      	bls.n	8008fb8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800900a:	23ff      	movs	r3, #255	; 0xff
}
 800900c:	4618      	mov	r0, r3
 800900e:	371c      	adds	r7, #28
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f001 fb87 	bl	800a734 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009026:	2101      	movs	r1, #1
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f001 fca0 	bl	800a96e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b088      	sub	sp, #32
 800903c:	af04      	add	r7, sp, #16
 800903e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009040:	2302      	movs	r3, #2
 8009042:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b01      	cmp	r3, #1
 8009052:	d102      	bne.n	800905a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2203      	movs	r2, #3
 8009058:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b0b      	cmp	r3, #11
 8009062:	f200 81b3 	bhi.w	80093cc <USBH_Process+0x394>
 8009066:	a201      	add	r2, pc, #4	; (adr r2, 800906c <USBH_Process+0x34>)
 8009068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906c:	0800909d 	.word	0x0800909d
 8009070:	080090cf 	.word	0x080090cf
 8009074:	08009137 	.word	0x08009137
 8009078:	08009367 	.word	0x08009367
 800907c:	080093cd 	.word	0x080093cd
 8009080:	080091db 	.word	0x080091db
 8009084:	0800930d 	.word	0x0800930d
 8009088:	08009211 	.word	0x08009211
 800908c:	08009231 	.word	0x08009231
 8009090:	08009251 	.word	0x08009251
 8009094:	0800927f 	.word	0x0800927f
 8009098:	0800934f 	.word	0x0800934f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f000 8193 	beq.w	80093d0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80090b0:	20c8      	movs	r0, #200	; 0xc8
 80090b2:	f001 fca3 	bl	800a9fc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f001 fb99 	bl	800a7ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80090cc:	e180      	b.n	80093d0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d107      	bne.n	80090e8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2202      	movs	r2, #2
 80090e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80090e6:	e182      	b.n	80093ee <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80090ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090f2:	d914      	bls.n	800911e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80090fa:	3301      	adds	r3, #1
 80090fc:	b2da      	uxtb	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800910a:	2b03      	cmp	r3, #3
 800910c:	d903      	bls.n	8009116 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	220d      	movs	r2, #13
 8009112:	701a      	strb	r2, [r3, #0]
      break;
 8009114:	e16b      	b.n	80093ee <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	701a      	strb	r2, [r3, #0]
      break;
 800911c:	e167      	b.n	80093ee <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009124:	f103 020a 	add.w	r2, r3, #10
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800912e:	200a      	movs	r0, #10
 8009130:	f001 fc64 	bl	800a9fc <USBH_Delay>
      break;
 8009134:	e15b      	b.n	80093ee <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800913c:	2b00      	cmp	r3, #0
 800913e:	d005      	beq.n	800914c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009146:	2104      	movs	r1, #4
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800914c:	2064      	movs	r0, #100	; 0x64
 800914e:	f001 fc55 	bl	800a9fc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f001 fb24 	bl	800a7a0 <USBH_LL_GetSpeed>
 8009158:	4603      	mov	r3, r0
 800915a:	461a      	mov	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2205      	movs	r2, #5
 8009166:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009168:	2100      	movs	r1, #0
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 f92f 	bl	800a3ce <USBH_AllocPipe>
 8009170:	4603      	mov	r3, r0
 8009172:	461a      	mov	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009178:	2180      	movs	r1, #128	; 0x80
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f001 f927 	bl	800a3ce <USBH_AllocPipe>
 8009180:	4603      	mov	r3, r0
 8009182:	461a      	mov	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	7919      	ldrb	r1, [r3, #4]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800919c:	b292      	uxth	r2, r2
 800919e:	9202      	str	r2, [sp, #8]
 80091a0:	2200      	movs	r2, #0
 80091a2:	9201      	str	r2, [sp, #4]
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	4603      	mov	r3, r0
 80091a8:	2280      	movs	r2, #128	; 0x80
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f001 f8e0 	bl	800a370 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	7959      	ldrb	r1, [r3, #5]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80091c4:	b292      	uxth	r2, r2
 80091c6:	9202      	str	r2, [sp, #8]
 80091c8:	2200      	movs	r2, #0
 80091ca:	9201      	str	r2, [sp, #4]
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	4603      	mov	r3, r0
 80091d0:	2200      	movs	r2, #0
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f001 f8cc 	bl	800a370 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80091d8:	e109      	b.n	80093ee <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f90c 	bl	80093f8 <USBH_HandleEnum>
 80091e0:	4603      	mov	r3, r0
 80091e2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80091e4:	7bbb      	ldrb	r3, [r7, #14]
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f040 80f3 	bne.w	80093d4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d103      	bne.n	8009208 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2208      	movs	r2, #8
 8009204:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009206:	e0e5      	b.n	80093d4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2207      	movs	r2, #7
 800920c:	701a      	strb	r2, [r3, #0]
      break;
 800920e:	e0e1      	b.n	80093d4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009216:	2b00      	cmp	r3, #0
 8009218:	f000 80de 	beq.w	80093d8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009222:	2101      	movs	r1, #1
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2208      	movs	r2, #8
 800922c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800922e:	e0d3      	b.n	80093d8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009236:	b29b      	uxth	r3, r3
 8009238:	4619      	mov	r1, r3
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fc20 	bl	8009a80 <USBH_SetCfg>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	f040 80ca 	bne.w	80093dc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2209      	movs	r2, #9
 800924c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800924e:	e0c5      	b.n	80093dc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009256:	f003 0320 	and.w	r3, r3, #32
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00b      	beq.n	8009276 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800925e:	2101      	movs	r1, #1
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fc30 	bl	8009ac6 <USBH_SetFeature>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	f040 80b9 	bne.w	80093e0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	220a      	movs	r2, #10
 8009272:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009274:	e0b4      	b.n	80093e0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	220a      	movs	r2, #10
 800927a:	701a      	strb	r2, [r3, #0]
      break;
 800927c:	e0b0      	b.n	80093e0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 80ad 	beq.w	80093e4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]
 8009296:	e016      	b.n	80092c6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009298:	7bfa      	ldrb	r2, [r7, #15]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	32de      	adds	r2, #222	; 0xde
 800929e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a2:	791a      	ldrb	r2, [r3, #4]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d108      	bne.n	80092c0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80092ae:	7bfa      	ldrb	r2, [r7, #15]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	32de      	adds	r2, #222	; 0xde
 80092b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80092be:	e005      	b.n	80092cc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
 80092c2:	3301      	adds	r3, #1
 80092c4:	73fb      	strb	r3, [r7, #15]
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d0e5      	beq.n	8009298 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d016      	beq.n	8009304 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	4798      	blx	r3
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d109      	bne.n	80092fc <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2206      	movs	r2, #6
 80092ec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092f4:	2103      	movs	r1, #3
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80092fa:	e073      	b.n	80093e4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	220d      	movs	r2, #13
 8009300:	701a      	strb	r2, [r3, #0]
      break;
 8009302:	e06f      	b.n	80093e4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	220d      	movs	r2, #13
 8009308:	701a      	strb	r2, [r3, #0]
      break;
 800930a:	e06b      	b.n	80093e4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009312:	2b00      	cmp	r3, #0
 8009314:	d017      	beq.n	8009346 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	4798      	blx	r3
 8009322:	4603      	mov	r3, r0
 8009324:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009326:	7bbb      	ldrb	r3, [r7, #14]
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d103      	bne.n	8009336 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	220b      	movs	r2, #11
 8009332:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009334:	e058      	b.n	80093e8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8009336:	7bbb      	ldrb	r3, [r7, #14]
 8009338:	b2db      	uxtb	r3, r3
 800933a:	2b02      	cmp	r3, #2
 800933c:	d154      	bne.n	80093e8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	220d      	movs	r2, #13
 8009342:	701a      	strb	r2, [r3, #0]
      break;
 8009344:	e050      	b.n	80093e8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	220d      	movs	r2, #13
 800934a:	701a      	strb	r2, [r3, #0]
      break;
 800934c:	e04c      	b.n	80093e8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009354:	2b00      	cmp	r3, #0
 8009356:	d049      	beq.n	80093ec <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	4798      	blx	r3
      }
      break;
 8009364:	e042      	b.n	80093ec <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7ff fd72 	bl	8008e58 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800937a:	2b00      	cmp	r3, #0
 800937c:	d009      	beq.n	8009392 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009398:	2b00      	cmp	r3, #0
 800939a:	d005      	beq.n	80093a8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80093a2:	2105      	movs	r1, #5
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d107      	bne.n	80093c4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f7ff fe2b 	bl	8009018 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80093c2:	e014      	b.n	80093ee <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f001 f9b5 	bl	800a734 <USBH_LL_Start>
      break;
 80093ca:	e010      	b.n	80093ee <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80093cc:	bf00      	nop
 80093ce:	e00e      	b.n	80093ee <USBH_Process+0x3b6>
      break;
 80093d0:	bf00      	nop
 80093d2:	e00c      	b.n	80093ee <USBH_Process+0x3b6>
      break;
 80093d4:	bf00      	nop
 80093d6:	e00a      	b.n	80093ee <USBH_Process+0x3b6>
    break;
 80093d8:	bf00      	nop
 80093da:	e008      	b.n	80093ee <USBH_Process+0x3b6>
      break;
 80093dc:	bf00      	nop
 80093de:	e006      	b.n	80093ee <USBH_Process+0x3b6>
      break;
 80093e0:	bf00      	nop
 80093e2:	e004      	b.n	80093ee <USBH_Process+0x3b6>
      break;
 80093e4:	bf00      	nop
 80093e6:	e002      	b.n	80093ee <USBH_Process+0x3b6>
      break;
 80093e8:	bf00      	nop
 80093ea:	e000      	b.n	80093ee <USBH_Process+0x3b6>
      break;
 80093ec:	bf00      	nop
  }
  return USBH_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af04      	add	r7, sp, #16
 80093fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009400:	2301      	movs	r3, #1
 8009402:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009404:	2301      	movs	r3, #1
 8009406:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	785b      	ldrb	r3, [r3, #1]
 800940c:	2b07      	cmp	r3, #7
 800940e:	f200 81c1 	bhi.w	8009794 <USBH_HandleEnum+0x39c>
 8009412:	a201      	add	r2, pc, #4	; (adr r2, 8009418 <USBH_HandleEnum+0x20>)
 8009414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009418:	08009439 	.word	0x08009439
 800941c:	080094f7 	.word	0x080094f7
 8009420:	08009561 	.word	0x08009561
 8009424:	080095ef 	.word	0x080095ef
 8009428:	08009659 	.word	0x08009659
 800942c:	080096c9 	.word	0x080096c9
 8009430:	0800970f 	.word	0x0800970f
 8009434:	08009755 	.word	0x08009755
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009438:	2108      	movs	r1, #8
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fa50 	bl	80098e0 <USBH_Get_DevDesc>
 8009440:	4603      	mov	r3, r0
 8009442:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d130      	bne.n	80094ac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	7919      	ldrb	r1, [r3, #4]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800946e:	b292      	uxth	r2, r2
 8009470:	9202      	str	r2, [sp, #8]
 8009472:	2200      	movs	r2, #0
 8009474:	9201      	str	r2, [sp, #4]
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	4603      	mov	r3, r0
 800947a:	2280      	movs	r2, #128	; 0x80
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 ff77 	bl	800a370 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	7959      	ldrb	r1, [r3, #5]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009496:	b292      	uxth	r2, r2
 8009498:	9202      	str	r2, [sp, #8]
 800949a:	2200      	movs	r2, #0
 800949c:	9201      	str	r2, [sp, #4]
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	4603      	mov	r3, r0
 80094a2:	2200      	movs	r2, #0
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 ff63 	bl	800a370 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80094aa:	e175      	b.n	8009798 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	f040 8172 	bne.w	8009798 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80094ba:	3301      	adds	r3, #1
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80094ca:	2b03      	cmp	r3, #3
 80094cc:	d903      	bls.n	80094d6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	220d      	movs	r2, #13
 80094d2:	701a      	strb	r2, [r3, #0]
      break;
 80094d4:	e160      	b.n	8009798 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	795b      	ldrb	r3, [r3, #5]
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 ff97 	bl	800a410 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	791b      	ldrb	r3, [r3, #4]
 80094e6:	4619      	mov	r1, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 ff91 	bl	800a410 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	701a      	strb	r2, [r3, #0]
      break;
 80094f4:	e150      	b.n	8009798 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80094f6:	2112      	movs	r1, #18
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f9f1 	bl	80098e0 <USBH_Get_DevDesc>
 80094fe:	4603      	mov	r3, r0
 8009500:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009502:	7bbb      	ldrb	r3, [r7, #14]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d103      	bne.n	8009510 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2202      	movs	r2, #2
 800950c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800950e:	e145      	b.n	800979c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009510:	7bbb      	ldrb	r3, [r7, #14]
 8009512:	2b03      	cmp	r3, #3
 8009514:	f040 8142 	bne.w	800979c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800951e:	3301      	adds	r3, #1
 8009520:	b2da      	uxtb	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800952e:	2b03      	cmp	r3, #3
 8009530:	d903      	bls.n	800953a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	220d      	movs	r2, #13
 8009536:	701a      	strb	r2, [r3, #0]
      break;
 8009538:	e130      	b.n	800979c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	795b      	ldrb	r3, [r3, #5]
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 ff65 	bl	800a410 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	791b      	ldrb	r3, [r3, #4]
 800954a:	4619      	mov	r1, r3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 ff5f 	bl	800a410 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	701a      	strb	r2, [r3, #0]
      break;
 800955e:	e11d      	b.n	800979c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009560:	2101      	movs	r1, #1
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fa68 	bl	8009a38 <USBH_SetAddress>
 8009568:	4603      	mov	r3, r0
 800956a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800956c:	7bbb      	ldrb	r3, [r7, #14]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d132      	bne.n	80095d8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009572:	2002      	movs	r0, #2
 8009574:	f001 fa42 	bl	800a9fc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2203      	movs	r2, #3
 8009584:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	7919      	ldrb	r1, [r3, #4]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800959a:	b292      	uxth	r2, r2
 800959c:	9202      	str	r2, [sp, #8]
 800959e:	2200      	movs	r2, #0
 80095a0:	9201      	str	r2, [sp, #4]
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	4603      	mov	r3, r0
 80095a6:	2280      	movs	r2, #128	; 0x80
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fee1 	bl	800a370 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	7959      	ldrb	r1, [r3, #5]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095c2:	b292      	uxth	r2, r2
 80095c4:	9202      	str	r2, [sp, #8]
 80095c6:	2200      	movs	r2, #0
 80095c8:	9201      	str	r2, [sp, #4]
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	4603      	mov	r3, r0
 80095ce:	2200      	movs	r2, #0
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fecd 	bl	800a370 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80095d6:	e0e3      	b.n	80097a0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095d8:	7bbb      	ldrb	r3, [r7, #14]
 80095da:	2b03      	cmp	r3, #3
 80095dc:	f040 80e0 	bne.w	80097a0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	220d      	movs	r2, #13
 80095e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	705a      	strb	r2, [r3, #1]
      break;
 80095ec:	e0d8      	b.n	80097a0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80095ee:	2109      	movs	r1, #9
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 f99d 	bl	8009930 <USBH_Get_CfgDesc>
 80095f6:	4603      	mov	r3, r0
 80095f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80095fa:	7bbb      	ldrb	r3, [r7, #14]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d103      	bne.n	8009608 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2204      	movs	r2, #4
 8009604:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009606:	e0cd      	b.n	80097a4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009608:	7bbb      	ldrb	r3, [r7, #14]
 800960a:	2b03      	cmp	r3, #3
 800960c:	f040 80ca 	bne.w	80097a4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009616:	3301      	adds	r3, #1
 8009618:	b2da      	uxtb	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009626:	2b03      	cmp	r3, #3
 8009628:	d903      	bls.n	8009632 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	220d      	movs	r2, #13
 800962e:	701a      	strb	r2, [r3, #0]
      break;
 8009630:	e0b8      	b.n	80097a4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	795b      	ldrb	r3, [r3, #5]
 8009636:	4619      	mov	r1, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fee9 	bl	800a410 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	791b      	ldrb	r3, [r3, #4]
 8009642:	4619      	mov	r1, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fee3 	bl	800a410 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	701a      	strb	r2, [r3, #0]
      break;
 8009656:	e0a5      	b.n	80097a4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f965 	bl	8009930 <USBH_Get_CfgDesc>
 8009666:	4603      	mov	r3, r0
 8009668:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800966a:	7bbb      	ldrb	r3, [r7, #14]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d103      	bne.n	8009678 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2205      	movs	r2, #5
 8009674:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009676:	e097      	b.n	80097a8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009678:	7bbb      	ldrb	r3, [r7, #14]
 800967a:	2b03      	cmp	r3, #3
 800967c:	f040 8094 	bne.w	80097a8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009686:	3301      	adds	r3, #1
 8009688:	b2da      	uxtb	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009696:	2b03      	cmp	r3, #3
 8009698:	d903      	bls.n	80096a2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	220d      	movs	r2, #13
 800969e:	701a      	strb	r2, [r3, #0]
      break;
 80096a0:	e082      	b.n	80097a8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	795b      	ldrb	r3, [r3, #5]
 80096a6:	4619      	mov	r1, r3
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 feb1 	bl	800a410 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	791b      	ldrb	r3, [r3, #4]
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 feab 	bl	800a410 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	701a      	strb	r2, [r3, #0]
      break;
 80096c6:	e06f      	b.n	80097a8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d019      	beq.n	8009706 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80096de:	23ff      	movs	r3, #255	; 0xff
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f949 	bl	8009978 <USBH_Get_StringDesc>
 80096e6:	4603      	mov	r3, r0
 80096e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d103      	bne.n	80096f8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2206      	movs	r2, #6
 80096f4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80096f6:	e059      	b.n	80097ac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d156      	bne.n	80097ac <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2206      	movs	r2, #6
 8009702:	705a      	strb	r2, [r3, #1]
      break;
 8009704:	e052      	b.n	80097ac <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2206      	movs	r2, #6
 800970a:	705a      	strb	r2, [r3, #1]
      break;
 800970c:	e04e      	b.n	80097ac <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009714:	2b00      	cmp	r3, #0
 8009716:	d019      	beq.n	800974c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009724:	23ff      	movs	r3, #255	; 0xff
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f926 	bl	8009978 <USBH_Get_StringDesc>
 800972c:	4603      	mov	r3, r0
 800972e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d103      	bne.n	800973e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2207      	movs	r2, #7
 800973a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800973c:	e038      	b.n	80097b0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	2b03      	cmp	r3, #3
 8009742:	d135      	bne.n	80097b0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2207      	movs	r2, #7
 8009748:	705a      	strb	r2, [r3, #1]
      break;
 800974a:	e031      	b.n	80097b0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2207      	movs	r2, #7
 8009750:	705a      	strb	r2, [r3, #1]
      break;
 8009752:	e02d      	b.n	80097b0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800975a:	2b00      	cmp	r3, #0
 800975c:	d017      	beq.n	800978e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800976a:	23ff      	movs	r3, #255	; 0xff
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f903 	bl	8009978 <USBH_Get_StringDesc>
 8009772:	4603      	mov	r3, r0
 8009774:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009776:	7bbb      	ldrb	r3, [r7, #14]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d102      	bne.n	8009782 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009780:	e018      	b.n	80097b4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009782:	7bbb      	ldrb	r3, [r7, #14]
 8009784:	2b03      	cmp	r3, #3
 8009786:	d115      	bne.n	80097b4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	73fb      	strb	r3, [r7, #15]
      break;
 800978c:	e012      	b.n	80097b4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	73fb      	strb	r3, [r7, #15]
      break;
 8009792:	e00f      	b.n	80097b4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009794:	bf00      	nop
 8009796:	e00e      	b.n	80097b6 <USBH_HandleEnum+0x3be>
      break;
 8009798:	bf00      	nop
 800979a:	e00c      	b.n	80097b6 <USBH_HandleEnum+0x3be>
      break;
 800979c:	bf00      	nop
 800979e:	e00a      	b.n	80097b6 <USBH_HandleEnum+0x3be>
      break;
 80097a0:	bf00      	nop
 80097a2:	e008      	b.n	80097b6 <USBH_HandleEnum+0x3be>
      break;
 80097a4:	bf00      	nop
 80097a6:	e006      	b.n	80097b6 <USBH_HandleEnum+0x3be>
      break;
 80097a8:	bf00      	nop
 80097aa:	e004      	b.n	80097b6 <USBH_HandleEnum+0x3be>
      break;
 80097ac:	bf00      	nop
 80097ae:	e002      	b.n	80097b6 <USBH_HandleEnum+0x3be>
      break;
 80097b0:	bf00      	nop
 80097b2:	e000      	b.n	80097b6 <USBH_HandleEnum+0x3be>
      break;
 80097b4:	bf00      	nop
  }
  return Status;
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80097d2:	bf00      	nop
 80097d4:	370c      	adds	r7, #12
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b082      	sub	sp, #8
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097ec:	1c5a      	adds	r2, r3, #1
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f804 	bl	8009802 <USBH_HandleSof>
}
 80097fa:	bf00      	nop
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b0b      	cmp	r3, #11
 8009812:	d10a      	bne.n	800982a <USBH_HandleSof+0x28>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800981a:	2b00      	cmp	r3, #0
 800981c:	d005      	beq.n	800982a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	4798      	blx	r3
  }
}
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009832:	b480      	push	{r7}
 8009834:	b083      	sub	sp, #12
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009842:	bf00      	nop
}
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800984e:	b480      	push	{r7}
 8009850:	b083      	sub	sp, #12
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800985e:	bf00      	nop
}
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2201      	movs	r2, #1
 8009876:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 ff56 	bl	800a76a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	791b      	ldrb	r3, [r3, #4]
 80098c2:	4619      	mov	r1, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fda3 	bl	800a410 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	795b      	ldrb	r3, [r3, #5]
 80098ce:	4619      	mov	r1, r3
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fd9d 	bl	800a410 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af02      	add	r7, sp, #8
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	4613      	mov	r3, r2
 80098fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098fe:	2100      	movs	r1, #0
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f864 	bl	80099ce <USBH_GetDescriptor>
 8009906:	4603      	mov	r3, r0
 8009908:	73fb      	strb	r3, [r7, #15]
 800990a:	7bfb      	ldrb	r3, [r7, #15]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10a      	bne.n	8009926 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800991c:	78fa      	ldrb	r2, [r7, #3]
 800991e:	b292      	uxth	r2, r2
 8009920:	4619      	mov	r1, r3
 8009922:	f000 f918 	bl	8009b56 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009926:	7bfb      	ldrb	r3, [r7, #15]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af02      	add	r7, sp, #8
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	331c      	adds	r3, #28
 8009940:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009942:	887b      	ldrh	r3, [r7, #2]
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800994c:	2100      	movs	r1, #0
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f83d 	bl	80099ce <USBH_GetDescriptor>
 8009954:	4603      	mov	r3, r0
 8009956:	72fb      	strb	r3, [r7, #11]
 8009958:	7afb      	ldrb	r3, [r7, #11]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d107      	bne.n	800996e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009964:	887a      	ldrh	r2, [r7, #2]
 8009966:	68f9      	ldr	r1, [r7, #12]
 8009968:	4618      	mov	r0, r3
 800996a:	f000 f964 	bl	8009c36 <USBH_ParseCfgDesc>
  }

  return status;
 800996e:	7afb      	ldrb	r3, [r7, #11]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3710      	adds	r7, #16
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b088      	sub	sp, #32
 800997c:	af02      	add	r7, sp, #8
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	607a      	str	r2, [r7, #4]
 8009982:	461a      	mov	r2, r3
 8009984:	460b      	mov	r3, r1
 8009986:	72fb      	strb	r3, [r7, #11]
 8009988:	4613      	mov	r3, r2
 800998a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800998c:	7afb      	ldrb	r3, [r7, #11]
 800998e:	b29b      	uxth	r3, r3
 8009990:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009994:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800999c:	893b      	ldrh	r3, [r7, #8]
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	460b      	mov	r3, r1
 80099a2:	2100      	movs	r1, #0
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 f812 	bl	80099ce <USBH_GetDescriptor>
 80099aa:	4603      	mov	r3, r0
 80099ac:	75fb      	strb	r3, [r7, #23]
 80099ae:	7dfb      	ldrb	r3, [r7, #23]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d107      	bne.n	80099c4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80099ba:	893a      	ldrh	r2, [r7, #8]
 80099bc:	6879      	ldr	r1, [r7, #4]
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 fa37 	bl	8009e32 <USBH_ParseStringDesc>
  }

  return status;
 80099c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3718      	adds	r7, #24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b084      	sub	sp, #16
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	60f8      	str	r0, [r7, #12]
 80099d6:	607b      	str	r3, [r7, #4]
 80099d8:	460b      	mov	r3, r1
 80099da:	72fb      	strb	r3, [r7, #11]
 80099dc:	4613      	mov	r3, r2
 80099de:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	789b      	ldrb	r3, [r3, #2]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d11c      	bne.n	8009a22 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80099e8:	7afb      	ldrb	r3, [r7, #11]
 80099ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2206      	movs	r2, #6
 80099f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	893a      	ldrh	r2, [r7, #8]
 80099fe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009a00:	893b      	ldrh	r3, [r7, #8]
 8009a02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a0a:	d104      	bne.n	8009a16 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f240 4209 	movw	r2, #1033	; 0x409
 8009a12:	829a      	strh	r2, [r3, #20]
 8009a14:	e002      	b.n	8009a1c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	8b3a      	ldrh	r2, [r7, #24]
 8009a20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009a22:	8b3b      	ldrh	r3, [r7, #24]
 8009a24:	461a      	mov	r2, r3
 8009a26:	6879      	ldr	r1, [r7, #4]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 fa50 	bl	8009ece <USBH_CtlReq>
 8009a2e:	4603      	mov	r3, r0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	460b      	mov	r3, r1
 8009a42:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	789b      	ldrb	r3, [r3, #2]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d10f      	bne.n	8009a6c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2205      	movs	r2, #5
 8009a56:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009a58:	78fb      	ldrb	r3, [r7, #3]
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2100      	movs	r1, #0
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fa2c 	bl	8009ece <USBH_CtlReq>
 8009a76:	4603      	mov	r3, r0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	789b      	ldrb	r3, [r3, #2]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d10e      	bne.n	8009ab2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2209      	movs	r2, #9
 8009a9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	887a      	ldrh	r2, [r7, #2]
 8009aa4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fa09 	bl	8009ece <USBH_CtlReq>
 8009abc:	4603      	mov	r3, r0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b082      	sub	sp, #8
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	789b      	ldrb	r3, [r3, #2]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d10f      	bne.n	8009afa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2203      	movs	r2, #3
 8009ae4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009ae6:	78fb      	ldrb	r3, [r7, #3]
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009afa:	2200      	movs	r2, #0
 8009afc:	2100      	movs	r1, #0
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f9e5 	bl	8009ece <USBH_CtlReq>
 8009b04:	4603      	mov	r3, r0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b082      	sub	sp, #8
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	460b      	mov	r3, r1
 8009b18:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	789b      	ldrb	r3, [r3, #2]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d10f      	bne.n	8009b42 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2202      	movs	r2, #2
 8009b26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009b34:	78fb      	ldrb	r3, [r7, #3]
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009b42:	2200      	movs	r2, #0
 8009b44:	2100      	movs	r1, #0
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f9c1 	bl	8009ece <USBH_CtlReq>
 8009b4c:	4603      	mov	r3, r0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009b56:	b480      	push	{r7}
 8009b58:	b085      	sub	sp, #20
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	60f8      	str	r0, [r7, #12]
 8009b5e:	60b9      	str	r1, [r7, #8]
 8009b60:	4613      	mov	r3, r2
 8009b62:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	781a      	ldrb	r2, [r3, #0]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	785a      	ldrb	r2, [r3, #1]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	3302      	adds	r3, #2
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	3303      	adds	r3, #3
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	021b      	lsls	r3, r3, #8
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	791a      	ldrb	r2, [r3, #4]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	795a      	ldrb	r2, [r3, #5]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	799a      	ldrb	r2, [r3, #6]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	79da      	ldrb	r2, [r3, #7]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009bb0:	88fb      	ldrh	r3, [r7, #6]
 8009bb2:	2b08      	cmp	r3, #8
 8009bb4:	d939      	bls.n	8009c2a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	3308      	adds	r3, #8
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	3309      	adds	r3, #9
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	021b      	lsls	r3, r3, #8
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	330a      	adds	r3, #10
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	330b      	adds	r3, #11
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	021b      	lsls	r3, r3, #8
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	4313      	orrs	r3, r2
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	330c      	adds	r3, #12
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	330d      	adds	r3, #13
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	021b      	lsls	r3, r3, #8
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	4313      	orrs	r3, r2
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	7b9a      	ldrb	r2, [r3, #14]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	7bda      	ldrb	r2, [r3, #15]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	7c1a      	ldrb	r2, [r3, #16]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	7c5a      	ldrb	r2, [r3, #17]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	745a      	strb	r2, [r3, #17]
  }
}
 8009c2a:	bf00      	nop
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b08a      	sub	sp, #40	; 0x28
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	60f8      	str	r0, [r7, #12]
 8009c3e:	60b9      	str	r1, [r7, #8]
 8009c40:	4613      	mov	r3, r2
 8009c42:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	781a      	ldrb	r2, [r3, #0]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	785a      	ldrb	r2, [r3, #1]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	3302      	adds	r3, #2
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	3303      	adds	r3, #3
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	021b      	lsls	r3, r3, #8
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	791a      	ldrb	r2, [r3, #4]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	795a      	ldrb	r2, [r3, #5]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	799a      	ldrb	r2, [r3, #6]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	79da      	ldrb	r2, [r3, #7]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	7a1a      	ldrb	r2, [r3, #8]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009cac:	88fb      	ldrh	r3, [r7, #6]
 8009cae:	2b09      	cmp	r3, #9
 8009cb0:	d95f      	bls.n	8009d72 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009cb2:	2309      	movs	r3, #9
 8009cb4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009cba:	e051      	b.n	8009d60 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009cbc:	f107 0316 	add.w	r3, r7, #22
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009cc4:	f000 f8e8 	bl	8009e98 <USBH_GetNextDesc>
 8009cc8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	785b      	ldrb	r3, [r3, #1]
 8009cce:	2b04      	cmp	r3, #4
 8009cd0:	d146      	bne.n	8009d60 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009cd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009cd6:	221a      	movs	r2, #26
 8009cd8:	fb02 f303 	mul.w	r3, r2, r3
 8009cdc:	3308      	adds	r3, #8
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	3302      	adds	r3, #2
 8009ce4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009ce6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ce8:	69f8      	ldr	r0, [r7, #28]
 8009cea:	f000 f846 	bl	8009d7a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009cf8:	e022      	b.n	8009d40 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009cfa:	f107 0316 	add.w	r3, r7, #22
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d02:	f000 f8c9 	bl	8009e98 <USBH_GetNextDesc>
 8009d06:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	785b      	ldrb	r3, [r3, #1]
 8009d0c:	2b05      	cmp	r3, #5
 8009d0e:	d117      	bne.n	8009d40 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009d10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d14:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009d18:	3201      	adds	r2, #1
 8009d1a:	00d2      	lsls	r2, r2, #3
 8009d1c:	211a      	movs	r1, #26
 8009d1e:	fb01 f303 	mul.w	r3, r1, r3
 8009d22:	4413      	add	r3, r2
 8009d24:	3308      	adds	r3, #8
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	4413      	add	r3, r2
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009d2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d30:	69b8      	ldr	r0, [r7, #24]
 8009d32:	f000 f851 	bl	8009dd8 <USBH_ParseEPDesc>
            ep_ix++;
 8009d36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	791b      	ldrb	r3, [r3, #4]
 8009d44:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d204      	bcs.n	8009d56 <USBH_ParseCfgDesc+0x120>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	885a      	ldrh	r2, [r3, #2]
 8009d50:	8afb      	ldrh	r3, [r7, #22]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d8d1      	bhi.n	8009cfa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009d56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009d60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d804      	bhi.n	8009d72 <USBH_ParseCfgDesc+0x13c>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	885a      	ldrh	r2, [r3, #2]
 8009d6c:	8afb      	ldrh	r3, [r7, #22]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d8a4      	bhi.n	8009cbc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009d72:	bf00      	nop
 8009d74:	3728      	adds	r7, #40	; 0x28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	781a      	ldrb	r2, [r3, #0]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	785a      	ldrb	r2, [r3, #1]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	789a      	ldrb	r2, [r3, #2]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	78da      	ldrb	r2, [r3, #3]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	791a      	ldrb	r2, [r3, #4]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	795a      	ldrb	r2, [r3, #5]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	799a      	ldrb	r2, [r3, #6]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	79da      	ldrb	r2, [r3, #7]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	7a1a      	ldrb	r2, [r3, #8]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	721a      	strb	r2, [r3, #8]
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	781a      	ldrb	r2, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	785a      	ldrb	r2, [r3, #1]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	789a      	ldrb	r2, [r3, #2]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	78da      	ldrb	r2, [r3, #3]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	3304      	adds	r3, #4
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	3305      	adds	r3, #5
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	021b      	lsls	r3, r3, #8
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	4313      	orrs	r3, r2
 8009e18:	b29a      	uxth	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	799a      	ldrb	r2, [r3, #6]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	719a      	strb	r2, [r3, #6]
}
 8009e26:	bf00      	nop
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b087      	sub	sp, #28
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	60f8      	str	r0, [r7, #12]
 8009e3a:	60b9      	str	r1, [r7, #8]
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	3301      	adds	r3, #1
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2b03      	cmp	r3, #3
 8009e48:	d120      	bne.n	8009e8c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	1e9a      	subs	r2, r3, #2
 8009e50:	88fb      	ldrh	r3, [r7, #6]
 8009e52:	4293      	cmp	r3, r2
 8009e54:	bf28      	it	cs
 8009e56:	4613      	movcs	r3, r2
 8009e58:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	3302      	adds	r3, #2
 8009e5e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009e60:	2300      	movs	r3, #0
 8009e62:	82fb      	strh	r3, [r7, #22]
 8009e64:	e00b      	b.n	8009e7e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009e66:	8afb      	ldrh	r3, [r7, #22]
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	781a      	ldrb	r2, [r3, #0]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	3301      	adds	r3, #1
 8009e76:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009e78:	8afb      	ldrh	r3, [r7, #22]
 8009e7a:	3302      	adds	r3, #2
 8009e7c:	82fb      	strh	r3, [r7, #22]
 8009e7e:	8afa      	ldrh	r2, [r7, #22]
 8009e80:	8abb      	ldrh	r3, [r7, #20]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d3ef      	bcc.n	8009e66 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	701a      	strb	r2, [r3, #0]
  }
}
 8009e8c:	bf00      	nop
 8009e8e:	371c      	adds	r7, #28
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	881a      	ldrh	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	4413      	add	r3, r2
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b086      	sub	sp, #24
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	60f8      	str	r0, [r7, #12]
 8009ed6:	60b9      	str	r1, [r7, #8]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009edc:	2301      	movs	r3, #1
 8009ede:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	789b      	ldrb	r3, [r3, #2]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d002      	beq.n	8009eee <USBH_CtlReq+0x20>
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d00f      	beq.n	8009f0c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009eec:	e027      	b.n	8009f3e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	88fa      	ldrh	r2, [r7, #6]
 8009ef8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2201      	movs	r2, #1
 8009efe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2202      	movs	r2, #2
 8009f04:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009f06:	2301      	movs	r3, #1
 8009f08:	75fb      	strb	r3, [r7, #23]
      break;
 8009f0a:	e018      	b.n	8009f3e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009f0c:	68f8      	ldr	r0, [r7, #12]
 8009f0e:	f000 f81b 	bl	8009f48 <USBH_HandleControl>
 8009f12:	4603      	mov	r3, r0
 8009f14:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <USBH_CtlReq+0x54>
 8009f1c:	7dfb      	ldrb	r3, [r7, #23]
 8009f1e:	2b03      	cmp	r3, #3
 8009f20:	d106      	bne.n	8009f30 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2201      	movs	r2, #1
 8009f26:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	761a      	strb	r2, [r3, #24]
      break;
 8009f2e:	e005      	b.n	8009f3c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009f30:	7dfb      	ldrb	r3, [r7, #23]
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d102      	bne.n	8009f3c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	709a      	strb	r2, [r3, #2]
      break;
 8009f3c:	bf00      	nop
  }
  return status;
 8009f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af02      	add	r7, sp, #8
 8009f4e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009f50:	2301      	movs	r3, #1
 8009f52:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f54:	2300      	movs	r3, #0
 8009f56:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	7e1b      	ldrb	r3, [r3, #24]
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	2b0a      	cmp	r3, #10
 8009f60:	f200 8156 	bhi.w	800a210 <USBH_HandleControl+0x2c8>
 8009f64:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <USBH_HandleControl+0x24>)
 8009f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6a:	bf00      	nop
 8009f6c:	08009f99 	.word	0x08009f99
 8009f70:	08009fb3 	.word	0x08009fb3
 8009f74:	0800a01d 	.word	0x0800a01d
 8009f78:	0800a043 	.word	0x0800a043
 8009f7c:	0800a07b 	.word	0x0800a07b
 8009f80:	0800a0a5 	.word	0x0800a0a5
 8009f84:	0800a0f7 	.word	0x0800a0f7
 8009f88:	0800a119 	.word	0x0800a119
 8009f8c:	0800a155 	.word	0x0800a155
 8009f90:	0800a17b 	.word	0x0800a17b
 8009f94:	0800a1b9 	.word	0x0800a1b9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f103 0110 	add.w	r1, r3, #16
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	795b      	ldrb	r3, [r3, #5]
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 f943 	bl	800a230 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2202      	movs	r2, #2
 8009fae:	761a      	strb	r2, [r3, #24]
      break;
 8009fb0:	e139      	b.n	800a226 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	795b      	ldrb	r3, [r3, #5]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fcc5 	bl	800a948 <USBH_LL_GetURBState>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009fc2:	7bbb      	ldrb	r3, [r7, #14]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d11e      	bne.n	800a006 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	7c1b      	ldrb	r3, [r3, #16]
 8009fcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009fd0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	8adb      	ldrh	r3, [r3, #22]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00a      	beq.n	8009ff0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009fda:	7b7b      	ldrb	r3, [r7, #13]
 8009fdc:	2b80      	cmp	r3, #128	; 0x80
 8009fde:	d103      	bne.n	8009fe8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2203      	movs	r2, #3
 8009fe4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009fe6:	e115      	b.n	800a214 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2205      	movs	r2, #5
 8009fec:	761a      	strb	r2, [r3, #24]
      break;
 8009fee:	e111      	b.n	800a214 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009ff0:	7b7b      	ldrb	r3, [r7, #13]
 8009ff2:	2b80      	cmp	r3, #128	; 0x80
 8009ff4:	d103      	bne.n	8009ffe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2209      	movs	r2, #9
 8009ffa:	761a      	strb	r2, [r3, #24]
      break;
 8009ffc:	e10a      	b.n	800a214 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2207      	movs	r2, #7
 800a002:	761a      	strb	r2, [r3, #24]
      break;
 800a004:	e106      	b.n	800a214 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a006:	7bbb      	ldrb	r3, [r7, #14]
 800a008:	2b04      	cmp	r3, #4
 800a00a:	d003      	beq.n	800a014 <USBH_HandleControl+0xcc>
 800a00c:	7bbb      	ldrb	r3, [r7, #14]
 800a00e:	2b02      	cmp	r3, #2
 800a010:	f040 8100 	bne.w	800a214 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	220b      	movs	r2, #11
 800a018:	761a      	strb	r2, [r3, #24]
      break;
 800a01a:	e0fb      	b.n	800a214 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a022:	b29a      	uxth	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6899      	ldr	r1, [r3, #8]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	899a      	ldrh	r2, [r3, #12]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	791b      	ldrb	r3, [r3, #4]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f93a 	bl	800a2ae <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2204      	movs	r2, #4
 800a03e:	761a      	strb	r2, [r3, #24]
      break;
 800a040:	e0f1      	b.n	800a226 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	791b      	ldrb	r3, [r3, #4]
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fc7d 	bl	800a948 <USBH_LL_GetURBState>
 800a04e:	4603      	mov	r3, r0
 800a050:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a052:	7bbb      	ldrb	r3, [r7, #14]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d102      	bne.n	800a05e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2209      	movs	r2, #9
 800a05c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a05e:	7bbb      	ldrb	r3, [r7, #14]
 800a060:	2b05      	cmp	r3, #5
 800a062:	d102      	bne.n	800a06a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a064:	2303      	movs	r3, #3
 800a066:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a068:	e0d6      	b.n	800a218 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a06a:	7bbb      	ldrb	r3, [r7, #14]
 800a06c:	2b04      	cmp	r3, #4
 800a06e:	f040 80d3 	bne.w	800a218 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	220b      	movs	r2, #11
 800a076:	761a      	strb	r2, [r3, #24]
      break;
 800a078:	e0ce      	b.n	800a218 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6899      	ldr	r1, [r3, #8]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	899a      	ldrh	r2, [r3, #12]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	795b      	ldrb	r3, [r3, #5]
 800a086:	2001      	movs	r0, #1
 800a088:	9000      	str	r0, [sp, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 f8ea 	bl	800a264 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a096:	b29a      	uxth	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2206      	movs	r2, #6
 800a0a0:	761a      	strb	r2, [r3, #24]
      break;
 800a0a2:	e0c0      	b.n	800a226 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	795b      	ldrb	r3, [r3, #5]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fc4c 	bl	800a948 <USBH_LL_GetURBState>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a0b4:	7bbb      	ldrb	r3, [r7, #14]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d103      	bne.n	800a0c2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2207      	movs	r2, #7
 800a0be:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a0c0:	e0ac      	b.n	800a21c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a0c2:	7bbb      	ldrb	r3, [r7, #14]
 800a0c4:	2b05      	cmp	r3, #5
 800a0c6:	d105      	bne.n	800a0d4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	220c      	movs	r2, #12
 800a0cc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a0d2:	e0a3      	b.n	800a21c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a0d4:	7bbb      	ldrb	r3, [r7, #14]
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d103      	bne.n	800a0e2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2205      	movs	r2, #5
 800a0de:	761a      	strb	r2, [r3, #24]
      break;
 800a0e0:	e09c      	b.n	800a21c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a0e2:	7bbb      	ldrb	r3, [r7, #14]
 800a0e4:	2b04      	cmp	r3, #4
 800a0e6:	f040 8099 	bne.w	800a21c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	220b      	movs	r2, #11
 800a0ee:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a0f0:	2302      	movs	r3, #2
 800a0f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a0f4:	e092      	b.n	800a21c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	791b      	ldrb	r3, [r3, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f8d5 	bl	800a2ae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2208      	movs	r2, #8
 800a114:	761a      	strb	r2, [r3, #24]

      break;
 800a116:	e086      	b.n	800a226 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	791b      	ldrb	r3, [r3, #4]
 800a11c:	4619      	mov	r1, r3
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fc12 	bl	800a948 <USBH_LL_GetURBState>
 800a124:	4603      	mov	r3, r0
 800a126:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a128:	7bbb      	ldrb	r3, [r7, #14]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d105      	bne.n	800a13a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	220d      	movs	r2, #13
 800a132:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a138:	e072      	b.n	800a220 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a13a:	7bbb      	ldrb	r3, [r7, #14]
 800a13c:	2b04      	cmp	r3, #4
 800a13e:	d103      	bne.n	800a148 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	220b      	movs	r2, #11
 800a144:	761a      	strb	r2, [r3, #24]
      break;
 800a146:	e06b      	b.n	800a220 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a148:	7bbb      	ldrb	r3, [r7, #14]
 800a14a:	2b05      	cmp	r3, #5
 800a14c:	d168      	bne.n	800a220 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a14e:	2303      	movs	r3, #3
 800a150:	73fb      	strb	r3, [r7, #15]
      break;
 800a152:	e065      	b.n	800a220 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	795b      	ldrb	r3, [r3, #5]
 800a158:	2201      	movs	r2, #1
 800a15a:	9200      	str	r2, [sp, #0]
 800a15c:	2200      	movs	r2, #0
 800a15e:	2100      	movs	r1, #0
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f87f 	bl	800a264 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	220a      	movs	r2, #10
 800a176:	761a      	strb	r2, [r3, #24]
      break;
 800a178:	e055      	b.n	800a226 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	795b      	ldrb	r3, [r3, #5]
 800a17e:	4619      	mov	r1, r3
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fbe1 	bl	800a948 <USBH_LL_GetURBState>
 800a186:	4603      	mov	r3, r0
 800a188:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a18a:	7bbb      	ldrb	r3, [r7, #14]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d105      	bne.n	800a19c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	220d      	movs	r2, #13
 800a198:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a19a:	e043      	b.n	800a224 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a19c:	7bbb      	ldrb	r3, [r7, #14]
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d103      	bne.n	800a1aa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2209      	movs	r2, #9
 800a1a6:	761a      	strb	r2, [r3, #24]
      break;
 800a1a8:	e03c      	b.n	800a224 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a1aa:	7bbb      	ldrb	r3, [r7, #14]
 800a1ac:	2b04      	cmp	r3, #4
 800a1ae:	d139      	bne.n	800a224 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	220b      	movs	r2, #11
 800a1b4:	761a      	strb	r2, [r3, #24]
      break;
 800a1b6:	e035      	b.n	800a224 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	7e5b      	ldrb	r3, [r3, #25]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	765a      	strb	r2, [r3, #25]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	7e5b      	ldrb	r3, [r3, #25]
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d806      	bhi.n	800a1da <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a1d8:	e025      	b.n	800a226 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1e0:	2106      	movs	r1, #6
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	795b      	ldrb	r3, [r3, #5]
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f90c 	bl	800a410 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	791b      	ldrb	r3, [r3, #4]
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f906 	bl	800a410 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a20a:	2302      	movs	r3, #2
 800a20c:	73fb      	strb	r3, [r7, #15]
      break;
 800a20e:	e00a      	b.n	800a226 <USBH_HandleControl+0x2de>

    default:
      break;
 800a210:	bf00      	nop
 800a212:	e008      	b.n	800a226 <USBH_HandleControl+0x2de>
      break;
 800a214:	bf00      	nop
 800a216:	e006      	b.n	800a226 <USBH_HandleControl+0x2de>
      break;
 800a218:	bf00      	nop
 800a21a:	e004      	b.n	800a226 <USBH_HandleControl+0x2de>
      break;
 800a21c:	bf00      	nop
 800a21e:	e002      	b.n	800a226 <USBH_HandleControl+0x2de>
      break;
 800a220:	bf00      	nop
 800a222:	e000      	b.n	800a226 <USBH_HandleControl+0x2de>
      break;
 800a224:	bf00      	nop
  }

  return status;
 800a226:	7bfb      	ldrb	r3, [r7, #15]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b088      	sub	sp, #32
 800a234:	af04      	add	r7, sp, #16
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	4613      	mov	r3, r2
 800a23c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a23e:	79f9      	ldrb	r1, [r7, #7]
 800a240:	2300      	movs	r3, #0
 800a242:	9303      	str	r3, [sp, #12]
 800a244:	2308      	movs	r3, #8
 800a246:	9302      	str	r3, [sp, #8]
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	9301      	str	r3, [sp, #4]
 800a24c:	2300      	movs	r3, #0
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	2300      	movs	r3, #0
 800a252:	2200      	movs	r2, #0
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f000 fb46 	bl	800a8e6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b088      	sub	sp, #32
 800a268:	af04      	add	r7, sp, #16
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	4611      	mov	r1, r2
 800a270:	461a      	mov	r2, r3
 800a272:	460b      	mov	r3, r1
 800a274:	80fb      	strh	r3, [r7, #6]
 800a276:	4613      	mov	r3, r2
 800a278:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a280:	2b00      	cmp	r3, #0
 800a282:	d001      	beq.n	800a288 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a284:	2300      	movs	r3, #0
 800a286:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a288:	7979      	ldrb	r1, [r7, #5]
 800a28a:	7e3b      	ldrb	r3, [r7, #24]
 800a28c:	9303      	str	r3, [sp, #12]
 800a28e:	88fb      	ldrh	r3, [r7, #6]
 800a290:	9302      	str	r3, [sp, #8]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	2301      	movs	r3, #1
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	2300      	movs	r3, #0
 800a29c:	2200      	movs	r2, #0
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f000 fb21 	bl	800a8e6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3710      	adds	r7, #16
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b088      	sub	sp, #32
 800a2b2:	af04      	add	r7, sp, #16
 800a2b4:	60f8      	str	r0, [r7, #12]
 800a2b6:	60b9      	str	r1, [r7, #8]
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	460b      	mov	r3, r1
 800a2be:	80fb      	strh	r3, [r7, #6]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a2c4:	7979      	ldrb	r1, [r7, #5]
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	9303      	str	r3, [sp, #12]
 800a2ca:	88fb      	ldrh	r3, [r7, #6]
 800a2cc:	9302      	str	r3, [sp, #8]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	9301      	str	r3, [sp, #4]
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	2201      	movs	r2, #1
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f000 fb03 	bl	800a8e6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a2e0:	2300      	movs	r3, #0

}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b088      	sub	sp, #32
 800a2ee:	af04      	add	r7, sp, #16
 800a2f0:	60f8      	str	r0, [r7, #12]
 800a2f2:	60b9      	str	r1, [r7, #8]
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	80fb      	strh	r3, [r7, #6]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a306:	2b00      	cmp	r3, #0
 800a308:	d001      	beq.n	800a30e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a30a:	2300      	movs	r3, #0
 800a30c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a30e:	7979      	ldrb	r1, [r7, #5]
 800a310:	7e3b      	ldrb	r3, [r7, #24]
 800a312:	9303      	str	r3, [sp, #12]
 800a314:	88fb      	ldrh	r3, [r7, #6]
 800a316:	9302      	str	r3, [sp, #8]
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	9301      	str	r3, [sp, #4]
 800a31c:	2301      	movs	r3, #1
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	2302      	movs	r3, #2
 800a322:	2200      	movs	r2, #0
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 fade 	bl	800a8e6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b088      	sub	sp, #32
 800a338:	af04      	add	r7, sp, #16
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	4611      	mov	r1, r2
 800a340:	461a      	mov	r2, r3
 800a342:	460b      	mov	r3, r1
 800a344:	80fb      	strh	r3, [r7, #6]
 800a346:	4613      	mov	r3, r2
 800a348:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a34a:	7979      	ldrb	r1, [r7, #5]
 800a34c:	2300      	movs	r3, #0
 800a34e:	9303      	str	r3, [sp, #12]
 800a350:	88fb      	ldrh	r3, [r7, #6]
 800a352:	9302      	str	r3, [sp, #8]
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	9301      	str	r3, [sp, #4]
 800a358:	2301      	movs	r3, #1
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	2302      	movs	r3, #2
 800a35e:	2201      	movs	r2, #1
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f000 fac0 	bl	800a8e6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af04      	add	r7, sp, #16
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	4608      	mov	r0, r1
 800a37a:	4611      	mov	r1, r2
 800a37c:	461a      	mov	r2, r3
 800a37e:	4603      	mov	r3, r0
 800a380:	70fb      	strb	r3, [r7, #3]
 800a382:	460b      	mov	r3, r1
 800a384:	70bb      	strb	r3, [r7, #2]
 800a386:	4613      	mov	r3, r2
 800a388:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a38a:	7878      	ldrb	r0, [r7, #1]
 800a38c:	78ba      	ldrb	r2, [r7, #2]
 800a38e:	78f9      	ldrb	r1, [r7, #3]
 800a390:	8b3b      	ldrh	r3, [r7, #24]
 800a392:	9302      	str	r3, [sp, #8]
 800a394:	7d3b      	ldrb	r3, [r7, #20]
 800a396:	9301      	str	r3, [sp, #4]
 800a398:	7c3b      	ldrb	r3, [r7, #16]
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	4603      	mov	r3, r0
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fa53 	bl	800a84a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b082      	sub	sp, #8
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a3ba:	78fb      	ldrb	r3, [r7, #3]
 800a3bc:	4619      	mov	r1, r3
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 fa72 	bl	800a8a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f836 	bl	800a44c <USBH_GetFreePipe>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a3e4:	89fb      	ldrh	r3, [r7, #14]
 800a3e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d00a      	beq.n	800a404 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a3ee:	78fa      	ldrb	r2, [r7, #3]
 800a3f0:	89fb      	ldrh	r3, [r7, #14]
 800a3f2:	f003 030f 	and.w	r3, r3, #15
 800a3f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3fa:	6879      	ldr	r1, [r7, #4]
 800a3fc:	33e0      	adds	r3, #224	; 0xe0
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	440b      	add	r3, r1
 800a402:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a404:	89fb      	ldrh	r3, [r7, #14]
 800a406:	b2db      	uxtb	r3, r3
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a41c:	78fb      	ldrb	r3, [r7, #3]
 800a41e:	2b0a      	cmp	r3, #10
 800a420:	d80d      	bhi.n	800a43e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a422:	78fb      	ldrb	r3, [r7, #3]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	33e0      	adds	r3, #224	; 0xe0
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	685a      	ldr	r2, [r3, #4]
 800a42e:	78fb      	ldrb	r3, [r7, #3]
 800a430:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a434:	6879      	ldr	r1, [r7, #4]
 800a436:	33e0      	adds	r3, #224	; 0xe0
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	440b      	add	r3, r1
 800a43c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a454:	2300      	movs	r3, #0
 800a456:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a458:	2300      	movs	r3, #0
 800a45a:	73fb      	strb	r3, [r7, #15]
 800a45c:	e00f      	b.n	800a47e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	33e0      	adds	r3, #224	; 0xe0
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d102      	bne.n	800a478 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a472:	7bfb      	ldrb	r3, [r7, #15]
 800a474:	b29b      	uxth	r3, r3
 800a476:	e007      	b.n	800a488 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a478:	7bfb      	ldrb	r3, [r7, #15]
 800a47a:	3301      	adds	r3, #1
 800a47c:	73fb      	strb	r3, [r7, #15]
 800a47e:	7bfb      	ldrb	r3, [r7, #15]
 800a480:	2b0a      	cmp	r3, #10
 800a482:	d9ec      	bls.n	800a45e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a484:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a498:	2201      	movs	r2, #1
 800a49a:	490e      	ldr	r1, [pc, #56]	; (800a4d4 <MX_USB_HOST_Init+0x40>)
 800a49c:	480e      	ldr	r0, [pc, #56]	; (800a4d8 <MX_USB_HOST_Init+0x44>)
 800a49e:	f7fe fca1 	bl	8008de4 <USBH_Init>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d001      	beq.n	800a4ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a4a8:	f7f7 fd84 	bl	8001fb4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a4ac:	490b      	ldr	r1, [pc, #44]	; (800a4dc <MX_USB_HOST_Init+0x48>)
 800a4ae:	480a      	ldr	r0, [pc, #40]	; (800a4d8 <MX_USB_HOST_Init+0x44>)
 800a4b0:	f7fe fd26 	bl	8008f00 <USBH_RegisterClass>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a4ba:	f7f7 fd7b 	bl	8001fb4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a4be:	4806      	ldr	r0, [pc, #24]	; (800a4d8 <MX_USB_HOST_Init+0x44>)
 800a4c0:	f7fe fdaa 	bl	8009018 <USBH_Start>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a4ca:	f7f7 fd73 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a4ce:	bf00      	nop
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	0800a4f5 	.word	0x0800a4f5
 800a4d8:	20000334 	.word	0x20000334
 800a4dc:	20000018 	.word	0x20000018

0800a4e0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a4e4:	4802      	ldr	r0, [pc, #8]	; (800a4f0 <MX_USB_HOST_Process+0x10>)
 800a4e6:	f7fe fda7 	bl	8009038 <USBH_Process>
}
 800a4ea:	bf00      	nop
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	20000334 	.word	0x20000334

0800a4f4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a500:	78fb      	ldrb	r3, [r7, #3]
 800a502:	3b01      	subs	r3, #1
 800a504:	2b04      	cmp	r3, #4
 800a506:	d819      	bhi.n	800a53c <USBH_UserProcess+0x48>
 800a508:	a201      	add	r2, pc, #4	; (adr r2, 800a510 <USBH_UserProcess+0x1c>)
 800a50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50e:	bf00      	nop
 800a510:	0800a53d 	.word	0x0800a53d
 800a514:	0800a52d 	.word	0x0800a52d
 800a518:	0800a53d 	.word	0x0800a53d
 800a51c:	0800a535 	.word	0x0800a535
 800a520:	0800a525 	.word	0x0800a525
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a524:	4b09      	ldr	r3, [pc, #36]	; (800a54c <USBH_UserProcess+0x58>)
 800a526:	2203      	movs	r2, #3
 800a528:	701a      	strb	r2, [r3, #0]
  break;
 800a52a:	e008      	b.n	800a53e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a52c:	4b07      	ldr	r3, [pc, #28]	; (800a54c <USBH_UserProcess+0x58>)
 800a52e:	2202      	movs	r2, #2
 800a530:	701a      	strb	r2, [r3, #0]
  break;
 800a532:	e004      	b.n	800a53e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a534:	4b05      	ldr	r3, [pc, #20]	; (800a54c <USBH_UserProcess+0x58>)
 800a536:	2201      	movs	r2, #1
 800a538:	701a      	strb	r2, [r3, #0]
  break;
 800a53a:	e000      	b.n	800a53e <USBH_UserProcess+0x4a>

  default:
  break;
 800a53c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a53e:	bf00      	nop
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	200000c8 	.word	0x200000c8

0800a550 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b08a      	sub	sp, #40	; 0x28
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a558:	f107 0314 	add.w	r3, r7, #20
 800a55c:	2200      	movs	r2, #0
 800a55e:	601a      	str	r2, [r3, #0]
 800a560:	605a      	str	r2, [r3, #4]
 800a562:	609a      	str	r2, [r3, #8]
 800a564:	60da      	str	r2, [r3, #12]
 800a566:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a570:	d147      	bne.n	800a602 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a572:	2300      	movs	r3, #0
 800a574:	613b      	str	r3, [r7, #16]
 800a576:	4b25      	ldr	r3, [pc, #148]	; (800a60c <HAL_HCD_MspInit+0xbc>)
 800a578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a57a:	4a24      	ldr	r2, [pc, #144]	; (800a60c <HAL_HCD_MspInit+0xbc>)
 800a57c:	f043 0301 	orr.w	r3, r3, #1
 800a580:	6313      	str	r3, [r2, #48]	; 0x30
 800a582:	4b22      	ldr	r3, [pc, #136]	; (800a60c <HAL_HCD_MspInit+0xbc>)
 800a584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	613b      	str	r3, [r7, #16]
 800a58c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a58e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a594:	2300      	movs	r3, #0
 800a596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a598:	2300      	movs	r3, #0
 800a59a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a59c:	f107 0314 	add.w	r3, r7, #20
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	481b      	ldr	r0, [pc, #108]	; (800a610 <HAL_HCD_MspInit+0xc0>)
 800a5a4:	f7f8 f9fe 	bl	80029a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a5a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a5ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5ae:	2302      	movs	r3, #2
 800a5b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a5ba:	230a      	movs	r3, #10
 800a5bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5be:	f107 0314 	add.w	r3, r7, #20
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	4812      	ldr	r0, [pc, #72]	; (800a610 <HAL_HCD_MspInit+0xc0>)
 800a5c6:	f7f8 f9ed 	bl	80029a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a5ca:	4b10      	ldr	r3, [pc, #64]	; (800a60c <HAL_HCD_MspInit+0xbc>)
 800a5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ce:	4a0f      	ldr	r2, [pc, #60]	; (800a60c <HAL_HCD_MspInit+0xbc>)
 800a5d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5d4:	6353      	str	r3, [r2, #52]	; 0x34
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	60fb      	str	r3, [r7, #12]
 800a5da:	4b0c      	ldr	r3, [pc, #48]	; (800a60c <HAL_HCD_MspInit+0xbc>)
 800a5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5de:	4a0b      	ldr	r2, [pc, #44]	; (800a60c <HAL_HCD_MspInit+0xbc>)
 800a5e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5e4:	6453      	str	r3, [r2, #68]	; 0x44
 800a5e6:	4b09      	ldr	r3, [pc, #36]	; (800a60c <HAL_HCD_MspInit+0xbc>)
 800a5e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	2043      	movs	r0, #67	; 0x43
 800a5f8:	f7f8 f99d 	bl	8002936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a5fc:	2043      	movs	r0, #67	; 0x43
 800a5fe:	f7f8 f9b6 	bl	800296e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a602:	bf00      	nop
 800a604:	3728      	adds	r7, #40	; 0x28
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	40023800 	.word	0x40023800
 800a610:	40020000 	.word	0x40020000

0800a614 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a622:	4618      	mov	r0, r3
 800a624:	f7ff f8db 	bl	80097de <USBH_LL_IncTimer>
}
 800a628:	bf00      	nop
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a63e:	4618      	mov	r0, r3
 800a640:	f7ff f913 	bl	800986a <USBH_LL_Connect>
}
 800a644:	bf00      	nop
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7ff f91c 	bl	8009898 <USBH_LL_Disconnect>
}
 800a660:	bf00      	nop
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	460b      	mov	r3, r1
 800a672:	70fb      	strb	r3, [r7, #3]
 800a674:	4613      	mov	r3, r2
 800a676:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a678:	bf00      	nop
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a692:	4618      	mov	r0, r3
 800a694:	f7ff f8cd 	bl	8009832 <USBH_LL_PortEnabled>
}
 800a698:	bf00      	nop
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7ff f8cd 	bl	800984e <USBH_LL_PortDisabled>
}
 800a6b4:	bf00      	nop
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d12a      	bne.n	800a724 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a6ce:	4a18      	ldr	r2, [pc, #96]	; (800a730 <USBH_LL_Init+0x74>)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4a15      	ldr	r2, [pc, #84]	; (800a730 <USBH_LL_Init+0x74>)
 800a6da:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a6de:	4b14      	ldr	r3, [pc, #80]	; (800a730 <USBH_LL_Init+0x74>)
 800a6e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a6e4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a6e6:	4b12      	ldr	r3, [pc, #72]	; (800a730 <USBH_LL_Init+0x74>)
 800a6e8:	2208      	movs	r2, #8
 800a6ea:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a6ec:	4b10      	ldr	r3, [pc, #64]	; (800a730 <USBH_LL_Init+0x74>)
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a6f2:	4b0f      	ldr	r3, [pc, #60]	; (800a730 <USBH_LL_Init+0x74>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a6f8:	4b0d      	ldr	r3, [pc, #52]	; (800a730 <USBH_LL_Init+0x74>)
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a6fe:	4b0c      	ldr	r3, [pc, #48]	; (800a730 <USBH_LL_Init+0x74>)
 800a700:	2200      	movs	r2, #0
 800a702:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a704:	480a      	ldr	r0, [pc, #40]	; (800a730 <USBH_LL_Init+0x74>)
 800a706:	f7f8 fb34 	bl	8002d72 <HAL_HCD_Init>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d001      	beq.n	800a714 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a710:	f7f7 fc50 	bl	8001fb4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a714:	4806      	ldr	r0, [pc, #24]	; (800a730 <USBH_LL_Init+0x74>)
 800a716:	f7f8 ff11 	bl	800353c <HAL_HCD_GetCurrentFrame>
 800a71a:	4603      	mov	r3, r0
 800a71c:	4619      	mov	r1, r3
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7ff f84e 	bl	80097c0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	2000070c 	.word	0x2000070c

0800a734 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7f8 fe80 	bl	8003450 <HAL_HCD_Start>
 800a750:	4603      	mov	r3, r0
 800a752:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a754:	7bfb      	ldrb	r3, [r7, #15]
 800a756:	4618      	mov	r0, r3
 800a758:	f000 f95c 	bl	800aa14 <USBH_Get_USB_Status>
 800a75c:	4603      	mov	r3, r0
 800a75e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a760:	7bbb      	ldrb	r3, [r7, #14]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b084      	sub	sp, #16
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a772:	2300      	movs	r3, #0
 800a774:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a780:	4618      	mov	r0, r3
 800a782:	f7f8 fe88 	bl	8003496 <HAL_HCD_Stop>
 800a786:	4603      	mov	r3, r0
 800a788:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f000 f941 	bl	800aa14 <USBH_Get_USB_Status>
 800a792:	4603      	mov	r3, r0
 800a794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a796:	7bbb      	ldrb	r3, [r7, #14]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7f8 fed0 	bl	8003558 <HAL_HCD_GetCurrentSpeed>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d00c      	beq.n	800a7d8 <USBH_LL_GetSpeed+0x38>
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d80d      	bhi.n	800a7de <USBH_LL_GetSpeed+0x3e>
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d002      	beq.n	800a7cc <USBH_LL_GetSpeed+0x2c>
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d003      	beq.n	800a7d2 <USBH_LL_GetSpeed+0x32>
 800a7ca:	e008      	b.n	800a7de <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a7d0:	e008      	b.n	800a7e4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a7d6:	e005      	b.n	800a7e4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a7d8:	2302      	movs	r3, #2
 800a7da:	73fb      	strb	r3, [r7, #15]
    break;
 800a7dc:	e002      	b.n	800a7e4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a7e2:	bf00      	nop
  }
  return  speed;
 800a7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a804:	4618      	mov	r0, r3
 800a806:	f7f8 fe63 	bl	80034d0 <HAL_HCD_ResetPort>
 800a80a:	4603      	mov	r3, r0
 800a80c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a80e:	7bfb      	ldrb	r3, [r7, #15]
 800a810:	4618      	mov	r0, r3
 800a812:	f000 f8ff 	bl	800aa14 <USBH_Get_USB_Status>
 800a816:	4603      	mov	r3, r0
 800a818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a81a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	460b      	mov	r3, r1
 800a82e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a836:	78fa      	ldrb	r2, [r7, #3]
 800a838:	4611      	mov	r1, r2
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7f8 fe6a 	bl	8003514 <HAL_HCD_HC_GetXferCount>
 800a840:	4603      	mov	r3, r0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3708      	adds	r7, #8
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a84a:	b590      	push	{r4, r7, lr}
 800a84c:	b089      	sub	sp, #36	; 0x24
 800a84e:	af04      	add	r7, sp, #16
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	4608      	mov	r0, r1
 800a854:	4611      	mov	r1, r2
 800a856:	461a      	mov	r2, r3
 800a858:	4603      	mov	r3, r0
 800a85a:	70fb      	strb	r3, [r7, #3]
 800a85c:	460b      	mov	r3, r1
 800a85e:	70bb      	strb	r3, [r7, #2]
 800a860:	4613      	mov	r3, r2
 800a862:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a868:	2300      	movs	r3, #0
 800a86a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a872:	787c      	ldrb	r4, [r7, #1]
 800a874:	78ba      	ldrb	r2, [r7, #2]
 800a876:	78f9      	ldrb	r1, [r7, #3]
 800a878:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a87a:	9302      	str	r3, [sp, #8]
 800a87c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a880:	9301      	str	r3, [sp, #4]
 800a882:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	4623      	mov	r3, r4
 800a88a:	f7f8 fad4 	bl	8002e36 <HAL_HCD_HC_Init>
 800a88e:	4603      	mov	r3, r0
 800a890:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a892:	7bfb      	ldrb	r3, [r7, #15]
 800a894:	4618      	mov	r0, r3
 800a896:	f000 f8bd 	bl	800aa14 <USBH_Get_USB_Status>
 800a89a:	4603      	mov	r3, r0
 800a89c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a89e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3714      	adds	r7, #20
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd90      	pop	{r4, r7, pc}

0800a8a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a8c2:	78fa      	ldrb	r2, [r7, #3]
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7f8 fb44 	bl	8002f54 <HAL_HCD_HC_Halt>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f000 f89e 	bl	800aa14 <USBH_Get_USB_Status>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a8e6:	b590      	push	{r4, r7, lr}
 800a8e8:	b089      	sub	sp, #36	; 0x24
 800a8ea:	af04      	add	r7, sp, #16
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	4608      	mov	r0, r1
 800a8f0:	4611      	mov	r1, r2
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	70fb      	strb	r3, [r7, #3]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	70bb      	strb	r3, [r7, #2]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a900:	2300      	movs	r3, #0
 800a902:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a904:	2300      	movs	r3, #0
 800a906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a90e:	787c      	ldrb	r4, [r7, #1]
 800a910:	78ba      	ldrb	r2, [r7, #2]
 800a912:	78f9      	ldrb	r1, [r7, #3]
 800a914:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a918:	9303      	str	r3, [sp, #12]
 800a91a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a91c:	9302      	str	r3, [sp, #8]
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	9301      	str	r3, [sp, #4]
 800a922:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	4623      	mov	r3, r4
 800a92a:	f7f8 fb37 	bl	8002f9c <HAL_HCD_HC_SubmitRequest>
 800a92e:	4603      	mov	r3, r0
 800a930:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a932:	7bfb      	ldrb	r3, [r7, #15]
 800a934:	4618      	mov	r0, r3
 800a936:	f000 f86d 	bl	800aa14 <USBH_Get_USB_Status>
 800a93a:	4603      	mov	r3, r0
 800a93c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a93e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	bd90      	pop	{r4, r7, pc}

0800a948 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	460b      	mov	r3, r1
 800a952:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a95a:	78fa      	ldrb	r2, [r7, #3]
 800a95c:	4611      	mov	r1, r2
 800a95e:	4618      	mov	r0, r3
 800a960:	f7f8 fdc4 	bl	80034ec <HAL_HCD_HC_GetURBState>
 800a964:	4603      	mov	r3, r0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b082      	sub	sp, #8
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	460b      	mov	r3, r1
 800a978:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a980:	2b01      	cmp	r3, #1
 800a982:	d103      	bne.n	800a98c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a984:	78fb      	ldrb	r3, [r7, #3]
 800a986:	4618      	mov	r0, r3
 800a988:	f000 f870 	bl	800aa6c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a98c:	20c8      	movs	r0, #200	; 0xc8
 800a98e:	f7f7 fed3 	bl	8002738 <HAL_Delay>
  return USBH_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	70fb      	strb	r3, [r7, #3]
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a9b2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a9b4:	78fb      	ldrb	r3, [r7, #3]
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	212c      	movs	r1, #44	; 0x2c
 800a9ba:	fb01 f303 	mul.w	r3, r1, r3
 800a9be:	4413      	add	r3, r2
 800a9c0:	333b      	adds	r3, #59	; 0x3b
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d009      	beq.n	800a9dc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a9c8:	78fb      	ldrb	r3, [r7, #3]
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	212c      	movs	r1, #44	; 0x2c
 800a9ce:	fb01 f303 	mul.w	r3, r1, r3
 800a9d2:	4413      	add	r3, r2
 800a9d4:	3354      	adds	r3, #84	; 0x54
 800a9d6:	78ba      	ldrb	r2, [r7, #2]
 800a9d8:	701a      	strb	r2, [r3, #0]
 800a9da:	e008      	b.n	800a9ee <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a9dc:	78fb      	ldrb	r3, [r7, #3]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	212c      	movs	r1, #44	; 0x2c
 800a9e2:	fb01 f303 	mul.w	r3, r1, r3
 800a9e6:	4413      	add	r3, r2
 800a9e8:	3355      	adds	r3, #85	; 0x55
 800a9ea:	78ba      	ldrb	r2, [r7, #2]
 800a9ec:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3714      	adds	r7, #20
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7f7 fe97 	bl	8002738 <HAL_Delay>
}
 800aa0a:	bf00      	nop
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
	...

0800aa14 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa22:	79fb      	ldrb	r3, [r7, #7]
 800aa24:	2b03      	cmp	r3, #3
 800aa26:	d817      	bhi.n	800aa58 <USBH_Get_USB_Status+0x44>
 800aa28:	a201      	add	r2, pc, #4	; (adr r2, 800aa30 <USBH_Get_USB_Status+0x1c>)
 800aa2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2e:	bf00      	nop
 800aa30:	0800aa41 	.word	0x0800aa41
 800aa34:	0800aa47 	.word	0x0800aa47
 800aa38:	0800aa4d 	.word	0x0800aa4d
 800aa3c:	0800aa53 	.word	0x0800aa53
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800aa40:	2300      	movs	r3, #0
 800aa42:	73fb      	strb	r3, [r7, #15]
    break;
 800aa44:	e00b      	b.n	800aa5e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800aa46:	2302      	movs	r3, #2
 800aa48:	73fb      	strb	r3, [r7, #15]
    break;
 800aa4a:	e008      	b.n	800aa5e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	73fb      	strb	r3, [r7, #15]
    break;
 800aa50:	e005      	b.n	800aa5e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800aa52:	2302      	movs	r3, #2
 800aa54:	73fb      	strb	r3, [r7, #15]
    break;
 800aa56:	e002      	b.n	800aa5e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800aa58:	2302      	movs	r3, #2
 800aa5a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa5c:	bf00      	nop
  }
  return usb_status;
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	4603      	mov	r3, r0
 800aa74:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800aa76:	79fb      	ldrb	r3, [r7, #7]
 800aa78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800aa7a:	79fb      	ldrb	r3, [r7, #7]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d102      	bne.n	800aa86 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800aa80:	2301      	movs	r3, #1
 800aa82:	73fb      	strb	r3, [r7, #15]
 800aa84:	e001      	b.n	800aa8a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800aa86:	2300      	movs	r3, #0
 800aa88:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800aa8a:	7bfb      	ldrb	r3, [r7, #15]
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	2101      	movs	r1, #1
 800aa90:	4803      	ldr	r0, [pc, #12]	; (800aaa0 <MX_DriverVbusFS+0x34>)
 800aa92:	f7f8 f93b 	bl	8002d0c <HAL_GPIO_WritePin>
}
 800aa96:	bf00      	nop
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	40020800 	.word	0x40020800

0800aaa4 <__errno>:
 800aaa4:	4b01      	ldr	r3, [pc, #4]	; (800aaac <__errno+0x8>)
 800aaa6:	6818      	ldr	r0, [r3, #0]
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	20000038 	.word	0x20000038

0800aab0 <__libc_init_array>:
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	4d0d      	ldr	r5, [pc, #52]	; (800aae8 <__libc_init_array+0x38>)
 800aab4:	4c0d      	ldr	r4, [pc, #52]	; (800aaec <__libc_init_array+0x3c>)
 800aab6:	1b64      	subs	r4, r4, r5
 800aab8:	10a4      	asrs	r4, r4, #2
 800aaba:	2600      	movs	r6, #0
 800aabc:	42a6      	cmp	r6, r4
 800aabe:	d109      	bne.n	800aad4 <__libc_init_array+0x24>
 800aac0:	4d0b      	ldr	r5, [pc, #44]	; (800aaf0 <__libc_init_array+0x40>)
 800aac2:	4c0c      	ldr	r4, [pc, #48]	; (800aaf4 <__libc_init_array+0x44>)
 800aac4:	f000 f90c 	bl	800ace0 <_init>
 800aac8:	1b64      	subs	r4, r4, r5
 800aaca:	10a4      	asrs	r4, r4, #2
 800aacc:	2600      	movs	r6, #0
 800aace:	42a6      	cmp	r6, r4
 800aad0:	d105      	bne.n	800aade <__libc_init_array+0x2e>
 800aad2:	bd70      	pop	{r4, r5, r6, pc}
 800aad4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aad8:	4798      	blx	r3
 800aada:	3601      	adds	r6, #1
 800aadc:	e7ee      	b.n	800aabc <__libc_init_array+0xc>
 800aade:	f855 3b04 	ldr.w	r3, [r5], #4
 800aae2:	4798      	blx	r3
 800aae4:	3601      	adds	r6, #1
 800aae6:	e7f2      	b.n	800aace <__libc_init_array+0x1e>
 800aae8:	0800b138 	.word	0x0800b138
 800aaec:	0800b138 	.word	0x0800b138
 800aaf0:	0800b138 	.word	0x0800b138
 800aaf4:	0800b13c 	.word	0x0800b13c

0800aaf8 <malloc>:
 800aaf8:	4b02      	ldr	r3, [pc, #8]	; (800ab04 <malloc+0xc>)
 800aafa:	4601      	mov	r1, r0
 800aafc:	6818      	ldr	r0, [r3, #0]
 800aafe:	f000 b863 	b.w	800abc8 <_malloc_r>
 800ab02:	bf00      	nop
 800ab04:	20000038 	.word	0x20000038

0800ab08 <free>:
 800ab08:	4b02      	ldr	r3, [pc, #8]	; (800ab14 <free+0xc>)
 800ab0a:	4601      	mov	r1, r0
 800ab0c:	6818      	ldr	r0, [r3, #0]
 800ab0e:	f000 b80b 	b.w	800ab28 <_free_r>
 800ab12:	bf00      	nop
 800ab14:	20000038 	.word	0x20000038

0800ab18 <memset>:
 800ab18:	4402      	add	r2, r0
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d100      	bne.n	800ab22 <memset+0xa>
 800ab20:	4770      	bx	lr
 800ab22:	f803 1b01 	strb.w	r1, [r3], #1
 800ab26:	e7f9      	b.n	800ab1c <memset+0x4>

0800ab28 <_free_r>:
 800ab28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab2a:	2900      	cmp	r1, #0
 800ab2c:	d048      	beq.n	800abc0 <_free_r+0x98>
 800ab2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab32:	9001      	str	r0, [sp, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f1a1 0404 	sub.w	r4, r1, #4
 800ab3a:	bfb8      	it	lt
 800ab3c:	18e4      	addlt	r4, r4, r3
 800ab3e:	f000 f8c1 	bl	800acc4 <__malloc_lock>
 800ab42:	4a20      	ldr	r2, [pc, #128]	; (800abc4 <_free_r+0x9c>)
 800ab44:	9801      	ldr	r0, [sp, #4]
 800ab46:	6813      	ldr	r3, [r2, #0]
 800ab48:	4615      	mov	r5, r2
 800ab4a:	b933      	cbnz	r3, 800ab5a <_free_r+0x32>
 800ab4c:	6063      	str	r3, [r4, #4]
 800ab4e:	6014      	str	r4, [r2, #0]
 800ab50:	b003      	add	sp, #12
 800ab52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab56:	f000 b8bb 	b.w	800acd0 <__malloc_unlock>
 800ab5a:	42a3      	cmp	r3, r4
 800ab5c:	d90b      	bls.n	800ab76 <_free_r+0x4e>
 800ab5e:	6821      	ldr	r1, [r4, #0]
 800ab60:	1862      	adds	r2, r4, r1
 800ab62:	4293      	cmp	r3, r2
 800ab64:	bf04      	itt	eq
 800ab66:	681a      	ldreq	r2, [r3, #0]
 800ab68:	685b      	ldreq	r3, [r3, #4]
 800ab6a:	6063      	str	r3, [r4, #4]
 800ab6c:	bf04      	itt	eq
 800ab6e:	1852      	addeq	r2, r2, r1
 800ab70:	6022      	streq	r2, [r4, #0]
 800ab72:	602c      	str	r4, [r5, #0]
 800ab74:	e7ec      	b.n	800ab50 <_free_r+0x28>
 800ab76:	461a      	mov	r2, r3
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	b10b      	cbz	r3, 800ab80 <_free_r+0x58>
 800ab7c:	42a3      	cmp	r3, r4
 800ab7e:	d9fa      	bls.n	800ab76 <_free_r+0x4e>
 800ab80:	6811      	ldr	r1, [r2, #0]
 800ab82:	1855      	adds	r5, r2, r1
 800ab84:	42a5      	cmp	r5, r4
 800ab86:	d10b      	bne.n	800aba0 <_free_r+0x78>
 800ab88:	6824      	ldr	r4, [r4, #0]
 800ab8a:	4421      	add	r1, r4
 800ab8c:	1854      	adds	r4, r2, r1
 800ab8e:	42a3      	cmp	r3, r4
 800ab90:	6011      	str	r1, [r2, #0]
 800ab92:	d1dd      	bne.n	800ab50 <_free_r+0x28>
 800ab94:	681c      	ldr	r4, [r3, #0]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	6053      	str	r3, [r2, #4]
 800ab9a:	4421      	add	r1, r4
 800ab9c:	6011      	str	r1, [r2, #0]
 800ab9e:	e7d7      	b.n	800ab50 <_free_r+0x28>
 800aba0:	d902      	bls.n	800aba8 <_free_r+0x80>
 800aba2:	230c      	movs	r3, #12
 800aba4:	6003      	str	r3, [r0, #0]
 800aba6:	e7d3      	b.n	800ab50 <_free_r+0x28>
 800aba8:	6825      	ldr	r5, [r4, #0]
 800abaa:	1961      	adds	r1, r4, r5
 800abac:	428b      	cmp	r3, r1
 800abae:	bf04      	itt	eq
 800abb0:	6819      	ldreq	r1, [r3, #0]
 800abb2:	685b      	ldreq	r3, [r3, #4]
 800abb4:	6063      	str	r3, [r4, #4]
 800abb6:	bf04      	itt	eq
 800abb8:	1949      	addeq	r1, r1, r5
 800abba:	6021      	streq	r1, [r4, #0]
 800abbc:	6054      	str	r4, [r2, #4]
 800abbe:	e7c7      	b.n	800ab50 <_free_r+0x28>
 800abc0:	b003      	add	sp, #12
 800abc2:	bd30      	pop	{r4, r5, pc}
 800abc4:	200000cc 	.word	0x200000cc

0800abc8 <_malloc_r>:
 800abc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abca:	1ccd      	adds	r5, r1, #3
 800abcc:	f025 0503 	bic.w	r5, r5, #3
 800abd0:	3508      	adds	r5, #8
 800abd2:	2d0c      	cmp	r5, #12
 800abd4:	bf38      	it	cc
 800abd6:	250c      	movcc	r5, #12
 800abd8:	2d00      	cmp	r5, #0
 800abda:	4606      	mov	r6, r0
 800abdc:	db01      	blt.n	800abe2 <_malloc_r+0x1a>
 800abde:	42a9      	cmp	r1, r5
 800abe0:	d903      	bls.n	800abea <_malloc_r+0x22>
 800abe2:	230c      	movs	r3, #12
 800abe4:	6033      	str	r3, [r6, #0]
 800abe6:	2000      	movs	r0, #0
 800abe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abea:	f000 f86b 	bl	800acc4 <__malloc_lock>
 800abee:	4921      	ldr	r1, [pc, #132]	; (800ac74 <_malloc_r+0xac>)
 800abf0:	680a      	ldr	r2, [r1, #0]
 800abf2:	4614      	mov	r4, r2
 800abf4:	b99c      	cbnz	r4, 800ac1e <_malloc_r+0x56>
 800abf6:	4f20      	ldr	r7, [pc, #128]	; (800ac78 <_malloc_r+0xb0>)
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	b923      	cbnz	r3, 800ac06 <_malloc_r+0x3e>
 800abfc:	4621      	mov	r1, r4
 800abfe:	4630      	mov	r0, r6
 800ac00:	f000 f83c 	bl	800ac7c <_sbrk_r>
 800ac04:	6038      	str	r0, [r7, #0]
 800ac06:	4629      	mov	r1, r5
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f000 f837 	bl	800ac7c <_sbrk_r>
 800ac0e:	1c43      	adds	r3, r0, #1
 800ac10:	d123      	bne.n	800ac5a <_malloc_r+0x92>
 800ac12:	230c      	movs	r3, #12
 800ac14:	6033      	str	r3, [r6, #0]
 800ac16:	4630      	mov	r0, r6
 800ac18:	f000 f85a 	bl	800acd0 <__malloc_unlock>
 800ac1c:	e7e3      	b.n	800abe6 <_malloc_r+0x1e>
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	1b5b      	subs	r3, r3, r5
 800ac22:	d417      	bmi.n	800ac54 <_malloc_r+0x8c>
 800ac24:	2b0b      	cmp	r3, #11
 800ac26:	d903      	bls.n	800ac30 <_malloc_r+0x68>
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	441c      	add	r4, r3
 800ac2c:	6025      	str	r5, [r4, #0]
 800ac2e:	e004      	b.n	800ac3a <_malloc_r+0x72>
 800ac30:	6863      	ldr	r3, [r4, #4]
 800ac32:	42a2      	cmp	r2, r4
 800ac34:	bf0c      	ite	eq
 800ac36:	600b      	streq	r3, [r1, #0]
 800ac38:	6053      	strne	r3, [r2, #4]
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	f000 f848 	bl	800acd0 <__malloc_unlock>
 800ac40:	f104 000b 	add.w	r0, r4, #11
 800ac44:	1d23      	adds	r3, r4, #4
 800ac46:	f020 0007 	bic.w	r0, r0, #7
 800ac4a:	1ac2      	subs	r2, r0, r3
 800ac4c:	d0cc      	beq.n	800abe8 <_malloc_r+0x20>
 800ac4e:	1a1b      	subs	r3, r3, r0
 800ac50:	50a3      	str	r3, [r4, r2]
 800ac52:	e7c9      	b.n	800abe8 <_malloc_r+0x20>
 800ac54:	4622      	mov	r2, r4
 800ac56:	6864      	ldr	r4, [r4, #4]
 800ac58:	e7cc      	b.n	800abf4 <_malloc_r+0x2c>
 800ac5a:	1cc4      	adds	r4, r0, #3
 800ac5c:	f024 0403 	bic.w	r4, r4, #3
 800ac60:	42a0      	cmp	r0, r4
 800ac62:	d0e3      	beq.n	800ac2c <_malloc_r+0x64>
 800ac64:	1a21      	subs	r1, r4, r0
 800ac66:	4630      	mov	r0, r6
 800ac68:	f000 f808 	bl	800ac7c <_sbrk_r>
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	d1dd      	bne.n	800ac2c <_malloc_r+0x64>
 800ac70:	e7cf      	b.n	800ac12 <_malloc_r+0x4a>
 800ac72:	bf00      	nop
 800ac74:	200000cc 	.word	0x200000cc
 800ac78:	200000d0 	.word	0x200000d0

0800ac7c <_sbrk_r>:
 800ac7c:	b538      	push	{r3, r4, r5, lr}
 800ac7e:	4d06      	ldr	r5, [pc, #24]	; (800ac98 <_sbrk_r+0x1c>)
 800ac80:	2300      	movs	r3, #0
 800ac82:	4604      	mov	r4, r0
 800ac84:	4608      	mov	r0, r1
 800ac86:	602b      	str	r3, [r5, #0]
 800ac88:	f7f7 fc72 	bl	8002570 <_sbrk>
 800ac8c:	1c43      	adds	r3, r0, #1
 800ac8e:	d102      	bne.n	800ac96 <_sbrk_r+0x1a>
 800ac90:	682b      	ldr	r3, [r5, #0]
 800ac92:	b103      	cbz	r3, 800ac96 <_sbrk_r+0x1a>
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	bd38      	pop	{r3, r4, r5, pc}
 800ac98:	20000a10 	.word	0x20000a10

0800ac9c <strncat>:
 800ac9c:	b530      	push	{r4, r5, lr}
 800ac9e:	4604      	mov	r4, r0
 800aca0:	7825      	ldrb	r5, [r4, #0]
 800aca2:	4623      	mov	r3, r4
 800aca4:	3401      	adds	r4, #1
 800aca6:	2d00      	cmp	r5, #0
 800aca8:	d1fa      	bne.n	800aca0 <strncat+0x4>
 800acaa:	3a01      	subs	r2, #1
 800acac:	d304      	bcc.n	800acb8 <strncat+0x1c>
 800acae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acb2:	f803 4b01 	strb.w	r4, [r3], #1
 800acb6:	b904      	cbnz	r4, 800acba <strncat+0x1e>
 800acb8:	bd30      	pop	{r4, r5, pc}
 800acba:	2a00      	cmp	r2, #0
 800acbc:	d1f5      	bne.n	800acaa <strncat+0xe>
 800acbe:	701a      	strb	r2, [r3, #0]
 800acc0:	e7f3      	b.n	800acaa <strncat+0xe>
	...

0800acc4 <__malloc_lock>:
 800acc4:	4801      	ldr	r0, [pc, #4]	; (800accc <__malloc_lock+0x8>)
 800acc6:	f000 b809 	b.w	800acdc <__retarget_lock_acquire_recursive>
 800acca:	bf00      	nop
 800accc:	20000a18 	.word	0x20000a18

0800acd0 <__malloc_unlock>:
 800acd0:	4801      	ldr	r0, [pc, #4]	; (800acd8 <__malloc_unlock+0x8>)
 800acd2:	f000 b804 	b.w	800acde <__retarget_lock_release_recursive>
 800acd6:	bf00      	nop
 800acd8:	20000a18 	.word	0x20000a18

0800acdc <__retarget_lock_acquire_recursive>:
 800acdc:	4770      	bx	lr

0800acde <__retarget_lock_release_recursive>:
 800acde:	4770      	bx	lr

0800ace0 <_init>:
 800ace0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace2:	bf00      	nop
 800ace4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace6:	bc08      	pop	{r3}
 800ace8:	469e      	mov	lr, r3
 800acea:	4770      	bx	lr

0800acec <_fini>:
 800acec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acee:	bf00      	nop
 800acf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acf2:	bc08      	pop	{r3}
 800acf4:	469e      	mov	lr, r3
 800acf6:	4770      	bx	lr
