
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b958  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000248c  0800bae0  0800bae0  0001bae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df6c  0800df6c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800df6c  0800df6c  0001df6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df74  0800df74  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df74  0800df74  0001df74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df78  0800df78  0001df78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800df7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd4  200000a0  0800e01c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c74  0800e01c  00020c74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000274b3  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053a7  00000000  00000000  00047583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  0004c930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f8  00000000  00000000  0004e328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b5a  00000000  00000000  0004fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025534  00000000  00000000  0007667a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d580a  00000000  00000000  0009bbae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001713b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e0c  00000000  00000000  0017140c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bac8 	.word	0x0800bac8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	0800bac8 	.word	0x0800bac8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	char digith = 0;;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 80004ca:	f000 f853 	bl	8000574 <read_one_digit_from_keyboard>
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b23      	cmp	r3, #35	; 0x23
 80004d6:	d10a      	bne.n	80004ee <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 80004d8:	221e      	movs	r2, #30
 80004da:	2100      	movs	r1, #0
 80004dc:	4824      	ldr	r0, [pc, #144]	; (8000570 <read_digits+0xb0>)
 80004de:	f00b fa23 	bl	800b928 <memset>
		keyboard.read_digits_position = 0;
 80004e2:	4b23      	ldr	r3, [pc, #140]	; (8000570 <read_digits+0xb0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 80004e8:	4b21      	ldr	r3, [pc, #132]	; (8000570 <read_digits+0xb0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2b2a      	cmp	r3, #42	; 0x2a
 80004f2:	d109      	bne.n	8000508 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <read_digits+0xb0>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <read_digits+0xb0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <read_digits+0xb0>)
 8000504:	2200      	movs	r2, #0
 8000506:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d028      	beq.n	8000560 <read_digits+0xa0>
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b23      	cmp	r3, #35	; 0x23
 8000512:	d025      	beq.n	8000560 <read_digits+0xa0>
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	2b2a      	cmp	r3, #42	; 0x2a
 8000518:	d022      	beq.n	8000560 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <read_digits+0xb0>)
 800051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051e:	4a14      	ldr	r2, [pc, #80]	; (8000570 <read_digits+0xb0>)
 8000520:	7f92      	ldrb	r2, [r2, #30]
 8000522:	4293      	cmp	r3, r2
 8000524:	dc11      	bgt.n	800054a <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <read_digits+0xb0>)
 8000528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800052a:	4911      	ldr	r1, [pc, #68]	; (8000570 <read_digits+0xb0>)
 800052c:	79fa      	ldrb	r2, [r7, #7]
 800052e:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <read_digits+0xb0>)
 8000532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000534:	3301      	adds	r3, #1
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <read_digits+0xb0>)
 8000538:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <read_digits+0xb0>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <read_digits+0xb0>)
 8000544:	2201      	movs	r2, #1
 8000546:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000548:	e00e      	b.n	8000568 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <read_digits+0xb0>)
 800054c:	2201      	movs	r2, #1
 800054e:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <read_digits+0xb0>)
 8000554:	2200      	movs	r2, #0
 8000556:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <read_digits+0xb0>)
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800055e:	e003      	b.n	8000568 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <read_digits+0xb0>)
 8000562:	2200      	movs	r2, #0
 8000564:	77da      	strb	r2, [r3, #31]
	}
}
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200000d4 	.word	0x200000d4

08000574 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
	char digit = '\0';
 800057a:	2300      	movs	r3, #0
 800057c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000584:	48cf      	ldr	r0, [pc, #828]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000586:	f002 fc5d 	bl	8002e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	48cc      	ldr	r0, [pc, #816]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000592:	f002 fc57 	bl	8002e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059c:	48c9      	ldr	r0, [pc, #804]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800059e:	f002 fc51 	bl	8002e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	48c6      	ldr	r0, [pc, #792]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005aa:	f002 fc4b 	bl	8002e44 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80005ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b2:	48c5      	ldr	r0, [pc, #788]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80005b4:	f002 fc2e 	bl	8002e14 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d169      	bne.n	8000692 <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c4:	48bf      	ldr	r0, [pc, #764]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005c6:	f002 fc3d 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	48bc      	ldr	r0, [pc, #752]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005d2:	f002 fc37 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005dc:	48b9      	ldr	r0, [pc, #740]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005de:	f002 fc31 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	48b6      	ldr	r0, [pc, #728]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005ea:	f002 fc2b 	bl	8002e44 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80005ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f2:	48b5      	ldr	r0, [pc, #724]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80005f4:	f002 fc0e 	bl	8002e14 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d101      	bne.n	8000602 <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 80005fe:	2331      	movs	r3, #49	; 0x31
 8000600:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000608:	48ae      	ldr	r0, [pc, #696]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800060a:	f002 fc1b 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	48ab      	ldr	r0, [pc, #684]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000616:	f002 fc15 	bl	8002e44 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061e:	48aa      	ldr	r0, [pc, #680]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000620:	f002 fbf8 	bl	8002e14 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d101      	bne.n	800062e <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 800062a:	2334      	movs	r3, #52	; 0x34
 800062c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000634:	48a3      	ldr	r0, [pc, #652]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000636:	f002 fc05 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000640:	48a0      	ldr	r0, [pc, #640]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000642:	f002 fbff 	bl	8002e44 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000646:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064a:	489f      	ldr	r0, [pc, #636]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 800064c:	f002 fbe2 	bl	8002e14 <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d101      	bne.n	800065a <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 8000656:	2337      	movs	r3, #55	; 0x37
 8000658:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000660:	4898      	ldr	r0, [pc, #608]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000662:	f002 fbef 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	4895      	ldr	r0, [pc, #596]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800066e:	f002 fbe9 	bl	8002e44 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000676:	4894      	ldr	r0, [pc, #592]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000678:	f002 fbcc 	bl	8002e14 <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d101      	bne.n	8000686 <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 8000682:	232a      	movs	r3, #42	; 0x2a
 8000684:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	488d      	ldr	r0, [pc, #564]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800068e:	f002 fbd9 	bl	8002e44 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000698:	488a      	ldr	r0, [pc, #552]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800069a:	f002 fbd3 	bl	8002e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a4:	4887      	ldr	r0, [pc, #540]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006a6:	f002 fbcd 	bl	8002e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b0:	4884      	ldr	r0, [pc, #528]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006b2:	f002 fbc7 	bl	8002e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4881      	ldr	r0, [pc, #516]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006be:	f002 fbc1 	bl	8002e44 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 80006c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c6:	4880      	ldr	r0, [pc, #512]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80006c8:	f002 fba4 	bl	8002e14 <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d169      	bne.n	80007a6 <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d8:	487a      	ldr	r0, [pc, #488]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006da:	f002 fbb3 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e4:	4877      	ldr	r0, [pc, #476]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006e6:	f002 fbad 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f0:	4874      	ldr	r0, [pc, #464]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006f2:	f002 fba7 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fc:	4871      	ldr	r0, [pc, #452]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006fe:	f002 fba1 	bl	8002e44 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000702:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000706:	4870      	ldr	r0, [pc, #448]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000708:	f002 fb84 	bl	8002e14 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 8000712:	2332      	movs	r3, #50	; 0x32
 8000714:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071c:	4869      	ldr	r0, [pc, #420]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800071e:	f002 fb91 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000728:	4866      	ldr	r0, [pc, #408]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800072a:	f002 fb8b 	bl	8002e44 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800072e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000732:	4865      	ldr	r0, [pc, #404]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000734:	f002 fb6e 	bl	8002e14 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 800073e:	2335      	movs	r3, #53	; 0x35
 8000740:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000748:	485e      	ldr	r0, [pc, #376]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800074a:	f002 fb7b 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000754:	485b      	ldr	r0, [pc, #364]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000756:	f002 fb75 	bl	8002e44 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800075a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075e:	485a      	ldr	r0, [pc, #360]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000760:	f002 fb58 	bl	8002e14 <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 800076a:	2338      	movs	r3, #56	; 0x38
 800076c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000774:	4853      	ldr	r0, [pc, #332]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000776:	f002 fb65 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000780:	4850      	ldr	r0, [pc, #320]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000782:	f002 fb5f 	bl	8002e44 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078a:	484f      	ldr	r0, [pc, #316]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 800078c:	f002 fb42 	bl	8002e14 <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 8000796:	2330      	movs	r3, #48	; 0x30
 8000798:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	4848      	ldr	r0, [pc, #288]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007a2:	f002 fb4f 	bl	8002e44 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	4845      	ldr	r0, [pc, #276]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ae:	f002 fb49 	bl	8002e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b8:	4842      	ldr	r0, [pc, #264]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ba:	f002 fb43 	bl	8002e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c4:	483f      	ldr	r0, [pc, #252]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007c6:	f002 fb3d 	bl	8002e44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d0:	483c      	ldr	r0, [pc, #240]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007d2:	f002 fb37 	bl	8002e44 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 80007d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007da:	483c      	ldr	r0, [pc, #240]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 80007dc:	f002 fb1a 	bl	8002e14 <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d169      	bne.n	80008ba <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ec:	4835      	ldr	r0, [pc, #212]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ee:	f002 fb29 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f8:	4832      	ldr	r0, [pc, #200]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007fa:	f002 fb23 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000804:	482f      	ldr	r0, [pc, #188]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000806:	f002 fb1d 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000810:	482c      	ldr	r0, [pc, #176]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000812:	f002 fb17 	bl	8002e44 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8000816:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081a:	482c      	ldr	r0, [pc, #176]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 800081c:	f002 fafa 	bl	8002e14 <HAL_GPIO_ReadPin>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 8000826:	2333      	movs	r3, #51	; 0x33
 8000828:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000830:	4824      	ldr	r0, [pc, #144]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000832:	f002 fb07 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083c:	4821      	ldr	r0, [pc, #132]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800083e:	f002 fb01 	bl	8002e44 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8000842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000846:	4821      	ldr	r0, [pc, #132]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 8000848:	f002 fae4 	bl	8002e14 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d101      	bne.n	8000856 <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 8000852:	2336      	movs	r3, #54	; 0x36
 8000854:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085c:	4819      	ldr	r0, [pc, #100]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800085e:	f002 faf1 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000868:	4816      	ldr	r0, [pc, #88]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800086a:	f002 faeb 	bl	8002e44 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800086e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000872:	4816      	ldr	r0, [pc, #88]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 8000874:	f002 face 	bl	8002e14 <HAL_GPIO_ReadPin>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d101      	bne.n	8000882 <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 800087e:	2339      	movs	r3, #57	; 0x39
 8000880:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	480e      	ldr	r0, [pc, #56]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800088a:	f002 fadb 	bl	8002e44 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000894:	480b      	ldr	r0, [pc, #44]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000896:	f002 fad5 	bl	8002e44 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800089a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 80008a0:	f002 fab8 	bl	8002e14 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d101      	bne.n	80008ae <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 80008aa:	2323      	movs	r3, #35	; 0x23
 80008ac:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80008b6:	f002 fac5 	bl	8002e44 <HAL_GPIO_WritePin>
	}
	return digit;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40020c00 	.word	0x40020c00
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40021000 	.word	0x40021000

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f001 ff59 	bl	800278c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008da:	f000 f88f 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008de:	f000 fb41 	bl	8000f64 <MX_GPIO_Init>
  MX_I2S3_Init();
 80008e2:	f000 f975 	bl	8000bd0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80008e6:	f000 f9b7 	bl	8000c58 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80008ea:	f00a fcdb 	bl	800b2a4 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80008ee:	f000 fa77 	bl	8000de0 <MX_TIM2_Init>
  MX_SPI2_Init();
 80008f2:	f000 f9e7 	bl	8000cc4 <MX_SPI2_Init>
  MX_RNG_Init();
 80008f6:	f000 f99b 	bl	8000c30 <MX_RNG_Init>
  MX_TIM3_Init();
 80008fa:	f000 fabf 	bl	8000e7c <MX_TIM3_Init>
  MX_TIM1_Init();
 80008fe:	f000 fa17 	bl	8000d30 <MX_TIM1_Init>
  MX_I2C3_Init();
 8000902:	f000 f937 	bl	8000b74 <MX_I2C3_Init>
  MX_I2C2_Init();
 8000906:	f000 f907 	bl	8000b18 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800090a:	f000 f8f9 	bl	8000b00 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 800090e:	f001 f995 	bl	8001c3c <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 8000912:	2000      	movs	r0, #0
 8000914:	f001 fb38 	bl	8001f88 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8000918:	2003      	movs	r0, #3
 800091a:	f001 f931 	bl	8001b80 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 800091e:	2000      	movs	r0, #0
 8000920:	f001 fb32 	bl	8001f88 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 8000924:	2364      	movs	r3, #100	; 0x64
 8000926:	60fb      	str	r3, [r7, #12]
  speed_test_LCD(number_of_tests);
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	f001 fc1b 	bl	8002164 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 800092e:	2000      	movs	r0, #0
 8000930:	f001 fb2a 	bl	8001f88 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 8000934:	482d      	ldr	r0, [pc, #180]	; (80009ec <main+0x11c>)
 8000936:	f006 fd7b 	bl	8007430 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800093a:	2100      	movs	r1, #0
 800093c:	482b      	ldr	r0, [pc, #172]	; (80009ec <main+0x11c>)
 800093e:	f006 fde7 	bl	8007510 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 8000942:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <main+0x120>)
 8000944:	220a      	movs	r2, #10
 8000946:	779a      	strb	r2, [r3, #30]
    // 0x246				//  ????
    // 0x247				// MEMS
    // 0x255              //  ????

    // Read ID from BME280 ////////////////////////////////////////////////////////////////
    uint16_t STATUS=0;
 8000948:	2300      	movs	r3, #0
 800094a:	817b      	strh	r3, [r7, #10]
    uint16_t addres_devise = 0x76;   // BME280
 800094c:	2376      	movs	r3, #118	; 0x76
 800094e:	813b      	strh	r3, [r7, #8]
    uint16_t addr = 0xD0;
 8000950:	23d0      	movs	r3, #208	; 0xd0
 8000952:	80fb      	strh	r3, [r7, #6]
    uint8_t buff=0;         // Return 0x96 -> Dec 60
 8000954:	2300      	movs	r3, #0
 8000956:	717b      	strb	r3, [r7, #5]
    STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, 1, &buff, 1, 1000);
 8000958:	893b      	ldrh	r3, [r7, #8]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	b299      	uxth	r1, r3
 800095e:	88fa      	ldrh	r2, [r7, #6]
 8000960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000964:	9302      	str	r3, [sp, #8]
 8000966:	2301      	movs	r3, #1
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	1d7b      	adds	r3, r7, #5
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	2301      	movs	r3, #1
 8000970:	4820      	ldr	r0, [pc, #128]	; (80009f4 <main+0x124>)
 8000972:	f004 fa41 	bl	8004df8 <HAL_I2C_Mem_Read>
 8000976:	4603      	mov	r3, r0
 8000978:	817b      	strh	r3, [r7, #10]
    /////////////////////////////////////////////////////////////////////////////////////////

    // Read ID from DS3231 ////////////////////////////////////////////////////////////////
    addres_devise = 0x68;            // DS3231
 800097a:	2368      	movs	r3, #104	; 0x68
 800097c:	813b      	strh	r3, [r7, #8]
    addr = 0x00;						// Read seconds register
 800097e:	2300      	movs	r3, #0
 8000980:	80fb      	strh	r3, [r7, #6]
    buff=0;
 8000982:	2300      	movs	r3, #0
 8000984:	717b      	strb	r3, [r7, #5]
    STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, 1, &buff, 1, 1000);
 8000986:	893b      	ldrh	r3, [r7, #8]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	b299      	uxth	r1, r3
 800098c:	88fa      	ldrh	r2, [r7, #6]
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	9302      	str	r3, [sp, #8]
 8000994:	2301      	movs	r3, #1
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	1d7b      	adds	r3, r7, #5
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2301      	movs	r3, #1
 800099e:	4815      	ldr	r0, [pc, #84]	; (80009f4 <main+0x124>)
 80009a0:	f004 fa2a 	bl	8004df8 <HAL_I2C_Mem_Read>
 80009a4:	4603      	mov	r3, r0
 80009a6:	817b      	strh	r3, [r7, #10]
    /////////////////////////////////////////////////////////////////////////////////////////

    // Test OLED  ////////////////////////////////////////////////////////////////
    oled_init();
 80009a8:	f001 fdec 	bl	8002584 <oled_init>
    char oled_buff[] = "TEST";
 80009ac:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <main+0x128>)
 80009ae:	463b      	mov	r3, r7
 80009b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b4:	6018      	str	r0, [r3, #0]
 80009b6:	3304      	adds	r3, #4
 80009b8:	7019      	strb	r1, [r3, #0]
    // draw_pixel(10, 10, WHITE);
    graphics_text(1, 1, 1, oled_buff);
 80009ba:	463b      	mov	r3, r7
 80009bc:	2201      	movs	r2, #1
 80009be:	2101      	movs	r1, #1
 80009c0:	2001      	movs	r0, #1
 80009c2:	f001 fcd7 	bl	8002374 <graphics_text>
    graphics_text(1, 20, 2, oled_buff);
 80009c6:	463b      	mov	r3, r7
 80009c8:	2202      	movs	r2, #2
 80009ca:	2114      	movs	r1, #20
 80009cc:	2001      	movs	r0, #1
 80009ce:	f001 fcd1 	bl	8002374 <graphics_text>
    graphics_text(50, 1, 3, oled_buff);
 80009d2:	463b      	mov	r3, r7
 80009d4:	2203      	movs	r2, #3
 80009d6:	2101      	movs	r1, #1
 80009d8:	2032      	movs	r0, #50	; 0x32
 80009da:	f001 fccb 	bl	8002374 <graphics_text>
    oled_update();
 80009de:	f001 fd7d 	bl	80024dc <oled_update>
  while (1)
  {
	  /////////////////////////////////////////////////////////////////


	  I2C_3_scaner();
 80009e2:	f001 fe41 	bl	8002668 <I2C_3_scaner>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009e6:	f00a fc83 	bl	800b2f0 <MX_USB_HOST_Process>
  {
 80009ea:	e7fa      	b.n	80009e2 <main+0x112>
 80009ec:	200001fc 	.word	0x200001fc
 80009f0:	200000d4 	.word	0x200000d4
 80009f4:	200000fc 	.word	0x200000fc
 80009f8:	0800bae0 	.word	0x0800bae0

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b098      	sub	sp, #96	; 0x60
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a06:	2230      	movs	r2, #48	; 0x30
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f00a ff8c 	bl	800b928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <SystemClock_Config+0xfc>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a30      	ldr	r2, [pc, #192]	; (8000af8 <SystemClock_Config+0xfc>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <SystemClock_Config+0xfc>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <SystemClock_Config+0x100>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a2a      	ldr	r2, [pc, #168]	; (8000afc <SystemClock_Config+0x100>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6013      	str	r3, [r2, #0]
 8000a5a:	4b28      	ldr	r3, [pc, #160]	; (8000afc <SystemClock_Config+0x100>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a66:	2301      	movs	r3, #1
 8000a68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a70:	2302      	movs	r3, #2
 8000a72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a7e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a82:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a90:	4618      	mov	r0, r3
 8000a92:	f005 fbbf 	bl	8006214 <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a9c:	f000 fbca 	bl	8001234 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	2105      	movs	r1, #5
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f005 fe20 	bl	8006704 <HAL_RCC_ClockConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000aca:	f000 fbb3 	bl	8001234 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ad2:	23c0      	movs	r3, #192	; 0xc0
 8000ad4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f005 fff8 	bl	8006ad4 <HAL_RCCEx_PeriphCLKConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000aea:	f000 fba3 	bl	8001234 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3760      	adds	r7, #96	; 0x60
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40007000 	.word	0x40007000

08000b00 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	201c      	movs	r0, #28
 8000b0a:	f001 ffb0 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b0e:	201c      	movs	r0, #28
 8000b10:	f001 ffc9 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b1e:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <MX_I2C2_Init+0x54>)
 8000b20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b24:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <MX_I2C2_Init+0x58>)
 8000b26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b56:	f003 ff0d 	bl	8004974 <HAL_I2C_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b60:	f000 fb68 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200001a8 	.word	0x200001a8
 8000b6c:	40005800 	.word	0x40005800
 8000b70:	000186a0 	.word	0x000186a0

08000b74 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_I2C3_Init+0x50>)
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <MX_I2C3_Init+0x54>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_I2C3_Init+0x50>)
 8000b80:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_I2C3_Init+0x58>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_I2C3_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_I2C3_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_I2C3_Init+0x50>)
 8000b92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b96:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <MX_I2C3_Init+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_I2C3_Init+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <MX_I2C3_Init+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_I2C3_Init+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_I2C3_Init+0x50>)
 8000bb2:	f003 fedf 	bl	8004974 <HAL_I2C_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000bbc:	f000 fb3a 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200000fc 	.word	0x200000fc
 8000bc8:	40005c00 	.word	0x40005c00
 8000bcc:	000186a0 	.word	0x000186a0

08000bd0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_I2S3_Init+0x54>)
 8000bd6:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <MX_I2S3_Init+0x58>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_I2S3_Init+0x54>)
 8000bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_I2S3_Init+0x54>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_I2S3_Init+0x54>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <MX_I2S3_Init+0x54>)
 8000bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_I2S3_Init+0x54>)
 8000bf8:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <MX_I2S3_Init+0x5c>)
 8000bfa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_I2S3_Init+0x54>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_I2S3_Init+0x54>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_I2S3_Init+0x54>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_I2S3_Init+0x54>)
 8000c10:	f004 fe60 	bl	80058d4 <HAL_I2S_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000c1a:	f000 fb0b 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000033c 	.word	0x2000033c
 8000c28:	40003c00 	.word	0x40003c00
 8000c2c:	00017700 	.word	0x00017700

08000c30 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_RNG_Init+0x20>)
 8000c36:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <MX_RNG_Init+0x24>)
 8000c38:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_RNG_Init+0x20>)
 8000c3c:	f006 f88a 	bl	8006d54 <HAL_RNG_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000c46:	f000 faf5 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000028c 	.word	0x2000028c
 8000c54:	50060800 	.word	0x50060800

08000c58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_SPI1_Init+0x64>)
 8000c5e:	4a18      	ldr	r2, [pc, #96]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MX_SPI1_Init+0x64>)
 8000c64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_SPI1_Init+0x64>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <MX_SPI1_Init+0x64>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_SPI1_Init+0x64>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_SPI1_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_SPI1_Init+0x64>)
 8000c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_SPI1_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <MX_SPI1_Init+0x64>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_SPI1_Init+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <MX_SPI1_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_SPI1_Init+0x64>)
 8000ca4:	220a      	movs	r2, #10
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_SPI1_Init+0x64>)
 8000caa:	f006 f8e1 	bl	8006e70 <HAL_SPI_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cb4:	f000 fabe 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000029c 	.word	0x2000029c
 8000cc0:	40013000 	.word	0x40013000

08000cc4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000cca:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <MX_SPI2_Init+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000cd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000d10:	220a      	movs	r2, #10
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000d16:	f006 f8ab 	bl	8006e70 <HAL_SPI_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d20:	f000 fa88 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000150 	.word	0x20000150
 8000d2c:	40003800 	.word	0x40003800

08000d30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	2224      	movs	r2, #36	; 0x24
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f00a fdf2 	bl	800b928 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <MX_TIM1_Init+0xa8>)
 8000d4e:	4a23      	ldr	r2, [pc, #140]	; (8000ddc <MX_TIM1_Init+0xac>)
 8000d50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <MX_TIM1_Init+0xa8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <MX_TIM1_Init+0xa8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <MX_TIM1_Init+0xa8>)
 8000d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_TIM1_Init+0xa8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_TIM1_Init+0xa8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_TIM1_Init+0xa8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d80:	2301      	movs	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d90:	2301      	movs	r3, #1
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	4619      	mov	r1, r3
 8000da2:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <MX_TIM1_Init+0xa8>)
 8000da4:	f006 fd1b 	bl	80077de <HAL_TIM_Encoder_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000dae:	f000 fa41 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <MX_TIM1_Init+0xa8>)
 8000dc0:	f007 fb80 	bl	80084c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000dca:	f000 fa33 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	3730      	adds	r7, #48	; 0x30
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000244 	.word	0x20000244
 8000ddc:	40010000 	.word	0x40010000

08000de0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	463b      	mov	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <MX_TIM2_Init+0x98>)
 8000dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8000e04:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <MX_TIM2_Init+0x98>)
 8000e06:	f240 3247 	movw	r2, #839	; 0x347
 8000e0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_TIM2_Init+0x98>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <MX_TIM2_Init+0x98>)
 8000e14:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_TIM2_Init+0x98>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <MX_TIM2_Init+0x98>)
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e26:	4814      	ldr	r0, [pc, #80]	; (8000e78 <MX_TIM2_Init+0x98>)
 8000e28:	f006 fab2 	bl	8007390 <HAL_TIM_Base_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e32:	f000 f9ff 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	4619      	mov	r1, r3
 8000e42:	480d      	ldr	r0, [pc, #52]	; (8000e78 <MX_TIM2_Init+0x98>)
 8000e44:	f006 ff38 	bl	8007cb8 <HAL_TIM_ConfigClockSource>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e4e:	f000 f9f1 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000e52:	2310      	movs	r3, #16
 8000e54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <MX_TIM2_Init+0x98>)
 8000e60:	f007 fb30 	bl	80084c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e6a:	f000 f9e3 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200002f4 	.word	0x200002f4

08000e7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08e      	sub	sp, #56	; 0x38
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e90:	f107 0320 	add.w	r3, r7, #32
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
 8000ea8:	615a      	str	r2, [r3, #20]
 8000eaa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <MX_TIM3_Init+0xe0>)
 8000eae:	4a2c      	ldr	r2, [pc, #176]	; (8000f60 <MX_TIM3_Init+0xe4>)
 8000eb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <MX_TIM3_Init+0xe0>)
 8000eb4:	f640 0233 	movw	r2, #2099	; 0x833
 8000eb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <MX_TIM3_Init+0xe0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <MX_TIM3_Init+0xe0>)
 8000ec2:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ec6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec8:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <MX_TIM3_Init+0xe0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ece:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <MX_TIM3_Init+0xe0>)
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ed4:	4821      	ldr	r0, [pc, #132]	; (8000f5c <MX_TIM3_Init+0xe0>)
 8000ed6:	f006 fa5b 	bl	8007390 <HAL_TIM_Base_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ee0:	f000 f9a8 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	481a      	ldr	r0, [pc, #104]	; (8000f5c <MX_TIM3_Init+0xe0>)
 8000ef2:	f006 fee1 	bl	8007cb8 <HAL_TIM_ConfigClockSource>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000efc:	f000 f99a 	bl	8001234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f00:	4816      	ldr	r0, [pc, #88]	; (8000f5c <MX_TIM3_Init+0xe0>)
 8000f02:	f006 fc13 	bl	800772c <HAL_TIM_PWM_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f0c:	f000 f992 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f18:	f107 0320 	add.w	r3, r7, #32
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480f      	ldr	r0, [pc, #60]	; (8000f5c <MX_TIM3_Init+0xe0>)
 8000f20:	f007 fad0 	bl	80084c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f2a:	f000 f983 	bl	8001234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f2e:	2360      	movs	r3, #96	; 0x60
 8000f30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_TIM3_Init+0xe0>)
 8000f46:	f006 fdf9 	bl	8007b3c <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f50:	f000 f970 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	3738      	adds	r7, #56	; 0x38
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200001fc 	.word	0x200001fc
 8000f60:	40000400 	.word	0x40000400

08000f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	; 0x30
 8000f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
 8000f7e:	4ba6      	ldr	r3, [pc, #664]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4aa5      	ldr	r2, [pc, #660]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4ba3      	ldr	r3, [pc, #652]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	61bb      	str	r3, [r7, #24]
 8000f94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	4b9f      	ldr	r3, [pc, #636]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a9e      	ldr	r2, [pc, #632]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b9c      	ldr	r3, [pc, #624]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4b98      	ldr	r3, [pc, #608]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a97      	ldr	r2, [pc, #604]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8000fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b95      	ldr	r3, [pc, #596]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b91      	ldr	r3, [pc, #580]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a90      	ldr	r2, [pc, #576]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b8e      	ldr	r3, [pc, #568]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	4b8a      	ldr	r3, [pc, #552]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a89      	ldr	r2, [pc, #548]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b87      	ldr	r3, [pc, #540]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4b83      	ldr	r3, [pc, #524]	; (8001218 <MX_GPIO_Init+0x2b4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a82      	ldr	r2, [pc, #520]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b80      	ldr	r3, [pc, #512]	; (8001218 <MX_GPIO_Init+0x2b4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001022:	2200      	movs	r2, #0
 8001024:	217c      	movs	r1, #124	; 0x7c
 8001026:	487d      	ldr	r0, [pc, #500]	; (800121c <MX_GPIO_Init+0x2b8>)
 8001028:	f001 ff0c 	bl	8002e44 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	2101      	movs	r1, #1
 8001030:	487b      	ldr	r0, [pc, #492]	; (8001220 <MX_GPIO_Init+0x2bc>)
 8001032:	f001 ff07 	bl	8002e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001036:	2200      	movs	r2, #0
 8001038:	f64f 7110 	movw	r1, #65296	; 0xff10
 800103c:	4879      	ldr	r0, [pc, #484]	; (8001224 <MX_GPIO_Init+0x2c0>)
 800103e:	f001 ff01 	bl	8002e44 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001048:	4875      	ldr	r0, [pc, #468]	; (8001220 <MX_GPIO_Init+0x2bc>)
 800104a:	f001 fefb 	bl	8002e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001054:	4874      	ldr	r0, [pc, #464]	; (8001228 <MX_GPIO_Init+0x2c4>)
 8001056:	f001 fef5 	bl	8002e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 800105a:	2374      	movs	r3, #116	; 0x74
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	486a      	ldr	r0, [pc, #424]	; (800121c <MX_GPIO_Init+0x2b8>)
 8001072:	f001 fd33 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001076:	2308      	movs	r3, #8
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4863      	ldr	r0, [pc, #396]	; (800121c <MX_GPIO_Init+0x2b8>)
 800108e:	f001 fd25 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	485e      	ldr	r0, [pc, #376]	; (8001220 <MX_GPIO_Init+0x2bc>)
 80010a8:	f001 fd18 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 80010ac:	f640 0341 	movw	r3, #2113	; 0x841
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4856      	ldr	r0, [pc, #344]	; (8001220 <MX_GPIO_Init+0x2bc>)
 80010c6:	f001 fd09 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80010ca:	2308      	movs	r3, #8
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010da:	2305      	movs	r3, #5
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	484e      	ldr	r0, [pc, #312]	; (8001220 <MX_GPIO_Init+0x2bc>)
 80010e6:	f001 fcf9 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010ee:	4b4f      	ldr	r3, [pc, #316]	; (800122c <MX_GPIO_Init+0x2c8>)
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	484c      	ldr	r0, [pc, #304]	; (8001230 <MX_GPIO_Init+0x2cc>)
 80010fe:	f001 fced 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001102:	2304      	movs	r3, #4
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	4844      	ldr	r0, [pc, #272]	; (8001228 <MX_GPIO_Init+0x2c4>)
 8001116:	f001 fce1 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTION_SENSOR_9960_Pin KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin|KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 800111a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800111e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	2300      	movs	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001124:	2301      	movs	r3, #1
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	4619      	mov	r1, r3
 800112e:	483b      	ldr	r0, [pc, #236]	; (800121c <MX_GPIO_Init+0x2b8>)
 8001130:	f001 fcd4 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001134:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113e:	2301      	movs	r3, #1
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	4837      	ldr	r0, [pc, #220]	; (8001228 <MX_GPIO_Init+0x2c4>)
 800114a:	f001 fcc7 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 800114e:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001152:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	4619      	mov	r1, r3
 8001166:	482f      	ldr	r0, [pc, #188]	; (8001224 <MX_GPIO_Init+0x2c0>)
 8001168:	f001 fcb8 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800116c:	2320      	movs	r3, #32
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	4829      	ldr	r0, [pc, #164]	; (8001224 <MX_GPIO_Init+0x2c0>)
 8001180:	f001 fcac 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001184:	2340      	movs	r3, #64	; 0x40
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	4823      	ldr	r0, [pc, #140]	; (8001228 <MX_GPIO_Init+0x2c4>)
 800119c:	f001 fc9e 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 80011a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	481b      	ldr	r0, [pc, #108]	; (8001228 <MX_GPIO_Init+0x2c4>)
 80011ba:	f001 fc8f 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 80011be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c4:	2312      	movs	r3, #18
 80011c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011d0:	2304      	movs	r3, #4
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	4813      	ldr	r0, [pc, #76]	; (8001228 <MX_GPIO_Init+0x2c4>)
 80011dc:	f001 fc7e 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	480a      	ldr	r0, [pc, #40]	; (800121c <MX_GPIO_Init+0x2b8>)
 80011f4:	f001 fc72 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <MX_GPIO_Init+0x2c8>)
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_GPIO_Init+0x2b8>)
 800120c:	f001 fc66 	bl	8002adc <HAL_GPIO_Init>

}
 8001210:	bf00      	nop
 8001212:	3730      	adds	r7, #48	; 0x30
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800
 800121c:	40021000 	.word	0x40021000
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40020400 	.word	0x40020400
 800122c:	10120000 	.word	0x10120000
 8001230:	40020000 	.word	0x40020000

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123c:	e7fe      	b.n	800123c <Error_Handler+0x8>
	...

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_MspInit+0x5c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a13      	ldr	r2, [pc, #76]	; (800129c <HAL_MspInit+0x5c>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_MspInit+0x5c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_MspInit+0x5c>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a0c      	ldr	r2, [pc, #48]	; (800129c <HAL_MspInit+0x5c>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_MspInit+0x5c>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800127e:	2007      	movs	r0, #7
 8001280:	f001 fbea 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2100      	movs	r1, #0
 8001288:	2005      	movs	r0, #5
 800128a:	f001 fbf0 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800128e:	2005      	movs	r0, #5
 8001290:	f001 fc09 	bl	8002aa6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40023800 	.word	0x40023800

080012a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	; 0x30
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a42      	ldr	r2, [pc, #264]	; (80013c8 <HAL_I2C_MspInit+0x128>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d12d      	bne.n	800131e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	4b41      	ldr	r3, [pc, #260]	; (80013cc <HAL_I2C_MspInit+0x12c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a40      	ldr	r2, [pc, #256]	; (80013cc <HAL_I2C_MspInit+0x12c>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b3e      	ldr	r3, [pc, #248]	; (80013cc <HAL_I2C_MspInit+0x12c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	61bb      	str	r3, [r7, #24]
 80012dc:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e4:	2312      	movs	r3, #18
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012f0:	2304      	movs	r3, #4
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	4835      	ldr	r0, [pc, #212]	; (80013d0 <HAL_I2C_MspInit+0x130>)
 80012fc:	f001 fbee 	bl	8002adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	4b31      	ldr	r3, [pc, #196]	; (80013cc <HAL_I2C_MspInit+0x12c>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	4a30      	ldr	r2, [pc, #192]	; (80013cc <HAL_I2C_MspInit+0x12c>)
 800130a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800130e:	6413      	str	r3, [r2, #64]	; 0x40
 8001310:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <HAL_I2C_MspInit+0x12c>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800131c:	e050      	b.n	80013c0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a2c      	ldr	r2, [pc, #176]	; (80013d4 <HAL_I2C_MspInit+0x134>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d14b      	bne.n	80013c0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <HAL_I2C_MspInit+0x12c>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4a26      	ldr	r2, [pc, #152]	; (80013cc <HAL_I2C_MspInit+0x12c>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	6313      	str	r3, [r2, #48]	; 0x30
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <HAL_I2C_MspInit+0x12c>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HAL_I2C_MspInit+0x12c>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <HAL_I2C_MspInit+0x12c>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6313      	str	r3, [r2, #48]	; 0x30
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_I2C_MspInit+0x12c>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001366:	2312      	movs	r3, #18
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136a:	2301      	movs	r3, #1
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001372:	2304      	movs	r3, #4
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	4816      	ldr	r0, [pc, #88]	; (80013d8 <HAL_I2C_MspInit+0x138>)
 800137e:	f001 fbad 	bl	8002adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001388:	2312      	movs	r3, #18
 800138a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138c:	2301      	movs	r3, #1
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001394:	2304      	movs	r3, #4
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	480f      	ldr	r0, [pc, #60]	; (80013dc <HAL_I2C_MspInit+0x13c>)
 80013a0:	f001 fb9c 	bl	8002adc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_I2C_MspInit+0x12c>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_I2C_MspInit+0x12c>)
 80013ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013b2:	6413      	str	r3, [r2, #64]	; 0x40
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_I2C_MspInit+0x12c>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
}
 80013c0:	bf00      	nop
 80013c2:	3730      	adds	r7, #48	; 0x30
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40005800 	.word	0x40005800
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40005c00 	.word	0x40005c00
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020000 	.word	0x40020000

080013e0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a28      	ldr	r2, [pc, #160]	; (80014a0 <HAL_I2S_MspInit+0xc0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d14a      	bne.n	8001498 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <HAL_I2S_MspInit+0xc4>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a26      	ldr	r2, [pc, #152]	; (80014a4 <HAL_I2S_MspInit+0xc4>)
 800140c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_I2S_MspInit+0xc4>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <HAL_I2S_MspInit+0xc4>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a1f      	ldr	r2, [pc, #124]	; (80014a4 <HAL_I2S_MspInit+0xc4>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <HAL_I2S_MspInit+0xc4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_I2S_MspInit+0xc4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <HAL_I2S_MspInit+0xc4>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_I2S_MspInit+0xc4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001456:	2310      	movs	r3, #16
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001466:	2306      	movs	r3, #6
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <HAL_I2S_MspInit+0xc8>)
 8001472:	f001 fb33 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001476:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001488:	2306      	movs	r3, #6
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4806      	ldr	r0, [pc, #24]	; (80014ac <HAL_I2S_MspInit+0xcc>)
 8001494:	f001 fb22 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	; 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40003c00 	.word	0x40003c00
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020800 	.word	0x40020800

080014b0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <HAL_RNG_MspInit+0x3c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d10d      	bne.n	80014de <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_RNG_MspInit+0x40>)
 80014c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ca:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <HAL_RNG_MspInit+0x40>)
 80014cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014d0:	6353      	str	r3, [r2, #52]	; 0x34
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_RNG_MspInit+0x40>)
 80014d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	50060800 	.word	0x50060800
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08c      	sub	sp, #48	; 0x30
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a41      	ldr	r2, [pc, #260]	; (8001618 <HAL_SPI_MspInit+0x124>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d12c      	bne.n	8001570 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	4b40      	ldr	r3, [pc, #256]	; (800161c <HAL_SPI_MspInit+0x128>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	4a3f      	ldr	r2, [pc, #252]	; (800161c <HAL_SPI_MspInit+0x128>)
 8001520:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001524:	6453      	str	r3, [r2, #68]	; 0x44
 8001526:	4b3d      	ldr	r3, [pc, #244]	; (800161c <HAL_SPI_MspInit+0x128>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	4b39      	ldr	r3, [pc, #228]	; (800161c <HAL_SPI_MspInit+0x128>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a38      	ldr	r2, [pc, #224]	; (800161c <HAL_SPI_MspInit+0x128>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b36      	ldr	r3, [pc, #216]	; (800161c <HAL_SPI_MspInit+0x128>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800154e:	23e0      	movs	r3, #224	; 0xe0
 8001550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800155e:	2305      	movs	r3, #5
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	482d      	ldr	r0, [pc, #180]	; (8001620 <HAL_SPI_MspInit+0x12c>)
 800156a:	f001 fab7 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800156e:	e04f      	b.n	8001610 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a2b      	ldr	r2, [pc, #172]	; (8001624 <HAL_SPI_MspInit+0x130>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d14a      	bne.n	8001610 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b27      	ldr	r3, [pc, #156]	; (800161c <HAL_SPI_MspInit+0x128>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a26      	ldr	r2, [pc, #152]	; (800161c <HAL_SPI_MspInit+0x128>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_SPI_MspInit+0x128>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_SPI_MspInit+0x128>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a1f      	ldr	r2, [pc, #124]	; (800161c <HAL_SPI_MspInit+0x128>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HAL_SPI_MspInit+0x128>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_SPI_MspInit+0x128>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a18      	ldr	r2, [pc, #96]	; (800161c <HAL_SPI_MspInit+0x128>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_SPI_MspInit+0x128>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015ce:	2304      	movs	r3, #4
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015de:	2305      	movs	r3, #5
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	480f      	ldr	r0, [pc, #60]	; (8001628 <HAL_SPI_MspInit+0x134>)
 80015ea:	f001 fa77 	bl	8002adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80015ee:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001600:	2305      	movs	r3, #5
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	4808      	ldr	r0, [pc, #32]	; (800162c <HAL_SPI_MspInit+0x138>)
 800160c:	f001 fa66 	bl	8002adc <HAL_GPIO_Init>
}
 8001610:	bf00      	nop
 8001612:	3730      	adds	r7, #48	; 0x30
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40013000 	.word	0x40013000
 800161c:	40023800 	.word	0x40023800
 8001620:	40020000 	.word	0x40020000
 8001624:	40003800 	.word	0x40003800
 8001628:	40020800 	.word	0x40020800
 800162c:	40020400 	.word	0x40020400

08001630 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a19      	ldr	r2, [pc, #100]	; (80016b4 <HAL_TIM_Encoder_MspInit+0x84>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d12c      	bne.n	80016ac <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <HAL_TIM_Encoder_MspInit+0x88>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6453      	str	r3, [r2, #68]	; 0x44
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a10      	ldr	r2, [pc, #64]	; (80016b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001678:	f043 0310 	orr.w	r3, r3, #16
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800168a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001694:	2301      	movs	r3, #1
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800169c:	2301      	movs	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <HAL_TIM_Encoder_MspInit+0x8c>)
 80016a8:	f001 fa18 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016ac:	bf00      	nop
 80016ae:	3728      	adds	r7, #40	; 0x28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40010000 	.word	0x40010000
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40021000 	.word	0x40021000

080016c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d0:	d10e      	bne.n	80016f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <HAL_TIM_Base_MspInit+0x70>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a15      	ldr	r2, [pc, #84]	; (8001730 <HAL_TIM_Base_MspInit+0x70>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_TIM_Base_MspInit+0x70>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016ee:	e01a      	b.n	8001726 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0f      	ldr	r2, [pc, #60]	; (8001734 <HAL_TIM_Base_MspInit+0x74>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d115      	bne.n	8001726 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <HAL_TIM_Base_MspInit+0x70>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <HAL_TIM_Base_MspInit+0x70>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_TIM_Base_MspInit+0x70>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	201d      	movs	r0, #29
 800171c:	f001 f9a7 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001720:	201d      	movs	r0, #29
 8001722:	f001 f9c0 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40000400 	.word	0x40000400

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800173c:	e7fe      	b.n	800173c <NMI_Handler+0x4>

0800173e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <MemManage_Handler+0x4>

0800174a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <UsageFault_Handler+0x4>

08001756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001784:	f001 f854 	bl	8002830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 80017a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a4:	481b      	ldr	r0, [pc, #108]	; (8001814 <TIM2_IRQHandler+0x78>)
 80017a6:	f001 fb66 	bl	8002e76 <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <TIM2_IRQHandler+0x7c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d111      	bne.n	80017d6 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <TIM2_IRQHandler+0x80>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2bc8      	cmp	r3, #200	; 0xc8
 80017b8:	dc0a      	bgt.n	80017d0 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <TIM2_IRQHandler+0x80>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <TIM2_IRQHandler+0x84>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <TIM2_IRQHandler+0x80>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	4a14      	ldr	r2, [pc, #80]	; (800181c <TIM2_IRQHandler+0x80>)
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e002      	b.n	80017d6 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <TIM2_IRQHandler+0x7c>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <TIM2_IRQHandler+0x7c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d114      	bne.n	8001808 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <TIM2_IRQHandler+0x80>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b63      	cmp	r3, #99	; 0x63
 80017e4:	dd0a      	ble.n	80017fc <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <TIM2_IRQHandler+0x80>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <TIM2_IRQHandler+0x84>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <TIM2_IRQHandler+0x80>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <TIM2_IRQHandler+0x80>)
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e005      	b.n	8001808 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <TIM2_IRQHandler+0x7c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
		  i = 100;
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <TIM2_IRQHandler+0x80>)
 8001804:	2264      	movs	r2, #100	; 0x64
 8001806:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <TIM2_IRQHandler+0x84>)
 800180a:	f006 f88e 	bl	800792a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40020c00 	.word	0x40020c00
 8001818:	200000bc 	.word	0x200000bc
 800181c:	20000000 	.word	0x20000000
 8001820:	200002f4 	.word	0x200002f4

08001824 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001828:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <TIM3_IRQHandler+0x1c>)
 800182e:	f001 fb22 	bl	8002e76 <HAL_GPIO_TogglePin>
  read_digits();
 8001832:	f7fe fe45 	bl	80004c0 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001836:	4803      	ldr	r0, [pc, #12]	; (8001844 <TIM3_IRQHandler+0x20>)
 8001838:	f006 f877 	bl	800792a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40020c00 	.word	0x40020c00
 8001844:	200001fc 	.word	0x200001fc

08001848 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <OTG_FS_IRQHandler+0x10>)
 800184e:	f001 fd97 	bl	8003380 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000960 	.word	0x20000960

0800185c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <_sbrk+0x5c>)
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <_sbrk+0x60>)
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <_sbrk+0x64>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <_sbrk+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	d207      	bcs.n	800189c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800188c:	f00a f812 	bl	800b8b4 <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800189a:	e009      	b.n	80018b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <_sbrk+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20020000 	.word	0x20020000
 80018bc:	00000400 	.word	0x00000400
 80018c0:	200000c0 	.word	0x200000c0
 80018c4:	20000c78 	.word	0x20000c78

080018c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b08b      	sub	sp, #44	; 0x2c
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4604      	mov	r4, r0
 80018f4:	4608      	mov	r0, r1
 80018f6:	4611      	mov	r1, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	4623      	mov	r3, r4
 80018fc:	80fb      	strh	r3, [r7, #6]
 80018fe:	4603      	mov	r3, r0
 8001900:	80bb      	strh	r3, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	807b      	strh	r3, [r7, #2]
 8001906:	4613      	mov	r3, r2
 8001908:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	f1c3 0301 	rsb	r3, r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8001924:	e061      	b.n	80019ea <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8001926:	88fa      	ldrh	r2, [r7, #6]
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	e018      	b.n	8001962 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	b298      	uxth	r0, r3
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	b29a      	uxth	r2, r3
 8001938:	88bb      	ldrh	r3, [r7, #4]
 800193a:	4413      	add	r3, r2
 800193c:	b29b      	uxth	r3, r3
 800193e:	883a      	ldrh	r2, [r7, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	f000 fb47 	bl	8001fd4 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	b298      	uxth	r0, r3
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	b29b      	uxth	r3, r3
 800194e:	88ba      	ldrh	r2, [r7, #4]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	b29b      	uxth	r3, r3
 8001954:	883a      	ldrh	r2, [r7, #0]
 8001956:	4619      	mov	r1, r3
 8001958:	f000 fb3c 	bl	8001fd4 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	3301      	adds	r3, #1
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	88fa      	ldrh	r2, [r7, #6]
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	4413      	add	r3, r2
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	429a      	cmp	r2, r3
 800196c:	dde0      	ble.n	8001930 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 800196e:	88fa      	ldrh	r2, [r7, #6]
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	e018      	b.n	80019aa <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	b298      	uxth	r0, r3
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	b29a      	uxth	r2, r3
 8001980:	88bb      	ldrh	r3, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	b29b      	uxth	r3, r3
 8001986:	883a      	ldrh	r2, [r7, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	f000 fb23 	bl	8001fd4 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	b298      	uxth	r0, r3
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	b29b      	uxth	r3, r3
 8001996:	88ba      	ldrh	r2, [r7, #4]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	b29b      	uxth	r3, r3
 800199c:	883a      	ldrh	r2, [r7, #0]
 800199e:	4619      	mov	r1, r3
 80019a0:	f000 fb18 	bl	8001fd4 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3301      	adds	r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	88fa      	ldrh	r2, [r7, #6]
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	4413      	add	r3, r2
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	dde0      	ble.n	8001978 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	3301      	adds	r3, #1
 80019ba:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4413      	add	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	3302      	adds	r3, #2
 80019c8:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	005a      	lsls	r2, r3, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	4413      	add	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	dd09      	ble.n	80019ea <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	3b01      	subs	r3, #1
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	4413      	add	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	3302      	adds	r3, #2
 80019e8:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80019ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	da99      	bge.n	8001926 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80019f2:	bf00      	nop
 80019f4:	bf00      	nop
 80019f6:	372c      	adds	r7, #44	; 0x2c
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd90      	pop	{r4, r7, pc}

080019fc <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001a00:	2200      	movs	r2, #0
 8001a02:	2110      	movs	r1, #16
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <ILI9341_SPI_Init+0x14>)
 8001a06:	f001 fa1d 	bl	8002e44 <HAL_GPIO_WritePin>
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000

08001a14 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001a1e:	1df9      	adds	r1, r7, #7
 8001a20:	2301      	movs	r3, #1
 8001a22:	2201      	movs	r2, #1
 8001a24:	4803      	ldr	r0, [pc, #12]	; (8001a34 <ILI9341_SPI_Send+0x20>)
 8001a26:	f005 faac 	bl	8006f82 <HAL_SPI_Transmit>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000150 	.word	0x20000150

08001a38 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2110      	movs	r1, #16
 8001a46:	480a      	ldr	r0, [pc, #40]	; (8001a70 <ILI9341_Write_Command+0x38>)
 8001a48:	f001 f9fc 	bl	8002e44 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2140      	movs	r1, #64	; 0x40
 8001a50:	4807      	ldr	r0, [pc, #28]	; (8001a70 <ILI9341_Write_Command+0x38>)
 8001a52:	f001 f9f7 	bl	8002e44 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ffdb 	bl	8001a14 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2110      	movs	r1, #16
 8001a62:	4803      	ldr	r0, [pc, #12]	; (8001a70 <ILI9341_Write_Command+0x38>)
 8001a64:	f001 f9ee 	bl	8002e44 <HAL_GPIO_WritePin>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000

08001a74 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2140      	movs	r1, #64	; 0x40
 8001a82:	480a      	ldr	r0, [pc, #40]	; (8001aac <ILI9341_Write_Data+0x38>)
 8001a84:	f001 f9de 	bl	8002e44 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2110      	movs	r1, #16
 8001a8c:	4807      	ldr	r0, [pc, #28]	; (8001aac <ILI9341_Write_Data+0x38>)
 8001a8e:	f001 f9d9 	bl	8002e44 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ffbd 	bl	8001a14 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	4803      	ldr	r0, [pc, #12]	; (8001aac <ILI9341_Write_Data+0x38>)
 8001aa0:	f001 f9d0 	bl	8002e44 <HAL_GPIO_WritePin>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000

08001ab0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	4623      	mov	r3, r4
 8001ac0:	80fb      	strh	r3, [r7, #6]
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80bb      	strh	r3, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	807b      	strh	r3, [r7, #2]
 8001aca:	4613      	mov	r3, r2
 8001acc:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001ace:	202a      	movs	r0, #42	; 0x2a
 8001ad0:	f7ff ffb2 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ffc9 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ffc4 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	0a1b      	lsrs	r3, r3, #8
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ffbd 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ffb8 	bl	8001a74 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001b04:	202b      	movs	r0, #43	; 0x2b
 8001b06:	f7ff ff97 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001b0a:	88bb      	ldrh	r3, [r7, #4]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ffae 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001b18:	88bb      	ldrh	r3, [r7, #4]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ffa9 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001b22:	883b      	ldrh	r3, [r7, #0]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ffa2 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001b30:	883b      	ldrh	r3, [r7, #0]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff9d 	bl	8001a74 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001b3a:	202c      	movs	r0, #44	; 0x2c
 8001b3c:	f7ff ff7c 	bl	8001a38 <ILI9341_Write_Command>
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd90      	pop	{r4, r7, pc}

08001b48 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2120      	movs	r1, #32
 8001b50:	480a      	ldr	r0, [pc, #40]	; (8001b7c <ILI9341_Reset+0x34>)
 8001b52:	f001 f977 	bl	8002e44 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001b56:	20c8      	movs	r0, #200	; 0xc8
 8001b58:	f000 fe8a 	bl	8002870 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2110      	movs	r1, #16
 8001b60:	4806      	ldr	r0, [pc, #24]	; (8001b7c <ILI9341_Reset+0x34>)
 8001b62:	f001 f96f 	bl	8002e44 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001b66:	20c8      	movs	r0, #200	; 0xc8
 8001b68:	f000 fe82 	bl	8002870 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2120      	movs	r1, #32
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <ILI9341_Reset+0x34>)
 8001b72:	f001 f967 	bl	8002e44 <HAL_GPIO_WritePin>
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000

08001b80 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8001b8e:	2036      	movs	r0, #54	; 0x36
 8001b90:	f7ff ff52 	bl	8001a38 <ILI9341_Write_Command>
HAL_Delay(1);
 8001b94:	2001      	movs	r0, #1
 8001b96:	f000 fe6b 	bl	8002870 <HAL_Delay>
	
switch(screen_rotation) 
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d837      	bhi.n	8001c10 <ILI9341_Set_Rotation+0x90>
 8001ba0:	a201      	add	r2, pc, #4	; (adr r2, 8001ba8 <ILI9341_Set_Rotation+0x28>)
 8001ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba6:	bf00      	nop
 8001ba8:	08001bb9 	.word	0x08001bb9
 8001bac:	08001bcf 	.word	0x08001bcf
 8001bb0:	08001be5 	.word	0x08001be5
 8001bb4:	08001bfb 	.word	0x08001bfb
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001bb8:	2048      	movs	r0, #72	; 0x48
 8001bba:	f7ff ff5b 	bl	8001a74 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <ILI9341_Set_Rotation+0x9c>)
 8001bc0:	22f0      	movs	r2, #240	; 0xf0
 8001bc2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <ILI9341_Set_Rotation+0xa0>)
 8001bc6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bca:	801a      	strh	r2, [r3, #0]
			break;
 8001bcc:	e021      	b.n	8001c12 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001bce:	2028      	movs	r0, #40	; 0x28
 8001bd0:	f7ff ff50 	bl	8001a74 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <ILI9341_Set_Rotation+0x9c>)
 8001bd6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bda:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <ILI9341_Set_Rotation+0xa0>)
 8001bde:	22f0      	movs	r2, #240	; 0xf0
 8001be0:	801a      	strh	r2, [r3, #0]
			break;
 8001be2:	e016      	b.n	8001c12 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001be4:	2088      	movs	r0, #136	; 0x88
 8001be6:	f7ff ff45 	bl	8001a74 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <ILI9341_Set_Rotation+0x9c>)
 8001bec:	22f0      	movs	r2, #240	; 0xf0
 8001bee:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <ILI9341_Set_Rotation+0xa0>)
 8001bf2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bf6:	801a      	strh	r2, [r3, #0]
			break;
 8001bf8:	e00b      	b.n	8001c12 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001bfa:	20e8      	movs	r0, #232	; 0xe8
 8001bfc:	f7ff ff3a 	bl	8001a74 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <ILI9341_Set_Rotation+0x9c>)
 8001c02:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c06:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <ILI9341_Set_Rotation+0xa0>)
 8001c0a:	22f0      	movs	r2, #240	; 0xf0
 8001c0c:	801a      	strh	r2, [r3, #0]
			break;
 8001c0e:	e000      	b.n	8001c12 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001c10:	bf00      	nop
	}
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000000a 	.word	0x2000000a
 8001c20:	20000008 	.word	0x20000008

08001c24 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2120      	movs	r1, #32
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <ILI9341_Enable+0x14>)
 8001c2e:	f001 f909 	bl	8002e44 <HAL_GPIO_WritePin>
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000

08001c3c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001c40:	f7ff fff0 	bl	8001c24 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001c44:	f7ff feda 	bl	80019fc <ILI9341_SPI_Init>
ILI9341_Reset();
 8001c48:	f7ff ff7e 	bl	8001b48 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f7ff fef3 	bl	8001a38 <ILI9341_Write_Command>
HAL_Delay(1000);
 8001c52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c56:	f000 fe0b 	bl	8002870 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001c5a:	20cb      	movs	r0, #203	; 0xcb
 8001c5c:	f7ff feec 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001c60:	2039      	movs	r0, #57	; 0x39
 8001c62:	f7ff ff07 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001c66:	202c      	movs	r0, #44	; 0x2c
 8001c68:	f7ff ff04 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f7ff ff01 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001c72:	2034      	movs	r0, #52	; 0x34
 8001c74:	f7ff fefe 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f7ff fefb 	bl	8001a74 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001c7e:	20cf      	movs	r0, #207	; 0xcf
 8001c80:	f7ff feda 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001c84:	2000      	movs	r0, #0
 8001c86:	f7ff fef5 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001c8a:	20c1      	movs	r0, #193	; 0xc1
 8001c8c:	f7ff fef2 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001c90:	2030      	movs	r0, #48	; 0x30
 8001c92:	f7ff feef 	bl	8001a74 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001c96:	20e8      	movs	r0, #232	; 0xe8
 8001c98:	f7ff fece 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001c9c:	2085      	movs	r0, #133	; 0x85
 8001c9e:	f7ff fee9 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff fee6 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001ca8:	2078      	movs	r0, #120	; 0x78
 8001caa:	f7ff fee3 	bl	8001a74 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001cae:	20ea      	movs	r0, #234	; 0xea
 8001cb0:	f7ff fec2 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7ff fedd 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f7ff feda 	bl	8001a74 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001cc0:	20ed      	movs	r0, #237	; 0xed
 8001cc2:	f7ff feb9 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001cc6:	2064      	movs	r0, #100	; 0x64
 8001cc8:	f7ff fed4 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f7ff fed1 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001cd2:	2012      	movs	r0, #18
 8001cd4:	f7ff fece 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001cd8:	2081      	movs	r0, #129	; 0x81
 8001cda:	f7ff fecb 	bl	8001a74 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001cde:	20f7      	movs	r0, #247	; 0xf7
 8001ce0:	f7ff feaa 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001ce4:	2020      	movs	r0, #32
 8001ce6:	f7ff fec5 	bl	8001a74 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001cea:	20c0      	movs	r0, #192	; 0xc0
 8001cec:	f7ff fea4 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001cf0:	2023      	movs	r0, #35	; 0x23
 8001cf2:	f7ff febf 	bl	8001a74 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001cf6:	20c1      	movs	r0, #193	; 0xc1
 8001cf8:	f7ff fe9e 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001cfc:	2010      	movs	r0, #16
 8001cfe:	f7ff feb9 	bl	8001a74 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001d02:	20c5      	movs	r0, #197	; 0xc5
 8001d04:	f7ff fe98 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001d08:	203e      	movs	r0, #62	; 0x3e
 8001d0a:	f7ff feb3 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001d0e:	2028      	movs	r0, #40	; 0x28
 8001d10:	f7ff feb0 	bl	8001a74 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001d14:	20c7      	movs	r0, #199	; 0xc7
 8001d16:	f7ff fe8f 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001d1a:	2086      	movs	r0, #134	; 0x86
 8001d1c:	f7ff feaa 	bl	8001a74 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001d20:	2036      	movs	r0, #54	; 0x36
 8001d22:	f7ff fe89 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001d26:	2048      	movs	r0, #72	; 0x48
 8001d28:	f7ff fea4 	bl	8001a74 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001d2c:	203a      	movs	r0, #58	; 0x3a
 8001d2e:	f7ff fe83 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001d32:	2055      	movs	r0, #85	; 0x55
 8001d34:	f7ff fe9e 	bl	8001a74 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001d38:	20b1      	movs	r0, #177	; 0xb1
 8001d3a:	f7ff fe7d 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff fe98 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001d44:	2018      	movs	r0, #24
 8001d46:	f7ff fe95 	bl	8001a74 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001d4a:	20b6      	movs	r0, #182	; 0xb6
 8001d4c:	f7ff fe74 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001d50:	2008      	movs	r0, #8
 8001d52:	f7ff fe8f 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001d56:	2082      	movs	r0, #130	; 0x82
 8001d58:	f7ff fe8c 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001d5c:	2027      	movs	r0, #39	; 0x27
 8001d5e:	f7ff fe89 	bl	8001a74 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001d62:	20f2      	movs	r0, #242	; 0xf2
 8001d64:	f7ff fe68 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff fe83 	bl	8001a74 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001d6e:	2026      	movs	r0, #38	; 0x26
 8001d70:	f7ff fe62 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001d74:	2001      	movs	r0, #1
 8001d76:	f7ff fe7d 	bl	8001a74 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001d7a:	20e0      	movs	r0, #224	; 0xe0
 8001d7c:	f7ff fe5c 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001d80:	200f      	movs	r0, #15
 8001d82:	f7ff fe77 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001d86:	2031      	movs	r0, #49	; 0x31
 8001d88:	f7ff fe74 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001d8c:	202b      	movs	r0, #43	; 0x2b
 8001d8e:	f7ff fe71 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001d92:	200c      	movs	r0, #12
 8001d94:	f7ff fe6e 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001d98:	200e      	movs	r0, #14
 8001d9a:	f7ff fe6b 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001d9e:	2008      	movs	r0, #8
 8001da0:	f7ff fe68 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001da4:	204e      	movs	r0, #78	; 0x4e
 8001da6:	f7ff fe65 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001daa:	20f1      	movs	r0, #241	; 0xf1
 8001dac:	f7ff fe62 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001db0:	2037      	movs	r0, #55	; 0x37
 8001db2:	f7ff fe5f 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001db6:	2007      	movs	r0, #7
 8001db8:	f7ff fe5c 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001dbc:	2010      	movs	r0, #16
 8001dbe:	f7ff fe59 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001dc2:	2003      	movs	r0, #3
 8001dc4:	f7ff fe56 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001dc8:	200e      	movs	r0, #14
 8001dca:	f7ff fe53 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001dce:	2009      	movs	r0, #9
 8001dd0:	f7ff fe50 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff fe4d 	bl	8001a74 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001dda:	20e1      	movs	r0, #225	; 0xe1
 8001ddc:	f7ff fe2c 	bl	8001a38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff fe47 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001de6:	200e      	movs	r0, #14
 8001de8:	f7ff fe44 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001dec:	2014      	movs	r0, #20
 8001dee:	f7ff fe41 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001df2:	2003      	movs	r0, #3
 8001df4:	f7ff fe3e 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001df8:	2011      	movs	r0, #17
 8001dfa:	f7ff fe3b 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001dfe:	2007      	movs	r0, #7
 8001e00:	f7ff fe38 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001e04:	2031      	movs	r0, #49	; 0x31
 8001e06:	f7ff fe35 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001e0a:	20c1      	movs	r0, #193	; 0xc1
 8001e0c:	f7ff fe32 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001e10:	2048      	movs	r0, #72	; 0x48
 8001e12:	f7ff fe2f 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001e16:	2008      	movs	r0, #8
 8001e18:	f7ff fe2c 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001e1c:	200f      	movs	r0, #15
 8001e1e:	f7ff fe29 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001e22:	200c      	movs	r0, #12
 8001e24:	f7ff fe26 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001e28:	2031      	movs	r0, #49	; 0x31
 8001e2a:	f7ff fe23 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001e2e:	2036      	movs	r0, #54	; 0x36
 8001e30:	f7ff fe20 	bl	8001a74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001e34:	200f      	movs	r0, #15
 8001e36:	f7ff fe1d 	bl	8001a74 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001e3a:	2011      	movs	r0, #17
 8001e3c:	f7ff fdfc 	bl	8001a38 <ILI9341_Write_Command>
HAL_Delay(120);
 8001e40:	2078      	movs	r0, #120	; 0x78
 8001e42:	f000 fd15 	bl	8002870 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001e46:	2029      	movs	r0, #41	; 0x29
 8001e48:	f7ff fdf6 	bl	8001a38 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f7ff fe97 	bl	8001b80 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8001e52:	200a      	movs	r0, #10
 8001e54:	f000 fd0c 	bl	8002870 <HAL_Delay>
//
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001e5c:	b5b0      	push	{r4, r5, r7, lr}
 8001e5e:	b08c      	sub	sp, #48	; 0x30
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	80fb      	strh	r3, [r7, #6]
 8001e68:	466b      	mov	r3, sp
 8001e6a:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e78:	d202      	bcs.n	8001e80 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7e:	e002      	b.n	8001e86 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001e80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001e86:	2201      	movs	r2, #1
 8001e88:	2140      	movs	r1, #64	; 0x40
 8001e8a:	483d      	ldr	r0, [pc, #244]	; (8001f80 <ILI9341_Draw_Colour_Burst+0x124>)
 8001e8c:	f000 ffda 	bl	8002e44 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2110      	movs	r1, #16
 8001e94:	483a      	ldr	r0, [pc, #232]	; (8001f80 <ILI9341_Draw_Colour_Burst+0x124>)
 8001e96:	f000 ffd5 	bl	8002e44 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8001ea4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001ea6:	4623      	mov	r3, r4
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	4620      	mov	r0, r4
 8001eae:	f04f 0100 	mov.w	r1, #0
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	00cb      	lsls	r3, r1, #3
 8001ebc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ec0:	00c2      	lsls	r2, r0, #3
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f04f 0100 	mov.w	r1, #0
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	00cb      	lsls	r3, r1, #3
 8001ed2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ed6:	00c2      	lsls	r2, r0, #3
 8001ed8:	1de3      	adds	r3, r4, #7
 8001eda:	08db      	lsrs	r3, r3, #3
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	ebad 0d03 	sub.w	sp, sp, r3
 8001ee2:	466b      	mov	r3, sp
 8001ee4:	3300      	adds	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eec:	e00e      	b.n	8001f0c <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ef8:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efc:	3301      	adds	r3, #1
 8001efe:	88fa      	ldrh	r2, [r7, #6]
 8001f00:	b2d1      	uxtb	r1, r2
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f08:	3302      	adds	r3, #2
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d3ec      	bcc.n	8001eee <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f22:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f28:	fbb3 f2f2 	udiv	r2, r3, r2
 8001f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f2e:	fb01 f202 	mul.w	r2, r1, r2
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d010      	beq.n	8001f5e <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f40:	e009      	b.n	8001f56 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001f42:	69b9      	ldr	r1, [r7, #24]
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	230a      	movs	r3, #10
 8001f4a:	480e      	ldr	r0, [pc, #56]	; (8001f84 <ILI9341_Draw_Colour_Burst+0x128>)
 8001f4c:	f005 f819 	bl	8006f82 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f52:	3301      	adds	r3, #1
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d3f1      	bcc.n	8001f42 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001f5e:	69b9      	ldr	r1, [r7, #24]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	230a      	movs	r3, #10
 8001f66:	4807      	ldr	r0, [pc, #28]	; (8001f84 <ILI9341_Draw_Colour_Burst+0x128>)
 8001f68:	f005 f80b 	bl	8006f82 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2110      	movs	r1, #16
 8001f70:	4803      	ldr	r0, [pc, #12]	; (8001f80 <ILI9341_Draw_Colour_Burst+0x124>)
 8001f72:	f000 ff67 	bl	8002e44 <HAL_GPIO_WritePin>
 8001f76:	46ad      	mov	sp, r5
}
 8001f78:	bf00      	nop
 8001f7a:	3730      	adds	r7, #48	; 0x30
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	20000150 	.word	0x20000150

08001f88 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <ILI9341_Fill_Screen+0x44>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <ILI9341_Fill_Screen+0x48>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff fd85 	bl	8001ab0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <ILI9341_Fill_Screen+0x44>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <ILI9341_Fill_Screen+0x48>)
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	fb03 f302 	mul.w	r3, r3, r2
 8001fb8:	461a      	mov	r2, r3
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff4c 	bl	8001e5c <ILI9341_Draw_Colour_Burst>
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	2000000a 	.word	0x2000000a
 8001fd0:	20000008 	.word	0x20000008

08001fd4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	80fb      	strh	r3, [r7, #6]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	80bb      	strh	r3, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001fe6:	4b5b      	ldr	r3, [pc, #364]	; (8002154 <ILI9341_Draw_Pixel+0x180>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	88fa      	ldrh	r2, [r7, #6]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	f080 80ac 	bcs.w	800214c <ILI9341_Draw_Pixel+0x178>
 8001ff4:	4b58      	ldr	r3, [pc, #352]	; (8002158 <ILI9341_Draw_Pixel+0x184>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	88ba      	ldrh	r2, [r7, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	f080 80a5 	bcs.w	800214c <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002002:	2200      	movs	r2, #0
 8002004:	2140      	movs	r1, #64	; 0x40
 8002006:	4855      	ldr	r0, [pc, #340]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 8002008:	f000 ff1c 	bl	8002e44 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800200c:	2200      	movs	r2, #0
 800200e:	2110      	movs	r1, #16
 8002010:	4852      	ldr	r0, [pc, #328]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 8002012:	f000 ff17 	bl	8002e44 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002016:	202a      	movs	r0, #42	; 0x2a
 8002018:	f7ff fcfc 	bl	8001a14 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800201c:	2201      	movs	r2, #1
 800201e:	2140      	movs	r1, #64	; 0x40
 8002020:	484e      	ldr	r0, [pc, #312]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 8002022:	f000 ff0f 	bl	8002e44 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002026:	2201      	movs	r2, #1
 8002028:	2110      	movs	r1, #16
 800202a:	484c      	ldr	r0, [pc, #304]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 800202c:	f000 ff0a 	bl	8002e44 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002030:	2200      	movs	r2, #0
 8002032:	2110      	movs	r1, #16
 8002034:	4849      	ldr	r0, [pc, #292]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 8002036:	f000 ff05 	bl	8002e44 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	b29b      	uxth	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	753b      	strb	r3, [r7, #20]
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	757b      	strb	r3, [r7, #21]
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	3301      	adds	r3, #1
 800204e:	121b      	asrs	r3, r3, #8
 8002050:	b2db      	uxtb	r3, r3
 8002052:	75bb      	strb	r3, [r7, #22]
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	3301      	adds	r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800205e:	f107 0114 	add.w	r1, r7, #20
 8002062:	2301      	movs	r3, #1
 8002064:	2204      	movs	r2, #4
 8002066:	483e      	ldr	r0, [pc, #248]	; (8002160 <ILI9341_Draw_Pixel+0x18c>)
 8002068:	f004 ff8b 	bl	8006f82 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	2110      	movs	r1, #16
 8002070:	483a      	ldr	r0, [pc, #232]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 8002072:	f000 fee7 	bl	8002e44 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002076:	2200      	movs	r2, #0
 8002078:	2140      	movs	r1, #64	; 0x40
 800207a:	4838      	ldr	r0, [pc, #224]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 800207c:	f000 fee2 	bl	8002e44 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002080:	2200      	movs	r2, #0
 8002082:	2110      	movs	r1, #16
 8002084:	4835      	ldr	r0, [pc, #212]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 8002086:	f000 fedd 	bl	8002e44 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800208a:	202b      	movs	r0, #43	; 0x2b
 800208c:	f7ff fcc2 	bl	8001a14 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002090:	2201      	movs	r2, #1
 8002092:	2140      	movs	r1, #64	; 0x40
 8002094:	4831      	ldr	r0, [pc, #196]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 8002096:	f000 fed5 	bl	8002e44 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800209a:	2201      	movs	r2, #1
 800209c:	2110      	movs	r1, #16
 800209e:	482f      	ldr	r0, [pc, #188]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 80020a0:	f000 fed0 	bl	8002e44 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2110      	movs	r1, #16
 80020a8:	482c      	ldr	r0, [pc, #176]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 80020aa:	f000 fecb 	bl	8002e44 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80020ae:	88bb      	ldrh	r3, [r7, #4]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	743b      	strb	r3, [r7, #16]
 80020b8:	88bb      	ldrh	r3, [r7, #4]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	747b      	strb	r3, [r7, #17]
 80020be:	88bb      	ldrh	r3, [r7, #4]
 80020c0:	3301      	adds	r3, #1
 80020c2:	121b      	asrs	r3, r3, #8
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	74bb      	strb	r3, [r7, #18]
 80020c8:	88bb      	ldrh	r3, [r7, #4]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80020d2:	f107 0110 	add.w	r1, r7, #16
 80020d6:	2301      	movs	r3, #1
 80020d8:	2204      	movs	r2, #4
 80020da:	4821      	ldr	r0, [pc, #132]	; (8002160 <ILI9341_Draw_Pixel+0x18c>)
 80020dc:	f004 ff51 	bl	8006f82 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80020e0:	2201      	movs	r2, #1
 80020e2:	2110      	movs	r1, #16
 80020e4:	481d      	ldr	r0, [pc, #116]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 80020e6:	f000 fead 	bl	8002e44 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80020ea:	2200      	movs	r2, #0
 80020ec:	2140      	movs	r1, #64	; 0x40
 80020ee:	481b      	ldr	r0, [pc, #108]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 80020f0:	f000 fea8 	bl	8002e44 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80020f4:	2200      	movs	r2, #0
 80020f6:	2110      	movs	r1, #16
 80020f8:	4818      	ldr	r0, [pc, #96]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 80020fa:	f000 fea3 	bl	8002e44 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80020fe:	202c      	movs	r0, #44	; 0x2c
 8002100:	f7ff fc88 	bl	8001a14 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002104:	2201      	movs	r2, #1
 8002106:	2140      	movs	r1, #64	; 0x40
 8002108:	4814      	ldr	r0, [pc, #80]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 800210a:	f000 fe9b 	bl	8002e44 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800210e:	2201      	movs	r2, #1
 8002110:	2110      	movs	r1, #16
 8002112:	4812      	ldr	r0, [pc, #72]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 8002114:	f000 fe96 	bl	8002e44 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	2110      	movs	r1, #16
 800211c:	480f      	ldr	r0, [pc, #60]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 800211e:	f000 fe91 	bl	8002e44 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002122:	887b      	ldrh	r3, [r7, #2]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	b29b      	uxth	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	733b      	strb	r3, [r7, #12]
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002132:	f107 010c 	add.w	r1, r7, #12
 8002136:	2301      	movs	r3, #1
 8002138:	2202      	movs	r2, #2
 800213a:	4809      	ldr	r0, [pc, #36]	; (8002160 <ILI9341_Draw_Pixel+0x18c>)
 800213c:	f004 ff21 	bl	8006f82 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002140:	2201      	movs	r2, #1
 8002142:	2110      	movs	r1, #16
 8002144:	4805      	ldr	r0, [pc, #20]	; (800215c <ILI9341_Draw_Pixel+0x188>)
 8002146:	f000 fe7d 	bl	8002e44 <HAL_GPIO_WritePin>
 800214a:	e000      	b.n	800214e <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800214c:	bf00      	nop
	
}
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	2000000a 	.word	0x2000000a
 8002158:	20000008 	.word	0x20000008
 800215c:	40021000 	.word	0x40021000
 8002160:	20000150 	.word	0x20000150

08002164 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	int i =0;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8002170:	e036      	b.n	80021e0 <speed_test_LCD+0x7c>
	{
		i ++;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	3301      	adds	r3, #1
 8002176:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 800218c:	4819      	ldr	r0, [pc, #100]	; (80021f4 <speed_test_LCD+0x90>)
 800218e:	f004 fe5a 	bl	8006e46 <HAL_RNG_GetRandomNumber>
 8002192:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002198:	4816      	ldr	r0, [pc, #88]	; (80021f4 <speed_test_LCD+0x90>)
 800219a:	f004 fe54 	bl	8006e46 <HAL_RNG_GetRandomNumber>
 800219e:	6138      	str	r0, [r7, #16]
		yr = random_num;
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80021a4:	4813      	ldr	r0, [pc, #76]	; (80021f4 <speed_test_LCD+0x90>)
 80021a6:	f004 fe4e 	bl	8006e46 <HAL_RNG_GetRandomNumber>
 80021aa:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80021b0:	4810      	ldr	r0, [pc, #64]	; (80021f4 <speed_test_LCD+0x90>)
 80021b2:	f004 fe48 	bl	8006e46 <HAL_RNG_GetRandomNumber>
 80021b6:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 80021bc:	89fb      	ldrh	r3, [r7, #14]
 80021be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c2:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 80021c4:	89bb      	ldrh	r3, [r7, #12]
 80021c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ca:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 80021cc:	897b      	ldrh	r3, [r7, #10]
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 80021d4:	893b      	ldrh	r3, [r7, #8]
 80021d6:	897a      	ldrh	r2, [r7, #10]
 80021d8:	89b9      	ldrh	r1, [r7, #12]
 80021da:	89f8      	ldrh	r0, [r7, #14]
 80021dc:	f7ff fb86 	bl	80018ec <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	ddc4      	ble.n	8002172 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000028c 	.word	0x2000028c

080021f8 <draw_pixel>:

uint8_t gddram[4][128];


void draw_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
 8002202:	460b      	mov	r3, r1
 8002204:	71bb      	strb	r3, [r7, #6]
 8002206:	4613      	mov	r3, r2
 8002208:	717b      	strb	r3, [r7, #5]
	if(x<128 && y<32)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	2b00      	cmp	r3, #0
 8002210:	db3b      	blt.n	800228a <draw_pixel+0x92>
 8002212:	79bb      	ldrb	r3, [r7, #6]
 8002214:	2b1f      	cmp	r3, #31
 8002216:	d838      	bhi.n	800228a <draw_pixel+0x92>
	{
		uint8_t pixel = 0x01;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
		uint8_t line = y>>3;
 800221c:	79bb      	ldrb	r3, [r7, #6]
 800221e:	08db      	lsrs	r3, r3, #3
 8002220:	73bb      	strb	r3, [r7, #14]
		uint8_t byte = pixel<<(y%8);
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	79bb      	ldrb	r3, [r7, #6]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	737b      	strb	r3, [r7, #13]
		if(color)
 8002230:	797b      	ldrb	r3, [r7, #5]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d012      	beq.n	800225c <draw_pixel+0x64>
			gddram[line][x] |= byte;
 8002236:	7bba      	ldrb	r2, [r7, #14]
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	4917      	ldr	r1, [pc, #92]	; (8002298 <draw_pixel+0xa0>)
 800223c:	01d2      	lsls	r2, r2, #7
 800223e:	440a      	add	r2, r1
 8002240:	4413      	add	r3, r2
 8002242:	7818      	ldrb	r0, [r3, #0]
 8002244:	7bba      	ldrb	r2, [r7, #14]
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	7b79      	ldrb	r1, [r7, #13]
 800224a:	4301      	orrs	r1, r0
 800224c:	b2c8      	uxtb	r0, r1
 800224e:	4912      	ldr	r1, [pc, #72]	; (8002298 <draw_pixel+0xa0>)
 8002250:	01d2      	lsls	r2, r2, #7
 8002252:	440a      	add	r2, r1
 8002254:	4413      	add	r3, r2
 8002256:	4602      	mov	r2, r0
 8002258:	701a      	strb	r2, [r3, #0]
		else
			gddram[line][x] &= ~byte;
	}
}
 800225a:	e016      	b.n	800228a <draw_pixel+0x92>
			gddram[line][x] &= ~byte;
 800225c:	7bba      	ldrb	r2, [r7, #14]
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	490d      	ldr	r1, [pc, #52]	; (8002298 <draw_pixel+0xa0>)
 8002262:	01d2      	lsls	r2, r2, #7
 8002264:	440a      	add	r2, r1
 8002266:	4413      	add	r3, r2
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	b25a      	sxtb	r2, r3
 800226c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002270:	43db      	mvns	r3, r3
 8002272:	b25b      	sxtb	r3, r3
 8002274:	4013      	ands	r3, r2
 8002276:	b259      	sxtb	r1, r3
 8002278:	7bba      	ldrb	r2, [r7, #14]
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	b2c8      	uxtb	r0, r1
 800227e:	4906      	ldr	r1, [pc, #24]	; (8002298 <draw_pixel+0xa0>)
 8002280:	01d2      	lsls	r2, r2, #7
 8002282:	440a      	add	r2, r1
 8002284:	4413      	add	r3, r2
 8002286:	4602      	mov	r2, r0
 8002288:	701a      	strb	r2, [r3, #0]
}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000384 	.word	0x20000384

0800229c <graphics_Glyph>:


void graphics_Glyph(unsigned char left, unsigned char top,
			   unsigned char width, unsigned char height,
			   const unsigned char *glyph, unsigned char store_width)
{
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4604      	mov	r4, r0
 80022a4:	4608      	mov	r0, r1
 80022a6:	4611      	mov	r1, r2
 80022a8:	461a      	mov	r2, r3
 80022aa:	4623      	mov	r3, r4
 80022ac:	71fb      	strb	r3, [r7, #7]
 80022ae:	4603      	mov	r3, r0
 80022b0:	71bb      	strb	r3, [r7, #6]
 80022b2:	460b      	mov	r3, r1
 80022b4:	717b      	strb	r3, [r7, #5]
 80022b6:	4613      	mov	r3, r2
 80022b8:	713b      	strb	r3, [r7, #4]
	unsigned char x,b,glyph_idx, bitmask;
	int8_t y;
	const unsigned char *glyph_scan = glyph;
 80022ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022bc:	613b      	str	r3, [r7, #16]

	for (x=0; x<width; x++)
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]
 80022c2:	e04d      	b.n	8002360 <graphics_Glyph+0xc4>
	{
		for (y=0; y<height; y++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	75bb      	strb	r3, [r7, #22]
 80022c8:	e042      	b.n	8002350 <graphics_Glyph+0xb4>
		{
			glyph_idx = (x / 8) + y*store_width;
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
 80022cc:	08db      	lsrs	r3, r3, #3
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	7dbb      	ldrb	r3, [r7, #22]
 80022d2:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80022d6:	fb11 f303 	smulbb	r3, r1, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	4413      	add	r3, r2
 80022de:	73fb      	strb	r3, [r7, #15]
			b = glyph_scan[glyph_idx];
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4413      	add	r3, r2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	73bb      	strb	r3, [r7, #14]
			bitmask = 1<<(7-(x % 8));
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	2201      	movs	r2, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	737b      	strb	r3, [r7, #13]
			if (b & bitmask)
 80022fa:	7bba      	ldrb	r2, [r7, #14]
 80022fc:	7b7b      	ldrb	r3, [r7, #13]
 80022fe:	4013      	ands	r3, r2
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00f      	beq.n	8002326 <graphics_Glyph+0x8a>
				draw_pixel(left-width+x,top+y,1);
 8002306:	79fa      	ldrb	r2, [r7, #7]
 8002308:	797b      	ldrb	r3, [r7, #5]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	b2da      	uxtb	r2, r3
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	4413      	add	r3, r2
 8002312:	b2d8      	uxtb	r0, r3
 8002314:	7dba      	ldrb	r2, [r7, #22]
 8002316:	79bb      	ldrb	r3, [r7, #6]
 8002318:	4413      	add	r3, r2
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2201      	movs	r2, #1
 800231e:	4619      	mov	r1, r3
 8002320:	f7ff ff6a 	bl	80021f8 <draw_pixel>
 8002324:	e00e      	b.n	8002344 <graphics_Glyph+0xa8>
			else
				draw_pixel(left-width+x,top+y,0);
 8002326:	79fa      	ldrb	r2, [r7, #7]
 8002328:	797b      	ldrb	r3, [r7, #5]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	b2da      	uxtb	r2, r3
 800232e:	7dfb      	ldrb	r3, [r7, #23]
 8002330:	4413      	add	r3, r2
 8002332:	b2d8      	uxtb	r0, r3
 8002334:	7dba      	ldrb	r2, [r7, #22]
 8002336:	79bb      	ldrb	r3, [r7, #6]
 8002338:	4413      	add	r3, r2
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2200      	movs	r2, #0
 800233e:	4619      	mov	r1, r3
 8002340:	f7ff ff5a 	bl	80021f8 <draw_pixel>
		for (y=0; y<height; y++)
 8002344:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	3301      	adds	r3, #1
 800234c:	b2db      	uxtb	r3, r3
 800234e:	75bb      	strb	r3, [r7, #22]
 8002350:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002354:	793b      	ldrb	r3, [r7, #4]
 8002356:	429a      	cmp	r2, r3
 8002358:	dbb7      	blt.n	80022ca <graphics_Glyph+0x2e>
	for (x=0; x<width; x++)
 800235a:	7dfb      	ldrb	r3, [r7, #23]
 800235c:	3301      	adds	r3, #1
 800235e:	75fb      	strb	r3, [r7, #23]
 8002360:	7dfa      	ldrb	r2, [r7, #23]
 8002362:	797b      	ldrb	r3, [r7, #5]
 8002364:	429a      	cmp	r2, r3
 8002366:	d3ad      	bcc.n	80022c4 <graphics_Glyph+0x28>
		}
	}
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	371c      	adds	r7, #28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd90      	pop	{r4, r7, pc}
	...

08002374 <graphics_text>:

void graphics_text(unsigned char left, unsigned char top, unsigned char font, char *str)
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b089      	sub	sp, #36	; 0x24
 8002378:	af02      	add	r7, sp, #8
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	4603      	mov	r3, r0
 800237e:	71fb      	strb	r3, [r7, #7]
 8002380:	460b      	mov	r3, r1
 8002382:	71bb      	strb	r3, [r7, #6]
 8002384:	4613      	mov	r3, r2
 8002386:	717b      	strb	r3, [r7, #5]
	unsigned char x = left;
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	75fb      	strb	r3, [r7, #23]
 	unsigned char width;
	unsigned char height;
	unsigned char store_width;
	const unsigned char *glyph_ptr;

  while(*str != 0x00)
 800238c:	e081      	b.n	8002492 <graphics_text+0x11e>
  {

		glyph = (unsigned char)*str;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	75bb      	strb	r3, [r7, #22]

		/* check to make sure the symbol is a legal one */
		/* if not then just replace it with the default character */
		if((glyph < fonts[font].glyph_beg) || (glyph > fonts[font].glyph_end))
 8002394:	797a      	ldrb	r2, [r7, #5]
 8002396:	4944      	ldr	r1, [pc, #272]	; (80024a8 <graphics_text+0x134>)
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	3310      	adds	r3, #16
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	7dba      	ldrb	r2, [r7, #22]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d30b      	bcc.n	80023c4 <graphics_text+0x50>
 80023ac:	797a      	ldrb	r2, [r7, #5]
 80023ae:	493e      	ldr	r1, [pc, #248]	; (80024a8 <graphics_text+0x134>)
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	3311      	adds	r3, #17
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	7dba      	ldrb	r2, [r7, #22]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d909      	bls.n	80023d8 <graphics_text+0x64>
		{
			glyph = fonts[font].glyph_def;
 80023c4:	797a      	ldrb	r2, [r7, #5]
 80023c6:	4938      	ldr	r1, [pc, #224]	; (80024a8 <graphics_text+0x134>)
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	3312      	adds	r3, #18
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	75bb      	strb	r3, [r7, #22]
		}


		/* make zero based index into the font data arrays */
		glyph -= fonts[font].glyph_beg;
 80023d8:	797a      	ldrb	r2, [r7, #5]
 80023da:	4933      	ldr	r1, [pc, #204]	; (80024a8 <graphics_text+0x134>)
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	3310      	adds	r3, #16
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	7dba      	ldrb	r2, [r7, #22]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	75bb      	strb	r3, [r7, #22]
		width = fonts[font].fixed_width;	/* check if it is a fixed width */
 80023f0:	797a      	ldrb	r2, [r7, #5]
 80023f2:	492d      	ldr	r1, [pc, #180]	; (80024a8 <graphics_text+0x134>)
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	3308      	adds	r3, #8
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	757b      	strb	r3, [r7, #21]
		if(width == 0)
 8002404:	7d7b      	ldrb	r3, [r7, #21]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <graphics_text+0xb0>
		{
			width=fonts[font].width_table[glyph];	/* get the variable width instead */
 800240a:	797a      	ldrb	r2, [r7, #5]
 800240c:	4926      	ldr	r1, [pc, #152]	; (80024a8 <graphics_text+0x134>)
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	330c      	adds	r3, #12
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	7dbb      	ldrb	r3, [r7, #22]
 800241e:	4413      	add	r3, r2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	757b      	strb	r3, [r7, #21]
		}

		height = fonts[font].glyph_height;
 8002424:	797a      	ldrb	r2, [r7, #5]
 8002426:	4920      	ldr	r1, [pc, #128]	; (80024a8 <graphics_text+0x134>)
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3301      	adds	r3, #1
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	753b      	strb	r3, [r7, #20]
		store_width = fonts[font].store_width;
 8002438:	797a      	ldrb	r2, [r7, #5]
 800243a:	491b      	ldr	r1, [pc, #108]	; (80024a8 <graphics_text+0x134>)
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	74fb      	strb	r3, [r7, #19]

		glyph_ptr = fonts[font].glyph_table + ((unsigned int)glyph * (unsigned int)store_width * (unsigned int)height);
 800244a:	797a      	ldrb	r2, [r7, #5]
 800244c:	4916      	ldr	r1, [pc, #88]	; (80024a8 <graphics_text+0x134>)
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	3304      	adds	r3, #4
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	7dbb      	ldrb	r3, [r7, #22]
 800245e:	7cf9      	ldrb	r1, [r7, #19]
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	7d39      	ldrb	r1, [r7, #20]
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]


		x+=width;
 800246e:	7dfa      	ldrb	r2, [r7, #23]
 8002470:	7d7b      	ldrb	r3, [r7, #21]
 8002472:	4413      	add	r3, r2
 8002474:	75fb      	strb	r3, [r7, #23]
		graphics_Glyph(x,top,width,height,glyph_ptr,store_width);  /* plug symbol into buffer */
 8002476:	7d3c      	ldrb	r4, [r7, #20]
 8002478:	7d7a      	ldrb	r2, [r7, #21]
 800247a:	79b9      	ldrb	r1, [r7, #6]
 800247c:	7df8      	ldrb	r0, [r7, #23]
 800247e:	7cfb      	ldrb	r3, [r7, #19]
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	4623      	mov	r3, r4
 8002488:	f7ff ff08 	bl	800229c <graphics_Glyph>
		str++;								/* point to next character in string */
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	3301      	adds	r3, #1
 8002490:	603b      	str	r3, [r7, #0]
  while(*str != 0x00)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	f47f af79 	bne.w	800238e <graphics_text+0x1a>
	}

}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	371c      	adds	r7, #28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd90      	pop	{r4, r7, pc}
 80024a6:	bf00      	nop
 80024a8:	0800bb04 	.word	0x0800bb04

080024ac <ssd1306_command>:
extern I2C_HandleTypeDef hi2c3;

extern uint8_t gddram[4][128];

void ssd1306_command(uint8_t byte)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
   uint8_t buffer[2];
	buffer[0] = 0x00;
 80024b6:	2300      	movs	r3, #0
 80024b8:	733b      	strb	r3, [r7, #12]
	buffer[1] = byte;
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,2,50);
 80024be:	f107 020c 	add.w	r2, r7, #12
 80024c2:	2332      	movs	r3, #50	; 0x32
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2302      	movs	r3, #2
 80024c8:	2178      	movs	r1, #120	; 0x78
 80024ca:	4803      	ldr	r0, [pc, #12]	; (80024d8 <ssd1306_command+0x2c>)
 80024cc:	f002 fb96 	bl	8004bfc <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1,0x78,&buffer[1],1,50);

}
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	200000fc 	.word	0x200000fc

080024dc <oled_update>:

void oled_update(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
 80024e2:	2021      	movs	r0, #33	; 0x21
 80024e4:	f7ff ffe2 	bl	80024ac <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
 80024e8:	2000      	movs	r0, #0
 80024ea:	f7ff ffdf 	bl	80024ac <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 80024ee:	207f      	movs	r0, #127	; 0x7f
 80024f0:	f7ff ffdc 	bl	80024ac <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
 80024f4:	2022      	movs	r0, #34	; 0x22
 80024f6:	f7ff ffd9 	bl	80024ac <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
 80024fa:	2000      	movs	r0, #0
 80024fc:	f7ff ffd6 	bl	80024ac <ssd1306_command>
  ssd1306_command(3); // Page end address
 8002500:	2003      	movs	r0, #3
 8002502:	f7ff ffd3 	bl	80024ac <ssd1306_command>



	//SEND data in 16byte packs
	uint8_t buffer[17];
	buffer[0] = 0x40;
 8002506:	2340      	movs	r3, #64	; 0x40
 8002508:	703b      	strb	r3, [r7, #0]
	for(uint16_t line=0; line<4; line++)
 800250a:	2300      	movs	r3, #0
 800250c:	82fb      	strh	r3, [r7, #22]
 800250e:	e02d      	b.n	800256c <oled_update+0x90>
	{
		for(uint8_t x=0;x<127;x+=16)
 8002510:	2300      	movs	r3, #0
 8002512:	757b      	strb	r3, [r7, #21]
 8002514:	e024      	b.n	8002560 <oled_update+0x84>
		{
			for(uint8_t i=1;i<17;i++)
 8002516:	2301      	movs	r3, #1
 8002518:	753b      	strb	r3, [r7, #20]
 800251a:	e012      	b.n	8002542 <oled_update+0x66>
			{
				buffer[i] = gddram[line][x+i-1];
 800251c:	8af9      	ldrh	r1, [r7, #22]
 800251e:	7d7a      	ldrb	r2, [r7, #21]
 8002520:	7d3b      	ldrb	r3, [r7, #20]
 8002522:	4413      	add	r3, r2
 8002524:	1e5a      	subs	r2, r3, #1
 8002526:	7d3b      	ldrb	r3, [r7, #20]
 8002528:	4814      	ldr	r0, [pc, #80]	; (800257c <oled_update+0xa0>)
 800252a:	01c9      	lsls	r1, r1, #7
 800252c:	4401      	add	r1, r0
 800252e:	440a      	add	r2, r1
 8002530:	7812      	ldrb	r2, [r2, #0]
 8002532:	f107 0118 	add.w	r1, r7, #24
 8002536:	440b      	add	r3, r1
 8002538:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(uint8_t i=1;i<17;i++)
 800253c:	7d3b      	ldrb	r3, [r7, #20]
 800253e:	3301      	adds	r3, #1
 8002540:	753b      	strb	r3, [r7, #20]
 8002542:	7d3b      	ldrb	r3, [r7, #20]
 8002544:	2b10      	cmp	r3, #16
 8002546:	d9e9      	bls.n	800251c <oled_update+0x40>
			}
			HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,17,1000);
 8002548:	463a      	mov	r2, r7
 800254a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	2311      	movs	r3, #17
 8002552:	2178      	movs	r1, #120	; 0x78
 8002554:	480a      	ldr	r0, [pc, #40]	; (8002580 <oled_update+0xa4>)
 8002556:	f002 fb51 	bl	8004bfc <HAL_I2C_Master_Transmit>
		for(uint8_t x=0;x<127;x+=16)
 800255a:	7d7b      	ldrb	r3, [r7, #21]
 800255c:	3310      	adds	r3, #16
 800255e:	757b      	strb	r3, [r7, #21]
 8002560:	7d7b      	ldrb	r3, [r7, #21]
 8002562:	2b7e      	cmp	r3, #126	; 0x7e
 8002564:	d9d7      	bls.n	8002516 <oled_update+0x3a>
	for(uint16_t line=0; line<4; line++)
 8002566:	8afb      	ldrh	r3, [r7, #22]
 8002568:	3301      	adds	r3, #1
 800256a:	82fb      	strh	r3, [r7, #22]
 800256c:	8afb      	ldrh	r3, [r7, #22]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d9ce      	bls.n	8002510 <oled_update+0x34>
		}
	}

}
 8002572:	bf00      	nop
 8002574:	bf00      	nop
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000384 	.word	0x20000384
 8002580:	200000fc 	.word	0x200000fc

08002584 <oled_init>:

void oled_init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
	// Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 800258a:	20ae      	movs	r0, #174	; 0xae
 800258c:	f7ff ff8e 	bl	80024ac <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 8002590:	20d5      	movs	r0, #213	; 0xd5
 8002592:	f7ff ff8b 	bl	80024ac <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 8002596:	2080      	movs	r0, #128	; 0x80
 8002598:	f7ff ff88 	bl	80024ac <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 800259c:	20a8      	movs	r0, #168	; 0xa8
 800259e:	f7ff ff85 	bl	80024ac <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 80025a2:	201f      	movs	r0, #31
 80025a4:	f7ff ff82 	bl	80024ac <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 80025a8:	20d3      	movs	r0, #211	; 0xd3
 80025aa:	f7ff ff7f 	bl	80024ac <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
 80025ae:	2000      	movs	r0, #0
 80025b0:	f7ff ff7c 	bl	80024ac <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 80025b4:	2040      	movs	r0, #64	; 0x40
 80025b6:	f7ff ff79 	bl	80024ac <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 80025ba:	208d      	movs	r0, #141	; 0x8d
 80025bc:	f7ff ff76 	bl	80024ac <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x10); }
  else
    { ssd1306_command(0x14); }
 80025c0:	2014      	movs	r0, #20
 80025c2:	f7ff ff73 	bl	80024ac <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 80025c6:	2020      	movs	r0, #32
 80025c8:	f7ff ff70 	bl	80024ac <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7ff ff6d 	bl	80024ac <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 80025d2:	20a1      	movs	r0, #161	; 0xa1
 80025d4:	f7ff ff6a 	bl	80024ac <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
 80025d8:	20c8      	movs	r0, #200	; 0xc8
 80025da:	f7ff ff67 	bl	80024ac <ssd1306_command>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 80025de:	20da      	movs	r0, #218	; 0xda
 80025e0:	f7ff ff64 	bl	80024ac <ssd1306_command>
  ssd1306_command(0x02);
 80025e4:	2002      	movs	r0, #2
 80025e6:	f7ff ff61 	bl	80024ac <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 80025ea:	2081      	movs	r0, #129	; 0x81
 80025ec:	f7ff ff5e 	bl	80024ac <ssd1306_command>
  ssd1306_command(0x8F);
 80025f0:	208f      	movs	r0, #143	; 0x8f
 80025f2:	f7ff ff5b 	bl	80024ac <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 80025f6:	20d9      	movs	r0, #217	; 0xd9
 80025f8:	f7ff ff58 	bl	80024ac <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x22); }
  else
    { ssd1306_command(0xF1); }
 80025fc:	20f1      	movs	r0, #241	; 0xf1
 80025fe:	f7ff ff55 	bl	80024ac <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 8002602:	20db      	movs	r0, #219	; 0xdb
 8002604:	f7ff ff52 	bl	80024ac <ssd1306_command>
  ssd1306_command(0x40);
 8002608:	2040      	movs	r0, #64	; 0x40
 800260a:	f7ff ff4f 	bl	80024ac <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 800260e:	20a4      	movs	r0, #164	; 0xa4
 8002610:	f7ff ff4c 	bl	80024ac <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 8002614:	20a6      	movs	r0, #166	; 0xa6
 8002616:	f7ff ff49 	bl	80024ac <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 800261a:	202e      	movs	r0, #46	; 0x2e
 800261c:	f7ff ff46 	bl	80024ac <ssd1306_command>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 8002620:	20af      	movs	r0, #175	; 0xaf
 8002622:	f7ff ff43 	bl	80024ac <ssd1306_command>

	//init buffer
	 for(int i = 0; i<4; i++)
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	e013      	b.n	8002654 <oled_init+0xd0>
		for(int j = 0; j<128; j++)
 800262c:	2300      	movs	r3, #0
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	e00a      	b.n	8002648 <oled_init+0xc4>
			gddram[i][j] = 0x00;
 8002632:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <oled_init+0xe0>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	01db      	lsls	r3, r3, #7
 8002638:	441a      	add	r2, r3
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	4413      	add	r3, r2
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<128; j++)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	3301      	adds	r3, #1
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b7f      	cmp	r3, #127	; 0x7f
 800264c:	ddf1      	ble.n	8002632 <oled_init+0xae>
	 for(int i = 0; i<4; i++)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3301      	adds	r3, #1
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b03      	cmp	r3, #3
 8002658:	dde8      	ble.n	800262c <oled_init+0xa8>
}
 800265a:	bf00      	nop
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000384 	.word	0x20000384

08002668 <I2C_3_scaner>:

};

//----------------------------------------------------------------------------------------------------
void I2C_3_scaner(void)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b087      	sub	sp, #28
 800266c:	af04      	add	r7, sp, #16
	/*Description function
	This function search devise connected to I2C in this case -hi2c1.
	After thet function print in console information about what to connect to I2C.
	*/
	uint8_t number_of_device=0;				// How many device controller is found
 800266e:	2300      	movs	r3, #0
 8002670:	71fb      	strb	r3, [r7, #7]
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	//HAL_Delay(500);

	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8002672:	4b2a      	ldr	r3, [pc, #168]	; (800271c <I2C_3_scaner+0xb4>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
 8002678:	e043      	b.n	8002702 <I2C_3_scaner+0x9a>
	{
		HAL_Delay(1);
 800267a:	2001      	movs	r0, #1
 800267c:	f000 f8f8 	bl	8002870 <HAL_Delay>
		STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, (uint16_t) sizebuf_I2C, &buff, (uint16_t) sizebuf_I2C,(uint32_t) timeout);
 8002680:	4b26      	ldr	r3, [pc, #152]	; (800271c <I2C_3_scaner+0xb4>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	b299      	uxth	r1, r3
 800268a:	4b25      	ldr	r3, [pc, #148]	; (8002720 <I2C_3_scaner+0xb8>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	b298      	uxth	r0, r3
 8002690:	4b24      	ldr	r3, [pc, #144]	; (8002724 <I2C_3_scaner+0xbc>)
 8002692:	881c      	ldrh	r4, [r3, #0]
 8002694:	4b23      	ldr	r3, [pc, #140]	; (8002724 <I2C_3_scaner+0xbc>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	4a23      	ldr	r2, [pc, #140]	; (8002728 <I2C_3_scaner+0xc0>)
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	9202      	str	r2, [sp, #8]
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	4b22      	ldr	r3, [pc, #136]	; (800272c <I2C_3_scaner+0xc4>)
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	4623      	mov	r3, r4
 80026a6:	4602      	mov	r2, r0
 80026a8:	4821      	ldr	r0, [pc, #132]	; (8002730 <I2C_3_scaner+0xc8>)
 80026aa:	f002 fba5 	bl	8004df8 <HAL_I2C_Mem_Read>
 80026ae:	4603      	mov	r3, r0
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <I2C_3_scaner+0xcc>)
 80026b4:	801a      	strh	r2, [r3, #0]

		if(STATUS==DEVICE_FOUND)																		// if devsice is found
 80026b6:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <I2C_3_scaner+0xcc>)
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d11b      	bne.n	80026f6 <I2C_3_scaner+0x8e>
		{
			number_of_device++;
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	3301      	adds	r3, #1
 80026c2:	71fb      	strb	r3, [r7, #7]

			if( (addres_devise == H_and_T_sensor_SI7021_I2C_ADDR) | (addres_devise == OLED_SSD136_I2C_ADDR))
 80026c4:	4b15      	ldr	r3, [pc, #84]	; (800271c <I2C_3_scaner+0xb4>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <I2C_3_scaner+0xb4>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b3c      	cmp	r3, #60	; 0x3c
 80026d8:	bf0c      	ite	eq
 80026da:	2301      	moveq	r3, #1
 80026dc:	2300      	movne	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	4313      	orrs	r3, r2
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d006      	beq.n	80026f6 <I2C_3_scaner+0x8e>
			{
				switch (addres_devise)
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <I2C_3_scaner+0xb4>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b3c      	cmp	r3, #60	; 0x3c
 80026ee:	d001      	beq.n	80026f4 <I2C_3_scaner+0x8c>
 80026f0:	2b40      	cmp	r3, #64	; 0x40
 80026f2:	e000      	b.n	80026f6 <I2C_3_scaner+0x8e>
							sprintf(str3,"Device address-0x%x - found. It is OLED \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
						#endif
				    break;
 80026f4:	bf00      	nop
	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <I2C_3_scaner+0xb4>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	3301      	adds	r3, #1
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4b07      	ldr	r3, [pc, #28]	; (800271c <I2C_3_scaner+0xb4>)
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <I2C_3_scaner+0xb4>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2bff      	cmp	r3, #255	; 0xff
 8002708:	d1b7      	bne.n	800267a <I2C_3_scaner+0x12>
		memset(str3, 0 , sizeof(str3));
		sprintf(str3,"DONE\r\n");      																	// convert   in  str
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	HAL_Delay(500);
 800270a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800270e:	f000 f8af 	bl	8002870 <HAL_Delay>
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	bf00      	nop
 800271c:	200000c4 	.word	0x200000c4
 8002720:	200000c5 	.word	0x200000c5
 8002724:	2000000c 	.word	0x2000000c
 8002728:	20000010 	.word	0x20000010
 800272c:	200000c6 	.word	0x200000c6
 8002730:	200000fc 	.word	0x200000fc
 8002734:	200000c8 	.word	0x200000c8

08002738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002770 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800273c:	480d      	ldr	r0, [pc, #52]	; (8002774 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800273e:	490e      	ldr	r1, [pc, #56]	; (8002778 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002740:	4a0e      	ldr	r2, [pc, #56]	; (800277c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002744:	e002      	b.n	800274c <LoopCopyDataInit>

08002746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800274a:	3304      	adds	r3, #4

0800274c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800274c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002750:	d3f9      	bcc.n	8002746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002752:	4a0b      	ldr	r2, [pc, #44]	; (8002780 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002754:	4c0b      	ldr	r4, [pc, #44]	; (8002784 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002758:	e001      	b.n	800275e <LoopFillZerobss>

0800275a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800275a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800275c:	3204      	adds	r2, #4

0800275e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002760:	d3fb      	bcc.n	800275a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002762:	f7ff f8b1 	bl	80018c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002766:	f009 f8ab 	bl	800b8c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800276a:	f7fe f8b1 	bl	80008d0 <main>
  bx  lr    
 800276e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002770:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002778:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800277c:	0800df7c 	.word	0x0800df7c
  ldr r2, =_sbss
 8002780:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002784:	20000c74 	.word	0x20000c74

08002788 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002788:	e7fe      	b.n	8002788 <ADC_IRQHandler>
	...

0800278c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_Init+0x40>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <HAL_Init+0x40>)
 8002796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800279a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_Init+0x40>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_Init+0x40>)
 80027a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_Init+0x40>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a07      	ldr	r2, [pc, #28]	; (80027cc <HAL_Init+0x40>)
 80027ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b4:	2003      	movs	r0, #3
 80027b6:	f000 f94f 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f000 f808 	bl	80027d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c0:	f7fe fd3e 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023c00 	.word	0x40023c00

080027d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_InitTick+0x54>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_InitTick+0x58>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	4619      	mov	r1, r3
 80027e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f967 	bl	8002ac2 <HAL_SYSTICK_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e00e      	b.n	800281c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b0f      	cmp	r3, #15
 8002802:	d80a      	bhi.n	800281a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002804:	2200      	movs	r2, #0
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800280c:	f000 f92f 	bl	8002a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002810:	4a06      	ldr	r2, [pc, #24]	; (800282c <HAL_InitTick+0x5c>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	e000      	b.n	800281c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000004 	.word	0x20000004
 8002828:	20000018 	.word	0x20000018
 800282c:	20000014 	.word	0x20000014

08002830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_IncTick+0x20>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_IncTick+0x24>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4413      	add	r3, r2
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_IncTick+0x24>)
 8002842:	6013      	str	r3, [r2, #0]
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000018 	.word	0x20000018
 8002854:	20000584 	.word	0x20000584

08002858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return uwTick;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_GetTick+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000584 	.word	0x20000584

08002870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002878:	f7ff ffee 	bl	8002858 <HAL_GetTick>
 800287c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002888:	d005      	beq.n	8002896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_Delay+0x44>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002896:	bf00      	nop
 8002898:	f7ff ffde 	bl	8002858 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d8f7      	bhi.n	8002898 <HAL_Delay+0x28>
  {
  }
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000018 	.word	0x20000018

080028b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d4:	4013      	ands	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ea:	4a04      	ldr	r2, [pc, #16]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	60d3      	str	r3, [r2, #12]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <__NVIC_GetPriorityGrouping+0x18>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	f003 0307 	and.w	r3, r3, #7
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	2b00      	cmp	r3, #0
 800292c:	db0b      	blt.n	8002946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	f003 021f 	and.w	r2, r3, #31
 8002934:	4907      	ldr	r1, [pc, #28]	; (8002954 <__NVIC_EnableIRQ+0x38>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2001      	movs	r0, #1
 800293e:	fa00 f202 	lsl.w	r2, r0, r2
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000e100 	.word	0xe000e100

08002958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002968:	2b00      	cmp	r3, #0
 800296a:	db0a      	blt.n	8002982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	490c      	ldr	r1, [pc, #48]	; (80029a4 <__NVIC_SetPriority+0x4c>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	0112      	lsls	r2, r2, #4
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	440b      	add	r3, r1
 800297c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002980:	e00a      	b.n	8002998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4908      	ldr	r1, [pc, #32]	; (80029a8 <__NVIC_SetPriority+0x50>)
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	3b04      	subs	r3, #4
 8002990:	0112      	lsls	r2, r2, #4
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	440b      	add	r3, r1
 8002996:	761a      	strb	r2, [r3, #24]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000e100 	.word	0xe000e100
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f1c3 0307 	rsb	r3, r3, #7
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	bf28      	it	cs
 80029ca:	2304      	movcs	r3, #4
 80029cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d902      	bls.n	80029dc <NVIC_EncodePriority+0x30>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3b03      	subs	r3, #3
 80029da:	e000      	b.n	80029de <NVIC_EncodePriority+0x32>
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43da      	mvns	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	401a      	ands	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43d9      	mvns	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	4313      	orrs	r3, r2
         );
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3724      	adds	r7, #36	; 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a24:	d301      	bcc.n	8002a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00f      	b.n	8002a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <SysTick_Config+0x40>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a32:	210f      	movs	r1, #15
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a38:	f7ff ff8e 	bl	8002958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <SysTick_Config+0x40>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a42:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <SysTick_Config+0x40>)
 8002a44:	2207      	movs	r2, #7
 8002a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	e000e010 	.word	0xe000e010

08002a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff29 	bl	80028b8 <__NVIC_SetPriorityGrouping>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a80:	f7ff ff3e 	bl	8002900 <__NVIC_GetPriorityGrouping>
 8002a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f7ff ff8e 	bl	80029ac <NVIC_EncodePriority>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff5d 	bl	8002958 <__NVIC_SetPriority>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff31 	bl	800291c <__NVIC_EnableIRQ>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ffa2 	bl	8002a14 <SysTick_Config>
 8002ad0:	4603      	mov	r3, r0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	e16b      	b.n	8002dd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	f040 815a 	bne.w	8002dca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d005      	beq.n	8002b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d130      	bne.n	8002b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b64:	2201      	movs	r2, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 0201 	and.w	r2, r3, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d017      	beq.n	8002bcc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d123      	bne.n	8002c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	69b9      	ldr	r1, [r7, #24]
 8002c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80b4 	beq.w	8002dca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	4b60      	ldr	r3, [pc, #384]	; (8002de8 <HAL_GPIO_Init+0x30c>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	4a5f      	ldr	r2, [pc, #380]	; (8002de8 <HAL_GPIO_Init+0x30c>)
 8002c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c70:	6453      	str	r3, [r2, #68]	; 0x44
 8002c72:	4b5d      	ldr	r3, [pc, #372]	; (8002de8 <HAL_GPIO_Init+0x30c>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7e:	4a5b      	ldr	r2, [pc, #364]	; (8002dec <HAL_GPIO_Init+0x310>)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a52      	ldr	r2, [pc, #328]	; (8002df0 <HAL_GPIO_Init+0x314>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d02b      	beq.n	8002d02 <HAL_GPIO_Init+0x226>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a51      	ldr	r2, [pc, #324]	; (8002df4 <HAL_GPIO_Init+0x318>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d025      	beq.n	8002cfe <HAL_GPIO_Init+0x222>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a50      	ldr	r2, [pc, #320]	; (8002df8 <HAL_GPIO_Init+0x31c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01f      	beq.n	8002cfa <HAL_GPIO_Init+0x21e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4f      	ldr	r2, [pc, #316]	; (8002dfc <HAL_GPIO_Init+0x320>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d019      	beq.n	8002cf6 <HAL_GPIO_Init+0x21a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4e      	ldr	r2, [pc, #312]	; (8002e00 <HAL_GPIO_Init+0x324>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d013      	beq.n	8002cf2 <HAL_GPIO_Init+0x216>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4d      	ldr	r2, [pc, #308]	; (8002e04 <HAL_GPIO_Init+0x328>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00d      	beq.n	8002cee <HAL_GPIO_Init+0x212>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4c      	ldr	r2, [pc, #304]	; (8002e08 <HAL_GPIO_Init+0x32c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d007      	beq.n	8002cea <HAL_GPIO_Init+0x20e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4b      	ldr	r2, [pc, #300]	; (8002e0c <HAL_GPIO_Init+0x330>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d101      	bne.n	8002ce6 <HAL_GPIO_Init+0x20a>
 8002ce2:	2307      	movs	r3, #7
 8002ce4:	e00e      	b.n	8002d04 <HAL_GPIO_Init+0x228>
 8002ce6:	2308      	movs	r3, #8
 8002ce8:	e00c      	b.n	8002d04 <HAL_GPIO_Init+0x228>
 8002cea:	2306      	movs	r3, #6
 8002cec:	e00a      	b.n	8002d04 <HAL_GPIO_Init+0x228>
 8002cee:	2305      	movs	r3, #5
 8002cf0:	e008      	b.n	8002d04 <HAL_GPIO_Init+0x228>
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	e006      	b.n	8002d04 <HAL_GPIO_Init+0x228>
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e004      	b.n	8002d04 <HAL_GPIO_Init+0x228>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e002      	b.n	8002d04 <HAL_GPIO_Init+0x228>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_GPIO_Init+0x228>
 8002d02:	2300      	movs	r3, #0
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	f002 0203 	and.w	r2, r2, #3
 8002d0a:	0092      	lsls	r2, r2, #2
 8002d0c:	4093      	lsls	r3, r2
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d14:	4935      	ldr	r1, [pc, #212]	; (8002dec <HAL_GPIO_Init+0x310>)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d22:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <HAL_GPIO_Init+0x334>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d46:	4a32      	ldr	r2, [pc, #200]	; (8002e10 <HAL_GPIO_Init+0x334>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d4c:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <HAL_GPIO_Init+0x334>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d70:	4a27      	ldr	r2, [pc, #156]	; (8002e10 <HAL_GPIO_Init+0x334>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d76:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <HAL_GPIO_Init+0x334>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d9a:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <HAL_GPIO_Init+0x334>)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da0:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_GPIO_Init+0x334>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dc4:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <HAL_GPIO_Init+0x334>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2b0f      	cmp	r3, #15
 8002dd4:	f67f ae90 	bls.w	8002af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3724      	adds	r7, #36	; 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40013800 	.word	0x40013800
 8002df0:	40020000 	.word	0x40020000
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40020800 	.word	0x40020800
 8002dfc:	40020c00 	.word	0x40020c00
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40021400 	.word	0x40021400
 8002e08:	40021800 	.word	0x40021800
 8002e0c:	40021c00 	.word	0x40021c00
 8002e10:	40013c00 	.word	0x40013c00

08002e14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	887b      	ldrh	r3, [r7, #2]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
 8002e30:	e001      	b.n	8002e36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e32:	2300      	movs	r3, #0
 8002e34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
 8002e50:	4613      	mov	r3, r2
 8002e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e54:	787b      	ldrb	r3, [r7, #1]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e60:	e003      	b.n	8002e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e62:	887b      	ldrh	r3, [r7, #2]
 8002e64:	041a      	lsls	r2, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	619a      	str	r2, [r3, #24]
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e88:	887a      	ldrh	r2, [r7, #2]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	041a      	lsls	r2, r3, #16
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	43d9      	mvns	r1, r3
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	400b      	ands	r3, r1
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	619a      	str	r2, [r3, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eac:	b08f      	sub	sp, #60	; 0x3c
 8002eae:	af0a      	add	r7, sp, #40	; 0x28
 8002eb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e054      	b.n	8002f66 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f008 fa42 	bl	800b360 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2203      	movs	r2, #3
 8002ee0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f005 fbe4 	bl	80086c8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	603b      	str	r3, [r7, #0]
 8002f06:	687e      	ldr	r6, [r7, #4]
 8002f08:	466d      	mov	r5, sp
 8002f0a:	f106 0410 	add.w	r4, r6, #16
 8002f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f1e:	1d33      	adds	r3, r6, #4
 8002f20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f22:	6838      	ldr	r0, [r7, #0]
 8002f24:	f005 fb5e 	bl	80085e4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f005 fbdb 	bl	80086ea <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	687e      	ldr	r6, [r7, #4]
 8002f3c:	466d      	mov	r5, sp
 8002f3e:	f106 0410 	add.w	r4, r6, #16
 8002f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f52:	1d33      	adds	r3, r6, #4
 8002f54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f56:	6838      	ldr	r0, [r7, #0]
 8002f58:	f005 fcee 	bl	8008938 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f6e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002f6e:	b590      	push	{r4, r7, lr}
 8002f70:	b089      	sub	sp, #36	; 0x24
 8002f72:	af04      	add	r7, sp, #16
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	4608      	mov	r0, r1
 8002f78:	4611      	mov	r1, r2
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	70fb      	strb	r3, [r7, #3]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70bb      	strb	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_HCD_HC_Init+0x28>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e076      	b.n	8003084 <HAL_HCD_HC_Init+0x116>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	333d      	adds	r3, #61	; 0x3d
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	212c      	movs	r1, #44	; 0x2c
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	3338      	adds	r3, #56	; 0x38
 8002fbe:	787a      	ldrb	r2, [r7, #1]
 8002fc0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	3340      	adds	r3, #64	; 0x40
 8002fd0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002fd2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	212c      	movs	r1, #44	; 0x2c
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	4413      	add	r3, r2
 8002fe0:	3339      	adds	r3, #57	; 0x39
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	333f      	adds	r3, #63	; 0x3f
 8002ff4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002ff8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	78ba      	ldrb	r2, [r7, #2]
 8002ffe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003002:	b2d0      	uxtb	r0, r2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	212c      	movs	r1, #44	; 0x2c
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	333a      	adds	r3, #58	; 0x3a
 8003010:	4602      	mov	r2, r0
 8003012:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003014:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003018:	2b00      	cmp	r3, #0
 800301a:	da09      	bge.n	8003030 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	333b      	adds	r3, #59	; 0x3b
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	e008      	b.n	8003042 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	333b      	adds	r3, #59	; 0x3b
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	333c      	adds	r3, #60	; 0x3c
 8003050:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003054:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	787c      	ldrb	r4, [r7, #1]
 800305c:	78ba      	ldrb	r2, [r7, #2]
 800305e:	78f9      	ldrb	r1, [r7, #3]
 8003060:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003062:	9302      	str	r3, [sp, #8]
 8003064:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003068:	9301      	str	r3, [sp, #4]
 800306a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	4623      	mov	r3, r4
 8003072:	f005 fde3 	bl	8008c3c <USB_HC_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003082:	7bfb      	ldrb	r3, [r7, #15]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	bd90      	pop	{r4, r7, pc}

0800308c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_HCD_HC_Halt+0x1e>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e00f      	b.n	80030ca <HAL_HCD_HC_Halt+0x3e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f006 f81f 	bl	80090fe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	4608      	mov	r0, r1
 80030de:	4611      	mov	r1, r2
 80030e0:	461a      	mov	r2, r3
 80030e2:	4603      	mov	r3, r0
 80030e4:	70fb      	strb	r3, [r7, #3]
 80030e6:	460b      	mov	r3, r1
 80030e8:	70bb      	strb	r3, [r7, #2]
 80030ea:	4613      	mov	r3, r2
 80030ec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	333b      	adds	r3, #59	; 0x3b
 80030fc:	78ba      	ldrb	r2, [r7, #2]
 80030fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	333f      	adds	r3, #63	; 0x3f
 800310e:	787a      	ldrb	r2, [r7, #1]
 8003110:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003112:	7c3b      	ldrb	r3, [r7, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d112      	bne.n	800313e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	4413      	add	r3, r2
 8003124:	3342      	adds	r3, #66	; 0x42
 8003126:	2203      	movs	r2, #3
 8003128:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	212c      	movs	r1, #44	; 0x2c
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	4413      	add	r3, r2
 8003136:	333d      	adds	r3, #61	; 0x3d
 8003138:	7f3a      	ldrb	r2, [r7, #28]
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	e008      	b.n	8003150 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3342      	adds	r3, #66	; 0x42
 800314c:	2202      	movs	r2, #2
 800314e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003150:	787b      	ldrb	r3, [r7, #1]
 8003152:	2b03      	cmp	r3, #3
 8003154:	f200 80c6 	bhi.w	80032e4 <HAL_HCD_HC_SubmitRequest+0x210>
 8003158:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315e:	bf00      	nop
 8003160:	08003171 	.word	0x08003171
 8003164:	080032d1 	.word	0x080032d1
 8003168:	080031d5 	.word	0x080031d5
 800316c:	08003253 	.word	0x08003253
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003170:	7c3b      	ldrb	r3, [r7, #16]
 8003172:	2b01      	cmp	r3, #1
 8003174:	f040 80b8 	bne.w	80032e8 <HAL_HCD_HC_SubmitRequest+0x214>
 8003178:	78bb      	ldrb	r3, [r7, #2]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 80b4 	bne.w	80032e8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003180:	8b3b      	ldrh	r3, [r7, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d108      	bne.n	8003198 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	3355      	adds	r3, #85	; 0x55
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	3355      	adds	r3, #85	; 0x55
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d109      	bne.n	80031c0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	3342      	adds	r3, #66	; 0x42
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80031be:	e093      	b.n	80032e8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	3342      	adds	r3, #66	; 0x42
 80031ce:	2202      	movs	r2, #2
 80031d0:	701a      	strb	r2, [r3, #0]
      break;
 80031d2:	e089      	b.n	80032e8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80031d4:	78bb      	ldrb	r3, [r7, #2]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d11d      	bne.n	8003216 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	3355      	adds	r3, #85	; 0x55
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	212c      	movs	r1, #44	; 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	3342      	adds	r3, #66	; 0x42
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003200:	e073      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3342      	adds	r3, #66	; 0x42
 8003210:	2202      	movs	r2, #2
 8003212:	701a      	strb	r2, [r3, #0]
      break;
 8003214:	e069      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	212c      	movs	r1, #44	; 0x2c
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	3354      	adds	r3, #84	; 0x54
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	212c      	movs	r1, #44	; 0x2c
 8003230:	fb01 f303 	mul.w	r3, r1, r3
 8003234:	4413      	add	r3, r2
 8003236:	3342      	adds	r3, #66	; 0x42
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
      break;
 800323c:	e055      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	212c      	movs	r1, #44	; 0x2c
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	4413      	add	r3, r2
 800324a:	3342      	adds	r3, #66	; 0x42
 800324c:	2202      	movs	r2, #2
 800324e:	701a      	strb	r2, [r3, #0]
      break;
 8003250:	e04b      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003252:	78bb      	ldrb	r3, [r7, #2]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d11d      	bne.n	8003294 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	212c      	movs	r1, #44	; 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	3355      	adds	r3, #85	; 0x55
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d109      	bne.n	8003280 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	3342      	adds	r3, #66	; 0x42
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800327e:	e034      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	3342      	adds	r3, #66	; 0x42
 800328e:	2202      	movs	r2, #2
 8003290:	701a      	strb	r2, [r3, #0]
      break;
 8003292:	e02a      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	212c      	movs	r1, #44	; 0x2c
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	4413      	add	r3, r2
 80032a0:	3354      	adds	r3, #84	; 0x54
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d109      	bne.n	80032bc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	3342      	adds	r3, #66	; 0x42
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
      break;
 80032ba:	e016      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	212c      	movs	r1, #44	; 0x2c
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	3342      	adds	r3, #66	; 0x42
 80032ca:	2202      	movs	r2, #2
 80032cc:	701a      	strb	r2, [r3, #0]
      break;
 80032ce:	e00c      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	212c      	movs	r1, #44	; 0x2c
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	4413      	add	r3, r2
 80032dc:	3342      	adds	r3, #66	; 0x42
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
      break;
 80032e2:	e002      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80032e4:	bf00      	nop
 80032e6:	e000      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80032e8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	212c      	movs	r1, #44	; 0x2c
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
 80032f4:	4413      	add	r3, r2
 80032f6:	3344      	adds	r3, #68	; 0x44
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	8b3a      	ldrh	r2, [r7, #24]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	202c      	movs	r0, #44	; 0x2c
 8003304:	fb00 f303 	mul.w	r3, r0, r3
 8003308:	440b      	add	r3, r1
 800330a:	334c      	adds	r3, #76	; 0x4c
 800330c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	212c      	movs	r1, #44	; 0x2c
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	4413      	add	r3, r2
 800331a:	3360      	adds	r3, #96	; 0x60
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	212c      	movs	r1, #44	; 0x2c
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4413      	add	r3, r2
 800332c:	3350      	adds	r3, #80	; 0x50
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	212c      	movs	r1, #44	; 0x2c
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	4413      	add	r3, r2
 800333e:	3339      	adds	r3, #57	; 0x39
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	212c      	movs	r1, #44	; 0x2c
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	4413      	add	r3, r2
 8003350:	3361      	adds	r3, #97	; 0x61
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	78fb      	ldrb	r3, [r7, #3]
 800335c:	222c      	movs	r2, #44	; 0x2c
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	3338      	adds	r3, #56	; 0x38
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	18d1      	adds	r1, r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	f005 fd72 	bl	8008e58 <USB_HC_StartXfer>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop

08003380 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f005 fa8b 	bl	80088b2 <USB_GetMode>
 800339c:	4603      	mov	r3, r0
 800339e:	2b01      	cmp	r3, #1
 80033a0:	f040 80ef 	bne.w	8003582 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f005 fa6f 	bl	800888c <USB_ReadInterrupts>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80e5 	beq.w	8003580 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f005 fa66 	bl	800888c <USB_ReadInterrupts>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ca:	d104      	bne.n	80033d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80033d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f005 fa56 	bl	800888c <USB_ReadInterrupts>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ea:	d104      	bne.n	80033f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f005 fa46 	bl	800888c <USB_ReadInterrupts>
 8003400:	4603      	mov	r3, r0
 8003402:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003406:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800340a:	d104      	bne.n	8003416 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003414:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f005 fa36 	bl	800888c <USB_ReadInterrupts>
 8003420:	4603      	mov	r3, r0
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d103      	bne.n	8003432 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2202      	movs	r2, #2
 8003430:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f005 fa28 	bl	800888c <USB_ReadInterrupts>
 800343c:	4603      	mov	r3, r0
 800343e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003446:	d115      	bne.n	8003474 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003450:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d108      	bne.n	8003474 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f007 fffa 	bl	800b45c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2101      	movs	r1, #1
 800346e:	4618      	mov	r0, r3
 8003470:	f005 fb1e 	bl	8008ab0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f005 fa07 	bl	800888c <USB_ReadInterrupts>
 800347e:	4603      	mov	r3, r0
 8003480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003488:	d102      	bne.n	8003490 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f001 f9ff 	bl	800488e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f005 f9f9 	bl	800888c <USB_ReadInterrupts>
 800349a:	4603      	mov	r3, r0
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d106      	bne.n	80034b2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f007 ffbd 	bl	800b424 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2208      	movs	r2, #8
 80034b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f005 f9e8 	bl	800888c <USB_ReadInterrupts>
 80034bc:	4603      	mov	r3, r0
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b10      	cmp	r3, #16
 80034c4:	d101      	bne.n	80034ca <HAL_HCD_IRQHandler+0x14a>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_HCD_IRQHandler+0x14c>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d012      	beq.n	80034f6 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0210 	bic.w	r2, r2, #16
 80034de:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f001 f902 	bl	80046ea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699a      	ldr	r2, [r3, #24]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0210 	orr.w	r2, r2, #16
 80034f4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f005 f9c6 	bl	800888c <USB_ReadInterrupts>
 8003500:	4603      	mov	r3, r0
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800350a:	d13a      	bne.n	8003582 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f005 fde3 	bl	80090dc <USB_HC_ReadInterrupt>
 8003516:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	e025      	b.n	800356a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	fa22 f303 	lsr.w	r3, r2, r3
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d018      	beq.n	8003564 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4413      	add	r3, r2
 800353a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003548:	d106      	bne.n	8003558 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	4619      	mov	r1, r3
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f8ab 	bl	80036ac <HCD_HC_IN_IRQHandler>
 8003556:	e005      	b.n	8003564 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	4619      	mov	r1, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fcc6 	bl	8003ef0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	3301      	adds	r3, #1
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	429a      	cmp	r2, r3
 8003572:	d3d4      	bcc.n	800351e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800357c:	615a      	str	r2, [r3, #20]
 800357e:	e000      	b.n	8003582 <HAL_HCD_IRQHandler+0x202>
      return;
 8003580:	bf00      	nop
    }
  }
}
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_HCD_Start+0x16>
 800359a:	2302      	movs	r3, #2
 800359c:	e013      	b.n	80035c6 <HAL_HCD_Start+0x3e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f005 f87b 	bl	80086a6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2101      	movs	r1, #1
 80035b6:	4618      	mov	r0, r3
 80035b8:	f005 fade 	bl	8008b78 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_HCD_Stop+0x16>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e00d      	b.n	8003600 <HAL_HCD_Stop+0x32>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f005 fedd 	bl	80093b0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f005 fa85 	bl	8008b24 <USB_ResetPort>
 800361a:	4603      	mov	r3, r0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	212c      	movs	r1, #44	; 0x2c
 8003636:	fb01 f303 	mul.w	r3, r1, r3
 800363a:	4413      	add	r3, r2
 800363c:	3360      	adds	r3, #96	; 0x60
 800363e:	781b      	ldrb	r3, [r3, #0]
}
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	3350      	adds	r3, #80	; 0x50
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f005 fac9 	bl	8008c18 <USB_GetCurrentFrame>
 8003686:	4603      	mov	r3, r0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f005 faa4 	bl	8008bea <USB_GetHostSpeed>
 80036a2:	4603      	mov	r3, r0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d119      	bne.n	8003710 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e8:	461a      	mov	r2, r3
 80036ea:	2304      	movs	r3, #4
 80036ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	0151      	lsls	r1, r2, #5
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	440a      	add	r2, r1
 8003704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003708:	f043 0302 	orr.w	r3, r3, #2
 800370c:	60d3      	str	r3, [r2, #12]
 800370e:	e101      	b.n	8003914 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003726:	d12b      	bne.n	8003780 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4413      	add	r3, r2
 8003730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003734:	461a      	mov	r2, r3
 8003736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800373a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	212c      	movs	r1, #44	; 0x2c
 8003742:	fb01 f303 	mul.w	r3, r1, r3
 8003746:	4413      	add	r3, r2
 8003748:	3361      	adds	r3, #97	; 0x61
 800374a:	2207      	movs	r2, #7
 800374c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4413      	add	r3, r2
 8003756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	0151      	lsls	r1, r2, #5
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	440a      	add	r2, r1
 8003764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f005 fcc0 	bl	80090fe <USB_HC_Halt>
 800377e:	e0c9      	b.n	8003914 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b20      	cmp	r3, #32
 8003794:	d109      	bne.n	80037aa <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4413      	add	r3, r2
 800379e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a2:	461a      	mov	r2, r3
 80037a4:	2320      	movs	r3, #32
 80037a6:	6093      	str	r3, [r2, #8]
 80037a8:	e0b4      	b.n	8003914 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d133      	bne.n	8003828 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	0151      	lsls	r1, r2, #5
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	440a      	add	r2, r1
 80037d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037da:	f043 0302 	orr.w	r3, r3, #2
 80037de:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	212c      	movs	r1, #44	; 0x2c
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	3361      	adds	r3, #97	; 0x61
 80037ee:	2205      	movs	r2, #5
 80037f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fe:	461a      	mov	r2, r3
 8003800:	2310      	movs	r3, #16
 8003802:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	4413      	add	r3, r2
 800380c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003810:	461a      	mov	r2, r3
 8003812:	2308      	movs	r3, #8
 8003814:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f005 fc6c 	bl	80090fe <USB_HC_Halt>
 8003826:	e075      	b.n	8003914 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4413      	add	r3, r2
 8003830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383e:	d134      	bne.n	80038aa <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4413      	add	r3, r2
 8003848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	0151      	lsls	r1, r2, #5
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	440a      	add	r2, r1
 8003856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800385a:	f043 0302 	orr.w	r3, r3, #2
 800385e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	3361      	adds	r3, #97	; 0x61
 800386e:	2208      	movs	r2, #8
 8003870:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4413      	add	r3, r2
 800387a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387e:	461a      	mov	r2, r3
 8003880:	2310      	movs	r3, #16
 8003882:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4413      	add	r3, r2
 800388c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003890:	461a      	mov	r2, r3
 8003892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003896:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	4611      	mov	r1, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f005 fc2b 	bl	80090fe <USB_HC_Halt>
 80038a8:	e034      	b.n	8003914 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	2b80      	cmp	r3, #128	; 0x80
 80038be:	d129      	bne.n	8003914 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	0151      	lsls	r1, r2, #5
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	440a      	add	r2, r1
 80038d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038da:	f043 0302 	orr.w	r3, r3, #2
 80038de:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	212c      	movs	r1, #44	; 0x2c
 80038e6:	fb01 f303 	mul.w	r3, r1, r3
 80038ea:	4413      	add	r3, r2
 80038ec:	3361      	adds	r3, #97	; 0x61
 80038ee:	2206      	movs	r2, #6
 80038f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f005 fbfe 	bl	80090fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4413      	add	r3, r2
 800390a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390e:	461a      	mov	r2, r3
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4413      	add	r3, r2
 800391c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800392a:	d122      	bne.n	8003972 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	0151      	lsls	r1, r2, #5
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	440a      	add	r2, r1
 8003942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003946:	f043 0302 	orr.w	r3, r3, #2
 800394a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	4611      	mov	r1, r2
 8003956:	4618      	mov	r0, r3
 8003958:	f005 fbd1 	bl	80090fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4413      	add	r3, r2
 8003964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003968:	461a      	mov	r2, r3
 800396a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800396e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003970:	e2ba      	b.n	8003ee8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4413      	add	r3, r2
 800397a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	f040 811b 	bne.w	8003bc0 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d019      	beq.n	80039c6 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	212c      	movs	r1, #44	; 0x2c
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	4413      	add	r3, r2
 800399e:	3348      	adds	r3, #72	; 0x48
 80039a0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	0159      	lsls	r1, r3, #5
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	440b      	add	r3, r1
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80039b4:	1ad2      	subs	r2, r2, r3
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	202c      	movs	r0, #44	; 0x2c
 80039bc:	fb00 f303 	mul.w	r3, r0, r3
 80039c0:	440b      	add	r3, r1
 80039c2:	3350      	adds	r3, #80	; 0x50
 80039c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	212c      	movs	r1, #44	; 0x2c
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	3361      	adds	r3, #97	; 0x61
 80039d4:	2201      	movs	r2, #1
 80039d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	212c      	movs	r1, #44	; 0x2c
 80039de:	fb01 f303 	mul.w	r3, r1, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	335c      	adds	r3, #92	; 0x5c
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f6:	461a      	mov	r2, r3
 80039f8:	2301      	movs	r3, #1
 80039fa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	212c      	movs	r1, #44	; 0x2c
 8003a02:	fb01 f303 	mul.w	r3, r1, r3
 8003a06:	4413      	add	r3, r2
 8003a08:	333f      	adds	r3, #63	; 0x3f
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d009      	beq.n	8003a24 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	212c      	movs	r1, #44	; 0x2c
 8003a16:	fb01 f303 	mul.w	r3, r1, r3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	333f      	adds	r3, #63	; 0x3f
 8003a1e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d121      	bne.n	8003a68 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	0151      	lsls	r1, r2, #5
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	440a      	add	r2, r1
 8003a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a3e:	f043 0302 	orr.w	r3, r3, #2
 8003a42:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f005 fb55 	bl	80090fe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a60:	461a      	mov	r2, r3
 8003a62:	2310      	movs	r3, #16
 8003a64:	6093      	str	r3, [r2, #8]
 8003a66:	e066      	b.n	8003b36 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	212c      	movs	r1, #44	; 0x2c
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	4413      	add	r3, r2
 8003a74:	333f      	adds	r3, #63	; 0x3f
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d127      	bne.n	8003acc <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	0151      	lsls	r1, r2, #5
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	440a      	add	r2, r1
 8003a92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a9a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	212c      	movs	r1, #44	; 0x2c
 8003aa2:	fb01 f303 	mul.w	r3, r1, r3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	3360      	adds	r3, #96	; 0x60
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	b2d9      	uxtb	r1, r3
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	202c      	movs	r0, #44	; 0x2c
 8003ab8:	fb00 f303 	mul.w	r3, r0, r3
 8003abc:	4413      	add	r3, r2
 8003abe:	3360      	adds	r3, #96	; 0x60
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f007 fcd7 	bl	800b478 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003aca:	e034      	b.n	8003b36 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	212c      	movs	r1, #44	; 0x2c
 8003ad2:	fb01 f303 	mul.w	r3, r1, r3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	333f      	adds	r3, #63	; 0x3f
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d12a      	bne.n	8003b36 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	212c      	movs	r1, #44	; 0x2c
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	4413      	add	r3, r2
 8003aec:	3360      	adds	r3, #96	; 0x60
 8003aee:	2201      	movs	r2, #1
 8003af0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	212c      	movs	r1, #44	; 0x2c
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	4413      	add	r3, r2
 8003afe:	3354      	adds	r3, #84	; 0x54
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	f083 0301 	eor.w	r3, r3, #1
 8003b06:	b2d8      	uxtb	r0, r3
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	212c      	movs	r1, #44	; 0x2c
 8003b0e:	fb01 f303 	mul.w	r3, r1, r3
 8003b12:	4413      	add	r3, r2
 8003b14:	3354      	adds	r3, #84	; 0x54
 8003b16:	4602      	mov	r2, r0
 8003b18:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	b2d9      	uxtb	r1, r3
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	202c      	movs	r0, #44	; 0x2c
 8003b24:	fb00 f303 	mul.w	r3, r0, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	3360      	adds	r3, #96	; 0x60
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f007 fca1 	bl	800b478 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d12b      	bne.n	8003b96 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	212c      	movs	r1, #44	; 0x2c
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	4413      	add	r3, r2
 8003b4a:	3348      	adds	r3, #72	; 0x48
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	202c      	movs	r0, #44	; 0x2c
 8003b54:	fb00 f202 	mul.w	r2, r0, r2
 8003b58:	440a      	add	r2, r1
 8003b5a:	3240      	adds	r2, #64	; 0x40
 8003b5c:	8812      	ldrh	r2, [r2, #0]
 8003b5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 81be 	beq.w	8003ee8 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	212c      	movs	r1, #44	; 0x2c
 8003b72:	fb01 f303 	mul.w	r3, r1, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	3354      	adds	r3, #84	; 0x54
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	f083 0301 	eor.w	r3, r3, #1
 8003b80:	b2d8      	uxtb	r0, r3
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	212c      	movs	r1, #44	; 0x2c
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3354      	adds	r3, #84	; 0x54
 8003b90:	4602      	mov	r2, r0
 8003b92:	701a      	strb	r2, [r3, #0]
}
 8003b94:	e1a8      	b.n	8003ee8 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	212c      	movs	r1, #44	; 0x2c
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3354      	adds	r3, #84	; 0x54
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	f083 0301 	eor.w	r3, r3, #1
 8003baa:	b2d8      	uxtb	r0, r3
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3354      	adds	r3, #84	; 0x54
 8003bba:	4602      	mov	r2, r0
 8003bbc:	701a      	strb	r2, [r3, #0]
}
 8003bbe:	e193      	b.n	8003ee8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	f040 8106 	bne.w	8003de4 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	0151      	lsls	r1, r2, #5
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	440a      	add	r2, r1
 8003bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bf2:	f023 0302 	bic.w	r3, r3, #2
 8003bf6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	212c      	movs	r1, #44	; 0x2c
 8003bfe:	fb01 f303 	mul.w	r3, r1, r3
 8003c02:	4413      	add	r3, r2
 8003c04:	3361      	adds	r3, #97	; 0x61
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d109      	bne.n	8003c20 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	212c      	movs	r1, #44	; 0x2c
 8003c12:	fb01 f303 	mul.w	r3, r1, r3
 8003c16:	4413      	add	r3, r2
 8003c18:	3360      	adds	r3, #96	; 0x60
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	e0c9      	b.n	8003db4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	212c      	movs	r1, #44	; 0x2c
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3361      	adds	r3, #97	; 0x61
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b05      	cmp	r3, #5
 8003c32:	d109      	bne.n	8003c48 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	212c      	movs	r1, #44	; 0x2c
 8003c3a:	fb01 f303 	mul.w	r3, r1, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	3360      	adds	r3, #96	; 0x60
 8003c42:	2205      	movs	r2, #5
 8003c44:	701a      	strb	r2, [r3, #0]
 8003c46:	e0b5      	b.n	8003db4 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	212c      	movs	r1, #44	; 0x2c
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	3361      	adds	r3, #97	; 0x61
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b06      	cmp	r3, #6
 8003c5a:	d009      	beq.n	8003c70 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	212c      	movs	r1, #44	; 0x2c
 8003c62:	fb01 f303 	mul.w	r3, r1, r3
 8003c66:	4413      	add	r3, r2
 8003c68:	3361      	adds	r3, #97	; 0x61
 8003c6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d150      	bne.n	8003d12 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	212c      	movs	r1, #44	; 0x2c
 8003c76:	fb01 f303 	mul.w	r3, r1, r3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	335c      	adds	r3, #92	; 0x5c
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	202c      	movs	r0, #44	; 0x2c
 8003c88:	fb00 f303 	mul.w	r3, r0, r3
 8003c8c:	440b      	add	r3, r1
 8003c8e:	335c      	adds	r3, #92	; 0x5c
 8003c90:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	212c      	movs	r1, #44	; 0x2c
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	335c      	adds	r3, #92	; 0x5c
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d912      	bls.n	8003ccc <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	212c      	movs	r1, #44	; 0x2c
 8003cac:	fb01 f303 	mul.w	r3, r1, r3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	335c      	adds	r3, #92	; 0x5c
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	212c      	movs	r1, #44	; 0x2c
 8003cbe:	fb01 f303 	mul.w	r3, r1, r3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3360      	adds	r3, #96	; 0x60
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003cca:	e073      	b.n	8003db4 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	212c      	movs	r1, #44	; 0x2c
 8003cd2:	fb01 f303 	mul.w	r3, r1, r3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3360      	adds	r3, #96	; 0x60
 8003cda:	2202      	movs	r2, #2
 8003cdc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cf4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cfc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d10:	e050      	b.n	8003db4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	212c      	movs	r1, #44	; 0x2c
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3361      	adds	r3, #97	; 0x61
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d122      	bne.n	8003d6c <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	212c      	movs	r1, #44	; 0x2c
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	3360      	adds	r3, #96	; 0x60
 8003d34:	2202      	movs	r2, #2
 8003d36:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d4e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d56:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d64:	461a      	mov	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	e023      	b.n	8003db4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	212c      	movs	r1, #44	; 0x2c
 8003d72:	fb01 f303 	mul.w	r3, r1, r3
 8003d76:	4413      	add	r3, r2
 8003d78:	3361      	adds	r3, #97	; 0x61
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b07      	cmp	r3, #7
 8003d7e:	d119      	bne.n	8003db4 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	212c      	movs	r1, #44	; 0x2c
 8003d86:	fb01 f303 	mul.w	r3, r1, r3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	335c      	adds	r3, #92	; 0x5c
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	202c      	movs	r0, #44	; 0x2c
 8003d98:	fb00 f303 	mul.w	r3, r0, r3
 8003d9c:	440b      	add	r3, r1
 8003d9e:	335c      	adds	r3, #92	; 0x5c
 8003da0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	212c      	movs	r1, #44	; 0x2c
 8003da8:	fb01 f303 	mul.w	r3, r1, r3
 8003dac:	4413      	add	r3, r2
 8003dae:	3360      	adds	r3, #96	; 0x60
 8003db0:	2204      	movs	r2, #4
 8003db2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	b2d9      	uxtb	r1, r3
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	202c      	movs	r0, #44	; 0x2c
 8003dd0:	fb00 f303 	mul.w	r3, r0, r3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3360      	adds	r3, #96	; 0x60
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f007 fb4b 	bl	800b478 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003de2:	e081      	b.n	8003ee8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b10      	cmp	r3, #16
 8003df8:	d176      	bne.n	8003ee8 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	212c      	movs	r1, #44	; 0x2c
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	4413      	add	r3, r2
 8003e06:	333f      	adds	r3, #63	; 0x3f
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d121      	bne.n	8003e52 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	212c      	movs	r1, #44	; 0x2c
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	335c      	adds	r3, #92	; 0x5c
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	0151      	lsls	r1, r2, #5
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	440a      	add	r2, r1
 8003e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e3a:	f043 0302 	orr.w	r3, r3, #2
 8003e3e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f005 f957 	bl	80090fe <USB_HC_Halt>
 8003e50:	e041      	b.n	8003ed6 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	212c      	movs	r1, #44	; 0x2c
 8003e58:	fb01 f303 	mul.w	r3, r1, r3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	333f      	adds	r3, #63	; 0x3f
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	212c      	movs	r1, #44	; 0x2c
 8003e6c:	fb01 f303 	mul.w	r3, r1, r3
 8003e70:	4413      	add	r3, r2
 8003e72:	333f      	adds	r3, #63	; 0x3f
 8003e74:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d12d      	bne.n	8003ed6 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	212c      	movs	r1, #44	; 0x2c
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	4413      	add	r3, r2
 8003e86:	335c      	adds	r3, #92	; 0x5c
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d120      	bne.n	8003ed6 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	212c      	movs	r1, #44	; 0x2c
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3361      	adds	r3, #97	; 0x61
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	0151      	lsls	r1, r2, #5
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	440a      	add	r2, r1
 8003ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ec0:	f043 0302 	orr.w	r3, r3, #2
 8003ec4:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	4611      	mov	r1, r2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f005 f914 	bl	80090fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	6093      	str	r3, [r2, #8]
}
 8003ee8:	bf00      	nop
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d119      	bne.n	8003f54 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2304      	movs	r3, #4
 8003f30:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	0151      	lsls	r1, r2, #5
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	440a      	add	r2, r1
 8003f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f4c:	f043 0302 	orr.w	r3, r3, #2
 8003f50:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003f52:	e3c6      	b.n	80046e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d13e      	bne.n	8003fe8 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f76:	461a      	mov	r2, r3
 8003f78:	2320      	movs	r3, #32
 8003f7a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	212c      	movs	r1, #44	; 0x2c
 8003f82:	fb01 f303 	mul.w	r3, r1, r3
 8003f86:	4413      	add	r3, r2
 8003f88:	333d      	adds	r3, #61	; 0x3d
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	f040 83a8 	bne.w	80046e2 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	212c      	movs	r1, #44	; 0x2c
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	333d      	adds	r3, #61	; 0x3d
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	212c      	movs	r1, #44	; 0x2c
 8003faa:	fb01 f303 	mul.w	r3, r1, r3
 8003fae:	4413      	add	r3, r2
 8003fb0:	3360      	adds	r3, #96	; 0x60
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	0151      	lsls	r1, r2, #5
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	440a      	add	r2, r1
 8003fcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fd0:	f043 0302 	orr.w	r3, r3, #2
 8003fd4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	4611      	mov	r1, r2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f005 f88c 	bl	80090fe <USB_HC_Halt>
}
 8003fe6:	e37c      	b.n	80046e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ffe:	d122      	bne.n	8004046 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	4413      	add	r3, r2
 8004008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	0151      	lsls	r1, r2, #5
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	440a      	add	r2, r1
 8004016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800401a:	f043 0302 	orr.w	r3, r3, #2
 800401e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f005 f867 	bl	80090fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	4413      	add	r3, r2
 8004038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403c:	461a      	mov	r2, r3
 800403e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004042:	6093      	str	r3, [r2, #8]
}
 8004044:	e34d      	b.n	80046e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	4413      	add	r3, r2
 800404e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b01      	cmp	r3, #1
 800405a:	d150      	bne.n	80040fe <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	212c      	movs	r1, #44	; 0x2c
 8004062:	fb01 f303 	mul.w	r3, r1, r3
 8004066:	4413      	add	r3, r2
 8004068:	335c      	adds	r3, #92	; 0x5c
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	4413      	add	r3, r2
 8004076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d111      	bne.n	80040a8 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	212c      	movs	r1, #44	; 0x2c
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	4413      	add	r3, r2
 8004090:	333d      	adds	r3, #61	; 0x3d
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	4413      	add	r3, r2
 800409e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a2:	461a      	mov	r2, r3
 80040a4:	2340      	movs	r3, #64	; 0x40
 80040a6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	0151      	lsls	r1, r2, #5
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	440a      	add	r2, r1
 80040be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040c2:	f043 0302 	orr.w	r3, r3, #2
 80040c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f005 f813 	bl	80090fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e4:	461a      	mov	r2, r3
 80040e6:	2301      	movs	r3, #1
 80040e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	212c      	movs	r1, #44	; 0x2c
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	4413      	add	r3, r2
 80040f6:	3361      	adds	r3, #97	; 0x61
 80040f8:	2201      	movs	r2, #1
 80040fa:	701a      	strb	r2, [r3, #0]
}
 80040fc:	e2f1      	b.n	80046e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	4413      	add	r3, r2
 8004106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004110:	2b40      	cmp	r3, #64	; 0x40
 8004112:	d13c      	bne.n	800418e <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	212c      	movs	r1, #44	; 0x2c
 800411a:	fb01 f303 	mul.w	r3, r1, r3
 800411e:	4413      	add	r3, r2
 8004120:	3361      	adds	r3, #97	; 0x61
 8004122:	2204      	movs	r2, #4
 8004124:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	212c      	movs	r1, #44	; 0x2c
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	4413      	add	r3, r2
 8004132:	333d      	adds	r3, #61	; 0x3d
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	212c      	movs	r1, #44	; 0x2c
 800413e:	fb01 f303 	mul.w	r3, r1, r3
 8004142:	4413      	add	r3, r2
 8004144:	335c      	adds	r3, #92	; 0x5c
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	4413      	add	r3, r2
 8004152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	0151      	lsls	r1, r2, #5
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	440a      	add	r2, r1
 8004160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004164:	f043 0302 	orr.w	r3, r3, #2
 8004168:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f004 ffc2 	bl	80090fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	4413      	add	r3, r2
 8004182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004186:	461a      	mov	r2, r3
 8004188:	2340      	movs	r3, #64	; 0x40
 800418a:	6093      	str	r3, [r2, #8]
}
 800418c:	e2a9      	b.n	80046e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	4413      	add	r3, r2
 8004196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d12a      	bne.n	80041fa <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b0:	461a      	mov	r2, r3
 80041b2:	2308      	movs	r3, #8
 80041b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	0151      	lsls	r1, r2, #5
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	440a      	add	r2, r1
 80041cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d0:	f043 0302 	orr.w	r3, r3, #2
 80041d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	4611      	mov	r1, r2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f004 ff8c 	bl	80090fe <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	212c      	movs	r1, #44	; 0x2c
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	4413      	add	r3, r2
 80041f2:	3361      	adds	r3, #97	; 0x61
 80041f4:	2205      	movs	r2, #5
 80041f6:	701a      	strb	r2, [r3, #0]
}
 80041f8:	e273      	b.n	80046e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	4413      	add	r3, r2
 8004202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b10      	cmp	r3, #16
 800420e:	d150      	bne.n	80042b2 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	212c      	movs	r1, #44	; 0x2c
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	4413      	add	r3, r2
 800421c:	335c      	adds	r3, #92	; 0x5c
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	212c      	movs	r1, #44	; 0x2c
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	4413      	add	r3, r2
 800422e:	3361      	adds	r3, #97	; 0x61
 8004230:	2203      	movs	r2, #3
 8004232:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	212c      	movs	r1, #44	; 0x2c
 800423a:	fb01 f303 	mul.w	r3, r1, r3
 800423e:	4413      	add	r3, r2
 8004240:	333d      	adds	r3, #61	; 0x3d
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d112      	bne.n	800426e <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	212c      	movs	r1, #44	; 0x2c
 800424e:	fb01 f303 	mul.w	r3, r1, r3
 8004252:	4413      	add	r3, r2
 8004254:	333c      	adds	r3, #60	; 0x3c
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d108      	bne.n	800426e <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	212c      	movs	r1, #44	; 0x2c
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	4413      	add	r3, r2
 8004268:	333d      	adds	r3, #61	; 0x3d
 800426a:	2201      	movs	r2, #1
 800426c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	4413      	add	r3, r2
 8004276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	0151      	lsls	r1, r2, #5
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	440a      	add	r2, r1
 8004284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004288:	f043 0302 	orr.w	r3, r3, #2
 800428c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	4611      	mov	r1, r2
 8004298:	4618      	mov	r0, r3
 800429a:	f004 ff30 	bl	80090fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042aa:	461a      	mov	r2, r3
 80042ac:	2310      	movs	r3, #16
 80042ae:	6093      	str	r3, [r2, #8]
}
 80042b0:	e217      	b.n	80046e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c4:	2b80      	cmp	r3, #128	; 0x80
 80042c6:	d174      	bne.n	80043b2 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d121      	bne.n	8004314 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	212c      	movs	r1, #44	; 0x2c
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	4413      	add	r3, r2
 80042dc:	3361      	adds	r3, #97	; 0x61
 80042de:	2206      	movs	r2, #6
 80042e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	0151      	lsls	r1, r2, #5
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	440a      	add	r2, r1
 80042f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042fc:	f043 0302 	orr.w	r3, r3, #2
 8004300:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	4611      	mov	r1, r2
 800430c:	4618      	mov	r0, r3
 800430e:	f004 fef6 	bl	80090fe <USB_HC_Halt>
 8004312:	e044      	b.n	800439e <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	212c      	movs	r1, #44	; 0x2c
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	4413      	add	r3, r2
 8004320:	335c      	adds	r3, #92	; 0x5c
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	202c      	movs	r0, #44	; 0x2c
 800432c:	fb00 f303 	mul.w	r3, r0, r3
 8004330:	440b      	add	r3, r1
 8004332:	335c      	adds	r3, #92	; 0x5c
 8004334:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	212c      	movs	r1, #44	; 0x2c
 800433c:	fb01 f303 	mul.w	r3, r1, r3
 8004340:	4413      	add	r3, r2
 8004342:	335c      	adds	r3, #92	; 0x5c
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d920      	bls.n	800438c <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	212c      	movs	r1, #44	; 0x2c
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	4413      	add	r3, r2
 8004356:	335c      	adds	r3, #92	; 0x5c
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	212c      	movs	r1, #44	; 0x2c
 8004362:	fb01 f303 	mul.w	r3, r1, r3
 8004366:	4413      	add	r3, r2
 8004368:	3360      	adds	r3, #96	; 0x60
 800436a:	2204      	movs	r2, #4
 800436c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	b2d9      	uxtb	r1, r3
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	202c      	movs	r0, #44	; 0x2c
 8004378:	fb00 f303 	mul.w	r3, r0, r3
 800437c:	4413      	add	r3, r2
 800437e:	3360      	adds	r3, #96	; 0x60
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f007 f877 	bl	800b478 <HAL_HCD_HC_NotifyURBChange_Callback>
 800438a:	e008      	b.n	800439e <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	212c      	movs	r1, #44	; 0x2c
 8004392:	fb01 f303 	mul.w	r3, r1, r3
 8004396:	4413      	add	r3, r2
 8004398:	3360      	adds	r3, #96	; 0x60
 800439a:	2202      	movs	r2, #2
 800439c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043aa:	461a      	mov	r2, r3
 80043ac:	2380      	movs	r3, #128	; 0x80
 80043ae:	6093      	str	r3, [r2, #8]
}
 80043b0:	e197      	b.n	80046e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c8:	d134      	bne.n	8004434 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	0151      	lsls	r1, r2, #5
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	440a      	add	r2, r1
 80043e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043e4:	f043 0302 	orr.w	r3, r3, #2
 80043e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	4611      	mov	r1, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f004 fe82 	bl	80090fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	4413      	add	r3, r2
 8004402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004406:	461a      	mov	r2, r3
 8004408:	2310      	movs	r3, #16
 800440a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	4413      	add	r3, r2
 8004414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004418:	461a      	mov	r2, r3
 800441a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800441e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	212c      	movs	r1, #44	; 0x2c
 8004426:	fb01 f303 	mul.w	r3, r1, r3
 800442a:	4413      	add	r3, r2
 800442c:	3361      	adds	r3, #97	; 0x61
 800442e:	2208      	movs	r2, #8
 8004430:	701a      	strb	r2, [r3, #0]
}
 8004432:	e156      	b.n	80046e2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	4413      	add	r3, r2
 800443c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b02      	cmp	r3, #2
 8004448:	f040 814b 	bne.w	80046e2 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	4413      	add	r3, r2
 8004454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	0151      	lsls	r1, r2, #5
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	440a      	add	r2, r1
 8004462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004466:	f023 0302 	bic.w	r3, r3, #2
 800446a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	212c      	movs	r1, #44	; 0x2c
 8004472:	fb01 f303 	mul.w	r3, r1, r3
 8004476:	4413      	add	r3, r2
 8004478:	3361      	adds	r3, #97	; 0x61
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d179      	bne.n	8004574 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	212c      	movs	r1, #44	; 0x2c
 8004486:	fb01 f303 	mul.w	r3, r1, r3
 800448a:	4413      	add	r3, r2
 800448c:	3360      	adds	r3, #96	; 0x60
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	212c      	movs	r1, #44	; 0x2c
 8004498:	fb01 f303 	mul.w	r3, r1, r3
 800449c:	4413      	add	r3, r2
 800449e:	333f      	adds	r3, #63	; 0x3f
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d00a      	beq.n	80044bc <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	212c      	movs	r1, #44	; 0x2c
 80044ac:	fb01 f303 	mul.w	r3, r1, r3
 80044b0:	4413      	add	r3, r2
 80044b2:	333f      	adds	r3, #63	; 0x3f
 80044b4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	f040 80fc 	bne.w	80046b4 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d142      	bne.n	800454a <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	212c      	movs	r1, #44	; 0x2c
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	4413      	add	r3, r2
 80044d0:	334c      	adds	r3, #76	; 0x4c
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80ed 	beq.w	80046b4 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	212c      	movs	r1, #44	; 0x2c
 80044e0:	fb01 f303 	mul.w	r3, r1, r3
 80044e4:	4413      	add	r3, r2
 80044e6:	334c      	adds	r3, #76	; 0x4c
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	202c      	movs	r0, #44	; 0x2c
 80044f0:	fb00 f202 	mul.w	r2, r0, r2
 80044f4:	440a      	add	r2, r1
 80044f6:	3240      	adds	r2, #64	; 0x40
 80044f8:	8812      	ldrh	r2, [r2, #0]
 80044fa:	4413      	add	r3, r2
 80044fc:	3b01      	subs	r3, #1
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	202c      	movs	r0, #44	; 0x2c
 8004504:	fb00 f202 	mul.w	r2, r0, r2
 8004508:	440a      	add	r2, r1
 800450a:	3240      	adds	r2, #64	; 0x40
 800450c:	8812      	ldrh	r2, [r2, #0]
 800450e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80ca 	beq.w	80046b4 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	212c      	movs	r1, #44	; 0x2c
 8004526:	fb01 f303 	mul.w	r3, r1, r3
 800452a:	4413      	add	r3, r2
 800452c:	3355      	adds	r3, #85	; 0x55
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	f083 0301 	eor.w	r3, r3, #1
 8004534:	b2d8      	uxtb	r0, r3
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	212c      	movs	r1, #44	; 0x2c
 800453c:	fb01 f303 	mul.w	r3, r1, r3
 8004540:	4413      	add	r3, r2
 8004542:	3355      	adds	r3, #85	; 0x55
 8004544:	4602      	mov	r2, r0
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	e0b4      	b.n	80046b4 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	212c      	movs	r1, #44	; 0x2c
 8004550:	fb01 f303 	mul.w	r3, r1, r3
 8004554:	4413      	add	r3, r2
 8004556:	3355      	adds	r3, #85	; 0x55
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	f083 0301 	eor.w	r3, r3, #1
 800455e:	b2d8      	uxtb	r0, r3
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	212c      	movs	r1, #44	; 0x2c
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	4413      	add	r3, r2
 800456c:	3355      	adds	r3, #85	; 0x55
 800456e:	4602      	mov	r2, r0
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e09f      	b.n	80046b4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	212c      	movs	r1, #44	; 0x2c
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	4413      	add	r3, r2
 8004580:	3361      	adds	r3, #97	; 0x61
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b03      	cmp	r3, #3
 8004586:	d109      	bne.n	800459c <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	212c      	movs	r1, #44	; 0x2c
 800458e:	fb01 f303 	mul.w	r3, r1, r3
 8004592:	4413      	add	r3, r2
 8004594:	3360      	adds	r3, #96	; 0x60
 8004596:	2202      	movs	r2, #2
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	e08b      	b.n	80046b4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	212c      	movs	r1, #44	; 0x2c
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	3361      	adds	r3, #97	; 0x61
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d109      	bne.n	80045c4 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	212c      	movs	r1, #44	; 0x2c
 80045b6:	fb01 f303 	mul.w	r3, r1, r3
 80045ba:	4413      	add	r3, r2
 80045bc:	3360      	adds	r3, #96	; 0x60
 80045be:	2202      	movs	r2, #2
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	e077      	b.n	80046b4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	212c      	movs	r1, #44	; 0x2c
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	3361      	adds	r3, #97	; 0x61
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b05      	cmp	r3, #5
 80045d6:	d109      	bne.n	80045ec <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	212c      	movs	r1, #44	; 0x2c
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	4413      	add	r3, r2
 80045e4:	3360      	adds	r3, #96	; 0x60
 80045e6:	2205      	movs	r2, #5
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	e063      	b.n	80046b4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	212c      	movs	r1, #44	; 0x2c
 80045f2:	fb01 f303 	mul.w	r3, r1, r3
 80045f6:	4413      	add	r3, r2
 80045f8:	3361      	adds	r3, #97	; 0x61
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b06      	cmp	r3, #6
 80045fe:	d009      	beq.n	8004614 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	212c      	movs	r1, #44	; 0x2c
 8004606:	fb01 f303 	mul.w	r3, r1, r3
 800460a:	4413      	add	r3, r2
 800460c:	3361      	adds	r3, #97	; 0x61
 800460e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004610:	2b08      	cmp	r3, #8
 8004612:	d14f      	bne.n	80046b4 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	212c      	movs	r1, #44	; 0x2c
 800461a:	fb01 f303 	mul.w	r3, r1, r3
 800461e:	4413      	add	r3, r2
 8004620:	335c      	adds	r3, #92	; 0x5c
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	202c      	movs	r0, #44	; 0x2c
 800462c:	fb00 f303 	mul.w	r3, r0, r3
 8004630:	440b      	add	r3, r1
 8004632:	335c      	adds	r3, #92	; 0x5c
 8004634:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	212c      	movs	r1, #44	; 0x2c
 800463c:	fb01 f303 	mul.w	r3, r1, r3
 8004640:	4413      	add	r3, r2
 8004642:	335c      	adds	r3, #92	; 0x5c
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d912      	bls.n	8004670 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	212c      	movs	r1, #44	; 0x2c
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	4413      	add	r3, r2
 8004656:	335c      	adds	r3, #92	; 0x5c
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	212c      	movs	r1, #44	; 0x2c
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	4413      	add	r3, r2
 8004668:	3360      	adds	r3, #96	; 0x60
 800466a:	2204      	movs	r2, #4
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	e021      	b.n	80046b4 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	212c      	movs	r1, #44	; 0x2c
 8004676:	fb01 f303 	mul.w	r3, r1, r3
 800467a:	4413      	add	r3, r2
 800467c:	3360      	adds	r3, #96	; 0x60
 800467e:	2202      	movs	r2, #2
 8004680:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	4413      	add	r3, r2
 800468a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004698:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046a0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ae:	461a      	mov	r2, r3
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c0:	461a      	mov	r2, r3
 80046c2:	2302      	movs	r3, #2
 80046c4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	b2d9      	uxtb	r1, r3
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	202c      	movs	r0, #44	; 0x2c
 80046d0:	fb00 f303 	mul.w	r3, r0, r3
 80046d4:	4413      	add	r3, r2
 80046d6:	3360      	adds	r3, #96	; 0x60
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f006 fecb 	bl	800b478 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80046e2:	bf00      	nop
 80046e4:	3720      	adds	r7, #32
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b08a      	sub	sp, #40	; 0x28
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	0c5b      	lsrs	r3, r3, #17
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800471e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d004      	beq.n	8004730 <HCD_RXQLVL_IRQHandler+0x46>
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b05      	cmp	r3, #5
 800472a:	f000 80a9 	beq.w	8004880 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800472e:	e0aa      	b.n	8004886 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80a6 	beq.w	8004884 <HCD_RXQLVL_IRQHandler+0x19a>
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	212c      	movs	r1, #44	; 0x2c
 800473e:	fb01 f303 	mul.w	r3, r1, r3
 8004742:	4413      	add	r3, r2
 8004744:	3344      	adds	r3, #68	; 0x44
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 809b 	beq.w	8004884 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	212c      	movs	r1, #44	; 0x2c
 8004754:	fb01 f303 	mul.w	r3, r1, r3
 8004758:	4413      	add	r3, r2
 800475a:	3350      	adds	r3, #80	; 0x50
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	441a      	add	r2, r3
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	202c      	movs	r0, #44	; 0x2c
 8004768:	fb00 f303 	mul.w	r3, r0, r3
 800476c:	440b      	add	r3, r1
 800476e:	334c      	adds	r3, #76	; 0x4c
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d87a      	bhi.n	800486c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	212c      	movs	r1, #44	; 0x2c
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	4413      	add	r3, r2
 8004786:	3344      	adds	r3, #68	; 0x44
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	b292      	uxth	r2, r2
 800478e:	4619      	mov	r1, r3
 8004790:	f004 f853 	bl	800883a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	212c      	movs	r1, #44	; 0x2c
 800479a:	fb01 f303 	mul.w	r3, r1, r3
 800479e:	4413      	add	r3, r2
 80047a0:	3344      	adds	r3, #68	; 0x44
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	441a      	add	r2, r3
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	202c      	movs	r0, #44	; 0x2c
 80047ae:	fb00 f303 	mul.w	r3, r0, r3
 80047b2:	440b      	add	r3, r1
 80047b4:	3344      	adds	r3, #68	; 0x44
 80047b6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	212c      	movs	r1, #44	; 0x2c
 80047be:	fb01 f303 	mul.w	r3, r1, r3
 80047c2:	4413      	add	r3, r2
 80047c4:	3350      	adds	r3, #80	; 0x50
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	441a      	add	r2, r3
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	202c      	movs	r0, #44	; 0x2c
 80047d2:	fb00 f303 	mul.w	r3, r0, r3
 80047d6:	440b      	add	r3, r1
 80047d8:	3350      	adds	r3, #80	; 0x50
 80047da:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	0cdb      	lsrs	r3, r3, #19
 80047ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047f0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	212c      	movs	r1, #44	; 0x2c
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	4413      	add	r3, r2
 80047fe:	3340      	adds	r3, #64	; 0x40
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	4293      	cmp	r3, r2
 8004808:	d13c      	bne.n	8004884 <HCD_RXQLVL_IRQHandler+0x19a>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d039      	beq.n	8004884 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	4413      	add	r3, r2
 8004818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004826:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800482e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	4413      	add	r3, r2
 8004838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483c:	461a      	mov	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	212c      	movs	r1, #44	; 0x2c
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	4413      	add	r3, r2
 800484e:	3354      	adds	r3, #84	; 0x54
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	f083 0301 	eor.w	r3, r3, #1
 8004856:	b2d8      	uxtb	r0, r3
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	212c      	movs	r1, #44	; 0x2c
 800485e:	fb01 f303 	mul.w	r3, r1, r3
 8004862:	4413      	add	r3, r2
 8004864:	3354      	adds	r3, #84	; 0x54
 8004866:	4602      	mov	r2, r0
 8004868:	701a      	strb	r2, [r3, #0]
      break;
 800486a:	e00b      	b.n	8004884 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	212c      	movs	r1, #44	; 0x2c
 8004872:	fb01 f303 	mul.w	r3, r1, r3
 8004876:	4413      	add	r3, r2
 8004878:	3360      	adds	r3, #96	; 0x60
 800487a:	2204      	movs	r2, #4
 800487c:	701a      	strb	r2, [r3, #0]
      break;
 800487e:	e001      	b.n	8004884 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004880:	bf00      	nop
 8004882:	e000      	b.n	8004886 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004884:	bf00      	nop
  }
}
 8004886:	bf00      	nop
 8004888:	3728      	adds	r7, #40	; 0x28
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80048ba:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d10b      	bne.n	80048de <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d102      	bne.n	80048d6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f006 fdb5 	bl	800b440 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f043 0302 	orr.w	r3, r3, #2
 80048dc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d132      	bne.n	800494e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f043 0308 	orr.w	r3, r3, #8
 80048ee:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d126      	bne.n	8004948 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d113      	bne.n	800492a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004908:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800490c:	d106      	bne.n	800491c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2102      	movs	r1, #2
 8004914:	4618      	mov	r0, r3
 8004916:	f004 f8cb 	bl	8008ab0 <USB_InitFSLSPClkSel>
 800491a:	e011      	b.n	8004940 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2101      	movs	r1, #1
 8004922:	4618      	mov	r0, r3
 8004924:	f004 f8c4 	bl	8008ab0 <USB_InitFSLSPClkSel>
 8004928:	e00a      	b.n	8004940 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d106      	bne.n	8004940 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004938:	461a      	mov	r2, r3
 800493a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800493e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f006 fda7 	bl	800b494 <HAL_HCD_PortEnabled_Callback>
 8004946:	e002      	b.n	800494e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f006 fdb1 	bl	800b4b0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b20      	cmp	r3, #32
 8004956:	d103      	bne.n	8004960 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f043 0320 	orr.w	r3, r3, #32
 800495e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004966:	461a      	mov	r2, r3
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	6013      	str	r3, [r2, #0]
}
 800496c:	bf00      	nop
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e12b      	b.n	8004bde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fc fc80 	bl	80012a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2224      	movs	r2, #36	; 0x24
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0201 	bic.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049d8:	f002 f868 	bl	8006aac <HAL_RCC_GetPCLK1Freq>
 80049dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4a81      	ldr	r2, [pc, #516]	; (8004be8 <HAL_I2C_Init+0x274>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d807      	bhi.n	80049f8 <HAL_I2C_Init+0x84>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4a80      	ldr	r2, [pc, #512]	; (8004bec <HAL_I2C_Init+0x278>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	bf94      	ite	ls
 80049f0:	2301      	movls	r3, #1
 80049f2:	2300      	movhi	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	e006      	b.n	8004a06 <HAL_I2C_Init+0x92>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4a7d      	ldr	r2, [pc, #500]	; (8004bf0 <HAL_I2C_Init+0x27c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	bf94      	ite	ls
 8004a00:	2301      	movls	r3, #1
 8004a02:	2300      	movhi	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e0e7      	b.n	8004bde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4a78      	ldr	r2, [pc, #480]	; (8004bf4 <HAL_I2C_Init+0x280>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	0c9b      	lsrs	r3, r3, #18
 8004a18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	4a6a      	ldr	r2, [pc, #424]	; (8004be8 <HAL_I2C_Init+0x274>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d802      	bhi.n	8004a48 <HAL_I2C_Init+0xd4>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	3301      	adds	r3, #1
 8004a46:	e009      	b.n	8004a5c <HAL_I2C_Init+0xe8>
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a4e:	fb02 f303 	mul.w	r3, r2, r3
 8004a52:	4a69      	ldr	r2, [pc, #420]	; (8004bf8 <HAL_I2C_Init+0x284>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	099b      	lsrs	r3, r3, #6
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6812      	ldr	r2, [r2, #0]
 8004a60:	430b      	orrs	r3, r1
 8004a62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	495c      	ldr	r1, [pc, #368]	; (8004be8 <HAL_I2C_Init+0x274>)
 8004a78:	428b      	cmp	r3, r1
 8004a7a:	d819      	bhi.n	8004ab0 <HAL_I2C_Init+0x13c>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	1e59      	subs	r1, r3, #1
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a8a:	1c59      	adds	r1, r3, #1
 8004a8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a90:	400b      	ands	r3, r1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <HAL_I2C_Init+0x138>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1e59      	subs	r1, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aaa:	e051      	b.n	8004b50 <HAL_I2C_Init+0x1dc>
 8004aac:	2304      	movs	r3, #4
 8004aae:	e04f      	b.n	8004b50 <HAL_I2C_Init+0x1dc>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d111      	bne.n	8004adc <HAL_I2C_Init+0x168>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	1e58      	subs	r0, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6859      	ldr	r1, [r3, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	440b      	add	r3, r1
 8004ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aca:	3301      	adds	r3, #1
 8004acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2301      	moveq	r3, #1
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	e012      	b.n	8004b02 <HAL_I2C_Init+0x18e>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1e58      	subs	r0, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6859      	ldr	r1, [r3, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	0099      	lsls	r1, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af2:	3301      	adds	r3, #1
 8004af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_I2C_Init+0x196>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e022      	b.n	8004b50 <HAL_I2C_Init+0x1dc>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10e      	bne.n	8004b30 <HAL_I2C_Init+0x1bc>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1e58      	subs	r0, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6859      	ldr	r1, [r3, #4]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	440b      	add	r3, r1
 8004b20:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b24:	3301      	adds	r3, #1
 8004b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2e:	e00f      	b.n	8004b50 <HAL_I2C_Init+0x1dc>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	1e58      	subs	r0, r3, #1
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6859      	ldr	r1, [r3, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	0099      	lsls	r1, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b46:	3301      	adds	r3, #1
 8004b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b50:	6879      	ldr	r1, [r7, #4]
 8004b52:	6809      	ldr	r1, [r1, #0]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69da      	ldr	r2, [r3, #28]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6911      	ldr	r1, [r2, #16]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	68d2      	ldr	r2, [r2, #12]
 8004b8a:	4311      	orrs	r1, r2
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	430b      	orrs	r3, r1
 8004b92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695a      	ldr	r2, [r3, #20]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	000186a0 	.word	0x000186a0
 8004bec:	001e847f 	.word	0x001e847f
 8004bf0:	003d08ff 	.word	0x003d08ff
 8004bf4:	431bde83 	.word	0x431bde83
 8004bf8:	10624dd3 	.word	0x10624dd3

08004bfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	607a      	str	r2, [r7, #4]
 8004c06:	461a      	mov	r2, r3
 8004c08:	460b      	mov	r3, r1
 8004c0a:	817b      	strh	r3, [r7, #10]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c10:	f7fd fe22 	bl	8002858 <HAL_GetTick>
 8004c14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	f040 80e0 	bne.w	8004de4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	2319      	movs	r3, #25
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	4970      	ldr	r1, [pc, #448]	; (8004df0 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fc72 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e0d3      	b.n	8004de6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_I2C_Master_Transmit+0x50>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e0cc      	b.n	8004de6 <HAL_I2C_Master_Transmit+0x1ea>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d007      	beq.n	8004c72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0201 	orr.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2221      	movs	r2, #33	; 0x21
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2210      	movs	r2, #16
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	893a      	ldrh	r2, [r7, #8]
 8004ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4a50      	ldr	r2, [pc, #320]	; (8004df4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004cb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004cb4:	8979      	ldrh	r1, [r7, #10]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	6a3a      	ldr	r2, [r7, #32]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 fac2 	bl	8005244 <I2C_MasterRequestWrite>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e08d      	b.n	8004de6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ce0:	e066      	b.n	8004db0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	6a39      	ldr	r1, [r7, #32]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 fcec 	bl	80056c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00d      	beq.n	8004d0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d107      	bne.n	8004d0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e06b      	b.n	8004de6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	781a      	ldrb	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d11b      	bne.n	8004d84 <HAL_I2C_Master_Transmit+0x188>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d017      	beq.n	8004d84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	781a      	ldrb	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	6a39      	ldr	r1, [r7, #32]
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 fcdc 	bl	8005746 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00d      	beq.n	8004db0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d107      	bne.n	8004dac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004daa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e01a      	b.n	8004de6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d194      	bne.n	8004ce2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	e000      	b.n	8004de6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004de4:	2302      	movs	r3, #2
  }
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	00100002 	.word	0x00100002
 8004df4:	ffff0000 	.word	0xffff0000

08004df8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08c      	sub	sp, #48	; 0x30
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	4608      	mov	r0, r1
 8004e02:	4611      	mov	r1, r2
 8004e04:	461a      	mov	r2, r3
 8004e06:	4603      	mov	r3, r0
 8004e08:	817b      	strh	r3, [r7, #10]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	813b      	strh	r3, [r7, #8]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e12:	f7fd fd21 	bl	8002858 <HAL_GetTick>
 8004e16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	f040 8208 	bne.w	8005236 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	2319      	movs	r3, #25
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	497b      	ldr	r1, [pc, #492]	; (800501c <HAL_I2C_Mem_Read+0x224>)
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 fb71 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e1fb      	b.n	8005238 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <HAL_I2C_Mem_Read+0x56>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e1f4      	b.n	8005238 <HAL_I2C_Mem_Read+0x440>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d007      	beq.n	8004e74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2222      	movs	r2, #34	; 0x22
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2240      	movs	r2, #64	; 0x40
 8004e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4a5b      	ldr	r2, [pc, #364]	; (8005020 <HAL_I2C_Mem_Read+0x228>)
 8004eb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004eb6:	88f8      	ldrh	r0, [r7, #6]
 8004eb8:	893a      	ldrh	r2, [r7, #8]
 8004eba:	8979      	ldrh	r1, [r7, #10]
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	9301      	str	r3, [sp, #4]
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fa3e 	bl	8005348 <I2C_RequestMemoryRead>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e1b0      	b.n	8005238 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d113      	bne.n	8004f06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	623b      	str	r3, [r7, #32]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	623b      	str	r3, [r7, #32]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	623b      	str	r3, [r7, #32]
 8004ef2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e184      	b.n	8005210 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d11b      	bne.n	8004f46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e164      	b.n	8005210 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d11b      	bne.n	8004f86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61bb      	str	r3, [r7, #24]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	61bb      	str	r3, [r7, #24]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	e144      	b.n	8005210 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f9c:	e138      	b.n	8005210 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	f200 80f1 	bhi.w	800518a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d123      	bne.n	8004ff8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 fc07 	bl	80057c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e139      	b.n	8005238 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ff6:	e10b      	b.n	8005210 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d14e      	bne.n	800509e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	2200      	movs	r2, #0
 8005008:	4906      	ldr	r1, [pc, #24]	; (8005024 <HAL_I2C_Mem_Read+0x22c>)
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 fa84 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d008      	beq.n	8005028 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e10e      	b.n	8005238 <HAL_I2C_Mem_Read+0x440>
 800501a:	bf00      	nop
 800501c:	00100002 	.word	0x00100002
 8005020:	ffff0000 	.word	0xffff0000
 8005024:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005036:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800509c:	e0b8      	b.n	8005210 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	2200      	movs	r2, #0
 80050a6:	4966      	ldr	r1, [pc, #408]	; (8005240 <HAL_I2C_Mem_Read+0x448>)
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 fa35 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0bf      	b.n	8005238 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691a      	ldr	r2, [r3, #16]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	2200      	movs	r2, #0
 8005102:	494f      	ldr	r1, [pc, #316]	; (8005240 <HAL_I2C_Mem_Read+0x448>)
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 fa07 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e091      	b.n	8005238 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005172:	3b01      	subs	r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005188:	e042      	b.n	8005210 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800518a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fb1a 	bl	80057c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e04c      	b.n	8005238 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d118      	bne.n	8005210 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005214:	2b00      	cmp	r3, #0
 8005216:	f47f aec2 	bne.w	8004f9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	e000      	b.n	8005238 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005236:	2302      	movs	r3, #2
  }
}
 8005238:	4618      	mov	r0, r3
 800523a:	3728      	adds	r7, #40	; 0x28
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	00010004 	.word	0x00010004

08005244 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af02      	add	r7, sp, #8
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	607a      	str	r2, [r7, #4]
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	460b      	mov	r3, r1
 8005252:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b08      	cmp	r3, #8
 800525e:	d006      	beq.n	800526e <I2C_MasterRequestWrite+0x2a>
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d003      	beq.n	800526e <I2C_MasterRequestWrite+0x2a>
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800526c:	d108      	bne.n	8005280 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	e00b      	b.n	8005298 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005284:	2b12      	cmp	r3, #18
 8005286:	d107      	bne.n	8005298 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005296:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 f937 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00d      	beq.n	80052cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052be:	d103      	bne.n	80052c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e035      	b.n	8005338 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052d4:	d108      	bne.n	80052e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052d6:	897b      	ldrh	r3, [r7, #10]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052e4:	611a      	str	r2, [r3, #16]
 80052e6:	e01b      	b.n	8005320 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052e8:	897b      	ldrh	r3, [r7, #10]
 80052ea:	11db      	asrs	r3, r3, #7
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	f003 0306 	and.w	r3, r3, #6
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	f063 030f 	orn	r3, r3, #15
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	490e      	ldr	r1, [pc, #56]	; (8005340 <I2C_MasterRequestWrite+0xfc>)
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 f95d 	bl	80055c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e010      	b.n	8005338 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005316:	897b      	ldrh	r3, [r7, #10]
 8005318:	b2da      	uxtb	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	4907      	ldr	r1, [pc, #28]	; (8005344 <I2C_MasterRequestWrite+0x100>)
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 f94d 	bl	80055c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	00010008 	.word	0x00010008
 8005344:	00010002 	.word	0x00010002

08005348 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af02      	add	r7, sp, #8
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	4608      	mov	r0, r1
 8005352:	4611      	mov	r1, r2
 8005354:	461a      	mov	r2, r3
 8005356:	4603      	mov	r3, r0
 8005358:	817b      	strh	r3, [r7, #10]
 800535a:	460b      	mov	r3, r1
 800535c:	813b      	strh	r3, [r7, #8]
 800535e:	4613      	mov	r3, r2
 8005360:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005370:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005380:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	2200      	movs	r2, #0
 800538a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 f8c2 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00d      	beq.n	80053b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a8:	d103      	bne.n	80053b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e0aa      	b.n	800550c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053b6:	897b      	ldrh	r3, [r7, #10]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	6a3a      	ldr	r2, [r7, #32]
 80053ca:	4952      	ldr	r1, [pc, #328]	; (8005514 <I2C_RequestMemoryRead+0x1cc>)
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f8fa 	bl	80055c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e097      	b.n	800550c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053dc:	2300      	movs	r3, #0
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f4:	6a39      	ldr	r1, [r7, #32]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 f964 	bl	80056c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00d      	beq.n	800541e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	2b04      	cmp	r3, #4
 8005408:	d107      	bne.n	800541a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005418:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e076      	b.n	800550c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800541e:	88fb      	ldrh	r3, [r7, #6]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d105      	bne.n	8005430 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005424:	893b      	ldrh	r3, [r7, #8]
 8005426:	b2da      	uxtb	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	611a      	str	r2, [r3, #16]
 800542e:	e021      	b.n	8005474 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005430:	893b      	ldrh	r3, [r7, #8]
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	b29b      	uxth	r3, r3
 8005436:	b2da      	uxtb	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800543e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005440:	6a39      	ldr	r1, [r7, #32]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f93e 	bl	80056c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00d      	beq.n	800546a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	2b04      	cmp	r3, #4
 8005454:	d107      	bne.n	8005466 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005464:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e050      	b.n	800550c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800546a:	893b      	ldrh	r3, [r7, #8]
 800546c:	b2da      	uxtb	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005476:	6a39      	ldr	r1, [r7, #32]
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 f923 	bl	80056c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00d      	beq.n	80054a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	2b04      	cmp	r3, #4
 800548a:	d107      	bne.n	800549c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e035      	b.n	800550c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f82b 	bl	8005518 <I2C_WaitOnFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00d      	beq.n	80054e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d6:	d103      	bne.n	80054e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e013      	b.n	800550c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054e4:	897b      	ldrh	r3, [r7, #10]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	6a3a      	ldr	r2, [r7, #32]
 80054f8:	4906      	ldr	r1, [pc, #24]	; (8005514 <I2C_RequestMemoryRead+0x1cc>)
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f863 	bl	80055c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	00010002 	.word	0x00010002

08005518 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	4613      	mov	r3, r2
 8005526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005528:	e025      	b.n	8005576 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005530:	d021      	beq.n	8005576 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005532:	f7fd f991 	bl	8002858 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d302      	bcc.n	8005548 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d116      	bne.n	8005576 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f043 0220 	orr.w	r2, r3, #32
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e023      	b.n	80055be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	0c1b      	lsrs	r3, r3, #16
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	d10d      	bne.n	800559c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	43da      	mvns	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4013      	ands	r3, r2
 800558c:	b29b      	uxth	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	bf0c      	ite	eq
 8005592:	2301      	moveq	r3, #1
 8005594:	2300      	movne	r3, #0
 8005596:	b2db      	uxtb	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	e00c      	b.n	80055b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	43da      	mvns	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4013      	ands	r3, r2
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	bf0c      	ite	eq
 80055ae:	2301      	moveq	r3, #1
 80055b0:	2300      	movne	r3, #0
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	461a      	mov	r2, r3
 80055b6:	79fb      	ldrb	r3, [r7, #7]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d0b6      	beq.n	800552a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	607a      	str	r2, [r7, #4]
 80055d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055d4:	e051      	b.n	800567a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e4:	d123      	bne.n	800562e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	f043 0204 	orr.w	r2, r3, #4
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e046      	b.n	80056bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005634:	d021      	beq.n	800567a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005636:	f7fd f90f 	bl	8002858 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	429a      	cmp	r2, r3
 8005644:	d302      	bcc.n	800564c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d116      	bne.n	800567a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f043 0220 	orr.w	r2, r3, #32
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e020      	b.n	80056bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	0c1b      	lsrs	r3, r3, #16
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b01      	cmp	r3, #1
 8005682:	d10c      	bne.n	800569e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	43da      	mvns	r2, r3
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4013      	ands	r3, r2
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	bf14      	ite	ne
 8005696:	2301      	movne	r3, #1
 8005698:	2300      	moveq	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	e00b      	b.n	80056b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	43da      	mvns	r2, r3
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4013      	ands	r3, r2
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	bf14      	ite	ne
 80056b0:	2301      	movne	r3, #1
 80056b2:	2300      	moveq	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d18d      	bne.n	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056d0:	e02d      	b.n	800572e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f8ce 	bl	8005874 <I2C_IsAcknowledgeFailed>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e02d      	b.n	800573e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056e8:	d021      	beq.n	800572e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ea:	f7fd f8b5 	bl	8002858 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d302      	bcc.n	8005700 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d116      	bne.n	800572e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f043 0220 	orr.w	r2, r3, #32
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e007      	b.n	800573e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005738:	2b80      	cmp	r3, #128	; 0x80
 800573a:	d1ca      	bne.n	80056d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005752:	e02d      	b.n	80057b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f88d 	bl	8005874 <I2C_IsAcknowledgeFailed>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e02d      	b.n	80057c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800576a:	d021      	beq.n	80057b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576c:	f7fd f874 	bl	8002858 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	d302      	bcc.n	8005782 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d116      	bne.n	80057b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	f043 0220 	orr.w	r2, r3, #32
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e007      	b.n	80057c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d1ca      	bne.n	8005754 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057d4:	e042      	b.n	800585c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b10      	cmp	r3, #16
 80057e2:	d119      	bne.n	8005818 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0210 	mvn.w	r2, #16
 80057ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e029      	b.n	800586c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005818:	f7fd f81e 	bl	8002858 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	429a      	cmp	r2, r3
 8005826:	d302      	bcc.n	800582e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d116      	bne.n	800585c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	f043 0220 	orr.w	r2, r3, #32
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e007      	b.n	800586c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005866:	2b40      	cmp	r3, #64	; 0x40
 8005868:	d1b5      	bne.n	80057d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800588a:	d11b      	bne.n	80058c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005894:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	f043 0204 	orr.w	r2, r3, #4
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e128      	b.n	8005b38 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a90      	ldr	r2, [pc, #576]	; (8005b40 <HAL_I2S_Init+0x26c>)
 80058fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7fb fd6d 	bl	80013e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2202      	movs	r2, #2
 800590a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800591c:	f023 030f 	bic.w	r3, r3, #15
 8005920:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2202      	movs	r2, #2
 8005928:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d060      	beq.n	80059f4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d102      	bne.n	8005940 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800593a:	2310      	movs	r3, #16
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	e001      	b.n	8005944 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005940:	2320      	movs	r3, #32
 8005942:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	2b20      	cmp	r3, #32
 800594a:	d802      	bhi.n	8005952 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005952:	2001      	movs	r0, #1
 8005954:	f001 f9a0 	bl	8006c98 <HAL_RCCEx_GetPeriphCLKFreq>
 8005958:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005962:	d125      	bne.n	80059b0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d010      	beq.n	800598e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	fbb2 f2f3 	udiv	r2, r2, r3
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	461a      	mov	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	fbb2 f3f3 	udiv	r3, r2, r3
 8005988:	3305      	adds	r3, #5
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	e01f      	b.n	80059ce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	fbb2 f2f3 	udiv	r2, r2, r3
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	461a      	mov	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059aa:	3305      	adds	r3, #5
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	e00e      	b.n	80059ce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	461a      	mov	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ca:	3305      	adds	r3, #5
 80059cc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	4a5c      	ldr	r2, [pc, #368]	; (8005b44 <HAL_I2S_Init+0x270>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	08db      	lsrs	r3, r3, #3
 80059d8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	61bb      	str	r3, [r7, #24]
 80059f2:	e003      	b.n	80059fc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80059f4:	2302      	movs	r3, #2
 80059f6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d902      	bls.n	8005a08 <HAL_I2S_Init+0x134>
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	2bff      	cmp	r3, #255	; 0xff
 8005a06:	d907      	bls.n	8005a18 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0c:	f043 0210 	orr.w	r2, r3, #16
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e08f      	b.n	8005b38 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	ea42 0103 	orr.w	r1, r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a36:	f023 030f 	bic.w	r3, r3, #15
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6851      	ldr	r1, [r2, #4]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6892      	ldr	r2, [r2, #8]
 8005a42:	4311      	orrs	r1, r2
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	68d2      	ldr	r2, [r2, #12]
 8005a48:	4311      	orrs	r1, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6992      	ldr	r2, [r2, #24]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a5a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d161      	bne.n	8005b28 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a38      	ldr	r2, [pc, #224]	; (8005b48 <HAL_I2S_Init+0x274>)
 8005a68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a37      	ldr	r2, [pc, #220]	; (8005b4c <HAL_I2S_Init+0x278>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d101      	bne.n	8005a78 <HAL_I2S_Init+0x1a4>
 8005a74:	4b36      	ldr	r3, [pc, #216]	; (8005b50 <HAL_I2S_Init+0x27c>)
 8005a76:	e001      	b.n	8005a7c <HAL_I2S_Init+0x1a8>
 8005a78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	4932      	ldr	r1, [pc, #200]	; (8005b4c <HAL_I2S_Init+0x278>)
 8005a84:	428a      	cmp	r2, r1
 8005a86:	d101      	bne.n	8005a8c <HAL_I2S_Init+0x1b8>
 8005a88:	4a31      	ldr	r2, [pc, #196]	; (8005b50 <HAL_I2S_Init+0x27c>)
 8005a8a:	e001      	b.n	8005a90 <HAL_I2S_Init+0x1bc>
 8005a8c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005a90:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a94:	f023 030f 	bic.w	r3, r3, #15
 8005a98:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a2b      	ldr	r2, [pc, #172]	; (8005b4c <HAL_I2S_Init+0x278>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d101      	bne.n	8005aa8 <HAL_I2S_Init+0x1d4>
 8005aa4:	4b2a      	ldr	r3, [pc, #168]	; (8005b50 <HAL_I2S_Init+0x27c>)
 8005aa6:	e001      	b.n	8005aac <HAL_I2S_Init+0x1d8>
 8005aa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aac:	2202      	movs	r2, #2
 8005aae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a25      	ldr	r2, [pc, #148]	; (8005b4c <HAL_I2S_Init+0x278>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d101      	bne.n	8005abe <HAL_I2S_Init+0x1ea>
 8005aba:	4b25      	ldr	r3, [pc, #148]	; (8005b50 <HAL_I2S_Init+0x27c>)
 8005abc:	e001      	b.n	8005ac2 <HAL_I2S_Init+0x1ee>
 8005abe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ace:	d003      	beq.n	8005ad8 <HAL_I2S_Init+0x204>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d103      	bne.n	8005ae0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005adc:	613b      	str	r3, [r7, #16]
 8005ade:	e001      	b.n	8005ae4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005aee:	4313      	orrs	r3, r2
 8005af0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005af8:	4313      	orrs	r3, r2
 8005afa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b02:	4313      	orrs	r3, r2
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	897b      	ldrh	r3, [r7, #10]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b10:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a0d      	ldr	r2, [pc, #52]	; (8005b4c <HAL_I2S_Init+0x278>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d101      	bne.n	8005b20 <HAL_I2S_Init+0x24c>
 8005b1c:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <HAL_I2S_Init+0x27c>)
 8005b1e:	e001      	b.n	8005b24 <HAL_I2S_Init+0x250>
 8005b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b24:	897a      	ldrh	r2, [r7, #10]
 8005b26:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3720      	adds	r7, #32
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	08005c4b 	.word	0x08005c4b
 8005b44:	cccccccd 	.word	0xcccccccd
 8005b48:	08005d61 	.word	0x08005d61
 8005b4c:	40003800 	.word	0x40003800
 8005b50:	40003400 	.word	0x40003400

08005b54 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	881a      	ldrh	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	1c9a      	adds	r2, r3, #2
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10e      	bne.n	8005be4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bd4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff ffb8 	bl	8005b54 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005be4:	bf00      	nop
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	b292      	uxth	r2, r2
 8005c00:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	1c9a      	adds	r2, r3, #2
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10e      	bne.n	8005c42 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c32:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff ff93 	bl	8005b68 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b086      	sub	sp, #24
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d13a      	bne.n	8005cdc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d109      	bne.n	8005c84 <I2S_IRQHandler+0x3a>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b40      	cmp	r3, #64	; 0x40
 8005c7c:	d102      	bne.n	8005c84 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff ffb4 	bl	8005bec <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8a:	2b40      	cmp	r3, #64	; 0x40
 8005c8c:	d126      	bne.n	8005cdc <I2S_IRQHandler+0x92>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d11f      	bne.n	8005cdc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005caa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005cac:	2300      	movs	r3, #0
 8005cae:	613b      	str	r3, [r7, #16]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	613b      	str	r3, [r7, #16]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cce:	f043 0202 	orr.w	r2, r3, #2
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7ff ff50 	bl	8005b7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d136      	bne.n	8005d56 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d109      	bne.n	8005d06 <I2S_IRQHandler+0xbc>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfc:	2b80      	cmp	r3, #128	; 0x80
 8005cfe:	d102      	bne.n	8005d06 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff ff45 	bl	8005b90 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f003 0308 	and.w	r3, r3, #8
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	d122      	bne.n	8005d56 <I2S_IRQHandler+0x10c>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f003 0320 	and.w	r3, r3, #32
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	d11b      	bne.n	8005d56 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d2c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d48:	f043 0204 	orr.w	r2, r3, #4
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff ff13 	bl	8005b7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d56:	bf00      	nop
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4aa2      	ldr	r2, [pc, #648]	; (8006000 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d101      	bne.n	8005d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005d7a:	4ba2      	ldr	r3, [pc, #648]	; (8006004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d7c:	e001      	b.n	8005d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005d7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a9b      	ldr	r2, [pc, #620]	; (8006000 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d101      	bne.n	8005d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005d98:	4b9a      	ldr	r3, [pc, #616]	; (8006004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d9a:	e001      	b.n	8005da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005d9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dac:	d004      	beq.n	8005db8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f040 8099 	bne.w	8005eea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d107      	bne.n	8005dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f925 	bl	800601c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d107      	bne.n	8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f9c8 	bl	800617c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df2:	2b40      	cmp	r3, #64	; 0x40
 8005df4:	d13a      	bne.n	8005e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d035      	beq.n	8005e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a7e      	ldr	r2, [pc, #504]	; (8006000 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d101      	bne.n	8005e0e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005e0a:	4b7e      	ldr	r3, [pc, #504]	; (8006004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e0c:	e001      	b.n	8005e12 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005e0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4979      	ldr	r1, [pc, #484]	; (8006000 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e1a:	428b      	cmp	r3, r1
 8005e1c:	d101      	bne.n	8005e22 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005e1e:	4b79      	ldr	r3, [pc, #484]	; (8006004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e20:	e001      	b.n	8005e26 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005e22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e2a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e3a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5e:	f043 0202 	orr.w	r2, r3, #2
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fe88 	bl	8005b7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f003 0308 	and.w	r3, r3, #8
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	f040 80be 	bne.w	8005ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 80b8 	beq.w	8005ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e92:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a59      	ldr	r2, [pc, #356]	; (8006000 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d101      	bne.n	8005ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005e9e:	4b59      	ldr	r3, [pc, #356]	; (8006004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005ea0:	e001      	b.n	8005ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005ea2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4954      	ldr	r1, [pc, #336]	; (8006000 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005eae:	428b      	cmp	r3, r1
 8005eb0:	d101      	bne.n	8005eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005eb2:	4b54      	ldr	r3, [pc, #336]	; (8006004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005eb4:	e001      	b.n	8005eba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ebe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60bb      	str	r3, [r7, #8]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	60bb      	str	r3, [r7, #8]
 8005ecc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eda:	f043 0204 	orr.w	r2, r3, #4
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff fe4a 	bl	8005b7c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ee8:	e084      	b.n	8005ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d107      	bne.n	8005f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f8be 	bl	8006080 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d107      	bne.n	8005f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f8fd 	bl	8006118 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f24:	2b40      	cmp	r3, #64	; 0x40
 8005f26:	d12f      	bne.n	8005f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d02a      	beq.n	8005f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f40:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a2e      	ldr	r2, [pc, #184]	; (8006000 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d101      	bne.n	8005f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005f4c:	4b2d      	ldr	r3, [pc, #180]	; (8006004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f4e:	e001      	b.n	8005f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005f50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4929      	ldr	r1, [pc, #164]	; (8006000 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f5c:	428b      	cmp	r3, r1
 8005f5e:	d101      	bne.n	8005f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005f60:	4b28      	ldr	r3, [pc, #160]	; (8006004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f62:	e001      	b.n	8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005f64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f6c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7a:	f043 0202 	orr.w	r2, r3, #2
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff fdfa 	bl	8005b7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d131      	bne.n	8005ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f003 0320 	and.w	r3, r3, #32
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d02c      	beq.n	8005ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a17      	ldr	r2, [pc, #92]	; (8006000 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d101      	bne.n	8005faa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005fa6:	4b17      	ldr	r3, [pc, #92]	; (8006004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005fa8:	e001      	b.n	8005fae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005faa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4912      	ldr	r1, [pc, #72]	; (8006000 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005fb6:	428b      	cmp	r3, r1
 8005fb8:	d101      	bne.n	8005fbe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005fba:	4b12      	ldr	r3, [pc, #72]	; (8006004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005fbc:	e001      	b.n	8005fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005fbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fc6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fd6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe4:	f043 0204 	orr.w	r2, r3, #4
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff fdc5 	bl	8005b7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ff2:	e000      	b.n	8005ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ff4:	bf00      	nop
}
 8005ff6:	bf00      	nop
 8005ff8:	3720      	adds	r7, #32
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	40003800 	.word	0x40003800
 8006004:	40003400 	.word	0x40003400

08006008 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	1c99      	adds	r1, r3, #2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6251      	str	r1, [r2, #36]	; 0x24
 800602e:	881a      	ldrh	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603a:	b29b      	uxth	r3, r3
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006048:	b29b      	uxth	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d113      	bne.n	8006076 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800605c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d106      	bne.n	8006076 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff ffc9 	bl	8006008 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	1c99      	adds	r1, r3, #2
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6251      	str	r1, [r2, #36]	; 0x24
 8006092:	8819      	ldrh	r1, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a1d      	ldr	r2, [pc, #116]	; (8006110 <I2SEx_TxISR_I2SExt+0x90>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d101      	bne.n	80060a2 <I2SEx_TxISR_I2SExt+0x22>
 800609e:	4b1d      	ldr	r3, [pc, #116]	; (8006114 <I2SEx_TxISR_I2SExt+0x94>)
 80060a0:	e001      	b.n	80060a6 <I2SEx_TxISR_I2SExt+0x26>
 80060a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060a6:	460a      	mov	r2, r1
 80060a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060bc:	b29b      	uxth	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d121      	bne.n	8006106 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a12      	ldr	r2, [pc, #72]	; (8006110 <I2SEx_TxISR_I2SExt+0x90>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d101      	bne.n	80060d0 <I2SEx_TxISR_I2SExt+0x50>
 80060cc:	4b11      	ldr	r3, [pc, #68]	; (8006114 <I2SEx_TxISR_I2SExt+0x94>)
 80060ce:	e001      	b.n	80060d4 <I2SEx_TxISR_I2SExt+0x54>
 80060d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	490d      	ldr	r1, [pc, #52]	; (8006110 <I2SEx_TxISR_I2SExt+0x90>)
 80060dc:	428b      	cmp	r3, r1
 80060de:	d101      	bne.n	80060e4 <I2SEx_TxISR_I2SExt+0x64>
 80060e0:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <I2SEx_TxISR_I2SExt+0x94>)
 80060e2:	e001      	b.n	80060e8 <I2SEx_TxISR_I2SExt+0x68>
 80060e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d106      	bne.n	8006106 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff ff81 	bl	8006008 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006106:	bf00      	nop
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	40003800 	.word	0x40003800
 8006114:	40003400 	.word	0x40003400

08006118 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68d8      	ldr	r0, [r3, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	1c99      	adds	r1, r3, #2
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006130:	b282      	uxth	r2, r0
 8006132:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006146:	b29b      	uxth	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d113      	bne.n	8006174 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800615a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff ff4a 	bl	8006008 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006174:	bf00      	nop
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a20      	ldr	r2, [pc, #128]	; (800620c <I2SEx_RxISR_I2SExt+0x90>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d101      	bne.n	8006192 <I2SEx_RxISR_I2SExt+0x16>
 800618e:	4b20      	ldr	r3, [pc, #128]	; (8006210 <I2SEx_RxISR_I2SExt+0x94>)
 8006190:	e001      	b.n	8006196 <I2SEx_RxISR_I2SExt+0x1a>
 8006192:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006196:	68d8      	ldr	r0, [r3, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	1c99      	adds	r1, r3, #2
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80061a2:	b282      	uxth	r2, r0
 80061a4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d121      	bne.n	8006202 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a12      	ldr	r2, [pc, #72]	; (800620c <I2SEx_RxISR_I2SExt+0x90>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d101      	bne.n	80061cc <I2SEx_RxISR_I2SExt+0x50>
 80061c8:	4b11      	ldr	r3, [pc, #68]	; (8006210 <I2SEx_RxISR_I2SExt+0x94>)
 80061ca:	e001      	b.n	80061d0 <I2SEx_RxISR_I2SExt+0x54>
 80061cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	490d      	ldr	r1, [pc, #52]	; (800620c <I2SEx_RxISR_I2SExt+0x90>)
 80061d8:	428b      	cmp	r3, r1
 80061da:	d101      	bne.n	80061e0 <I2SEx_RxISR_I2SExt+0x64>
 80061dc:	4b0c      	ldr	r3, [pc, #48]	; (8006210 <I2SEx_RxISR_I2SExt+0x94>)
 80061de:	e001      	b.n	80061e4 <I2SEx_RxISR_I2SExt+0x68>
 80061e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061e8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d106      	bne.n	8006202 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff ff03 	bl	8006008 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	40003800 	.word	0x40003800
 8006210:	40003400 	.word	0x40003400

08006214 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e264      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	d075      	beq.n	800631e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006232:	4ba3      	ldr	r3, [pc, #652]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	2b04      	cmp	r3, #4
 800623c:	d00c      	beq.n	8006258 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800623e:	4ba0      	ldr	r3, [pc, #640]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006246:	2b08      	cmp	r3, #8
 8006248:	d112      	bne.n	8006270 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800624a:	4b9d      	ldr	r3, [pc, #628]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006256:	d10b      	bne.n	8006270 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006258:	4b99      	ldr	r3, [pc, #612]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d05b      	beq.n	800631c <HAL_RCC_OscConfig+0x108>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d157      	bne.n	800631c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e23f      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006278:	d106      	bne.n	8006288 <HAL_RCC_OscConfig+0x74>
 800627a:	4b91      	ldr	r3, [pc, #580]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a90      	ldr	r2, [pc, #576]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	e01d      	b.n	80062c4 <HAL_RCC_OscConfig+0xb0>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006290:	d10c      	bne.n	80062ac <HAL_RCC_OscConfig+0x98>
 8006292:	4b8b      	ldr	r3, [pc, #556]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a8a      	ldr	r2, [pc, #552]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	4b88      	ldr	r3, [pc, #544]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a87      	ldr	r2, [pc, #540]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 80062a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a8:	6013      	str	r3, [r2, #0]
 80062aa:	e00b      	b.n	80062c4 <HAL_RCC_OscConfig+0xb0>
 80062ac:	4b84      	ldr	r3, [pc, #528]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a83      	ldr	r2, [pc, #524]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 80062b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	4b81      	ldr	r3, [pc, #516]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a80      	ldr	r2, [pc, #512]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 80062be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d013      	beq.n	80062f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062cc:	f7fc fac4 	bl	8002858 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062d4:	f7fc fac0 	bl	8002858 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b64      	cmp	r3, #100	; 0x64
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e204      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062e6:	4b76      	ldr	r3, [pc, #472]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0f0      	beq.n	80062d4 <HAL_RCC_OscConfig+0xc0>
 80062f2:	e014      	b.n	800631e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f4:	f7fc fab0 	bl	8002858 <HAL_GetTick>
 80062f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062fc:	f7fc faac 	bl	8002858 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b64      	cmp	r3, #100	; 0x64
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e1f0      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800630e:	4b6c      	ldr	r3, [pc, #432]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1f0      	bne.n	80062fc <HAL_RCC_OscConfig+0xe8>
 800631a:	e000      	b.n	800631e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800631c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d063      	beq.n	80063f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800632a:	4b65      	ldr	r3, [pc, #404]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 030c 	and.w	r3, r3, #12
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00b      	beq.n	800634e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006336:	4b62      	ldr	r3, [pc, #392]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800633e:	2b08      	cmp	r3, #8
 8006340:	d11c      	bne.n	800637c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006342:	4b5f      	ldr	r3, [pc, #380]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d116      	bne.n	800637c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800634e:	4b5c      	ldr	r3, [pc, #368]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d005      	beq.n	8006366 <HAL_RCC_OscConfig+0x152>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d001      	beq.n	8006366 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e1c4      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006366:	4b56      	ldr	r3, [pc, #344]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	4952      	ldr	r1, [pc, #328]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006376:	4313      	orrs	r3, r2
 8006378:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800637a:	e03a      	b.n	80063f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d020      	beq.n	80063c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006384:	4b4f      	ldr	r3, [pc, #316]	; (80064c4 <HAL_RCC_OscConfig+0x2b0>)
 8006386:	2201      	movs	r2, #1
 8006388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638a:	f7fc fa65 	bl	8002858 <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006392:	f7fc fa61 	bl	8002858 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e1a5      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063a4:	4b46      	ldr	r3, [pc, #280]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0f0      	beq.n	8006392 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b0:	4b43      	ldr	r3, [pc, #268]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	4940      	ldr	r1, [pc, #256]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	600b      	str	r3, [r1, #0]
 80063c4:	e015      	b.n	80063f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063c6:	4b3f      	ldr	r3, [pc, #252]	; (80064c4 <HAL_RCC_OscConfig+0x2b0>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063cc:	f7fc fa44 	bl	8002858 <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063d4:	f7fc fa40 	bl	8002858 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e184      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063e6:	4b36      	ldr	r3, [pc, #216]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f0      	bne.n	80063d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0308 	and.w	r3, r3, #8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d030      	beq.n	8006460 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d016      	beq.n	8006434 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006406:	4b30      	ldr	r3, [pc, #192]	; (80064c8 <HAL_RCC_OscConfig+0x2b4>)
 8006408:	2201      	movs	r2, #1
 800640a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800640c:	f7fc fa24 	bl	8002858 <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006414:	f7fc fa20 	bl	8002858 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e164      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006426:	4b26      	ldr	r3, [pc, #152]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0f0      	beq.n	8006414 <HAL_RCC_OscConfig+0x200>
 8006432:	e015      	b.n	8006460 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006434:	4b24      	ldr	r3, [pc, #144]	; (80064c8 <HAL_RCC_OscConfig+0x2b4>)
 8006436:	2200      	movs	r2, #0
 8006438:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800643a:	f7fc fa0d 	bl	8002858 <HAL_GetTick>
 800643e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006440:	e008      	b.n	8006454 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006442:	f7fc fa09 	bl	8002858 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d901      	bls.n	8006454 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e14d      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006454:	4b1a      	ldr	r3, [pc, #104]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1f0      	bne.n	8006442 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 80a0 	beq.w	80065ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800646e:	2300      	movs	r3, #0
 8006470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006472:	4b13      	ldr	r3, [pc, #76]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10f      	bne.n	800649e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800647e:	2300      	movs	r3, #0
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	4a0e      	ldr	r2, [pc, #56]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800648c:	6413      	str	r3, [r2, #64]	; 0x40
 800648e:	4b0c      	ldr	r3, [pc, #48]	; (80064c0 <HAL_RCC_OscConfig+0x2ac>)
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006496:	60bb      	str	r3, [r7, #8]
 8006498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800649a:	2301      	movs	r3, #1
 800649c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800649e:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <HAL_RCC_OscConfig+0x2b8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d121      	bne.n	80064ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064aa:	4b08      	ldr	r3, [pc, #32]	; (80064cc <HAL_RCC_OscConfig+0x2b8>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a07      	ldr	r2, [pc, #28]	; (80064cc <HAL_RCC_OscConfig+0x2b8>)
 80064b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064b6:	f7fc f9cf 	bl	8002858 <HAL_GetTick>
 80064ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064bc:	e011      	b.n	80064e2 <HAL_RCC_OscConfig+0x2ce>
 80064be:	bf00      	nop
 80064c0:	40023800 	.word	0x40023800
 80064c4:	42470000 	.word	0x42470000
 80064c8:	42470e80 	.word	0x42470e80
 80064cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064d0:	f7fc f9c2 	bl	8002858 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e106      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e2:	4b85      	ldr	r3, [pc, #532]	; (80066f8 <HAL_RCC_OscConfig+0x4e4>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0f0      	beq.n	80064d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d106      	bne.n	8006504 <HAL_RCC_OscConfig+0x2f0>
 80064f6:	4b81      	ldr	r3, [pc, #516]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 80064f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fa:	4a80      	ldr	r2, [pc, #512]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 80064fc:	f043 0301 	orr.w	r3, r3, #1
 8006500:	6713      	str	r3, [r2, #112]	; 0x70
 8006502:	e01c      	b.n	800653e <HAL_RCC_OscConfig+0x32a>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2b05      	cmp	r3, #5
 800650a:	d10c      	bne.n	8006526 <HAL_RCC_OscConfig+0x312>
 800650c:	4b7b      	ldr	r3, [pc, #492]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 800650e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006510:	4a7a      	ldr	r2, [pc, #488]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 8006512:	f043 0304 	orr.w	r3, r3, #4
 8006516:	6713      	str	r3, [r2, #112]	; 0x70
 8006518:	4b78      	ldr	r3, [pc, #480]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 800651a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651c:	4a77      	ldr	r2, [pc, #476]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 800651e:	f043 0301 	orr.w	r3, r3, #1
 8006522:	6713      	str	r3, [r2, #112]	; 0x70
 8006524:	e00b      	b.n	800653e <HAL_RCC_OscConfig+0x32a>
 8006526:	4b75      	ldr	r3, [pc, #468]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 8006528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652a:	4a74      	ldr	r2, [pc, #464]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 800652c:	f023 0301 	bic.w	r3, r3, #1
 8006530:	6713      	str	r3, [r2, #112]	; 0x70
 8006532:	4b72      	ldr	r3, [pc, #456]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 8006534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006536:	4a71      	ldr	r2, [pc, #452]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 8006538:	f023 0304 	bic.w	r3, r3, #4
 800653c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d015      	beq.n	8006572 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006546:	f7fc f987 	bl	8002858 <HAL_GetTick>
 800654a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654c:	e00a      	b.n	8006564 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800654e:	f7fc f983 	bl	8002858 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	f241 3288 	movw	r2, #5000	; 0x1388
 800655c:	4293      	cmp	r3, r2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e0c5      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006564:	4b65      	ldr	r3, [pc, #404]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 8006566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0ee      	beq.n	800654e <HAL_RCC_OscConfig+0x33a>
 8006570:	e014      	b.n	800659c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006572:	f7fc f971 	bl	8002858 <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006578:	e00a      	b.n	8006590 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800657a:	f7fc f96d 	bl	8002858 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	f241 3288 	movw	r2, #5000	; 0x1388
 8006588:	4293      	cmp	r3, r2
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e0af      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006590:	4b5a      	ldr	r3, [pc, #360]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 8006592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1ee      	bne.n	800657a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800659c:	7dfb      	ldrb	r3, [r7, #23]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d105      	bne.n	80065ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065a2:	4b56      	ldr	r3, [pc, #344]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	4a55      	ldr	r2, [pc, #340]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 80065a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 809b 	beq.w	80066ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065b8:	4b50      	ldr	r3, [pc, #320]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f003 030c 	and.w	r3, r3, #12
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d05c      	beq.n	800667e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d141      	bne.n	8006650 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065cc:	4b4c      	ldr	r3, [pc, #304]	; (8006700 <HAL_RCC_OscConfig+0x4ec>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d2:	f7fc f941 	bl	8002858 <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065da:	f7fc f93d 	bl	8002858 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e081      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ec:	4b43      	ldr	r3, [pc, #268]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1f0      	bne.n	80065da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	69da      	ldr	r2, [r3, #28]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	431a      	orrs	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	019b      	lsls	r3, r3, #6
 8006608:	431a      	orrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660e:	085b      	lsrs	r3, r3, #1
 8006610:	3b01      	subs	r3, #1
 8006612:	041b      	lsls	r3, r3, #16
 8006614:	431a      	orrs	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661a:	061b      	lsls	r3, r3, #24
 800661c:	4937      	ldr	r1, [pc, #220]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 800661e:	4313      	orrs	r3, r2
 8006620:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006622:	4b37      	ldr	r3, [pc, #220]	; (8006700 <HAL_RCC_OscConfig+0x4ec>)
 8006624:	2201      	movs	r2, #1
 8006626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006628:	f7fc f916 	bl	8002858 <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006630:	f7fc f912 	bl	8002858 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e056      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006642:	4b2e      	ldr	r3, [pc, #184]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0f0      	beq.n	8006630 <HAL_RCC_OscConfig+0x41c>
 800664e:	e04e      	b.n	80066ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006650:	4b2b      	ldr	r3, [pc, #172]	; (8006700 <HAL_RCC_OscConfig+0x4ec>)
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006656:	f7fc f8ff 	bl	8002858 <HAL_GetTick>
 800665a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800665c:	e008      	b.n	8006670 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800665e:	f7fc f8fb 	bl	8002858 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d901      	bls.n	8006670 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e03f      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006670:	4b22      	ldr	r3, [pc, #136]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1f0      	bne.n	800665e <HAL_RCC_OscConfig+0x44a>
 800667c:	e037      	b.n	80066ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d101      	bne.n	800668a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e032      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800668a:	4b1c      	ldr	r3, [pc, #112]	; (80066fc <HAL_RCC_OscConfig+0x4e8>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d028      	beq.n	80066ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d121      	bne.n	80066ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d11a      	bne.n	80066ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066ba:	4013      	ands	r3, r2
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d111      	bne.n	80066ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	085b      	lsrs	r3, r3, #1
 80066d2:	3b01      	subs	r3, #1
 80066d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d107      	bne.n	80066ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d001      	beq.n	80066ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40007000 	.word	0x40007000
 80066fc:	40023800 	.word	0x40023800
 8006700:	42470060 	.word	0x42470060

08006704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e0cc      	b.n	80068b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006718:	4b68      	ldr	r3, [pc, #416]	; (80068bc <HAL_RCC_ClockConfig+0x1b8>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d90c      	bls.n	8006740 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006726:	4b65      	ldr	r3, [pc, #404]	; (80068bc <HAL_RCC_ClockConfig+0x1b8>)
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800672e:	4b63      	ldr	r3, [pc, #396]	; (80068bc <HAL_RCC_ClockConfig+0x1b8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d001      	beq.n	8006740 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e0b8      	b.n	80068b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d020      	beq.n	800678e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006758:	4b59      	ldr	r3, [pc, #356]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	4a58      	ldr	r2, [pc, #352]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 800675e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006762:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0308 	and.w	r3, r3, #8
 800676c:	2b00      	cmp	r3, #0
 800676e:	d005      	beq.n	800677c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006770:	4b53      	ldr	r3, [pc, #332]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	4a52      	ldr	r2, [pc, #328]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800677a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800677c:	4b50      	ldr	r3, [pc, #320]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	494d      	ldr	r1, [pc, #308]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 800678a:	4313      	orrs	r3, r2
 800678c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d044      	beq.n	8006824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d107      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067a2:	4b47      	ldr	r3, [pc, #284]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d119      	bne.n	80067e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e07f      	b.n	80068b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d003      	beq.n	80067c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d107      	bne.n	80067d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067c2:	4b3f      	ldr	r3, [pc, #252]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d109      	bne.n	80067e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e06f      	b.n	80068b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067d2:	4b3b      	ldr	r3, [pc, #236]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e067      	b.n	80068b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067e2:	4b37      	ldr	r3, [pc, #220]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f023 0203 	bic.w	r2, r3, #3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	4934      	ldr	r1, [pc, #208]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067f4:	f7fc f830 	bl	8002858 <HAL_GetTick>
 80067f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fa:	e00a      	b.n	8006812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067fc:	f7fc f82c 	bl	8002858 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	f241 3288 	movw	r2, #5000	; 0x1388
 800680a:	4293      	cmp	r3, r2
 800680c:	d901      	bls.n	8006812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e04f      	b.n	80068b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006812:	4b2b      	ldr	r3, [pc, #172]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 020c 	and.w	r2, r3, #12
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	429a      	cmp	r2, r3
 8006822:	d1eb      	bne.n	80067fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006824:	4b25      	ldr	r3, [pc, #148]	; (80068bc <HAL_RCC_ClockConfig+0x1b8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0307 	and.w	r3, r3, #7
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d20c      	bcs.n	800684c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006832:	4b22      	ldr	r3, [pc, #136]	; (80068bc <HAL_RCC_ClockConfig+0x1b8>)
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800683a:	4b20      	ldr	r3, [pc, #128]	; (80068bc <HAL_RCC_ClockConfig+0x1b8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d001      	beq.n	800684c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e032      	b.n	80068b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b00      	cmp	r3, #0
 8006856:	d008      	beq.n	800686a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006858:	4b19      	ldr	r3, [pc, #100]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	4916      	ldr	r1, [pc, #88]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006866:	4313      	orrs	r3, r2
 8006868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0308 	and.w	r3, r3, #8
 8006872:	2b00      	cmp	r3, #0
 8006874:	d009      	beq.n	800688a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006876:	4b12      	ldr	r3, [pc, #72]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	490e      	ldr	r1, [pc, #56]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006886:	4313      	orrs	r3, r2
 8006888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800688a:	f000 f821 	bl	80068d0 <HAL_RCC_GetSysClockFreq>
 800688e:	4602      	mov	r2, r0
 8006890:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	091b      	lsrs	r3, r3, #4
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	490a      	ldr	r1, [pc, #40]	; (80068c4 <HAL_RCC_ClockConfig+0x1c0>)
 800689c:	5ccb      	ldrb	r3, [r1, r3]
 800689e:	fa22 f303 	lsr.w	r3, r2, r3
 80068a2:	4a09      	ldr	r2, [pc, #36]	; (80068c8 <HAL_RCC_ClockConfig+0x1c4>)
 80068a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068a6:	4b09      	ldr	r3, [pc, #36]	; (80068cc <HAL_RCC_ClockConfig+0x1c8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fb ff90 	bl	80027d0 <HAL_InitTick>

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	40023c00 	.word	0x40023c00
 80068c0:	40023800 	.word	0x40023800
 80068c4:	0800baec 	.word	0x0800baec
 80068c8:	20000004 	.word	0x20000004
 80068cc:	20000014 	.word	0x20000014

080068d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	607b      	str	r3, [r7, #4]
 80068dc:	2300      	movs	r3, #0
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	2300      	movs	r3, #0
 80068e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068e8:	4b67      	ldr	r3, [pc, #412]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f003 030c 	and.w	r3, r3, #12
 80068f0:	2b08      	cmp	r3, #8
 80068f2:	d00d      	beq.n	8006910 <HAL_RCC_GetSysClockFreq+0x40>
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	f200 80bd 	bhi.w	8006a74 <HAL_RCC_GetSysClockFreq+0x1a4>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <HAL_RCC_GetSysClockFreq+0x34>
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d003      	beq.n	800690a <HAL_RCC_GetSysClockFreq+0x3a>
 8006902:	e0b7      	b.n	8006a74 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006904:	4b61      	ldr	r3, [pc, #388]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006906:	60bb      	str	r3, [r7, #8]
       break;
 8006908:	e0b7      	b.n	8006a7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800690a:	4b61      	ldr	r3, [pc, #388]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800690c:	60bb      	str	r3, [r7, #8]
      break;
 800690e:	e0b4      	b.n	8006a7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006910:	4b5d      	ldr	r3, [pc, #372]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006918:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800691a:	4b5b      	ldr	r3, [pc, #364]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d04d      	beq.n	80069c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006926:	4b58      	ldr	r3, [pc, #352]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	099b      	lsrs	r3, r3, #6
 800692c:	461a      	mov	r2, r3
 800692e:	f04f 0300 	mov.w	r3, #0
 8006932:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006936:	f04f 0100 	mov.w	r1, #0
 800693a:	ea02 0800 	and.w	r8, r2, r0
 800693e:	ea03 0901 	and.w	r9, r3, r1
 8006942:	4640      	mov	r0, r8
 8006944:	4649      	mov	r1, r9
 8006946:	f04f 0200 	mov.w	r2, #0
 800694a:	f04f 0300 	mov.w	r3, #0
 800694e:	014b      	lsls	r3, r1, #5
 8006950:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006954:	0142      	lsls	r2, r0, #5
 8006956:	4610      	mov	r0, r2
 8006958:	4619      	mov	r1, r3
 800695a:	ebb0 0008 	subs.w	r0, r0, r8
 800695e:	eb61 0109 	sbc.w	r1, r1, r9
 8006962:	f04f 0200 	mov.w	r2, #0
 8006966:	f04f 0300 	mov.w	r3, #0
 800696a:	018b      	lsls	r3, r1, #6
 800696c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006970:	0182      	lsls	r2, r0, #6
 8006972:	1a12      	subs	r2, r2, r0
 8006974:	eb63 0301 	sbc.w	r3, r3, r1
 8006978:	f04f 0000 	mov.w	r0, #0
 800697c:	f04f 0100 	mov.w	r1, #0
 8006980:	00d9      	lsls	r1, r3, #3
 8006982:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006986:	00d0      	lsls	r0, r2, #3
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	eb12 0208 	adds.w	r2, r2, r8
 8006990:	eb43 0309 	adc.w	r3, r3, r9
 8006994:	f04f 0000 	mov.w	r0, #0
 8006998:	f04f 0100 	mov.w	r1, #0
 800699c:	0259      	lsls	r1, r3, #9
 800699e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80069a2:	0250      	lsls	r0, r2, #9
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4610      	mov	r0, r2
 80069aa:	4619      	mov	r1, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f04f 0300 	mov.w	r3, #0
 80069b4:	f7f9 fc08 	bl	80001c8 <__aeabi_uldivmod>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4613      	mov	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	e04a      	b.n	8006a58 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069c2:	4b31      	ldr	r3, [pc, #196]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	099b      	lsrs	r3, r3, #6
 80069c8:	461a      	mov	r2, r3
 80069ca:	f04f 0300 	mov.w	r3, #0
 80069ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80069d2:	f04f 0100 	mov.w	r1, #0
 80069d6:	ea02 0400 	and.w	r4, r2, r0
 80069da:	ea03 0501 	and.w	r5, r3, r1
 80069de:	4620      	mov	r0, r4
 80069e0:	4629      	mov	r1, r5
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	f04f 0300 	mov.w	r3, #0
 80069ea:	014b      	lsls	r3, r1, #5
 80069ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069f0:	0142      	lsls	r2, r0, #5
 80069f2:	4610      	mov	r0, r2
 80069f4:	4619      	mov	r1, r3
 80069f6:	1b00      	subs	r0, r0, r4
 80069f8:	eb61 0105 	sbc.w	r1, r1, r5
 80069fc:	f04f 0200 	mov.w	r2, #0
 8006a00:	f04f 0300 	mov.w	r3, #0
 8006a04:	018b      	lsls	r3, r1, #6
 8006a06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006a0a:	0182      	lsls	r2, r0, #6
 8006a0c:	1a12      	subs	r2, r2, r0
 8006a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8006a12:	f04f 0000 	mov.w	r0, #0
 8006a16:	f04f 0100 	mov.w	r1, #0
 8006a1a:	00d9      	lsls	r1, r3, #3
 8006a1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a20:	00d0      	lsls	r0, r2, #3
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	1912      	adds	r2, r2, r4
 8006a28:	eb45 0303 	adc.w	r3, r5, r3
 8006a2c:	f04f 0000 	mov.w	r0, #0
 8006a30:	f04f 0100 	mov.w	r1, #0
 8006a34:	0299      	lsls	r1, r3, #10
 8006a36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006a3a:	0290      	lsls	r0, r2, #10
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4610      	mov	r0, r2
 8006a42:	4619      	mov	r1, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	461a      	mov	r2, r3
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	f7f9 fbbc 	bl	80001c8 <__aeabi_uldivmod>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4613      	mov	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a58:	4b0b      	ldr	r3, [pc, #44]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	0c1b      	lsrs	r3, r3, #16
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	3301      	adds	r3, #1
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a70:	60bb      	str	r3, [r7, #8]
      break;
 8006a72:	e002      	b.n	8006a7a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a74:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a76:	60bb      	str	r3, [r7, #8]
      break;
 8006a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a86:	bf00      	nop
 8006a88:	40023800 	.word	0x40023800
 8006a8c:	00f42400 	.word	0x00f42400
 8006a90:	007a1200 	.word	0x007a1200

08006a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a98:	4b03      	ldr	r3, [pc, #12]	; (8006aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	20000004 	.word	0x20000004

08006aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ab0:	f7ff fff0 	bl	8006a94 <HAL_RCC_GetHCLKFreq>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	4b05      	ldr	r3, [pc, #20]	; (8006acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	0a9b      	lsrs	r3, r3, #10
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	4903      	ldr	r1, [pc, #12]	; (8006ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ac2:	5ccb      	ldrb	r3, [r1, r3]
 8006ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	0800bafc 	.word	0x0800bafc

08006ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d105      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d035      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006afc:	4b62      	ldr	r3, [pc, #392]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b02:	f7fb fea9 	bl	8002858 <HAL_GetTick>
 8006b06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b08:	e008      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b0a:	f7fb fea5 	bl	8002858 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e0b0      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b1c:	4b5b      	ldr	r3, [pc, #364]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1f0      	bne.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	019a      	lsls	r2, r3, #6
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	071b      	lsls	r3, r3, #28
 8006b34:	4955      	ldr	r1, [pc, #340]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b3c:	4b52      	ldr	r3, [pc, #328]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b3e:	2201      	movs	r2, #1
 8006b40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b42:	f7fb fe89 	bl	8002858 <HAL_GetTick>
 8006b46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b48:	e008      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b4a:	f7fb fe85 	bl	8002858 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d901      	bls.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e090      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b5c:	4b4b      	ldr	r3, [pc, #300]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0f0      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 8083 	beq.w	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b76:	2300      	movs	r3, #0
 8006b78:	60fb      	str	r3, [r7, #12]
 8006b7a:	4b44      	ldr	r3, [pc, #272]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	4a43      	ldr	r2, [pc, #268]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b84:	6413      	str	r3, [r2, #64]	; 0x40
 8006b86:	4b41      	ldr	r3, [pc, #260]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b92:	4b3f      	ldr	r3, [pc, #252]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a3e      	ldr	r2, [pc, #248]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b9c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b9e:	f7fb fe5b 	bl	8002858 <HAL_GetTick>
 8006ba2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006ba6:	f7fb fe57 	bl	8002858 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e062      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006bb8:	4b35      	ldr	r3, [pc, #212]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0f0      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bc4:	4b31      	ldr	r3, [pc, #196]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bcc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d02f      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d028      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006be2:	4b2a      	ldr	r3, [pc, #168]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bec:	4b29      	ldr	r3, [pc, #164]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bf2:	4b28      	ldr	r3, [pc, #160]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006bf8:	4a24      	ldr	r2, [pc, #144]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006bfe:	4b23      	ldr	r3, [pc, #140]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d114      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c0a:	f7fb fe25 	bl	8002858 <HAL_GetTick>
 8006c0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c10:	e00a      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c12:	f7fb fe21 	bl	8002858 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e02a      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c28:	4b18      	ldr	r3, [pc, #96]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0ee      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c40:	d10d      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006c42:	4b12      	ldr	r3, [pc, #72]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c56:	490d      	ldr	r1, [pc, #52]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	608b      	str	r3, [r1, #8]
 8006c5c:	e005      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006c5e:	4b0b      	ldr	r3, [pc, #44]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	4a0a      	ldr	r2, [pc, #40]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c64:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c68:	6093      	str	r3, [r2, #8]
 8006c6a:	4b08      	ldr	r3, [pc, #32]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c76:	4905      	ldr	r1, [pc, #20]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3718      	adds	r7, #24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	42470068 	.word	0x42470068
 8006c8c:	40023800 	.word	0x40023800
 8006c90:	40007000 	.word	0x40007000
 8006c94:	42470e40 	.word	0x42470e40

08006c98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d13e      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006cb6:	4b23      	ldr	r3, [pc, #140]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d005      	beq.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d12f      	bne.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ccc:	4b1e      	ldr	r3, [pc, #120]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cce:	617b      	str	r3, [r7, #20]
          break;
 8006cd0:	e02f      	b.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006cd2:	4b1c      	ldr	r3, [pc, #112]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cde:	d108      	bne.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ce0:	4b18      	ldr	r3, [pc, #96]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ce8:	4a18      	ldr	r2, [pc, #96]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	e007      	b.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006cf2:	4b14      	ldr	r3, [pc, #80]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cfa:	4a15      	ldr	r2, [pc, #84]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d00:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006d02:	4b10      	ldr	r3, [pc, #64]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d08:	099b      	lsrs	r3, r3, #6
 8006d0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	fb02 f303 	mul.w	r3, r2, r3
 8006d14:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006d16:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d1c:	0f1b      	lsrs	r3, r3, #28
 8006d1e:	f003 0307 	and.w	r3, r3, #7
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d28:	617b      	str	r3, [r7, #20]
          break;
 8006d2a:	e002      	b.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	617b      	str	r3, [r7, #20]
          break;
 8006d30:	bf00      	nop
        }
      }
      break;
 8006d32:	bf00      	nop
    }
  }
  return frequency;
 8006d34:	697b      	ldr	r3, [r7, #20]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	371c      	adds	r7, #28
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	40023800 	.word	0x40023800
 8006d48:	00bb8000 	.word	0x00bb8000
 8006d4c:	007a1200 	.word	0x007a1200
 8006d50:	00f42400 	.word	0x00f42400

08006d54 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e01c      	b.n	8006da0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	795b      	ldrb	r3, [r3, #5]
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d105      	bne.n	8006d7c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fa fb9a 	bl	80014b0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0204 	orr.w	r2, r2, #4
 8006d90:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	791b      	ldrb	r3, [r3, #4]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <HAL_RNG_GenerateRandomNumber+0x1a>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e03d      	b.n	8006e3e <HAL_RNG_GenerateRandomNumber+0x96>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	795b      	ldrb	r3, [r3, #5]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d12c      	bne.n	8006e2c <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006dd8:	f7fb fd3e 	bl	8002858 <HAL_GetTick>
 8006ddc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006dde:	e011      	b.n	8006e04 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006de0:	f7fb fd3a 	bl	8002858 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d90a      	bls.n	8006e04 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e01c      	b.n	8006e3e <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d1e6      	bne.n	8006de0 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68da      	ldr	r2, [r3, #12]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	715a      	strb	r2, [r3, #5]
 8006e2a:	e004      	b.n	8006e36 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2204      	movs	r2, #4
 8006e30:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	711a      	strb	r2, [r3, #4]

  return status;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b082      	sub	sp, #8
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	330c      	adds	r3, #12
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff ffa7 	bl	8006da8 <HAL_RNG_GenerateRandomNumber>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d102      	bne.n	8006e66 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	e000      	b.n	8006e68 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8006e66:	2300      	movs	r3, #0
  }
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e07b      	b.n	8006f7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d108      	bne.n	8006e9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e92:	d009      	beq.n	8006ea8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	61da      	str	r2, [r3, #28]
 8006e9a:	e005      	b.n	8006ea8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fa fb16 	bl	80014f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ede:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f22:	431a      	orrs	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2c:	ea42 0103 	orr.w	r1, r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	0c1b      	lsrs	r3, r3, #16
 8006f46:	f003 0104 	and.w	r1, r3, #4
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	f003 0210 	and.w	r2, r3, #16
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69da      	ldr	r2, [r3, #28]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b088      	sub	sp, #32
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	603b      	str	r3, [r7, #0]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d101      	bne.n	8006fa4 <HAL_SPI_Transmit+0x22>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e126      	b.n	80071f2 <HAL_SPI_Transmit+0x270>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fac:	f7fb fc54 	bl	8002858 <HAL_GetTick>
 8006fb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d002      	beq.n	8006fc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fc6:	e10b      	b.n	80071e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <HAL_SPI_Transmit+0x52>
 8006fce:	88fb      	ldrh	r3, [r7, #6]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d102      	bne.n	8006fda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fd8:	e102      	b.n	80071e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2203      	movs	r2, #3
 8006fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	88fa      	ldrh	r2, [r7, #6]
 8006ff2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	88fa      	ldrh	r2, [r7, #6]
 8006ff8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007020:	d10f      	bne.n	8007042 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007030:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007040:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704c:	2b40      	cmp	r3, #64	; 0x40
 800704e:	d007      	beq.n	8007060 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800705e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007068:	d14b      	bne.n	8007102 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <HAL_SPI_Transmit+0xf6>
 8007072:	8afb      	ldrh	r3, [r7, #22]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d13e      	bne.n	80070f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707c:	881a      	ldrh	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007088:	1c9a      	adds	r2, r3, #2
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007092:	b29b      	uxth	r3, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800709c:	e02b      	b.n	80070f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d112      	bne.n	80070d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	881a      	ldrh	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070bc:	1c9a      	adds	r2, r3, #2
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80070d0:	e011      	b.n	80070f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070d2:	f7fb fbc1 	bl	8002858 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d803      	bhi.n	80070ea <HAL_SPI_Transmit+0x168>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070e8:	d102      	bne.n	80070f0 <HAL_SPI_Transmit+0x16e>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d102      	bne.n	80070f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070f4:	e074      	b.n	80071e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1ce      	bne.n	800709e <HAL_SPI_Transmit+0x11c>
 8007100:	e04c      	b.n	800719c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <HAL_SPI_Transmit+0x18e>
 800710a:	8afb      	ldrh	r3, [r7, #22]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d140      	bne.n	8007192 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	330c      	adds	r3, #12
 800711a:	7812      	ldrb	r2, [r2, #0]
 800711c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007136:	e02c      	b.n	8007192 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b02      	cmp	r3, #2
 8007144:	d113      	bne.n	800716e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	330c      	adds	r3, #12
 8007150:	7812      	ldrb	r2, [r2, #0]
 8007152:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007162:	b29b      	uxth	r3, r3
 8007164:	3b01      	subs	r3, #1
 8007166:	b29a      	uxth	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	86da      	strh	r2, [r3, #54]	; 0x36
 800716c:	e011      	b.n	8007192 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800716e:	f7fb fb73 	bl	8002858 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d803      	bhi.n	8007186 <HAL_SPI_Transmit+0x204>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007184:	d102      	bne.n	800718c <HAL_SPI_Transmit+0x20a>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d102      	bne.n	8007192 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007190:	e026      	b.n	80071e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007196:	b29b      	uxth	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1cd      	bne.n	8007138 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 f8b3 	bl	800730c <SPI_EndRxTxTransaction>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2220      	movs	r2, #32
 80071b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10a      	bne.n	80071d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071ba:	2300      	movs	r3, #0
 80071bc:	613b      	str	r3, [r7, #16]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	613b      	str	r3, [r7, #16]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	613b      	str	r3, [r7, #16]
 80071ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	77fb      	strb	r3, [r7, #31]
 80071dc:	e000      	b.n	80071e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80071de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3720      	adds	r7, #32
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	4613      	mov	r3, r2
 800720a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800720c:	f7fb fb24 	bl	8002858 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	1a9b      	subs	r3, r3, r2
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	4413      	add	r3, r2
 800721a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800721c:	f7fb fb1c 	bl	8002858 <HAL_GetTick>
 8007220:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007222:	4b39      	ldr	r3, [pc, #228]	; (8007308 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	015b      	lsls	r3, r3, #5
 8007228:	0d1b      	lsrs	r3, r3, #20
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	fb02 f303 	mul.w	r3, r2, r3
 8007230:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007232:	e054      	b.n	80072de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800723a:	d050      	beq.n	80072de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800723c:	f7fb fb0c 	bl	8002858 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	429a      	cmp	r2, r3
 800724a:	d902      	bls.n	8007252 <SPI_WaitFlagStateUntilTimeout+0x56>
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d13d      	bne.n	80072ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007260:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800726a:	d111      	bne.n	8007290 <SPI_WaitFlagStateUntilTimeout+0x94>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007274:	d004      	beq.n	8007280 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800727e:	d107      	bne.n	8007290 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800728e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007298:	d10f      	bne.n	80072ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e017      	b.n	80072fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	3b01      	subs	r3, #1
 80072dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	4013      	ands	r3, r2
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	bf0c      	ite	eq
 80072ee:	2301      	moveq	r3, #1
 80072f0:	2300      	movne	r3, #0
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	461a      	mov	r2, r3
 80072f6:	79fb      	ldrb	r3, [r7, #7]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d19b      	bne.n	8007234 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3720      	adds	r7, #32
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000004 	.word	0x20000004

0800730c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af02      	add	r7, sp, #8
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007318:	4b1b      	ldr	r3, [pc, #108]	; (8007388 <SPI_EndRxTxTransaction+0x7c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a1b      	ldr	r2, [pc, #108]	; (800738c <SPI_EndRxTxTransaction+0x80>)
 800731e:	fba2 2303 	umull	r2, r3, r2, r3
 8007322:	0d5b      	lsrs	r3, r3, #21
 8007324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007328:	fb02 f303 	mul.w	r3, r2, r3
 800732c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007336:	d112      	bne.n	800735e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2200      	movs	r2, #0
 8007340:	2180      	movs	r1, #128	; 0x80
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f7ff ff5a 	bl	80071fc <SPI_WaitFlagStateUntilTimeout>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d016      	beq.n	800737c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007352:	f043 0220 	orr.w	r2, r3, #32
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e00f      	b.n	800737e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00a      	beq.n	800737a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	3b01      	subs	r3, #1
 8007368:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007374:	2b80      	cmp	r3, #128	; 0x80
 8007376:	d0f2      	beq.n	800735e <SPI_EndRxTxTransaction+0x52>
 8007378:	e000      	b.n	800737c <SPI_EndRxTxTransaction+0x70>
        break;
 800737a:	bf00      	nop
  }

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20000004 	.word	0x20000004
 800738c:	165e9f81 	.word	0x165e9f81

08007390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e041      	b.n	8007426 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d106      	bne.n	80073bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fa f982 	bl	80016c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3304      	adds	r3, #4
 80073cc:	4619      	mov	r1, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	f000 fd68 	bl	8007ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b01      	cmp	r3, #1
 8007442:	d001      	beq.n	8007448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e04e      	b.n	80074e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f042 0201 	orr.w	r2, r2, #1
 800745e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a23      	ldr	r2, [pc, #140]	; (80074f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d022      	beq.n	80074b0 <HAL_TIM_Base_Start_IT+0x80>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007472:	d01d      	beq.n	80074b0 <HAL_TIM_Base_Start_IT+0x80>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a1f      	ldr	r2, [pc, #124]	; (80074f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d018      	beq.n	80074b0 <HAL_TIM_Base_Start_IT+0x80>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a1e      	ldr	r2, [pc, #120]	; (80074fc <HAL_TIM_Base_Start_IT+0xcc>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d013      	beq.n	80074b0 <HAL_TIM_Base_Start_IT+0x80>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a1c      	ldr	r2, [pc, #112]	; (8007500 <HAL_TIM_Base_Start_IT+0xd0>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d00e      	beq.n	80074b0 <HAL_TIM_Base_Start_IT+0x80>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a1b      	ldr	r2, [pc, #108]	; (8007504 <HAL_TIM_Base_Start_IT+0xd4>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d009      	beq.n	80074b0 <HAL_TIM_Base_Start_IT+0x80>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a19      	ldr	r2, [pc, #100]	; (8007508 <HAL_TIM_Base_Start_IT+0xd8>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d004      	beq.n	80074b0 <HAL_TIM_Base_Start_IT+0x80>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a18      	ldr	r2, [pc, #96]	; (800750c <HAL_TIM_Base_Start_IT+0xdc>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d111      	bne.n	80074d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b06      	cmp	r3, #6
 80074c0:	d010      	beq.n	80074e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f042 0201 	orr.w	r2, r2, #1
 80074d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074d2:	e007      	b.n	80074e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f042 0201 	orr.w	r2, r2, #1
 80074e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	40010000 	.word	0x40010000
 80074f8:	40000400 	.word	0x40000400
 80074fc:	40000800 	.word	0x40000800
 8007500:	40000c00 	.word	0x40000c00
 8007504:	40010400 	.word	0x40010400
 8007508:	40014000 	.word	0x40014000
 800750c:	40001800 	.word	0x40001800

08007510 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d109      	bne.n	8007534 <HAL_TIM_OC_Start_IT+0x24>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b01      	cmp	r3, #1
 800752a:	bf14      	ite	ne
 800752c:	2301      	movne	r3, #1
 800752e:	2300      	moveq	r3, #0
 8007530:	b2db      	uxtb	r3, r3
 8007532:	e022      	b.n	800757a <HAL_TIM_OC_Start_IT+0x6a>
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2b04      	cmp	r3, #4
 8007538:	d109      	bne.n	800754e <HAL_TIM_OC_Start_IT+0x3e>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b01      	cmp	r3, #1
 8007544:	bf14      	ite	ne
 8007546:	2301      	movne	r3, #1
 8007548:	2300      	moveq	r3, #0
 800754a:	b2db      	uxtb	r3, r3
 800754c:	e015      	b.n	800757a <HAL_TIM_OC_Start_IT+0x6a>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b08      	cmp	r3, #8
 8007552:	d109      	bne.n	8007568 <HAL_TIM_OC_Start_IT+0x58>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b01      	cmp	r3, #1
 800755e:	bf14      	ite	ne
 8007560:	2301      	movne	r3, #1
 8007562:	2300      	moveq	r3, #0
 8007564:	b2db      	uxtb	r3, r3
 8007566:	e008      	b.n	800757a <HAL_TIM_OC_Start_IT+0x6a>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b01      	cmp	r3, #1
 8007572:	bf14      	ite	ne
 8007574:	2301      	movne	r3, #1
 8007576:	2300      	moveq	r3, #0
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e0c2      	b.n	8007708 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d104      	bne.n	8007592 <HAL_TIM_OC_Start_IT+0x82>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007590:	e013      	b.n	80075ba <HAL_TIM_OC_Start_IT+0xaa>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b04      	cmp	r3, #4
 8007596:	d104      	bne.n	80075a2 <HAL_TIM_OC_Start_IT+0x92>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075a0:	e00b      	b.n	80075ba <HAL_TIM_OC_Start_IT+0xaa>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b08      	cmp	r3, #8
 80075a6:	d104      	bne.n	80075b2 <HAL_TIM_OC_Start_IT+0xa2>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075b0:	e003      	b.n	80075ba <HAL_TIM_OC_Start_IT+0xaa>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2202      	movs	r2, #2
 80075b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b0c      	cmp	r3, #12
 80075be:	d841      	bhi.n	8007644 <HAL_TIM_OC_Start_IT+0x134>
 80075c0:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <HAL_TIM_OC_Start_IT+0xb8>)
 80075c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c6:	bf00      	nop
 80075c8:	080075fd 	.word	0x080075fd
 80075cc:	08007645 	.word	0x08007645
 80075d0:	08007645 	.word	0x08007645
 80075d4:	08007645 	.word	0x08007645
 80075d8:	0800760f 	.word	0x0800760f
 80075dc:	08007645 	.word	0x08007645
 80075e0:	08007645 	.word	0x08007645
 80075e4:	08007645 	.word	0x08007645
 80075e8:	08007621 	.word	0x08007621
 80075ec:	08007645 	.word	0x08007645
 80075f0:	08007645 	.word	0x08007645
 80075f4:	08007645 	.word	0x08007645
 80075f8:	08007633 	.word	0x08007633
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0202 	orr.w	r2, r2, #2
 800760a:	60da      	str	r2, [r3, #12]
      break;
 800760c:	e01b      	b.n	8007646 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f042 0204 	orr.w	r2, r2, #4
 800761c:	60da      	str	r2, [r3, #12]
      break;
 800761e:	e012      	b.n	8007646 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68da      	ldr	r2, [r3, #12]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f042 0208 	orr.w	r2, r2, #8
 800762e:	60da      	str	r2, [r3, #12]
      break;
 8007630:	e009      	b.n	8007646 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68da      	ldr	r2, [r3, #12]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f042 0210 	orr.w	r2, r2, #16
 8007640:	60da      	str	r2, [r3, #12]
      break;
 8007642:	e000      	b.n	8007646 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8007644:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2201      	movs	r2, #1
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 ff12 	bl	8008478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a2d      	ldr	r2, [pc, #180]	; (8007710 <HAL_TIM_OC_Start_IT+0x200>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d004      	beq.n	8007668 <HAL_TIM_OC_Start_IT+0x158>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a2c      	ldr	r2, [pc, #176]	; (8007714 <HAL_TIM_OC_Start_IT+0x204>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d101      	bne.n	800766c <HAL_TIM_OC_Start_IT+0x15c>
 8007668:	2301      	movs	r3, #1
 800766a:	e000      	b.n	800766e <HAL_TIM_OC_Start_IT+0x15e>
 800766c:	2300      	movs	r3, #0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d007      	beq.n	8007682 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007680:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a22      	ldr	r2, [pc, #136]	; (8007710 <HAL_TIM_OC_Start_IT+0x200>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d022      	beq.n	80076d2 <HAL_TIM_OC_Start_IT+0x1c2>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007694:	d01d      	beq.n	80076d2 <HAL_TIM_OC_Start_IT+0x1c2>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a1f      	ldr	r2, [pc, #124]	; (8007718 <HAL_TIM_OC_Start_IT+0x208>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d018      	beq.n	80076d2 <HAL_TIM_OC_Start_IT+0x1c2>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a1d      	ldr	r2, [pc, #116]	; (800771c <HAL_TIM_OC_Start_IT+0x20c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d013      	beq.n	80076d2 <HAL_TIM_OC_Start_IT+0x1c2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a1c      	ldr	r2, [pc, #112]	; (8007720 <HAL_TIM_OC_Start_IT+0x210>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d00e      	beq.n	80076d2 <HAL_TIM_OC_Start_IT+0x1c2>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a16      	ldr	r2, [pc, #88]	; (8007714 <HAL_TIM_OC_Start_IT+0x204>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d009      	beq.n	80076d2 <HAL_TIM_OC_Start_IT+0x1c2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a18      	ldr	r2, [pc, #96]	; (8007724 <HAL_TIM_OC_Start_IT+0x214>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d004      	beq.n	80076d2 <HAL_TIM_OC_Start_IT+0x1c2>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a16      	ldr	r2, [pc, #88]	; (8007728 <HAL_TIM_OC_Start_IT+0x218>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d111      	bne.n	80076f6 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b06      	cmp	r3, #6
 80076e2:	d010      	beq.n	8007706 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f042 0201 	orr.w	r2, r2, #1
 80076f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f4:	e007      	b.n	8007706 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f042 0201 	orr.w	r2, r2, #1
 8007704:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	40010000 	.word	0x40010000
 8007714:	40010400 	.word	0x40010400
 8007718:	40000400 	.word	0x40000400
 800771c:	40000800 	.word	0x40000800
 8007720:	40000c00 	.word	0x40000c00
 8007724:	40014000 	.word	0x40014000
 8007728:	40001800 	.word	0x40001800

0800772c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e041      	b.n	80077c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d106      	bne.n	8007758 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f839 	bl	80077ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3304      	adds	r3, #4
 8007768:	4619      	mov	r1, r3
 800776a:	4610      	mov	r0, r2
 800776c:	f000 fb9a 	bl	8007ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b086      	sub	sp, #24
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e097      	b.n	8007922 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d106      	bne.n	800780c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7f9 ff12 	bl	8001630 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	6812      	ldr	r2, [r2, #0]
 800781e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007822:	f023 0307 	bic.w	r3, r3, #7
 8007826:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3304      	adds	r3, #4
 8007830:	4619      	mov	r1, r3
 8007832:	4610      	mov	r0, r2
 8007834:	f000 fb36 	bl	8007ea4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007860:	f023 0303 	bic.w	r3, r3, #3
 8007864:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	689a      	ldr	r2, [r3, #8]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	021b      	lsls	r3, r3, #8
 8007870:	4313      	orrs	r3, r2
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	4313      	orrs	r3, r2
 8007876:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800787e:	f023 030c 	bic.w	r3, r3, #12
 8007882:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800788a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800788e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	4313      	orrs	r3, r2
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	4313      	orrs	r3, r2
 80078a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	011a      	lsls	r2, r3, #4
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	031b      	lsls	r3, r3, #12
 80078ae:	4313      	orrs	r3, r2
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80078bc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80078c4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	011b      	lsls	r3, r3, #4
 80078d0:	4313      	orrs	r3, r2
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b082      	sub	sp, #8
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b02      	cmp	r3, #2
 800793e:	d122      	bne.n	8007986 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b02      	cmp	r3, #2
 800794c:	d11b      	bne.n	8007986 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f06f 0202 	mvn.w	r2, #2
 8007956:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	f003 0303 	and.w	r3, r3, #3
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fa7b 	bl	8007e68 <HAL_TIM_IC_CaptureCallback>
 8007972:	e005      	b.n	8007980 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fa6d 	bl	8007e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fa7e 	bl	8007e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b04      	cmp	r3, #4
 8007992:	d122      	bne.n	80079da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	f003 0304 	and.w	r3, r3, #4
 800799e:	2b04      	cmp	r3, #4
 80079a0:	d11b      	bne.n	80079da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f06f 0204 	mvn.w	r2, #4
 80079aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fa51 	bl	8007e68 <HAL_TIM_IC_CaptureCallback>
 80079c6:	e005      	b.n	80079d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fa43 	bl	8007e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa54 	bl	8007e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	f003 0308 	and.w	r3, r3, #8
 80079e4:	2b08      	cmp	r3, #8
 80079e6:	d122      	bne.n	8007a2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	f003 0308 	and.w	r3, r3, #8
 80079f2:	2b08      	cmp	r3, #8
 80079f4:	d11b      	bne.n	8007a2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f06f 0208 	mvn.w	r2, #8
 80079fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2204      	movs	r2, #4
 8007a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	f003 0303 	and.w	r3, r3, #3
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fa27 	bl	8007e68 <HAL_TIM_IC_CaptureCallback>
 8007a1a:	e005      	b.n	8007a28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fa19 	bl	8007e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fa2a 	bl	8007e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	f003 0310 	and.w	r3, r3, #16
 8007a38:	2b10      	cmp	r3, #16
 8007a3a:	d122      	bne.n	8007a82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	f003 0310 	and.w	r3, r3, #16
 8007a46:	2b10      	cmp	r3, #16
 8007a48:	d11b      	bne.n	8007a82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f06f 0210 	mvn.w	r2, #16
 8007a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2208      	movs	r2, #8
 8007a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f9fd 	bl	8007e68 <HAL_TIM_IC_CaptureCallback>
 8007a6e:	e005      	b.n	8007a7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f9ef 	bl	8007e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fa00 	bl	8007e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d10e      	bne.n	8007aae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d107      	bne.n	8007aae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f06f 0201 	mvn.w	r2, #1
 8007aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f9c9 	bl	8007e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab8:	2b80      	cmp	r3, #128	; 0x80
 8007aba:	d10e      	bne.n	8007ada <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac6:	2b80      	cmp	r3, #128	; 0x80
 8007ac8:	d107      	bne.n	8007ada <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fd7b 	bl	80085d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae4:	2b40      	cmp	r3, #64	; 0x40
 8007ae6:	d10e      	bne.n	8007b06 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af2:	2b40      	cmp	r3, #64	; 0x40
 8007af4:	d107      	bne.n	8007b06 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f9c5 	bl	8007e90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	f003 0320 	and.w	r3, r3, #32
 8007b10:	2b20      	cmp	r3, #32
 8007b12:	d10e      	bne.n	8007b32 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	f003 0320 	and.w	r3, r3, #32
 8007b1e:	2b20      	cmp	r3, #32
 8007b20:	d107      	bne.n	8007b32 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f06f 0220 	mvn.w	r2, #32
 8007b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fd45 	bl	80085bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b32:	bf00      	nop
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
	...

08007b3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d101      	bne.n	8007b56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007b52:	2302      	movs	r3, #2
 8007b54:	e0ac      	b.n	8007cb0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b0c      	cmp	r3, #12
 8007b62:	f200 809f 	bhi.w	8007ca4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007b66:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007ba1 	.word	0x08007ba1
 8007b70:	08007ca5 	.word	0x08007ca5
 8007b74:	08007ca5 	.word	0x08007ca5
 8007b78:	08007ca5 	.word	0x08007ca5
 8007b7c:	08007be1 	.word	0x08007be1
 8007b80:	08007ca5 	.word	0x08007ca5
 8007b84:	08007ca5 	.word	0x08007ca5
 8007b88:	08007ca5 	.word	0x08007ca5
 8007b8c:	08007c23 	.word	0x08007c23
 8007b90:	08007ca5 	.word	0x08007ca5
 8007b94:	08007ca5 	.word	0x08007ca5
 8007b98:	08007ca5 	.word	0x08007ca5
 8007b9c:	08007c63 	.word	0x08007c63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68b9      	ldr	r1, [r7, #8]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 fa1c 	bl	8007fe4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699a      	ldr	r2, [r3, #24]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f042 0208 	orr.w	r2, r2, #8
 8007bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699a      	ldr	r2, [r3, #24]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f022 0204 	bic.w	r2, r2, #4
 8007bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6999      	ldr	r1, [r3, #24]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	691a      	ldr	r2, [r3, #16]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	619a      	str	r2, [r3, #24]
      break;
 8007bde:	e062      	b.n	8007ca6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68b9      	ldr	r1, [r7, #8]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fa6c 	bl	80080c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	699a      	ldr	r2, [r3, #24]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699a      	ldr	r2, [r3, #24]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6999      	ldr	r1, [r3, #24]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	021a      	lsls	r2, r3, #8
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	619a      	str	r2, [r3, #24]
      break;
 8007c20:	e041      	b.n	8007ca6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 fac1 	bl	80081b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69da      	ldr	r2, [r3, #28]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f042 0208 	orr.w	r2, r2, #8
 8007c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69da      	ldr	r2, [r3, #28]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0204 	bic.w	r2, r2, #4
 8007c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69d9      	ldr	r1, [r3, #28]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	691a      	ldr	r2, [r3, #16]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	61da      	str	r2, [r3, #28]
      break;
 8007c60:	e021      	b.n	8007ca6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 fb15 	bl	8008298 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	69da      	ldr	r2, [r3, #28]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	69da      	ldr	r2, [r3, #28]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69d9      	ldr	r1, [r3, #28]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	021a      	lsls	r2, r3, #8
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	61da      	str	r2, [r3, #28]
      break;
 8007ca2:	e000      	b.n	8007ca6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007ca4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d101      	bne.n	8007cd0 <HAL_TIM_ConfigClockSource+0x18>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	e0b3      	b.n	8007e38 <HAL_TIM_ConfigClockSource+0x180>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007cee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cf6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d08:	d03e      	beq.n	8007d88 <HAL_TIM_ConfigClockSource+0xd0>
 8007d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d0e:	f200 8087 	bhi.w	8007e20 <HAL_TIM_ConfigClockSource+0x168>
 8007d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d16:	f000 8085 	beq.w	8007e24 <HAL_TIM_ConfigClockSource+0x16c>
 8007d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d1e:	d87f      	bhi.n	8007e20 <HAL_TIM_ConfigClockSource+0x168>
 8007d20:	2b70      	cmp	r3, #112	; 0x70
 8007d22:	d01a      	beq.n	8007d5a <HAL_TIM_ConfigClockSource+0xa2>
 8007d24:	2b70      	cmp	r3, #112	; 0x70
 8007d26:	d87b      	bhi.n	8007e20 <HAL_TIM_ConfigClockSource+0x168>
 8007d28:	2b60      	cmp	r3, #96	; 0x60
 8007d2a:	d050      	beq.n	8007dce <HAL_TIM_ConfigClockSource+0x116>
 8007d2c:	2b60      	cmp	r3, #96	; 0x60
 8007d2e:	d877      	bhi.n	8007e20 <HAL_TIM_ConfigClockSource+0x168>
 8007d30:	2b50      	cmp	r3, #80	; 0x50
 8007d32:	d03c      	beq.n	8007dae <HAL_TIM_ConfigClockSource+0xf6>
 8007d34:	2b50      	cmp	r3, #80	; 0x50
 8007d36:	d873      	bhi.n	8007e20 <HAL_TIM_ConfigClockSource+0x168>
 8007d38:	2b40      	cmp	r3, #64	; 0x40
 8007d3a:	d058      	beq.n	8007dee <HAL_TIM_ConfigClockSource+0x136>
 8007d3c:	2b40      	cmp	r3, #64	; 0x40
 8007d3e:	d86f      	bhi.n	8007e20 <HAL_TIM_ConfigClockSource+0x168>
 8007d40:	2b30      	cmp	r3, #48	; 0x30
 8007d42:	d064      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0x156>
 8007d44:	2b30      	cmp	r3, #48	; 0x30
 8007d46:	d86b      	bhi.n	8007e20 <HAL_TIM_ConfigClockSource+0x168>
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	d060      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0x156>
 8007d4c:	2b20      	cmp	r3, #32
 8007d4e:	d867      	bhi.n	8007e20 <HAL_TIM_ConfigClockSource+0x168>
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d05c      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0x156>
 8007d54:	2b10      	cmp	r3, #16
 8007d56:	d05a      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007d58:	e062      	b.n	8007e20 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	6899      	ldr	r1, [r3, #8]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f000 fb65 	bl	8008438 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	609a      	str	r2, [r3, #8]
      break;
 8007d86:	e04e      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6818      	ldr	r0, [r3, #0]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	6899      	ldr	r1, [r3, #8]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f000 fb4e 	bl	8008438 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007daa:	609a      	str	r2, [r3, #8]
      break;
 8007dac:	e03b      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	6859      	ldr	r1, [r3, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	f000 fac2 	bl	8008344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2150      	movs	r1, #80	; 0x50
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 fb1b 	bl	8008402 <TIM_ITRx_SetConfig>
      break;
 8007dcc:	e02b      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	6859      	ldr	r1, [r3, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f000 fae1 	bl	80083a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2160      	movs	r1, #96	; 0x60
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fb0b 	bl	8008402 <TIM_ITRx_SetConfig>
      break;
 8007dec:	e01b      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	6859      	ldr	r1, [r3, #4]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f000 faa2 	bl	8008344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2140      	movs	r1, #64	; 0x40
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 fafb 	bl	8008402 <TIM_ITRx_SetConfig>
      break;
 8007e0c:	e00b      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4619      	mov	r1, r3
 8007e18:	4610      	mov	r0, r2
 8007e1a:	f000 faf2 	bl	8008402 <TIM_ITRx_SetConfig>
        break;
 8007e1e:	e002      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007e20:	bf00      	nop
 8007e22:	e000      	b.n	8007e26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007e24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a40      	ldr	r2, [pc, #256]	; (8007fb8 <TIM_Base_SetConfig+0x114>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d013      	beq.n	8007ee4 <TIM_Base_SetConfig+0x40>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec2:	d00f      	beq.n	8007ee4 <TIM_Base_SetConfig+0x40>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a3d      	ldr	r2, [pc, #244]	; (8007fbc <TIM_Base_SetConfig+0x118>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d00b      	beq.n	8007ee4 <TIM_Base_SetConfig+0x40>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a3c      	ldr	r2, [pc, #240]	; (8007fc0 <TIM_Base_SetConfig+0x11c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d007      	beq.n	8007ee4 <TIM_Base_SetConfig+0x40>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a3b      	ldr	r2, [pc, #236]	; (8007fc4 <TIM_Base_SetConfig+0x120>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d003      	beq.n	8007ee4 <TIM_Base_SetConfig+0x40>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a3a      	ldr	r2, [pc, #232]	; (8007fc8 <TIM_Base_SetConfig+0x124>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d108      	bne.n	8007ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a2f      	ldr	r2, [pc, #188]	; (8007fb8 <TIM_Base_SetConfig+0x114>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d02b      	beq.n	8007f56 <TIM_Base_SetConfig+0xb2>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f04:	d027      	beq.n	8007f56 <TIM_Base_SetConfig+0xb2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a2c      	ldr	r2, [pc, #176]	; (8007fbc <TIM_Base_SetConfig+0x118>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d023      	beq.n	8007f56 <TIM_Base_SetConfig+0xb2>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a2b      	ldr	r2, [pc, #172]	; (8007fc0 <TIM_Base_SetConfig+0x11c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d01f      	beq.n	8007f56 <TIM_Base_SetConfig+0xb2>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a2a      	ldr	r2, [pc, #168]	; (8007fc4 <TIM_Base_SetConfig+0x120>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d01b      	beq.n	8007f56 <TIM_Base_SetConfig+0xb2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a29      	ldr	r2, [pc, #164]	; (8007fc8 <TIM_Base_SetConfig+0x124>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d017      	beq.n	8007f56 <TIM_Base_SetConfig+0xb2>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a28      	ldr	r2, [pc, #160]	; (8007fcc <TIM_Base_SetConfig+0x128>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d013      	beq.n	8007f56 <TIM_Base_SetConfig+0xb2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a27      	ldr	r2, [pc, #156]	; (8007fd0 <TIM_Base_SetConfig+0x12c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d00f      	beq.n	8007f56 <TIM_Base_SetConfig+0xb2>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a26      	ldr	r2, [pc, #152]	; (8007fd4 <TIM_Base_SetConfig+0x130>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00b      	beq.n	8007f56 <TIM_Base_SetConfig+0xb2>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a25      	ldr	r2, [pc, #148]	; (8007fd8 <TIM_Base_SetConfig+0x134>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d007      	beq.n	8007f56 <TIM_Base_SetConfig+0xb2>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a24      	ldr	r2, [pc, #144]	; (8007fdc <TIM_Base_SetConfig+0x138>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d003      	beq.n	8007f56 <TIM_Base_SetConfig+0xb2>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a23      	ldr	r2, [pc, #140]	; (8007fe0 <TIM_Base_SetConfig+0x13c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d108      	bne.n	8007f68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a0a      	ldr	r2, [pc, #40]	; (8007fb8 <TIM_Base_SetConfig+0x114>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d003      	beq.n	8007f9c <TIM_Base_SetConfig+0xf8>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a0c      	ldr	r2, [pc, #48]	; (8007fc8 <TIM_Base_SetConfig+0x124>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d103      	bne.n	8007fa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	615a      	str	r2, [r3, #20]
}
 8007faa:	bf00      	nop
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	40010000 	.word	0x40010000
 8007fbc:	40000400 	.word	0x40000400
 8007fc0:	40000800 	.word	0x40000800
 8007fc4:	40000c00 	.word	0x40000c00
 8007fc8:	40010400 	.word	0x40010400
 8007fcc:	40014000 	.word	0x40014000
 8007fd0:	40014400 	.word	0x40014400
 8007fd4:	40014800 	.word	0x40014800
 8007fd8:	40001800 	.word	0x40001800
 8007fdc:	40001c00 	.word	0x40001c00
 8007fe0:	40002000 	.word	0x40002000

08007fe4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	f023 0201 	bic.w	r2, r3, #1
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 0303 	bic.w	r3, r3, #3
 800801a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	4313      	orrs	r3, r2
 8008024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	f023 0302 	bic.w	r3, r3, #2
 800802c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	4313      	orrs	r3, r2
 8008036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a20      	ldr	r2, [pc, #128]	; (80080bc <TIM_OC1_SetConfig+0xd8>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d003      	beq.n	8008048 <TIM_OC1_SetConfig+0x64>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a1f      	ldr	r2, [pc, #124]	; (80080c0 <TIM_OC1_SetConfig+0xdc>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d10c      	bne.n	8008062 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f023 0308 	bic.w	r3, r3, #8
 800804e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	4313      	orrs	r3, r2
 8008058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f023 0304 	bic.w	r3, r3, #4
 8008060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a15      	ldr	r2, [pc, #84]	; (80080bc <TIM_OC1_SetConfig+0xd8>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d003      	beq.n	8008072 <TIM_OC1_SetConfig+0x8e>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a14      	ldr	r2, [pc, #80]	; (80080c0 <TIM_OC1_SetConfig+0xdc>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d111      	bne.n	8008096 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	4313      	orrs	r3, r2
 800808a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	4313      	orrs	r3, r2
 8008094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	621a      	str	r2, [r3, #32]
}
 80080b0:	bf00      	nop
 80080b2:	371c      	adds	r7, #28
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	40010000 	.word	0x40010000
 80080c0:	40010400 	.word	0x40010400

080080c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	f023 0210 	bic.w	r2, r3, #16
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	021b      	lsls	r3, r3, #8
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	4313      	orrs	r3, r2
 8008106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	f023 0320 	bic.w	r3, r3, #32
 800810e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	011b      	lsls	r3, r3, #4
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	4313      	orrs	r3, r2
 800811a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a22      	ldr	r2, [pc, #136]	; (80081a8 <TIM_OC2_SetConfig+0xe4>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d003      	beq.n	800812c <TIM_OC2_SetConfig+0x68>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a21      	ldr	r2, [pc, #132]	; (80081ac <TIM_OC2_SetConfig+0xe8>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d10d      	bne.n	8008148 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	011b      	lsls	r3, r3, #4
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	4313      	orrs	r3, r2
 800813e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008146:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a17      	ldr	r2, [pc, #92]	; (80081a8 <TIM_OC2_SetConfig+0xe4>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d003      	beq.n	8008158 <TIM_OC2_SetConfig+0x94>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a16      	ldr	r2, [pc, #88]	; (80081ac <TIM_OC2_SetConfig+0xe8>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d113      	bne.n	8008180 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800815e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008166:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	4313      	orrs	r3, r2
 8008172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	4313      	orrs	r3, r2
 800817e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	621a      	str	r2, [r3, #32]
}
 800819a:	bf00      	nop
 800819c:	371c      	adds	r7, #28
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	40010000 	.word	0x40010000
 80081ac:	40010400 	.word	0x40010400

080081b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f023 0303 	bic.w	r3, r3, #3
 80081e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	021b      	lsls	r3, r3, #8
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	4313      	orrs	r3, r2
 8008204:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a21      	ldr	r2, [pc, #132]	; (8008290 <TIM_OC3_SetConfig+0xe0>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d003      	beq.n	8008216 <TIM_OC3_SetConfig+0x66>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a20      	ldr	r2, [pc, #128]	; (8008294 <TIM_OC3_SetConfig+0xe4>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d10d      	bne.n	8008232 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800821c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	021b      	lsls	r3, r3, #8
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a16      	ldr	r2, [pc, #88]	; (8008290 <TIM_OC3_SetConfig+0xe0>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d003      	beq.n	8008242 <TIM_OC3_SetConfig+0x92>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a15      	ldr	r2, [pc, #84]	; (8008294 <TIM_OC3_SetConfig+0xe4>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d113      	bne.n	800826a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	011b      	lsls	r3, r3, #4
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4313      	orrs	r3, r2
 8008268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	685a      	ldr	r2, [r3, #4]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	621a      	str	r2, [r3, #32]
}
 8008284:	bf00      	nop
 8008286:	371c      	adds	r7, #28
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	40010000 	.word	0x40010000
 8008294:	40010400 	.word	0x40010400

08008298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	021b      	lsls	r3, r3, #8
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	4313      	orrs	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	031b      	lsls	r3, r3, #12
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a12      	ldr	r2, [pc, #72]	; (800833c <TIM_OC4_SetConfig+0xa4>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d003      	beq.n	8008300 <TIM_OC4_SetConfig+0x68>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a11      	ldr	r2, [pc, #68]	; (8008340 <TIM_OC4_SetConfig+0xa8>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d109      	bne.n	8008314 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008306:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	019b      	lsls	r3, r3, #6
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	4313      	orrs	r3, r2
 8008312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	621a      	str	r2, [r3, #32]
}
 800832e:	bf00      	nop
 8008330:	371c      	adds	r7, #28
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	40010000 	.word	0x40010000
 8008340:	40010400 	.word	0x40010400

08008344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	f023 0201 	bic.w	r2, r3, #1
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800836e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	011b      	lsls	r3, r3, #4
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	4313      	orrs	r3, r2
 8008378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f023 030a 	bic.w	r3, r3, #10
 8008380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	4313      	orrs	r3, r2
 8008388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	621a      	str	r2, [r3, #32]
}
 8008396:	bf00      	nop
 8008398:	371c      	adds	r7, #28
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b087      	sub	sp, #28
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	60f8      	str	r0, [r7, #12]
 80083aa:	60b9      	str	r1, [r7, #8]
 80083ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	f023 0210 	bic.w	r2, r3, #16
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	031b      	lsls	r3, r3, #12
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	011b      	lsls	r3, r3, #4
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	621a      	str	r2, [r3, #32]
}
 80083f6:	bf00      	nop
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008402:	b480      	push	{r7}
 8008404:	b085      	sub	sp, #20
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4313      	orrs	r3, r2
 8008420:	f043 0307 	orr.w	r3, r3, #7
 8008424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	609a      	str	r2, [r3, #8]
}
 800842c:	bf00      	nop
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008438:	b480      	push	{r7}
 800843a:	b087      	sub	sp, #28
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
 8008444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	021a      	lsls	r2, r3, #8
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	431a      	orrs	r2, r3
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	4313      	orrs	r3, r2
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	4313      	orrs	r3, r2
 8008464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	609a      	str	r2, [r3, #8]
}
 800846c:	bf00      	nop
 800846e:	371c      	adds	r7, #28
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f003 031f 	and.w	r3, r3, #31
 800848a:	2201      	movs	r2, #1
 800848c:	fa02 f303 	lsl.w	r3, r2, r3
 8008490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6a1a      	ldr	r2, [r3, #32]
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	43db      	mvns	r3, r3
 800849a:	401a      	ands	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6a1a      	ldr	r2, [r3, #32]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f003 031f 	and.w	r3, r3, #31
 80084aa:	6879      	ldr	r1, [r7, #4]
 80084ac:	fa01 f303 	lsl.w	r3, r1, r3
 80084b0:	431a      	orrs	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	621a      	str	r2, [r3, #32]
}
 80084b6:	bf00      	nop
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
	...

080084c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d101      	bne.n	80084dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084d8:	2302      	movs	r3, #2
 80084da:	e05a      	b.n	8008592 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4313      	orrs	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a21      	ldr	r2, [pc, #132]	; (80085a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d022      	beq.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008528:	d01d      	beq.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a1d      	ldr	r2, [pc, #116]	; (80085a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d018      	beq.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a1b      	ldr	r2, [pc, #108]	; (80085a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d013      	beq.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a1a      	ldr	r2, [pc, #104]	; (80085ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d00e      	beq.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a18      	ldr	r2, [pc, #96]	; (80085b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d009      	beq.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a17      	ldr	r2, [pc, #92]	; (80085b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d004      	beq.n	8008566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a15      	ldr	r2, [pc, #84]	; (80085b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d10c      	bne.n	8008580 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800856c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	4313      	orrs	r3, r2
 8008576:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3714      	adds	r7, #20
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	40010000 	.word	0x40010000
 80085a4:	40000400 	.word	0x40000400
 80085a8:	40000800 	.word	0x40000800
 80085ac:	40000c00 	.word	0x40000c00
 80085b0:	40010400 	.word	0x40010400
 80085b4:	40014000 	.word	0x40014000
 80085b8:	40001800 	.word	0x40001800

080085bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085e4:	b084      	sub	sp, #16
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	f107 001c 	add.w	r0, r7, #28
 80085f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d122      	bne.n	8008642 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008626:	2b01      	cmp	r3, #1
 8008628:	d105      	bne.n	8008636 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f94a 	bl	80088d0 <USB_CoreReset>
 800863c:	4603      	mov	r3, r0
 800863e:	73fb      	strb	r3, [r7, #15]
 8008640:	e01a      	b.n	8008678 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f93e 	bl	80088d0 <USB_CoreReset>
 8008654:	4603      	mov	r3, r0
 8008656:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800865a:	2b00      	cmp	r3, #0
 800865c:	d106      	bne.n	800866c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008662:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	639a      	str	r2, [r3, #56]	; 0x38
 800866a:	e005      	b.n	8008678 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008670:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	2b01      	cmp	r3, #1
 800867c:	d10b      	bne.n	8008696 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f043 0206 	orr.w	r2, r3, #6
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f043 0220 	orr.w	r2, r3, #32
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008696:	7bfb      	ldrb	r3, [r7, #15]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086a2:	b004      	add	sp, #16
 80086a4:	4770      	bx	lr

080086a6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f043 0201 	orr.w	r2, r3, #1
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f023 0201 	bic.w	r2, r3, #1
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d106      	bne.n	8008716 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	60da      	str	r2, [r3, #12]
 8008714:	e00b      	b.n	800872e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008716:	78fb      	ldrb	r3, [r7, #3]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d106      	bne.n	800872a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	60da      	str	r2, [r3, #12]
 8008728:	e001      	b.n	800872e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e003      	b.n	8008736 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800872e:	2032      	movs	r0, #50	; 0x32
 8008730:	f7fa f89e 	bl	8002870 <HAL_Delay>

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	019b      	lsls	r3, r3, #6
 8008752:	f043 0220 	orr.w	r2, r3, #32
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3301      	adds	r3, #1
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4a09      	ldr	r2, [pc, #36]	; (8008788 <USB_FlushTxFifo+0x48>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d901      	bls.n	800876c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e006      	b.n	800877a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	f003 0320 	and.w	r3, r3, #32
 8008774:	2b20      	cmp	r3, #32
 8008776:	d0f0      	beq.n	800875a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3714      	adds	r7, #20
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	00030d40 	.word	0x00030d40

0800878c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008794:	2300      	movs	r3, #0
 8008796:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2210      	movs	r2, #16
 800879c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3301      	adds	r3, #1
 80087a2:	60fb      	str	r3, [r7, #12]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	4a09      	ldr	r2, [pc, #36]	; (80087cc <USB_FlushRxFifo+0x40>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d901      	bls.n	80087b0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e006      	b.n	80087be <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	f003 0310 	and.w	r3, r3, #16
 80087b8:	2b10      	cmp	r3, #16
 80087ba:	d0f0      	beq.n	800879e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	00030d40 	.word	0x00030d40

080087d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b089      	sub	sp, #36	; 0x24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	4611      	mov	r1, r2
 80087dc:	461a      	mov	r2, r3
 80087de:	460b      	mov	r3, r1
 80087e0:	71fb      	strb	r3, [r7, #7]
 80087e2:	4613      	mov	r3, r2
 80087e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80087ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d11a      	bne.n	800882c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80087f6:	88bb      	ldrh	r3, [r7, #4]
 80087f8:	3303      	adds	r3, #3
 80087fa:	089b      	lsrs	r3, r3, #2
 80087fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80087fe:	2300      	movs	r3, #0
 8008800:	61bb      	str	r3, [r7, #24]
 8008802:	e00f      	b.n	8008824 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	031a      	lsls	r2, r3, #12
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	4413      	add	r3, r2
 800880c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008810:	461a      	mov	r2, r3
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	3304      	adds	r3, #4
 800881c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	3301      	adds	r3, #1
 8008822:	61bb      	str	r3, [r7, #24]
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	429a      	cmp	r2, r3
 800882a:	d3eb      	bcc.n	8008804 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3724      	adds	r7, #36	; 0x24
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800883a:	b480      	push	{r7}
 800883c:	b089      	sub	sp, #36	; 0x24
 800883e:	af00      	add	r7, sp, #0
 8008840:	60f8      	str	r0, [r7, #12]
 8008842:	60b9      	str	r1, [r7, #8]
 8008844:	4613      	mov	r3, r2
 8008846:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008850:	88fb      	ldrh	r3, [r7, #6]
 8008852:	3303      	adds	r3, #3
 8008854:	089b      	lsrs	r3, r3, #2
 8008856:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008858:	2300      	movs	r3, #0
 800885a:	61bb      	str	r3, [r7, #24]
 800885c:	e00b      	b.n	8008876 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	601a      	str	r2, [r3, #0]
    pDest++;
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	3304      	adds	r3, #4
 800886e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	3301      	adds	r3, #1
 8008874:	61bb      	str	r3, [r7, #24]
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	429a      	cmp	r2, r3
 800887c:	d3ef      	bcc.n	800885e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800887e:	69fb      	ldr	r3, [r7, #28]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3724      	adds	r7, #36	; 0x24
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	4013      	ands	r3, r2
 80088a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80088a4:	68fb      	ldr	r3, [r7, #12]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b083      	sub	sp, #12
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	f003 0301 	and.w	r3, r3, #1
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
	...

080088d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	3301      	adds	r3, #1
 80088e0:	60fb      	str	r3, [r7, #12]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4a13      	ldr	r2, [pc, #76]	; (8008934 <USB_CoreReset+0x64>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d901      	bls.n	80088ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e01b      	b.n	8008926 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	daf2      	bge.n	80088dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	f043 0201 	orr.w	r2, r3, #1
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	3301      	adds	r3, #1
 800890a:	60fb      	str	r3, [r7, #12]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4a09      	ldr	r2, [pc, #36]	; (8008934 <USB_CoreReset+0x64>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d901      	bls.n	8008918 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e006      	b.n	8008926 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	2b01      	cmp	r3, #1
 8008922:	d0f0      	beq.n	8008906 <USB_CoreReset+0x36>

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	00030d40 	.word	0x00030d40

08008938 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008938:	b084      	sub	sp, #16
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	f107 001c 	add.w	r0, r7, #28
 8008946:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008954:	461a      	mov	r2, r3
 8008956:	2300      	movs	r3, #0
 8008958:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008976:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008986:	2b00      	cmp	r3, #0
 8008988:	d018      	beq.n	80089bc <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	2b01      	cmp	r3, #1
 800898e:	d10a      	bne.n	80089a6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800899e:	f043 0304 	orr.w	r3, r3, #4
 80089a2:	6013      	str	r3, [r2, #0]
 80089a4:	e014      	b.n	80089d0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089b4:	f023 0304 	bic.w	r3, r3, #4
 80089b8:	6013      	str	r3, [r2, #0]
 80089ba:	e009      	b.n	80089d0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089ca:	f023 0304 	bic.w	r3, r3, #4
 80089ce:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80089d0:	2110      	movs	r1, #16
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7ff feb4 	bl	8008740 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7ff fed7 	bl	800878c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80089de:	2300      	movs	r3, #0
 80089e0:	60fb      	str	r3, [r7, #12]
 80089e2:	e015      	b.n	8008a10 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	015a      	lsls	r2, r3, #5
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089f0:	461a      	mov	r2, r3
 80089f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089f6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a04:	461a      	mov	r2, r3
 8008a06:	2300      	movs	r3, #0
 8008a08:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d3e5      	bcc.n	80089e4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008a18:	2101      	movs	r1, #1
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f8ac 	bl	8008b78 <USB_DriveVbus>

  HAL_Delay(200U);
 8008a20:	20c8      	movs	r0, #200	; 0xc8
 8008a22:	f7f9 ff25 	bl	8002870 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a32:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00b      	beq.n	8008a58 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a46:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a14      	ldr	r2, [pc, #80]	; (8008a9c <USB_HostInit+0x164>)
 8008a4c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a13      	ldr	r2, [pc, #76]	; (8008aa0 <USB_HostInit+0x168>)
 8008a52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008a56:	e009      	b.n	8008a6c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2280      	movs	r2, #128	; 0x80
 8008a5c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a10      	ldr	r2, [pc, #64]	; (8008aa4 <USB_HostInit+0x16c>)
 8008a62:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a10      	ldr	r2, [pc, #64]	; (8008aa8 <USB_HostInit+0x170>)
 8008a68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d105      	bne.n	8008a7e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	f043 0210 	orr.w	r2, r3, #16
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	699a      	ldr	r2, [r3, #24]
 8008a82:	4b0a      	ldr	r3, [pc, #40]	; (8008aac <USB_HostInit+0x174>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a96:	b004      	add	sp, #16
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	01000200 	.word	0x01000200
 8008aa0:	00e00300 	.word	0x00e00300
 8008aa4:	00600080 	.word	0x00600080
 8008aa8:	004000e0 	.word	0x004000e0
 8008aac:	a3200008 	.word	0xa3200008

08008ab0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ace:	f023 0303 	bic.w	r3, r3, #3
 8008ad2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	f003 0303 	and.w	r3, r3, #3
 8008ae2:	68f9      	ldr	r1, [r7, #12]
 8008ae4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008aec:	78fb      	ldrb	r3, [r7, #3]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d107      	bne.n	8008b02 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008af8:	461a      	mov	r2, r3
 8008afa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008afe:	6053      	str	r3, [r2, #4]
 8008b00:	e009      	b.n	8008b16 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008b02:	78fb      	ldrb	r3, [r7, #3]
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d106      	bne.n	8008b16 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b0e:	461a      	mov	r2, r3
 8008b10:	f241 7370 	movw	r3, #6000	; 0x1770
 8008b14:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008b44:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b52:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008b54:	2064      	movs	r0, #100	; 0x64
 8008b56:	f7f9 fe8b 	bl	8002870 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b66:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008b68:	200a      	movs	r0, #10
 8008b6a:	f7f9 fe81 	bl	8002870 <HAL_Delay>

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008b9c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d109      	bne.n	8008bbc <USB_DriveVbus+0x44>
 8008ba8:	78fb      	ldrb	r3, [r7, #3]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d106      	bne.n	8008bbc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008bb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bba:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc6:	d109      	bne.n	8008bdc <USB_DriveVbus+0x64>
 8008bc8:	78fb      	ldrb	r3, [r7, #3]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d106      	bne.n	8008bdc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008bd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bda:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b085      	sub	sp, #20
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	0c5b      	lsrs	r3, r3, #17
 8008c08:	f003 0303 	and.w	r3, r3, #3
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	b29b      	uxth	r3, r3
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
	...

08008c3c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b088      	sub	sp, #32
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	4608      	mov	r0, r1
 8008c46:	4611      	mov	r1, r2
 8008c48:	461a      	mov	r2, r3
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	70fb      	strb	r3, [r7, #3]
 8008c4e:	460b      	mov	r3, r1
 8008c50:	70bb      	strb	r3, [r7, #2]
 8008c52:	4613      	mov	r3, r2
 8008c54:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c56:	2300      	movs	r3, #0
 8008c58:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008c5e:	78fb      	ldrb	r3, [r7, #3]
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c70:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008c72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d87e      	bhi.n	8008d78 <USB_HC_Init+0x13c>
 8008c7a:	a201      	add	r2, pc, #4	; (adr r2, 8008c80 <USB_HC_Init+0x44>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008c91 	.word	0x08008c91
 8008c84:	08008d3b 	.word	0x08008d3b
 8008c88:	08008c91 	.word	0x08008c91
 8008c8c:	08008cfd 	.word	0x08008cfd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008c90:	78fb      	ldrb	r3, [r7, #3]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008ca2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008ca4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	da10      	bge.n	8008cce <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008cac:	78fb      	ldrb	r3, [r7, #3]
 8008cae:	015a      	lsls	r2, r3, #5
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	78fa      	ldrb	r2, [r7, #3]
 8008cbc:	0151      	lsls	r1, r2, #5
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	440a      	add	r2, r1
 8008cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cca:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008ccc:	e057      	b.n	8008d7e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d051      	beq.n	8008d7e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008cda:	78fb      	ldrb	r3, [r7, #3]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	78fa      	ldrb	r2, [r7, #3]
 8008cea:	0151      	lsls	r1, r2, #5
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	440a      	add	r2, r1
 8008cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cf4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008cf8:	60d3      	str	r3, [r2, #12]
      break;
 8008cfa:	e040      	b.n	8008d7e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008cfc:	78fb      	ldrb	r3, [r7, #3]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d08:	461a      	mov	r2, r3
 8008d0a:	f240 639d 	movw	r3, #1693	; 0x69d
 8008d0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008d10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	da34      	bge.n	8008d82 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008d18:	78fb      	ldrb	r3, [r7, #3]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	78fa      	ldrb	r2, [r7, #3]
 8008d28:	0151      	lsls	r1, r2, #5
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	440a      	add	r2, r1
 8008d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d36:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008d38:	e023      	b.n	8008d82 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d46:	461a      	mov	r2, r3
 8008d48:	f240 2325 	movw	r3, #549	; 0x225
 8008d4c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008d4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	da17      	bge.n	8008d86 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008d56:	78fb      	ldrb	r3, [r7, #3]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	78fa      	ldrb	r2, [r7, #3]
 8008d66:	0151      	lsls	r1, r2, #5
 8008d68:	693a      	ldr	r2, [r7, #16]
 8008d6a:	440a      	add	r2, r1
 8008d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d70:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008d74:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008d76:	e006      	b.n	8008d86 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	77fb      	strb	r3, [r7, #31]
      break;
 8008d7c:	e004      	b.n	8008d88 <USB_HC_Init+0x14c>
      break;
 8008d7e:	bf00      	nop
 8008d80:	e002      	b.n	8008d88 <USB_HC_Init+0x14c>
      break;
 8008d82:	bf00      	nop
 8008d84:	e000      	b.n	8008d88 <USB_HC_Init+0x14c>
      break;
 8008d86:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d8e:	699a      	ldr	r2, [r3, #24]
 8008d90:	78fb      	ldrb	r3, [r7, #3]
 8008d92:	f003 030f 	and.w	r3, r3, #15
 8008d96:	2101      	movs	r1, #1
 8008d98:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9c:	6939      	ldr	r1, [r7, #16]
 8008d9e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008da2:	4313      	orrs	r3, r2
 8008da4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008db2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	da03      	bge.n	8008dc2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dbe:	61bb      	str	r3, [r7, #24]
 8008dc0:	e001      	b.n	8008dc6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff ff0f 	bl	8008bea <USB_GetHostSpeed>
 8008dcc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008dce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d106      	bne.n	8008de4 <USB_HC_Init+0x1a8>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d003      	beq.n	8008de4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008de0:	617b      	str	r3, [r7, #20]
 8008de2:	e001      	b.n	8008de8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008de8:	787b      	ldrb	r3, [r7, #1]
 8008dea:	059b      	lsls	r3, r3, #22
 8008dec:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008df0:	78bb      	ldrb	r3, [r7, #2]
 8008df2:	02db      	lsls	r3, r3, #11
 8008df4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008df8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008dfa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008dfe:	049b      	lsls	r3, r3, #18
 8008e00:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008e04:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008e06:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008e08:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008e0c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e12:	78fb      	ldrb	r3, [r7, #3]
 8008e14:	0159      	lsls	r1, r3, #5
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	440b      	add	r3, r1
 8008e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e1e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e24:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008e26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	d10f      	bne.n	8008e4e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008e2e:	78fb      	ldrb	r3, [r7, #3]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	78fa      	ldrb	r2, [r7, #3]
 8008e3e:	0151      	lsls	r1, r2, #5
 8008e40:	693a      	ldr	r2, [r7, #16]
 8008e42:	440a      	add	r2, r1
 8008e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e4c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008e4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3720      	adds	r7, #32
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08c      	sub	sp, #48	; 0x30
 8008e5c:	af02      	add	r7, sp, #8
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	4613      	mov	r3, r2
 8008e64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	785b      	ldrb	r3, [r3, #1]
 8008e6e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e74:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d02d      	beq.n	8008ede <USB_HC_StartXfer+0x86>
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	791b      	ldrb	r3, [r3, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d129      	bne.n	8008ede <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d117      	bne.n	8008ec0 <USB_HC_StartXfer+0x68>
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	79db      	ldrb	r3, [r3, #7]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <USB_HC_StartXfer+0x48>
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	79db      	ldrb	r3, [r3, #7]
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d10f      	bne.n	8008ec0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	6a3b      	ldr	r3, [r7, #32]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	69fa      	ldr	r2, [r7, #28]
 8008eb0:	0151      	lsls	r1, r2, #5
 8008eb2:	6a3a      	ldr	r2, [r7, #32]
 8008eb4:	440a      	add	r2, r1
 8008eb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ebe:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10b      	bne.n	8008ede <USB_HC_StartXfer+0x86>
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	795b      	ldrb	r3, [r3, #5]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d107      	bne.n	8008ede <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	785b      	ldrb	r3, [r3, #1]
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f000 fa2f 	bl	8009338 <USB_DoPing>
      return HAL_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	e0f8      	b.n	80090d0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d018      	beq.n	8008f18 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	8912      	ldrh	r2, [r2, #8]
 8008eee:	4413      	add	r3, r2
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	8912      	ldrh	r2, [r2, #8]
 8008ef6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008efa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008efc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008efe:	8b7b      	ldrh	r3, [r7, #26]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d90b      	bls.n	8008f1c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008f04:	8b7b      	ldrh	r3, [r7, #26]
 8008f06:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008f08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	8912      	ldrh	r2, [r2, #8]
 8008f0e:	fb02 f203 	mul.w	r2, r2, r3
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	611a      	str	r2, [r3, #16]
 8008f16:	e001      	b.n	8008f1c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	78db      	ldrb	r3, [r3, #3]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d007      	beq.n	8008f34 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008f24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	8912      	ldrh	r2, [r2, #8]
 8008f2a:	fb02 f203 	mul.w	r2, r2, r3
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	611a      	str	r2, [r3, #16]
 8008f32:	e003      	b.n	8008f3c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	695a      	ldr	r2, [r3, #20]
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f46:	04d9      	lsls	r1, r3, #19
 8008f48:	4b63      	ldr	r3, [pc, #396]	; (80090d8 <USB_HC_StartXfer+0x280>)
 8008f4a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f4c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	7a9b      	ldrb	r3, [r3, #10]
 8008f52:	075b      	lsls	r3, r3, #29
 8008f54:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f58:	69f9      	ldr	r1, [r7, #28]
 8008f5a:	0148      	lsls	r0, r1, #5
 8008f5c:	6a39      	ldr	r1, [r7, #32]
 8008f5e:	4401      	add	r1, r0
 8008f60:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f64:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f66:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008f68:	79fb      	ldrb	r3, [r7, #7]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d009      	beq.n	8008f82 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	68d9      	ldr	r1, [r3, #12]
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	6a3b      	ldr	r3, [r7, #32]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f7e:	460a      	mov	r2, r1
 8008f80:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f003 0301 	and.w	r3, r3, #1
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	bf0c      	ite	eq
 8008f92:	2301      	moveq	r3, #1
 8008f94:	2300      	movne	r3, #0
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	69fa      	ldr	r2, [r7, #28]
 8008faa:	0151      	lsls	r1, r2, #5
 8008fac:	6a3a      	ldr	r2, [r7, #32]
 8008fae:	440a      	add	r2, r1
 8008fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008fb8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	015a      	lsls	r2, r3, #5
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	7e7b      	ldrb	r3, [r7, #25]
 8008fca:	075b      	lsls	r3, r3, #29
 8008fcc:	69f9      	ldr	r1, [r7, #28]
 8008fce:	0148      	lsls	r0, r1, #5
 8008fd0:	6a39      	ldr	r1, [r7, #32]
 8008fd2:	4401      	add	r1, r0
 8008fd4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	6a3b      	ldr	r3, [r7, #32]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ff2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	78db      	ldrb	r3, [r3, #3]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d004      	beq.n	8009006 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009002:	613b      	str	r3, [r7, #16]
 8009004:	e003      	b.n	800900e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800900c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009014:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	6a3b      	ldr	r3, [r7, #32]
 800901c:	4413      	add	r3, r2
 800901e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009022:	461a      	mov	r2, r3
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009028:	79fb      	ldrb	r3, [r7, #7]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	e04e      	b.n	80090d0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	78db      	ldrb	r3, [r3, #3]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d149      	bne.n	80090ce <USB_HC_StartXfer+0x276>
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	695b      	ldr	r3, [r3, #20]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d045      	beq.n	80090ce <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	79db      	ldrb	r3, [r3, #7]
 8009046:	2b03      	cmp	r3, #3
 8009048:	d830      	bhi.n	80090ac <USB_HC_StartXfer+0x254>
 800904a:	a201      	add	r2, pc, #4	; (adr r2, 8009050 <USB_HC_StartXfer+0x1f8>)
 800904c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009050:	08009061 	.word	0x08009061
 8009054:	08009085 	.word	0x08009085
 8009058:	08009061 	.word	0x08009061
 800905c:	08009085 	.word	0x08009085
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	695b      	ldr	r3, [r3, #20]
 8009064:	3303      	adds	r3, #3
 8009066:	089b      	lsrs	r3, r3, #2
 8009068:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800906a:	8afa      	ldrh	r2, [r7, #22]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	b29b      	uxth	r3, r3
 8009072:	429a      	cmp	r2, r3
 8009074:	d91c      	bls.n	80090b0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	f043 0220 	orr.w	r2, r3, #32
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	619a      	str	r2, [r3, #24]
        }
        break;
 8009082:	e015      	b.n	80090b0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	3303      	adds	r3, #3
 800908a:	089b      	lsrs	r3, r3, #2
 800908c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800908e:	8afa      	ldrh	r2, [r7, #22]
 8009090:	6a3b      	ldr	r3, [r7, #32]
 8009092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	b29b      	uxth	r3, r3
 800909a:	429a      	cmp	r2, r3
 800909c:	d90a      	bls.n	80090b4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80090aa:	e003      	b.n	80090b4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80090ac:	bf00      	nop
 80090ae:	e002      	b.n	80090b6 <USB_HC_StartXfer+0x25e>
        break;
 80090b0:	bf00      	nop
 80090b2:	e000      	b.n	80090b6 <USB_HC_StartXfer+0x25e>
        break;
 80090b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	68d9      	ldr	r1, [r3, #12]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	785a      	ldrb	r2, [r3, #1]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	2000      	movs	r0, #0
 80090c6:	9000      	str	r0, [sp, #0]
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f7ff fb81 	bl	80087d0 <USB_WritePacket>
  }

  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3728      	adds	r7, #40	; 0x28
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	1ff80000 	.word	0x1ff80000

080090dc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090ee:	695b      	ldr	r3, [r3, #20]
 80090f0:	b29b      	uxth	r3, r3
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80090fe:	b480      	push	{r7}
 8009100:	b089      	sub	sp, #36	; 0x24
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	460b      	mov	r3, r1
 8009108:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8009112:	2300      	movs	r3, #0
 8009114:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	4413      	add	r3, r2
 800911e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	0c9b      	lsrs	r3, r3, #18
 8009126:	f003 0303 	and.w	r3, r3, #3
 800912a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	4413      	add	r3, r2
 8009134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	0fdb      	lsrs	r3, r3, #31
 800913c:	f003 0301 	and.w	r3, r3, #1
 8009140:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	f003 0320 	and.w	r3, r3, #32
 800914a:	2b20      	cmp	r3, #32
 800914c:	d104      	bne.n	8009158 <USB_HC_Halt+0x5a>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	e0e8      	b.n	800932a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <USB_HC_Halt+0x66>
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	2b02      	cmp	r3, #2
 8009162:	d173      	bne.n	800924c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	4413      	add	r3, r2
 800916c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	0151      	lsls	r1, r2, #5
 8009176:	69ba      	ldr	r2, [r7, #24]
 8009178:	440a      	add	r2, r1
 800917a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800917e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009182:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f003 0320 	and.w	r3, r3, #32
 800918c:	2b00      	cmp	r3, #0
 800918e:	f040 80cb 	bne.w	8009328 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009196:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800919a:	2b00      	cmp	r3, #0
 800919c:	d143      	bne.n	8009226 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	0151      	lsls	r1, r2, #5
 80091b0:	69ba      	ldr	r2, [r7, #24]
 80091b2:	440a      	add	r2, r1
 80091b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091bc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	0151      	lsls	r1, r2, #5
 80091d0:	69ba      	ldr	r2, [r7, #24]
 80091d2:	440a      	add	r2, r1
 80091d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091dc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	0151      	lsls	r1, r2, #5
 80091f0:	69ba      	ldr	r2, [r7, #24]
 80091f2:	440a      	add	r2, r1
 80091f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80091fc:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	3301      	adds	r3, #1
 8009202:	61fb      	str	r3, [r7, #28]
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800920a:	d81d      	bhi.n	8009248 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	4413      	add	r3, r2
 8009214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800921e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009222:	d0ec      	beq.n	80091fe <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009224:	e080      	b.n	8009328 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	4413      	add	r3, r2
 800922e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	0151      	lsls	r1, r2, #5
 8009238:	69ba      	ldr	r2, [r7, #24]
 800923a:	440a      	add	r2, r1
 800923c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009240:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009244:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009246:	e06f      	b.n	8009328 <USB_HC_Halt+0x22a>
            break;
 8009248:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800924a:	e06d      	b.n	8009328 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	4413      	add	r3, r2
 8009254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	0151      	lsls	r1, r2, #5
 800925e:	69ba      	ldr	r2, [r7, #24]
 8009260:	440a      	add	r2, r1
 8009262:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009266:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800926a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d143      	bne.n	8009304 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	4413      	add	r3, r2
 8009284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	0151      	lsls	r1, r2, #5
 800928e:	69ba      	ldr	r2, [r7, #24]
 8009290:	440a      	add	r2, r1
 8009292:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800929a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	015a      	lsls	r2, r3, #5
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	4413      	add	r3, r2
 80092a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	0151      	lsls	r1, r2, #5
 80092ae:	69ba      	ldr	r2, [r7, #24]
 80092b0:	440a      	add	r2, r1
 80092b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	015a      	lsls	r2, r3, #5
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	4413      	add	r3, r2
 80092c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	0151      	lsls	r1, r2, #5
 80092ce:	69ba      	ldr	r2, [r7, #24]
 80092d0:	440a      	add	r2, r1
 80092d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092da:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	3301      	adds	r3, #1
 80092e0:	61fb      	str	r3, [r7, #28]
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092e8:	d81d      	bhi.n	8009326 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009300:	d0ec      	beq.n	80092dc <USB_HC_Halt+0x1de>
 8009302:	e011      	b.n	8009328 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	4413      	add	r3, r2
 800930c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	0151      	lsls	r1, r2, #5
 8009316:	69ba      	ldr	r2, [r7, #24]
 8009318:	440a      	add	r2, r1
 800931a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800931e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009322:	6013      	str	r3, [r2, #0]
 8009324:	e000      	b.n	8009328 <USB_HC_Halt+0x22a>
          break;
 8009326:	bf00      	nop
    }
  }

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3724      	adds	r7, #36	; 0x24
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
	...

08009338 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009338:	b480      	push	{r7}
 800933a:	b087      	sub	sp, #28
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	460b      	mov	r3, r1
 8009342:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009348:	78fb      	ldrb	r3, [r7, #3]
 800934a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800934c:	2301      	movs	r3, #1
 800934e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	04da      	lsls	r2, r3, #19
 8009354:	4b15      	ldr	r3, [pc, #84]	; (80093ac <USB_DoPing+0x74>)
 8009356:	4013      	ands	r3, r2
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	0151      	lsls	r1, r2, #5
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	440a      	add	r2, r1
 8009360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009368:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	4413      	add	r3, r2
 8009372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009380:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009388:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	4413      	add	r3, r2
 8009392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009396:	461a      	mov	r2, r3
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	371c      	adds	r7, #28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	1ff80000 	.word	0x1ff80000

080093b0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7ff f981 	bl	80086c8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80093c6:	2110      	movs	r1, #16
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7ff f9b9 	bl	8008740 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7ff f9dc 	bl	800878c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80093d4:	2300      	movs	r3, #0
 80093d6:	613b      	str	r3, [r7, #16]
 80093d8:	e01f      	b.n	800941a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	015a      	lsls	r2, r3, #5
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	4413      	add	r3, r2
 80093e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009400:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	4413      	add	r3, r2
 800940a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800940e:	461a      	mov	r2, r3
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	3301      	adds	r3, #1
 8009418:	613b      	str	r3, [r7, #16]
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	2b0f      	cmp	r3, #15
 800941e:	d9dc      	bls.n	80093da <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009420:	2300      	movs	r3, #0
 8009422:	613b      	str	r3, [r7, #16]
 8009424:	e034      	b.n	8009490 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	015a      	lsls	r2, r3, #5
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	4413      	add	r3, r2
 800942e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800943c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009444:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800944c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	4413      	add	r3, r2
 8009456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800945a:	461a      	mov	r2, r3
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	3301      	adds	r3, #1
 8009464:	617b      	str	r3, [r7, #20]
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800946c:	d80c      	bhi.n	8009488 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4413      	add	r3, r2
 8009476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009484:	d0ec      	beq.n	8009460 <USB_StopHost+0xb0>
 8009486:	e000      	b.n	800948a <USB_StopHost+0xda>
        break;
 8009488:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	3301      	adds	r3, #1
 800948e:	613b      	str	r3, [r7, #16]
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	2b0f      	cmp	r3, #15
 8009494:	d9c7      	bls.n	8009426 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800949c:	461a      	mov	r2, r3
 800949e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094a2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094aa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff f8fa 	bl	80086a6 <USB_EnableGlobalInt>

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3718      	adds	r7, #24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80094bc:	b590      	push	{r4, r7, lr}
 80094be:	b089      	sub	sp, #36	; 0x24
 80094c0:	af04      	add	r7, sp, #16
 80094c2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80094c4:	2301      	movs	r3, #1
 80094c6:	2202      	movs	r2, #2
 80094c8:	2102      	movs	r1, #2
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fc66 	bl	8009d9c <USBH_FindInterface>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
 80094d6:	2bff      	cmp	r3, #255	; 0xff
 80094d8:	d002      	beq.n	80094e0 <USBH_CDC_InterfaceInit+0x24>
 80094da:	7bfb      	ldrb	r3, [r7, #15]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d901      	bls.n	80094e4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80094e0:	2302      	movs	r3, #2
 80094e2:	e13d      	b.n	8009760 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	4619      	mov	r1, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fc3b 	bl	8009d64 <USBH_SelectInterface>
 80094ee:	4603      	mov	r3, r0
 80094f0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80094f2:	7bbb      	ldrb	r3, [r7, #14]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80094f8:	2302      	movs	r3, #2
 80094fa:	e131      	b.n	8009760 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009502:	2050      	movs	r0, #80	; 0x50
 8009504:	f002 fa00 	bl	800b908 <malloc>
 8009508:	4603      	mov	r3, r0
 800950a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009512:	69db      	ldr	r3, [r3, #28]
 8009514:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d101      	bne.n	8009520 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800951c:	2302      	movs	r3, #2
 800951e:	e11f      	b.n	8009760 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009520:	2250      	movs	r2, #80	; 0x50
 8009522:	2100      	movs	r1, #0
 8009524:	68b8      	ldr	r0, [r7, #8]
 8009526:	f002 f9ff 	bl	800b928 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800952a:	7bfb      	ldrb	r3, [r7, #15]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	211a      	movs	r1, #26
 8009530:	fb01 f303 	mul.w	r3, r1, r3
 8009534:	4413      	add	r3, r2
 8009536:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	b25b      	sxtb	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	da15      	bge.n	800956e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	211a      	movs	r1, #26
 8009548:	fb01 f303 	mul.w	r3, r1, r3
 800954c:	4413      	add	r3, r2
 800954e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009552:	781a      	ldrb	r2, [r3, #0]
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009558:	7bfb      	ldrb	r3, [r7, #15]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	211a      	movs	r1, #26
 800955e:	fb01 f303 	mul.w	r3, r1, r3
 8009562:	4413      	add	r3, r2
 8009564:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009568:	881a      	ldrh	r2, [r3, #0]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	785b      	ldrb	r3, [r3, #1]
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f001 fe32 	bl	800b1de <USBH_AllocPipe>
 800957a:	4603      	mov	r3, r0
 800957c:	461a      	mov	r2, r3
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	7819      	ldrb	r1, [r3, #0]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	7858      	ldrb	r0, [r3, #1]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	8952      	ldrh	r2, [r2, #10]
 800959a:	9202      	str	r2, [sp, #8]
 800959c:	2203      	movs	r2, #3
 800959e:	9201      	str	r2, [sp, #4]
 80095a0:	9300      	str	r3, [sp, #0]
 80095a2:	4623      	mov	r3, r4
 80095a4:	4602      	mov	r2, r0
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f001 fdea 	bl	800b180 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2200      	movs	r2, #0
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f002 f8f9 	bl	800b7ac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80095ba:	2300      	movs	r3, #0
 80095bc:	2200      	movs	r2, #0
 80095be:	210a      	movs	r1, #10
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fbeb 	bl	8009d9c <USBH_FindInterface>
 80095c6:	4603      	mov	r3, r0
 80095c8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	2bff      	cmp	r3, #255	; 0xff
 80095ce:	d002      	beq.n	80095d6 <USBH_CDC_InterfaceInit+0x11a>
 80095d0:	7bfb      	ldrb	r3, [r7, #15]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d901      	bls.n	80095da <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80095d6:	2302      	movs	r3, #2
 80095d8:	e0c2      	b.n	8009760 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	211a      	movs	r1, #26
 80095e0:	fb01 f303 	mul.w	r3, r1, r3
 80095e4:	4413      	add	r3, r2
 80095e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	b25b      	sxtb	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	da16      	bge.n	8009620 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	211a      	movs	r1, #26
 80095f8:	fb01 f303 	mul.w	r3, r1, r3
 80095fc:	4413      	add	r3, r2
 80095fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009602:	781a      	ldrb	r2, [r3, #0]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009608:	7bfb      	ldrb	r3, [r7, #15]
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	211a      	movs	r1, #26
 800960e:	fb01 f303 	mul.w	r3, r1, r3
 8009612:	4413      	add	r3, r2
 8009614:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009618:	881a      	ldrh	r2, [r3, #0]
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	835a      	strh	r2, [r3, #26]
 800961e:	e015      	b.n	800964c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009620:	7bfb      	ldrb	r3, [r7, #15]
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	211a      	movs	r1, #26
 8009626:	fb01 f303 	mul.w	r3, r1, r3
 800962a:	4413      	add	r3, r2
 800962c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009630:	781a      	ldrb	r2, [r3, #0]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009636:	7bfb      	ldrb	r3, [r7, #15]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	211a      	movs	r1, #26
 800963c:	fb01 f303 	mul.w	r3, r1, r3
 8009640:	4413      	add	r3, r2
 8009642:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009646:	881a      	ldrh	r2, [r3, #0]
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	211a      	movs	r1, #26
 8009652:	fb01 f303 	mul.w	r3, r1, r3
 8009656:	4413      	add	r3, r2
 8009658:	f203 3356 	addw	r3, r3, #854	; 0x356
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	b25b      	sxtb	r3, r3
 8009660:	2b00      	cmp	r3, #0
 8009662:	da16      	bge.n	8009692 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009664:	7bfb      	ldrb	r3, [r7, #15]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	211a      	movs	r1, #26
 800966a:	fb01 f303 	mul.w	r3, r1, r3
 800966e:	4413      	add	r3, r2
 8009670:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009674:	781a      	ldrb	r2, [r3, #0]
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800967a:	7bfb      	ldrb	r3, [r7, #15]
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	211a      	movs	r1, #26
 8009680:	fb01 f303 	mul.w	r3, r1, r3
 8009684:	4413      	add	r3, r2
 8009686:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800968a:	881a      	ldrh	r2, [r3, #0]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	835a      	strh	r2, [r3, #26]
 8009690:	e015      	b.n	80096be <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009692:	7bfb      	ldrb	r3, [r7, #15]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	211a      	movs	r1, #26
 8009698:	fb01 f303 	mul.w	r3, r1, r3
 800969c:	4413      	add	r3, r2
 800969e:	f203 3356 	addw	r3, r3, #854	; 0x356
 80096a2:	781a      	ldrb	r2, [r3, #0]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	211a      	movs	r1, #26
 80096ae:	fb01 f303 	mul.w	r3, r1, r3
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80096b8:	881a      	ldrh	r2, [r3, #0]
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	7b9b      	ldrb	r3, [r3, #14]
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 fd8a 	bl	800b1de <USBH_AllocPipe>
 80096ca:	4603      	mov	r3, r0
 80096cc:	461a      	mov	r2, r3
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	7bdb      	ldrb	r3, [r3, #15]
 80096d6:	4619      	mov	r1, r3
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f001 fd80 	bl	800b1de <USBH_AllocPipe>
 80096de:	4603      	mov	r3, r0
 80096e0:	461a      	mov	r2, r3
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	7b59      	ldrb	r1, [r3, #13]
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	7b98      	ldrb	r0, [r3, #14]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	8b12      	ldrh	r2, [r2, #24]
 80096fe:	9202      	str	r2, [sp, #8]
 8009700:	2202      	movs	r2, #2
 8009702:	9201      	str	r2, [sp, #4]
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	4623      	mov	r3, r4
 8009708:	4602      	mov	r2, r0
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f001 fd38 	bl	800b180 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	7b19      	ldrb	r1, [r3, #12]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	7bd8      	ldrb	r0, [r3, #15]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	8b52      	ldrh	r2, [r2, #26]
 8009728:	9202      	str	r2, [sp, #8]
 800972a:	2202      	movs	r2, #2
 800972c:	9201      	str	r2, [sp, #4]
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	4623      	mov	r3, r4
 8009732:	4602      	mov	r2, r0
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f001 fd23 	bl	800b180 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	7b5b      	ldrb	r3, [r3, #13]
 8009746:	2200      	movs	r2, #0
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f002 f82e 	bl	800b7ac <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	7b1b      	ldrb	r3, [r3, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f002 f827 	bl	800b7ac <USBH_LL_SetToggle>

  return USBH_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3714      	adds	r7, #20
 8009764:	46bd      	mov	sp, r7
 8009766:	bd90      	pop	{r4, r7, pc}

08009768 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009776:	69db      	ldr	r3, [r3, #28]
 8009778:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00e      	beq.n	80097a0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f001 fd18 	bl	800b1be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	4619      	mov	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f001 fd43 	bl	800b220 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	7b1b      	ldrb	r3, [r3, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00e      	beq.n	80097c6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	7b1b      	ldrb	r3, [r3, #12]
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f001 fd05 	bl	800b1be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	7b1b      	ldrb	r3, [r3, #12]
 80097b8:	4619      	mov	r1, r3
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f001 fd30 	bl	800b220 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	7b5b      	ldrb	r3, [r3, #13]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00e      	beq.n	80097ec <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	7b5b      	ldrb	r3, [r3, #13]
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f001 fcf2 	bl	800b1be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	7b5b      	ldrb	r3, [r3, #13]
 80097de:	4619      	mov	r1, r3
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f001 fd1d 	bl	800b220 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097f2:	69db      	ldr	r3, [r3, #28]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00b      	beq.n	8009810 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097fe:	69db      	ldr	r3, [r3, #28]
 8009800:	4618      	mov	r0, r3
 8009802:	f002 f889 	bl	800b918 <free>
    phost->pActiveClass->pData = 0U;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800980c:	2200      	movs	r2, #0
 800980e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b084      	sub	sp, #16
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	3340      	adds	r3, #64	; 0x40
 8009830:	4619      	mov	r1, r3
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f8b1 	bl	800999a <GetLineCoding>
 8009838:	4603      	mov	r3, r0
 800983a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800983c:	7afb      	ldrb	r3, [r7, #11]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d105      	bne.n	800984e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009848:	2102      	movs	r1, #2
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800984e:	7afb      	ldrb	r3, [r7, #11]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009860:	2301      	movs	r3, #1
 8009862:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800986e:	69db      	ldr	r3, [r3, #28]
 8009870:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009878:	2b04      	cmp	r3, #4
 800987a:	d877      	bhi.n	800996c <USBH_CDC_Process+0x114>
 800987c:	a201      	add	r2, pc, #4	; (adr r2, 8009884 <USBH_CDC_Process+0x2c>)
 800987e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009882:	bf00      	nop
 8009884:	08009899 	.word	0x08009899
 8009888:	0800989f 	.word	0x0800989f
 800988c:	080098cf 	.word	0x080098cf
 8009890:	08009943 	.word	0x08009943
 8009894:	08009951 	.word	0x08009951
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73fb      	strb	r3, [r7, #15]
      break;
 800989c:	e06d      	b.n	800997a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f897 	bl	80099d8 <SetLineCoding>
 80098aa:	4603      	mov	r3, r0
 80098ac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d104      	bne.n	80098be <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2202      	movs	r2, #2
 80098b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80098bc:	e058      	b.n	8009970 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d055      	beq.n	8009970 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	2204      	movs	r2, #4
 80098c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80098cc:	e050      	b.n	8009970 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	3340      	adds	r3, #64	; 0x40
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f860 	bl	800999a <GetLineCoding>
 80098da:	4603      	mov	r3, r0
 80098dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80098de:	7bbb      	ldrb	r3, [r7, #14]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d126      	bne.n	8009932 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098f6:	791b      	ldrb	r3, [r3, #4]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d13b      	bne.n	8009974 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009906:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009908:	429a      	cmp	r2, r3
 800990a:	d133      	bne.n	8009974 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009916:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009918:	429a      	cmp	r2, r3
 800991a:	d12b      	bne.n	8009974 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009924:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009926:	429a      	cmp	r2, r3
 8009928:	d124      	bne.n	8009974 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f958 	bl	8009be0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009930:	e020      	b.n	8009974 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009932:	7bbb      	ldrb	r3, [r7, #14]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d01d      	beq.n	8009974 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	2204      	movs	r2, #4
 800993c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009940:	e018      	b.n	8009974 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f867 	bl	8009a16 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f8da 	bl	8009b02 <CDC_ProcessReception>
      break;
 800994e:	e014      	b.n	800997a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009950:	2100      	movs	r1, #0
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 ffe3 	bl	800a91e <USBH_ClrFeature>
 8009958:	4603      	mov	r3, r0
 800995a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800995c:	7bbb      	ldrb	r3, [r7, #14]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10a      	bne.n	8009978 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800996a:	e005      	b.n	8009978 <USBH_CDC_Process+0x120>

    default:
      break;
 800996c:	bf00      	nop
 800996e:	e004      	b.n	800997a <USBH_CDC_Process+0x122>
      break;
 8009970:	bf00      	nop
 8009972:	e002      	b.n	800997a <USBH_CDC_Process+0x122>
      break;
 8009974:	bf00      	nop
 8009976:	e000      	b.n	800997a <USBH_CDC_Process+0x122>
      break;
 8009978:	bf00      	nop

  }

  return status;
 800997a:	7bfb      	ldrb	r3, [r7, #15]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	370c      	adds	r7, #12
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b082      	sub	sp, #8
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	22a1      	movs	r2, #161	; 0xa1
 80099a8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2221      	movs	r2, #33	; 0x21
 80099ae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2207      	movs	r2, #7
 80099c0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2207      	movs	r2, #7
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f001 f988 	bl	800acde <USBH_CtlReq>
 80099ce:	4603      	mov	r3, r0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2221      	movs	r2, #33	; 0x21
 80099e6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2220      	movs	r2, #32
 80099ec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2207      	movs	r2, #7
 80099fe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	2207      	movs	r2, #7
 8009a04:	4619      	mov	r1, r3
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f001 f969 	bl	800acde <USBH_CtlReq>
 8009a0c:	4603      	mov	r3, r0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b086      	sub	sp, #24
 8009a1a:	af02      	add	r7, sp, #8
 8009a1c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a24:	69db      	ldr	r3, [r3, #28]
 8009a26:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d002      	beq.n	8009a3c <CDC_ProcessTransmission+0x26>
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d023      	beq.n	8009a82 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009a3a:	e05e      	b.n	8009afa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	8b12      	ldrh	r2, [r2, #24]
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d90b      	bls.n	8009a60 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	69d9      	ldr	r1, [r3, #28]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	8b1a      	ldrh	r2, [r3, #24]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	7b5b      	ldrb	r3, [r3, #13]
 8009a54:	2001      	movs	r0, #1
 8009a56:	9000      	str	r0, [sp, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f001 fb4e 	bl	800b0fa <USBH_BulkSendData>
 8009a5e:	e00b      	b.n	8009a78 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	7b5b      	ldrb	r3, [r3, #13]
 8009a6e:	2001      	movs	r0, #1
 8009a70:	9000      	str	r0, [sp, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f001 fb41 	bl	800b0fa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009a80:	e03b      	b.n	8009afa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	7b5b      	ldrb	r3, [r3, #13]
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f001 fe65 	bl	800b758 <USBH_LL_GetURBState>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009a92:	7afb      	ldrb	r3, [r7, #11]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d128      	bne.n	8009aea <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	8b12      	ldrh	r2, [r2, #24]
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d90e      	bls.n	8009ac2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	8b12      	ldrh	r2, [r2, #24]
 8009aac:	1a9a      	subs	r2, r3, r2
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	69db      	ldr	r3, [r3, #28]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	8b12      	ldrh	r2, [r2, #24]
 8009aba:	441a      	add	r2, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	61da      	str	r2, [r3, #28]
 8009ac0:	e002      	b.n	8009ac8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d004      	beq.n	8009ada <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009ad8:	e00e      	b.n	8009af8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f868 	bl	8009bb8 <USBH_CDC_TransmitCallback>
      break;
 8009ae8:	e006      	b.n	8009af8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009aea:	7afb      	ldrb	r3, [r7, #11]
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d103      	bne.n	8009af8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009af8:	bf00      	nop
  }
}
 8009afa:	bf00      	nop
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b086      	sub	sp, #24
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b10:	69db      	ldr	r3, [r3, #28]
 8009b12:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009b14:	2300      	movs	r3, #0
 8009b16:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d002      	beq.n	8009b28 <CDC_ProcessReception+0x26>
 8009b22:	2b04      	cmp	r3, #4
 8009b24:	d00e      	beq.n	8009b44 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009b26:	e043      	b.n	8009bb0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	6a19      	ldr	r1, [r3, #32]
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	8b5a      	ldrh	r2, [r3, #26]
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	7b1b      	ldrb	r3, [r3, #12]
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f001 fb05 	bl	800b144 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	2204      	movs	r2, #4
 8009b3e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009b42:	e035      	b.n	8009bb0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	7b1b      	ldrb	r3, [r3, #12]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f001 fe04 	bl	800b758 <USBH_LL_GetURBState>
 8009b50:	4603      	mov	r3, r0
 8009b52:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009b54:	7cfb      	ldrb	r3, [r7, #19]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d129      	bne.n	8009bae <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	7b1b      	ldrb	r3, [r3, #12]
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f001 fd67 	bl	800b634 <USBH_LL_GetLastXferSize>
 8009b66:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d016      	beq.n	8009ba0 <CDC_ProcessReception+0x9e>
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	8b5b      	ldrh	r3, [r3, #26]
 8009b76:	461a      	mov	r2, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d910      	bls.n	8009ba0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	1ad2      	subs	r2, r2, r3
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	6a1a      	ldr	r2, [r3, #32]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	441a      	add	r2, r3
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	2203      	movs	r2, #3
 8009b9a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009b9e:	e006      	b.n	8009bae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f80f 	bl	8009bcc <USBH_CDC_ReceiveCallback>
      break;
 8009bae:	bf00      	nop
  }
}
 8009bb0:	bf00      	nop
 8009bb2:	3718      	adds	r7, #24
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d101      	bne.n	8009c0c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009c08:	2302      	movs	r3, #2
 8009c0a:	e029      	b.n	8009c60 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	79fa      	ldrb	r2, [r7, #7]
 8009c10:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f000 f81f 	bl	8009c68 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d003      	beq.n	8009c58 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f001 fc37 	bl	800b4cc <USBH_LL_Init>

  return USBH_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009c74:	2300      	movs	r3, #0
 8009c76:	60fb      	str	r3, [r7, #12]
 8009c78:	e009      	b.n	8009c8e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	33e0      	adds	r3, #224	; 0xe0
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	2200      	movs	r2, #0
 8009c86:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	60fb      	str	r3, [r7, #12]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b0e      	cmp	r3, #14
 8009c92:	d9f2      	bls.n	8009c7a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009c94:	2300      	movs	r3, #0
 8009c96:	60fb      	str	r3, [r7, #12]
 8009c98:	e009      	b.n	8009cae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	3301      	adds	r3, #1
 8009cac:	60fb      	str	r3, [r7, #12]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cb4:	d3f1      	bcc.n	8009c9a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2240      	movs	r2, #64	; 0x40
 8009cda:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d016      	beq.n	8009d52 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10e      	bne.n	8009d4c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009d34:	1c59      	adds	r1, r3, #1
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	33de      	adds	r3, #222	; 0xde
 8009d40:	6839      	ldr	r1, [r7, #0]
 8009d42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	73fb      	strb	r3, [r7, #15]
 8009d4a:	e004      	b.n	8009d56 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	73fb      	strb	r3, [r7, #15]
 8009d50:	e001      	b.n	8009d56 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009d52:	2302      	movs	r3, #2
 8009d54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009d7a:	78fa      	ldrb	r2, [r7, #3]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d204      	bcs.n	8009d8a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	78fa      	ldrb	r2, [r7, #3]
 8009d84:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009d88:	e001      	b.n	8009d8e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b087      	sub	sp, #28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	4608      	mov	r0, r1
 8009da6:	4611      	mov	r1, r2
 8009da8:	461a      	mov	r2, r3
 8009daa:	4603      	mov	r3, r0
 8009dac:	70fb      	strb	r3, [r7, #3]
 8009dae:	460b      	mov	r3, r1
 8009db0:	70bb      	strb	r3, [r7, #2]
 8009db2:	4613      	mov	r3, r2
 8009db4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009db6:	2300      	movs	r3, #0
 8009db8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009dc4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009dc6:	e025      	b.n	8009e14 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009dc8:	7dfb      	ldrb	r3, [r7, #23]
 8009dca:	221a      	movs	r2, #26
 8009dcc:	fb02 f303 	mul.w	r3, r2, r3
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	3302      	adds	r3, #2
 8009dd8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	795b      	ldrb	r3, [r3, #5]
 8009dde:	78fa      	ldrb	r2, [r7, #3]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d002      	beq.n	8009dea <USBH_FindInterface+0x4e>
 8009de4:	78fb      	ldrb	r3, [r7, #3]
 8009de6:	2bff      	cmp	r3, #255	; 0xff
 8009de8:	d111      	bne.n	8009e0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009dee:	78ba      	ldrb	r2, [r7, #2]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d002      	beq.n	8009dfa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009df4:	78bb      	ldrb	r3, [r7, #2]
 8009df6:	2bff      	cmp	r3, #255	; 0xff
 8009df8:	d109      	bne.n	8009e0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009dfe:	787a      	ldrb	r2, [r7, #1]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d002      	beq.n	8009e0a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009e04:	787b      	ldrb	r3, [r7, #1]
 8009e06:	2bff      	cmp	r3, #255	; 0xff
 8009e08:	d101      	bne.n	8009e0e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009e0a:	7dfb      	ldrb	r3, [r7, #23]
 8009e0c:	e006      	b.n	8009e1c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009e0e:	7dfb      	ldrb	r3, [r7, #23]
 8009e10:	3301      	adds	r3, #1
 8009e12:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009e14:	7dfb      	ldrb	r3, [r7, #23]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d9d6      	bls.n	8009dc8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009e1a:	23ff      	movs	r3, #255	; 0xff
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	371c      	adds	r7, #28
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f001 fb87 	bl	800b544 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009e36:	2101      	movs	r1, #1
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f001 fca0 	bl	800b77e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af04      	add	r7, sp, #16
 8009e4e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009e50:	2302      	movs	r3, #2
 8009e52:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d102      	bne.n	8009e6a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2203      	movs	r2, #3
 8009e68:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b0b      	cmp	r3, #11
 8009e72:	f200 81b3 	bhi.w	800a1dc <USBH_Process+0x394>
 8009e76:	a201      	add	r2, pc, #4	; (adr r2, 8009e7c <USBH_Process+0x34>)
 8009e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7c:	08009ead 	.word	0x08009ead
 8009e80:	08009edf 	.word	0x08009edf
 8009e84:	08009f47 	.word	0x08009f47
 8009e88:	0800a177 	.word	0x0800a177
 8009e8c:	0800a1dd 	.word	0x0800a1dd
 8009e90:	08009feb 	.word	0x08009feb
 8009e94:	0800a11d 	.word	0x0800a11d
 8009e98:	0800a021 	.word	0x0800a021
 8009e9c:	0800a041 	.word	0x0800a041
 8009ea0:	0800a061 	.word	0x0800a061
 8009ea4:	0800a08f 	.word	0x0800a08f
 8009ea8:	0800a15f 	.word	0x0800a15f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f000 8193 	beq.w	800a1e0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009ec0:	20c8      	movs	r0, #200	; 0xc8
 8009ec2:	f001 fca3 	bl	800b80c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f001 fb99 	bl	800b5fe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009edc:	e180      	b.n	800a1e0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d107      	bne.n	8009ef8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009ef6:	e182      	b.n	800a1fe <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009efe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f02:	d914      	bls.n	8009f2e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d903      	bls.n	8009f26 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	220d      	movs	r2, #13
 8009f22:	701a      	strb	r2, [r3, #0]
      break;
 8009f24:	e16b      	b.n	800a1fe <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	701a      	strb	r2, [r3, #0]
      break;
 8009f2c:	e167      	b.n	800a1fe <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009f34:	f103 020a 	add.w	r2, r3, #10
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009f3e:	200a      	movs	r0, #10
 8009f40:	f001 fc64 	bl	800b80c <USBH_Delay>
      break;
 8009f44:	e15b      	b.n	800a1fe <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d005      	beq.n	8009f5c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f56:	2104      	movs	r1, #4
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009f5c:	2064      	movs	r0, #100	; 0x64
 8009f5e:	f001 fc55 	bl	800b80c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f001 fb24 	bl	800b5b0 <USBH_LL_GetSpeed>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2205      	movs	r2, #5
 8009f76:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009f78:	2100      	movs	r1, #0
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f001 f92f 	bl	800b1de <USBH_AllocPipe>
 8009f80:	4603      	mov	r3, r0
 8009f82:	461a      	mov	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009f88:	2180      	movs	r1, #128	; 0x80
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 f927 	bl	800b1de <USBH_AllocPipe>
 8009f90:	4603      	mov	r3, r0
 8009f92:	461a      	mov	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	7919      	ldrb	r1, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009fac:	b292      	uxth	r2, r2
 8009fae:	9202      	str	r2, [sp, #8]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	9201      	str	r2, [sp, #4]
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2280      	movs	r2, #128	; 0x80
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f001 f8e0 	bl	800b180 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	7959      	ldrb	r1, [r3, #5]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009fd4:	b292      	uxth	r2, r2
 8009fd6:	9202      	str	r2, [sp, #8]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	9201      	str	r2, [sp, #4]
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f001 f8cc 	bl	800b180 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009fe8:	e109      	b.n	800a1fe <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f90c 	bl	800a208 <USBH_HandleEnum>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f040 80f3 	bne.w	800a1e4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d103      	bne.n	800a018 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2208      	movs	r2, #8
 800a014:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a016:	e0e5      	b.n	800a1e4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2207      	movs	r2, #7
 800a01c:	701a      	strb	r2, [r3, #0]
      break;
 800a01e:	e0e1      	b.n	800a1e4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a026:	2b00      	cmp	r3, #0
 800a028:	f000 80de 	beq.w	800a1e8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a032:	2101      	movs	r1, #1
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2208      	movs	r2, #8
 800a03c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a03e:	e0d3      	b.n	800a1e8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a046:	b29b      	uxth	r3, r3
 800a048:	4619      	mov	r1, r3
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fc20 	bl	800a890 <USBH_SetCfg>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	f040 80ca 	bne.w	800a1ec <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2209      	movs	r2, #9
 800a05c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a05e:	e0c5      	b.n	800a1ec <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a066:	f003 0320 	and.w	r3, r3, #32
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00b      	beq.n	800a086 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a06e:	2101      	movs	r1, #1
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 fc30 	bl	800a8d6 <USBH_SetFeature>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f040 80b9 	bne.w	800a1f0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	220a      	movs	r2, #10
 800a082:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a084:	e0b4      	b.n	800a1f0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	220a      	movs	r2, #10
 800a08a:	701a      	strb	r2, [r3, #0]
      break;
 800a08c:	e0b0      	b.n	800a1f0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a094:	2b00      	cmp	r3, #0
 800a096:	f000 80ad 	beq.w	800a1f4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	73fb      	strb	r3, [r7, #15]
 800a0a6:	e016      	b.n	800a0d6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a0a8:	7bfa      	ldrb	r2, [r7, #15]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	32de      	adds	r2, #222	; 0xde
 800a0ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b2:	791a      	ldrb	r2, [r3, #4]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d108      	bne.n	800a0d0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a0be:	7bfa      	ldrb	r2, [r7, #15]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	32de      	adds	r2, #222	; 0xde
 800a0c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a0ce:	e005      	b.n	800a0dc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	73fb      	strb	r3, [r7, #15]
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d0e5      	beq.n	800a0a8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d016      	beq.n	800a114 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	4798      	blx	r3
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d109      	bne.n	800a10c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2206      	movs	r2, #6
 800a0fc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a104:	2103      	movs	r1, #3
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a10a:	e073      	b.n	800a1f4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	220d      	movs	r2, #13
 800a110:	701a      	strb	r2, [r3, #0]
      break;
 800a112:	e06f      	b.n	800a1f4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	220d      	movs	r2, #13
 800a118:	701a      	strb	r2, [r3, #0]
      break;
 800a11a:	e06b      	b.n	800a1f4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a122:	2b00      	cmp	r3, #0
 800a124:	d017      	beq.n	800a156 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	4798      	blx	r3
 800a132:	4603      	mov	r3, r0
 800a134:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a136:	7bbb      	ldrb	r3, [r7, #14]
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d103      	bne.n	800a146 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	220b      	movs	r2, #11
 800a142:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a144:	e058      	b.n	800a1f8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a146:	7bbb      	ldrb	r3, [r7, #14]
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d154      	bne.n	800a1f8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	220d      	movs	r2, #13
 800a152:	701a      	strb	r2, [r3, #0]
      break;
 800a154:	e050      	b.n	800a1f8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	220d      	movs	r2, #13
 800a15a:	701a      	strb	r2, [r3, #0]
      break;
 800a15c:	e04c      	b.n	800a1f8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a164:	2b00      	cmp	r3, #0
 800a166:	d049      	beq.n	800a1fc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	4798      	blx	r3
      }
      break;
 800a174:	e042      	b.n	800a1fc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7ff fd72 	bl	8009c68 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d009      	beq.n	800a1a2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d005      	beq.n	800a1b8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1b2:	2105      	movs	r1, #5
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d107      	bne.n	800a1d4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f7ff fe2b 	bl	8009e28 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a1d2:	e014      	b.n	800a1fe <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f001 f9b5 	bl	800b544 <USBH_LL_Start>
      break;
 800a1da:	e010      	b.n	800a1fe <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a1dc:	bf00      	nop
 800a1de:	e00e      	b.n	800a1fe <USBH_Process+0x3b6>
      break;
 800a1e0:	bf00      	nop
 800a1e2:	e00c      	b.n	800a1fe <USBH_Process+0x3b6>
      break;
 800a1e4:	bf00      	nop
 800a1e6:	e00a      	b.n	800a1fe <USBH_Process+0x3b6>
    break;
 800a1e8:	bf00      	nop
 800a1ea:	e008      	b.n	800a1fe <USBH_Process+0x3b6>
      break;
 800a1ec:	bf00      	nop
 800a1ee:	e006      	b.n	800a1fe <USBH_Process+0x3b6>
      break;
 800a1f0:	bf00      	nop
 800a1f2:	e004      	b.n	800a1fe <USBH_Process+0x3b6>
      break;
 800a1f4:	bf00      	nop
 800a1f6:	e002      	b.n	800a1fe <USBH_Process+0x3b6>
      break;
 800a1f8:	bf00      	nop
 800a1fa:	e000      	b.n	800a1fe <USBH_Process+0x3b6>
      break;
 800a1fc:	bf00      	nop
  }
  return USBH_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b088      	sub	sp, #32
 800a20c:	af04      	add	r7, sp, #16
 800a20e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a210:	2301      	movs	r3, #1
 800a212:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a214:	2301      	movs	r3, #1
 800a216:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	785b      	ldrb	r3, [r3, #1]
 800a21c:	2b07      	cmp	r3, #7
 800a21e:	f200 81c1 	bhi.w	800a5a4 <USBH_HandleEnum+0x39c>
 800a222:	a201      	add	r2, pc, #4	; (adr r2, 800a228 <USBH_HandleEnum+0x20>)
 800a224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a228:	0800a249 	.word	0x0800a249
 800a22c:	0800a307 	.word	0x0800a307
 800a230:	0800a371 	.word	0x0800a371
 800a234:	0800a3ff 	.word	0x0800a3ff
 800a238:	0800a469 	.word	0x0800a469
 800a23c:	0800a4d9 	.word	0x0800a4d9
 800a240:	0800a51f 	.word	0x0800a51f
 800a244:	0800a565 	.word	0x0800a565
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a248:	2108      	movs	r1, #8
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 fa50 	bl	800a6f0 <USBH_Get_DevDesc>
 800a250:	4603      	mov	r3, r0
 800a252:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a254:	7bbb      	ldrb	r3, [r7, #14]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d130      	bne.n	800a2bc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	7919      	ldrb	r1, [r3, #4]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a27e:	b292      	uxth	r2, r2
 800a280:	9202      	str	r2, [sp, #8]
 800a282:	2200      	movs	r2, #0
 800a284:	9201      	str	r2, [sp, #4]
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	4603      	mov	r3, r0
 800a28a:	2280      	movs	r2, #128	; 0x80
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 ff77 	bl	800b180 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	7959      	ldrb	r1, [r3, #5]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a2a6:	b292      	uxth	r2, r2
 800a2a8:	9202      	str	r2, [sp, #8]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	9201      	str	r2, [sp, #4]
 800a2ae:	9300      	str	r3, [sp, #0]
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 ff63 	bl	800b180 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a2ba:	e175      	b.n	800a5a8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2bc:	7bbb      	ldrb	r3, [r7, #14]
 800a2be:	2b03      	cmp	r3, #3
 800a2c0:	f040 8172 	bne.w	800a5a8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	b2da      	uxtb	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	d903      	bls.n	800a2e6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	220d      	movs	r2, #13
 800a2e2:	701a      	strb	r2, [r3, #0]
      break;
 800a2e4:	e160      	b.n	800a5a8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	795b      	ldrb	r3, [r3, #5]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 ff97 	bl	800b220 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	791b      	ldrb	r3, [r3, #4]
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 ff91 	bl	800b220 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	701a      	strb	r2, [r3, #0]
      break;
 800a304:	e150      	b.n	800a5a8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a306:	2112      	movs	r1, #18
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f9f1 	bl	800a6f0 <USBH_Get_DevDesc>
 800a30e:	4603      	mov	r3, r0
 800a310:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a312:	7bbb      	ldrb	r3, [r7, #14]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d103      	bne.n	800a320 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2202      	movs	r2, #2
 800a31c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a31e:	e145      	b.n	800a5ac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a320:	7bbb      	ldrb	r3, [r7, #14]
 800a322:	2b03      	cmp	r3, #3
 800a324:	f040 8142 	bne.w	800a5ac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a32e:	3301      	adds	r3, #1
 800a330:	b2da      	uxtb	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a33e:	2b03      	cmp	r3, #3
 800a340:	d903      	bls.n	800a34a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	220d      	movs	r2, #13
 800a346:	701a      	strb	r2, [r3, #0]
      break;
 800a348:	e130      	b.n	800a5ac <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	795b      	ldrb	r3, [r3, #5]
 800a34e:	4619      	mov	r1, r3
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 ff65 	bl	800b220 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	791b      	ldrb	r3, [r3, #4]
 800a35a:	4619      	mov	r1, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 ff5f 	bl	800b220 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	701a      	strb	r2, [r3, #0]
      break;
 800a36e:	e11d      	b.n	800a5ac <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a370:	2101      	movs	r1, #1
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fa68 	bl	800a848 <USBH_SetAddress>
 800a378:	4603      	mov	r3, r0
 800a37a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a37c:	7bbb      	ldrb	r3, [r7, #14]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d132      	bne.n	800a3e8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a382:	2002      	movs	r0, #2
 800a384:	f001 fa42 	bl	800b80c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2203      	movs	r2, #3
 800a394:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	7919      	ldrb	r1, [r3, #4]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a3aa:	b292      	uxth	r2, r2
 800a3ac:	9202      	str	r2, [sp, #8]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	9201      	str	r2, [sp, #4]
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2280      	movs	r2, #128	; 0x80
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 fee1 	bl	800b180 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	7959      	ldrb	r1, [r3, #5]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a3d2:	b292      	uxth	r2, r2
 800a3d4:	9202      	str	r2, [sp, #8]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	9201      	str	r2, [sp, #4]
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2200      	movs	r2, #0
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fecd 	bl	800b180 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a3e6:	e0e3      	b.n	800a5b0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	f040 80e0 	bne.w	800a5b0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	220d      	movs	r2, #13
 800a3f4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	705a      	strb	r2, [r3, #1]
      break;
 800a3fc:	e0d8      	b.n	800a5b0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a3fe:	2109      	movs	r1, #9
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f99d 	bl	800a740 <USBH_Get_CfgDesc>
 800a406:	4603      	mov	r3, r0
 800a408:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a40a:	7bbb      	ldrb	r3, [r7, #14]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d103      	bne.n	800a418 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2204      	movs	r2, #4
 800a414:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a416:	e0cd      	b.n	800a5b4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a418:	7bbb      	ldrb	r3, [r7, #14]
 800a41a:	2b03      	cmp	r3, #3
 800a41c:	f040 80ca 	bne.w	800a5b4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a426:	3301      	adds	r3, #1
 800a428:	b2da      	uxtb	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a436:	2b03      	cmp	r3, #3
 800a438:	d903      	bls.n	800a442 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	220d      	movs	r2, #13
 800a43e:	701a      	strb	r2, [r3, #0]
      break;
 800a440:	e0b8      	b.n	800a5b4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	795b      	ldrb	r3, [r3, #5]
 800a446:	4619      	mov	r1, r3
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 fee9 	bl	800b220 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	791b      	ldrb	r3, [r3, #4]
 800a452:	4619      	mov	r1, r3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 fee3 	bl	800b220 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	701a      	strb	r2, [r3, #0]
      break;
 800a466:	e0a5      	b.n	800a5b4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a46e:	4619      	mov	r1, r3
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f965 	bl	800a740 <USBH_Get_CfgDesc>
 800a476:	4603      	mov	r3, r0
 800a478:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a47a:	7bbb      	ldrb	r3, [r7, #14]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d103      	bne.n	800a488 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2205      	movs	r2, #5
 800a484:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a486:	e097      	b.n	800a5b8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a488:	7bbb      	ldrb	r3, [r7, #14]
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	f040 8094 	bne.w	800a5b8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a496:	3301      	adds	r3, #1
 800a498:	b2da      	uxtb	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4a6:	2b03      	cmp	r3, #3
 800a4a8:	d903      	bls.n	800a4b2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	220d      	movs	r2, #13
 800a4ae:	701a      	strb	r2, [r3, #0]
      break;
 800a4b0:	e082      	b.n	800a5b8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	795b      	ldrb	r3, [r3, #5]
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 feb1 	bl	800b220 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	791b      	ldrb	r3, [r3, #4]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 feab 	bl	800b220 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	701a      	strb	r2, [r3, #0]
      break;
 800a4d6:	e06f      	b.n	800a5b8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d019      	beq.n	800a516 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a4ee:	23ff      	movs	r3, #255	; 0xff
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f949 	bl	800a788 <USBH_Get_StringDesc>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4fa:	7bbb      	ldrb	r3, [r7, #14]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d103      	bne.n	800a508 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2206      	movs	r2, #6
 800a504:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a506:	e059      	b.n	800a5bc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a508:	7bbb      	ldrb	r3, [r7, #14]
 800a50a:	2b03      	cmp	r3, #3
 800a50c:	d156      	bne.n	800a5bc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2206      	movs	r2, #6
 800a512:	705a      	strb	r2, [r3, #1]
      break;
 800a514:	e052      	b.n	800a5bc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2206      	movs	r2, #6
 800a51a:	705a      	strb	r2, [r3, #1]
      break;
 800a51c:	e04e      	b.n	800a5bc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a524:	2b00      	cmp	r3, #0
 800a526:	d019      	beq.n	800a55c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a534:	23ff      	movs	r3, #255	; 0xff
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f926 	bl	800a788 <USBH_Get_StringDesc>
 800a53c:	4603      	mov	r3, r0
 800a53e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a540:	7bbb      	ldrb	r3, [r7, #14]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d103      	bne.n	800a54e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2207      	movs	r2, #7
 800a54a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a54c:	e038      	b.n	800a5c0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a54e:	7bbb      	ldrb	r3, [r7, #14]
 800a550:	2b03      	cmp	r3, #3
 800a552:	d135      	bne.n	800a5c0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2207      	movs	r2, #7
 800a558:	705a      	strb	r2, [r3, #1]
      break;
 800a55a:	e031      	b.n	800a5c0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2207      	movs	r2, #7
 800a560:	705a      	strb	r2, [r3, #1]
      break;
 800a562:	e02d      	b.n	800a5c0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d017      	beq.n	800a59e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a57a:	23ff      	movs	r3, #255	; 0xff
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 f903 	bl	800a788 <USBH_Get_StringDesc>
 800a582:	4603      	mov	r3, r0
 800a584:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a586:	7bbb      	ldrb	r3, [r7, #14]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d102      	bne.n	800a592 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a590:	e018      	b.n	800a5c4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a592:	7bbb      	ldrb	r3, [r7, #14]
 800a594:	2b03      	cmp	r3, #3
 800a596:	d115      	bne.n	800a5c4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a598:	2300      	movs	r3, #0
 800a59a:	73fb      	strb	r3, [r7, #15]
      break;
 800a59c:	e012      	b.n	800a5c4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	73fb      	strb	r3, [r7, #15]
      break;
 800a5a2:	e00f      	b.n	800a5c4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a5a4:	bf00      	nop
 800a5a6:	e00e      	b.n	800a5c6 <USBH_HandleEnum+0x3be>
      break;
 800a5a8:	bf00      	nop
 800a5aa:	e00c      	b.n	800a5c6 <USBH_HandleEnum+0x3be>
      break;
 800a5ac:	bf00      	nop
 800a5ae:	e00a      	b.n	800a5c6 <USBH_HandleEnum+0x3be>
      break;
 800a5b0:	bf00      	nop
 800a5b2:	e008      	b.n	800a5c6 <USBH_HandleEnum+0x3be>
      break;
 800a5b4:	bf00      	nop
 800a5b6:	e006      	b.n	800a5c6 <USBH_HandleEnum+0x3be>
      break;
 800a5b8:	bf00      	nop
 800a5ba:	e004      	b.n	800a5c6 <USBH_HandleEnum+0x3be>
      break;
 800a5bc:	bf00      	nop
 800a5be:	e002      	b.n	800a5c6 <USBH_HandleEnum+0x3be>
      break;
 800a5c0:	bf00      	nop
 800a5c2:	e000      	b.n	800a5c6 <USBH_HandleEnum+0x3be>
      break;
 800a5c4:	bf00      	nop
  }
  return Status;
 800a5c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a5e2:	bf00      	nop
 800a5e4:	370c      	adds	r7, #12
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr

0800a5ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b082      	sub	sp, #8
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a5fc:	1c5a      	adds	r2, r3, #1
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 f804 	bl	800a612 <USBH_HandleSof>
}
 800a60a:	bf00      	nop
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b082      	sub	sp, #8
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b0b      	cmp	r3, #11
 800a622:	d10a      	bne.n	800a63a <USBH_HandleSof+0x28>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d005      	beq.n	800a63a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	4798      	blx	r3
  }
}
 800a63a:	bf00      	nop
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a642:	b480      	push	{r7}
 800a644:	b083      	sub	sp, #12
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a652:	bf00      	nop
}
 800a654:	370c      	adds	r7, #12
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a65e:	b480      	push	{r7}
 800a660:	b083      	sub	sp, #12
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a66e:	bf00      	nop
}
 800a670:	370c      	adds	r7, #12
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b083      	sub	sp, #12
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 ff56 	bl	800b57a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	791b      	ldrb	r3, [r3, #4]
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fda3 	bl	800b220 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	795b      	ldrb	r3, [r3, #5]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fd9d 	bl	800b220 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af02      	add	r7, sp, #8
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a702:	78fb      	ldrb	r3, [r7, #3]
 800a704:	b29b      	uxth	r3, r3
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	4613      	mov	r3, r2
 800a70a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a70e:	2100      	movs	r1, #0
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 f864 	bl	800a7de <USBH_GetDescriptor>
 800a716:	4603      	mov	r3, r0
 800a718:	73fb      	strb	r3, [r7, #15]
 800a71a:	7bfb      	ldrb	r3, [r7, #15]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10a      	bne.n	800a736 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a72c:	78fa      	ldrb	r2, [r7, #3]
 800a72e:	b292      	uxth	r2, r2
 800a730:	4619      	mov	r1, r3
 800a732:	f000 f918 	bl	800a966 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a736:	7bfb      	ldrb	r3, [r7, #15]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af02      	add	r7, sp, #8
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	460b      	mov	r3, r1
 800a74a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	331c      	adds	r3, #28
 800a750:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a752:	887b      	ldrh	r3, [r7, #2]
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a75c:	2100      	movs	r1, #0
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f83d 	bl	800a7de <USBH_GetDescriptor>
 800a764:	4603      	mov	r3, r0
 800a766:	72fb      	strb	r3, [r7, #11]
 800a768:	7afb      	ldrb	r3, [r7, #11]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d107      	bne.n	800a77e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a774:	887a      	ldrh	r2, [r7, #2]
 800a776:	68f9      	ldr	r1, [r7, #12]
 800a778:	4618      	mov	r0, r3
 800a77a:	f000 f964 	bl	800aa46 <USBH_ParseCfgDesc>
  }

  return status;
 800a77e:	7afb      	ldrb	r3, [r7, #11]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af02      	add	r7, sp, #8
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	607a      	str	r2, [r7, #4]
 800a792:	461a      	mov	r2, r3
 800a794:	460b      	mov	r3, r1
 800a796:	72fb      	strb	r3, [r7, #11]
 800a798:	4613      	mov	r3, r2
 800a79a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a79c:	7afb      	ldrb	r3, [r7, #11]
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a7a4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a7ac:	893b      	ldrh	r3, [r7, #8]
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f000 f812 	bl	800a7de <USBH_GetDescriptor>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	75fb      	strb	r3, [r7, #23]
 800a7be:	7dfb      	ldrb	r3, [r7, #23]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d107      	bne.n	800a7d4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a7ca:	893a      	ldrh	r2, [r7, #8]
 800a7cc:	6879      	ldr	r1, [r7, #4]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f000 fa37 	bl	800ac42 <USBH_ParseStringDesc>
  }

  return status;
 800a7d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3718      	adds	r7, #24
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b084      	sub	sp, #16
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	60f8      	str	r0, [r7, #12]
 800a7e6:	607b      	str	r3, [r7, #4]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	72fb      	strb	r3, [r7, #11]
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	789b      	ldrb	r3, [r3, #2]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d11c      	bne.n	800a832 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a7f8:	7afb      	ldrb	r3, [r7, #11]
 800a7fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a7fe:	b2da      	uxtb	r2, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2206      	movs	r2, #6
 800a808:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	893a      	ldrh	r2, [r7, #8]
 800a80e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a810:	893b      	ldrh	r3, [r7, #8]
 800a812:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a81a:	d104      	bne.n	800a826 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f240 4209 	movw	r2, #1033	; 0x409
 800a822:	829a      	strh	r2, [r3, #20]
 800a824:	e002      	b.n	800a82c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	8b3a      	ldrh	r2, [r7, #24]
 800a830:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a832:	8b3b      	ldrh	r3, [r7, #24]
 800a834:	461a      	mov	r2, r3
 800a836:	6879      	ldr	r1, [r7, #4]
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f000 fa50 	bl	800acde <USBH_CtlReq>
 800a83e:	4603      	mov	r3, r0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	460b      	mov	r3, r1
 800a852:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	789b      	ldrb	r3, [r3, #2]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d10f      	bne.n	800a87c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2205      	movs	r2, #5
 800a866:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a868:	78fb      	ldrb	r3, [r7, #3]
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a87c:	2200      	movs	r2, #0
 800a87e:	2100      	movs	r1, #0
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fa2c 	bl	800acde <USBH_CtlReq>
 800a886:	4603      	mov	r3, r0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	460b      	mov	r3, r1
 800a89a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	789b      	ldrb	r3, [r3, #2]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d10e      	bne.n	800a8c2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2209      	movs	r2, #9
 800a8ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	887a      	ldrh	r2, [r7, #2]
 800a8b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 fa09 	bl	800acde <USBH_CtlReq>
 800a8cc:	4603      	mov	r3, r0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b082      	sub	sp, #8
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	460b      	mov	r3, r1
 800a8e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	789b      	ldrb	r3, [r3, #2]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d10f      	bne.n	800a90a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2203      	movs	r2, #3
 800a8f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a8f6:	78fb      	ldrb	r3, [r7, #3]
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a90a:	2200      	movs	r2, #0
 800a90c:	2100      	movs	r1, #0
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f9e5 	bl	800acde <USBH_CtlReq>
 800a914:	4603      	mov	r3, r0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b082      	sub	sp, #8
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	460b      	mov	r3, r1
 800a928:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	789b      	ldrb	r3, [r3, #2]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d10f      	bne.n	800a952 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2202      	movs	r2, #2
 800a936:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a944:	78fb      	ldrb	r3, [r7, #3]
 800a946:	b29a      	uxth	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a952:	2200      	movs	r2, #0
 800a954:	2100      	movs	r1, #0
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f9c1 	bl	800acde <USBH_CtlReq>
 800a95c:	4603      	mov	r3, r0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a966:	b480      	push	{r7}
 800a968:	b085      	sub	sp, #20
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	60f8      	str	r0, [r7, #12]
 800a96e:	60b9      	str	r1, [r7, #8]
 800a970:	4613      	mov	r3, r2
 800a972:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	781a      	ldrb	r2, [r3, #0]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	785a      	ldrb	r2, [r3, #1]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	3302      	adds	r3, #2
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	3303      	adds	r3, #3
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	b29b      	uxth	r3, r3
 800a994:	021b      	lsls	r3, r3, #8
 800a996:	b29b      	uxth	r3, r3
 800a998:	4313      	orrs	r3, r2
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	791a      	ldrb	r2, [r3, #4]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	795a      	ldrb	r2, [r3, #5]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	799a      	ldrb	r2, [r3, #6]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	79da      	ldrb	r2, [r3, #7]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a9c0:	88fb      	ldrh	r3, [r7, #6]
 800a9c2:	2b08      	cmp	r3, #8
 800a9c4:	d939      	bls.n	800aa3a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	3308      	adds	r3, #8
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	3309      	adds	r3, #9
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	021b      	lsls	r3, r3, #8
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	330a      	adds	r3, #10
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	330b      	adds	r3, #11
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	021b      	lsls	r3, r3, #8
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	330c      	adds	r3, #12
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	330d      	adds	r3, #13
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	021b      	lsls	r3, r3, #8
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	4313      	orrs	r3, r2
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	7b9a      	ldrb	r2, [r3, #14]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	7bda      	ldrb	r2, [r3, #15]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	7c1a      	ldrb	r2, [r3, #16]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	7c5a      	ldrb	r2, [r3, #17]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	745a      	strb	r2, [r3, #17]
  }
}
 800aa3a:	bf00      	nop
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b08a      	sub	sp, #40	; 0x28
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	60f8      	str	r0, [r7, #12]
 800aa4e:	60b9      	str	r1, [r7, #8]
 800aa50:	4613      	mov	r3, r2
 800aa52:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	781a      	ldrb	r2, [r3, #0]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	785a      	ldrb	r2, [r3, #1]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	3302      	adds	r3, #2
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	3303      	adds	r3, #3
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	021b      	lsls	r3, r3, #8
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	791a      	ldrb	r2, [r3, #4]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	795a      	ldrb	r2, [r3, #5]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	799a      	ldrb	r2, [r3, #6]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	79da      	ldrb	r2, [r3, #7]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	7a1a      	ldrb	r2, [r3, #8]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800aabc:	88fb      	ldrh	r3, [r7, #6]
 800aabe:	2b09      	cmp	r3, #9
 800aac0:	d95f      	bls.n	800ab82 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800aac2:	2309      	movs	r3, #9
 800aac4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aaca:	e051      	b.n	800ab70 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aacc:	f107 0316 	add.w	r3, r7, #22
 800aad0:	4619      	mov	r1, r3
 800aad2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aad4:	f000 f8e8 	bl	800aca8 <USBH_GetNextDesc>
 800aad8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	785b      	ldrb	r3, [r3, #1]
 800aade:	2b04      	cmp	r3, #4
 800aae0:	d146      	bne.n	800ab70 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800aae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aae6:	221a      	movs	r2, #26
 800aae8:	fb02 f303 	mul.w	r3, r2, r3
 800aaec:	3308      	adds	r3, #8
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	3302      	adds	r3, #2
 800aaf4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800aaf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aaf8:	69f8      	ldr	r0, [r7, #28]
 800aafa:	f000 f846 	bl	800ab8a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800aafe:	2300      	movs	r3, #0
 800ab00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ab08:	e022      	b.n	800ab50 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ab0a:	f107 0316 	add.w	r3, r7, #22
 800ab0e:	4619      	mov	r1, r3
 800ab10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab12:	f000 f8c9 	bl	800aca8 <USBH_GetNextDesc>
 800ab16:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ab18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1a:	785b      	ldrb	r3, [r3, #1]
 800ab1c:	2b05      	cmp	r3, #5
 800ab1e:	d117      	bne.n	800ab50 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ab20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab24:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ab28:	3201      	adds	r2, #1
 800ab2a:	00d2      	lsls	r2, r2, #3
 800ab2c:	211a      	movs	r1, #26
 800ab2e:	fb01 f303 	mul.w	r3, r1, r3
 800ab32:	4413      	add	r3, r2
 800ab34:	3308      	adds	r3, #8
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	4413      	add	r3, r2
 800ab3a:	3304      	adds	r3, #4
 800ab3c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ab3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab40:	69b8      	ldr	r0, [r7, #24]
 800ab42:	f000 f851 	bl	800abe8 <USBH_ParseEPDesc>
            ep_ix++;
 800ab46:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	791b      	ldrb	r3, [r3, #4]
 800ab54:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d204      	bcs.n	800ab66 <USBH_ParseCfgDesc+0x120>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	885a      	ldrh	r2, [r3, #2]
 800ab60:	8afb      	ldrh	r3, [r7, #22]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d8d1      	bhi.n	800ab0a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ab66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ab70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d804      	bhi.n	800ab82 <USBH_ParseCfgDesc+0x13c>
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	885a      	ldrh	r2, [r3, #2]
 800ab7c:	8afb      	ldrh	r3, [r7, #22]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d8a4      	bhi.n	800aacc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ab82:	bf00      	nop
 800ab84:	3728      	adds	r7, #40	; 0x28
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b083      	sub	sp, #12
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	781a      	ldrb	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	785a      	ldrb	r2, [r3, #1]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	789a      	ldrb	r2, [r3, #2]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	78da      	ldrb	r2, [r3, #3]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	791a      	ldrb	r2, [r3, #4]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	795a      	ldrb	r2, [r3, #5]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	799a      	ldrb	r2, [r3, #6]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	79da      	ldrb	r2, [r3, #7]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	7a1a      	ldrb	r2, [r3, #8]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	721a      	strb	r2, [r3, #8]
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	781a      	ldrb	r2, [r3, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	785a      	ldrb	r2, [r3, #1]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	789a      	ldrb	r2, [r3, #2]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	78da      	ldrb	r2, [r3, #3]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	3304      	adds	r3, #4
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	3305      	adds	r3, #5
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	021b      	lsls	r3, r3, #8
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	4313      	orrs	r3, r2
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	799a      	ldrb	r2, [r3, #6]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	719a      	strb	r2, [r3, #6]
}
 800ac36:	bf00      	nop
 800ac38:	370c      	adds	r7, #12
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ac42:	b480      	push	{r7}
 800ac44:	b087      	sub	sp, #28
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	60f8      	str	r0, [r7, #12]
 800ac4a:	60b9      	str	r1, [r7, #8]
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	3301      	adds	r3, #1
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	2b03      	cmp	r3, #3
 800ac58:	d120      	bne.n	800ac9c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	1e9a      	subs	r2, r3, #2
 800ac60:	88fb      	ldrh	r3, [r7, #6]
 800ac62:	4293      	cmp	r3, r2
 800ac64:	bf28      	it	cs
 800ac66:	4613      	movcs	r3, r2
 800ac68:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	3302      	adds	r3, #2
 800ac6e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ac70:	2300      	movs	r3, #0
 800ac72:	82fb      	strh	r3, [r7, #22]
 800ac74:	e00b      	b.n	800ac8e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ac76:	8afb      	ldrh	r3, [r7, #22]
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	781a      	ldrb	r2, [r3, #0]
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	3301      	adds	r3, #1
 800ac86:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ac88:	8afb      	ldrh	r3, [r7, #22]
 800ac8a:	3302      	adds	r3, #2
 800ac8c:	82fb      	strh	r3, [r7, #22]
 800ac8e:	8afa      	ldrh	r2, [r7, #22]
 800ac90:	8abb      	ldrh	r3, [r7, #20]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d3ef      	bcc.n	800ac76 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	701a      	strb	r2, [r3, #0]
  }
}
 800ac9c:	bf00      	nop
 800ac9e:	371c      	adds	r7, #28
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	881a      	ldrh	r2, [r3, #0]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	b29b      	uxth	r3, r3
 800acbc:	4413      	add	r3, r2
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4413      	add	r3, r2
 800acce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800acd0:	68fb      	ldr	r3, [r7, #12]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3714      	adds	r7, #20
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr

0800acde <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b086      	sub	sp, #24
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	60f8      	str	r0, [r7, #12]
 800ace6:	60b9      	str	r1, [r7, #8]
 800ace8:	4613      	mov	r3, r2
 800acea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800acec:	2301      	movs	r3, #1
 800acee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	789b      	ldrb	r3, [r3, #2]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d002      	beq.n	800acfe <USBH_CtlReq+0x20>
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	d00f      	beq.n	800ad1c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800acfc:	e027      	b.n	800ad4e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	68ba      	ldr	r2, [r7, #8]
 800ad02:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	88fa      	ldrh	r2, [r7, #6]
 800ad08:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2202      	movs	r2, #2
 800ad14:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ad16:	2301      	movs	r3, #1
 800ad18:	75fb      	strb	r3, [r7, #23]
      break;
 800ad1a:	e018      	b.n	800ad4e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f000 f81b 	bl	800ad58 <USBH_HandleControl>
 800ad22:	4603      	mov	r3, r0
 800ad24:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ad26:	7dfb      	ldrb	r3, [r7, #23]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d002      	beq.n	800ad32 <USBH_CtlReq+0x54>
 800ad2c:	7dfb      	ldrb	r3, [r7, #23]
 800ad2e:	2b03      	cmp	r3, #3
 800ad30:	d106      	bne.n	800ad40 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2201      	movs	r2, #1
 800ad36:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	761a      	strb	r2, [r3, #24]
      break;
 800ad3e:	e005      	b.n	800ad4c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ad40:	7dfb      	ldrb	r3, [r7, #23]
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d102      	bne.n	800ad4c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	709a      	strb	r2, [r3, #2]
      break;
 800ad4c:	bf00      	nop
  }
  return status;
 800ad4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3718      	adds	r7, #24
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b086      	sub	sp, #24
 800ad5c:	af02      	add	r7, sp, #8
 800ad5e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ad60:	2301      	movs	r3, #1
 800ad62:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad64:	2300      	movs	r3, #0
 800ad66:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	7e1b      	ldrb	r3, [r3, #24]
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	2b0a      	cmp	r3, #10
 800ad70:	f200 8156 	bhi.w	800b020 <USBH_HandleControl+0x2c8>
 800ad74:	a201      	add	r2, pc, #4	; (adr r2, 800ad7c <USBH_HandleControl+0x24>)
 800ad76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad7a:	bf00      	nop
 800ad7c:	0800ada9 	.word	0x0800ada9
 800ad80:	0800adc3 	.word	0x0800adc3
 800ad84:	0800ae2d 	.word	0x0800ae2d
 800ad88:	0800ae53 	.word	0x0800ae53
 800ad8c:	0800ae8b 	.word	0x0800ae8b
 800ad90:	0800aeb5 	.word	0x0800aeb5
 800ad94:	0800af07 	.word	0x0800af07
 800ad98:	0800af29 	.word	0x0800af29
 800ad9c:	0800af65 	.word	0x0800af65
 800ada0:	0800af8b 	.word	0x0800af8b
 800ada4:	0800afc9 	.word	0x0800afc9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f103 0110 	add.w	r1, r3, #16
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	795b      	ldrb	r3, [r3, #5]
 800adb2:	461a      	mov	r2, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f943 	bl	800b040 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2202      	movs	r2, #2
 800adbe:	761a      	strb	r2, [r3, #24]
      break;
 800adc0:	e139      	b.n	800b036 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	795b      	ldrb	r3, [r3, #5]
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fcc5 	bl	800b758 <USBH_LL_GetURBState>
 800adce:	4603      	mov	r3, r0
 800add0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800add2:	7bbb      	ldrb	r3, [r7, #14]
 800add4:	2b01      	cmp	r3, #1
 800add6:	d11e      	bne.n	800ae16 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	7c1b      	ldrb	r3, [r3, #16]
 800addc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ade0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	8adb      	ldrh	r3, [r3, #22]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00a      	beq.n	800ae00 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800adea:	7b7b      	ldrb	r3, [r7, #13]
 800adec:	2b80      	cmp	r3, #128	; 0x80
 800adee:	d103      	bne.n	800adf8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2203      	movs	r2, #3
 800adf4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800adf6:	e115      	b.n	800b024 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2205      	movs	r2, #5
 800adfc:	761a      	strb	r2, [r3, #24]
      break;
 800adfe:	e111      	b.n	800b024 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ae00:	7b7b      	ldrb	r3, [r7, #13]
 800ae02:	2b80      	cmp	r3, #128	; 0x80
 800ae04:	d103      	bne.n	800ae0e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2209      	movs	r2, #9
 800ae0a:	761a      	strb	r2, [r3, #24]
      break;
 800ae0c:	e10a      	b.n	800b024 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2207      	movs	r2, #7
 800ae12:	761a      	strb	r2, [r3, #24]
      break;
 800ae14:	e106      	b.n	800b024 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ae16:	7bbb      	ldrb	r3, [r7, #14]
 800ae18:	2b04      	cmp	r3, #4
 800ae1a:	d003      	beq.n	800ae24 <USBH_HandleControl+0xcc>
 800ae1c:	7bbb      	ldrb	r3, [r7, #14]
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	f040 8100 	bne.w	800b024 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	220b      	movs	r2, #11
 800ae28:	761a      	strb	r2, [r3, #24]
      break;
 800ae2a:	e0fb      	b.n	800b024 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6899      	ldr	r1, [r3, #8]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	899a      	ldrh	r2, [r3, #12]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	791b      	ldrb	r3, [r3, #4]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f93a 	bl	800b0be <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2204      	movs	r2, #4
 800ae4e:	761a      	strb	r2, [r3, #24]
      break;
 800ae50:	e0f1      	b.n	800b036 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	791b      	ldrb	r3, [r3, #4]
 800ae56:	4619      	mov	r1, r3
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fc7d 	bl	800b758 <USBH_LL_GetURBState>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ae62:	7bbb      	ldrb	r3, [r7, #14]
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d102      	bne.n	800ae6e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2209      	movs	r2, #9
 800ae6c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ae6e:	7bbb      	ldrb	r3, [r7, #14]
 800ae70:	2b05      	cmp	r3, #5
 800ae72:	d102      	bne.n	800ae7a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ae74:	2303      	movs	r3, #3
 800ae76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae78:	e0d6      	b.n	800b028 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ae7a:	7bbb      	ldrb	r3, [r7, #14]
 800ae7c:	2b04      	cmp	r3, #4
 800ae7e:	f040 80d3 	bne.w	800b028 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	220b      	movs	r2, #11
 800ae86:	761a      	strb	r2, [r3, #24]
      break;
 800ae88:	e0ce      	b.n	800b028 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6899      	ldr	r1, [r3, #8]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	899a      	ldrh	r2, [r3, #12]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	795b      	ldrb	r3, [r3, #5]
 800ae96:	2001      	movs	r0, #1
 800ae98:	9000      	str	r0, [sp, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f8ea 	bl	800b074 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2206      	movs	r2, #6
 800aeb0:	761a      	strb	r2, [r3, #24]
      break;
 800aeb2:	e0c0      	b.n	800b036 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	795b      	ldrb	r3, [r3, #5]
 800aeb8:	4619      	mov	r1, r3
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fc4c 	bl	800b758 <USBH_LL_GetURBState>
 800aec0:	4603      	mov	r3, r0
 800aec2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aec4:	7bbb      	ldrb	r3, [r7, #14]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d103      	bne.n	800aed2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2207      	movs	r2, #7
 800aece:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aed0:	e0ac      	b.n	800b02c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800aed2:	7bbb      	ldrb	r3, [r7, #14]
 800aed4:	2b05      	cmp	r3, #5
 800aed6:	d105      	bne.n	800aee4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	220c      	movs	r2, #12
 800aedc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800aede:	2303      	movs	r3, #3
 800aee0:	73fb      	strb	r3, [r7, #15]
      break;
 800aee2:	e0a3      	b.n	800b02c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aee4:	7bbb      	ldrb	r3, [r7, #14]
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d103      	bne.n	800aef2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2205      	movs	r2, #5
 800aeee:	761a      	strb	r2, [r3, #24]
      break;
 800aef0:	e09c      	b.n	800b02c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800aef2:	7bbb      	ldrb	r3, [r7, #14]
 800aef4:	2b04      	cmp	r3, #4
 800aef6:	f040 8099 	bne.w	800b02c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	220b      	movs	r2, #11
 800aefe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800af00:	2302      	movs	r3, #2
 800af02:	73fb      	strb	r3, [r7, #15]
      break;
 800af04:	e092      	b.n	800b02c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	791b      	ldrb	r3, [r3, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	2100      	movs	r1, #0
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f8d5 	bl	800b0be <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2208      	movs	r2, #8
 800af24:	761a      	strb	r2, [r3, #24]

      break;
 800af26:	e086      	b.n	800b036 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	791b      	ldrb	r3, [r3, #4]
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fc12 	bl	800b758 <USBH_LL_GetURBState>
 800af34:	4603      	mov	r3, r0
 800af36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800af38:	7bbb      	ldrb	r3, [r7, #14]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d105      	bne.n	800af4a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	220d      	movs	r2, #13
 800af42:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800af44:	2300      	movs	r3, #0
 800af46:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800af48:	e072      	b.n	800b030 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800af4a:	7bbb      	ldrb	r3, [r7, #14]
 800af4c:	2b04      	cmp	r3, #4
 800af4e:	d103      	bne.n	800af58 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	220b      	movs	r2, #11
 800af54:	761a      	strb	r2, [r3, #24]
      break;
 800af56:	e06b      	b.n	800b030 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800af58:	7bbb      	ldrb	r3, [r7, #14]
 800af5a:	2b05      	cmp	r3, #5
 800af5c:	d168      	bne.n	800b030 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800af5e:	2303      	movs	r3, #3
 800af60:	73fb      	strb	r3, [r7, #15]
      break;
 800af62:	e065      	b.n	800b030 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	795b      	ldrb	r3, [r3, #5]
 800af68:	2201      	movs	r2, #1
 800af6a:	9200      	str	r2, [sp, #0]
 800af6c:	2200      	movs	r2, #0
 800af6e:	2100      	movs	r1, #0
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f87f 	bl	800b074 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	220a      	movs	r2, #10
 800af86:	761a      	strb	r2, [r3, #24]
      break;
 800af88:	e055      	b.n	800b036 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	795b      	ldrb	r3, [r3, #5]
 800af8e:	4619      	mov	r1, r3
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fbe1 	bl	800b758 <USBH_LL_GetURBState>
 800af96:	4603      	mov	r3, r0
 800af98:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800af9a:	7bbb      	ldrb	r3, [r7, #14]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d105      	bne.n	800afac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	220d      	movs	r2, #13
 800afa8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800afaa:	e043      	b.n	800b034 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800afac:	7bbb      	ldrb	r3, [r7, #14]
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d103      	bne.n	800afba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2209      	movs	r2, #9
 800afb6:	761a      	strb	r2, [r3, #24]
      break;
 800afb8:	e03c      	b.n	800b034 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800afba:	7bbb      	ldrb	r3, [r7, #14]
 800afbc:	2b04      	cmp	r3, #4
 800afbe:	d139      	bne.n	800b034 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	220b      	movs	r2, #11
 800afc4:	761a      	strb	r2, [r3, #24]
      break;
 800afc6:	e035      	b.n	800b034 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	7e5b      	ldrb	r3, [r3, #25]
 800afcc:	3301      	adds	r3, #1
 800afce:	b2da      	uxtb	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	765a      	strb	r2, [r3, #25]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	7e5b      	ldrb	r3, [r3, #25]
 800afd8:	2b02      	cmp	r3, #2
 800afda:	d806      	bhi.n	800afea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2201      	movs	r2, #1
 800afe6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800afe8:	e025      	b.n	800b036 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aff0:	2106      	movs	r1, #6
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	795b      	ldrb	r3, [r3, #5]
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 f90c 	bl	800b220 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	791b      	ldrb	r3, [r3, #4]
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f906 	bl	800b220 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b01a:	2302      	movs	r3, #2
 800b01c:	73fb      	strb	r3, [r7, #15]
      break;
 800b01e:	e00a      	b.n	800b036 <USBH_HandleControl+0x2de>

    default:
      break;
 800b020:	bf00      	nop
 800b022:	e008      	b.n	800b036 <USBH_HandleControl+0x2de>
      break;
 800b024:	bf00      	nop
 800b026:	e006      	b.n	800b036 <USBH_HandleControl+0x2de>
      break;
 800b028:	bf00      	nop
 800b02a:	e004      	b.n	800b036 <USBH_HandleControl+0x2de>
      break;
 800b02c:	bf00      	nop
 800b02e:	e002      	b.n	800b036 <USBH_HandleControl+0x2de>
      break;
 800b030:	bf00      	nop
 800b032:	e000      	b.n	800b036 <USBH_HandleControl+0x2de>
      break;
 800b034:	bf00      	nop
  }

  return status;
 800b036:	7bfb      	ldrb	r3, [r7, #15]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b088      	sub	sp, #32
 800b044:	af04      	add	r7, sp, #16
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	4613      	mov	r3, r2
 800b04c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b04e:	79f9      	ldrb	r1, [r7, #7]
 800b050:	2300      	movs	r3, #0
 800b052:	9303      	str	r3, [sp, #12]
 800b054:	2308      	movs	r3, #8
 800b056:	9302      	str	r3, [sp, #8]
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	9301      	str	r3, [sp, #4]
 800b05c:	2300      	movs	r3, #0
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	2300      	movs	r3, #0
 800b062:	2200      	movs	r2, #0
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f000 fb46 	bl	800b6f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b088      	sub	sp, #32
 800b078:	af04      	add	r7, sp, #16
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	4611      	mov	r1, r2
 800b080:	461a      	mov	r2, r3
 800b082:	460b      	mov	r3, r1
 800b084:	80fb      	strh	r3, [r7, #6]
 800b086:	4613      	mov	r3, r2
 800b088:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b094:	2300      	movs	r3, #0
 800b096:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b098:	7979      	ldrb	r1, [r7, #5]
 800b09a:	7e3b      	ldrb	r3, [r7, #24]
 800b09c:	9303      	str	r3, [sp, #12]
 800b09e:	88fb      	ldrh	r3, [r7, #6]
 800b0a0:	9302      	str	r3, [sp, #8]
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	9301      	str	r3, [sp, #4]
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f000 fb21 	bl	800b6f6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b088      	sub	sp, #32
 800b0c2:	af04      	add	r7, sp, #16
 800b0c4:	60f8      	str	r0, [r7, #12]
 800b0c6:	60b9      	str	r1, [r7, #8]
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	80fb      	strh	r3, [r7, #6]
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b0d4:	7979      	ldrb	r1, [r7, #5]
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	9303      	str	r3, [sp, #12]
 800b0da:	88fb      	ldrh	r3, [r7, #6]
 800b0dc:	9302      	str	r3, [sp, #8]
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	9301      	str	r3, [sp, #4]
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	f000 fb03 	bl	800b6f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b0f0:	2300      	movs	r3, #0

}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b088      	sub	sp, #32
 800b0fe:	af04      	add	r7, sp, #16
 800b100:	60f8      	str	r0, [r7, #12]
 800b102:	60b9      	str	r1, [r7, #8]
 800b104:	4611      	mov	r1, r2
 800b106:	461a      	mov	r2, r3
 800b108:	460b      	mov	r3, r1
 800b10a:	80fb      	strh	r3, [r7, #6]
 800b10c:	4613      	mov	r3, r2
 800b10e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b116:	2b00      	cmp	r3, #0
 800b118:	d001      	beq.n	800b11e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b11a:	2300      	movs	r3, #0
 800b11c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b11e:	7979      	ldrb	r1, [r7, #5]
 800b120:	7e3b      	ldrb	r3, [r7, #24]
 800b122:	9303      	str	r3, [sp, #12]
 800b124:	88fb      	ldrh	r3, [r7, #6]
 800b126:	9302      	str	r3, [sp, #8]
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	9301      	str	r3, [sp, #4]
 800b12c:	2301      	movs	r3, #1
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	2302      	movs	r3, #2
 800b132:	2200      	movs	r2, #0
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f000 fade 	bl	800b6f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b13a:	2300      	movs	r3, #0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3710      	adds	r7, #16
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b088      	sub	sp, #32
 800b148:	af04      	add	r7, sp, #16
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	4611      	mov	r1, r2
 800b150:	461a      	mov	r2, r3
 800b152:	460b      	mov	r3, r1
 800b154:	80fb      	strh	r3, [r7, #6]
 800b156:	4613      	mov	r3, r2
 800b158:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b15a:	7979      	ldrb	r1, [r7, #5]
 800b15c:	2300      	movs	r3, #0
 800b15e:	9303      	str	r3, [sp, #12]
 800b160:	88fb      	ldrh	r3, [r7, #6]
 800b162:	9302      	str	r3, [sp, #8]
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	9301      	str	r3, [sp, #4]
 800b168:	2301      	movs	r3, #1
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	2302      	movs	r3, #2
 800b16e:	2201      	movs	r2, #1
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f000 fac0 	bl	800b6f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af04      	add	r7, sp, #16
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	4608      	mov	r0, r1
 800b18a:	4611      	mov	r1, r2
 800b18c:	461a      	mov	r2, r3
 800b18e:	4603      	mov	r3, r0
 800b190:	70fb      	strb	r3, [r7, #3]
 800b192:	460b      	mov	r3, r1
 800b194:	70bb      	strb	r3, [r7, #2]
 800b196:	4613      	mov	r3, r2
 800b198:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b19a:	7878      	ldrb	r0, [r7, #1]
 800b19c:	78ba      	ldrb	r2, [r7, #2]
 800b19e:	78f9      	ldrb	r1, [r7, #3]
 800b1a0:	8b3b      	ldrh	r3, [r7, #24]
 800b1a2:	9302      	str	r3, [sp, #8]
 800b1a4:	7d3b      	ldrb	r3, [r7, #20]
 800b1a6:	9301      	str	r3, [sp, #4]
 800b1a8:	7c3b      	ldrb	r3, [r7, #16]
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fa53 	bl	800b65a <USBH_LL_OpenPipe>

  return USBH_OK;
 800b1b4:	2300      	movs	r3, #0
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b082      	sub	sp, #8
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b1ca:	78fb      	ldrb	r3, [r7, #3]
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fa72 	bl	800b6b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3708      	adds	r7, #8
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b084      	sub	sp, #16
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f836 	bl	800b25c <USBH_GetFreePipe>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b1f4:	89fb      	ldrh	r3, [r7, #14]
 800b1f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d00a      	beq.n	800b214 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b1fe:	78fa      	ldrb	r2, [r7, #3]
 800b200:	89fb      	ldrh	r3, [r7, #14]
 800b202:	f003 030f 	and.w	r3, r3, #15
 800b206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b20a:	6879      	ldr	r1, [r7, #4]
 800b20c:	33e0      	adds	r3, #224	; 0xe0
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	440b      	add	r3, r1
 800b212:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b214:	89fb      	ldrh	r3, [r7, #14]
 800b216:	b2db      	uxtb	r3, r3
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	460b      	mov	r3, r1
 800b22a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b22c:	78fb      	ldrb	r3, [r7, #3]
 800b22e:	2b0a      	cmp	r3, #10
 800b230:	d80d      	bhi.n	800b24e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b232:	78fb      	ldrb	r3, [r7, #3]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	33e0      	adds	r3, #224	; 0xe0
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	78fb      	ldrb	r3, [r7, #3]
 800b240:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b244:	6879      	ldr	r1, [r7, #4]
 800b246:	33e0      	adds	r3, #224	; 0xe0
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	440b      	add	r3, r1
 800b24c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b264:	2300      	movs	r3, #0
 800b266:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b268:	2300      	movs	r3, #0
 800b26a:	73fb      	strb	r3, [r7, #15]
 800b26c:	e00f      	b.n	800b28e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b26e:	7bfb      	ldrb	r3, [r7, #15]
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	33e0      	adds	r3, #224	; 0xe0
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	4413      	add	r3, r2
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d102      	bne.n	800b288 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b282:	7bfb      	ldrb	r3, [r7, #15]
 800b284:	b29b      	uxth	r3, r3
 800b286:	e007      	b.n	800b298 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b288:	7bfb      	ldrb	r3, [r7, #15]
 800b28a:	3301      	adds	r3, #1
 800b28c:	73fb      	strb	r3, [r7, #15]
 800b28e:	7bfb      	ldrb	r3, [r7, #15]
 800b290:	2b0a      	cmp	r3, #10
 800b292:	d9ec      	bls.n	800b26e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b294:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	490e      	ldr	r1, [pc, #56]	; (800b2e4 <MX_USB_HOST_Init+0x40>)
 800b2ac:	480e      	ldr	r0, [pc, #56]	; (800b2e8 <MX_USB_HOST_Init+0x44>)
 800b2ae:	f7fe fca1 	bl	8009bf4 <USBH_Init>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d001      	beq.n	800b2bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b2b8:	f7f5 ffbc 	bl	8001234 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b2bc:	490b      	ldr	r1, [pc, #44]	; (800b2ec <MX_USB_HOST_Init+0x48>)
 800b2be:	480a      	ldr	r0, [pc, #40]	; (800b2e8 <MX_USB_HOST_Init+0x44>)
 800b2c0:	f7fe fd26 	bl	8009d10 <USBH_RegisterClass>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d001      	beq.n	800b2ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b2ca:	f7f5 ffb3 	bl	8001234 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b2ce:	4806      	ldr	r0, [pc, #24]	; (800b2e8 <MX_USB_HOST_Init+0x44>)
 800b2d0:	f7fe fdaa 	bl	8009e28 <USBH_Start>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b2da:	f7f5 ffab 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b2de:	bf00      	nop
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	0800b305 	.word	0x0800b305
 800b2e8:	20000588 	.word	0x20000588
 800b2ec:	2000001c 	.word	0x2000001c

0800b2f0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b2f4:	4802      	ldr	r0, [pc, #8]	; (800b300 <MX_USB_HOST_Process+0x10>)
 800b2f6:	f7fe fda7 	bl	8009e48 <USBH_Process>
}
 800b2fa:	bf00      	nop
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	20000588 	.word	0x20000588

0800b304 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	460b      	mov	r3, r1
 800b30e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b310:	78fb      	ldrb	r3, [r7, #3]
 800b312:	3b01      	subs	r3, #1
 800b314:	2b04      	cmp	r3, #4
 800b316:	d819      	bhi.n	800b34c <USBH_UserProcess+0x48>
 800b318:	a201      	add	r2, pc, #4	; (adr r2, 800b320 <USBH_UserProcess+0x1c>)
 800b31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b31e:	bf00      	nop
 800b320:	0800b34d 	.word	0x0800b34d
 800b324:	0800b33d 	.word	0x0800b33d
 800b328:	0800b34d 	.word	0x0800b34d
 800b32c:	0800b345 	.word	0x0800b345
 800b330:	0800b335 	.word	0x0800b335
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b334:	4b09      	ldr	r3, [pc, #36]	; (800b35c <USBH_UserProcess+0x58>)
 800b336:	2203      	movs	r2, #3
 800b338:	701a      	strb	r2, [r3, #0]
  break;
 800b33a:	e008      	b.n	800b34e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b33c:	4b07      	ldr	r3, [pc, #28]	; (800b35c <USBH_UserProcess+0x58>)
 800b33e:	2202      	movs	r2, #2
 800b340:	701a      	strb	r2, [r3, #0]
  break;
 800b342:	e004      	b.n	800b34e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b344:	4b05      	ldr	r3, [pc, #20]	; (800b35c <USBH_UserProcess+0x58>)
 800b346:	2201      	movs	r2, #1
 800b348:	701a      	strb	r2, [r3, #0]
  break;
 800b34a:	e000      	b.n	800b34e <USBH_UserProcess+0x4a>

  default:
  break;
 800b34c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b34e:	bf00      	nop
 800b350:	370c      	adds	r7, #12
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	200000ca 	.word	0x200000ca

0800b360 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b08a      	sub	sp, #40	; 0x28
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b368:	f107 0314 	add.w	r3, r7, #20
 800b36c:	2200      	movs	r2, #0
 800b36e:	601a      	str	r2, [r3, #0]
 800b370:	605a      	str	r2, [r3, #4]
 800b372:	609a      	str	r2, [r3, #8]
 800b374:	60da      	str	r2, [r3, #12]
 800b376:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b380:	d147      	bne.n	800b412 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b382:	2300      	movs	r3, #0
 800b384:	613b      	str	r3, [r7, #16]
 800b386:	4b25      	ldr	r3, [pc, #148]	; (800b41c <HAL_HCD_MspInit+0xbc>)
 800b388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b38a:	4a24      	ldr	r2, [pc, #144]	; (800b41c <HAL_HCD_MspInit+0xbc>)
 800b38c:	f043 0301 	orr.w	r3, r3, #1
 800b390:	6313      	str	r3, [r2, #48]	; 0x30
 800b392:	4b22      	ldr	r3, [pc, #136]	; (800b41c <HAL_HCD_MspInit+0xbc>)
 800b394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b396:	f003 0301 	and.w	r3, r3, #1
 800b39a:	613b      	str	r3, [r7, #16]
 800b39c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b39e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b3ac:	f107 0314 	add.w	r3, r7, #20
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	481b      	ldr	r0, [pc, #108]	; (800b420 <HAL_HCD_MspInit+0xc0>)
 800b3b4:	f7f7 fb92 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b3b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b3bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3be:	2302      	movs	r3, #2
 800b3c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b3ca:	230a      	movs	r3, #10
 800b3cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b3ce:	f107 0314 	add.w	r3, r7, #20
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	4812      	ldr	r0, [pc, #72]	; (800b420 <HAL_HCD_MspInit+0xc0>)
 800b3d6:	f7f7 fb81 	bl	8002adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b3da:	4b10      	ldr	r3, [pc, #64]	; (800b41c <HAL_HCD_MspInit+0xbc>)
 800b3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3de:	4a0f      	ldr	r2, [pc, #60]	; (800b41c <HAL_HCD_MspInit+0xbc>)
 800b3e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e4:	6353      	str	r3, [r2, #52]	; 0x34
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	60fb      	str	r3, [r7, #12]
 800b3ea:	4b0c      	ldr	r3, [pc, #48]	; (800b41c <HAL_HCD_MspInit+0xbc>)
 800b3ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ee:	4a0b      	ldr	r2, [pc, #44]	; (800b41c <HAL_HCD_MspInit+0xbc>)
 800b3f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b3f4:	6453      	str	r3, [r2, #68]	; 0x44
 800b3f6:	4b09      	ldr	r3, [pc, #36]	; (800b41c <HAL_HCD_MspInit+0xbc>)
 800b3f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3fe:	60fb      	str	r3, [r7, #12]
 800b400:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b402:	2200      	movs	r2, #0
 800b404:	2100      	movs	r1, #0
 800b406:	2043      	movs	r0, #67	; 0x43
 800b408:	f7f7 fb31 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b40c:	2043      	movs	r0, #67	; 0x43
 800b40e:	f7f7 fb4a 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b412:	bf00      	nop
 800b414:	3728      	adds	r7, #40	; 0x28
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	40023800 	.word	0x40023800
 800b420:	40020000 	.word	0x40020000

0800b424 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b432:	4618      	mov	r0, r3
 800b434:	f7ff f8db 	bl	800a5ee <USBH_LL_IncTimer>
}
 800b438:	bf00      	nop
 800b43a:	3708      	adds	r7, #8
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b44e:	4618      	mov	r0, r3
 800b450:	f7ff f913 	bl	800a67a <USBH_LL_Connect>
}
 800b454:	bf00      	nop
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7ff f91c 	bl	800a6a8 <USBH_LL_Disconnect>
}
 800b470:	bf00      	nop
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	460b      	mov	r3, r1
 800b482:	70fb      	strb	r3, [r7, #3]
 800b484:	4613      	mov	r3, r2
 800b486:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7ff f8cd 	bl	800a642 <USBH_LL_PortEnabled>
}
 800b4a8:	bf00      	nop
 800b4aa:	3708      	adds	r7, #8
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7ff f8cd 	bl	800a65e <USBH_LL_PortDisabled>
}
 800b4c4:	bf00      	nop
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d12a      	bne.n	800b534 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b4de:	4a18      	ldr	r2, [pc, #96]	; (800b540 <USBH_LL_Init+0x74>)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4a15      	ldr	r2, [pc, #84]	; (800b540 <USBH_LL_Init+0x74>)
 800b4ea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b4ee:	4b14      	ldr	r3, [pc, #80]	; (800b540 <USBH_LL_Init+0x74>)
 800b4f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b4f4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b4f6:	4b12      	ldr	r3, [pc, #72]	; (800b540 <USBH_LL_Init+0x74>)
 800b4f8:	2208      	movs	r2, #8
 800b4fa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b4fc:	4b10      	ldr	r3, [pc, #64]	; (800b540 <USBH_LL_Init+0x74>)
 800b4fe:	2201      	movs	r2, #1
 800b500:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b502:	4b0f      	ldr	r3, [pc, #60]	; (800b540 <USBH_LL_Init+0x74>)
 800b504:	2200      	movs	r2, #0
 800b506:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b508:	4b0d      	ldr	r3, [pc, #52]	; (800b540 <USBH_LL_Init+0x74>)
 800b50a:	2202      	movs	r2, #2
 800b50c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b50e:	4b0c      	ldr	r3, [pc, #48]	; (800b540 <USBH_LL_Init+0x74>)
 800b510:	2200      	movs	r2, #0
 800b512:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b514:	480a      	ldr	r0, [pc, #40]	; (800b540 <USBH_LL_Init+0x74>)
 800b516:	f7f7 fcc8 	bl	8002eaa <HAL_HCD_Init>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d001      	beq.n	800b524 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b520:	f7f5 fe88 	bl	8001234 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b524:	4806      	ldr	r0, [pc, #24]	; (800b540 <USBH_LL_Init+0x74>)
 800b526:	f7f8 f8a5 	bl	8003674 <HAL_HCD_GetCurrentFrame>
 800b52a:	4603      	mov	r3, r0
 800b52c:	4619      	mov	r1, r3
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f7ff f84e 	bl	800a5d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	20000960 	.word	0x20000960

0800b544 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b54c:	2300      	movs	r3, #0
 800b54e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b550:	2300      	movs	r3, #0
 800b552:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7f8 f814 	bl	8003588 <HAL_HCD_Start>
 800b560:	4603      	mov	r3, r0
 800b562:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b564:	7bfb      	ldrb	r3, [r7, #15]
 800b566:	4618      	mov	r0, r3
 800b568:	f000 f95c 	bl	800b824 <USBH_Get_USB_Status>
 800b56c:	4603      	mov	r3, r0
 800b56e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b570:	7bbb      	ldrb	r3, [r7, #14]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b084      	sub	sp, #16
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b582:	2300      	movs	r3, #0
 800b584:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b586:	2300      	movs	r3, #0
 800b588:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b590:	4618      	mov	r0, r3
 800b592:	f7f8 f81c 	bl	80035ce <HAL_HCD_Stop>
 800b596:	4603      	mov	r3, r0
 800b598:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b59a:	7bfb      	ldrb	r3, [r7, #15]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f000 f941 	bl	800b824 <USBH_Get_USB_Status>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7f8 f864 	bl	8003690 <HAL_HCD_GetCurrentSpeed>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d00c      	beq.n	800b5e8 <USBH_LL_GetSpeed+0x38>
 800b5ce:	2b02      	cmp	r3, #2
 800b5d0:	d80d      	bhi.n	800b5ee <USBH_LL_GetSpeed+0x3e>
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d002      	beq.n	800b5dc <USBH_LL_GetSpeed+0x2c>
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d003      	beq.n	800b5e2 <USBH_LL_GetSpeed+0x32>
 800b5da:	e008      	b.n	800b5ee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	73fb      	strb	r3, [r7, #15]
    break;
 800b5e0:	e008      	b.n	800b5f4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b5e6:	e005      	b.n	800b5f4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b5ec:	e002      	b.n	800b5f4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b5f2:	bf00      	nop
  }
  return  speed;
 800b5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b084      	sub	sp, #16
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b606:	2300      	movs	r3, #0
 800b608:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b60a:	2300      	movs	r3, #0
 800b60c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b614:	4618      	mov	r0, r3
 800b616:	f7f7 fff7 	bl	8003608 <HAL_HCD_ResetPort>
 800b61a:	4603      	mov	r3, r0
 800b61c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b61e:	7bfb      	ldrb	r3, [r7, #15]
 800b620:	4618      	mov	r0, r3
 800b622:	f000 f8ff 	bl	800b824 <USBH_Get_USB_Status>
 800b626:	4603      	mov	r3, r0
 800b628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b62a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	460b      	mov	r3, r1
 800b63e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b646:	78fa      	ldrb	r2, [r7, #3]
 800b648:	4611      	mov	r1, r2
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7f7 fffe 	bl	800364c <HAL_HCD_HC_GetXferCount>
 800b650:	4603      	mov	r3, r0
}
 800b652:	4618      	mov	r0, r3
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b65a:	b590      	push	{r4, r7, lr}
 800b65c:	b089      	sub	sp, #36	; 0x24
 800b65e:	af04      	add	r7, sp, #16
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	4608      	mov	r0, r1
 800b664:	4611      	mov	r1, r2
 800b666:	461a      	mov	r2, r3
 800b668:	4603      	mov	r3, r0
 800b66a:	70fb      	strb	r3, [r7, #3]
 800b66c:	460b      	mov	r3, r1
 800b66e:	70bb      	strb	r3, [r7, #2]
 800b670:	4613      	mov	r3, r2
 800b672:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b674:	2300      	movs	r3, #0
 800b676:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b678:	2300      	movs	r3, #0
 800b67a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b682:	787c      	ldrb	r4, [r7, #1]
 800b684:	78ba      	ldrb	r2, [r7, #2]
 800b686:	78f9      	ldrb	r1, [r7, #3]
 800b688:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b68a:	9302      	str	r3, [sp, #8]
 800b68c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b690:	9301      	str	r3, [sp, #4]
 800b692:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	4623      	mov	r3, r4
 800b69a:	f7f7 fc68 	bl	8002f6e <HAL_HCD_HC_Init>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b6a2:	7bfb      	ldrb	r3, [r7, #15]
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f000 f8bd 	bl	800b824 <USBH_Get_USB_Status>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3714      	adds	r7, #20
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd90      	pop	{r4, r7, pc}

0800b6b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b6d2:	78fa      	ldrb	r2, [r7, #3]
 800b6d4:	4611      	mov	r1, r2
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7f7 fcd8 	bl	800308c <HAL_HCD_HC_Halt>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b6e0:	7bfb      	ldrb	r3, [r7, #15]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f000 f89e 	bl	800b824 <USBH_Get_USB_Status>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b6f6:	b590      	push	{r4, r7, lr}
 800b6f8:	b089      	sub	sp, #36	; 0x24
 800b6fa:	af04      	add	r7, sp, #16
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	4608      	mov	r0, r1
 800b700:	4611      	mov	r1, r2
 800b702:	461a      	mov	r2, r3
 800b704:	4603      	mov	r3, r0
 800b706:	70fb      	strb	r3, [r7, #3]
 800b708:	460b      	mov	r3, r1
 800b70a:	70bb      	strb	r3, [r7, #2]
 800b70c:	4613      	mov	r3, r2
 800b70e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b710:	2300      	movs	r3, #0
 800b712:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b714:	2300      	movs	r3, #0
 800b716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b71e:	787c      	ldrb	r4, [r7, #1]
 800b720:	78ba      	ldrb	r2, [r7, #2]
 800b722:	78f9      	ldrb	r1, [r7, #3]
 800b724:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b728:	9303      	str	r3, [sp, #12]
 800b72a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b72c:	9302      	str	r3, [sp, #8]
 800b72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b730:	9301      	str	r3, [sp, #4]
 800b732:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	4623      	mov	r3, r4
 800b73a:	f7f7 fccb 	bl	80030d4 <HAL_HCD_HC_SubmitRequest>
 800b73e:	4603      	mov	r3, r0
 800b740:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b742:	7bfb      	ldrb	r3, [r7, #15]
 800b744:	4618      	mov	r0, r3
 800b746:	f000 f86d 	bl	800b824 <USBH_Get_USB_Status>
 800b74a:	4603      	mov	r3, r0
 800b74c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b74e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3714      	adds	r7, #20
 800b754:	46bd      	mov	sp, r7
 800b756:	bd90      	pop	{r4, r7, pc}

0800b758 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	460b      	mov	r3, r1
 800b762:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b76a:	78fa      	ldrb	r2, [r7, #3]
 800b76c:	4611      	mov	r1, r2
 800b76e:	4618      	mov	r0, r3
 800b770:	f7f7 ff58 	bl	8003624 <HAL_HCD_HC_GetURBState>
 800b774:	4603      	mov	r3, r0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b082      	sub	sp, #8
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	460b      	mov	r3, r1
 800b788:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b790:	2b01      	cmp	r3, #1
 800b792:	d103      	bne.n	800b79c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b794:	78fb      	ldrb	r3, [r7, #3]
 800b796:	4618      	mov	r0, r3
 800b798:	f000 f870 	bl	800b87c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b79c:	20c8      	movs	r0, #200	; 0xc8
 800b79e:	f7f7 f867 	bl	8002870 <HAL_Delay>
  return USBH_OK;
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	70fb      	strb	r3, [r7, #3]
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b7c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b7c4:	78fb      	ldrb	r3, [r7, #3]
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	212c      	movs	r1, #44	; 0x2c
 800b7ca:	fb01 f303 	mul.w	r3, r1, r3
 800b7ce:	4413      	add	r3, r2
 800b7d0:	333b      	adds	r3, #59	; 0x3b
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d009      	beq.n	800b7ec <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b7d8:	78fb      	ldrb	r3, [r7, #3]
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	212c      	movs	r1, #44	; 0x2c
 800b7de:	fb01 f303 	mul.w	r3, r1, r3
 800b7e2:	4413      	add	r3, r2
 800b7e4:	3354      	adds	r3, #84	; 0x54
 800b7e6:	78ba      	ldrb	r2, [r7, #2]
 800b7e8:	701a      	strb	r2, [r3, #0]
 800b7ea:	e008      	b.n	800b7fe <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b7ec:	78fb      	ldrb	r3, [r7, #3]
 800b7ee:	68fa      	ldr	r2, [r7, #12]
 800b7f0:	212c      	movs	r1, #44	; 0x2c
 800b7f2:	fb01 f303 	mul.w	r3, r1, r3
 800b7f6:	4413      	add	r3, r2
 800b7f8:	3355      	adds	r3, #85	; 0x55
 800b7fa:	78ba      	ldrb	r2, [r7, #2]
 800b7fc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3714      	adds	r7, #20
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f7f7 f82b 	bl	8002870 <HAL_Delay>
}
 800b81a:	bf00      	nop
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
	...

0800b824 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	4603      	mov	r3, r0
 800b82c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b82e:	2300      	movs	r3, #0
 800b830:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b832:	79fb      	ldrb	r3, [r7, #7]
 800b834:	2b03      	cmp	r3, #3
 800b836:	d817      	bhi.n	800b868 <USBH_Get_USB_Status+0x44>
 800b838:	a201      	add	r2, pc, #4	; (adr r2, 800b840 <USBH_Get_USB_Status+0x1c>)
 800b83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b83e:	bf00      	nop
 800b840:	0800b851 	.word	0x0800b851
 800b844:	0800b857 	.word	0x0800b857
 800b848:	0800b85d 	.word	0x0800b85d
 800b84c:	0800b863 	.word	0x0800b863
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b850:	2300      	movs	r3, #0
 800b852:	73fb      	strb	r3, [r7, #15]
    break;
 800b854:	e00b      	b.n	800b86e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b856:	2302      	movs	r3, #2
 800b858:	73fb      	strb	r3, [r7, #15]
    break;
 800b85a:	e008      	b.n	800b86e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b85c:	2301      	movs	r3, #1
 800b85e:	73fb      	strb	r3, [r7, #15]
    break;
 800b860:	e005      	b.n	800b86e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b862:	2302      	movs	r3, #2
 800b864:	73fb      	strb	r3, [r7, #15]
    break;
 800b866:	e002      	b.n	800b86e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b868:	2302      	movs	r3, #2
 800b86a:	73fb      	strb	r3, [r7, #15]
    break;
 800b86c:	bf00      	nop
  }
  return usb_status;
 800b86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b870:	4618      	mov	r0, r3
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	4603      	mov	r3, r0
 800b884:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b886:	79fb      	ldrb	r3, [r7, #7]
 800b888:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b88a:	79fb      	ldrb	r3, [r7, #7]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d102      	bne.n	800b896 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b890:	2301      	movs	r3, #1
 800b892:	73fb      	strb	r3, [r7, #15]
 800b894:	e001      	b.n	800b89a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b896:	2300      	movs	r3, #0
 800b898:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b89a:	7bfb      	ldrb	r3, [r7, #15]
 800b89c:	461a      	mov	r2, r3
 800b89e:	2101      	movs	r1, #1
 800b8a0:	4803      	ldr	r0, [pc, #12]	; (800b8b0 <MX_DriverVbusFS+0x34>)
 800b8a2:	f7f7 facf 	bl	8002e44 <HAL_GPIO_WritePin>
}
 800b8a6:	bf00      	nop
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	40020800 	.word	0x40020800

0800b8b4 <__errno>:
 800b8b4:	4b01      	ldr	r3, [pc, #4]	; (800b8bc <__errno+0x8>)
 800b8b6:	6818      	ldr	r0, [r3, #0]
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	2000003c 	.word	0x2000003c

0800b8c0 <__libc_init_array>:
 800b8c0:	b570      	push	{r4, r5, r6, lr}
 800b8c2:	4d0d      	ldr	r5, [pc, #52]	; (800b8f8 <__libc_init_array+0x38>)
 800b8c4:	4c0d      	ldr	r4, [pc, #52]	; (800b8fc <__libc_init_array+0x3c>)
 800b8c6:	1b64      	subs	r4, r4, r5
 800b8c8:	10a4      	asrs	r4, r4, #2
 800b8ca:	2600      	movs	r6, #0
 800b8cc:	42a6      	cmp	r6, r4
 800b8ce:	d109      	bne.n	800b8e4 <__libc_init_array+0x24>
 800b8d0:	4d0b      	ldr	r5, [pc, #44]	; (800b900 <__libc_init_array+0x40>)
 800b8d2:	4c0c      	ldr	r4, [pc, #48]	; (800b904 <__libc_init_array+0x44>)
 800b8d4:	f000 f8f8 	bl	800bac8 <_init>
 800b8d8:	1b64      	subs	r4, r4, r5
 800b8da:	10a4      	asrs	r4, r4, #2
 800b8dc:	2600      	movs	r6, #0
 800b8de:	42a6      	cmp	r6, r4
 800b8e0:	d105      	bne.n	800b8ee <__libc_init_array+0x2e>
 800b8e2:	bd70      	pop	{r4, r5, r6, pc}
 800b8e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8e8:	4798      	blx	r3
 800b8ea:	3601      	adds	r6, #1
 800b8ec:	e7ee      	b.n	800b8cc <__libc_init_array+0xc>
 800b8ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8f2:	4798      	blx	r3
 800b8f4:	3601      	adds	r6, #1
 800b8f6:	e7f2      	b.n	800b8de <__libc_init_array+0x1e>
 800b8f8:	0800df74 	.word	0x0800df74
 800b8fc:	0800df74 	.word	0x0800df74
 800b900:	0800df74 	.word	0x0800df74
 800b904:	0800df78 	.word	0x0800df78

0800b908 <malloc>:
 800b908:	4b02      	ldr	r3, [pc, #8]	; (800b914 <malloc+0xc>)
 800b90a:	4601      	mov	r1, r0
 800b90c:	6818      	ldr	r0, [r3, #0]
 800b90e:	f000 b863 	b.w	800b9d8 <_malloc_r>
 800b912:	bf00      	nop
 800b914:	2000003c 	.word	0x2000003c

0800b918 <free>:
 800b918:	4b02      	ldr	r3, [pc, #8]	; (800b924 <free+0xc>)
 800b91a:	4601      	mov	r1, r0
 800b91c:	6818      	ldr	r0, [r3, #0]
 800b91e:	f000 b80b 	b.w	800b938 <_free_r>
 800b922:	bf00      	nop
 800b924:	2000003c 	.word	0x2000003c

0800b928 <memset>:
 800b928:	4402      	add	r2, r0
 800b92a:	4603      	mov	r3, r0
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d100      	bne.n	800b932 <memset+0xa>
 800b930:	4770      	bx	lr
 800b932:	f803 1b01 	strb.w	r1, [r3], #1
 800b936:	e7f9      	b.n	800b92c <memset+0x4>

0800b938 <_free_r>:
 800b938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b93a:	2900      	cmp	r1, #0
 800b93c:	d048      	beq.n	800b9d0 <_free_r+0x98>
 800b93e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b942:	9001      	str	r0, [sp, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	f1a1 0404 	sub.w	r4, r1, #4
 800b94a:	bfb8      	it	lt
 800b94c:	18e4      	addlt	r4, r4, r3
 800b94e:	f000 f8ad 	bl	800baac <__malloc_lock>
 800b952:	4a20      	ldr	r2, [pc, #128]	; (800b9d4 <_free_r+0x9c>)
 800b954:	9801      	ldr	r0, [sp, #4]
 800b956:	6813      	ldr	r3, [r2, #0]
 800b958:	4615      	mov	r5, r2
 800b95a:	b933      	cbnz	r3, 800b96a <_free_r+0x32>
 800b95c:	6063      	str	r3, [r4, #4]
 800b95e:	6014      	str	r4, [r2, #0]
 800b960:	b003      	add	sp, #12
 800b962:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b966:	f000 b8a7 	b.w	800bab8 <__malloc_unlock>
 800b96a:	42a3      	cmp	r3, r4
 800b96c:	d90b      	bls.n	800b986 <_free_r+0x4e>
 800b96e:	6821      	ldr	r1, [r4, #0]
 800b970:	1862      	adds	r2, r4, r1
 800b972:	4293      	cmp	r3, r2
 800b974:	bf04      	itt	eq
 800b976:	681a      	ldreq	r2, [r3, #0]
 800b978:	685b      	ldreq	r3, [r3, #4]
 800b97a:	6063      	str	r3, [r4, #4]
 800b97c:	bf04      	itt	eq
 800b97e:	1852      	addeq	r2, r2, r1
 800b980:	6022      	streq	r2, [r4, #0]
 800b982:	602c      	str	r4, [r5, #0]
 800b984:	e7ec      	b.n	800b960 <_free_r+0x28>
 800b986:	461a      	mov	r2, r3
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	b10b      	cbz	r3, 800b990 <_free_r+0x58>
 800b98c:	42a3      	cmp	r3, r4
 800b98e:	d9fa      	bls.n	800b986 <_free_r+0x4e>
 800b990:	6811      	ldr	r1, [r2, #0]
 800b992:	1855      	adds	r5, r2, r1
 800b994:	42a5      	cmp	r5, r4
 800b996:	d10b      	bne.n	800b9b0 <_free_r+0x78>
 800b998:	6824      	ldr	r4, [r4, #0]
 800b99a:	4421      	add	r1, r4
 800b99c:	1854      	adds	r4, r2, r1
 800b99e:	42a3      	cmp	r3, r4
 800b9a0:	6011      	str	r1, [r2, #0]
 800b9a2:	d1dd      	bne.n	800b960 <_free_r+0x28>
 800b9a4:	681c      	ldr	r4, [r3, #0]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	6053      	str	r3, [r2, #4]
 800b9aa:	4421      	add	r1, r4
 800b9ac:	6011      	str	r1, [r2, #0]
 800b9ae:	e7d7      	b.n	800b960 <_free_r+0x28>
 800b9b0:	d902      	bls.n	800b9b8 <_free_r+0x80>
 800b9b2:	230c      	movs	r3, #12
 800b9b4:	6003      	str	r3, [r0, #0]
 800b9b6:	e7d3      	b.n	800b960 <_free_r+0x28>
 800b9b8:	6825      	ldr	r5, [r4, #0]
 800b9ba:	1961      	adds	r1, r4, r5
 800b9bc:	428b      	cmp	r3, r1
 800b9be:	bf04      	itt	eq
 800b9c0:	6819      	ldreq	r1, [r3, #0]
 800b9c2:	685b      	ldreq	r3, [r3, #4]
 800b9c4:	6063      	str	r3, [r4, #4]
 800b9c6:	bf04      	itt	eq
 800b9c8:	1949      	addeq	r1, r1, r5
 800b9ca:	6021      	streq	r1, [r4, #0]
 800b9cc:	6054      	str	r4, [r2, #4]
 800b9ce:	e7c7      	b.n	800b960 <_free_r+0x28>
 800b9d0:	b003      	add	sp, #12
 800b9d2:	bd30      	pop	{r4, r5, pc}
 800b9d4:	200000cc 	.word	0x200000cc

0800b9d8 <_malloc_r>:
 800b9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9da:	1ccd      	adds	r5, r1, #3
 800b9dc:	f025 0503 	bic.w	r5, r5, #3
 800b9e0:	3508      	adds	r5, #8
 800b9e2:	2d0c      	cmp	r5, #12
 800b9e4:	bf38      	it	cc
 800b9e6:	250c      	movcc	r5, #12
 800b9e8:	2d00      	cmp	r5, #0
 800b9ea:	4606      	mov	r6, r0
 800b9ec:	db01      	blt.n	800b9f2 <_malloc_r+0x1a>
 800b9ee:	42a9      	cmp	r1, r5
 800b9f0:	d903      	bls.n	800b9fa <_malloc_r+0x22>
 800b9f2:	230c      	movs	r3, #12
 800b9f4:	6033      	str	r3, [r6, #0]
 800b9f6:	2000      	movs	r0, #0
 800b9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9fa:	f000 f857 	bl	800baac <__malloc_lock>
 800b9fe:	4921      	ldr	r1, [pc, #132]	; (800ba84 <_malloc_r+0xac>)
 800ba00:	680a      	ldr	r2, [r1, #0]
 800ba02:	4614      	mov	r4, r2
 800ba04:	b99c      	cbnz	r4, 800ba2e <_malloc_r+0x56>
 800ba06:	4f20      	ldr	r7, [pc, #128]	; (800ba88 <_malloc_r+0xb0>)
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	b923      	cbnz	r3, 800ba16 <_malloc_r+0x3e>
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	4630      	mov	r0, r6
 800ba10:	f000 f83c 	bl	800ba8c <_sbrk_r>
 800ba14:	6038      	str	r0, [r7, #0]
 800ba16:	4629      	mov	r1, r5
 800ba18:	4630      	mov	r0, r6
 800ba1a:	f000 f837 	bl	800ba8c <_sbrk_r>
 800ba1e:	1c43      	adds	r3, r0, #1
 800ba20:	d123      	bne.n	800ba6a <_malloc_r+0x92>
 800ba22:	230c      	movs	r3, #12
 800ba24:	6033      	str	r3, [r6, #0]
 800ba26:	4630      	mov	r0, r6
 800ba28:	f000 f846 	bl	800bab8 <__malloc_unlock>
 800ba2c:	e7e3      	b.n	800b9f6 <_malloc_r+0x1e>
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	1b5b      	subs	r3, r3, r5
 800ba32:	d417      	bmi.n	800ba64 <_malloc_r+0x8c>
 800ba34:	2b0b      	cmp	r3, #11
 800ba36:	d903      	bls.n	800ba40 <_malloc_r+0x68>
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	441c      	add	r4, r3
 800ba3c:	6025      	str	r5, [r4, #0]
 800ba3e:	e004      	b.n	800ba4a <_malloc_r+0x72>
 800ba40:	6863      	ldr	r3, [r4, #4]
 800ba42:	42a2      	cmp	r2, r4
 800ba44:	bf0c      	ite	eq
 800ba46:	600b      	streq	r3, [r1, #0]
 800ba48:	6053      	strne	r3, [r2, #4]
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f000 f834 	bl	800bab8 <__malloc_unlock>
 800ba50:	f104 000b 	add.w	r0, r4, #11
 800ba54:	1d23      	adds	r3, r4, #4
 800ba56:	f020 0007 	bic.w	r0, r0, #7
 800ba5a:	1ac2      	subs	r2, r0, r3
 800ba5c:	d0cc      	beq.n	800b9f8 <_malloc_r+0x20>
 800ba5e:	1a1b      	subs	r3, r3, r0
 800ba60:	50a3      	str	r3, [r4, r2]
 800ba62:	e7c9      	b.n	800b9f8 <_malloc_r+0x20>
 800ba64:	4622      	mov	r2, r4
 800ba66:	6864      	ldr	r4, [r4, #4]
 800ba68:	e7cc      	b.n	800ba04 <_malloc_r+0x2c>
 800ba6a:	1cc4      	adds	r4, r0, #3
 800ba6c:	f024 0403 	bic.w	r4, r4, #3
 800ba70:	42a0      	cmp	r0, r4
 800ba72:	d0e3      	beq.n	800ba3c <_malloc_r+0x64>
 800ba74:	1a21      	subs	r1, r4, r0
 800ba76:	4630      	mov	r0, r6
 800ba78:	f000 f808 	bl	800ba8c <_sbrk_r>
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	d1dd      	bne.n	800ba3c <_malloc_r+0x64>
 800ba80:	e7cf      	b.n	800ba22 <_malloc_r+0x4a>
 800ba82:	bf00      	nop
 800ba84:	200000cc 	.word	0x200000cc
 800ba88:	200000d0 	.word	0x200000d0

0800ba8c <_sbrk_r>:
 800ba8c:	b538      	push	{r3, r4, r5, lr}
 800ba8e:	4d06      	ldr	r5, [pc, #24]	; (800baa8 <_sbrk_r+0x1c>)
 800ba90:	2300      	movs	r3, #0
 800ba92:	4604      	mov	r4, r0
 800ba94:	4608      	mov	r0, r1
 800ba96:	602b      	str	r3, [r5, #0]
 800ba98:	f7f5 fee0 	bl	800185c <_sbrk>
 800ba9c:	1c43      	adds	r3, r0, #1
 800ba9e:	d102      	bne.n	800baa6 <_sbrk_r+0x1a>
 800baa0:	682b      	ldr	r3, [r5, #0]
 800baa2:	b103      	cbz	r3, 800baa6 <_sbrk_r+0x1a>
 800baa4:	6023      	str	r3, [r4, #0]
 800baa6:	bd38      	pop	{r3, r4, r5, pc}
 800baa8:	20000c64 	.word	0x20000c64

0800baac <__malloc_lock>:
 800baac:	4801      	ldr	r0, [pc, #4]	; (800bab4 <__malloc_lock+0x8>)
 800baae:	f000 b809 	b.w	800bac4 <__retarget_lock_acquire_recursive>
 800bab2:	bf00      	nop
 800bab4:	20000c6c 	.word	0x20000c6c

0800bab8 <__malloc_unlock>:
 800bab8:	4801      	ldr	r0, [pc, #4]	; (800bac0 <__malloc_unlock+0x8>)
 800baba:	f000 b804 	b.w	800bac6 <__retarget_lock_release_recursive>
 800babe:	bf00      	nop
 800bac0:	20000c6c 	.word	0x20000c6c

0800bac4 <__retarget_lock_acquire_recursive>:
 800bac4:	4770      	bx	lr

0800bac6 <__retarget_lock_release_recursive>:
 800bac6:	4770      	bx	lr

0800bac8 <_init>:
 800bac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baca:	bf00      	nop
 800bacc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bace:	bc08      	pop	{r3}
 800bad0:	469e      	mov	lr, r3
 800bad2:	4770      	bx	lr

0800bad4 <_fini>:
 800bad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad6:	bf00      	nop
 800bad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bada:	bc08      	pop	{r3}
 800badc:	469e      	mov	lr, r3
 800bade:	4770      	bx	lr
