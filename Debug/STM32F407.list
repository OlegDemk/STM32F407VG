
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb0c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800cc98  0800cc98  0001cc98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd28  0800cd28  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd28  0800cd28  0001cd28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd30  0800cd30  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd30  0800cd30  0001cd30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd34  0800cd34  0001cd34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  0800cd38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e4  20000138  0800ce70  00020138  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b1c  0800ce70  00020b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026ad8  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050c5  00000000  00000000  00046c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  0004bd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001748  00000000  00000000  0004d640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ff0  00000000  00000000  0004ed88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000247cf  00000000  00000000  00075d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d693b  00000000  00000000  0009a547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170e82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e80  00000000  00000000  00170ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000138 	.word	0x20000138
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800cc7c 	.word	0x0800cc7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000013c 	.word	0x2000013c
 80001c4:	0800cc7c 	.word	0x0800cc7c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_uldivmod>:
 8000aa0:	b953      	cbnz	r3, 8000ab8 <__aeabi_uldivmod+0x18>
 8000aa2:	b94a      	cbnz	r2, 8000ab8 <__aeabi_uldivmod+0x18>
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	bf08      	it	eq
 8000aa8:	2800      	cmpeq	r0, #0
 8000aaa:	bf1c      	itt	ne
 8000aac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ab0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ab4:	f000 b96e 	b.w	8000d94 <__aeabi_idiv0>
 8000ab8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000abc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac0:	f000 f806 	bl	8000ad0 <__udivmoddi4>
 8000ac4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000acc:	b004      	add	sp, #16
 8000ace:	4770      	bx	lr

08000ad0 <__udivmoddi4>:
 8000ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad4:	9d08      	ldr	r5, [sp, #32]
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	468c      	mov	ip, r1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f040 8083 	bne.w	8000be6 <__udivmoddi4+0x116>
 8000ae0:	428a      	cmp	r2, r1
 8000ae2:	4617      	mov	r7, r2
 8000ae4:	d947      	bls.n	8000b76 <__udivmoddi4+0xa6>
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	b142      	cbz	r2, 8000afe <__udivmoddi4+0x2e>
 8000aec:	f1c2 0020 	rsb	r0, r2, #32
 8000af0:	fa24 f000 	lsr.w	r0, r4, r0
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4097      	lsls	r7, r2
 8000af8:	ea40 0c01 	orr.w	ip, r0, r1
 8000afc:	4094      	lsls	r4, r2
 8000afe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b02:	0c23      	lsrs	r3, r4, #16
 8000b04:	fbbc f6f8 	udiv	r6, ip, r8
 8000b08:	fa1f fe87 	uxth.w	lr, r7
 8000b0c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b14:	fb06 f10e 	mul.w	r1, r6, lr
 8000b18:	4299      	cmp	r1, r3
 8000b1a:	d909      	bls.n	8000b30 <__udivmoddi4+0x60>
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b22:	f080 8119 	bcs.w	8000d58 <__udivmoddi4+0x288>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 8116 	bls.w	8000d58 <__udivmoddi4+0x288>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	443b      	add	r3, r7
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b44:	45a6      	cmp	lr, r4
 8000b46:	d909      	bls.n	8000b5c <__udivmoddi4+0x8c>
 8000b48:	193c      	adds	r4, r7, r4
 8000b4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b4e:	f080 8105 	bcs.w	8000d5c <__udivmoddi4+0x28c>
 8000b52:	45a6      	cmp	lr, r4
 8000b54:	f240 8102 	bls.w	8000d5c <__udivmoddi4+0x28c>
 8000b58:	3802      	subs	r0, #2
 8000b5a:	443c      	add	r4, r7
 8000b5c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b60:	eba4 040e 	sub.w	r4, r4, lr
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa0>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	b902      	cbnz	r2, 8000b7a <__udivmoddi4+0xaa>
 8000b78:	deff      	udf	#255	; 0xff
 8000b7a:	fab2 f282 	clz	r2, r2
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	d150      	bne.n	8000c24 <__udivmoddi4+0x154>
 8000b82:	1bcb      	subs	r3, r1, r7
 8000b84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b88:	fa1f f887 	uxth.w	r8, r7
 8000b8c:	2601      	movs	r6, #1
 8000b8e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b92:	0c21      	lsrs	r1, r4, #16
 8000b94:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b9c:	fb08 f30c 	mul.w	r3, r8, ip
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d907      	bls.n	8000bb4 <__udivmoddi4+0xe4>
 8000ba4:	1879      	adds	r1, r7, r1
 8000ba6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000baa:	d202      	bcs.n	8000bb2 <__udivmoddi4+0xe2>
 8000bac:	428b      	cmp	r3, r1
 8000bae:	f200 80e9 	bhi.w	8000d84 <__udivmoddi4+0x2b4>
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	1ac9      	subs	r1, r1, r3
 8000bb6:	b2a3      	uxth	r3, r4
 8000bb8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bbc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bc0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bc4:	fb08 f800 	mul.w	r8, r8, r0
 8000bc8:	45a0      	cmp	r8, r4
 8000bca:	d907      	bls.n	8000bdc <__udivmoddi4+0x10c>
 8000bcc:	193c      	adds	r4, r7, r4
 8000bce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bd2:	d202      	bcs.n	8000bda <__udivmoddi4+0x10a>
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	f200 80d9 	bhi.w	8000d8c <__udivmoddi4+0x2bc>
 8000bda:	4618      	mov	r0, r3
 8000bdc:	eba4 0408 	sub.w	r4, r4, r8
 8000be0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be4:	e7bf      	b.n	8000b66 <__udivmoddi4+0x96>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x12e>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80b1 	beq.w	8000d52 <__udivmoddi4+0x282>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x1cc>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0x140>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80b8 	bhi.w	8000d80 <__udivmoddi4+0x2b0>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0103 	sbc.w	r1, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	468c      	mov	ip, r1
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0a8      	beq.n	8000b70 <__udivmoddi4+0xa0>
 8000c1e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0xa0>
 8000c24:	f1c2 0320 	rsb	r3, r2, #32
 8000c28:	fa20 f603 	lsr.w	r6, r0, r3
 8000c2c:	4097      	lsls	r7, r2
 8000c2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c32:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c36:	40d9      	lsrs	r1, r3
 8000c38:	4330      	orrs	r0, r6
 8000c3a:	0c03      	lsrs	r3, r0, #16
 8000c3c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c40:	fa1f f887 	uxth.w	r8, r7
 8000c44:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f108 	mul.w	r1, r6, r8
 8000c50:	4299      	cmp	r1, r3
 8000c52:	fa04 f402 	lsl.w	r4, r4, r2
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x19c>
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 808d 	bcs.w	8000d7c <__udivmoddi4+0x2ac>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 808a 	bls.w	8000d7c <__udivmoddi4+0x2ac>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	443b      	add	r3, r7
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b281      	uxth	r1, r0
 8000c70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7c:	fb00 f308 	mul.w	r3, r0, r8
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x1c4>
 8000c84:	1879      	adds	r1, r7, r1
 8000c86:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c8a:	d273      	bcs.n	8000d74 <__udivmoddi4+0x2a4>
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d971      	bls.n	8000d74 <__udivmoddi4+0x2a4>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4439      	add	r1, r7
 8000c94:	1acb      	subs	r3, r1, r3
 8000c96:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c9a:	e778      	b.n	8000b8e <__udivmoddi4+0xbe>
 8000c9c:	f1c6 0c20 	rsb	ip, r6, #32
 8000ca0:	fa03 f406 	lsl.w	r4, r3, r6
 8000ca4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ca8:	431c      	orrs	r4, r3
 8000caa:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cb6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cba:	431f      	orrs	r7, r3
 8000cbc:	0c3b      	lsrs	r3, r7, #16
 8000cbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cc2:	fa1f f884 	uxth.w	r8, r4
 8000cc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cce:	fb09 fa08 	mul.w	sl, r9, r8
 8000cd2:	458a      	cmp	sl, r1
 8000cd4:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd8:	fa00 f306 	lsl.w	r3, r0, r6
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x220>
 8000cde:	1861      	adds	r1, r4, r1
 8000ce0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce4:	d248      	bcs.n	8000d78 <__udivmoddi4+0x2a8>
 8000ce6:	458a      	cmp	sl, r1
 8000ce8:	d946      	bls.n	8000d78 <__udivmoddi4+0x2a8>
 8000cea:	f1a9 0902 	sub.w	r9, r9, #2
 8000cee:	4421      	add	r1, r4
 8000cf0:	eba1 010a 	sub.w	r1, r1, sl
 8000cf4:	b2bf      	uxth	r7, r7
 8000cf6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cfe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d02:	fb00 f808 	mul.w	r8, r0, r8
 8000d06:	45b8      	cmp	r8, r7
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x24a>
 8000d0a:	19e7      	adds	r7, r4, r7
 8000d0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d10:	d22e      	bcs.n	8000d70 <__udivmoddi4+0x2a0>
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d92c      	bls.n	8000d70 <__udivmoddi4+0x2a0>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4427      	add	r7, r4
 8000d1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1e:	eba7 0708 	sub.w	r7, r7, r8
 8000d22:	fba0 8902 	umull	r8, r9, r0, r2
 8000d26:	454f      	cmp	r7, r9
 8000d28:	46c6      	mov	lr, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	d31a      	bcc.n	8000d64 <__udivmoddi4+0x294>
 8000d2e:	d017      	beq.n	8000d60 <__udivmoddi4+0x290>
 8000d30:	b15d      	cbz	r5, 8000d4a <__udivmoddi4+0x27a>
 8000d32:	ebb3 020e 	subs.w	r2, r3, lr
 8000d36:	eb67 0701 	sbc.w	r7, r7, r1
 8000d3a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d3e:	40f2      	lsrs	r2, r6
 8000d40:	ea4c 0202 	orr.w	r2, ip, r2
 8000d44:	40f7      	lsrs	r7, r6
 8000d46:	e9c5 2700 	strd	r2, r7, [r5]
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	462e      	mov	r6, r5
 8000d54:	4628      	mov	r0, r5
 8000d56:	e70b      	b.n	8000b70 <__udivmoddi4+0xa0>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	e6e9      	b.n	8000b30 <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fd      	b.n	8000b5c <__udivmoddi4+0x8c>
 8000d60:	4543      	cmp	r3, r8
 8000d62:	d2e5      	bcs.n	8000d30 <__udivmoddi4+0x260>
 8000d64:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d68:	eb69 0104 	sbc.w	r1, r9, r4
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	e7df      	b.n	8000d30 <__udivmoddi4+0x260>
 8000d70:	4608      	mov	r0, r1
 8000d72:	e7d2      	b.n	8000d1a <__udivmoddi4+0x24a>
 8000d74:	4660      	mov	r0, ip
 8000d76:	e78d      	b.n	8000c94 <__udivmoddi4+0x1c4>
 8000d78:	4681      	mov	r9, r0
 8000d7a:	e7b9      	b.n	8000cf0 <__udivmoddi4+0x220>
 8000d7c:	4666      	mov	r6, ip
 8000d7e:	e775      	b.n	8000c6c <__udivmoddi4+0x19c>
 8000d80:	4630      	mov	r0, r6
 8000d82:	e74a      	b.n	8000c1a <__udivmoddi4+0x14a>
 8000d84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d88:	4439      	add	r1, r7
 8000d8a:	e713      	b.n	8000bb4 <__udivmoddi4+0xe4>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	443c      	add	r4, r7
 8000d90:	e724      	b.n	8000bdc <__udivmoddi4+0x10c>
 8000d92:	bf00      	nop

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8000d98:	b590      	push	{r4, r7, lr}
 8000d9a:	b08b      	sub	sp, #44	; 0x2c
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	4608      	mov	r0, r1
 8000da2:	4611      	mov	r1, r2
 8000da4:	461a      	mov	r2, r3
 8000da6:	4623      	mov	r3, r4
 8000da8:	80fb      	strh	r3, [r7, #6]
 8000daa:	4603      	mov	r3, r0
 8000dac:	80bb      	strh	r3, [r7, #4]
 8000dae:	460b      	mov	r3, r1
 8000db0:	807b      	strh	r3, [r7, #2]
 8000db2:	4613      	mov	r3, r2
 8000db4:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8000db6:	887b      	ldrh	r3, [r7, #2]
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	f1c3 0301 	rsb	r3, r3, #1
 8000dc6:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8000dd0:	e061      	b.n	8000e96 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8000dd2:	88fa      	ldrh	r2, [r7, #6]
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	e018      	b.n	8000e0e <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	b298      	uxth	r0, r3
 8000de0:	6a3b      	ldr	r3, [r7, #32]
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	88bb      	ldrh	r3, [r7, #4]
 8000de6:	4413      	add	r3, r2
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	883a      	ldrh	r2, [r7, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f000 fb47 	bl	8001480 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	b298      	uxth	r0, r3
 8000df6:	6a3b      	ldr	r3, [r7, #32]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	88ba      	ldrh	r2, [r7, #4]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	883a      	ldrh	r2, [r7, #0]
 8000e02:	4619      	mov	r1, r3
 8000e04:	f000 fb3c 	bl	8001480 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	88fa      	ldrh	r2, [r7, #6]
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	4413      	add	r3, r2
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	dde0      	ble.n	8000ddc <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8000e1a:	88fa      	ldrh	r2, [r7, #6]
 8000e1c:	6a3b      	ldr	r3, [r7, #32]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	e018      	b.n	8000e56 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	b298      	uxth	r0, r3
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	88bb      	ldrh	r3, [r7, #4]
 8000e2e:	4413      	add	r3, r2
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	883a      	ldrh	r2, [r7, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f000 fb23 	bl	8001480 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	b298      	uxth	r0, r3
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	88ba      	ldrh	r2, [r7, #4]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	883a      	ldrh	r2, [r7, #0]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f000 fb18 	bl	8001480 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3301      	adds	r3, #1
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	88fa      	ldrh	r2, [r7, #6]
 8000e58:	6a3b      	ldr	r3, [r7, #32]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	dde0      	ble.n	8000e24 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	3301      	adds	r3, #1
 8000e66:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	3302      	adds	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	005a      	lsls	r2, r3, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	dd09      	ble.n	8000e96 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	3b01      	subs	r3, #1
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	3302      	adds	r3, #2
 8000e94:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8000e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e98:	6a3b      	ldr	r3, [r7, #32]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	da99      	bge.n	8000dd2 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8000e9e:	bf00      	nop
 8000ea0:	bf00      	nop
 8000ea2:	372c      	adds	r7, #44	; 0x2c
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd90      	pop	{r4, r7, pc}

08000ea8 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000eac:	2200      	movs	r2, #0
 8000eae:	2110      	movs	r1, #16
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <ILI9341_SPI_Init+0x14>)
 8000eb2:	f002 fd31 	bl	8003918 <HAL_GPIO_WritePin>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000eca:	1df9      	adds	r1, r7, #7
 8000ecc:	2301      	movs	r3, #1
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <ILI9341_SPI_Send+0x20>)
 8000ed2:	f006 fdd0 	bl	8007a76 <HAL_SPI_Transmit>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200001ec 	.word	0x200001ec

08000ee4 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	480a      	ldr	r0, [pc, #40]	; (8000f1c <ILI9341_Write_Command+0x38>)
 8000ef4:	f002 fd10 	bl	8003918 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2140      	movs	r1, #64	; 0x40
 8000efc:	4807      	ldr	r0, [pc, #28]	; (8000f1c <ILI9341_Write_Command+0x38>)
 8000efe:	f002 fd0b 	bl	8003918 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ffdb 	bl	8000ec0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <ILI9341_Write_Command+0x38>)
 8000f10:	f002 fd02 	bl	8003918 <HAL_GPIO_WritePin>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40021000 	.word	0x40021000

08000f20 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2140      	movs	r1, #64	; 0x40
 8000f2e:	480a      	ldr	r0, [pc, #40]	; (8000f58 <ILI9341_Write_Data+0x38>)
 8000f30:	f002 fcf2 	bl	8003918 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2110      	movs	r1, #16
 8000f38:	4807      	ldr	r0, [pc, #28]	; (8000f58 <ILI9341_Write_Data+0x38>)
 8000f3a:	f002 fced 	bl	8003918 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ffbd 	bl	8000ec0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	2110      	movs	r1, #16
 8000f4a:	4803      	ldr	r0, [pc, #12]	; (8000f58 <ILI9341_Write_Data+0x38>)
 8000f4c:	f002 fce4 	bl	8003918 <HAL_GPIO_WritePin>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000

08000f5c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4604      	mov	r4, r0
 8000f64:	4608      	mov	r0, r1
 8000f66:	4611      	mov	r1, r2
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	80fb      	strh	r3, [r7, #6]
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80bb      	strh	r3, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	807b      	strh	r3, [r7, #2]
 8000f76:	4613      	mov	r3, r2
 8000f78:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000f7a:	202a      	movs	r0, #42	; 0x2a
 8000f7c:	f7ff ffb2 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	0a1b      	lsrs	r3, r3, #8
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ffc9 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ffc4 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ffbd 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ffb8 	bl	8000f20 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000fb0:	202b      	movs	r0, #43	; 0x2b
 8000fb2:	f7ff ff97 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000fb6:	88bb      	ldrh	r3, [r7, #4]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ffae 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000fc4:	88bb      	ldrh	r3, [r7, #4]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ffa9 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000fce:	883b      	ldrh	r3, [r7, #0]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ffa2 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000fdc:	883b      	ldrh	r3, [r7, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff9d 	bl	8000f20 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000fe6:	202c      	movs	r0, #44	; 0x2c
 8000fe8:	f7ff ff7c 	bl	8000ee4 <ILI9341_Write_Command>
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd90      	pop	{r4, r7, pc}

08000ff4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	480a      	ldr	r0, [pc, #40]	; (8001028 <ILI9341_Reset+0x34>)
 8000ffe:	f002 fc8b 	bl	8003918 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001002:	20c8      	movs	r0, #200	; 0xc8
 8001004:	f002 f99e 	bl	8003344 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2110      	movs	r1, #16
 800100c:	4806      	ldr	r0, [pc, #24]	; (8001028 <ILI9341_Reset+0x34>)
 800100e:	f002 fc83 	bl	8003918 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001012:	20c8      	movs	r0, #200	; 0xc8
 8001014:	f002 f996 	bl	8003344 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001018:	2201      	movs	r2, #1
 800101a:	2120      	movs	r1, #32
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <ILI9341_Reset+0x34>)
 800101e:	f002 fc7b 	bl	8003918 <HAL_GPIO_WritePin>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000

0800102c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800103a:	2036      	movs	r0, #54	; 0x36
 800103c:	f7ff ff52 	bl	8000ee4 <ILI9341_Write_Command>
HAL_Delay(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f002 f97f 	bl	8003344 <HAL_Delay>
	
switch(screen_rotation) 
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d837      	bhi.n	80010bc <ILI9341_Set_Rotation+0x90>
 800104c:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <ILI9341_Set_Rotation+0x28>)
 800104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001052:	bf00      	nop
 8001054:	08001065 	.word	0x08001065
 8001058:	0800107b 	.word	0x0800107b
 800105c:	08001091 	.word	0x08001091
 8001060:	080010a7 	.word	0x080010a7
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001064:	2048      	movs	r0, #72	; 0x48
 8001066:	f7ff ff5b 	bl	8000f20 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <ILI9341_Set_Rotation+0x9c>)
 800106c:	22f0      	movs	r2, #240	; 0xf0
 800106e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <ILI9341_Set_Rotation+0xa0>)
 8001072:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001076:	801a      	strh	r2, [r3, #0]
			break;
 8001078:	e021      	b.n	80010be <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800107a:	2028      	movs	r0, #40	; 0x28
 800107c:	f7ff ff50 	bl	8000f20 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <ILI9341_Set_Rotation+0x9c>)
 8001082:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001086:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <ILI9341_Set_Rotation+0xa0>)
 800108a:	22f0      	movs	r2, #240	; 0xf0
 800108c:	801a      	strh	r2, [r3, #0]
			break;
 800108e:	e016      	b.n	80010be <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001090:	2088      	movs	r0, #136	; 0x88
 8001092:	f7ff ff45 	bl	8000f20 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <ILI9341_Set_Rotation+0x9c>)
 8001098:	22f0      	movs	r2, #240	; 0xf0
 800109a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <ILI9341_Set_Rotation+0xa0>)
 800109e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010a2:	801a      	strh	r2, [r3, #0]
			break;
 80010a4:	e00b      	b.n	80010be <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80010a6:	20e8      	movs	r0, #232	; 0xe8
 80010a8:	f7ff ff3a 	bl	8000f20 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <ILI9341_Set_Rotation+0x9c>)
 80010ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010b2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <ILI9341_Set_Rotation+0xa0>)
 80010b6:	22f0      	movs	r2, #240	; 0xf0
 80010b8:	801a      	strh	r2, [r3, #0]
			break;
 80010ba:	e000      	b.n	80010be <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80010bc:	bf00      	nop
	}
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000002 	.word	0x20000002
 80010cc:	20000000 	.word	0x20000000

080010d0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2120      	movs	r1, #32
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <ILI9341_Enable+0x14>)
 80010da:	f002 fc1d 	bl	8003918 <HAL_GPIO_WritePin>
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000

080010e8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80010ec:	f7ff fff0 	bl	80010d0 <ILI9341_Enable>
ILI9341_SPI_Init();
 80010f0:	f7ff feda 	bl	8000ea8 <ILI9341_SPI_Init>
ILI9341_Reset();
 80010f4:	f7ff ff7e 	bl	8000ff4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80010f8:	2001      	movs	r0, #1
 80010fa:	f7ff fef3 	bl	8000ee4 <ILI9341_Write_Command>
HAL_Delay(1000);
 80010fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001102:	f002 f91f 	bl	8003344 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001106:	20cb      	movs	r0, #203	; 0xcb
 8001108:	f7ff feec 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 800110c:	2039      	movs	r0, #57	; 0x39
 800110e:	f7ff ff07 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001112:	202c      	movs	r0, #44	; 0x2c
 8001114:	f7ff ff04 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff ff01 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800111e:	2034      	movs	r0, #52	; 0x34
 8001120:	f7ff fefe 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001124:	2002      	movs	r0, #2
 8001126:	f7ff fefb 	bl	8000f20 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800112a:	20cf      	movs	r0, #207	; 0xcf
 800112c:	f7ff feda 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001130:	2000      	movs	r0, #0
 8001132:	f7ff fef5 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001136:	20c1      	movs	r0, #193	; 0xc1
 8001138:	f7ff fef2 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 800113c:	2030      	movs	r0, #48	; 0x30
 800113e:	f7ff feef 	bl	8000f20 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001142:	20e8      	movs	r0, #232	; 0xe8
 8001144:	f7ff fece 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001148:	2085      	movs	r0, #133	; 0x85
 800114a:	f7ff fee9 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff fee6 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001154:	2078      	movs	r0, #120	; 0x78
 8001156:	f7ff fee3 	bl	8000f20 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800115a:	20ea      	movs	r0, #234	; 0xea
 800115c:	f7ff fec2 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fedd 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff feda 	bl	8000f20 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800116c:	20ed      	movs	r0, #237	; 0xed
 800116e:	f7ff feb9 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001172:	2064      	movs	r0, #100	; 0x64
 8001174:	f7ff fed4 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001178:	2003      	movs	r0, #3
 800117a:	f7ff fed1 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800117e:	2012      	movs	r0, #18
 8001180:	f7ff fece 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001184:	2081      	movs	r0, #129	; 0x81
 8001186:	f7ff fecb 	bl	8000f20 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800118a:	20f7      	movs	r0, #247	; 0xf7
 800118c:	f7ff feaa 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001190:	2020      	movs	r0, #32
 8001192:	f7ff fec5 	bl	8000f20 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001196:	20c0      	movs	r0, #192	; 0xc0
 8001198:	f7ff fea4 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800119c:	2023      	movs	r0, #35	; 0x23
 800119e:	f7ff febf 	bl	8000f20 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80011a2:	20c1      	movs	r0, #193	; 0xc1
 80011a4:	f7ff fe9e 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80011a8:	2010      	movs	r0, #16
 80011aa:	f7ff feb9 	bl	8000f20 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80011ae:	20c5      	movs	r0, #197	; 0xc5
 80011b0:	f7ff fe98 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80011b4:	203e      	movs	r0, #62	; 0x3e
 80011b6:	f7ff feb3 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80011ba:	2028      	movs	r0, #40	; 0x28
 80011bc:	f7ff feb0 	bl	8000f20 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80011c0:	20c7      	movs	r0, #199	; 0xc7
 80011c2:	f7ff fe8f 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80011c6:	2086      	movs	r0, #134	; 0x86
 80011c8:	f7ff feaa 	bl	8000f20 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80011cc:	2036      	movs	r0, #54	; 0x36
 80011ce:	f7ff fe89 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80011d2:	2048      	movs	r0, #72	; 0x48
 80011d4:	f7ff fea4 	bl	8000f20 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80011d8:	203a      	movs	r0, #58	; 0x3a
 80011da:	f7ff fe83 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80011de:	2055      	movs	r0, #85	; 0x55
 80011e0:	f7ff fe9e 	bl	8000f20 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80011e4:	20b1      	movs	r0, #177	; 0xb1
 80011e6:	f7ff fe7d 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff fe98 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80011f0:	2018      	movs	r0, #24
 80011f2:	f7ff fe95 	bl	8000f20 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80011f6:	20b6      	movs	r0, #182	; 0xb6
 80011f8:	f7ff fe74 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80011fc:	2008      	movs	r0, #8
 80011fe:	f7ff fe8f 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001202:	2082      	movs	r0, #130	; 0x82
 8001204:	f7ff fe8c 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001208:	2027      	movs	r0, #39	; 0x27
 800120a:	f7ff fe89 	bl	8000f20 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800120e:	20f2      	movs	r0, #242	; 0xf2
 8001210:	f7ff fe68 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff fe83 	bl	8000f20 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800121a:	2026      	movs	r0, #38	; 0x26
 800121c:	f7ff fe62 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff fe7d 	bl	8000f20 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001226:	20e0      	movs	r0, #224	; 0xe0
 8001228:	f7ff fe5c 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 800122c:	200f      	movs	r0, #15
 800122e:	f7ff fe77 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001232:	2031      	movs	r0, #49	; 0x31
 8001234:	f7ff fe74 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001238:	202b      	movs	r0, #43	; 0x2b
 800123a:	f7ff fe71 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800123e:	200c      	movs	r0, #12
 8001240:	f7ff fe6e 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001244:	200e      	movs	r0, #14
 8001246:	f7ff fe6b 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800124a:	2008      	movs	r0, #8
 800124c:	f7ff fe68 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001250:	204e      	movs	r0, #78	; 0x4e
 8001252:	f7ff fe65 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001256:	20f1      	movs	r0, #241	; 0xf1
 8001258:	f7ff fe62 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 800125c:	2037      	movs	r0, #55	; 0x37
 800125e:	f7ff fe5f 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001262:	2007      	movs	r0, #7
 8001264:	f7ff fe5c 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001268:	2010      	movs	r0, #16
 800126a:	f7ff fe59 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800126e:	2003      	movs	r0, #3
 8001270:	f7ff fe56 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001274:	200e      	movs	r0, #14
 8001276:	f7ff fe53 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800127a:	2009      	movs	r0, #9
 800127c:	f7ff fe50 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff fe4d 	bl	8000f20 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001286:	20e1      	movs	r0, #225	; 0xe1
 8001288:	f7ff fe2c 	bl	8000ee4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fe47 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001292:	200e      	movs	r0, #14
 8001294:	f7ff fe44 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001298:	2014      	movs	r0, #20
 800129a:	f7ff fe41 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800129e:	2003      	movs	r0, #3
 80012a0:	f7ff fe3e 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80012a4:	2011      	movs	r0, #17
 80012a6:	f7ff fe3b 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80012aa:	2007      	movs	r0, #7
 80012ac:	f7ff fe38 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80012b0:	2031      	movs	r0, #49	; 0x31
 80012b2:	f7ff fe35 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80012b6:	20c1      	movs	r0, #193	; 0xc1
 80012b8:	f7ff fe32 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80012bc:	2048      	movs	r0, #72	; 0x48
 80012be:	f7ff fe2f 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80012c2:	2008      	movs	r0, #8
 80012c4:	f7ff fe2c 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80012c8:	200f      	movs	r0, #15
 80012ca:	f7ff fe29 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80012ce:	200c      	movs	r0, #12
 80012d0:	f7ff fe26 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80012d4:	2031      	movs	r0, #49	; 0x31
 80012d6:	f7ff fe23 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80012da:	2036      	movs	r0, #54	; 0x36
 80012dc:	f7ff fe20 	bl	8000f20 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80012e0:	200f      	movs	r0, #15
 80012e2:	f7ff fe1d 	bl	8000f20 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80012e6:	2011      	movs	r0, #17
 80012e8:	f7ff fdfc 	bl	8000ee4 <ILI9341_Write_Command>
HAL_Delay(120);
 80012ec:	2078      	movs	r0, #120	; 0x78
 80012ee:	f002 f829 	bl	8003344 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80012f2:	2029      	movs	r0, #41	; 0x29
 80012f4:	f7ff fdf6 	bl	8000ee4 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f7ff fe97 	bl	800102c <ILI9341_Set_Rotation>

HAL_Delay(10);
 80012fe:	200a      	movs	r0, #10
 8001300:	f002 f820 	bl	8003344 <HAL_Delay>
//
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	80fb      	strh	r3, [r7, #6]
 8001314:	466b      	mov	r3, sp
 8001316:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001324:	d202      	bcs.n	800132c <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
 800132a:	e002      	b.n	8001332 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 800132c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001332:	2201      	movs	r2, #1
 8001334:	2140      	movs	r1, #64	; 0x40
 8001336:	483d      	ldr	r0, [pc, #244]	; (800142c <ILI9341_Draw_Colour_Burst+0x124>)
 8001338:	f002 faee 	bl	8003918 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	2110      	movs	r1, #16
 8001340:	483a      	ldr	r0, [pc, #232]	; (800142c <ILI9341_Draw_Colour_Burst+0x124>)
 8001342:	f002 fae9 	bl	8003918 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	b29b      	uxth	r3, r3
 800134c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8001350:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001352:	4623      	mov	r3, r4
 8001354:	3b01      	subs	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	4620      	mov	r0, r4
 800135a:	f04f 0100 	mov.w	r1, #0
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	00cb      	lsls	r3, r1, #3
 8001368:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800136c:	00c2      	lsls	r2, r0, #3
 800136e:	4620      	mov	r0, r4
 8001370:	f04f 0100 	mov.w	r1, #0
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	00cb      	lsls	r3, r1, #3
 800137e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001382:	00c2      	lsls	r2, r0, #3
 8001384:	1de3      	adds	r3, r4, #7
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	ebad 0d03 	sub.w	sp, sp, r3
 800138e:	466b      	mov	r3, sp
 8001390:	3300      	adds	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001394:	2300      	movs	r3, #0
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
 8001398:	e00e      	b.n	80013b8 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139e:	4413      	add	r3, r2
 80013a0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80013a4:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80013a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a8:	3301      	adds	r3, #1
 80013aa:	88fa      	ldrh	r2, [r7, #6]
 80013ac:	b2d1      	uxtb	r1, r2
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80013b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b4:	3302      	adds	r3, #2
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	429a      	cmp	r2, r3
 80013be:	d3ec      	bcc.n	800139a <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ce:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80013d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013da:	fb01 f202 	mul.w	r2, r1, r2
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d010      	beq.n	800140a <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ec:	e009      	b.n	8001402 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80013ee:	69b9      	ldr	r1, [r7, #24]
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	230a      	movs	r3, #10
 80013f6:	480e      	ldr	r0, [pc, #56]	; (8001430 <ILI9341_Draw_Colour_Burst+0x128>)
 80013f8:	f006 fb3d 	bl	8007a76 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80013fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fe:	3301      	adds	r3, #1
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	429a      	cmp	r2, r3
 8001408:	d3f1      	bcc.n	80013ee <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 800140a:	69b9      	ldr	r1, [r7, #24]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	b29a      	uxth	r2, r3
 8001410:	230a      	movs	r3, #10
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <ILI9341_Draw_Colour_Burst+0x128>)
 8001414:	f006 fb2f 	bl	8007a76 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001418:	2201      	movs	r2, #1
 800141a:	2110      	movs	r1, #16
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <ILI9341_Draw_Colour_Burst+0x124>)
 800141e:	f002 fa7b 	bl	8003918 <HAL_GPIO_WritePin>
 8001422:	46ad      	mov	sp, r5
}
 8001424:	bf00      	nop
 8001426:	3730      	adds	r7, #48	; 0x30
 8001428:	46bd      	mov	sp, r7
 800142a:	bdb0      	pop	{r4, r5, r7, pc}
 800142c:	40021000 	.word	0x40021000
 8001430:	200001ec 	.word	0x200001ec

08001434 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <ILI9341_Fill_Screen+0x44>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <ILI9341_Fill_Screen+0x48>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	2100      	movs	r1, #0
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff fd85 	bl	8000f5c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <ILI9341_Fill_Screen+0x44>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <ILI9341_Fill_Screen+0x48>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	b29b      	uxth	r3, r3
 8001460:	fb03 f302 	mul.w	r3, r3, r2
 8001464:	461a      	mov	r2, r3
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff4c 	bl	8001308 <ILI9341_Draw_Colour_Burst>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000002 	.word	0x20000002
 800147c:	20000000 	.word	0x20000000

08001480 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
 800148a:	460b      	mov	r3, r1
 800148c:	80bb      	strh	r3, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001492:	4b5b      	ldr	r3, [pc, #364]	; (8001600 <ILI9341_Draw_Pixel+0x180>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	88fa      	ldrh	r2, [r7, #6]
 800149a:	429a      	cmp	r2, r3
 800149c:	f080 80ac 	bcs.w	80015f8 <ILI9341_Draw_Pixel+0x178>
 80014a0:	4b58      	ldr	r3, [pc, #352]	; (8001604 <ILI9341_Draw_Pixel+0x184>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	88ba      	ldrh	r2, [r7, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	f080 80a5 	bcs.w	80015f8 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80014ae:	2200      	movs	r2, #0
 80014b0:	2140      	movs	r1, #64	; 0x40
 80014b2:	4855      	ldr	r0, [pc, #340]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 80014b4:	f002 fa30 	bl	8003918 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2110      	movs	r1, #16
 80014bc:	4852      	ldr	r0, [pc, #328]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 80014be:	f002 fa2b 	bl	8003918 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80014c2:	202a      	movs	r0, #42	; 0x2a
 80014c4:	f7ff fcfc 	bl	8000ec0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80014c8:	2201      	movs	r2, #1
 80014ca:	2140      	movs	r1, #64	; 0x40
 80014cc:	484e      	ldr	r0, [pc, #312]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 80014ce:	f002 fa23 	bl	8003918 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80014d2:	2201      	movs	r2, #1
 80014d4:	2110      	movs	r1, #16
 80014d6:	484c      	ldr	r0, [pc, #304]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 80014d8:	f002 fa1e 	bl	8003918 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80014dc:	2200      	movs	r2, #0
 80014de:	2110      	movs	r1, #16
 80014e0:	4849      	ldr	r0, [pc, #292]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 80014e2:	f002 fa19 	bl	8003918 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	753b      	strb	r3, [r7, #20]
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	757b      	strb	r3, [r7, #21]
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	3301      	adds	r3, #1
 80014fa:	121b      	asrs	r3, r3, #8
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	75bb      	strb	r3, [r7, #22]
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	3301      	adds	r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800150a:	f107 0114 	add.w	r1, r7, #20
 800150e:	2301      	movs	r3, #1
 8001510:	2204      	movs	r2, #4
 8001512:	483e      	ldr	r0, [pc, #248]	; (800160c <ILI9341_Draw_Pixel+0x18c>)
 8001514:	f006 faaf 	bl	8007a76 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	2110      	movs	r1, #16
 800151c:	483a      	ldr	r0, [pc, #232]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 800151e:	f002 f9fb 	bl	8003918 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001522:	2200      	movs	r2, #0
 8001524:	2140      	movs	r1, #64	; 0x40
 8001526:	4838      	ldr	r0, [pc, #224]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 8001528:	f002 f9f6 	bl	8003918 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800152c:	2200      	movs	r2, #0
 800152e:	2110      	movs	r1, #16
 8001530:	4835      	ldr	r0, [pc, #212]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 8001532:	f002 f9f1 	bl	8003918 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001536:	202b      	movs	r0, #43	; 0x2b
 8001538:	f7ff fcc2 	bl	8000ec0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800153c:	2201      	movs	r2, #1
 800153e:	2140      	movs	r1, #64	; 0x40
 8001540:	4831      	ldr	r0, [pc, #196]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 8001542:	f002 f9e9 	bl	8003918 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001546:	2201      	movs	r2, #1
 8001548:	2110      	movs	r1, #16
 800154a:	482f      	ldr	r0, [pc, #188]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 800154c:	f002 f9e4 	bl	8003918 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	2110      	movs	r1, #16
 8001554:	482c      	ldr	r0, [pc, #176]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 8001556:	f002 f9df 	bl	8003918 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800155a:	88bb      	ldrh	r3, [r7, #4]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	b29b      	uxth	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	743b      	strb	r3, [r7, #16]
 8001564:	88bb      	ldrh	r3, [r7, #4]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	747b      	strb	r3, [r7, #17]
 800156a:	88bb      	ldrh	r3, [r7, #4]
 800156c:	3301      	adds	r3, #1
 800156e:	121b      	asrs	r3, r3, #8
 8001570:	b2db      	uxtb	r3, r3
 8001572:	74bb      	strb	r3, [r7, #18]
 8001574:	88bb      	ldrh	r3, [r7, #4]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	3301      	adds	r3, #1
 800157a:	b2db      	uxtb	r3, r3
 800157c:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800157e:	f107 0110 	add.w	r1, r7, #16
 8001582:	2301      	movs	r3, #1
 8001584:	2204      	movs	r2, #4
 8001586:	4821      	ldr	r0, [pc, #132]	; (800160c <ILI9341_Draw_Pixel+0x18c>)
 8001588:	f006 fa75 	bl	8007a76 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	2110      	movs	r1, #16
 8001590:	481d      	ldr	r0, [pc, #116]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 8001592:	f002 f9c1 	bl	8003918 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001596:	2200      	movs	r2, #0
 8001598:	2140      	movs	r1, #64	; 0x40
 800159a:	481b      	ldr	r0, [pc, #108]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 800159c:	f002 f9bc 	bl	8003918 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80015a0:	2200      	movs	r2, #0
 80015a2:	2110      	movs	r1, #16
 80015a4:	4818      	ldr	r0, [pc, #96]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 80015a6:	f002 f9b7 	bl	8003918 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80015aa:	202c      	movs	r0, #44	; 0x2c
 80015ac:	f7ff fc88 	bl	8000ec0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80015b0:	2201      	movs	r2, #1
 80015b2:	2140      	movs	r1, #64	; 0x40
 80015b4:	4814      	ldr	r0, [pc, #80]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 80015b6:	f002 f9af 	bl	8003918 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80015ba:	2201      	movs	r2, #1
 80015bc:	2110      	movs	r1, #16
 80015be:	4812      	ldr	r0, [pc, #72]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 80015c0:	f002 f9aa 	bl	8003918 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2110      	movs	r1, #16
 80015c8:	480f      	ldr	r0, [pc, #60]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 80015ca:	f002 f9a5 	bl	8003918 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	733b      	strb	r3, [r7, #12]
 80015d8:	887b      	ldrh	r3, [r7, #2]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80015de:	f107 010c 	add.w	r1, r7, #12
 80015e2:	2301      	movs	r3, #1
 80015e4:	2202      	movs	r2, #2
 80015e6:	4809      	ldr	r0, [pc, #36]	; (800160c <ILI9341_Draw_Pixel+0x18c>)
 80015e8:	f006 fa45 	bl	8007a76 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	2110      	movs	r1, #16
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <ILI9341_Draw_Pixel+0x188>)
 80015f2:	f002 f991 	bl	8003918 <HAL_GPIO_WritePin>
 80015f6:	e000      	b.n	80015fa <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80015f8:	bf00      	nop
	
}
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000002 	.word	0x20000002
 8001604:	20000000 	.word	0x20000000
 8001608:	40021000 	.word	0x40021000
 800160c:	200001ec 	.word	0x200001ec

08001610 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	int i =0;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 800161c:	e036      	b.n	800168c <speed_test_LCD+0x7c>
	{
		i ++;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001638:	4819      	ldr	r0, [pc, #100]	; (80016a0 <speed_test_LCD+0x90>)
 800163a:	f006 f97e 	bl	800793a <HAL_RNG_GetRandomNumber>
 800163e:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001644:	4816      	ldr	r0, [pc, #88]	; (80016a0 <speed_test_LCD+0x90>)
 8001646:	f006 f978 	bl	800793a <HAL_RNG_GetRandomNumber>
 800164a:	6138      	str	r0, [r7, #16]
		yr = random_num;
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <speed_test_LCD+0x90>)
 8001652:	f006 f972 	bl	800793a <HAL_RNG_GetRandomNumber>
 8001656:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 800165c:	4810      	ldr	r0, [pc, #64]	; (80016a0 <speed_test_LCD+0x90>)
 800165e:	f006 f96c 	bl	800793a <HAL_RNG_GetRandomNumber>
 8001662:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8001668:	89fb      	ldrh	r3, [r7, #14]
 800166a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800166e:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8001670:	89bb      	ldrh	r3, [r7, #12]
 8001672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001676:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8001678:	897b      	ldrh	r3, [r7, #10]
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8001680:	893b      	ldrh	r3, [r7, #8]
 8001682:	897a      	ldrh	r2, [r7, #10]
 8001684:	89b9      	ldrh	r1, [r7, #12]
 8001686:	89f8      	ldrh	r0, [r7, #14]
 8001688:	f7ff fb86 	bl	8000d98 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	ddc4      	ble.n	800161e <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000330 	.word	0x20000330

080016a4 <I2C_1_scaner>:

};

//----------------------------------------------------------------------------------------------------
void I2C_1_scaner(void)
{
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af04      	add	r7, sp, #16
	/*Description function
	This function search devise connected to I2C in this case -hi2c1.
	After thet function print in console information about what to connect to I2C.
	*/
	uint8_t number_of_device=0;				// How many device controller is found
 80016aa:	2300      	movs	r3, #0
 80016ac:	71fb      	strb	r3, [r7, #7]
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	//HAL_Delay(500);

	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 80016ae:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <I2C_1_scaner+0xb4>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	e043      	b.n	800173e <I2C_1_scaner+0x9a>
	{
		HAL_Delay(1);
 80016b6:	2001      	movs	r0, #1
 80016b8:	f001 fe44 	bl	8003344 <HAL_Delay>
		STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, (uint16_t) sizebuf_I2C, &buff, (uint16_t) sizebuf_I2C,(uint32_t) timeout);
 80016bc:	4b26      	ldr	r3, [pc, #152]	; (8001758 <I2C_1_scaner+0xb4>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	b299      	uxth	r1, r3
 80016c6:	4b25      	ldr	r3, [pc, #148]	; (800175c <I2C_1_scaner+0xb8>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b298      	uxth	r0, r3
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <I2C_1_scaner+0xbc>)
 80016ce:	881c      	ldrh	r4, [r3, #0]
 80016d0:	4b23      	ldr	r3, [pc, #140]	; (8001760 <I2C_1_scaner+0xbc>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	4a23      	ldr	r2, [pc, #140]	; (8001764 <I2C_1_scaner+0xc0>)
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	9202      	str	r2, [sp, #8]
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	4b22      	ldr	r3, [pc, #136]	; (8001768 <I2C_1_scaner+0xc4>)
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	4623      	mov	r3, r4
 80016e2:	4602      	mov	r2, r0
 80016e4:	4821      	ldr	r0, [pc, #132]	; (800176c <I2C_1_scaner+0xc8>)
 80016e6:	f004 f8ed 	bl	80058c4 <HAL_I2C_Mem_Read>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <I2C_1_scaner+0xcc>)
 80016f0:	801a      	strh	r2, [r3, #0]

		if(STATUS==DEVICE_FOUND)																		// if devsice is found
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <I2C_1_scaner+0xcc>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d11b      	bne.n	8001732 <I2C_1_scaner+0x8e>
		{
			number_of_device++;
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	3301      	adds	r3, #1
 80016fe:	71fb      	strb	r3, [r7, #7]

			if( (addres_devise == H_and_T_sensor_SI7021_I2C_ADDR) | (addres_devise == OLED_SSD136_I2C_ADDR))
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <I2C_1_scaner+0xb4>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b40      	cmp	r3, #64	; 0x40
 8001706:	bf0c      	ite	eq
 8001708:	2301      	moveq	r3, #1
 800170a:	2300      	movne	r3, #0
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <I2C_1_scaner+0xb4>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b3c      	cmp	r3, #60	; 0x3c
 8001714:	bf0c      	ite	eq
 8001716:	2301      	moveq	r3, #1
 8001718:	2300      	movne	r3, #0
 800171a:	b2db      	uxtb	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <I2C_1_scaner+0x8e>
			{
				switch (addres_devise)
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <I2C_1_scaner+0xb4>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b3c      	cmp	r3, #60	; 0x3c
 800172a:	d001      	beq.n	8001730 <I2C_1_scaner+0x8c>
 800172c:	2b40      	cmp	r3, #64	; 0x40
 800172e:	e000      	b.n	8001732 <I2C_1_scaner+0x8e>
							sprintf(str3,"Device address-0x%x - found. It is OLED \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
						#endif
				    break;
 8001730:	bf00      	nop
	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <I2C_1_scaner+0xb4>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <I2C_1_scaner+0xb4>)
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <I2C_1_scaner+0xb4>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2bff      	cmp	r3, #255	; 0xff
 8001744:	d1b7      	bne.n	80016b6 <I2C_1_scaner+0x12>
		memset(str3, 0 , sizeof(str3));
		sprintf(str3,"DONE\r\n");      																	// convert   in  str
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	HAL_Delay(500);
 8001746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800174a:	f001 fdfb 	bl	8003344 <HAL_Delay>
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bd90      	pop	{r4, r7, pc}
 8001756:	bf00      	nop
 8001758:	20000154 	.word	0x20000154
 800175c:	20000155 	.word	0x20000155
 8001760:	20000004 	.word	0x20000004
 8001764:	20000008 	.word	0x20000008
 8001768:	20000156 	.word	0x20000156
 800176c:	20000198 	.word	0x20000198
 8001770:	20000158 	.word	0x20000158

08001774 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
	char digith = 0;;
 800177a:	2300      	movs	r3, #0
 800177c:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 800177e:	f000 f853 	bl	8001828 <read_one_digit_from_keyboard>
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2b23      	cmp	r3, #35	; 0x23
 800178a:	d10a      	bne.n	80017a2 <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 800178c:	221e      	movs	r2, #30
 800178e:	2100      	movs	r1, #0
 8001790:	4824      	ldr	r0, [pc, #144]	; (8001824 <read_digits+0xb0>)
 8001792:	f00a fe43 	bl	800c41c <memset>
		keyboard.read_digits_position = 0;
 8001796:	4b23      	ldr	r3, [pc, #140]	; (8001824 <read_digits+0xb0>)
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <read_digits+0xb0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b2a      	cmp	r3, #42	; 0x2a
 80017a6:	d109      	bne.n	80017bc <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 80017a8:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <read_digits+0xb0>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 80017b0:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <read_digits+0xb0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <read_digits+0xb0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d028      	beq.n	8001814 <read_digits+0xa0>
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b23      	cmp	r3, #35	; 0x23
 80017c6:	d025      	beq.n	8001814 <read_digits+0xa0>
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	2b2a      	cmp	r3, #42	; 0x2a
 80017cc:	d022      	beq.n	8001814 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <read_digits+0xb0>)
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	4a14      	ldr	r2, [pc, #80]	; (8001824 <read_digits+0xb0>)
 80017d4:	7f92      	ldrb	r2, [r2, #30]
 80017d6:	4293      	cmp	r3, r2
 80017d8:	dc11      	bgt.n	80017fe <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <read_digits+0xb0>)
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	4911      	ldr	r1, [pc, #68]	; (8001824 <read_digits+0xb0>)
 80017e0:	79fa      	ldrb	r2, [r7, #7]
 80017e2:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <read_digits+0xb0>)
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	3301      	adds	r3, #1
 80017ea:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <read_digits+0xb0>)
 80017ec:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <read_digits+0xb0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <read_digits+0xb0>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 80017fc:	e00e      	b.n	800181c <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <read_digits+0xb0>)
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <read_digits+0xb0>)
 8001808:	2200      	movs	r2, #0
 800180a:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <read_digits+0xb0>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8001812:	e003      	b.n	800181c <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <read_digits+0xb0>)
 8001816:	2200      	movs	r2, #0
 8001818:	77da      	strb	r2, [r3, #31]
	}
}
 800181a:	bf00      	nop
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000170 	.word	0x20000170

08001828 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
	char digit = '\0';
 800182e:	2300      	movs	r3, #0
 8001830:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001838:	48cf      	ldr	r0, [pc, #828]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 800183a:	f002 f86d 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001844:	48cc      	ldr	r0, [pc, #816]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001846:	f002 f867 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001850:	48c9      	ldr	r0, [pc, #804]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001852:	f002 f861 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	f44f 7180 	mov.w	r1, #256	; 0x100
 800185c:	48c6      	ldr	r0, [pc, #792]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 800185e:	f002 f85b 	bl	8003918 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001862:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001866:	48c5      	ldr	r0, [pc, #788]	; (8001b7c <read_one_digit_from_keyboard+0x354>)
 8001868:	f002 f83e 	bl	80038e8 <HAL_GPIO_ReadPin>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d169      	bne.n	8001946 <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001878:	48bf      	ldr	r0, [pc, #764]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 800187a:	f002 f84d 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800187e:	2201      	movs	r2, #1
 8001880:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001884:	48bc      	ldr	r0, [pc, #752]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001886:	f002 f847 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800188a:	2201      	movs	r2, #1
 800188c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001890:	48b9      	ldr	r0, [pc, #740]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001892:	f002 f841 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001896:	2201      	movs	r2, #1
 8001898:	f44f 7180 	mov.w	r1, #256	; 0x100
 800189c:	48b6      	ldr	r0, [pc, #728]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 800189e:	f002 f83b 	bl	8003918 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80018a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a6:	48b5      	ldr	r0, [pc, #724]	; (8001b7c <read_one_digit_from_keyboard+0x354>)
 80018a8:	f002 f81e 	bl	80038e8 <HAL_GPIO_ReadPin>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 80018b2:	2331      	movs	r3, #49	; 0x31
 80018b4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80018b6:	2201      	movs	r2, #1
 80018b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018bc:	48ae      	ldr	r0, [pc, #696]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 80018be:	f002 f82b 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018c8:	48ab      	ldr	r0, [pc, #684]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 80018ca:	f002 f825 	bl	8003918 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80018ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d2:	48aa      	ldr	r0, [pc, #680]	; (8001b7c <read_one_digit_from_keyboard+0x354>)
 80018d4:	f002 f808 	bl	80038e8 <HAL_GPIO_ReadPin>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 80018de:	2334      	movs	r3, #52	; 0x34
 80018e0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018e8:	48a3      	ldr	r0, [pc, #652]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 80018ea:	f002 f815 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018f4:	48a0      	ldr	r0, [pc, #640]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 80018f6:	f002 f80f 	bl	8003918 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80018fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018fe:	489f      	ldr	r0, [pc, #636]	; (8001b7c <read_one_digit_from_keyboard+0x354>)
 8001900:	f001 fff2 	bl	80038e8 <HAL_GPIO_ReadPin>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 800190a:	2337      	movs	r3, #55	; 0x37
 800190c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001914:	4898      	ldr	r0, [pc, #608]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001916:	f001 ffff 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001920:	4895      	ldr	r0, [pc, #596]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001922:	f001 fff9 	bl	8003918 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001926:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800192a:	4894      	ldr	r0, [pc, #592]	; (8001b7c <read_one_digit_from_keyboard+0x354>)
 800192c:	f001 ffdc 	bl	80038e8 <HAL_GPIO_ReadPin>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 8001936:	232a      	movs	r3, #42	; 0x2a
 8001938:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800193a:	2201      	movs	r2, #1
 800193c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001940:	488d      	ldr	r0, [pc, #564]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001942:	f001 ffe9 	bl	8003918 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800194c:	488a      	ldr	r0, [pc, #552]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 800194e:	f001 ffe3 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001958:	4887      	ldr	r0, [pc, #540]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 800195a:	f001 ffdd 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001964:	4884      	ldr	r0, [pc, #528]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001966:	f001 ffd7 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001970:	4881      	ldr	r0, [pc, #516]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001972:	f001 ffd1 	bl	8003918 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 8001976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197a:	4880      	ldr	r0, [pc, #512]	; (8001b7c <read_one_digit_from_keyboard+0x354>)
 800197c:	f001 ffb4 	bl	80038e8 <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d169      	bne.n	8001a5a <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800198c:	487a      	ldr	r0, [pc, #488]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 800198e:	f001 ffc3 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001992:	2201      	movs	r2, #1
 8001994:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001998:	4877      	ldr	r0, [pc, #476]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 800199a:	f001 ffbd 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019a4:	4874      	ldr	r0, [pc, #464]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 80019a6:	f001 ffb7 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80019aa:	2201      	movs	r2, #1
 80019ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b0:	4871      	ldr	r0, [pc, #452]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 80019b2:	f001 ffb1 	bl	8003918 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80019b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ba:	4870      	ldr	r0, [pc, #448]	; (8001b7c <read_one_digit_from_keyboard+0x354>)
 80019bc:	f001 ff94 	bl	80038e8 <HAL_GPIO_ReadPin>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 80019c6:	2332      	movs	r3, #50	; 0x32
 80019c8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80019ca:	2201      	movs	r2, #1
 80019cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d0:	4869      	ldr	r0, [pc, #420]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 80019d2:	f001 ffa1 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019dc:	4866      	ldr	r0, [pc, #408]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 80019de:	f001 ff9b 	bl	8003918 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80019e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e6:	4865      	ldr	r0, [pc, #404]	; (8001b7c <read_one_digit_from_keyboard+0x354>)
 80019e8:	f001 ff7e 	bl	80038e8 <HAL_GPIO_ReadPin>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 80019f2:	2335      	movs	r3, #53	; 0x35
 80019f4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019fc:	485e      	ldr	r0, [pc, #376]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 80019fe:	f001 ff8b 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a08:	485b      	ldr	r0, [pc, #364]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001a0a:	f001 ff85 	bl	8003918 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a12:	485a      	ldr	r0, [pc, #360]	; (8001b7c <read_one_digit_from_keyboard+0x354>)
 8001a14:	f001 ff68 	bl	80038e8 <HAL_GPIO_ReadPin>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 8001a1e:	2338      	movs	r3, #56	; 0x38
 8001a20:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a28:	4853      	ldr	r0, [pc, #332]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001a2a:	f001 ff75 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a34:	4850      	ldr	r0, [pc, #320]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001a36:	f001 ff6f 	bl	8003918 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001a3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a3e:	484f      	ldr	r0, [pc, #316]	; (8001b7c <read_one_digit_from_keyboard+0x354>)
 8001a40:	f001 ff52 	bl	80038e8 <HAL_GPIO_ReadPin>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 8001a4a:	2330      	movs	r3, #48	; 0x30
 8001a4c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a54:	4848      	ldr	r0, [pc, #288]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001a56:	f001 ff5f 	bl	8003918 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a60:	4845      	ldr	r0, [pc, #276]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001a62:	f001 ff59 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a6c:	4842      	ldr	r0, [pc, #264]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001a6e:	f001 ff53 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a78:	483f      	ldr	r0, [pc, #252]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001a7a:	f001 ff4d 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a84:	483c      	ldr	r0, [pc, #240]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001a86:	f001 ff47 	bl	8003918 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №
 8001a8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a8e:	483b      	ldr	r0, [pc, #236]	; (8001b7c <read_one_digit_from_keyboard+0x354>)
 8001a90:	f001 ff2a 	bl	80038e8 <HAL_GPIO_ReadPin>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d169      	bne.n	8001b6e <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aa0:	4835      	ldr	r0, [pc, #212]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001aa2:	f001 ff39 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aac:	4832      	ldr	r0, [pc, #200]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001aae:	f001 ff33 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ab8:	482f      	ldr	r0, [pc, #188]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001aba:	f001 ff2d 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac4:	482c      	ldr	r0, [pc, #176]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001ac6:	f001 ff27 	bl	8003918 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001aca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ace:	482b      	ldr	r0, [pc, #172]	; (8001b7c <read_one_digit_from_keyboard+0x354>)
 8001ad0:	f001 ff0a 	bl	80038e8 <HAL_GPIO_ReadPin>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 8001ada:	2333      	movs	r3, #51	; 0x33
 8001adc:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ae4:	4824      	ldr	r0, [pc, #144]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001ae6:	f001 ff17 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001af0:	4821      	ldr	r0, [pc, #132]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001af2:	f001 ff11 	bl	8003918 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001afa:	4820      	ldr	r0, [pc, #128]	; (8001b7c <read_one_digit_from_keyboard+0x354>)
 8001afc:	f001 fef4 	bl	80038e8 <HAL_GPIO_ReadPin>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 8001b06:	2336      	movs	r3, #54	; 0x36
 8001b08:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b10:	4819      	ldr	r0, [pc, #100]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001b12:	f001 ff01 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b1c:	4816      	ldr	r0, [pc, #88]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001b1e:	f001 fefb 	bl	8003918 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001b22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b26:	4815      	ldr	r0, [pc, #84]	; (8001b7c <read_one_digit_from_keyboard+0x354>)
 8001b28:	f001 fede 	bl	80038e8 <HAL_GPIO_ReadPin>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 8001b32:	2339      	movs	r3, #57	; 0x39
 8001b34:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001b36:	2201      	movs	r2, #1
 8001b38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b3c:	480e      	ldr	r0, [pc, #56]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001b3e:	f001 feeb 	bl	8003918 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b48:	480b      	ldr	r0, [pc, #44]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001b4a:	f001 fee5 	bl	8003918 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001b4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b52:	480a      	ldr	r0, [pc, #40]	; (8001b7c <read_one_digit_from_keyboard+0x354>)
 8001b54:	f001 fec8 	bl	80038e8 <HAL_GPIO_ReadPin>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 8001b5e:	2323      	movs	r3, #35	; 0x23
 8001b60:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001b62:	2201      	movs	r2, #1
 8001b64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b68:	4803      	ldr	r0, [pc, #12]	; (8001b78 <read_one_digit_from_keyboard+0x350>)
 8001b6a:	f001 fed5 	bl	8003918 <HAL_GPIO_WritePin>
	}
	return digit;
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40020c00 	.word	0x40020c00
 8001b7c:	40020400 	.word	0x40020400

08001b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b86:	f001 fb6b 	bl	8003260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b8a:	f000 f87f 	bl	8001c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b8e:	f000 fb03 	bl	8002198 <MX_GPIO_Init>
  MX_I2S3_Init();
 8001b92:	f000 f937 	bl	8001e04 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001b96:	f000 f979 	bl	8001e8c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001b9a:	f00a f8fd 	bl	800bd98 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8001b9e:	f000 fa39 	bl	8002014 <MX_TIM2_Init>
  MX_SPI2_Init();
 8001ba2:	f000 f9a9 	bl	8001ef8 <MX_SPI2_Init>
  MX_RNG_Init();
 8001ba6:	f000 f95d 	bl	8001e64 <MX_RNG_Init>
  MX_TIM3_Init();
 8001baa:	f000 fa81 	bl	80020b0 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001bae:	f000 f9d9 	bl	8001f64 <MX_TIM1_Init>
  MX_I2C3_Init();
 8001bb2:	f000 f8f9 	bl	8001da8 <MX_I2C3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001bb6:	f000 f8eb 	bl	8001d90 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 8001bba:	f7ff fa95 	bl	80010e8 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff fc38 	bl	8001434 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f7ff fa31 	bl	800102c <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7ff fc32 	bl	8001434 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 8001bd0:	2364      	movs	r3, #100	; 0x64
 8001bd2:	60fb      	str	r3, [r7, #12]
  speed_test_LCD(number_of_tests);
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f7ff fd1b 	bl	8001610 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f7ff fc2a 	bl	8001434 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 8001be0:	4826      	ldr	r0, [pc, #152]	; (8001c7c <main+0xfc>)
 8001be2:	f006 f99f 	bl	8007f24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001be6:	2100      	movs	r1, #0
 8001be8:	4824      	ldr	r0, [pc, #144]	; (8001c7c <main+0xfc>)
 8001bea:	f006 fa0b 	bl	8008004 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <main+0x100>)
 8001bf0:	220a      	movs	r2, #10
 8001bf2:	779a      	strb	r2, [r3, #30]
  // Encoder /////////////////////////////////////////
//  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
//  int32_t prevCounter = 0;
  ////////////////////////////////////////////////////

  I2C_1_scaner();
 8001bf4:	f7ff fd56 	bl	80016a4 <I2C_1_scaner>
  // 0x246				//  ????
  // 0x247				// MEMS
  // 0x255              //  ????

  // Read ID from BME280 ////////////////////////////////////////////////////////////////
  uint16_t STATUS=0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	817b      	strh	r3, [r7, #10]
  uint16_t addres_devise = 0x76;   // BME280
 8001bfc:	2376      	movs	r3, #118	; 0x76
 8001bfe:	813b      	strh	r3, [r7, #8]
  uint16_t addr = 0xD0;
 8001c00:	23d0      	movs	r3, #208	; 0xd0
 8001c02:	80fb      	strh	r3, [r7, #6]
  uint8_t buff=0;         // Return 0x96 -> Dec 60
 8001c04:	2300      	movs	r3, #0
 8001c06:	717b      	strb	r3, [r7, #5]
  STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, 1, &buff, 1, 1000);
 8001c08:	893b      	ldrh	r3, [r7, #8]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	b299      	uxth	r1, r3
 8001c0e:	88fa      	ldrh	r2, [r7, #6]
 8001c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c14:	9302      	str	r3, [sp, #8]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	1d7b      	adds	r3, r7, #5
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	4818      	ldr	r0, [pc, #96]	; (8001c84 <main+0x104>)
 8001c22:	f003 fe4f 	bl	80058c4 <HAL_I2C_Mem_Read>
 8001c26:	4603      	mov	r3, r0
 8001c28:	817b      	strh	r3, [r7, #10]
  /////////////////////////////////////////////////////////////////////////////////////////

  // Read ID from DS3231 ////////////////////////////////////////////////////////////////
  addres_devise = 0x68;            // DS3231
 8001c2a:	2368      	movs	r3, #104	; 0x68
 8001c2c:	813b      	strh	r3, [r7, #8]
  addr = 0x00;						// Read seconds register
 8001c2e:	2300      	movs	r3, #0
 8001c30:	80fb      	strh	r3, [r7, #6]
  buff=0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	717b      	strb	r3, [r7, #5]
  STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, 1, &buff, 1, 1000);
 8001c36:	893b      	ldrh	r3, [r7, #8]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	b299      	uxth	r1, r3
 8001c3c:	88fa      	ldrh	r2, [r7, #6]
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	9302      	str	r3, [sp, #8]
 8001c44:	2301      	movs	r3, #1
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	1d7b      	adds	r3, r7, #5
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	480d      	ldr	r0, [pc, #52]	; (8001c84 <main+0x104>)
 8001c50:	f003 fe38 	bl	80058c4 <HAL_I2C_Mem_Read>
 8001c54:	4603      	mov	r3, r0
 8001c56:	817b      	strh	r3, [r7, #10]
//  graphics_text(50, 1, 3, oled_buff);
//  oled_update();
  /////////////////////////////////////////////////////////////////////////////////////////

  // Test MEMS  ////////////////////////////////////////////////////////////////
  while (MPU6050_Init(&hi2c3) == 1);
 8001c58:	bf00      	nop
 8001c5a:	480a      	ldr	r0, [pc, #40]	; (8001c84 <main+0x104>)
 8001c5c:	f000 ff3c 	bl	8002ad8 <MPU6050_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d0f9      	beq.n	8001c5a <main+0xda>
  MPU6050_Read_All(&hi2c3, &MPU6050);
 8001c66:	4908      	ldr	r1, [pc, #32]	; (8001c88 <main+0x108>)
 8001c68:	4806      	ldr	r0, [pc, #24]	; (8001c84 <main+0x104>)
 8001c6a:	f000 ff8d 	bl	8002b88 <MPU6050_Read_All>

 // my_print_readings();
  while (1)
  {

	  MPU6050_Read_All(&hi2c3, &MPU6050);
 8001c6e:	4906      	ldr	r1, [pc, #24]	; (8001c88 <main+0x108>)
 8001c70:	4804      	ldr	r0, [pc, #16]	; (8001c84 <main+0x104>)
 8001c72:	f000 ff89 	bl	8002b88 <MPU6050_Read_All>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001c76:	f00a f8b5 	bl	800bde4 <MX_USB_HOST_Process>
	  MPU6050_Read_All(&hi2c3, &MPU6050);
 8001c7a:	e7f8      	b.n	8001c6e <main+0xee>
 8001c7c:	200002a0 	.word	0x200002a0
 8001c80:	20000170 	.word	0x20000170
 8001c84:	20000198 	.word	0x20000198
 8001c88:	20000248 	.word	0x20000248

08001c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b098      	sub	sp, #96	; 0x60
 8001c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c96:	2230      	movs	r2, #48	; 0x30
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f00a fbbe 	bl	800c41c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <SystemClock_Config+0xfc>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	4a30      	ldr	r2, [pc, #192]	; (8001d88 <SystemClock_Config+0xfc>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cce:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <SystemClock_Config+0xfc>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <SystemClock_Config+0x100>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2a      	ldr	r2, [pc, #168]	; (8001d8c <SystemClock_Config+0x100>)
 8001ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <SystemClock_Config+0x100>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d00:	2302      	movs	r3, #2
 8001d02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d0e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d12:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d14:	2302      	movs	r3, #2
 8001d16:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d18:	2307      	movs	r3, #7
 8001d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d20:	4618      	mov	r0, r3
 8001d22:	f004 fff1 	bl	8006d08 <HAL_RCC_OscConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001d2c:	f000 fbae 	bl	800248c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d30:	230f      	movs	r3, #15
 8001d32:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d34:	2302      	movs	r3, #2
 8001d36:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	2105      	movs	r1, #5
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f005 fa52 	bl	80071f8 <HAL_RCC_ClockConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001d5a:	f000 fb97 	bl	800248c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001d62:	23c0      	movs	r3, #192	; 0xc0
 8001d64:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001d66:	2302      	movs	r3, #2
 8001d68:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f005 fc2a 	bl	80075c8 <HAL_RCCEx_PeriphCLKConfig>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001d7a:	f000 fb87 	bl	800248c <Error_Handler>
  }
}
 8001d7e:	bf00      	nop
 8001d80:	3760      	adds	r7, #96	; 0x60
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40007000 	.word	0x40007000

08001d90 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2100      	movs	r1, #0
 8001d98:	201c      	movs	r0, #28
 8001d9a:	f001 fbd2 	bl	8003542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d9e:	201c      	movs	r0, #28
 8001da0:	f001 fbeb 	bl	800357a <HAL_NVIC_EnableIRQ>
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <MX_I2C3_Init+0x50>)
 8001dae:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <MX_I2C3_Init+0x54>)
 8001db0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <MX_I2C3_Init+0x50>)
 8001db4:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <MX_I2C3_Init+0x58>)
 8001db6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <MX_I2C3_Init+0x50>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <MX_I2C3_Init+0x50>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <MX_I2C3_Init+0x50>)
 8001dc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <MX_I2C3_Init+0x50>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <MX_I2C3_Init+0x50>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dd8:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <MX_I2C3_Init+0x50>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <MX_I2C3_Init+0x50>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <MX_I2C3_Init+0x50>)
 8001de6:	f003 fb2f 	bl	8005448 <HAL_I2C_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001df0:	f000 fb4c 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000198 	.word	0x20000198
 8001dfc:	40005c00 	.word	0x40005c00
 8001e00:	000186a0 	.word	0x000186a0

08001e04 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <MX_I2S3_Init+0x54>)
 8001e0a:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <MX_I2S3_Init+0x58>)
 8001e0c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <MX_I2S3_Init+0x54>)
 8001e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e14:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <MX_I2S3_Init+0x54>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_I2S3_Init+0x54>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <MX_I2S3_Init+0x54>)
 8001e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e28:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <MX_I2S3_Init+0x54>)
 8001e2c:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <MX_I2S3_Init+0x5c>)
 8001e2e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_I2S3_Init+0x54>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <MX_I2S3_Init+0x54>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_I2S3_Init+0x54>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_I2S3_Init+0x54>)
 8001e44:	f004 fac0 	bl	80063c8 <HAL_I2S_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001e4e:	f000 fb1d 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200003e0 	.word	0x200003e0
 8001e5c:	40003c00 	.word	0x40003c00
 8001e60:	00017700 	.word	0x00017700

08001e64 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <MX_RNG_Init+0x20>)
 8001e6a:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <MX_RNG_Init+0x24>)
 8001e6c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <MX_RNG_Init+0x20>)
 8001e70:	f005 fcea 	bl	8007848 <HAL_RNG_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001e7a:	f000 fb07 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000330 	.word	0x20000330
 8001e88:	50060800 	.word	0x50060800

08001e8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <MX_SPI1_Init+0x64>)
 8001e92:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <MX_SPI1_Init+0x68>)
 8001e94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <MX_SPI1_Init+0x64>)
 8001e98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <MX_SPI1_Init+0x64>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <MX_SPI1_Init+0x64>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_SPI1_Init+0x64>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <MX_SPI1_Init+0x64>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_SPI1_Init+0x64>)
 8001eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ebc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_SPI1_Init+0x64>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <MX_SPI1_Init+0x64>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_SPI1_Init+0x64>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <MX_SPI1_Init+0x64>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_SPI1_Init+0x64>)
 8001ed8:	220a      	movs	r2, #10
 8001eda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001edc:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <MX_SPI1_Init+0x64>)
 8001ede:	f005 fd41 	bl	8007964 <HAL_SPI_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ee8:	f000 fad0 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000340 	.word	0x20000340
 8001ef4:	40013000 	.word	0x40013000

08001ef8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001efc:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <MX_SPI2_Init+0x64>)
 8001efe:	4a18      	ldr	r2, [pc, #96]	; (8001f60 <MX_SPI2_Init+0x68>)
 8001f00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <MX_SPI2_Init+0x64>)
 8001f04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <MX_SPI2_Init+0x64>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <MX_SPI2_Init+0x64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_SPI2_Init+0x64>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <MX_SPI2_Init+0x64>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_SPI2_Init+0x64>)
 8001f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f28:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <MX_SPI2_Init+0x64>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <MX_SPI2_Init+0x64>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_SPI2_Init+0x64>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <MX_SPI2_Init+0x64>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MX_SPI2_Init+0x64>)
 8001f44:	220a      	movs	r2, #10
 8001f46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f48:	4804      	ldr	r0, [pc, #16]	; (8001f5c <MX_SPI2_Init+0x64>)
 8001f4a:	f005 fd0b 	bl	8007964 <HAL_SPI_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f54:	f000 fa9a 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	200001ec 	.word	0x200001ec
 8001f60:	40003800 	.word	0x40003800

08001f64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08c      	sub	sp, #48	; 0x30
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f6a:	f107 030c 	add.w	r3, r7, #12
 8001f6e:	2224      	movs	r2, #36	; 0x24
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f00a fa52 	bl	800c41c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <MX_TIM1_Init+0xa8>)
 8001f82:	4a23      	ldr	r2, [pc, #140]	; (8002010 <MX_TIM1_Init+0xac>)
 8001f84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f86:	4b21      	ldr	r3, [pc, #132]	; (800200c <MX_TIM1_Init+0xa8>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	; (800200c <MX_TIM1_Init+0xa8>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f92:	4b1e      	ldr	r3, [pc, #120]	; (800200c <MX_TIM1_Init+0xa8>)
 8001f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	; (800200c <MX_TIM1_Init+0xa8>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <MX_TIM1_Init+0xa8>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa6:	4b19      	ldr	r3, [pc, #100]	; (800200c <MX_TIM1_Init+0xa8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001fac:	2301      	movs	r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	480d      	ldr	r0, [pc, #52]	; (800200c <MX_TIM1_Init+0xa8>)
 8001fd8:	f006 f97b 	bl	80082d2 <HAL_TIM_Encoder_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001fe2:	f000 fa53 	bl	800248c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4806      	ldr	r0, [pc, #24]	; (800200c <MX_TIM1_Init+0xa8>)
 8001ff4:	f006 ffe0 	bl	8008fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001ffe:	f000 fa45 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	3730      	adds	r7, #48	; 0x30
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200002e8 	.word	0x200002e8
 8002010:	40010000 	.word	0x40010000

08002014 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002028:	463b      	mov	r3, r7
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002030:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <MX_TIM2_Init+0x98>)
 8002032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002036:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8002038:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <MX_TIM2_Init+0x98>)
 800203a:	f240 3247 	movw	r2, #839	; 0x347
 800203e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002040:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <MX_TIM2_Init+0x98>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <MX_TIM2_Init+0x98>)
 8002048:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800204c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <MX_TIM2_Init+0x98>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002054:	4b15      	ldr	r3, [pc, #84]	; (80020ac <MX_TIM2_Init+0x98>)
 8002056:	2280      	movs	r2, #128	; 0x80
 8002058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800205a:	4814      	ldr	r0, [pc, #80]	; (80020ac <MX_TIM2_Init+0x98>)
 800205c:	f005 ff12 	bl	8007e84 <HAL_TIM_Base_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002066:	f000 fa11 	bl	800248c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800206a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	4619      	mov	r1, r3
 8002076:	480d      	ldr	r0, [pc, #52]	; (80020ac <MX_TIM2_Init+0x98>)
 8002078:	f006 fb98 	bl	80087ac <HAL_TIM_ConfigClockSource>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002082:	f000 fa03 	bl	800248c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002086:	2310      	movs	r3, #16
 8002088:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800208e:	463b      	mov	r3, r7
 8002090:	4619      	mov	r1, r3
 8002092:	4806      	ldr	r0, [pc, #24]	; (80020ac <MX_TIM2_Init+0x98>)
 8002094:	f006 ff90 	bl	8008fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800209e:	f000 f9f5 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000398 	.word	0x20000398

080020b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08e      	sub	sp, #56	; 0x38
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c4:	f107 0320 	add.w	r3, r7, #32
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
 80020dc:	615a      	str	r2, [r3, #20]
 80020de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020e0:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <MX_TIM3_Init+0xe0>)
 80020e2:	4a2c      	ldr	r2, [pc, #176]	; (8002194 <MX_TIM3_Init+0xe4>)
 80020e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 80020e6:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <MX_TIM3_Init+0xe0>)
 80020e8:	f640 0233 	movw	r2, #2099	; 0x833
 80020ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ee:	4b28      	ldr	r3, [pc, #160]	; (8002190 <MX_TIM3_Init+0xe0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80020f4:	4b26      	ldr	r3, [pc, #152]	; (8002190 <MX_TIM3_Init+0xe0>)
 80020f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80020fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fc:	4b24      	ldr	r3, [pc, #144]	; (8002190 <MX_TIM3_Init+0xe0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002102:	4b23      	ldr	r3, [pc, #140]	; (8002190 <MX_TIM3_Init+0xe0>)
 8002104:	2280      	movs	r2, #128	; 0x80
 8002106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002108:	4821      	ldr	r0, [pc, #132]	; (8002190 <MX_TIM3_Init+0xe0>)
 800210a:	f005 febb 	bl	8007e84 <HAL_TIM_Base_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002114:	f000 f9ba 	bl	800248c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800211e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002122:	4619      	mov	r1, r3
 8002124:	481a      	ldr	r0, [pc, #104]	; (8002190 <MX_TIM3_Init+0xe0>)
 8002126:	f006 fb41 	bl	80087ac <HAL_TIM_ConfigClockSource>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002130:	f000 f9ac 	bl	800248c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002134:	4816      	ldr	r0, [pc, #88]	; (8002190 <MX_TIM3_Init+0xe0>)
 8002136:	f006 f873 	bl	8008220 <HAL_TIM_PWM_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002140:	f000 f9a4 	bl	800248c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800214c:	f107 0320 	add.w	r3, r7, #32
 8002150:	4619      	mov	r1, r3
 8002152:	480f      	ldr	r0, [pc, #60]	; (8002190 <MX_TIM3_Init+0xe0>)
 8002154:	f006 ff30 	bl	8008fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800215e:	f000 f995 	bl	800248c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002162:	2360      	movs	r3, #96	; 0x60
 8002164:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	2200      	movs	r2, #0
 8002176:	4619      	mov	r1, r3
 8002178:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_TIM3_Init+0xe0>)
 800217a:	f006 fa59 	bl	8008630 <HAL_TIM_PWM_ConfigChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002184:	f000 f982 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	3738      	adds	r7, #56	; 0x38
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200002a0 	.word	0x200002a0
 8002194:	40000400 	.word	0x40000400

08002198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	; 0x30
 800219c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219e:	f107 031c 	add.w	r3, r7, #28
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
 80021ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	4baf      	ldr	r3, [pc, #700]	; (8002470 <MX_GPIO_Init+0x2d8>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4aae      	ldr	r2, [pc, #696]	; (8002470 <MX_GPIO_Init+0x2d8>)
 80021b8:	f043 0310 	orr.w	r3, r3, #16
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4bac      	ldr	r3, [pc, #688]	; (8002470 <MX_GPIO_Init+0x2d8>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	4ba8      	ldr	r3, [pc, #672]	; (8002470 <MX_GPIO_Init+0x2d8>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4aa7      	ldr	r2, [pc, #668]	; (8002470 <MX_GPIO_Init+0x2d8>)
 80021d4:	f043 0304 	orr.w	r3, r3, #4
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4ba5      	ldr	r3, [pc, #660]	; (8002470 <MX_GPIO_Init+0x2d8>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	4ba1      	ldr	r3, [pc, #644]	; (8002470 <MX_GPIO_Init+0x2d8>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4aa0      	ldr	r2, [pc, #640]	; (8002470 <MX_GPIO_Init+0x2d8>)
 80021f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b9e      	ldr	r3, [pc, #632]	; (8002470 <MX_GPIO_Init+0x2d8>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4b9a      	ldr	r3, [pc, #616]	; (8002470 <MX_GPIO_Init+0x2d8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a99      	ldr	r2, [pc, #612]	; (8002470 <MX_GPIO_Init+0x2d8>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b97      	ldr	r3, [pc, #604]	; (8002470 <MX_GPIO_Init+0x2d8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	4b93      	ldr	r3, [pc, #588]	; (8002470 <MX_GPIO_Init+0x2d8>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a92      	ldr	r2, [pc, #584]	; (8002470 <MX_GPIO_Init+0x2d8>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b90      	ldr	r3, [pc, #576]	; (8002470 <MX_GPIO_Init+0x2d8>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	4b8c      	ldr	r3, [pc, #560]	; (8002470 <MX_GPIO_Init+0x2d8>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a8b      	ldr	r2, [pc, #556]	; (8002470 <MX_GPIO_Init+0x2d8>)
 8002244:	f043 0308 	orr.w	r3, r3, #8
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b89      	ldr	r3, [pc, #548]	; (8002470 <MX_GPIO_Init+0x2d8>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8002256:	2200      	movs	r2, #0
 8002258:	217c      	movs	r1, #124	; 0x7c
 800225a:	4886      	ldr	r0, [pc, #536]	; (8002474 <MX_GPIO_Init+0x2dc>)
 800225c:	f001 fb5c 	bl	8003918 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002260:	2201      	movs	r2, #1
 8002262:	2101      	movs	r1, #1
 8002264:	4884      	ldr	r0, [pc, #528]	; (8002478 <MX_GPIO_Init+0x2e0>)
 8002266:	f001 fb57 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 800226a:	2200      	movs	r2, #0
 800226c:	f64f 7110 	movw	r1, #65296	; 0xff10
 8002270:	4882      	ldr	r0, [pc, #520]	; (800247c <MX_GPIO_Init+0x2e4>)
 8002272:	f001 fb51 	bl	8003918 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8002276:	2200      	movs	r2, #0
 8002278:	f44f 6104 	mov.w	r1, #2112	; 0x840
 800227c:	487e      	ldr	r0, [pc, #504]	; (8002478 <MX_GPIO_Init+0x2e0>)
 800227e:	f001 fb4b 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8002282:	2200      	movs	r2, #0
 8002284:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002288:	487d      	ldr	r0, [pc, #500]	; (8002480 <MX_GPIO_Init+0x2e8>)
 800228a:	f001 fb45 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 800228e:	2374      	movs	r3, #116	; 0x74
 8002290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002292:	2301      	movs	r3, #1
 8002294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229a:	2303      	movs	r3, #3
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800229e:	f107 031c 	add.w	r3, r7, #28
 80022a2:	4619      	mov	r1, r3
 80022a4:	4873      	ldr	r0, [pc, #460]	; (8002474 <MX_GPIO_Init+0x2dc>)
 80022a6:	f001 f983 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80022aa:	2308      	movs	r3, #8
 80022ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ae:	2301      	movs	r3, #1
 80022b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	4619      	mov	r1, r3
 80022c0:	486c      	ldr	r0, [pc, #432]	; (8002474 <MX_GPIO_Init+0x2dc>)
 80022c2:	f001 f975 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80022c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80022d4:	f107 031c 	add.w	r3, r7, #28
 80022d8:	4619      	mov	r1, r3
 80022da:	4867      	ldr	r0, [pc, #412]	; (8002478 <MX_GPIO_Init+0x2e0>)
 80022dc:	f001 f968 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 80022e0:	f640 0341 	movw	r3, #2113	; 0x841
 80022e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e6:	2301      	movs	r3, #1
 80022e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2300      	movs	r3, #0
 80022f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f2:	f107 031c 	add.w	r3, r7, #28
 80022f6:	4619      	mov	r1, r3
 80022f8:	485f      	ldr	r0, [pc, #380]	; (8002478 <MX_GPIO_Init+0x2e0>)
 80022fa:	f001 f959 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80022fe:	2308      	movs	r3, #8
 8002300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800230e:	2305      	movs	r3, #5
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	4619      	mov	r1, r3
 8002318:	4857      	ldr	r0, [pc, #348]	; (8002478 <MX_GPIO_Init+0x2e0>)
 800231a:	f001 f949 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800231e:	2301      	movs	r3, #1
 8002320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002322:	4b58      	ldr	r3, [pc, #352]	; (8002484 <MX_GPIO_Init+0x2ec>)
 8002324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	4619      	mov	r1, r3
 8002330:	4855      	ldr	r0, [pc, #340]	; (8002488 <MX_GPIO_Init+0x2f0>)
 8002332:	f001 f93d 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002336:	2304      	movs	r3, #4
 8002338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002342:	f107 031c 	add.w	r3, r7, #28
 8002346:	4619      	mov	r1, r3
 8002348:	484d      	ldr	r0, [pc, #308]	; (8002480 <MX_GPIO_Init+0x2e8>)
 800234a:	f001 f931 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 800234e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002354:	2300      	movs	r3, #0
 8002356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002358:	2301      	movs	r3, #1
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	4619      	mov	r1, r3
 8002362:	4844      	ldr	r0, [pc, #272]	; (8002474 <MX_GPIO_Init+0x2dc>)
 8002364:	f001 f924 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800236c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2300      	movs	r3, #0
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800237a:	2305      	movs	r3, #5
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	4619      	mov	r1, r3
 8002384:	483e      	ldr	r0, [pc, #248]	; (8002480 <MX_GPIO_Init+0x2e8>)
 8002386:	f001 f913 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 800238a:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800238e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002390:	2300      	movs	r3, #0
 8002392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002394:	2301      	movs	r3, #1
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	4619      	mov	r1, r3
 800239e:	4838      	ldr	r0, [pc, #224]	; (8002480 <MX_GPIO_Init+0x2e8>)
 80023a0:	f001 f906 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 80023a4:	f64f 7310 	movw	r3, #65296	; 0xff10
 80023a8:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023aa:	2301      	movs	r3, #1
 80023ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	4619      	mov	r1, r3
 80023bc:	482f      	ldr	r0, [pc, #188]	; (800247c <MX_GPIO_Init+0x2e4>)
 80023be:	f001 f8f7 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80023c2:	2320      	movs	r3, #32
 80023c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c6:	2300      	movs	r3, #0
 80023c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023ce:	f107 031c 	add.w	r3, r7, #28
 80023d2:	4619      	mov	r1, r3
 80023d4:	4829      	ldr	r0, [pc, #164]	; (800247c <MX_GPIO_Init+0x2e4>)
 80023d6:	f001 f8eb 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023da:	2340      	movs	r3, #64	; 0x40
 80023dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023de:	2301      	movs	r3, #1
 80023e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ea:	f107 031c 	add.w	r3, r7, #28
 80023ee:	4619      	mov	r1, r3
 80023f0:	4823      	ldr	r0, [pc, #140]	; (8002480 <MX_GPIO_Init+0x2e8>)
 80023f2:	f001 f8dd 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 80023f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80023fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fc:	2301      	movs	r3, #1
 80023fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002404:	2303      	movs	r3, #3
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002408:	f107 031c 	add.w	r3, r7, #28
 800240c:	4619      	mov	r1, r3
 800240e:	481c      	ldr	r0, [pc, #112]	; (8002480 <MX_GPIO_Init+0x2e8>)
 8002410:	f001 f8ce 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8002414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800241a:	2312      	movs	r3, #18
 800241c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800241e:	2301      	movs	r3, #1
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002426:	2304      	movs	r3, #4
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	4619      	mov	r1, r3
 8002430:	4813      	ldr	r0, [pc, #76]	; (8002480 <MX_GPIO_Init+0x2e8>)
 8002432:	f001 f8bd 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8002436:	2301      	movs	r3, #1
 8002438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8002442:	f107 031c 	add.w	r3, r7, #28
 8002446:	4619      	mov	r1, r3
 8002448:	480a      	ldr	r0, [pc, #40]	; (8002474 <MX_GPIO_Init+0x2dc>)
 800244a:	f001 f8b1 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800244e:	2302      	movs	r3, #2
 8002450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <MX_GPIO_Init+0x2ec>)
 8002454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800245a:	f107 031c 	add.w	r3, r7, #28
 800245e:	4619      	mov	r1, r3
 8002460:	4804      	ldr	r0, [pc, #16]	; (8002474 <MX_GPIO_Init+0x2dc>)
 8002462:	f001 f8a5 	bl	80035b0 <HAL_GPIO_Init>

}
 8002466:	bf00      	nop
 8002468:	3730      	adds	r7, #48	; 0x30
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	40021000 	.word	0x40021000
 8002478:	40020800 	.word	0x40020800
 800247c:	40020c00 	.word	0x40020c00
 8002480:	40020400 	.word	0x40020400
 8002484:	10120000 	.word	0x10120000
 8002488:	40020000 	.word	0x40020000

0800248c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002490:	b672      	cpsid	i
}
 8002492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002494:	e7fe      	b.n	8002494 <Error_Handler+0x8>
	...

08002498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
 80024a2:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <HAL_MspInit+0x5c>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	4a13      	ldr	r2, [pc, #76]	; (80024f4 <HAL_MspInit+0x5c>)
 80024a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ac:	6453      	str	r3, [r2, #68]	; 0x44
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_MspInit+0x5c>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <HAL_MspInit+0x5c>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a0c      	ldr	r2, [pc, #48]	; (80024f4 <HAL_MspInit+0x5c>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_MspInit+0x5c>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024d6:	2007      	movs	r0, #7
 80024d8:	f001 f828 	bl	800352c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	2100      	movs	r1, #0
 80024e0:	2005      	movs	r0, #5
 80024e2:	f001 f82e 	bl	8003542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80024e6:	2005      	movs	r0, #5
 80024e8:	f001 f847 	bl	800357a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800

080024f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a29      	ldr	r2, [pc, #164]	; (80025bc <HAL_I2C_MspInit+0xc4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d14b      	bne.n	80025b2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <HAL_I2C_MspInit+0xc8>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a27      	ldr	r2, [pc, #156]	; (80025c0 <HAL_I2C_MspInit+0xc8>)
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_I2C_MspInit+0xc8>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <HAL_I2C_MspInit+0xc8>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a20      	ldr	r2, [pc, #128]	; (80025c0 <HAL_I2C_MspInit+0xc8>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <HAL_I2C_MspInit+0xc8>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002558:	2312      	movs	r3, #18
 800255a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800255c:	2301      	movs	r3, #1
 800255e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002560:	2303      	movs	r3, #3
 8002562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002564:	2304      	movs	r3, #4
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	4619      	mov	r1, r3
 800256e:	4815      	ldr	r0, [pc, #84]	; (80025c4 <HAL_I2C_MspInit+0xcc>)
 8002570:	f001 f81e 	bl	80035b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800257a:	2312      	movs	r3, #18
 800257c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800257e:	2301      	movs	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002582:	2303      	movs	r3, #3
 8002584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002586:	2304      	movs	r3, #4
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4619      	mov	r1, r3
 8002590:	480d      	ldr	r0, [pc, #52]	; (80025c8 <HAL_I2C_MspInit+0xd0>)
 8002592:	f001 f80d 	bl	80035b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_I2C_MspInit+0xc8>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	4a08      	ldr	r2, [pc, #32]	; (80025c0 <HAL_I2C_MspInit+0xc8>)
 80025a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025a4:	6413      	str	r3, [r2, #64]	; 0x40
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_I2C_MspInit+0xc8>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80025b2:	bf00      	nop
 80025b4:	3728      	adds	r7, #40	; 0x28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40005c00 	.word	0x40005c00
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40020800 	.word	0x40020800
 80025c8:	40020000 	.word	0x40020000

080025cc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a28      	ldr	r2, [pc, #160]	; (800268c <HAL_I2S_MspInit+0xc0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d14a      	bne.n	8002684 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_I2S_MspInit+0xc4>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a26      	ldr	r2, [pc, #152]	; (8002690 <HAL_I2S_MspInit+0xc4>)
 80025f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_I2S_MspInit+0xc4>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	4b20      	ldr	r3, [pc, #128]	; (8002690 <HAL_I2S_MspInit+0xc4>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	4a1f      	ldr	r2, [pc, #124]	; (8002690 <HAL_I2S_MspInit+0xc4>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6313      	str	r3, [r2, #48]	; 0x30
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_I2S_MspInit+0xc4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_I2S_MspInit+0xc4>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a18      	ldr	r2, [pc, #96]	; (8002690 <HAL_I2S_MspInit+0xc4>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b16      	ldr	r3, [pc, #88]	; (8002690 <HAL_I2S_MspInit+0xc4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002642:	2310      	movs	r3, #16
 8002644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002652:	2306      	movs	r3, #6
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002656:	f107 0314 	add.w	r3, r7, #20
 800265a:	4619      	mov	r1, r3
 800265c:	480d      	ldr	r0, [pc, #52]	; (8002694 <HAL_I2S_MspInit+0xc8>)
 800265e:	f000 ffa7 	bl	80035b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002662:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002674:	2306      	movs	r3, #6
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	4619      	mov	r1, r3
 800267e:	4806      	ldr	r0, [pc, #24]	; (8002698 <HAL_I2S_MspInit+0xcc>)
 8002680:	f000 ff96 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002684:	bf00      	nop
 8002686:	3728      	adds	r7, #40	; 0x28
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40003c00 	.word	0x40003c00
 8002690:	40023800 	.word	0x40023800
 8002694:	40020000 	.word	0x40020000
 8002698:	40020800 	.word	0x40020800

0800269c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <HAL_RNG_MspInit+0x3c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d10d      	bne.n	80026ca <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_RNG_MspInit+0x40>)
 80026b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b6:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_RNG_MspInit+0x40>)
 80026b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026bc:	6353      	str	r3, [r2, #52]	; 0x34
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <HAL_RNG_MspInit+0x40>)
 80026c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	50060800 	.word	0x50060800
 80026dc:	40023800 	.word	0x40023800

080026e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08c      	sub	sp, #48	; 0x30
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	f107 031c 	add.w	r3, r7, #28
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a41      	ldr	r2, [pc, #260]	; (8002804 <HAL_SPI_MspInit+0x124>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d12c      	bne.n	800275c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	4b40      	ldr	r3, [pc, #256]	; (8002808 <HAL_SPI_MspInit+0x128>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	4a3f      	ldr	r2, [pc, #252]	; (8002808 <HAL_SPI_MspInit+0x128>)
 800270c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002710:	6453      	str	r3, [r2, #68]	; 0x44
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <HAL_SPI_MspInit+0x128>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	4b39      	ldr	r3, [pc, #228]	; (8002808 <HAL_SPI_MspInit+0x128>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a38      	ldr	r2, [pc, #224]	; (8002808 <HAL_SPI_MspInit+0x128>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b36      	ldr	r3, [pc, #216]	; (8002808 <HAL_SPI_MspInit+0x128>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800273a:	23e0      	movs	r3, #224	; 0xe0
 800273c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800274a:	2305      	movs	r3, #5
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	4619      	mov	r1, r3
 8002754:	482d      	ldr	r0, [pc, #180]	; (800280c <HAL_SPI_MspInit+0x12c>)
 8002756:	f000 ff2b 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800275a:	e04f      	b.n	80027fc <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2b      	ldr	r2, [pc, #172]	; (8002810 <HAL_SPI_MspInit+0x130>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d14a      	bne.n	80027fc <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	4b27      	ldr	r3, [pc, #156]	; (8002808 <HAL_SPI_MspInit+0x128>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	4a26      	ldr	r2, [pc, #152]	; (8002808 <HAL_SPI_MspInit+0x128>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002774:	6413      	str	r3, [r2, #64]	; 0x40
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_SPI_MspInit+0x128>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_SPI_MspInit+0x128>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a1f      	ldr	r2, [pc, #124]	; (8002808 <HAL_SPI_MspInit+0x128>)
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <HAL_SPI_MspInit+0x128>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_SPI_MspInit+0x128>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a18      	ldr	r2, [pc, #96]	; (8002808 <HAL_SPI_MspInit+0x128>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b16      	ldr	r3, [pc, #88]	; (8002808 <HAL_SPI_MspInit+0x128>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027ba:	2304      	movs	r3, #4
 80027bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027ca:	2305      	movs	r3, #5
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ce:	f107 031c 	add.w	r3, r7, #28
 80027d2:	4619      	mov	r1, r3
 80027d4:	480f      	ldr	r0, [pc, #60]	; (8002814 <HAL_SPI_MspInit+0x134>)
 80027d6:	f000 feeb 	bl	80035b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80027da:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80027de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027ec:	2305      	movs	r3, #5
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f0:	f107 031c 	add.w	r3, r7, #28
 80027f4:	4619      	mov	r1, r3
 80027f6:	4808      	ldr	r0, [pc, #32]	; (8002818 <HAL_SPI_MspInit+0x138>)
 80027f8:	f000 feda 	bl	80035b0 <HAL_GPIO_Init>
}
 80027fc:	bf00      	nop
 80027fe:	3730      	adds	r7, #48	; 0x30
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40013000 	.word	0x40013000
 8002808:	40023800 	.word	0x40023800
 800280c:	40020000 	.word	0x40020000
 8002810:	40003800 	.word	0x40003800
 8002814:	40020800 	.word	0x40020800
 8002818:	40020400 	.word	0x40020400

0800281c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <HAL_TIM_Encoder_MspInit+0x84>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d12c      	bne.n	8002898 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	4a17      	ldr	r2, [pc, #92]	; (80028a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6453      	str	r3, [r2, #68]	; 0x44
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4a10      	ldr	r2, [pc, #64]	; (80028a4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002864:	f043 0310 	orr.w	r3, r3, #16
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <HAL_TIM_Encoder_MspInit+0x88>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002876:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800287a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002880:	2301      	movs	r3, #1
 8002882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002884:	2300      	movs	r3, #0
 8002886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002888:	2301      	movs	r3, #1
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	4619      	mov	r1, r3
 8002892:	4805      	ldr	r0, [pc, #20]	; (80028a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002894:	f000 fe8c 	bl	80035b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002898:	bf00      	nop
 800289a:	3728      	adds	r7, #40	; 0x28
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40010000 	.word	0x40010000
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40021000 	.word	0x40021000

080028ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028bc:	d10e      	bne.n	80028dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_TIM_Base_MspInit+0x70>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a15      	ldr	r2, [pc, #84]	; (800291c <HAL_TIM_Base_MspInit+0x70>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <HAL_TIM_Base_MspInit+0x70>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028da:	e01a      	b.n	8002912 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0f      	ldr	r2, [pc, #60]	; (8002920 <HAL_TIM_Base_MspInit+0x74>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d115      	bne.n	8002912 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	4b0c      	ldr	r3, [pc, #48]	; (800291c <HAL_TIM_Base_MspInit+0x70>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a0b      	ldr	r2, [pc, #44]	; (800291c <HAL_TIM_Base_MspInit+0x70>)
 80028f0:	f043 0302 	orr.w	r3, r3, #2
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_TIM_Base_MspInit+0x70>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	2100      	movs	r1, #0
 8002906:	201d      	movs	r0, #29
 8002908:	f000 fe1b 	bl	8003542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800290c:	201d      	movs	r0, #29
 800290e:	f000 fe34 	bl	800357a <HAL_NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	40000400 	.word	0x40000400

08002924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002928:	e7fe      	b.n	8002928 <NMI_Handler+0x4>

0800292a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800292e:	e7fe      	b.n	800292e <HardFault_Handler+0x4>

08002930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002934:	e7fe      	b.n	8002934 <MemManage_Handler+0x4>

08002936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800293a:	e7fe      	b.n	800293a <BusFault_Handler+0x4>

0800293c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002940:	e7fe      	b.n	8002940 <UsageFault_Handler+0x4>

08002942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002970:	f000 fcc8 	bl	8003304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002974:	bf00      	nop
 8002976:	bd80      	pop	{r7, pc}

08002978 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 800298c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002990:	481b      	ldr	r0, [pc, #108]	; (8002a00 <TIM2_IRQHandler+0x78>)
 8002992:	f000 ffda 	bl	800394a <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 8002996:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <TIM2_IRQHandler+0x7c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d111      	bne.n	80029c2 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 800299e:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <TIM2_IRQHandler+0x80>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2bc8      	cmp	r3, #200	; 0xc8
 80029a4:	dc0a      	bgt.n	80029bc <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80029a6:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <TIM2_IRQHandler+0x80>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <TIM2_IRQHandler+0x84>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 80029b0:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <TIM2_IRQHandler+0x80>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	3301      	adds	r3, #1
 80029b6:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <TIM2_IRQHandler+0x80>)
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e002      	b.n	80029c2 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <TIM2_IRQHandler+0x7c>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <TIM2_IRQHandler+0x7c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d114      	bne.n	80029f4 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 80029ca:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <TIM2_IRQHandler+0x80>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b63      	cmp	r3, #99	; 0x63
 80029d0:	dd0a      	ble.n	80029e8 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <TIM2_IRQHandler+0x80>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <TIM2_IRQHandler+0x84>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 80029dc:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <TIM2_IRQHandler+0x80>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	4a09      	ldr	r2, [pc, #36]	; (8002a08 <TIM2_IRQHandler+0x80>)
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e005      	b.n	80029f4 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <TIM2_IRQHandler+0x7c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
		  i = 100;
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <TIM2_IRQHandler+0x80>)
 80029f0:	2264      	movs	r2, #100	; 0x64
 80029f2:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029f4:	4805      	ldr	r0, [pc, #20]	; (8002a0c <TIM2_IRQHandler+0x84>)
 80029f6:	f005 fd12 	bl	800841e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40020c00 	.word	0x40020c00
 8002a04:	2000015c 	.word	0x2000015c
 8002a08:	2000000c 	.word	0x2000000c
 8002a0c:	20000398 	.word	0x20000398

08002a10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <TIM3_IRQHandler+0x1c>)
 8002a1a:	f000 ff96 	bl	800394a <HAL_GPIO_TogglePin>
  read_digits();
 8002a1e:	f7fe fea9 	bl	8001774 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a22:	4803      	ldr	r0, [pc, #12]	; (8002a30 <TIM3_IRQHandler+0x20>)
 8002a24:	f005 fcfb 	bl	800841e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40020c00 	.word	0x40020c00
 8002a30:	200002a0 	.word	0x200002a0

08002a34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002a38:	4802      	ldr	r0, [pc, #8]	; (8002a44 <OTG_FS_IRQHandler+0x10>)
 8002a3a:	f001 fa0b 	bl	8003e54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000808 	.word	0x20000808

08002a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a50:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <_sbrk+0x5c>)
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <_sbrk+0x60>)
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a5c:	4b13      	ldr	r3, [pc, #76]	; (8002aac <_sbrk+0x64>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d102      	bne.n	8002a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <_sbrk+0x64>)
 8002a66:	4a12      	ldr	r2, [pc, #72]	; (8002ab0 <_sbrk+0x68>)
 8002a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <_sbrk+0x64>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d207      	bcs.n	8002a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a78:	f009 fc96 	bl	800c3a8 <__errno>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	220c      	movs	r2, #12
 8002a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a86:	e009      	b.n	8002a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a88:	4b08      	ldr	r3, [pc, #32]	; (8002aac <_sbrk+0x64>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a8e:	4b07      	ldr	r3, [pc, #28]	; (8002aac <_sbrk+0x64>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	4a05      	ldr	r2, [pc, #20]	; (8002aac <_sbrk+0x64>)
 8002a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20020000 	.word	0x20020000
 8002aa8:	00000400 	.word	0x00000400
 8002aac:	20000160 	.word	0x20000160
 8002ab0:	20000b20 	.word	0x20000b20

08002ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <SystemInit+0x20>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <SystemInit+0x20>)
 8002ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af04      	add	r7, sp, #16
 8002ade:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002ae0:	2364      	movs	r3, #100	; 0x64
 8002ae2:	9302      	str	r3, [sp, #8]
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	f107 030f 	add.w	r3, r7, #15
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	2301      	movs	r3, #1
 8002af0:	2275      	movs	r2, #117	; 0x75
 8002af2:	21d0      	movs	r1, #208	; 0xd0
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f002 fee5 	bl	80058c4 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b68      	cmp	r3, #104	; 0x68
 8002afe:	d13d      	bne.n	8002b7c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002b04:	2364      	movs	r3, #100	; 0x64
 8002b06:	9302      	str	r3, [sp, #8]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	9301      	str	r3, [sp, #4]
 8002b0c:	f107 030e 	add.w	r3, r7, #14
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	2301      	movs	r3, #1
 8002b14:	226b      	movs	r2, #107	; 0x6b
 8002b16:	21d0      	movs	r1, #208	; 0xd0
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f002 fdd9 	bl	80056d0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002b1e:	2307      	movs	r3, #7
 8002b20:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002b22:	2364      	movs	r3, #100	; 0x64
 8002b24:	9302      	str	r3, [sp, #8]
 8002b26:	2301      	movs	r3, #1
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	f107 030e 	add.w	r3, r7, #14
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	2301      	movs	r3, #1
 8002b32:	2219      	movs	r2, #25
 8002b34:	21d0      	movs	r1, #208	; 0xd0
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f002 fdca 	bl	80056d0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002b40:	2364      	movs	r3, #100	; 0x64
 8002b42:	9302      	str	r3, [sp, #8]
 8002b44:	2301      	movs	r3, #1
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	f107 030e 	add.w	r3, r7, #14
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	2301      	movs	r3, #1
 8002b50:	221c      	movs	r2, #28
 8002b52:	21d0      	movs	r1, #208	; 0xd0
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f002 fdbb 	bl	80056d0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002b5e:	2364      	movs	r3, #100	; 0x64
 8002b60:	9302      	str	r3, [sp, #8]
 8002b62:	2301      	movs	r3, #1
 8002b64:	9301      	str	r3, [sp, #4]
 8002b66:	f107 030e 	add.w	r3, r7, #14
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	221b      	movs	r2, #27
 8002b70:	21d0      	movs	r1, #208	; 0xd0
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f002 fdac 	bl	80056d0 <HAL_I2C_Mem_Write>
        return 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e000      	b.n	8002b7e <MPU6050_Init+0xa6>
    }
    return 1;
 8002b7c:	2301      	movs	r3, #1
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b8c:	b094      	sub	sp, #80	; 0x50
 8002b8e:	af04      	add	r7, sp, #16
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002b94:	2364      	movs	r3, #100	; 0x64
 8002b96:	9302      	str	r3, [sp, #8]
 8002b98:	230e      	movs	r3, #14
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	f107 0308 	add.w	r3, r7, #8
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	223b      	movs	r2, #59	; 0x3b
 8002ba6:	21d0      	movs	r1, #208	; 0xd0
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f002 fe8b 	bl	80058c4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002bae:	7a3b      	ldrb	r3, [r7, #8]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	b21a      	sxth	r2, r3
 8002bb4:	7a7b      	ldrb	r3, [r7, #9]
 8002bb6:	b21b      	sxth	r3, r3
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	b21a      	sxth	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002bc0:	7abb      	ldrb	r3, [r7, #10]
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	b21a      	sxth	r2, r3
 8002bc6:	7afb      	ldrb	r3, [r7, #11]
 8002bc8:	b21b      	sxth	r3, r3
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	b21a      	sxth	r2, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002bd2:	7b3b      	ldrb	r3, [r7, #12]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	b21a      	sxth	r2, r3
 8002bd8:	7b7b      	ldrb	r3, [r7, #13]
 8002bda:	b21b      	sxth	r3, r3
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	b21a      	sxth	r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002be4:	7bbb      	ldrb	r3, [r7, #14]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	b21a      	sxth	r2, r3
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	b21b      	sxth	r3, r3
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8002bf2:	7c3b      	ldrb	r3, [r7, #16]
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	b21a      	sxth	r2, r3
 8002bf8:	7c7b      	ldrb	r3, [r7, #17]
 8002bfa:	b21b      	sxth	r3, r3
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	b21a      	sxth	r2, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8002c04:	7cbb      	ldrb	r3, [r7, #18]
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	b21a      	sxth	r2, r3
 8002c0a:	7cfb      	ldrb	r3, [r7, #19]
 8002c0c:	b21b      	sxth	r3, r3
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	b21a      	sxth	r2, r3
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002c16:	7d3b      	ldrb	r3, [r7, #20]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	b21a      	sxth	r2, r3
 8002c1c:	7d7b      	ldrb	r3, [r7, #21]
 8002c1e:	b21b      	sxth	r3, r3
 8002c20:	4313      	orrs	r3, r2
 8002c22:	b21a      	sxth	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fc1c 	bl	800046c <__aeabi_i2d>
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	4bbd      	ldr	r3, [pc, #756]	; (8002f30 <MPU6050_Read_All+0x3a8>)
 8002c3a:	f7fd fdab 	bl	8000794 <__aeabi_ddiv>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	6839      	ldr	r1, [r7, #0]
 8002c44:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fc0c 	bl	800046c <__aeabi_i2d>
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	4bb5      	ldr	r3, [pc, #724]	; (8002f30 <MPU6050_Read_All+0x3a8>)
 8002c5a:	f7fd fd9b 	bl	8000794 <__aeabi_ddiv>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	6839      	ldr	r1, [r7, #0]
 8002c64:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fbfc 	bl	800046c <__aeabi_i2d>
 8002c74:	a3a8      	add	r3, pc, #672	; (adr r3, 8002f18 <MPU6050_Read_All+0x390>)
 8002c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7a:	f7fd fd8b 	bl	8000794 <__aeabi_ddiv>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	6839      	ldr	r1, [r7, #0]
 8002c84:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002c88:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002c8c:	ee07 3a90 	vmov	s15, r3
 8002c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c94:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8002f34 <MPU6050_Read_All+0x3ac>
 8002c98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c9c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002f38 <MPU6050_Read_All+0x3b0>
 8002ca0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fbdb 	bl	800046c <__aeabi_i2d>
 8002cb6:	a39a      	add	r3, pc, #616	; (adr r3, 8002f20 <MPU6050_Read_All+0x398>)
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f7fd fd6a 	bl	8000794 <__aeabi_ddiv>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	6839      	ldr	r1, [r7, #0]
 8002cc6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fbcb 	bl	800046c <__aeabi_i2d>
 8002cd6:	a392      	add	r3, pc, #584	; (adr r3, 8002f20 <MPU6050_Read_All+0x398>)
 8002cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cdc:	f7fd fd5a 	bl	8000794 <__aeabi_ddiv>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	6839      	ldr	r1, [r7, #0]
 8002ce6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd fbbb 	bl	800046c <__aeabi_i2d>
 8002cf6:	a38a      	add	r3, pc, #552	; (adr r3, 8002f20 <MPU6050_Read_All+0x398>)
 8002cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfc:	f7fd fd4a 	bl	8000794 <__aeabi_ddiv>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	6839      	ldr	r1, [r7, #0]
 8002d06:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002d0a:	f000 fb0f 	bl	800332c <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	4b8a      	ldr	r3, [pc, #552]	; (8002f3c <MPU6050_Read_All+0x3b4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd fb98 	bl	800044c <__aeabi_ui2d>
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	4b87      	ldr	r3, [pc, #540]	; (8002f40 <MPU6050_Read_All+0x3b8>)
 8002d22:	f7fd fd37 	bl	8000794 <__aeabi_ddiv>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002d2e:	f000 fafd 	bl	800332c <HAL_GetTick>
 8002d32:	4603      	mov	r3, r0
 8002d34:	4a81      	ldr	r2, [pc, #516]	; (8002f3c <MPU6050_Read_All+0x3b4>)
 8002d36:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d46:	fb03 f202 	mul.w	r2, r3, r2
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d50:	4619      	mov	r1, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d58:	fb03 f301 	mul.w	r3, r3, r1
 8002d5c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fb84 	bl	800046c <__aeabi_i2d>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	ec43 2b10 	vmov	d0, r2, r3
 8002d6c:	f009 fdd4 	bl	800c918 <sqrt>
 8002d70:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d80:	f7fd fe46 	bl	8000a10 <__aeabi_dcmpeq>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d11f      	bne.n	8002dca <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd fb6b 	bl	800046c <__aeabi_i2d>
 8002d96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d9a:	f7fd fcfb 	bl	8000794 <__aeabi_ddiv>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	ec43 2b17 	vmov	d7, r2, r3
 8002da6:	eeb0 0a47 	vmov.f32	s0, s14
 8002daa:	eef0 0a67 	vmov.f32	s1, s15
 8002dae:	f009 fc07 	bl	800c5c0 <atan>
 8002db2:	ec51 0b10 	vmov	r0, r1, d0
 8002db6:	a35c      	add	r3, pc, #368	; (adr r3, 8002f28 <MPU6050_Read_All+0x3a0>)
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	f7fd fbc0 	bl	8000540 <__aeabi_dmul>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002dc8:	e005      	b.n	8002dd6 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ddc:	425b      	negs	r3, r3
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fd fb44 	bl	800046c <__aeabi_i2d>
 8002de4:	4682      	mov	sl, r0
 8002de6:	468b      	mov	fp, r1
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fb3c 	bl	800046c <__aeabi_i2d>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	ec43 2b11 	vmov	d1, r2, r3
 8002dfc:	ec4b ab10 	vmov	d0, sl, fp
 8002e00:	f009 fd87 	bl	800c912 <atan2>
 8002e04:	ec51 0b10 	vmov	r0, r1, d0
 8002e08:	a347      	add	r3, pc, #284	; (adr r3, 8002f28 <MPU6050_Read_All+0x3a0>)
 8002e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0e:	f7fd fb97 	bl	8000540 <__aeabi_dmul>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	4b49      	ldr	r3, [pc, #292]	; (8002f44 <MPU6050_Read_All+0x3bc>)
 8002e20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e24:	f7fd fdfe 	bl	8000a24 <__aeabi_dcmplt>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <MPU6050_Read_All+0x2bc>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <MPU6050_Read_All+0x3c0>)
 8002e3a:	f7fd fe11 	bl	8000a60 <__aeabi_dcmpgt>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d114      	bne.n	8002e6e <MPU6050_Read_All+0x2e6>
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	4b3f      	ldr	r3, [pc, #252]	; (8002f48 <MPU6050_Read_All+0x3c0>)
 8002e4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e4e:	f7fd fe07 	bl	8000a60 <__aeabi_dcmpgt>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d015      	beq.n	8002e84 <MPU6050_Read_All+0x2fc>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	4b38      	ldr	r3, [pc, #224]	; (8002f44 <MPU6050_Read_All+0x3bc>)
 8002e64:	f7fd fdde 	bl	8000a24 <__aeabi_dcmplt>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8002e6e:	4937      	ldr	r1, [pc, #220]	; (8002f4c <MPU6050_Read_All+0x3c4>)
 8002e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e74:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002e78:	6839      	ldr	r1, [r7, #0]
 8002e7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e7e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002e82:	e014      	b.n	8002eae <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002e8a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002e8e:	eeb0 1a47 	vmov.f32	s2, s14
 8002e92:	eef0 1a67 	vmov.f32	s3, s15
 8002e96:	ed97 0b06 	vldr	d0, [r7, #24]
 8002e9a:	482c      	ldr	r0, [pc, #176]	; (8002f4c <MPU6050_Read_All+0x3c4>)
 8002e9c:	f000 f85a 	bl	8002f54 <Kalman_getAngle>
 8002ea0:	eeb0 7a40 	vmov.f32	s14, s0
 8002ea4:	eef0 7a60 	vmov.f32	s15, s1
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002eb4:	4690      	mov	r8, r2
 8002eb6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <MPU6050_Read_All+0x3c0>)
 8002ec0:	4640      	mov	r0, r8
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	f7fd fdcc 	bl	8000a60 <__aeabi_dcmpgt>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002ed4:	4614      	mov	r4, r2
 8002ed6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002ee6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002eea:	eeb0 1a47 	vmov.f32	s2, s14
 8002eee:	eef0 1a67 	vmov.f32	s3, s15
 8002ef2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002ef6:	4816      	ldr	r0, [pc, #88]	; (8002f50 <MPU6050_Read_All+0x3c8>)
 8002ef8:	f000 f82c 	bl	8002f54 <Kalman_getAngle>
 8002efc:	eeb0 7a40 	vmov.f32	s14, s0
 8002f00:	eef0 7a60 	vmov.f32	s15, s1
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8002f0a:	bf00      	nop
 8002f0c:	3740      	adds	r7, #64	; 0x40
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f14:	f3af 8000 	nop.w
 8002f18:	00000000 	.word	0x00000000
 8002f1c:	40cc2900 	.word	0x40cc2900
 8002f20:	00000000 	.word	0x00000000
 8002f24:	40606000 	.word	0x40606000
 8002f28:	1a63c1f8 	.word	0x1a63c1f8
 8002f2c:	404ca5dc 	.word	0x404ca5dc
 8002f30:	40d00000 	.word	0x40d00000
 8002f34:	43aa0000 	.word	0x43aa0000
 8002f38:	42121eb8 	.word	0x42121eb8
 8002f3c:	20000428 	.word	0x20000428
 8002f40:	408f4000 	.word	0x408f4000
 8002f44:	c0568000 	.word	0xc0568000
 8002f48:	40568000 	.word	0x40568000
 8002f4c:	20000060 	.word	0x20000060
 8002f50:	20000018 	.word	0x20000018

08002f54 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002f54:	b5b0      	push	{r4, r5, r7, lr}
 8002f56:	b096      	sub	sp, #88	; 0x58
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	61f8      	str	r0, [r7, #28]
 8002f5c:	ed87 0b04 	vstr	d0, [r7, #16]
 8002f60:	ed87 1b02 	vstr	d1, [r7, #8]
 8002f64:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002f6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f72:	f7fd f92d 	bl	80001d0 <__aeabi_dsub>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002f84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f8c:	f7fd fad8 	bl	8000540 <__aeabi_dmul>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4620      	mov	r0, r4
 8002f96:	4629      	mov	r1, r5
 8002f98:	f7fd f91c 	bl	80001d4 <__adddf3>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	69f9      	ldr	r1, [r7, #28]
 8002fa2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fb6:	f7fd fac3 	bl	8000540 <__aeabi_dmul>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002fc8:	f7fd f902 	bl	80001d0 <__aeabi_dsub>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002fda:	f7fd f8f9 	bl	80001d0 <__aeabi_dsub>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fec:	f7fd f8f2 	bl	80001d4 <__adddf3>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ffc:	f7fd faa0 	bl	8000540 <__aeabi_dmul>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4620      	mov	r0, r4
 8003006:	4629      	mov	r1, r5
 8003008:	f7fd f8e4 	bl	80001d4 <__adddf3>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	69f9      	ldr	r1, [r7, #28]
 8003012:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003026:	f7fd fa8b 	bl	8000540 <__aeabi_dmul>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4620      	mov	r0, r4
 8003030:	4629      	mov	r1, r5
 8003032:	f7fd f8cd 	bl	80001d0 <__aeabi_dsub>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	69f9      	ldr	r1, [r7, #28]
 800303c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800304c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003050:	f7fd fa76 	bl	8000540 <__aeabi_dmul>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4620      	mov	r0, r4
 800305a:	4629      	mov	r1, r5
 800305c:	f7fd f8b8 	bl	80001d0 <__aeabi_dsub>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	69f9      	ldr	r1, [r7, #28]
 8003066:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800307a:	f7fd fa61 	bl	8000540 <__aeabi_dmul>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4620      	mov	r0, r4
 8003084:	4629      	mov	r1, r5
 8003086:	f7fd f8a5 	bl	80001d4 <__adddf3>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	69f9      	ldr	r1, [r7, #28]
 8003090:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030a0:	f7fd f898 	bl	80001d4 <__adddf3>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80030b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030b6:	f7fd fb6d 	bl	8000794 <__aeabi_ddiv>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80030c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030cc:	f7fd fb62 	bl	8000794 <__aeabi_ddiv>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80030de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030e2:	f7fd f875 	bl	80001d0 <__aeabi_dsub>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80030f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80030f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030fc:	f7fd fa20 	bl	8000540 <__aeabi_dmul>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4620      	mov	r0, r4
 8003106:	4629      	mov	r1, r5
 8003108:	f7fd f864 	bl	80001d4 <__adddf3>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	69f9      	ldr	r1, [r7, #28]
 8003112:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800311c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003120:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003124:	f7fd fa0c 	bl	8000540 <__aeabi_dmul>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4620      	mov	r0, r4
 800312e:	4629      	mov	r1, r5
 8003130:	f7fd f850 	bl	80001d4 <__adddf3>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	69f9      	ldr	r1, [r7, #28]
 800313a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003144:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800314e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003158:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800315c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003160:	f7fd f9ee 	bl	8000540 <__aeabi_dmul>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4620      	mov	r0, r4
 800316a:	4629      	mov	r1, r5
 800316c:	f7fd f830 	bl	80001d0 <__aeabi_dsub>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	69f9      	ldr	r1, [r7, #28]
 8003176:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003180:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003184:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003188:	f7fd f9da 	bl	8000540 <__aeabi_dmul>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4620      	mov	r0, r4
 8003192:	4629      	mov	r1, r5
 8003194:	f7fd f81c 	bl	80001d0 <__aeabi_dsub>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	69f9      	ldr	r1, [r7, #28]
 800319e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80031a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031b0:	f7fd f9c6 	bl	8000540 <__aeabi_dmul>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4620      	mov	r0, r4
 80031ba:	4629      	mov	r1, r5
 80031bc:	f7fd f808 	bl	80001d0 <__aeabi_dsub>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	69f9      	ldr	r1, [r7, #28]
 80031c6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80031d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031d8:	f7fd f9b2 	bl	8000540 <__aeabi_dmul>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4620      	mov	r0, r4
 80031e2:	4629      	mov	r1, r5
 80031e4:	f7fc fff4 	bl	80001d0 <__aeabi_dsub>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	69f9      	ldr	r1, [r7, #28]
 80031ee:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80031f8:	ec43 2b17 	vmov	d7, r2, r3
};
 80031fc:	eeb0 0a47 	vmov.f32	s0, s14
 8003200:	eef0 0a67 	vmov.f32	s1, s15
 8003204:	3758      	adds	r7, #88	; 0x58
 8003206:	46bd      	mov	sp, r7
 8003208:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800320c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800320c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003244 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003210:	480d      	ldr	r0, [pc, #52]	; (8003248 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003212:	490e      	ldr	r1, [pc, #56]	; (800324c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003214:	4a0e      	ldr	r2, [pc, #56]	; (8003250 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003218:	e002      	b.n	8003220 <LoopCopyDataInit>

0800321a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800321a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800321c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800321e:	3304      	adds	r3, #4

08003220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003224:	d3f9      	bcc.n	800321a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003226:	4a0b      	ldr	r2, [pc, #44]	; (8003254 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003228:	4c0b      	ldr	r4, [pc, #44]	; (8003258 <LoopFillZerobss+0x26>)
  movs r3, #0
 800322a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800322c:	e001      	b.n	8003232 <LoopFillZerobss>

0800322e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800322e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003230:	3204      	adds	r2, #4

08003232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003234:	d3fb      	bcc.n	800322e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003236:	f7ff fc3d 	bl	8002ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800323a:	f009 f8bb 	bl	800c3b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800323e:	f7fe fc9f 	bl	8001b80 <main>
  bx  lr    
 8003242:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003244:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800324c:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8003250:	0800cd38 	.word	0x0800cd38
  ldr r2, =_sbss
 8003254:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8003258:	20000b1c 	.word	0x20000b1c

0800325c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800325c:	e7fe      	b.n	800325c <ADC_IRQHandler>
	...

08003260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003264:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <HAL_Init+0x40>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a0d      	ldr	r2, [pc, #52]	; (80032a0 <HAL_Init+0x40>)
 800326a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800326e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_Init+0x40>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <HAL_Init+0x40>)
 8003276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800327a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800327c:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <HAL_Init+0x40>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a07      	ldr	r2, [pc, #28]	; (80032a0 <HAL_Init+0x40>)
 8003282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003286:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003288:	2003      	movs	r0, #3
 800328a:	f000 f94f 	bl	800352c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800328e:	2000      	movs	r0, #0
 8003290:	f000 f808 	bl	80032a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003294:	f7ff f900 	bl	8002498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023c00 	.word	0x40023c00

080032a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <HAL_InitTick+0x54>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4b12      	ldr	r3, [pc, #72]	; (80032fc <HAL_InitTick+0x58>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	4619      	mov	r1, r3
 80032b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80032be:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f967 	bl	8003596 <HAL_SYSTICK_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e00e      	b.n	80032f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b0f      	cmp	r3, #15
 80032d6:	d80a      	bhi.n	80032ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032d8:	2200      	movs	r2, #0
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032e0:	f000 f92f 	bl	8003542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032e4:	4a06      	ldr	r2, [pc, #24]	; (8003300 <HAL_InitTick+0x5c>)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	e000      	b.n	80032f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000010 	.word	0x20000010
 80032fc:	200000ac 	.word	0x200000ac
 8003300:	200000a8 	.word	0x200000a8

08003304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_IncTick+0x20>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_IncTick+0x24>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4413      	add	r3, r2
 8003314:	4a04      	ldr	r2, [pc, #16]	; (8003328 <HAL_IncTick+0x24>)
 8003316:	6013      	str	r3, [r2, #0]
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	200000ac 	.word	0x200000ac
 8003328:	2000042c 	.word	0x2000042c

0800332c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return uwTick;
 8003330:	4b03      	ldr	r3, [pc, #12]	; (8003340 <HAL_GetTick+0x14>)
 8003332:	681b      	ldr	r3, [r3, #0]
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	2000042c 	.word	0x2000042c

08003344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800334c:	f7ff ffee 	bl	800332c <HAL_GetTick>
 8003350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800335c:	d005      	beq.n	800336a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800335e:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <HAL_Delay+0x44>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800336a:	bf00      	nop
 800336c:	f7ff ffde 	bl	800332c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	429a      	cmp	r2, r3
 800337a:	d8f7      	bhi.n	800336c <HAL_Delay+0x28>
  {
  }
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	200000ac 	.word	0x200000ac

0800338c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <__NVIC_SetPriorityGrouping+0x44>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a8:	4013      	ands	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033be:	4a04      	ldr	r2, [pc, #16]	; (80033d0 <__NVIC_SetPriorityGrouping+0x44>)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	60d3      	str	r3, [r2, #12]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <__NVIC_GetPriorityGrouping+0x18>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	0a1b      	lsrs	r3, r3, #8
 80033de:	f003 0307 	and.w	r3, r3, #7
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	db0b      	blt.n	800341a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	f003 021f 	and.w	r2, r3, #31
 8003408:	4907      	ldr	r1, [pc, #28]	; (8003428 <__NVIC_EnableIRQ+0x38>)
 800340a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	2001      	movs	r0, #1
 8003412:	fa00 f202 	lsl.w	r2, r0, r2
 8003416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000e100 	.word	0xe000e100

0800342c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343c:	2b00      	cmp	r3, #0
 800343e:	db0a      	blt.n	8003456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	b2da      	uxtb	r2, r3
 8003444:	490c      	ldr	r1, [pc, #48]	; (8003478 <__NVIC_SetPriority+0x4c>)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	0112      	lsls	r2, r2, #4
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	440b      	add	r3, r1
 8003450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003454:	e00a      	b.n	800346c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	4908      	ldr	r1, [pc, #32]	; (800347c <__NVIC_SetPriority+0x50>)
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	3b04      	subs	r3, #4
 8003464:	0112      	lsls	r2, r2, #4
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	440b      	add	r3, r1
 800346a:	761a      	strb	r2, [r3, #24]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000e100 	.word	0xe000e100
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003480:	b480      	push	{r7}
 8003482:	b089      	sub	sp, #36	; 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f1c3 0307 	rsb	r3, r3, #7
 800349a:	2b04      	cmp	r3, #4
 800349c:	bf28      	it	cs
 800349e:	2304      	movcs	r3, #4
 80034a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3304      	adds	r3, #4
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d902      	bls.n	80034b0 <NVIC_EncodePriority+0x30>
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3b03      	subs	r3, #3
 80034ae:	e000      	b.n	80034b2 <NVIC_EncodePriority+0x32>
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43da      	mvns	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	401a      	ands	r2, r3
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	fa01 f303 	lsl.w	r3, r1, r3
 80034d2:	43d9      	mvns	r1, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d8:	4313      	orrs	r3, r2
         );
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3724      	adds	r7, #36	; 0x24
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f8:	d301      	bcc.n	80034fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034fa:	2301      	movs	r3, #1
 80034fc:	e00f      	b.n	800351e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034fe:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <SysTick_Config+0x40>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3b01      	subs	r3, #1
 8003504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003506:	210f      	movs	r1, #15
 8003508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800350c:	f7ff ff8e 	bl	800342c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <SysTick_Config+0x40>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003516:	4b04      	ldr	r3, [pc, #16]	; (8003528 <SysTick_Config+0x40>)
 8003518:	2207      	movs	r2, #7
 800351a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	e000e010 	.word	0xe000e010

0800352c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ff29 	bl	800338c <__NVIC_SetPriorityGrouping>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	4603      	mov	r3, r0
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003554:	f7ff ff3e 	bl	80033d4 <__NVIC_GetPriorityGrouping>
 8003558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	6978      	ldr	r0, [r7, #20]
 8003560:	f7ff ff8e 	bl	8003480 <NVIC_EncodePriority>
 8003564:	4602      	mov	r2, r0
 8003566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff ff5d 	bl	800342c <__NVIC_SetPriority>
}
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff31 	bl	80033f0 <__NVIC_EnableIRQ>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff ffa2 	bl	80034e8 <SysTick_Config>
 80035a4:	4603      	mov	r3, r0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e16b      	b.n	80038a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035cc:	2201      	movs	r2, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	f040 815a 	bne.w	800389e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d005      	beq.n	8003602 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d130      	bne.n	8003664 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	2203      	movs	r2, #3
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003638:	2201      	movs	r2, #1
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 0201 	and.w	r2, r3, #1
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	2b03      	cmp	r3, #3
 800366e:	d017      	beq.n	80036a0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	2203      	movs	r2, #3
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d123      	bne.n	80036f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	08da      	lsrs	r2, r3, #3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3208      	adds	r2, #8
 80036b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	220f      	movs	r2, #15
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	08da      	lsrs	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3208      	adds	r2, #8
 80036ee:	69b9      	ldr	r1, [r7, #24]
 80036f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	2203      	movs	r2, #3
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0203 	and.w	r2, r3, #3
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80b4 	beq.w	800389e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	4b60      	ldr	r3, [pc, #384]	; (80038bc <HAL_GPIO_Init+0x30c>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	4a5f      	ldr	r2, [pc, #380]	; (80038bc <HAL_GPIO_Init+0x30c>)
 8003740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003744:	6453      	str	r3, [r2, #68]	; 0x44
 8003746:	4b5d      	ldr	r3, [pc, #372]	; (80038bc <HAL_GPIO_Init+0x30c>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003752:	4a5b      	ldr	r2, [pc, #364]	; (80038c0 <HAL_GPIO_Init+0x310>)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	3302      	adds	r3, #2
 800375a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	220f      	movs	r2, #15
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a52      	ldr	r2, [pc, #328]	; (80038c4 <HAL_GPIO_Init+0x314>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d02b      	beq.n	80037d6 <HAL_GPIO_Init+0x226>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a51      	ldr	r2, [pc, #324]	; (80038c8 <HAL_GPIO_Init+0x318>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d025      	beq.n	80037d2 <HAL_GPIO_Init+0x222>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a50      	ldr	r2, [pc, #320]	; (80038cc <HAL_GPIO_Init+0x31c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d01f      	beq.n	80037ce <HAL_GPIO_Init+0x21e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4f      	ldr	r2, [pc, #316]	; (80038d0 <HAL_GPIO_Init+0x320>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d019      	beq.n	80037ca <HAL_GPIO_Init+0x21a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a4e      	ldr	r2, [pc, #312]	; (80038d4 <HAL_GPIO_Init+0x324>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <HAL_GPIO_Init+0x216>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a4d      	ldr	r2, [pc, #308]	; (80038d8 <HAL_GPIO_Init+0x328>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00d      	beq.n	80037c2 <HAL_GPIO_Init+0x212>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4c      	ldr	r2, [pc, #304]	; (80038dc <HAL_GPIO_Init+0x32c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d007      	beq.n	80037be <HAL_GPIO_Init+0x20e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a4b      	ldr	r2, [pc, #300]	; (80038e0 <HAL_GPIO_Init+0x330>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d101      	bne.n	80037ba <HAL_GPIO_Init+0x20a>
 80037b6:	2307      	movs	r3, #7
 80037b8:	e00e      	b.n	80037d8 <HAL_GPIO_Init+0x228>
 80037ba:	2308      	movs	r3, #8
 80037bc:	e00c      	b.n	80037d8 <HAL_GPIO_Init+0x228>
 80037be:	2306      	movs	r3, #6
 80037c0:	e00a      	b.n	80037d8 <HAL_GPIO_Init+0x228>
 80037c2:	2305      	movs	r3, #5
 80037c4:	e008      	b.n	80037d8 <HAL_GPIO_Init+0x228>
 80037c6:	2304      	movs	r3, #4
 80037c8:	e006      	b.n	80037d8 <HAL_GPIO_Init+0x228>
 80037ca:	2303      	movs	r3, #3
 80037cc:	e004      	b.n	80037d8 <HAL_GPIO_Init+0x228>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e002      	b.n	80037d8 <HAL_GPIO_Init+0x228>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_GPIO_Init+0x228>
 80037d6:	2300      	movs	r3, #0
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	f002 0203 	and.w	r2, r2, #3
 80037de:	0092      	lsls	r2, r2, #2
 80037e0:	4093      	lsls	r3, r2
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037e8:	4935      	ldr	r1, [pc, #212]	; (80038c0 <HAL_GPIO_Init+0x310>)
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	089b      	lsrs	r3, r3, #2
 80037ee:	3302      	adds	r3, #2
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037f6:	4b3b      	ldr	r3, [pc, #236]	; (80038e4 <HAL_GPIO_Init+0x334>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	43db      	mvns	r3, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4013      	ands	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800381a:	4a32      	ldr	r2, [pc, #200]	; (80038e4 <HAL_GPIO_Init+0x334>)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003820:	4b30      	ldr	r3, [pc, #192]	; (80038e4 <HAL_GPIO_Init+0x334>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003844:	4a27      	ldr	r2, [pc, #156]	; (80038e4 <HAL_GPIO_Init+0x334>)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800384a:	4b26      	ldr	r3, [pc, #152]	; (80038e4 <HAL_GPIO_Init+0x334>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800386e:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <HAL_GPIO_Init+0x334>)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003874:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <HAL_GPIO_Init+0x334>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003898:	4a12      	ldr	r2, [pc, #72]	; (80038e4 <HAL_GPIO_Init+0x334>)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3301      	adds	r3, #1
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2b0f      	cmp	r3, #15
 80038a8:	f67f ae90 	bls.w	80035cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	3724      	adds	r7, #36	; 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800
 80038c0:	40013800 	.word	0x40013800
 80038c4:	40020000 	.word	0x40020000
 80038c8:	40020400 	.word	0x40020400
 80038cc:	40020800 	.word	0x40020800
 80038d0:	40020c00 	.word	0x40020c00
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40021400 	.word	0x40021400
 80038dc:	40021800 	.word	0x40021800
 80038e0:	40021c00 	.word	0x40021c00
 80038e4:	40013c00 	.word	0x40013c00

080038e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	887b      	ldrh	r3, [r7, #2]
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
 8003904:	e001      	b.n	800390a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003906:	2300      	movs	r3, #0
 8003908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800390a:	7bfb      	ldrb	r3, [r7, #15]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
 8003924:	4613      	mov	r3, r2
 8003926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003928:	787b      	ldrb	r3, [r7, #1]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003934:	e003      	b.n	800393e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	041a      	lsls	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	619a      	str	r2, [r3, #24]
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800394a:	b480      	push	{r7}
 800394c:	b085      	sub	sp, #20
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	460b      	mov	r3, r1
 8003954:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800395c:	887a      	ldrh	r2, [r7, #2]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4013      	ands	r3, r2
 8003962:	041a      	lsls	r2, r3, #16
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	43d9      	mvns	r1, r3
 8003968:	887b      	ldrh	r3, [r7, #2]
 800396a:	400b      	ands	r3, r1
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	619a      	str	r2, [r3, #24]
}
 8003972:	bf00      	nop
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800397e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003980:	b08f      	sub	sp, #60	; 0x3c
 8003982:	af0a      	add	r7, sp, #40	; 0x28
 8003984:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e054      	b.n	8003a3a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f008 fa52 	bl	800be54 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2203      	movs	r2, #3
 80039b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f005 fbf4 	bl	80091bc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	603b      	str	r3, [r7, #0]
 80039da:	687e      	ldr	r6, [r7, #4]
 80039dc:	466d      	mov	r5, sp
 80039de:	f106 0410 	add.w	r4, r6, #16
 80039e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80039f2:	1d33      	adds	r3, r6, #4
 80039f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039f6:	6838      	ldr	r0, [r7, #0]
 80039f8:	f005 fb6e 	bl	80090d8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2101      	movs	r1, #1
 8003a02:	4618      	mov	r0, r3
 8003a04:	f005 fbeb 	bl	80091de <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	603b      	str	r3, [r7, #0]
 8003a0e:	687e      	ldr	r6, [r7, #4]
 8003a10:	466d      	mov	r5, sp
 8003a12:	f106 0410 	add.w	r4, r6, #16
 8003a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a22:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a26:	1d33      	adds	r3, r6, #4
 8003a28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a2a:	6838      	ldr	r0, [r7, #0]
 8003a2c:	f005 fcfe 	bl	800942c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a42 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003a42:	b590      	push	{r4, r7, lr}
 8003a44:	b089      	sub	sp, #36	; 0x24
 8003a46:	af04      	add	r7, sp, #16
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	4608      	mov	r0, r1
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4603      	mov	r3, r0
 8003a52:	70fb      	strb	r3, [r7, #3]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70bb      	strb	r3, [r7, #2]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_HCD_HC_Init+0x28>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e076      	b.n	8003b58 <HAL_HCD_HC_Init+0x116>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	212c      	movs	r1, #44	; 0x2c
 8003a78:	fb01 f303 	mul.w	r3, r1, r3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	333d      	adds	r3, #61	; 0x3d
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	212c      	movs	r1, #44	; 0x2c
 8003a8a:	fb01 f303 	mul.w	r3, r1, r3
 8003a8e:	4413      	add	r3, r2
 8003a90:	3338      	adds	r3, #56	; 0x38
 8003a92:	787a      	ldrb	r2, [r7, #1]
 8003a94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	212c      	movs	r1, #44	; 0x2c
 8003a9c:	fb01 f303 	mul.w	r3, r1, r3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3340      	adds	r3, #64	; 0x40
 8003aa4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003aa6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3339      	adds	r3, #57	; 0x39
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	212c      	movs	r1, #44	; 0x2c
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	333f      	adds	r3, #63	; 0x3f
 8003ac8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003acc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	78ba      	ldrb	r2, [r7, #2]
 8003ad2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ad6:	b2d0      	uxtb	r0, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	212c      	movs	r1, #44	; 0x2c
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	333a      	adds	r3, #58	; 0x3a
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003ae8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	da09      	bge.n	8003b04 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	212c      	movs	r1, #44	; 0x2c
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	4413      	add	r3, r2
 8003afc:	333b      	adds	r3, #59	; 0x3b
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	e008      	b.n	8003b16 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	333b      	adds	r3, #59	; 0x3b
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	212c      	movs	r1, #44	; 0x2c
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	4413      	add	r3, r2
 8003b22:	333c      	adds	r3, #60	; 0x3c
 8003b24:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003b28:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	787c      	ldrb	r4, [r7, #1]
 8003b30:	78ba      	ldrb	r2, [r7, #2]
 8003b32:	78f9      	ldrb	r1, [r7, #3]
 8003b34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b36:	9302      	str	r3, [sp, #8]
 8003b38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	4623      	mov	r3, r4
 8003b46:	f005 fdf3 	bl	8009730 <USB_HC_Init>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd90      	pop	{r4, r7, pc}

08003b60 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_HCD_HC_Halt+0x1e>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e00f      	b.n	8003b9e <HAL_HCD_HC_Halt+0x3e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f006 f82f 	bl	8009bf2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	4608      	mov	r0, r1
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	70fb      	strb	r3, [r7, #3]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	70bb      	strb	r3, [r7, #2]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	212c      	movs	r1, #44	; 0x2c
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	4413      	add	r3, r2
 8003bce:	333b      	adds	r3, #59	; 0x3b
 8003bd0:	78ba      	ldrb	r2, [r7, #2]
 8003bd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	212c      	movs	r1, #44	; 0x2c
 8003bda:	fb01 f303 	mul.w	r3, r1, r3
 8003bde:	4413      	add	r3, r2
 8003be0:	333f      	adds	r3, #63	; 0x3f
 8003be2:	787a      	ldrb	r2, [r7, #1]
 8003be4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003be6:	7c3b      	ldrb	r3, [r7, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d112      	bne.n	8003c12 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3342      	adds	r3, #66	; 0x42
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003bfe:	78fb      	ldrb	r3, [r7, #3]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	212c      	movs	r1, #44	; 0x2c
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	4413      	add	r3, r2
 8003c0a:	333d      	adds	r3, #61	; 0x3d
 8003c0c:	7f3a      	ldrb	r2, [r7, #28]
 8003c0e:	701a      	strb	r2, [r3, #0]
 8003c10:	e008      	b.n	8003c24 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	212c      	movs	r1, #44	; 0x2c
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3342      	adds	r3, #66	; 0x42
 8003c20:	2202      	movs	r2, #2
 8003c22:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003c24:	787b      	ldrb	r3, [r7, #1]
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	f200 80c6 	bhi.w	8003db8 <HAL_HCD_HC_SubmitRequest+0x210>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c45 	.word	0x08003c45
 8003c38:	08003da5 	.word	0x08003da5
 8003c3c:	08003ca9 	.word	0x08003ca9
 8003c40:	08003d27 	.word	0x08003d27
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003c44:	7c3b      	ldrb	r3, [r7, #16]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	f040 80b8 	bne.w	8003dbc <HAL_HCD_HC_SubmitRequest+0x214>
 8003c4c:	78bb      	ldrb	r3, [r7, #2]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 80b4 	bne.w	8003dbc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003c54:	8b3b      	ldrh	r3, [r7, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d108      	bne.n	8003c6c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	212c      	movs	r1, #44	; 0x2c
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	4413      	add	r3, r2
 8003c66:	3355      	adds	r3, #85	; 0x55
 8003c68:	2201      	movs	r2, #1
 8003c6a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	212c      	movs	r1, #44	; 0x2c
 8003c72:	fb01 f303 	mul.w	r3, r1, r3
 8003c76:	4413      	add	r3, r2
 8003c78:	3355      	adds	r3, #85	; 0x55
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d109      	bne.n	8003c94 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	212c      	movs	r1, #44	; 0x2c
 8003c86:	fb01 f303 	mul.w	r3, r1, r3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3342      	adds	r3, #66	; 0x42
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003c92:	e093      	b.n	8003dbc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	212c      	movs	r1, #44	; 0x2c
 8003c9a:	fb01 f303 	mul.w	r3, r1, r3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3342      	adds	r3, #66	; 0x42
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	701a      	strb	r2, [r3, #0]
      break;
 8003ca6:	e089      	b.n	8003dbc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003ca8:	78bb      	ldrb	r3, [r7, #2]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d11d      	bne.n	8003cea <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	212c      	movs	r1, #44	; 0x2c
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	3355      	adds	r3, #85	; 0x55
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	212c      	movs	r1, #44	; 0x2c
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	3342      	adds	r3, #66	; 0x42
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003cd4:	e073      	b.n	8003dbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3342      	adds	r3, #66	; 0x42
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	701a      	strb	r2, [r3, #0]
      break;
 8003ce8:	e069      	b.n	8003dbe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003cea:	78fb      	ldrb	r3, [r7, #3]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3354      	adds	r3, #84	; 0x54
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cfe:	78fb      	ldrb	r3, [r7, #3]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	212c      	movs	r1, #44	; 0x2c
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	4413      	add	r3, r2
 8003d0a:	3342      	adds	r3, #66	; 0x42
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
      break;
 8003d10:	e055      	b.n	8003dbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	212c      	movs	r1, #44	; 0x2c
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3342      	adds	r3, #66	; 0x42
 8003d20:	2202      	movs	r2, #2
 8003d22:	701a      	strb	r2, [r3, #0]
      break;
 8003d24:	e04b      	b.n	8003dbe <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003d26:	78bb      	ldrb	r3, [r7, #2]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d11d      	bne.n	8003d68 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	212c      	movs	r1, #44	; 0x2c
 8003d32:	fb01 f303 	mul.w	r3, r1, r3
 8003d36:	4413      	add	r3, r2
 8003d38:	3355      	adds	r3, #85	; 0x55
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d109      	bne.n	8003d54 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	212c      	movs	r1, #44	; 0x2c
 8003d46:	fb01 f303 	mul.w	r3, r1, r3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3342      	adds	r3, #66	; 0x42
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003d52:	e034      	b.n	8003dbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	212c      	movs	r1, #44	; 0x2c
 8003d5a:	fb01 f303 	mul.w	r3, r1, r3
 8003d5e:	4413      	add	r3, r2
 8003d60:	3342      	adds	r3, #66	; 0x42
 8003d62:	2202      	movs	r2, #2
 8003d64:	701a      	strb	r2, [r3, #0]
      break;
 8003d66:	e02a      	b.n	8003dbe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	212c      	movs	r1, #44	; 0x2c
 8003d6e:	fb01 f303 	mul.w	r3, r1, r3
 8003d72:	4413      	add	r3, r2
 8003d74:	3354      	adds	r3, #84	; 0x54
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d109      	bne.n	8003d90 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	212c      	movs	r1, #44	; 0x2c
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	3342      	adds	r3, #66	; 0x42
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	701a      	strb	r2, [r3, #0]
      break;
 8003d8e:	e016      	b.n	8003dbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	212c      	movs	r1, #44	; 0x2c
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3342      	adds	r3, #66	; 0x42
 8003d9e:	2202      	movs	r2, #2
 8003da0:	701a      	strb	r2, [r3, #0]
      break;
 8003da2:	e00c      	b.n	8003dbe <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	212c      	movs	r1, #44	; 0x2c
 8003daa:	fb01 f303 	mul.w	r3, r1, r3
 8003dae:	4413      	add	r3, r2
 8003db0:	3342      	adds	r3, #66	; 0x42
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]
      break;
 8003db6:	e002      	b.n	8003dbe <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003db8:	bf00      	nop
 8003dba:	e000      	b.n	8003dbe <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003dbc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	212c      	movs	r1, #44	; 0x2c
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	3344      	adds	r3, #68	; 0x44
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	8b3a      	ldrh	r2, [r7, #24]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	202c      	movs	r0, #44	; 0x2c
 8003dd8:	fb00 f303 	mul.w	r3, r0, r3
 8003ddc:	440b      	add	r3, r1
 8003dde:	334c      	adds	r3, #76	; 0x4c
 8003de0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	212c      	movs	r1, #44	; 0x2c
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	4413      	add	r3, r2
 8003dee:	3360      	adds	r3, #96	; 0x60
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	212c      	movs	r1, #44	; 0x2c
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	4413      	add	r3, r2
 8003e00:	3350      	adds	r3, #80	; 0x50
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003e06:	78fb      	ldrb	r3, [r7, #3]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	212c      	movs	r1, #44	; 0x2c
 8003e0c:	fb01 f303 	mul.w	r3, r1, r3
 8003e10:	4413      	add	r3, r2
 8003e12:	3339      	adds	r3, #57	; 0x39
 8003e14:	78fa      	ldrb	r2, [r7, #3]
 8003e16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3361      	adds	r3, #97	; 0x61
 8003e26:	2200      	movs	r2, #0
 8003e28:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	222c      	movs	r2, #44	; 0x2c
 8003e32:	fb02 f303 	mul.w	r3, r2, r3
 8003e36:	3338      	adds	r3, #56	; 0x38
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	18d1      	adds	r1, r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	f005 fd82 	bl	800994c <USB_HC_StartXfer>
 8003e48:	4603      	mov	r3, r0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop

08003e54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f005 fa9b 	bl	80093a6 <USB_GetMode>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	f040 80ef 	bne.w	8004056 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f005 fa7f 	bl	8009380 <USB_ReadInterrupts>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80e5 	beq.w	8004054 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f005 fa76 	bl	8009380 <USB_ReadInterrupts>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e9e:	d104      	bne.n	8003eaa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003ea8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f005 fa66 	bl	8009380 <USB_ReadInterrupts>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ebe:	d104      	bne.n	8003eca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ec8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f005 fa56 	bl	8009380 <USB_ReadInterrupts>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ede:	d104      	bne.n	8003eea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ee8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f005 fa46 	bl	8009380 <USB_ReadInterrupts>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d103      	bne.n	8003f06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2202      	movs	r2, #2
 8003f04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f005 fa38 	bl	8009380 <USB_ReadInterrupts>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f1a:	d115      	bne.n	8003f48 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003f24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d108      	bne.n	8003f48 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f008 f80a 	bl	800bf50 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2101      	movs	r1, #1
 8003f42:	4618      	mov	r0, r3
 8003f44:	f005 fb2e 	bl	80095a4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f005 fa17 	bl	8009380 <USB_ReadInterrupts>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f5c:	d102      	bne.n	8003f64 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f001 f9ff 	bl	8005362 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f005 fa09 	bl	8009380 <USB_ReadInterrupts>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d106      	bne.n	8003f86 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f007 ffcd 	bl	800bf18 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2208      	movs	r2, #8
 8003f84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f005 f9f8 	bl	8009380 <USB_ReadInterrupts>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d101      	bne.n	8003f9e <HAL_HCD_IRQHandler+0x14a>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <HAL_HCD_IRQHandler+0x14c>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d012      	beq.n	8003fca <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0210 	bic.w	r2, r2, #16
 8003fb2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f001 f902 	bl	80051be <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	699a      	ldr	r2, [r3, #24]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 0210 	orr.w	r2, r2, #16
 8003fc8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f005 f9d6 	bl	8009380 <USB_ReadInterrupts>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fde:	d13a      	bne.n	8004056 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f005 fdf3 	bl	8009bd0 <USB_HC_ReadInterrupt>
 8003fea:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	e025      	b.n	800403e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d018      	beq.n	8004038 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4413      	add	r3, r2
 800400e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401c:	d106      	bne.n	800402c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	4619      	mov	r1, r3
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f8ab 	bl	8004180 <HCD_HC_IN_IRQHandler>
 800402a:	e005      	b.n	8004038 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	4619      	mov	r1, r3
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fcc6 	bl	80049c4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	3301      	adds	r3, #1
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	429a      	cmp	r2, r3
 8004046:	d3d4      	bcc.n	8003ff2 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004050:	615a      	str	r2, [r3, #20]
 8004052:	e000      	b.n	8004056 <HAL_HCD_IRQHandler+0x202>
      return;
 8004054:	bf00      	nop
    }
  }
}
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_HCD_Start+0x16>
 800406e:	2302      	movs	r3, #2
 8004070:	e013      	b.n	800409a <HAL_HCD_Start+0x3e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f005 f88b 	bl	800919a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2101      	movs	r1, #1
 800408a:	4618      	mov	r0, r3
 800408c:	f005 faee 	bl	800966c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_HCD_Stop+0x16>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e00d      	b.n	80040d4 <HAL_HCD_Stop+0x32>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f005 feed 	bl	8009ea4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f005 fa95 	bl	8009618 <USB_ResetPort>
 80040ee:	4603      	mov	r3, r0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	212c      	movs	r1, #44	; 0x2c
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	4413      	add	r3, r2
 8004110:	3360      	adds	r3, #96	; 0x60
 8004112:	781b      	ldrb	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	212c      	movs	r1, #44	; 0x2c
 8004132:	fb01 f303 	mul.w	r3, r1, r3
 8004136:	4413      	add	r3, r2
 8004138:	3350      	adds	r3, #80	; 0x50
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f005 fad9 	bl	800970c <USB_GetCurrentFrame>
 800415a:	4603      	mov	r3, r0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f005 fab4 	bl	80096de <USB_GetHostSpeed>
 8004176:	4603      	mov	r3, r0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	460b      	mov	r3, r1
 800418a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d119      	bne.n	80041e4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041bc:	461a      	mov	r2, r3
 80041be:	2304      	movs	r3, #4
 80041c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	0151      	lsls	r1, r2, #5
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	440a      	add	r2, r1
 80041d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041dc:	f043 0302 	orr.w	r3, r3, #2
 80041e0:	60d3      	str	r3, [r2, #12]
 80041e2:	e101      	b.n	80043e8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fa:	d12b      	bne.n	8004254 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4413      	add	r3, r2
 8004204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004208:	461a      	mov	r2, r3
 800420a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800420e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	212c      	movs	r1, #44	; 0x2c
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	4413      	add	r3, r2
 800421c:	3361      	adds	r3, #97	; 0x61
 800421e:	2207      	movs	r2, #7
 8004220:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4413      	add	r3, r2
 800422a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	0151      	lsls	r1, r2, #5
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	440a      	add	r2, r1
 8004238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800423c:	f043 0302 	orr.w	r3, r3, #2
 8004240:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	4611      	mov	r1, r2
 800424c:	4618      	mov	r0, r3
 800424e:	f005 fcd0 	bl	8009bf2 <USB_HC_Halt>
 8004252:	e0c9      	b.n	80043e8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4413      	add	r3, r2
 800425c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b20      	cmp	r3, #32
 8004268:	d109      	bne.n	800427e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4413      	add	r3, r2
 8004272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004276:	461a      	mov	r2, r3
 8004278:	2320      	movs	r3, #32
 800427a:	6093      	str	r3, [r2, #8]
 800427c:	e0b4      	b.n	80043e8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4413      	add	r3, r2
 8004286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b08      	cmp	r3, #8
 8004292:	d133      	bne.n	80042fc <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4413      	add	r3, r2
 800429c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	0151      	lsls	r1, r2, #5
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	440a      	add	r2, r1
 80042aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ae:	f043 0302 	orr.w	r3, r3, #2
 80042b2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	212c      	movs	r1, #44	; 0x2c
 80042ba:	fb01 f303 	mul.w	r3, r1, r3
 80042be:	4413      	add	r3, r2
 80042c0:	3361      	adds	r3, #97	; 0x61
 80042c2:	2205      	movs	r2, #5
 80042c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d2:	461a      	mov	r2, r3
 80042d4:	2310      	movs	r3, #16
 80042d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e4:	461a      	mov	r2, r3
 80042e6:	2308      	movs	r3, #8
 80042e8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	4611      	mov	r1, r2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f005 fc7c 	bl	8009bf2 <USB_HC_Halt>
 80042fa:	e075      	b.n	80043e8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004312:	d134      	bne.n	800437e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4413      	add	r3, r2
 800431c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	0151      	lsls	r1, r2, #5
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	440a      	add	r2, r1
 800432a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800432e:	f043 0302 	orr.w	r3, r3, #2
 8004332:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	212c      	movs	r1, #44	; 0x2c
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	4413      	add	r3, r2
 8004340:	3361      	adds	r3, #97	; 0x61
 8004342:	2208      	movs	r2, #8
 8004344:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4413      	add	r3, r2
 800434e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004352:	461a      	mov	r2, r3
 8004354:	2310      	movs	r3, #16
 8004356:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4413      	add	r3, r2
 8004360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004364:	461a      	mov	r2, r3
 8004366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800436a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f005 fc3b 	bl	8009bf2 <USB_HC_Halt>
 800437c:	e034      	b.n	80043e8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	4413      	add	r3, r2
 8004386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004390:	2b80      	cmp	r3, #128	; 0x80
 8004392:	d129      	bne.n	80043e8 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4413      	add	r3, r2
 800439c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	0151      	lsls	r1, r2, #5
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	440a      	add	r2, r1
 80043aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ae:	f043 0302 	orr.w	r3, r3, #2
 80043b2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	212c      	movs	r1, #44	; 0x2c
 80043ba:	fb01 f303 	mul.w	r3, r1, r3
 80043be:	4413      	add	r3, r2
 80043c0:	3361      	adds	r3, #97	; 0x61
 80043c2:	2206      	movs	r2, #6
 80043c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f005 fc0e 	bl	8009bf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e2:	461a      	mov	r2, r3
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043fe:	d122      	bne.n	8004446 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4413      	add	r3, r2
 8004408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	0151      	lsls	r1, r2, #5
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	440a      	add	r2, r1
 8004416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800441a:	f043 0302 	orr.w	r3, r3, #2
 800441e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	4611      	mov	r1, r2
 800442a:	4618      	mov	r0, r3
 800442c:	f005 fbe1 	bl	8009bf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4413      	add	r3, r2
 8004438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443c:	461a      	mov	r2, r3
 800443e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004442:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004444:	e2ba      	b.n	80049bc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4413      	add	r3, r2
 800444e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b01      	cmp	r3, #1
 800445a:	f040 811b 	bne.w	8004694 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d019      	beq.n	800449a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	212c      	movs	r1, #44	; 0x2c
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	4413      	add	r3, r2
 8004472:	3348      	adds	r3, #72	; 0x48
 8004474:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	0159      	lsls	r1, r3, #5
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	440b      	add	r3, r1
 800447e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004488:	1ad2      	subs	r2, r2, r3
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	202c      	movs	r0, #44	; 0x2c
 8004490:	fb00 f303 	mul.w	r3, r0, r3
 8004494:	440b      	add	r3, r1
 8004496:	3350      	adds	r3, #80	; 0x50
 8004498:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	212c      	movs	r1, #44	; 0x2c
 80044a0:	fb01 f303 	mul.w	r3, r1, r3
 80044a4:	4413      	add	r3, r2
 80044a6:	3361      	adds	r3, #97	; 0x61
 80044a8:	2201      	movs	r2, #1
 80044aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	212c      	movs	r1, #44	; 0x2c
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	4413      	add	r3, r2
 80044b8:	335c      	adds	r3, #92	; 0x5c
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ca:	461a      	mov	r2, r3
 80044cc:	2301      	movs	r3, #1
 80044ce:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	212c      	movs	r1, #44	; 0x2c
 80044d6:	fb01 f303 	mul.w	r3, r1, r3
 80044da:	4413      	add	r3, r2
 80044dc:	333f      	adds	r3, #63	; 0x3f
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	212c      	movs	r1, #44	; 0x2c
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	4413      	add	r3, r2
 80044f0:	333f      	adds	r3, #63	; 0x3f
 80044f2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d121      	bne.n	800453c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	0151      	lsls	r1, r2, #5
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	440a      	add	r2, r1
 800450e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004512:	f043 0302 	orr.w	r3, r3, #2
 8004516:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	4611      	mov	r1, r2
 8004522:	4618      	mov	r0, r3
 8004524:	f005 fb65 	bl	8009bf2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4413      	add	r3, r2
 8004530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004534:	461a      	mov	r2, r3
 8004536:	2310      	movs	r3, #16
 8004538:	6093      	str	r3, [r2, #8]
 800453a:	e066      	b.n	800460a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	212c      	movs	r1, #44	; 0x2c
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	4413      	add	r3, r2
 8004548:	333f      	adds	r3, #63	; 0x3f
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b03      	cmp	r3, #3
 800454e:	d127      	bne.n	80045a0 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4413      	add	r3, r2
 8004558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	0151      	lsls	r1, r2, #5
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	440a      	add	r2, r1
 8004566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800456a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800456e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	212c      	movs	r1, #44	; 0x2c
 8004576:	fb01 f303 	mul.w	r3, r1, r3
 800457a:	4413      	add	r3, r2
 800457c:	3360      	adds	r3, #96	; 0x60
 800457e:	2201      	movs	r2, #1
 8004580:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	b2d9      	uxtb	r1, r3
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	202c      	movs	r0, #44	; 0x2c
 800458c:	fb00 f303 	mul.w	r3, r0, r3
 8004590:	4413      	add	r3, r2
 8004592:	3360      	adds	r3, #96	; 0x60
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f007 fce7 	bl	800bf6c <HAL_HCD_HC_NotifyURBChange_Callback>
 800459e:	e034      	b.n	800460a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	212c      	movs	r1, #44	; 0x2c
 80045a6:	fb01 f303 	mul.w	r3, r1, r3
 80045aa:	4413      	add	r3, r2
 80045ac:	333f      	adds	r3, #63	; 0x3f
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d12a      	bne.n	800460a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	212c      	movs	r1, #44	; 0x2c
 80045ba:	fb01 f303 	mul.w	r3, r1, r3
 80045be:	4413      	add	r3, r2
 80045c0:	3360      	adds	r3, #96	; 0x60
 80045c2:	2201      	movs	r2, #1
 80045c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	212c      	movs	r1, #44	; 0x2c
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	3354      	adds	r3, #84	; 0x54
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	f083 0301 	eor.w	r3, r3, #1
 80045da:	b2d8      	uxtb	r0, r3
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	212c      	movs	r1, #44	; 0x2c
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	4413      	add	r3, r2
 80045e8:	3354      	adds	r3, #84	; 0x54
 80045ea:	4602      	mov	r2, r0
 80045ec:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	b2d9      	uxtb	r1, r3
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	202c      	movs	r0, #44	; 0x2c
 80045f8:	fb00 f303 	mul.w	r3, r0, r3
 80045fc:	4413      	add	r3, r2
 80045fe:	3360      	adds	r3, #96	; 0x60
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f007 fcb1 	bl	800bf6c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d12b      	bne.n	800466a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	212c      	movs	r1, #44	; 0x2c
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	4413      	add	r3, r2
 800461e:	3348      	adds	r3, #72	; 0x48
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	202c      	movs	r0, #44	; 0x2c
 8004628:	fb00 f202 	mul.w	r2, r0, r2
 800462c:	440a      	add	r2, r1
 800462e:	3240      	adds	r2, #64	; 0x40
 8004630:	8812      	ldrh	r2, [r2, #0]
 8004632:	fbb3 f3f2 	udiv	r3, r3, r2
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 81be 	beq.w	80049bc <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	212c      	movs	r1, #44	; 0x2c
 8004646:	fb01 f303 	mul.w	r3, r1, r3
 800464a:	4413      	add	r3, r2
 800464c:	3354      	adds	r3, #84	; 0x54
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	f083 0301 	eor.w	r3, r3, #1
 8004654:	b2d8      	uxtb	r0, r3
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	212c      	movs	r1, #44	; 0x2c
 800465c:	fb01 f303 	mul.w	r3, r1, r3
 8004660:	4413      	add	r3, r2
 8004662:	3354      	adds	r3, #84	; 0x54
 8004664:	4602      	mov	r2, r0
 8004666:	701a      	strb	r2, [r3, #0]
}
 8004668:	e1a8      	b.n	80049bc <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	212c      	movs	r1, #44	; 0x2c
 8004670:	fb01 f303 	mul.w	r3, r1, r3
 8004674:	4413      	add	r3, r2
 8004676:	3354      	adds	r3, #84	; 0x54
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	f083 0301 	eor.w	r3, r3, #1
 800467e:	b2d8      	uxtb	r0, r3
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	212c      	movs	r1, #44	; 0x2c
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	4413      	add	r3, r2
 800468c:	3354      	adds	r3, #84	; 0x54
 800468e:	4602      	mov	r2, r0
 8004690:	701a      	strb	r2, [r3, #0]
}
 8004692:	e193      	b.n	80049bc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	4413      	add	r3, r2
 800469c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	f040 8106 	bne.w	80048b8 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046c6:	f023 0302 	bic.w	r3, r3, #2
 80046ca:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	212c      	movs	r1, #44	; 0x2c
 80046d2:	fb01 f303 	mul.w	r3, r1, r3
 80046d6:	4413      	add	r3, r2
 80046d8:	3361      	adds	r3, #97	; 0x61
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d109      	bne.n	80046f4 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	212c      	movs	r1, #44	; 0x2c
 80046e6:	fb01 f303 	mul.w	r3, r1, r3
 80046ea:	4413      	add	r3, r2
 80046ec:	3360      	adds	r3, #96	; 0x60
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
 80046f2:	e0c9      	b.n	8004888 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	212c      	movs	r1, #44	; 0x2c
 80046fa:	fb01 f303 	mul.w	r3, r1, r3
 80046fe:	4413      	add	r3, r2
 8004700:	3361      	adds	r3, #97	; 0x61
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b05      	cmp	r3, #5
 8004706:	d109      	bne.n	800471c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	212c      	movs	r1, #44	; 0x2c
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	4413      	add	r3, r2
 8004714:	3360      	adds	r3, #96	; 0x60
 8004716:	2205      	movs	r2, #5
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	e0b5      	b.n	8004888 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	212c      	movs	r1, #44	; 0x2c
 8004722:	fb01 f303 	mul.w	r3, r1, r3
 8004726:	4413      	add	r3, r2
 8004728:	3361      	adds	r3, #97	; 0x61
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b06      	cmp	r3, #6
 800472e:	d009      	beq.n	8004744 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	212c      	movs	r1, #44	; 0x2c
 8004736:	fb01 f303 	mul.w	r3, r1, r3
 800473a:	4413      	add	r3, r2
 800473c:	3361      	adds	r3, #97	; 0x61
 800473e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004740:	2b08      	cmp	r3, #8
 8004742:	d150      	bne.n	80047e6 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	212c      	movs	r1, #44	; 0x2c
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	4413      	add	r3, r2
 8004750:	335c      	adds	r3, #92	; 0x5c
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	202c      	movs	r0, #44	; 0x2c
 800475c:	fb00 f303 	mul.w	r3, r0, r3
 8004760:	440b      	add	r3, r1
 8004762:	335c      	adds	r3, #92	; 0x5c
 8004764:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	212c      	movs	r1, #44	; 0x2c
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	4413      	add	r3, r2
 8004772:	335c      	adds	r3, #92	; 0x5c
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d912      	bls.n	80047a0 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	212c      	movs	r1, #44	; 0x2c
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	4413      	add	r3, r2
 8004786:	335c      	adds	r3, #92	; 0x5c
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	212c      	movs	r1, #44	; 0x2c
 8004792:	fb01 f303 	mul.w	r3, r1, r3
 8004796:	4413      	add	r3, r2
 8004798:	3360      	adds	r3, #96	; 0x60
 800479a:	2204      	movs	r2, #4
 800479c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800479e:	e073      	b.n	8004888 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	212c      	movs	r1, #44	; 0x2c
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	4413      	add	r3, r2
 80047ac:	3360      	adds	r3, #96	; 0x60
 80047ae:	2202      	movs	r2, #2
 80047b0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047c8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047d0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047de:	461a      	mov	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80047e4:	e050      	b.n	8004888 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	212c      	movs	r1, #44	; 0x2c
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	4413      	add	r3, r2
 80047f2:	3361      	adds	r3, #97	; 0x61
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d122      	bne.n	8004840 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	212c      	movs	r1, #44	; 0x2c
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	4413      	add	r3, r2
 8004806:	3360      	adds	r3, #96	; 0x60
 8004808:	2202      	movs	r2, #2
 800480a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4413      	add	r3, r2
 8004814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004822:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800482a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	4413      	add	r3, r2
 8004834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004838:	461a      	mov	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	e023      	b.n	8004888 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	212c      	movs	r1, #44	; 0x2c
 8004846:	fb01 f303 	mul.w	r3, r1, r3
 800484a:	4413      	add	r3, r2
 800484c:	3361      	adds	r3, #97	; 0x61
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b07      	cmp	r3, #7
 8004852:	d119      	bne.n	8004888 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	212c      	movs	r1, #44	; 0x2c
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	4413      	add	r3, r2
 8004860:	335c      	adds	r3, #92	; 0x5c
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	202c      	movs	r0, #44	; 0x2c
 800486c:	fb00 f303 	mul.w	r3, r0, r3
 8004870:	440b      	add	r3, r1
 8004872:	335c      	adds	r3, #92	; 0x5c
 8004874:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	212c      	movs	r1, #44	; 0x2c
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	4413      	add	r3, r2
 8004882:	3360      	adds	r3, #96	; 0x60
 8004884:	2204      	movs	r2, #4
 8004886:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4413      	add	r3, r2
 8004890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004894:	461a      	mov	r2, r3
 8004896:	2302      	movs	r3, #2
 8004898:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	b2d9      	uxtb	r1, r3
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	202c      	movs	r0, #44	; 0x2c
 80048a4:	fb00 f303 	mul.w	r3, r0, r3
 80048a8:	4413      	add	r3, r2
 80048aa:	3360      	adds	r3, #96	; 0x60
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f007 fb5b 	bl	800bf6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80048b6:	e081      	b.n	80049bc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	2b10      	cmp	r3, #16
 80048cc:	d176      	bne.n	80049bc <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	212c      	movs	r1, #44	; 0x2c
 80048d4:	fb01 f303 	mul.w	r3, r1, r3
 80048d8:	4413      	add	r3, r2
 80048da:	333f      	adds	r3, #63	; 0x3f
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d121      	bne.n	8004926 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	212c      	movs	r1, #44	; 0x2c
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	4413      	add	r3, r2
 80048ee:	335c      	adds	r3, #92	; 0x5c
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	0151      	lsls	r1, r2, #5
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	440a      	add	r2, r1
 800490a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800490e:	f043 0302 	orr.w	r3, r3, #2
 8004912:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	4611      	mov	r1, r2
 800491e:	4618      	mov	r0, r3
 8004920:	f005 f967 	bl	8009bf2 <USB_HC_Halt>
 8004924:	e041      	b.n	80049aa <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	212c      	movs	r1, #44	; 0x2c
 800492c:	fb01 f303 	mul.w	r3, r1, r3
 8004930:	4413      	add	r3, r2
 8004932:	333f      	adds	r3, #63	; 0x3f
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	212c      	movs	r1, #44	; 0x2c
 8004940:	fb01 f303 	mul.w	r3, r1, r3
 8004944:	4413      	add	r3, r2
 8004946:	333f      	adds	r3, #63	; 0x3f
 8004948:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800494a:	2b02      	cmp	r3, #2
 800494c:	d12d      	bne.n	80049aa <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	212c      	movs	r1, #44	; 0x2c
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	335c      	adds	r3, #92	; 0x5c
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d120      	bne.n	80049aa <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	212c      	movs	r1, #44	; 0x2c
 800496e:	fb01 f303 	mul.w	r3, r1, r3
 8004972:	4413      	add	r3, r2
 8004974:	3361      	adds	r3, #97	; 0x61
 8004976:	2203      	movs	r2, #3
 8004978:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4413      	add	r3, r2
 8004982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	0151      	lsls	r1, r2, #5
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	440a      	add	r2, r1
 8004990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004994:	f043 0302 	orr.w	r3, r3, #2
 8004998:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	4611      	mov	r1, r2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f005 f924 	bl	8009bf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b6:	461a      	mov	r2, r3
 80049b8:	2310      	movs	r3, #16
 80049ba:	6093      	str	r3, [r2, #8]
}
 80049bc:	bf00      	nop
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d119      	bne.n	8004a28 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a00:	461a      	mov	r2, r3
 8004a02:	2304      	movs	r3, #4
 8004a04:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	0151      	lsls	r1, r2, #5
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	440a      	add	r2, r1
 8004a1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a20:	f043 0302 	orr.w	r3, r3, #2
 8004a24:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004a26:	e3c6      	b.n	80051b6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d13e      	bne.n	8004abc <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2320      	movs	r3, #32
 8004a4e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	212c      	movs	r1, #44	; 0x2c
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	333d      	adds	r3, #61	; 0x3d
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	f040 83a8 	bne.w	80051b6 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	212c      	movs	r1, #44	; 0x2c
 8004a6c:	fb01 f303 	mul.w	r3, r1, r3
 8004a70:	4413      	add	r3, r2
 8004a72:	333d      	adds	r3, #61	; 0x3d
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	212c      	movs	r1, #44	; 0x2c
 8004a7e:	fb01 f303 	mul.w	r3, r1, r3
 8004a82:	4413      	add	r3, r2
 8004a84:	3360      	adds	r3, #96	; 0x60
 8004a86:	2202      	movs	r2, #2
 8004a88:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	0151      	lsls	r1, r2, #5
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	440a      	add	r2, r1
 8004aa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aa4:	f043 0302 	orr.w	r3, r3, #2
 8004aa8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f005 f89c 	bl	8009bf2 <USB_HC_Halt>
}
 8004aba:	e37c      	b.n	80051b6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad2:	d122      	bne.n	8004b1a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aee:	f043 0302 	orr.w	r3, r3, #2
 8004af2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	4611      	mov	r1, r2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f005 f877 	bl	8009bf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b10:	461a      	mov	r2, r3
 8004b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b16:	6093      	str	r3, [r2, #8]
}
 8004b18:	e34d      	b.n	80051b6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d150      	bne.n	8004bd2 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	212c      	movs	r1, #44	; 0x2c
 8004b36:	fb01 f303 	mul.w	r3, r1, r3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	335c      	adds	r3, #92	; 0x5c
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	d111      	bne.n	8004b7c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	212c      	movs	r1, #44	; 0x2c
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	4413      	add	r3, r2
 8004b64:	333d      	adds	r3, #61	; 0x3d
 8004b66:	2201      	movs	r2, #1
 8004b68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b76:	461a      	mov	r2, r3
 8004b78:	2340      	movs	r3, #64	; 0x40
 8004b7a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b96:	f043 0302 	orr.w	r3, r3, #2
 8004b9a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f005 f823 	bl	8009bf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb8:	461a      	mov	r2, r3
 8004bba:	2301      	movs	r3, #1
 8004bbc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	212c      	movs	r1, #44	; 0x2c
 8004bc4:	fb01 f303 	mul.w	r3, r1, r3
 8004bc8:	4413      	add	r3, r2
 8004bca:	3361      	adds	r3, #97	; 0x61
 8004bcc:	2201      	movs	r2, #1
 8004bce:	701a      	strb	r2, [r3, #0]
}
 8004bd0:	e2f1      	b.n	80051b6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be4:	2b40      	cmp	r3, #64	; 0x40
 8004be6:	d13c      	bne.n	8004c62 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	212c      	movs	r1, #44	; 0x2c
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3361      	adds	r3, #97	; 0x61
 8004bf6:	2204      	movs	r2, #4
 8004bf8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	212c      	movs	r1, #44	; 0x2c
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	4413      	add	r3, r2
 8004c06:	333d      	adds	r3, #61	; 0x3d
 8004c08:	2201      	movs	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	212c      	movs	r1, #44	; 0x2c
 8004c12:	fb01 f303 	mul.w	r3, r1, r3
 8004c16:	4413      	add	r3, r2
 8004c18:	335c      	adds	r3, #92	; 0x5c
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	0151      	lsls	r1, r2, #5
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	440a      	add	r2, r1
 8004c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c38:	f043 0302 	orr.w	r3, r3, #2
 8004c3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	b2d2      	uxtb	r2, r2
 8004c46:	4611      	mov	r1, r2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f004 ffd2 	bl	8009bf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	2340      	movs	r3, #64	; 0x40
 8004c5e:	6093      	str	r3, [r2, #8]
}
 8004c60:	e2a9      	b.n	80051b6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d12a      	bne.n	8004cce <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c84:	461a      	mov	r2, r3
 8004c86:	2308      	movs	r3, #8
 8004c88:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	0151      	lsls	r1, r2, #5
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	440a      	add	r2, r1
 8004ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ca4:	f043 0302 	orr.w	r3, r3, #2
 8004ca8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f004 ff9c 	bl	8009bf2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	212c      	movs	r1, #44	; 0x2c
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	3361      	adds	r3, #97	; 0x61
 8004cc8:	2205      	movs	r2, #5
 8004cca:	701a      	strb	r2, [r3, #0]
}
 8004ccc:	e273      	b.n	80051b6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 0310 	and.w	r3, r3, #16
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d150      	bne.n	8004d86 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	212c      	movs	r1, #44	; 0x2c
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	4413      	add	r3, r2
 8004cf0:	335c      	adds	r3, #92	; 0x5c
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	212c      	movs	r1, #44	; 0x2c
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	4413      	add	r3, r2
 8004d02:	3361      	adds	r3, #97	; 0x61
 8004d04:	2203      	movs	r2, #3
 8004d06:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	212c      	movs	r1, #44	; 0x2c
 8004d0e:	fb01 f303 	mul.w	r3, r1, r3
 8004d12:	4413      	add	r3, r2
 8004d14:	333d      	adds	r3, #61	; 0x3d
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d112      	bne.n	8004d42 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	212c      	movs	r1, #44	; 0x2c
 8004d22:	fb01 f303 	mul.w	r3, r1, r3
 8004d26:	4413      	add	r3, r2
 8004d28:	333c      	adds	r3, #60	; 0x3c
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d108      	bne.n	8004d42 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	212c      	movs	r1, #44	; 0x2c
 8004d36:	fb01 f303 	mul.w	r3, r1, r3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	333d      	adds	r3, #61	; 0x3d
 8004d3e:	2201      	movs	r2, #1
 8004d40:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	0151      	lsls	r1, r2, #5
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	440a      	add	r2, r1
 8004d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d5c:	f043 0302 	orr.w	r3, r3, #2
 8004d60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f004 ff40 	bl	8009bf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2310      	movs	r3, #16
 8004d82:	6093      	str	r3, [r2, #8]
}
 8004d84:	e217      	b.n	80051b6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d98:	2b80      	cmp	r3, #128	; 0x80
 8004d9a:	d174      	bne.n	8004e86 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d121      	bne.n	8004de8 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	212c      	movs	r1, #44	; 0x2c
 8004daa:	fb01 f303 	mul.w	r3, r1, r3
 8004dae:	4413      	add	r3, r2
 8004db0:	3361      	adds	r3, #97	; 0x61
 8004db2:	2206      	movs	r2, #6
 8004db4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	0151      	lsls	r1, r2, #5
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	440a      	add	r2, r1
 8004dcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dd0:	f043 0302 	orr.w	r3, r3, #2
 8004dd4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	4611      	mov	r1, r2
 8004de0:	4618      	mov	r0, r3
 8004de2:	f004 ff06 	bl	8009bf2 <USB_HC_Halt>
 8004de6:	e044      	b.n	8004e72 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	212c      	movs	r1, #44	; 0x2c
 8004dee:	fb01 f303 	mul.w	r3, r1, r3
 8004df2:	4413      	add	r3, r2
 8004df4:	335c      	adds	r3, #92	; 0x5c
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	202c      	movs	r0, #44	; 0x2c
 8004e00:	fb00 f303 	mul.w	r3, r0, r3
 8004e04:	440b      	add	r3, r1
 8004e06:	335c      	adds	r3, #92	; 0x5c
 8004e08:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	212c      	movs	r1, #44	; 0x2c
 8004e10:	fb01 f303 	mul.w	r3, r1, r3
 8004e14:	4413      	add	r3, r2
 8004e16:	335c      	adds	r3, #92	; 0x5c
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d920      	bls.n	8004e60 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	212c      	movs	r1, #44	; 0x2c
 8004e24:	fb01 f303 	mul.w	r3, r1, r3
 8004e28:	4413      	add	r3, r2
 8004e2a:	335c      	adds	r3, #92	; 0x5c
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	212c      	movs	r1, #44	; 0x2c
 8004e36:	fb01 f303 	mul.w	r3, r1, r3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3360      	adds	r3, #96	; 0x60
 8004e3e:	2204      	movs	r2, #4
 8004e40:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	b2d9      	uxtb	r1, r3
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	202c      	movs	r0, #44	; 0x2c
 8004e4c:	fb00 f303 	mul.w	r3, r0, r3
 8004e50:	4413      	add	r3, r2
 8004e52:	3360      	adds	r3, #96	; 0x60
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f007 f887 	bl	800bf6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004e5e:	e008      	b.n	8004e72 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	212c      	movs	r1, #44	; 0x2c
 8004e66:	fb01 f303 	mul.w	r3, r1, r3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3360      	adds	r3, #96	; 0x60
 8004e6e:	2202      	movs	r2, #2
 8004e70:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7e:	461a      	mov	r2, r3
 8004e80:	2380      	movs	r3, #128	; 0x80
 8004e82:	6093      	str	r3, [r2, #8]
}
 8004e84:	e197      	b.n	80051b6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9c:	d134      	bne.n	8004f08 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	0151      	lsls	r1, r2, #5
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	440a      	add	r2, r1
 8004eb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eb8:	f043 0302 	orr.w	r3, r3, #2
 8004ebc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f004 fe92 	bl	8009bf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eda:	461a      	mov	r2, r3
 8004edc:	2310      	movs	r3, #16
 8004ede:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eec:	461a      	mov	r2, r3
 8004eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ef2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	212c      	movs	r1, #44	; 0x2c
 8004efa:	fb01 f303 	mul.w	r3, r1, r3
 8004efe:	4413      	add	r3, r2
 8004f00:	3361      	adds	r3, #97	; 0x61
 8004f02:	2208      	movs	r2, #8
 8004f04:	701a      	strb	r2, [r3, #0]
}
 8004f06:	e156      	b.n	80051b6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	f040 814b 	bne.w	80051b6 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	0151      	lsls	r1, r2, #5
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	440a      	add	r2, r1
 8004f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f3a:	f023 0302 	bic.w	r3, r3, #2
 8004f3e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	212c      	movs	r1, #44	; 0x2c
 8004f46:	fb01 f303 	mul.w	r3, r1, r3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	3361      	adds	r3, #97	; 0x61
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d179      	bne.n	8005048 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	212c      	movs	r1, #44	; 0x2c
 8004f5a:	fb01 f303 	mul.w	r3, r1, r3
 8004f5e:	4413      	add	r3, r2
 8004f60:	3360      	adds	r3, #96	; 0x60
 8004f62:	2201      	movs	r2, #1
 8004f64:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	212c      	movs	r1, #44	; 0x2c
 8004f6c:	fb01 f303 	mul.w	r3, r1, r3
 8004f70:	4413      	add	r3, r2
 8004f72:	333f      	adds	r3, #63	; 0x3f
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d00a      	beq.n	8004f90 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	212c      	movs	r1, #44	; 0x2c
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	4413      	add	r3, r2
 8004f86:	333f      	adds	r3, #63	; 0x3f
 8004f88:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	f040 80fc 	bne.w	8005188 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d142      	bne.n	800501e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	212c      	movs	r1, #44	; 0x2c
 8004f9e:	fb01 f303 	mul.w	r3, r1, r3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	334c      	adds	r3, #76	; 0x4c
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 80ed 	beq.w	8005188 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	212c      	movs	r1, #44	; 0x2c
 8004fb4:	fb01 f303 	mul.w	r3, r1, r3
 8004fb8:	4413      	add	r3, r2
 8004fba:	334c      	adds	r3, #76	; 0x4c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	202c      	movs	r0, #44	; 0x2c
 8004fc4:	fb00 f202 	mul.w	r2, r0, r2
 8004fc8:	440a      	add	r2, r1
 8004fca:	3240      	adds	r2, #64	; 0x40
 8004fcc:	8812      	ldrh	r2, [r2, #0]
 8004fce:	4413      	add	r3, r2
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	202c      	movs	r0, #44	; 0x2c
 8004fd8:	fb00 f202 	mul.w	r2, r0, r2
 8004fdc:	440a      	add	r2, r1
 8004fde:	3240      	adds	r2, #64	; 0x40
 8004fe0:	8812      	ldrh	r2, [r2, #0]
 8004fe2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 80ca 	beq.w	8005188 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	212c      	movs	r1, #44	; 0x2c
 8004ffa:	fb01 f303 	mul.w	r3, r1, r3
 8004ffe:	4413      	add	r3, r2
 8005000:	3355      	adds	r3, #85	; 0x55
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	f083 0301 	eor.w	r3, r3, #1
 8005008:	b2d8      	uxtb	r0, r3
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	212c      	movs	r1, #44	; 0x2c
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	4413      	add	r3, r2
 8005016:	3355      	adds	r3, #85	; 0x55
 8005018:	4602      	mov	r2, r0
 800501a:	701a      	strb	r2, [r3, #0]
 800501c:	e0b4      	b.n	8005188 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	212c      	movs	r1, #44	; 0x2c
 8005024:	fb01 f303 	mul.w	r3, r1, r3
 8005028:	4413      	add	r3, r2
 800502a:	3355      	adds	r3, #85	; 0x55
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	f083 0301 	eor.w	r3, r3, #1
 8005032:	b2d8      	uxtb	r0, r3
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	212c      	movs	r1, #44	; 0x2c
 800503a:	fb01 f303 	mul.w	r3, r1, r3
 800503e:	4413      	add	r3, r2
 8005040:	3355      	adds	r3, #85	; 0x55
 8005042:	4602      	mov	r2, r0
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	e09f      	b.n	8005188 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	212c      	movs	r1, #44	; 0x2c
 800504e:	fb01 f303 	mul.w	r3, r1, r3
 8005052:	4413      	add	r3, r2
 8005054:	3361      	adds	r3, #97	; 0x61
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b03      	cmp	r3, #3
 800505a:	d109      	bne.n	8005070 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	212c      	movs	r1, #44	; 0x2c
 8005062:	fb01 f303 	mul.w	r3, r1, r3
 8005066:	4413      	add	r3, r2
 8005068:	3360      	adds	r3, #96	; 0x60
 800506a:	2202      	movs	r2, #2
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	e08b      	b.n	8005188 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	212c      	movs	r1, #44	; 0x2c
 8005076:	fb01 f303 	mul.w	r3, r1, r3
 800507a:	4413      	add	r3, r2
 800507c:	3361      	adds	r3, #97	; 0x61
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b04      	cmp	r3, #4
 8005082:	d109      	bne.n	8005098 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	212c      	movs	r1, #44	; 0x2c
 800508a:	fb01 f303 	mul.w	r3, r1, r3
 800508e:	4413      	add	r3, r2
 8005090:	3360      	adds	r3, #96	; 0x60
 8005092:	2202      	movs	r2, #2
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	e077      	b.n	8005188 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	212c      	movs	r1, #44	; 0x2c
 800509e:	fb01 f303 	mul.w	r3, r1, r3
 80050a2:	4413      	add	r3, r2
 80050a4:	3361      	adds	r3, #97	; 0x61
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b05      	cmp	r3, #5
 80050aa:	d109      	bne.n	80050c0 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	212c      	movs	r1, #44	; 0x2c
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	3360      	adds	r3, #96	; 0x60
 80050ba:	2205      	movs	r2, #5
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	e063      	b.n	8005188 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	212c      	movs	r1, #44	; 0x2c
 80050c6:	fb01 f303 	mul.w	r3, r1, r3
 80050ca:	4413      	add	r3, r2
 80050cc:	3361      	adds	r3, #97	; 0x61
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b06      	cmp	r3, #6
 80050d2:	d009      	beq.n	80050e8 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	212c      	movs	r1, #44	; 0x2c
 80050da:	fb01 f303 	mul.w	r3, r1, r3
 80050de:	4413      	add	r3, r2
 80050e0:	3361      	adds	r3, #97	; 0x61
 80050e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d14f      	bne.n	8005188 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	212c      	movs	r1, #44	; 0x2c
 80050ee:	fb01 f303 	mul.w	r3, r1, r3
 80050f2:	4413      	add	r3, r2
 80050f4:	335c      	adds	r3, #92	; 0x5c
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	202c      	movs	r0, #44	; 0x2c
 8005100:	fb00 f303 	mul.w	r3, r0, r3
 8005104:	440b      	add	r3, r1
 8005106:	335c      	adds	r3, #92	; 0x5c
 8005108:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	212c      	movs	r1, #44	; 0x2c
 8005110:	fb01 f303 	mul.w	r3, r1, r3
 8005114:	4413      	add	r3, r2
 8005116:	335c      	adds	r3, #92	; 0x5c
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d912      	bls.n	8005144 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	212c      	movs	r1, #44	; 0x2c
 8005124:	fb01 f303 	mul.w	r3, r1, r3
 8005128:	4413      	add	r3, r2
 800512a:	335c      	adds	r3, #92	; 0x5c
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	212c      	movs	r1, #44	; 0x2c
 8005136:	fb01 f303 	mul.w	r3, r1, r3
 800513a:	4413      	add	r3, r2
 800513c:	3360      	adds	r3, #96	; 0x60
 800513e:	2204      	movs	r2, #4
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	e021      	b.n	8005188 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	212c      	movs	r1, #44	; 0x2c
 800514a:	fb01 f303 	mul.w	r3, r1, r3
 800514e:	4413      	add	r3, r2
 8005150:	3360      	adds	r3, #96	; 0x60
 8005152:	2202      	movs	r2, #2
 8005154:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	4413      	add	r3, r2
 800515e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800516c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005174:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	4413      	add	r3, r2
 800517e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005182:	461a      	mov	r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	4413      	add	r3, r2
 8005190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005194:	461a      	mov	r2, r3
 8005196:	2302      	movs	r3, #2
 8005198:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	b2d9      	uxtb	r1, r3
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	202c      	movs	r0, #44	; 0x2c
 80051a4:	fb00 f303 	mul.w	r3, r0, r3
 80051a8:	4413      	add	r3, r2
 80051aa:	3360      	adds	r3, #96	; 0x60
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f006 fedb 	bl	800bf6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80051b6:	bf00      	nop
 80051b8:	3720      	adds	r7, #32
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b08a      	sub	sp, #40	; 0x28
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	0c5b      	lsrs	r3, r3, #17
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	091b      	lsrs	r3, r3, #4
 80051ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051f2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d004      	beq.n	8005204 <HCD_RXQLVL_IRQHandler+0x46>
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b05      	cmp	r3, #5
 80051fe:	f000 80a9 	beq.w	8005354 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005202:	e0aa      	b.n	800535a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 80a6 	beq.w	8005358 <HCD_RXQLVL_IRQHandler+0x19a>
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	212c      	movs	r1, #44	; 0x2c
 8005212:	fb01 f303 	mul.w	r3, r1, r3
 8005216:	4413      	add	r3, r2
 8005218:	3344      	adds	r3, #68	; 0x44
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 809b 	beq.w	8005358 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	212c      	movs	r1, #44	; 0x2c
 8005228:	fb01 f303 	mul.w	r3, r1, r3
 800522c:	4413      	add	r3, r2
 800522e:	3350      	adds	r3, #80	; 0x50
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	441a      	add	r2, r3
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	202c      	movs	r0, #44	; 0x2c
 800523c:	fb00 f303 	mul.w	r3, r0, r3
 8005240:	440b      	add	r3, r1
 8005242:	334c      	adds	r3, #76	; 0x4c
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d87a      	bhi.n	8005340 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	212c      	movs	r1, #44	; 0x2c
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	4413      	add	r3, r2
 800525a:	3344      	adds	r3, #68	; 0x44
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	b292      	uxth	r2, r2
 8005262:	4619      	mov	r1, r3
 8005264:	f004 f863 	bl	800932e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	212c      	movs	r1, #44	; 0x2c
 800526e:	fb01 f303 	mul.w	r3, r1, r3
 8005272:	4413      	add	r3, r2
 8005274:	3344      	adds	r3, #68	; 0x44
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	441a      	add	r2, r3
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	202c      	movs	r0, #44	; 0x2c
 8005282:	fb00 f303 	mul.w	r3, r0, r3
 8005286:	440b      	add	r3, r1
 8005288:	3344      	adds	r3, #68	; 0x44
 800528a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	212c      	movs	r1, #44	; 0x2c
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	4413      	add	r3, r2
 8005298:	3350      	adds	r3, #80	; 0x50
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	441a      	add	r2, r3
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	202c      	movs	r0, #44	; 0x2c
 80052a6:	fb00 f303 	mul.w	r3, r0, r3
 80052aa:	440b      	add	r3, r1
 80052ac:	3350      	adds	r3, #80	; 0x50
 80052ae:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	0cdb      	lsrs	r3, r3, #19
 80052c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052c4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	212c      	movs	r1, #44	; 0x2c
 80052cc:	fb01 f303 	mul.w	r3, r1, r3
 80052d0:	4413      	add	r3, r2
 80052d2:	3340      	adds	r3, #64	; 0x40
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	4293      	cmp	r3, r2
 80052dc:	d13c      	bne.n	8005358 <HCD_RXQLVL_IRQHandler+0x19a>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d039      	beq.n	8005358 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052fa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005302:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	4413      	add	r3, r2
 800530c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005310:	461a      	mov	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	212c      	movs	r1, #44	; 0x2c
 800531c:	fb01 f303 	mul.w	r3, r1, r3
 8005320:	4413      	add	r3, r2
 8005322:	3354      	adds	r3, #84	; 0x54
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	f083 0301 	eor.w	r3, r3, #1
 800532a:	b2d8      	uxtb	r0, r3
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	212c      	movs	r1, #44	; 0x2c
 8005332:	fb01 f303 	mul.w	r3, r1, r3
 8005336:	4413      	add	r3, r2
 8005338:	3354      	adds	r3, #84	; 0x54
 800533a:	4602      	mov	r2, r0
 800533c:	701a      	strb	r2, [r3, #0]
      break;
 800533e:	e00b      	b.n	8005358 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	212c      	movs	r1, #44	; 0x2c
 8005346:	fb01 f303 	mul.w	r3, r1, r3
 800534a:	4413      	add	r3, r2
 800534c:	3360      	adds	r3, #96	; 0x60
 800534e:	2204      	movs	r2, #4
 8005350:	701a      	strb	r2, [r3, #0]
      break;
 8005352:	e001      	b.n	8005358 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005354:	bf00      	nop
 8005356:	e000      	b.n	800535a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005358:	bf00      	nop
  }
}
 800535a:	bf00      	nop
 800535c:	3728      	adds	r7, #40	; 0x28
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b086      	sub	sp, #24
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800538e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b02      	cmp	r3, #2
 8005398:	d10b      	bne.n	80053b2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d102      	bne.n	80053aa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f006 fdc5 	bl	800bf34 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f043 0302 	orr.w	r3, r3, #2
 80053b0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d132      	bne.n	8005422 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f043 0308 	orr.w	r3, r3, #8
 80053c2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d126      	bne.n	800541c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d113      	bne.n	80053fe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80053dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053e0:	d106      	bne.n	80053f0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2102      	movs	r1, #2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f004 f8db 	bl	80095a4 <USB_InitFSLSPClkSel>
 80053ee:	e011      	b.n	8005414 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2101      	movs	r1, #1
 80053f6:	4618      	mov	r0, r3
 80053f8:	f004 f8d4 	bl	80095a4 <USB_InitFSLSPClkSel>
 80053fc:	e00a      	b.n	8005414 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d106      	bne.n	8005414 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800540c:	461a      	mov	r2, r3
 800540e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005412:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f006 fdb7 	bl	800bf88 <HAL_HCD_PortEnabled_Callback>
 800541a:	e002      	b.n	8005422 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f006 fdc1 	bl	800bfa4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b20      	cmp	r3, #32
 800542a:	d103      	bne.n	8005434 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f043 0320 	orr.w	r3, r3, #32
 8005432:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800543a:	461a      	mov	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6013      	str	r3, [r2, #0]
}
 8005440:	bf00      	nop
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e12b      	b.n	80056b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fd f842 	bl	80024f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2224      	movs	r2, #36	; 0x24
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800549a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054ac:	f002 f878 	bl	80075a0 <HAL_RCC_GetPCLK1Freq>
 80054b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4a81      	ldr	r2, [pc, #516]	; (80056bc <HAL_I2C_Init+0x274>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d807      	bhi.n	80054cc <HAL_I2C_Init+0x84>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4a80      	ldr	r2, [pc, #512]	; (80056c0 <HAL_I2C_Init+0x278>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	bf94      	ite	ls
 80054c4:	2301      	movls	r3, #1
 80054c6:	2300      	movhi	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	e006      	b.n	80054da <HAL_I2C_Init+0x92>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4a7d      	ldr	r2, [pc, #500]	; (80056c4 <HAL_I2C_Init+0x27c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	bf94      	ite	ls
 80054d4:	2301      	movls	r3, #1
 80054d6:	2300      	movhi	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e0e7      	b.n	80056b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4a78      	ldr	r2, [pc, #480]	; (80056c8 <HAL_I2C_Init+0x280>)
 80054e6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ea:	0c9b      	lsrs	r3, r3, #18
 80054ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4a6a      	ldr	r2, [pc, #424]	; (80056bc <HAL_I2C_Init+0x274>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d802      	bhi.n	800551c <HAL_I2C_Init+0xd4>
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	3301      	adds	r3, #1
 800551a:	e009      	b.n	8005530 <HAL_I2C_Init+0xe8>
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005522:	fb02 f303 	mul.w	r3, r2, r3
 8005526:	4a69      	ldr	r2, [pc, #420]	; (80056cc <HAL_I2C_Init+0x284>)
 8005528:	fba2 2303 	umull	r2, r3, r2, r3
 800552c:	099b      	lsrs	r3, r3, #6
 800552e:	3301      	adds	r3, #1
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6812      	ldr	r2, [r2, #0]
 8005534:	430b      	orrs	r3, r1
 8005536:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005542:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	495c      	ldr	r1, [pc, #368]	; (80056bc <HAL_I2C_Init+0x274>)
 800554c:	428b      	cmp	r3, r1
 800554e:	d819      	bhi.n	8005584 <HAL_I2C_Init+0x13c>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	1e59      	subs	r1, r3, #1
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	fbb1 f3f3 	udiv	r3, r1, r3
 800555e:	1c59      	adds	r1, r3, #1
 8005560:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005564:	400b      	ands	r3, r1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <HAL_I2C_Init+0x138>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1e59      	subs	r1, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	fbb1 f3f3 	udiv	r3, r1, r3
 8005578:	3301      	adds	r3, #1
 800557a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800557e:	e051      	b.n	8005624 <HAL_I2C_Init+0x1dc>
 8005580:	2304      	movs	r3, #4
 8005582:	e04f      	b.n	8005624 <HAL_I2C_Init+0x1dc>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d111      	bne.n	80055b0 <HAL_I2C_Init+0x168>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	1e58      	subs	r0, r3, #1
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6859      	ldr	r1, [r3, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	440b      	add	r3, r1
 800559a:	fbb0 f3f3 	udiv	r3, r0, r3
 800559e:	3301      	adds	r3, #1
 80055a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	bf0c      	ite	eq
 80055a8:	2301      	moveq	r3, #1
 80055aa:	2300      	movne	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	e012      	b.n	80055d6 <HAL_I2C_Init+0x18e>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	1e58      	subs	r0, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6859      	ldr	r1, [r3, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	0099      	lsls	r1, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80055c6:	3301      	adds	r3, #1
 80055c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bf0c      	ite	eq
 80055d0:	2301      	moveq	r3, #1
 80055d2:	2300      	movne	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_I2C_Init+0x196>
 80055da:	2301      	movs	r3, #1
 80055dc:	e022      	b.n	8005624 <HAL_I2C_Init+0x1dc>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10e      	bne.n	8005604 <HAL_I2C_Init+0x1bc>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	1e58      	subs	r0, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6859      	ldr	r1, [r3, #4]
 80055ee:	460b      	mov	r3, r1
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	440b      	add	r3, r1
 80055f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80055f8:	3301      	adds	r3, #1
 80055fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005602:	e00f      	b.n	8005624 <HAL_I2C_Init+0x1dc>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	1e58      	subs	r0, r3, #1
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6859      	ldr	r1, [r3, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	0099      	lsls	r1, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	fbb0 f3f3 	udiv	r3, r0, r3
 800561a:	3301      	adds	r3, #1
 800561c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005620:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	6809      	ldr	r1, [r1, #0]
 8005628:	4313      	orrs	r3, r2
 800562a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69da      	ldr	r2, [r3, #28]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005652:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6911      	ldr	r1, [r2, #16]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	68d2      	ldr	r2, [r2, #12]
 800565e:	4311      	orrs	r1, r2
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6812      	ldr	r2, [r2, #0]
 8005664:	430b      	orrs	r3, r1
 8005666:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	000186a0 	.word	0x000186a0
 80056c0:	001e847f 	.word	0x001e847f
 80056c4:	003d08ff 	.word	0x003d08ff
 80056c8:	431bde83 	.word	0x431bde83
 80056cc:	10624dd3 	.word	0x10624dd3

080056d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af02      	add	r7, sp, #8
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	4608      	mov	r0, r1
 80056da:	4611      	mov	r1, r2
 80056dc:	461a      	mov	r2, r3
 80056de:	4603      	mov	r3, r0
 80056e0:	817b      	strh	r3, [r7, #10]
 80056e2:	460b      	mov	r3, r1
 80056e4:	813b      	strh	r3, [r7, #8]
 80056e6:	4613      	mov	r3, r2
 80056e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056ea:	f7fd fe1f 	bl	800332c <HAL_GetTick>
 80056ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	f040 80d9 	bne.w	80058b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	2319      	movs	r3, #25
 8005704:	2201      	movs	r2, #1
 8005706:	496d      	ldr	r1, [pc, #436]	; (80058bc <HAL_I2C_Mem_Write+0x1ec>)
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 fc7f 	bl	800600c <I2C_WaitOnFlagUntilTimeout>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005714:	2302      	movs	r3, #2
 8005716:	e0cc      	b.n	80058b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_I2C_Mem_Write+0x56>
 8005722:	2302      	movs	r3, #2
 8005724:	e0c5      	b.n	80058b2 <HAL_I2C_Mem_Write+0x1e2>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b01      	cmp	r3, #1
 800573a:	d007      	beq.n	800574c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800575a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2221      	movs	r2, #33	; 0x21
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2240      	movs	r2, #64	; 0x40
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a3a      	ldr	r2, [r7, #32]
 8005776:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800577c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4a4d      	ldr	r2, [pc, #308]	; (80058c0 <HAL_I2C_Mem_Write+0x1f0>)
 800578c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800578e:	88f8      	ldrh	r0, [r7, #6]
 8005790:	893a      	ldrh	r2, [r7, #8]
 8005792:	8979      	ldrh	r1, [r7, #10]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	4603      	mov	r3, r0
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 fab6 	bl	8005d10 <I2C_RequestMemoryWrite>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d052      	beq.n	8005850 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e081      	b.n	80058b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 fd00 	bl	80061b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00d      	beq.n	80057da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	d107      	bne.n	80057d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e06b      	b.n	80058b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	781a      	ldrb	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b04      	cmp	r3, #4
 8005816:	d11b      	bne.n	8005850 <HAL_I2C_Mem_Write+0x180>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581c:	2b00      	cmp	r3, #0
 800581e:	d017      	beq.n	8005850 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	781a      	ldrb	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1aa      	bne.n	80057ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 fcec 	bl	800623a <I2C_WaitOnBTFFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00d      	beq.n	8005884 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	2b04      	cmp	r3, #4
 800586e:	d107      	bne.n	8005880 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800587e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e016      	b.n	80058b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	e000      	b.n	80058b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80058b0:	2302      	movs	r3, #2
  }
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	00100002 	.word	0x00100002
 80058c0:	ffff0000 	.word	0xffff0000

080058c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08c      	sub	sp, #48	; 0x30
 80058c8:	af02      	add	r7, sp, #8
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	4608      	mov	r0, r1
 80058ce:	4611      	mov	r1, r2
 80058d0:	461a      	mov	r2, r3
 80058d2:	4603      	mov	r3, r0
 80058d4:	817b      	strh	r3, [r7, #10]
 80058d6:	460b      	mov	r3, r1
 80058d8:	813b      	strh	r3, [r7, #8]
 80058da:	4613      	mov	r3, r2
 80058dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058de:	f7fd fd25 	bl	800332c <HAL_GetTick>
 80058e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	f040 8208 	bne.w	8005d02 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	2319      	movs	r3, #25
 80058f8:	2201      	movs	r2, #1
 80058fa:	497b      	ldr	r1, [pc, #492]	; (8005ae8 <HAL_I2C_Mem_Read+0x224>)
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 fb85 	bl	800600c <I2C_WaitOnFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005908:	2302      	movs	r3, #2
 800590a:	e1fb      	b.n	8005d04 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_I2C_Mem_Read+0x56>
 8005916:	2302      	movs	r3, #2
 8005918:	e1f4      	b.n	8005d04 <HAL_I2C_Mem_Read+0x440>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b01      	cmp	r3, #1
 800592e:	d007      	beq.n	8005940 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0201 	orr.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800594e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2222      	movs	r2, #34	; 0x22
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2240      	movs	r2, #64	; 0x40
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800596a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005970:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a5b      	ldr	r2, [pc, #364]	; (8005aec <HAL_I2C_Mem_Read+0x228>)
 8005980:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005982:	88f8      	ldrh	r0, [r7, #6]
 8005984:	893a      	ldrh	r2, [r7, #8]
 8005986:	8979      	ldrh	r1, [r7, #10]
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	4603      	mov	r3, r0
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 fa52 	bl	8005e3c <I2C_RequestMemoryRead>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e1b0      	b.n	8005d04 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d113      	bne.n	80059d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059aa:	2300      	movs	r3, #0
 80059ac:	623b      	str	r3, [r7, #32]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	623b      	str	r3, [r7, #32]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	623b      	str	r3, [r7, #32]
 80059be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	e184      	b.n	8005cdc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d11b      	bne.n	8005a12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	61fb      	str	r3, [r7, #28]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	e164      	b.n	8005cdc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d11b      	bne.n	8005a52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	e144      	b.n	8005cdc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a52:	2300      	movs	r3, #0
 8005a54:	617b      	str	r3, [r7, #20]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a68:	e138      	b.n	8005cdc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	f200 80f1 	bhi.w	8005c56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d123      	bne.n	8005ac4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 fc1b 	bl	80062bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e139      	b.n	8005d04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ac2:	e10b      	b.n	8005cdc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d14e      	bne.n	8005b6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	4906      	ldr	r1, [pc, #24]	; (8005af0 <HAL_I2C_Mem_Read+0x22c>)
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 fa98 	bl	800600c <I2C_WaitOnFlagUntilTimeout>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d008      	beq.n	8005af4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e10e      	b.n	8005d04 <HAL_I2C_Mem_Read+0x440>
 8005ae6:	bf00      	nop
 8005ae8:	00100002 	.word	0x00100002
 8005aec:	ffff0000 	.word	0xffff0000
 8005af0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691a      	ldr	r2, [r3, #16]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b68:	e0b8      	b.n	8005cdc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	2200      	movs	r2, #0
 8005b72:	4966      	ldr	r1, [pc, #408]	; (8005d0c <HAL_I2C_Mem_Read+0x448>)
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 fa49 	bl	800600c <I2C_WaitOnFlagUntilTimeout>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e0bf      	b.n	8005d04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bcc:	2200      	movs	r2, #0
 8005bce:	494f      	ldr	r1, [pc, #316]	; (8005d0c <HAL_I2C_Mem_Read+0x448>)
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fa1b 	bl	800600c <I2C_WaitOnFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e091      	b.n	8005d04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	691a      	ldr	r2, [r3, #16]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c54:	e042      	b.n	8005cdc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 fb2e 	bl	80062bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e04c      	b.n	8005d04 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d118      	bne.n	8005cdc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f47f aec2 	bne.w	8005a6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e000      	b.n	8005d04 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005d02:	2302      	movs	r3, #2
  }
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3728      	adds	r7, #40	; 0x28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	00010004 	.word	0x00010004

08005d10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	4608      	mov	r0, r1
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	4603      	mov	r3, r0
 8005d20:	817b      	strh	r3, [r7, #10]
 8005d22:	460b      	mov	r3, r1
 8005d24:	813b      	strh	r3, [r7, #8]
 8005d26:	4613      	mov	r3, r2
 8005d28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f960 	bl	800600c <I2C_WaitOnFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00d      	beq.n	8005d6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d60:	d103      	bne.n	8005d6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e05f      	b.n	8005e2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d6e:	897b      	ldrh	r3, [r7, #10]
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	461a      	mov	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	6a3a      	ldr	r2, [r7, #32]
 8005d82:	492d      	ldr	r1, [pc, #180]	; (8005e38 <I2C_RequestMemoryWrite+0x128>)
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 f998 	bl	80060ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e04c      	b.n	8005e2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	617b      	str	r3, [r7, #20]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	617b      	str	r3, [r7, #20]
 8005da8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dac:	6a39      	ldr	r1, [r7, #32]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 fa02 	bl	80061b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00d      	beq.n	8005dd6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d107      	bne.n	8005dd2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e02b      	b.n	8005e2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dd6:	88fb      	ldrh	r3, [r7, #6]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d105      	bne.n	8005de8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ddc:	893b      	ldrh	r3, [r7, #8]
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	611a      	str	r2, [r3, #16]
 8005de6:	e021      	b.n	8005e2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005de8:	893b      	ldrh	r3, [r7, #8]
 8005dea:	0a1b      	lsrs	r3, r3, #8
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df8:	6a39      	ldr	r1, [r7, #32]
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 f9dc 	bl	80061b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00d      	beq.n	8005e22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d107      	bne.n	8005e1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e005      	b.n	8005e2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e22:	893b      	ldrh	r3, [r7, #8]
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	00010002 	.word	0x00010002

08005e3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	4608      	mov	r0, r1
 8005e46:	4611      	mov	r1, r2
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	817b      	strh	r3, [r7, #10]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	813b      	strh	r3, [r7, #8]
 8005e52:	4613      	mov	r3, r2
 8005e54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 f8c2 	bl	800600c <I2C_WaitOnFlagUntilTimeout>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00d      	beq.n	8005eaa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e9c:	d103      	bne.n	8005ea6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e0aa      	b.n	8006000 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005eaa:	897b      	ldrh	r3, [r7, #10]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	461a      	mov	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005eb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	6a3a      	ldr	r2, [r7, #32]
 8005ebe:	4952      	ldr	r1, [pc, #328]	; (8006008 <I2C_RequestMemoryRead+0x1cc>)
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f8fa 	bl	80060ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e097      	b.n	8006000 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee8:	6a39      	ldr	r1, [r7, #32]
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 f964 	bl	80061b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00d      	beq.n	8005f12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d107      	bne.n	8005f0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e076      	b.n	8006000 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f12:	88fb      	ldrh	r3, [r7, #6]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d105      	bne.n	8005f24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f18:	893b      	ldrh	r3, [r7, #8]
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	611a      	str	r2, [r3, #16]
 8005f22:	e021      	b.n	8005f68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f24:	893b      	ldrh	r3, [r7, #8]
 8005f26:	0a1b      	lsrs	r3, r3, #8
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f34:	6a39      	ldr	r1, [r7, #32]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f93e 	bl	80061b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00d      	beq.n	8005f5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d107      	bne.n	8005f5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e050      	b.n	8006000 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f5e:	893b      	ldrh	r3, [r7, #8]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6a:	6a39      	ldr	r1, [r7, #32]
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 f923 	bl	80061b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00d      	beq.n	8005f94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	2b04      	cmp	r3, #4
 8005f7e:	d107      	bne.n	8005f90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e035      	b.n	8006000 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fa2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f82b 	bl	800600c <I2C_WaitOnFlagUntilTimeout>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00d      	beq.n	8005fd8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fca:	d103      	bne.n	8005fd4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e013      	b.n	8006000 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005fd8:	897b      	ldrh	r3, [r7, #10]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	6a3a      	ldr	r2, [r7, #32]
 8005fec:	4906      	ldr	r1, [pc, #24]	; (8006008 <I2C_RequestMemoryRead+0x1cc>)
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 f863 	bl	80060ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	00010002 	.word	0x00010002

0800600c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	4613      	mov	r3, r2
 800601a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800601c:	e025      	b.n	800606a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006024:	d021      	beq.n	800606a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006026:	f7fd f981 	bl	800332c <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d302      	bcc.n	800603c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d116      	bne.n	800606a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2220      	movs	r2, #32
 8006046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	f043 0220 	orr.w	r2, r3, #32
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e023      	b.n	80060b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	0c1b      	lsrs	r3, r3, #16
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	d10d      	bne.n	8006090 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	43da      	mvns	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4013      	ands	r3, r2
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	bf0c      	ite	eq
 8006086:	2301      	moveq	r3, #1
 8006088:	2300      	movne	r3, #0
 800608a:	b2db      	uxtb	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	e00c      	b.n	80060aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	43da      	mvns	r2, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	4013      	ands	r3, r2
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bf0c      	ite	eq
 80060a2:	2301      	moveq	r3, #1
 80060a4:	2300      	movne	r3, #0
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	79fb      	ldrb	r3, [r7, #7]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d0b6      	beq.n	800601e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	607a      	str	r2, [r7, #4]
 80060c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060c8:	e051      	b.n	800616e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d8:	d123      	bne.n	8006122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2220      	movs	r2, #32
 80060fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	f043 0204 	orr.w	r2, r3, #4
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e046      	b.n	80061b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006128:	d021      	beq.n	800616e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612a:	f7fd f8ff 	bl	800332c <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	429a      	cmp	r2, r3
 8006138:	d302      	bcc.n	8006140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d116      	bne.n	800616e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	f043 0220 	orr.w	r2, r3, #32
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e020      	b.n	80061b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	0c1b      	lsrs	r3, r3, #16
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b01      	cmp	r3, #1
 8006176:	d10c      	bne.n	8006192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	43da      	mvns	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	4013      	ands	r3, r2
 8006184:	b29b      	uxth	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	bf14      	ite	ne
 800618a:	2301      	movne	r3, #1
 800618c:	2300      	moveq	r3, #0
 800618e:	b2db      	uxtb	r3, r3
 8006190:	e00b      	b.n	80061aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	43da      	mvns	r2, r3
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	4013      	ands	r3, r2
 800619e:	b29b      	uxth	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	bf14      	ite	ne
 80061a4:	2301      	movne	r3, #1
 80061a6:	2300      	moveq	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d18d      	bne.n	80060ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061c4:	e02d      	b.n	8006222 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 f8ce 	bl	8006368 <I2C_IsAcknowledgeFailed>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e02d      	b.n	8006232 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061dc:	d021      	beq.n	8006222 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061de:	f7fd f8a5 	bl	800332c <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d302      	bcc.n	80061f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d116      	bne.n	8006222 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	f043 0220 	orr.w	r2, r3, #32
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e007      	b.n	8006232 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622c:	2b80      	cmp	r3, #128	; 0x80
 800622e:	d1ca      	bne.n	80061c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006246:	e02d      	b.n	80062a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 f88d 	bl	8006368 <I2C_IsAcknowledgeFailed>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e02d      	b.n	80062b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800625e:	d021      	beq.n	80062a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006260:	f7fd f864 	bl	800332c <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	429a      	cmp	r2, r3
 800626e:	d302      	bcc.n	8006276 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d116      	bne.n	80062a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	f043 0220 	orr.w	r2, r3, #32
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e007      	b.n	80062b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d1ca      	bne.n	8006248 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062c8:	e042      	b.n	8006350 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	f003 0310 	and.w	r3, r3, #16
 80062d4:	2b10      	cmp	r3, #16
 80062d6:	d119      	bne.n	800630c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f06f 0210 	mvn.w	r2, #16
 80062e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e029      	b.n	8006360 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630c:	f7fd f80e 	bl	800332c <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	429a      	cmp	r2, r3
 800631a:	d302      	bcc.n	8006322 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d116      	bne.n	8006350 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2220      	movs	r2, #32
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	f043 0220 	orr.w	r2, r3, #32
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e007      	b.n	8006360 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635a:	2b40      	cmp	r3, #64	; 0x40
 800635c:	d1b5      	bne.n	80062ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800637a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637e:	d11b      	bne.n	80063b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006388:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2220      	movs	r2, #32
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	f043 0204 	orr.w	r2, r3, #4
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e000      	b.n	80063ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
	...

080063c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e128      	b.n	800662c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d109      	bne.n	80063fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a90      	ldr	r2, [pc, #576]	; (8006634 <HAL_I2S_Init+0x26c>)
 80063f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7fc f8e9 	bl	80025cc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2202      	movs	r2, #2
 80063fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6812      	ldr	r2, [r2, #0]
 800640c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006410:	f023 030f 	bic.w	r3, r3, #15
 8006414:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2202      	movs	r2, #2
 800641c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	2b02      	cmp	r3, #2
 8006424:	d060      	beq.n	80064e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d102      	bne.n	8006434 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800642e:	2310      	movs	r3, #16
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	e001      	b.n	8006438 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006434:	2320      	movs	r3, #32
 8006436:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	2b20      	cmp	r3, #32
 800643e:	d802      	bhi.n	8006446 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006446:	2001      	movs	r0, #1
 8006448:	f001 f9a0 	bl	800778c <HAL_RCCEx_GetPeriphCLKFreq>
 800644c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006456:	d125      	bne.n	80064a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d010      	beq.n	8006482 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	fbb2 f2f3 	udiv	r2, r2, r3
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	461a      	mov	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	fbb2 f3f3 	udiv	r3, r2, r3
 800647c:	3305      	adds	r3, #5
 800647e:	613b      	str	r3, [r7, #16]
 8006480:	e01f      	b.n	80064c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	fbb2 f2f3 	udiv	r2, r2, r3
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	461a      	mov	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	3305      	adds	r3, #5
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	e00e      	b.n	80064c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	461a      	mov	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80064be:	3305      	adds	r3, #5
 80064c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	4a5c      	ldr	r2, [pc, #368]	; (8006638 <HAL_I2S_Init+0x270>)
 80064c6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ca:	08db      	lsrs	r3, r3, #3
 80064cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	085b      	lsrs	r3, r3, #1
 80064de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	021b      	lsls	r3, r3, #8
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	e003      	b.n	80064f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80064e8:	2302      	movs	r3, #2
 80064ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d902      	bls.n	80064fc <HAL_I2S_Init+0x134>
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	2bff      	cmp	r3, #255	; 0xff
 80064fa:	d907      	bls.n	800650c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006500:	f043 0210 	orr.w	r2, r3, #16
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e08f      	b.n	800662c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	ea42 0103 	orr.w	r1, r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	430a      	orrs	r2, r1
 800651e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800652a:	f023 030f 	bic.w	r3, r3, #15
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6851      	ldr	r1, [r2, #4]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6892      	ldr	r2, [r2, #8]
 8006536:	4311      	orrs	r1, r2
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	68d2      	ldr	r2, [r2, #12]
 800653c:	4311      	orrs	r1, r2
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6992      	ldr	r2, [r2, #24]
 8006542:	430a      	orrs	r2, r1
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800654e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d161      	bne.n	800661c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a38      	ldr	r2, [pc, #224]	; (800663c <HAL_I2S_Init+0x274>)
 800655c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a37      	ldr	r2, [pc, #220]	; (8006640 <HAL_I2S_Init+0x278>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d101      	bne.n	800656c <HAL_I2S_Init+0x1a4>
 8006568:	4b36      	ldr	r3, [pc, #216]	; (8006644 <HAL_I2S_Init+0x27c>)
 800656a:	e001      	b.n	8006570 <HAL_I2S_Init+0x1a8>
 800656c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	4932      	ldr	r1, [pc, #200]	; (8006640 <HAL_I2S_Init+0x278>)
 8006578:	428a      	cmp	r2, r1
 800657a:	d101      	bne.n	8006580 <HAL_I2S_Init+0x1b8>
 800657c:	4a31      	ldr	r2, [pc, #196]	; (8006644 <HAL_I2S_Init+0x27c>)
 800657e:	e001      	b.n	8006584 <HAL_I2S_Init+0x1bc>
 8006580:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006584:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006588:	f023 030f 	bic.w	r3, r3, #15
 800658c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a2b      	ldr	r2, [pc, #172]	; (8006640 <HAL_I2S_Init+0x278>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d101      	bne.n	800659c <HAL_I2S_Init+0x1d4>
 8006598:	4b2a      	ldr	r3, [pc, #168]	; (8006644 <HAL_I2S_Init+0x27c>)
 800659a:	e001      	b.n	80065a0 <HAL_I2S_Init+0x1d8>
 800659c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065a0:	2202      	movs	r2, #2
 80065a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a25      	ldr	r2, [pc, #148]	; (8006640 <HAL_I2S_Init+0x278>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d101      	bne.n	80065b2 <HAL_I2S_Init+0x1ea>
 80065ae:	4b25      	ldr	r3, [pc, #148]	; (8006644 <HAL_I2S_Init+0x27c>)
 80065b0:	e001      	b.n	80065b6 <HAL_I2S_Init+0x1ee>
 80065b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065c2:	d003      	beq.n	80065cc <HAL_I2S_Init+0x204>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d103      	bne.n	80065d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80065cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065d0:	613b      	str	r3, [r7, #16]
 80065d2:	e001      	b.n	80065d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80065d4:	2300      	movs	r3, #0
 80065d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065e2:	4313      	orrs	r3, r2
 80065e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065ec:	4313      	orrs	r3, r2
 80065ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80065f6:	4313      	orrs	r3, r2
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	897b      	ldrh	r3, [r7, #10]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006604:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a0d      	ldr	r2, [pc, #52]	; (8006640 <HAL_I2S_Init+0x278>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d101      	bne.n	8006614 <HAL_I2S_Init+0x24c>
 8006610:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <HAL_I2S_Init+0x27c>)
 8006612:	e001      	b.n	8006618 <HAL_I2S_Init+0x250>
 8006614:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006618:	897a      	ldrh	r2, [r7, #10]
 800661a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3720      	adds	r7, #32
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	0800673f 	.word	0x0800673f
 8006638:	cccccccd 	.word	0xcccccccd
 800663c:	08006855 	.word	0x08006855
 8006640:	40003800 	.word	0x40003800
 8006644:	40003400 	.word	0x40003400

08006648 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	881a      	ldrh	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	1c9a      	adds	r2, r3, #2
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10e      	bne.n	80066d8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066c8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff ffb8 	bl	8006648 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80066d8:	bf00      	nop
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	b292      	uxth	r2, r2
 80066f4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fa:	1c9a      	adds	r2, r3, #2
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10e      	bne.n	8006736 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006726:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff ff93 	bl	800665c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006736:	bf00      	nop
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b086      	sub	sp, #24
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b04      	cmp	r3, #4
 8006758:	d13a      	bne.n	80067d0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b01      	cmp	r3, #1
 8006762:	d109      	bne.n	8006778 <I2S_IRQHandler+0x3a>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676e:	2b40      	cmp	r3, #64	; 0x40
 8006770:	d102      	bne.n	8006778 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff ffb4 	bl	80066e0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	d126      	bne.n	80067d0 <I2S_IRQHandler+0x92>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f003 0320 	and.w	r3, r3, #32
 800678c:	2b20      	cmp	r3, #32
 800678e:	d11f      	bne.n	80067d0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800679e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80067a0:	2300      	movs	r3, #0
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	613b      	str	r3, [r7, #16]
 80067b4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	f043 0202 	orr.w	r2, r3, #2
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff ff50 	bl	8006670 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d136      	bne.n	800684a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d109      	bne.n	80067fa <I2S_IRQHandler+0xbc>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f0:	2b80      	cmp	r3, #128	; 0x80
 80067f2:	d102      	bne.n	80067fa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff ff45 	bl	8006684 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	2b08      	cmp	r3, #8
 8006802:	d122      	bne.n	800684a <I2S_IRQHandler+0x10c>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f003 0320 	and.w	r3, r3, #32
 800680e:	2b20      	cmp	r3, #32
 8006810:	d11b      	bne.n	800684a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006820:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683c:	f043 0204 	orr.w	r2, r3, #4
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7ff ff13 	bl	8006670 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800684a:	bf00      	nop
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b088      	sub	sp, #32
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4aa2      	ldr	r2, [pc, #648]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d101      	bne.n	8006872 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800686e:	4ba2      	ldr	r3, [pc, #648]	; (8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006870:	e001      	b.n	8006876 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a9b      	ldr	r2, [pc, #620]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d101      	bne.n	8006890 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800688c:	4b9a      	ldr	r3, [pc, #616]	; (8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800688e:	e001      	b.n	8006894 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006890:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a0:	d004      	beq.n	80068ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f040 8099 	bne.w	80069de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d107      	bne.n	80068c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d002      	beq.n	80068c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f925 	bl	8006b10 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d107      	bne.n	80068e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f9c8 	bl	8006c70 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e6:	2b40      	cmp	r3, #64	; 0x40
 80068e8:	d13a      	bne.n	8006960 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d035      	beq.n	8006960 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a7e      	ldr	r2, [pc, #504]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d101      	bne.n	8006902 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80068fe:	4b7e      	ldr	r3, [pc, #504]	; (8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006900:	e001      	b.n	8006906 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006902:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4979      	ldr	r1, [pc, #484]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800690e:	428b      	cmp	r3, r1
 8006910:	d101      	bne.n	8006916 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006912:	4b79      	ldr	r3, [pc, #484]	; (8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006914:	e001      	b.n	800691a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006916:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800691a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800691e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800692e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006952:	f043 0202 	orr.w	r2, r3, #2
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff fe88 	bl	8006670 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	f003 0308 	and.w	r3, r3, #8
 8006966:	2b08      	cmp	r3, #8
 8006968:	f040 80be 	bne.w	8006ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f003 0320 	and.w	r3, r3, #32
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 80b8 	beq.w	8006ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006986:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a59      	ldr	r2, [pc, #356]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d101      	bne.n	8006996 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006992:	4b59      	ldr	r3, [pc, #356]	; (8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006994:	e001      	b.n	800699a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006996:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4954      	ldr	r1, [pc, #336]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80069a2:	428b      	cmp	r3, r1
 80069a4:	d101      	bne.n	80069aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80069a6:	4b54      	ldr	r3, [pc, #336]	; (8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80069a8:	e001      	b.n	80069ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80069aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80069b4:	2300      	movs	r3, #0
 80069b6:	60bb      	str	r3, [r7, #8]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	60bb      	str	r3, [r7, #8]
 80069c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ce:	f043 0204 	orr.w	r2, r3, #4
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff fe4a 	bl	8006670 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069dc:	e084      	b.n	8006ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d107      	bne.n	80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f8be 	bl	8006b74 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d107      	bne.n	8006a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f8fd 	bl	8006c0c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a18:	2b40      	cmp	r3, #64	; 0x40
 8006a1a:	d12f      	bne.n	8006a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d02a      	beq.n	8006a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a34:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a2e      	ldr	r2, [pc, #184]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d101      	bne.n	8006a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006a40:	4b2d      	ldr	r3, [pc, #180]	; (8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a42:	e001      	b.n	8006a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006a44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4929      	ldr	r1, [pc, #164]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a50:	428b      	cmp	r3, r1
 8006a52:	d101      	bne.n	8006a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006a54:	4b28      	ldr	r3, [pc, #160]	; (8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a56:	e001      	b.n	8006a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006a58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6e:	f043 0202 	orr.w	r2, r3, #2
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff fdfa 	bl	8006670 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d131      	bne.n	8006aea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f003 0320 	and.w	r3, r3, #32
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d02c      	beq.n	8006aea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a17      	ldr	r2, [pc, #92]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d101      	bne.n	8006a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006a9a:	4b17      	ldr	r3, [pc, #92]	; (8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a9c:	e001      	b.n	8006aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006a9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4912      	ldr	r1, [pc, #72]	; (8006af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006aaa:	428b      	cmp	r3, r1
 8006aac:	d101      	bne.n	8006ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006aae:	4b12      	ldr	r3, [pc, #72]	; (8006af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ab0:	e001      	b.n	8006ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006ab2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ab6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006aba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006aca:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad8:	f043 0204 	orr.w	r2, r3, #4
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff fdc5 	bl	8006670 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006ae6:	e000      	b.n	8006aea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006ae8:	bf00      	nop
}
 8006aea:	bf00      	nop
 8006aec:	3720      	adds	r7, #32
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	40003800 	.word	0x40003800
 8006af8:	40003400 	.word	0x40003400

08006afc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	1c99      	adds	r1, r3, #2
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6251      	str	r1, [r2, #36]	; 0x24
 8006b22:	881a      	ldrh	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	3b01      	subs	r3, #1
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d113      	bne.n	8006b6a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b50:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d106      	bne.n	8006b6a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7ff ffc9 	bl	8006afc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b6a:	bf00      	nop
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	1c99      	adds	r1, r3, #2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	6251      	str	r1, [r2, #36]	; 0x24
 8006b86:	8819      	ldrh	r1, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a1d      	ldr	r2, [pc, #116]	; (8006c04 <I2SEx_TxISR_I2SExt+0x90>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d101      	bne.n	8006b96 <I2SEx_TxISR_I2SExt+0x22>
 8006b92:	4b1d      	ldr	r3, [pc, #116]	; (8006c08 <I2SEx_TxISR_I2SExt+0x94>)
 8006b94:	e001      	b.n	8006b9a <I2SEx_TxISR_I2SExt+0x26>
 8006b96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b9a:	460a      	mov	r2, r1
 8006b9c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d121      	bne.n	8006bfa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a12      	ldr	r2, [pc, #72]	; (8006c04 <I2SEx_TxISR_I2SExt+0x90>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d101      	bne.n	8006bc4 <I2SEx_TxISR_I2SExt+0x50>
 8006bc0:	4b11      	ldr	r3, [pc, #68]	; (8006c08 <I2SEx_TxISR_I2SExt+0x94>)
 8006bc2:	e001      	b.n	8006bc8 <I2SEx_TxISR_I2SExt+0x54>
 8006bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	490d      	ldr	r1, [pc, #52]	; (8006c04 <I2SEx_TxISR_I2SExt+0x90>)
 8006bd0:	428b      	cmp	r3, r1
 8006bd2:	d101      	bne.n	8006bd8 <I2SEx_TxISR_I2SExt+0x64>
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <I2SEx_TxISR_I2SExt+0x94>)
 8006bd6:	e001      	b.n	8006bdc <I2SEx_TxISR_I2SExt+0x68>
 8006bd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006be0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff ff81 	bl	8006afc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bfa:	bf00      	nop
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	40003800 	.word	0x40003800
 8006c08:	40003400 	.word	0x40003400

08006c0c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68d8      	ldr	r0, [r3, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1e:	1c99      	adds	r1, r3, #2
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006c24:	b282      	uxth	r2, r0
 8006c26:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d113      	bne.n	8006c68 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c4e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7ff ff4a 	bl	8006afc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c68:	bf00      	nop
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a20      	ldr	r2, [pc, #128]	; (8006d00 <I2SEx_RxISR_I2SExt+0x90>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d101      	bne.n	8006c86 <I2SEx_RxISR_I2SExt+0x16>
 8006c82:	4b20      	ldr	r3, [pc, #128]	; (8006d04 <I2SEx_RxISR_I2SExt+0x94>)
 8006c84:	e001      	b.n	8006c8a <I2SEx_RxISR_I2SExt+0x1a>
 8006c86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c8a:	68d8      	ldr	r0, [r3, #12]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	1c99      	adds	r1, r3, #2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006c96:	b282      	uxth	r2, r0
 8006c98:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d121      	bne.n	8006cf6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a12      	ldr	r2, [pc, #72]	; (8006d00 <I2SEx_RxISR_I2SExt+0x90>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d101      	bne.n	8006cc0 <I2SEx_RxISR_I2SExt+0x50>
 8006cbc:	4b11      	ldr	r3, [pc, #68]	; (8006d04 <I2SEx_RxISR_I2SExt+0x94>)
 8006cbe:	e001      	b.n	8006cc4 <I2SEx_RxISR_I2SExt+0x54>
 8006cc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	490d      	ldr	r1, [pc, #52]	; (8006d00 <I2SEx_RxISR_I2SExt+0x90>)
 8006ccc:	428b      	cmp	r3, r1
 8006cce:	d101      	bne.n	8006cd4 <I2SEx_RxISR_I2SExt+0x64>
 8006cd0:	4b0c      	ldr	r3, [pc, #48]	; (8006d04 <I2SEx_RxISR_I2SExt+0x94>)
 8006cd2:	e001      	b.n	8006cd8 <I2SEx_RxISR_I2SExt+0x68>
 8006cd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006cdc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d106      	bne.n	8006cf6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7ff ff03 	bl	8006afc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006cf6:	bf00      	nop
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	40003800 	.word	0x40003800
 8006d04:	40003400 	.word	0x40003400

08006d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e264      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d075      	beq.n	8006e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d26:	4ba3      	ldr	r3, [pc, #652]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 030c 	and.w	r3, r3, #12
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d00c      	beq.n	8006d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d32:	4ba0      	ldr	r3, [pc, #640]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d3a:	2b08      	cmp	r3, #8
 8006d3c:	d112      	bne.n	8006d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d3e:	4b9d      	ldr	r3, [pc, #628]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d4a:	d10b      	bne.n	8006d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d4c:	4b99      	ldr	r3, [pc, #612]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d05b      	beq.n	8006e10 <HAL_RCC_OscConfig+0x108>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d157      	bne.n	8006e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e23f      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d6c:	d106      	bne.n	8006d7c <HAL_RCC_OscConfig+0x74>
 8006d6e:	4b91      	ldr	r3, [pc, #580]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a90      	ldr	r2, [pc, #576]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	e01d      	b.n	8006db8 <HAL_RCC_OscConfig+0xb0>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d84:	d10c      	bne.n	8006da0 <HAL_RCC_OscConfig+0x98>
 8006d86:	4b8b      	ldr	r3, [pc, #556]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a8a      	ldr	r2, [pc, #552]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	4b88      	ldr	r3, [pc, #544]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a87      	ldr	r2, [pc, #540]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	e00b      	b.n	8006db8 <HAL_RCC_OscConfig+0xb0>
 8006da0:	4b84      	ldr	r3, [pc, #528]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a83      	ldr	r2, [pc, #524]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	4b81      	ldr	r3, [pc, #516]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a80      	ldr	r2, [pc, #512]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d013      	beq.n	8006de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc0:	f7fc fab4 	bl	800332c <HAL_GetTick>
 8006dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dc8:	f7fc fab0 	bl	800332c <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b64      	cmp	r3, #100	; 0x64
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e204      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dda:	4b76      	ldr	r3, [pc, #472]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0f0      	beq.n	8006dc8 <HAL_RCC_OscConfig+0xc0>
 8006de6:	e014      	b.n	8006e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de8:	f7fc faa0 	bl	800332c <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dee:	e008      	b.n	8006e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006df0:	f7fc fa9c 	bl	800332c <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b64      	cmp	r3, #100	; 0x64
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e1f0      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e02:	4b6c      	ldr	r3, [pc, #432]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1f0      	bne.n	8006df0 <HAL_RCC_OscConfig+0xe8>
 8006e0e:	e000      	b.n	8006e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d063      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e1e:	4b65      	ldr	r3, [pc, #404]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f003 030c 	and.w	r3, r3, #12
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00b      	beq.n	8006e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e2a:	4b62      	ldr	r3, [pc, #392]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e32:	2b08      	cmp	r3, #8
 8006e34:	d11c      	bne.n	8006e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e36:	4b5f      	ldr	r3, [pc, #380]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d116      	bne.n	8006e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e42:	4b5c      	ldr	r3, [pc, #368]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <HAL_RCC_OscConfig+0x152>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d001      	beq.n	8006e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e1c4      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e5a:	4b56      	ldr	r3, [pc, #344]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	4952      	ldr	r1, [pc, #328]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e6e:	e03a      	b.n	8006ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d020      	beq.n	8006eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e78:	4b4f      	ldr	r3, [pc, #316]	; (8006fb8 <HAL_RCC_OscConfig+0x2b0>)
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7e:	f7fc fa55 	bl	800332c <HAL_GetTick>
 8006e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e84:	e008      	b.n	8006e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e86:	f7fc fa51 	bl	800332c <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d901      	bls.n	8006e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e1a5      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e98:	4b46      	ldr	r3, [pc, #280]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0f0      	beq.n	8006e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ea4:	4b43      	ldr	r3, [pc, #268]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	00db      	lsls	r3, r3, #3
 8006eb2:	4940      	ldr	r1, [pc, #256]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	600b      	str	r3, [r1, #0]
 8006eb8:	e015      	b.n	8006ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eba:	4b3f      	ldr	r3, [pc, #252]	; (8006fb8 <HAL_RCC_OscConfig+0x2b0>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec0:	f7fc fa34 	bl	800332c <HAL_GetTick>
 8006ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ec6:	e008      	b.n	8006eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ec8:	f7fc fa30 	bl	800332c <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e184      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eda:	4b36      	ldr	r3, [pc, #216]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1f0      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d030      	beq.n	8006f54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d016      	beq.n	8006f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006efa:	4b30      	ldr	r3, [pc, #192]	; (8006fbc <HAL_RCC_OscConfig+0x2b4>)
 8006efc:	2201      	movs	r2, #1
 8006efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f00:	f7fc fa14 	bl	800332c <HAL_GetTick>
 8006f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f06:	e008      	b.n	8006f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f08:	f7fc fa10 	bl	800332c <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e164      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f1a:	4b26      	ldr	r3, [pc, #152]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0f0      	beq.n	8006f08 <HAL_RCC_OscConfig+0x200>
 8006f26:	e015      	b.n	8006f54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f28:	4b24      	ldr	r3, [pc, #144]	; (8006fbc <HAL_RCC_OscConfig+0x2b4>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f2e:	f7fc f9fd 	bl	800332c <HAL_GetTick>
 8006f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f34:	e008      	b.n	8006f48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f36:	f7fc f9f9 	bl	800332c <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e14d      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f48:	4b1a      	ldr	r3, [pc, #104]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1f0      	bne.n	8006f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 80a0 	beq.w	80070a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f62:	2300      	movs	r3, #0
 8006f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f66:	4b13      	ldr	r3, [pc, #76]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10f      	bne.n	8006f92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f72:	2300      	movs	r3, #0
 8006f74:	60bb      	str	r3, [r7, #8]
 8006f76:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	4a0e      	ldr	r2, [pc, #56]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f80:	6413      	str	r3, [r2, #64]	; 0x40
 8006f82:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <HAL_RCC_OscConfig+0x2ac>)
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f8a:	60bb      	str	r3, [r7, #8]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f92:	4b0b      	ldr	r3, [pc, #44]	; (8006fc0 <HAL_RCC_OscConfig+0x2b8>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d121      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f9e:	4b08      	ldr	r3, [pc, #32]	; (8006fc0 <HAL_RCC_OscConfig+0x2b8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a07      	ldr	r2, [pc, #28]	; (8006fc0 <HAL_RCC_OscConfig+0x2b8>)
 8006fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006faa:	f7fc f9bf 	bl	800332c <HAL_GetTick>
 8006fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fb0:	e011      	b.n	8006fd6 <HAL_RCC_OscConfig+0x2ce>
 8006fb2:	bf00      	nop
 8006fb4:	40023800 	.word	0x40023800
 8006fb8:	42470000 	.word	0x42470000
 8006fbc:	42470e80 	.word	0x42470e80
 8006fc0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fc4:	f7fc f9b2 	bl	800332c <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e106      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fd6:	4b85      	ldr	r3, [pc, #532]	; (80071ec <HAL_RCC_OscConfig+0x4e4>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0f0      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d106      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x2f0>
 8006fea:	4b81      	ldr	r3, [pc, #516]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 8006fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fee:	4a80      	ldr	r2, [pc, #512]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 8006ff0:	f043 0301 	orr.w	r3, r3, #1
 8006ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ff6:	e01c      	b.n	8007032 <HAL_RCC_OscConfig+0x32a>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	2b05      	cmp	r3, #5
 8006ffe:	d10c      	bne.n	800701a <HAL_RCC_OscConfig+0x312>
 8007000:	4b7b      	ldr	r3, [pc, #492]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 8007002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007004:	4a7a      	ldr	r2, [pc, #488]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 8007006:	f043 0304 	orr.w	r3, r3, #4
 800700a:	6713      	str	r3, [r2, #112]	; 0x70
 800700c:	4b78      	ldr	r3, [pc, #480]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 800700e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007010:	4a77      	ldr	r2, [pc, #476]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 8007012:	f043 0301 	orr.w	r3, r3, #1
 8007016:	6713      	str	r3, [r2, #112]	; 0x70
 8007018:	e00b      	b.n	8007032 <HAL_RCC_OscConfig+0x32a>
 800701a:	4b75      	ldr	r3, [pc, #468]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 800701c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701e:	4a74      	ldr	r2, [pc, #464]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 8007020:	f023 0301 	bic.w	r3, r3, #1
 8007024:	6713      	str	r3, [r2, #112]	; 0x70
 8007026:	4b72      	ldr	r3, [pc, #456]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 8007028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702a:	4a71      	ldr	r2, [pc, #452]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 800702c:	f023 0304 	bic.w	r3, r3, #4
 8007030:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d015      	beq.n	8007066 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800703a:	f7fc f977 	bl	800332c <HAL_GetTick>
 800703e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007040:	e00a      	b.n	8007058 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007042:	f7fc f973 	bl	800332c <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007050:	4293      	cmp	r3, r2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e0c5      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007058:	4b65      	ldr	r3, [pc, #404]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 800705a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0ee      	beq.n	8007042 <HAL_RCC_OscConfig+0x33a>
 8007064:	e014      	b.n	8007090 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007066:	f7fc f961 	bl	800332c <HAL_GetTick>
 800706a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800706c:	e00a      	b.n	8007084 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800706e:	f7fc f95d 	bl	800332c <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	f241 3288 	movw	r2, #5000	; 0x1388
 800707c:	4293      	cmp	r3, r2
 800707e:	d901      	bls.n	8007084 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e0af      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007084:	4b5a      	ldr	r3, [pc, #360]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 8007086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007088:	f003 0302 	and.w	r3, r3, #2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1ee      	bne.n	800706e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007090:	7dfb      	ldrb	r3, [r7, #23]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d105      	bne.n	80070a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007096:	4b56      	ldr	r3, [pc, #344]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 8007098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709a:	4a55      	ldr	r2, [pc, #340]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 800709c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 809b 	beq.w	80071e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070ac:	4b50      	ldr	r3, [pc, #320]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f003 030c 	and.w	r3, r3, #12
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d05c      	beq.n	8007172 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d141      	bne.n	8007144 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070c0:	4b4c      	ldr	r3, [pc, #304]	; (80071f4 <HAL_RCC_OscConfig+0x4ec>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c6:	f7fc f931 	bl	800332c <HAL_GetTick>
 80070ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070cc:	e008      	b.n	80070e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070ce:	f7fc f92d 	bl	800332c <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e081      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070e0:	4b43      	ldr	r3, [pc, #268]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1f0      	bne.n	80070ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	69da      	ldr	r2, [r3, #28]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	431a      	orrs	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	019b      	lsls	r3, r3, #6
 80070fc:	431a      	orrs	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007102:	085b      	lsrs	r3, r3, #1
 8007104:	3b01      	subs	r3, #1
 8007106:	041b      	lsls	r3, r3, #16
 8007108:	431a      	orrs	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	061b      	lsls	r3, r3, #24
 8007110:	4937      	ldr	r1, [pc, #220]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 8007112:	4313      	orrs	r3, r2
 8007114:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007116:	4b37      	ldr	r3, [pc, #220]	; (80071f4 <HAL_RCC_OscConfig+0x4ec>)
 8007118:	2201      	movs	r2, #1
 800711a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800711c:	f7fc f906 	bl	800332c <HAL_GetTick>
 8007120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007122:	e008      	b.n	8007136 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007124:	f7fc f902 	bl	800332c <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e056      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007136:	4b2e      	ldr	r3, [pc, #184]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0f0      	beq.n	8007124 <HAL_RCC_OscConfig+0x41c>
 8007142:	e04e      	b.n	80071e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007144:	4b2b      	ldr	r3, [pc, #172]	; (80071f4 <HAL_RCC_OscConfig+0x4ec>)
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800714a:	f7fc f8ef 	bl	800332c <HAL_GetTick>
 800714e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007150:	e008      	b.n	8007164 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007152:	f7fc f8eb 	bl	800332c <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d901      	bls.n	8007164 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e03f      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007164:	4b22      	ldr	r3, [pc, #136]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1f0      	bne.n	8007152 <HAL_RCC_OscConfig+0x44a>
 8007170:	e037      	b.n	80071e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d101      	bne.n	800717e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e032      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800717e:	4b1c      	ldr	r3, [pc, #112]	; (80071f0 <HAL_RCC_OscConfig+0x4e8>)
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d028      	beq.n	80071de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007196:	429a      	cmp	r2, r3
 8007198:	d121      	bne.n	80071de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d11a      	bne.n	80071de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071ae:	4013      	ands	r3, r2
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d111      	bne.n	80071de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c4:	085b      	lsrs	r3, r3, #1
 80071c6:	3b01      	subs	r3, #1
 80071c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d107      	bne.n	80071de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071da:	429a      	cmp	r2, r3
 80071dc:	d001      	beq.n	80071e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	40007000 	.word	0x40007000
 80071f0:	40023800 	.word	0x40023800
 80071f4:	42470060 	.word	0x42470060

080071f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e0cc      	b.n	80073a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800720c:	4b68      	ldr	r3, [pc, #416]	; (80073b0 <HAL_RCC_ClockConfig+0x1b8>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0307 	and.w	r3, r3, #7
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	429a      	cmp	r2, r3
 8007218:	d90c      	bls.n	8007234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800721a:	4b65      	ldr	r3, [pc, #404]	; (80073b0 <HAL_RCC_ClockConfig+0x1b8>)
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	b2d2      	uxtb	r2, r2
 8007220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007222:	4b63      	ldr	r3, [pc, #396]	; (80073b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	429a      	cmp	r2, r3
 800722e:	d001      	beq.n	8007234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e0b8      	b.n	80073a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d020      	beq.n	8007282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	d005      	beq.n	8007258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800724c:	4b59      	ldr	r3, [pc, #356]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	4a58      	ldr	r2, [pc, #352]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0308 	and.w	r3, r3, #8
 8007260:	2b00      	cmp	r3, #0
 8007262:	d005      	beq.n	8007270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007264:	4b53      	ldr	r3, [pc, #332]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	4a52      	ldr	r2, [pc, #328]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 800726a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800726e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007270:	4b50      	ldr	r3, [pc, #320]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	494d      	ldr	r1, [pc, #308]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 800727e:	4313      	orrs	r3, r2
 8007280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b00      	cmp	r3, #0
 800728c:	d044      	beq.n	8007318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d107      	bne.n	80072a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007296:	4b47      	ldr	r3, [pc, #284]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d119      	bne.n	80072d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e07f      	b.n	80073a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d003      	beq.n	80072b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d107      	bne.n	80072c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072b6:	4b3f      	ldr	r3, [pc, #252]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d109      	bne.n	80072d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e06f      	b.n	80073a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072c6:	4b3b      	ldr	r3, [pc, #236]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e067      	b.n	80073a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072d6:	4b37      	ldr	r3, [pc, #220]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f023 0203 	bic.w	r2, r3, #3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	4934      	ldr	r1, [pc, #208]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072e8:	f7fc f820 	bl	800332c <HAL_GetTick>
 80072ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ee:	e00a      	b.n	8007306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072f0:	f7fc f81c 	bl	800332c <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80072fe:	4293      	cmp	r3, r2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e04f      	b.n	80073a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007306:	4b2b      	ldr	r3, [pc, #172]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f003 020c 	and.w	r2, r3, #12
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	429a      	cmp	r2, r3
 8007316:	d1eb      	bne.n	80072f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007318:	4b25      	ldr	r3, [pc, #148]	; (80073b0 <HAL_RCC_ClockConfig+0x1b8>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0307 	and.w	r3, r3, #7
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d20c      	bcs.n	8007340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007326:	4b22      	ldr	r3, [pc, #136]	; (80073b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	b2d2      	uxtb	r2, r2
 800732c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800732e:	4b20      	ldr	r3, [pc, #128]	; (80073b0 <HAL_RCC_ClockConfig+0x1b8>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0307 	and.w	r3, r3, #7
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	429a      	cmp	r2, r3
 800733a:	d001      	beq.n	8007340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e032      	b.n	80073a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0304 	and.w	r3, r3, #4
 8007348:	2b00      	cmp	r3, #0
 800734a:	d008      	beq.n	800735e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800734c:	4b19      	ldr	r3, [pc, #100]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	4916      	ldr	r1, [pc, #88]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 800735a:	4313      	orrs	r3, r2
 800735c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0308 	and.w	r3, r3, #8
 8007366:	2b00      	cmp	r3, #0
 8007368:	d009      	beq.n	800737e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800736a:	4b12      	ldr	r3, [pc, #72]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	490e      	ldr	r1, [pc, #56]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 800737a:	4313      	orrs	r3, r2
 800737c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800737e:	f000 f821 	bl	80073c4 <HAL_RCC_GetSysClockFreq>
 8007382:	4602      	mov	r2, r0
 8007384:	4b0b      	ldr	r3, [pc, #44]	; (80073b4 <HAL_RCC_ClockConfig+0x1bc>)
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	091b      	lsrs	r3, r3, #4
 800738a:	f003 030f 	and.w	r3, r3, #15
 800738e:	490a      	ldr	r1, [pc, #40]	; (80073b8 <HAL_RCC_ClockConfig+0x1c0>)
 8007390:	5ccb      	ldrb	r3, [r1, r3]
 8007392:	fa22 f303 	lsr.w	r3, r2, r3
 8007396:	4a09      	ldr	r2, [pc, #36]	; (80073bc <HAL_RCC_ClockConfig+0x1c4>)
 8007398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800739a:	4b09      	ldr	r3, [pc, #36]	; (80073c0 <HAL_RCC_ClockConfig+0x1c8>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fb ff80 	bl	80032a4 <HAL_InitTick>

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	40023c00 	.word	0x40023c00
 80073b4:	40023800 	.word	0x40023800
 80073b8:	0800cc9c 	.word	0x0800cc9c
 80073bc:	20000010 	.word	0x20000010
 80073c0:	200000a8 	.word	0x200000a8

080073c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	607b      	str	r3, [r7, #4]
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	2300      	movs	r3, #0
 80073d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80073d8:	2300      	movs	r3, #0
 80073da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073dc:	4b67      	ldr	r3, [pc, #412]	; (800757c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f003 030c 	and.w	r3, r3, #12
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d00d      	beq.n	8007404 <HAL_RCC_GetSysClockFreq+0x40>
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	f200 80bd 	bhi.w	8007568 <HAL_RCC_GetSysClockFreq+0x1a4>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <HAL_RCC_GetSysClockFreq+0x34>
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d003      	beq.n	80073fe <HAL_RCC_GetSysClockFreq+0x3a>
 80073f6:	e0b7      	b.n	8007568 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073f8:	4b61      	ldr	r3, [pc, #388]	; (8007580 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80073fa:	60bb      	str	r3, [r7, #8]
       break;
 80073fc:	e0b7      	b.n	800756e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073fe:	4b61      	ldr	r3, [pc, #388]	; (8007584 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007400:	60bb      	str	r3, [r7, #8]
      break;
 8007402:	e0b4      	b.n	800756e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007404:	4b5d      	ldr	r3, [pc, #372]	; (800757c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800740c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800740e:	4b5b      	ldr	r3, [pc, #364]	; (800757c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d04d      	beq.n	80074b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800741a:	4b58      	ldr	r3, [pc, #352]	; (800757c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	099b      	lsrs	r3, r3, #6
 8007420:	461a      	mov	r2, r3
 8007422:	f04f 0300 	mov.w	r3, #0
 8007426:	f240 10ff 	movw	r0, #511	; 0x1ff
 800742a:	f04f 0100 	mov.w	r1, #0
 800742e:	ea02 0800 	and.w	r8, r2, r0
 8007432:	ea03 0901 	and.w	r9, r3, r1
 8007436:	4640      	mov	r0, r8
 8007438:	4649      	mov	r1, r9
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	f04f 0300 	mov.w	r3, #0
 8007442:	014b      	lsls	r3, r1, #5
 8007444:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007448:	0142      	lsls	r2, r0, #5
 800744a:	4610      	mov	r0, r2
 800744c:	4619      	mov	r1, r3
 800744e:	ebb0 0008 	subs.w	r0, r0, r8
 8007452:	eb61 0109 	sbc.w	r1, r1, r9
 8007456:	f04f 0200 	mov.w	r2, #0
 800745a:	f04f 0300 	mov.w	r3, #0
 800745e:	018b      	lsls	r3, r1, #6
 8007460:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007464:	0182      	lsls	r2, r0, #6
 8007466:	1a12      	subs	r2, r2, r0
 8007468:	eb63 0301 	sbc.w	r3, r3, r1
 800746c:	f04f 0000 	mov.w	r0, #0
 8007470:	f04f 0100 	mov.w	r1, #0
 8007474:	00d9      	lsls	r1, r3, #3
 8007476:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800747a:	00d0      	lsls	r0, r2, #3
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	eb12 0208 	adds.w	r2, r2, r8
 8007484:	eb43 0309 	adc.w	r3, r3, r9
 8007488:	f04f 0000 	mov.w	r0, #0
 800748c:	f04f 0100 	mov.w	r1, #0
 8007490:	0259      	lsls	r1, r3, #9
 8007492:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007496:	0250      	lsls	r0, r2, #9
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4610      	mov	r0, r2
 800749e:	4619      	mov	r1, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	461a      	mov	r2, r3
 80074a4:	f04f 0300 	mov.w	r3, #0
 80074a8:	f7f9 fafa 	bl	8000aa0 <__aeabi_uldivmod>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	4613      	mov	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e04a      	b.n	800754c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074b6:	4b31      	ldr	r3, [pc, #196]	; (800757c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	099b      	lsrs	r3, r3, #6
 80074bc:	461a      	mov	r2, r3
 80074be:	f04f 0300 	mov.w	r3, #0
 80074c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80074c6:	f04f 0100 	mov.w	r1, #0
 80074ca:	ea02 0400 	and.w	r4, r2, r0
 80074ce:	ea03 0501 	and.w	r5, r3, r1
 80074d2:	4620      	mov	r0, r4
 80074d4:	4629      	mov	r1, r5
 80074d6:	f04f 0200 	mov.w	r2, #0
 80074da:	f04f 0300 	mov.w	r3, #0
 80074de:	014b      	lsls	r3, r1, #5
 80074e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074e4:	0142      	lsls	r2, r0, #5
 80074e6:	4610      	mov	r0, r2
 80074e8:	4619      	mov	r1, r3
 80074ea:	1b00      	subs	r0, r0, r4
 80074ec:	eb61 0105 	sbc.w	r1, r1, r5
 80074f0:	f04f 0200 	mov.w	r2, #0
 80074f4:	f04f 0300 	mov.w	r3, #0
 80074f8:	018b      	lsls	r3, r1, #6
 80074fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80074fe:	0182      	lsls	r2, r0, #6
 8007500:	1a12      	subs	r2, r2, r0
 8007502:	eb63 0301 	sbc.w	r3, r3, r1
 8007506:	f04f 0000 	mov.w	r0, #0
 800750a:	f04f 0100 	mov.w	r1, #0
 800750e:	00d9      	lsls	r1, r3, #3
 8007510:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007514:	00d0      	lsls	r0, r2, #3
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	1912      	adds	r2, r2, r4
 800751c:	eb45 0303 	adc.w	r3, r5, r3
 8007520:	f04f 0000 	mov.w	r0, #0
 8007524:	f04f 0100 	mov.w	r1, #0
 8007528:	0299      	lsls	r1, r3, #10
 800752a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800752e:	0290      	lsls	r0, r2, #10
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4610      	mov	r0, r2
 8007536:	4619      	mov	r1, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	461a      	mov	r2, r3
 800753c:	f04f 0300 	mov.w	r3, #0
 8007540:	f7f9 faae 	bl	8000aa0 <__aeabi_uldivmod>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	4613      	mov	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800754c:	4b0b      	ldr	r3, [pc, #44]	; (800757c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	0c1b      	lsrs	r3, r3, #16
 8007552:	f003 0303 	and.w	r3, r3, #3
 8007556:	3301      	adds	r3, #1
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	fbb2 f3f3 	udiv	r3, r2, r3
 8007564:	60bb      	str	r3, [r7, #8]
      break;
 8007566:	e002      	b.n	800756e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007568:	4b05      	ldr	r3, [pc, #20]	; (8007580 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800756a:	60bb      	str	r3, [r7, #8]
      break;
 800756c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800756e:	68bb      	ldr	r3, [r7, #8]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800757a:	bf00      	nop
 800757c:	40023800 	.word	0x40023800
 8007580:	00f42400 	.word	0x00f42400
 8007584:	007a1200 	.word	0x007a1200

08007588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800758c:	4b03      	ldr	r3, [pc, #12]	; (800759c <HAL_RCC_GetHCLKFreq+0x14>)
 800758e:	681b      	ldr	r3, [r3, #0]
}
 8007590:	4618      	mov	r0, r3
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	20000010 	.word	0x20000010

080075a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075a4:	f7ff fff0 	bl	8007588 <HAL_RCC_GetHCLKFreq>
 80075a8:	4602      	mov	r2, r0
 80075aa:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	0a9b      	lsrs	r3, r3, #10
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	4903      	ldr	r1, [pc, #12]	; (80075c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075b6:	5ccb      	ldrb	r3, [r1, r3]
 80075b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075bc:	4618      	mov	r0, r3
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	40023800 	.word	0x40023800
 80075c4:	0800ccac 	.word	0x0800ccac

080075c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d105      	bne.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d035      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80075f0:	4b62      	ldr	r3, [pc, #392]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075f6:	f7fb fe99 	bl	800332c <HAL_GetTick>
 80075fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075fc:	e008      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80075fe:	f7fb fe95 	bl	800332c <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	2b02      	cmp	r3, #2
 800760a:	d901      	bls.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e0b0      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007610:	4b5b      	ldr	r3, [pc, #364]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1f0      	bne.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	019a      	lsls	r2, r3, #6
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	071b      	lsls	r3, r3, #28
 8007628:	4955      	ldr	r1, [pc, #340]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800762a:	4313      	orrs	r3, r2
 800762c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007630:	4b52      	ldr	r3, [pc, #328]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007632:	2201      	movs	r2, #1
 8007634:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007636:	f7fb fe79 	bl	800332c <HAL_GetTick>
 800763a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800763c:	e008      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800763e:	f7fb fe75 	bl	800332c <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d901      	bls.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e090      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007650:	4b4b      	ldr	r3, [pc, #300]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0f0      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 8083 	beq.w	8007770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	4b44      	ldr	r3, [pc, #272]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	4a43      	ldr	r2, [pc, #268]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007678:	6413      	str	r3, [r2, #64]	; 0x40
 800767a:	4b41      	ldr	r3, [pc, #260]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007686:	4b3f      	ldr	r3, [pc, #252]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a3e      	ldr	r2, [pc, #248]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800768c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007690:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007692:	f7fb fe4b 	bl	800332c <HAL_GetTick>
 8007696:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007698:	e008      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800769a:	f7fb fe47 	bl	800332c <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e062      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80076ac:	4b35      	ldr	r3, [pc, #212]	; (8007784 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0f0      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80076b8:	4b31      	ldr	r3, [pc, #196]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d02f      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d028      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076d6:	4b2a      	ldr	r3, [pc, #168]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80076e0:	4b29      	ldr	r3, [pc, #164]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80076e2:	2201      	movs	r2, #1
 80076e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076e6:	4b28      	ldr	r3, [pc, #160]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80076ec:	4a24      	ldr	r2, [pc, #144]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80076f2:	4b23      	ldr	r3, [pc, #140]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d114      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80076fe:	f7fb fe15 	bl	800332c <HAL_GetTick>
 8007702:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007704:	e00a      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007706:	f7fb fe11 	bl	800332c <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	f241 3288 	movw	r2, #5000	; 0x1388
 8007714:	4293      	cmp	r3, r2
 8007716:	d901      	bls.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e02a      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800771c:	4b18      	ldr	r3, [pc, #96]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800771e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007720:	f003 0302 	and.w	r3, r3, #2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d0ee      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007734:	d10d      	bne.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007736:	4b12      	ldr	r3, [pc, #72]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800774a:	490d      	ldr	r1, [pc, #52]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800774c:	4313      	orrs	r3, r2
 800774e:	608b      	str	r3, [r1, #8]
 8007750:	e005      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007752:	4b0b      	ldr	r3, [pc, #44]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	4a0a      	ldr	r2, [pc, #40]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007758:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800775c:	6093      	str	r3, [r2, #8]
 800775e:	4b08      	ldr	r3, [pc, #32]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007760:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800776a:	4905      	ldr	r1, [pc, #20]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800776c:	4313      	orrs	r3, r2
 800776e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	42470068 	.word	0x42470068
 8007780:	40023800 	.word	0x40023800
 8007784:	40007000 	.word	0x40007000
 8007788:	42470e40 	.word	0x42470e40

0800778c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d13e      	bne.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80077aa:	4b23      	ldr	r3, [pc, #140]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d005      	beq.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d12f      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80077c0:	4b1e      	ldr	r3, [pc, #120]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077c2:	617b      	str	r3, [r7, #20]
          break;
 80077c4:	e02f      	b.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80077c6:	4b1c      	ldr	r3, [pc, #112]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077d2:	d108      	bne.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80077d4:	4b18      	ldr	r3, [pc, #96]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077dc:	4a18      	ldr	r2, [pc, #96]	; (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80077de:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e2:	613b      	str	r3, [r7, #16]
 80077e4:	e007      	b.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80077e6:	4b14      	ldr	r3, [pc, #80]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077ee:	4a15      	ldr	r2, [pc, #84]	; (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80077f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80077f6:	4b10      	ldr	r3, [pc, #64]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80077f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077fc:	099b      	lsrs	r3, r3, #6
 80077fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	fb02 f303 	mul.w	r3, r2, r3
 8007808:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800780a:	4b0b      	ldr	r3, [pc, #44]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800780c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007810:	0f1b      	lsrs	r3, r3, #28
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	fbb2 f3f3 	udiv	r3, r2, r3
 800781c:	617b      	str	r3, [r7, #20]
          break;
 800781e:	e002      	b.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007820:	2300      	movs	r3, #0
 8007822:	617b      	str	r3, [r7, #20]
          break;
 8007824:	bf00      	nop
        }
      }
      break;
 8007826:	bf00      	nop
    }
  }
  return frequency;
 8007828:	697b      	ldr	r3, [r7, #20]
}
 800782a:	4618      	mov	r0, r3
 800782c:	371c      	adds	r7, #28
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	40023800 	.word	0x40023800
 800783c:	00bb8000 	.word	0x00bb8000
 8007840:	007a1200 	.word	0x007a1200
 8007844:	00f42400 	.word	0x00f42400

08007848 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e01c      	b.n	8007894 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	795b      	ldrb	r3, [r3, #5]
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d105      	bne.n	8007870 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7fa ff16 	bl	800269c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f042 0204 	orr.w	r2, r2, #4
 8007884:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	791b      	ldrb	r3, [r3, #4]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d101      	bne.n	80078b6 <HAL_RNG_GenerateRandomNumber+0x1a>
 80078b2:	2302      	movs	r3, #2
 80078b4:	e03d      	b.n	8007932 <HAL_RNG_GenerateRandomNumber+0x96>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	795b      	ldrb	r3, [r3, #5]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d12c      	bne.n	8007920 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2202      	movs	r2, #2
 80078ca:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078cc:	f7fb fd2e 	bl	800332c <HAL_GetTick>
 80078d0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80078d2:	e011      	b.n	80078f8 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80078d4:	f7fb fd2a 	bl	800332c <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d90a      	bls.n	80078f8 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e01c      	b.n	8007932 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b01      	cmp	r3, #1
 8007904:	d1e6      	bne.n	80078d4 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68da      	ldr	r2, [r3, #12]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	715a      	strb	r2, [r3, #5]
 800791e:	e004      	b.n	800792a <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2204      	movs	r2, #4
 8007924:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	711a      	strb	r2, [r3, #4]

  return status;
 8007930:	7bfb      	ldrb	r3, [r7, #15]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	330c      	adds	r3, #12
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff ffa7 	bl	800789c <HAL_RNG_GenerateRandomNumber>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d102      	bne.n	800795a <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	e000      	b.n	800795c <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800795a:	2300      	movs	r3, #0
  }
}
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e07b      	b.n	8007a6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	2b00      	cmp	r3, #0
 800797c:	d108      	bne.n	8007990 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007986:	d009      	beq.n	800799c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	61da      	str	r2, [r3, #28]
 800798e:	e005      	b.n	800799c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d106      	bne.n	80079bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7fa fe92 	bl	80026e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079e4:	431a      	orrs	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ee:	431a      	orrs	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	431a      	orrs	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	431a      	orrs	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a16:	431a      	orrs	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a20:	ea42 0103 	orr.w	r1, r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	0c1b      	lsrs	r3, r3, #16
 8007a3a:	f003 0104 	and.w	r1, r3, #4
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a42:	f003 0210 	and.w	r2, r3, #16
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69da      	ldr	r2, [r3, #28]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b088      	sub	sp, #32
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	603b      	str	r3, [r7, #0]
 8007a82:	4613      	mov	r3, r2
 8007a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d101      	bne.n	8007a98 <HAL_SPI_Transmit+0x22>
 8007a94:	2302      	movs	r3, #2
 8007a96:	e126      	b.n	8007ce6 <HAL_SPI_Transmit+0x270>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007aa0:	f7fb fc44 	bl	800332c <HAL_GetTick>
 8007aa4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007aa6:	88fb      	ldrh	r3, [r7, #6]
 8007aa8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d002      	beq.n	8007abc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007aba:	e10b      	b.n	8007cd4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <HAL_SPI_Transmit+0x52>
 8007ac2:	88fb      	ldrh	r3, [r7, #6]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d102      	bne.n	8007ace <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007acc:	e102      	b.n	8007cd4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2203      	movs	r2, #3
 8007ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	88fa      	ldrh	r2, [r7, #6]
 8007ae6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	88fa      	ldrh	r2, [r7, #6]
 8007aec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b14:	d10f      	bne.n	8007b36 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b40:	2b40      	cmp	r3, #64	; 0x40
 8007b42:	d007      	beq.n	8007b54 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b5c:	d14b      	bne.n	8007bf6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d002      	beq.n	8007b6c <HAL_SPI_Transmit+0xf6>
 8007b66:	8afb      	ldrh	r3, [r7, #22]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d13e      	bne.n	8007bea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b70:	881a      	ldrh	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7c:	1c9a      	adds	r2, r3, #2
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007b90:	e02b      	b.n	8007bea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d112      	bne.n	8007bc6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba4:	881a      	ldrh	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb0:	1c9a      	adds	r2, r3, #2
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8007bc4:	e011      	b.n	8007bea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bc6:	f7fb fbb1 	bl	800332c <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d803      	bhi.n	8007bde <HAL_SPI_Transmit+0x168>
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bdc:	d102      	bne.n	8007be4 <HAL_SPI_Transmit+0x16e>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d102      	bne.n	8007bea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007be8:	e074      	b.n	8007cd4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1ce      	bne.n	8007b92 <HAL_SPI_Transmit+0x11c>
 8007bf4:	e04c      	b.n	8007c90 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <HAL_SPI_Transmit+0x18e>
 8007bfe:	8afb      	ldrh	r3, [r7, #22]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d140      	bne.n	8007c86 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	330c      	adds	r3, #12
 8007c0e:	7812      	ldrb	r2, [r2, #0]
 8007c10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c16:	1c5a      	adds	r2, r3, #1
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	3b01      	subs	r3, #1
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007c2a:	e02c      	b.n	8007c86 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d113      	bne.n	8007c62 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	330c      	adds	r3, #12
 8007c44:	7812      	ldrb	r2, [r2, #0]
 8007c46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007c60:	e011      	b.n	8007c86 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c62:	f7fb fb63 	bl	800332c <HAL_GetTick>
 8007c66:	4602      	mov	r2, r0
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d803      	bhi.n	8007c7a <HAL_SPI_Transmit+0x204>
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c78:	d102      	bne.n	8007c80 <HAL_SPI_Transmit+0x20a>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c84:	e026      	b.n	8007cd4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1cd      	bne.n	8007c2c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 f8b3 	bl	8007e00 <SPI_EndRxTxTransaction>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10a      	bne.n	8007cc4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cae:	2300      	movs	r3, #0
 8007cb0:	613b      	str	r3, [r7, #16]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	613b      	str	r3, [r7, #16]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	613b      	str	r3, [r7, #16]
 8007cc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	77fb      	strb	r3, [r7, #31]
 8007cd0:	e000      	b.n	8007cd4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007cd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ce4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3720      	adds	r7, #32
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b088      	sub	sp, #32
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	603b      	str	r3, [r7, #0]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d00:	f7fb fb14 	bl	800332c <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d08:	1a9b      	subs	r3, r3, r2
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d10:	f7fb fb0c 	bl	800332c <HAL_GetTick>
 8007d14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d16:	4b39      	ldr	r3, [pc, #228]	; (8007dfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	015b      	lsls	r3, r3, #5
 8007d1c:	0d1b      	lsrs	r3, r3, #20
 8007d1e:	69fa      	ldr	r2, [r7, #28]
 8007d20:	fb02 f303 	mul.w	r3, r2, r3
 8007d24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d26:	e054      	b.n	8007dd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d2e:	d050      	beq.n	8007dd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d30:	f7fb fafc 	bl	800332c <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	69fa      	ldr	r2, [r7, #28]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d902      	bls.n	8007d46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d13d      	bne.n	8007dc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d5e:	d111      	bne.n	8007d84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d68:	d004      	beq.n	8007d74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d72:	d107      	bne.n	8007d84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d8c:	d10f      	bne.n	8007dae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e017      	b.n	8007df2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	bf0c      	ite	eq
 8007de2:	2301      	moveq	r3, #1
 8007de4:	2300      	movne	r3, #0
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	461a      	mov	r2, r3
 8007dea:	79fb      	ldrb	r3, [r7, #7]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d19b      	bne.n	8007d28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3720      	adds	r7, #32
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	20000010 	.word	0x20000010

08007e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b088      	sub	sp, #32
 8007e04:	af02      	add	r7, sp, #8
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e0c:	4b1b      	ldr	r3, [pc, #108]	; (8007e7c <SPI_EndRxTxTransaction+0x7c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a1b      	ldr	r2, [pc, #108]	; (8007e80 <SPI_EndRxTxTransaction+0x80>)
 8007e12:	fba2 2303 	umull	r2, r3, r2, r3
 8007e16:	0d5b      	lsrs	r3, r3, #21
 8007e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e1c:	fb02 f303 	mul.w	r3, r2, r3
 8007e20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e2a:	d112      	bne.n	8007e52 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2200      	movs	r2, #0
 8007e34:	2180      	movs	r1, #128	; 0x80
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f7ff ff5a 	bl	8007cf0 <SPI_WaitFlagStateUntilTimeout>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d016      	beq.n	8007e70 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e46:	f043 0220 	orr.w	r2, r3, #32
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e00f      	b.n	8007e72 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00a      	beq.n	8007e6e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e68:	2b80      	cmp	r3, #128	; 0x80
 8007e6a:	d0f2      	beq.n	8007e52 <SPI_EndRxTxTransaction+0x52>
 8007e6c:	e000      	b.n	8007e70 <SPI_EndRxTxTransaction+0x70>
        break;
 8007e6e:	bf00      	nop
  }

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3718      	adds	r7, #24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20000010 	.word	0x20000010
 8007e80:	165e9f81 	.word	0x165e9f81

08007e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e041      	b.n	8007f1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d106      	bne.n	8007eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7fa fcfe 	bl	80028ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	f000 fd68 	bl	8008998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
	...

08007f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d001      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e04e      	b.n	8007fda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0201 	orr.w	r2, r2, #1
 8007f52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a23      	ldr	r2, [pc, #140]	; (8007fe8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d022      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0x80>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f66:	d01d      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0x80>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a1f      	ldr	r2, [pc, #124]	; (8007fec <HAL_TIM_Base_Start_IT+0xc8>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d018      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0x80>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a1e      	ldr	r2, [pc, #120]	; (8007ff0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d013      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0x80>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a1c      	ldr	r2, [pc, #112]	; (8007ff4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d00e      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0x80>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a1b      	ldr	r2, [pc, #108]	; (8007ff8 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d009      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0x80>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a19      	ldr	r2, [pc, #100]	; (8007ffc <HAL_TIM_Base_Start_IT+0xd8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d004      	beq.n	8007fa4 <HAL_TIM_Base_Start_IT+0x80>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a18      	ldr	r2, [pc, #96]	; (8008000 <HAL_TIM_Base_Start_IT+0xdc>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d111      	bne.n	8007fc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f003 0307 	and.w	r3, r3, #7
 8007fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b06      	cmp	r3, #6
 8007fb4:	d010      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f042 0201 	orr.w	r2, r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fc6:	e007      	b.n	8007fd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f042 0201 	orr.w	r2, r2, #1
 8007fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	40010000 	.word	0x40010000
 8007fec:	40000400 	.word	0x40000400
 8007ff0:	40000800 	.word	0x40000800
 8007ff4:	40000c00 	.word	0x40000c00
 8007ff8:	40010400 	.word	0x40010400
 8007ffc:	40014000 	.word	0x40014000
 8008000:	40001800 	.word	0x40001800

08008004 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d109      	bne.n	8008028 <HAL_TIM_OC_Start_IT+0x24>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b01      	cmp	r3, #1
 800801e:	bf14      	ite	ne
 8008020:	2301      	movne	r3, #1
 8008022:	2300      	moveq	r3, #0
 8008024:	b2db      	uxtb	r3, r3
 8008026:	e022      	b.n	800806e <HAL_TIM_OC_Start_IT+0x6a>
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	2b04      	cmp	r3, #4
 800802c:	d109      	bne.n	8008042 <HAL_TIM_OC_Start_IT+0x3e>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b01      	cmp	r3, #1
 8008038:	bf14      	ite	ne
 800803a:	2301      	movne	r3, #1
 800803c:	2300      	moveq	r3, #0
 800803e:	b2db      	uxtb	r3, r3
 8008040:	e015      	b.n	800806e <HAL_TIM_OC_Start_IT+0x6a>
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b08      	cmp	r3, #8
 8008046:	d109      	bne.n	800805c <HAL_TIM_OC_Start_IT+0x58>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b01      	cmp	r3, #1
 8008052:	bf14      	ite	ne
 8008054:	2301      	movne	r3, #1
 8008056:	2300      	moveq	r3, #0
 8008058:	b2db      	uxtb	r3, r3
 800805a:	e008      	b.n	800806e <HAL_TIM_OC_Start_IT+0x6a>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b01      	cmp	r3, #1
 8008066:	bf14      	ite	ne
 8008068:	2301      	movne	r3, #1
 800806a:	2300      	moveq	r3, #0
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e0c2      	b.n	80081fc <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <HAL_TIM_OC_Start_IT+0x82>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008084:	e013      	b.n	80080ae <HAL_TIM_OC_Start_IT+0xaa>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b04      	cmp	r3, #4
 800808a:	d104      	bne.n	8008096 <HAL_TIM_OC_Start_IT+0x92>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2202      	movs	r2, #2
 8008090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008094:	e00b      	b.n	80080ae <HAL_TIM_OC_Start_IT+0xaa>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b08      	cmp	r3, #8
 800809a:	d104      	bne.n	80080a6 <HAL_TIM_OC_Start_IT+0xa2>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080a4:	e003      	b.n	80080ae <HAL_TIM_OC_Start_IT+0xaa>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2202      	movs	r2, #2
 80080aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b0c      	cmp	r3, #12
 80080b2:	d841      	bhi.n	8008138 <HAL_TIM_OC_Start_IT+0x134>
 80080b4:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <HAL_TIM_OC_Start_IT+0xb8>)
 80080b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ba:	bf00      	nop
 80080bc:	080080f1 	.word	0x080080f1
 80080c0:	08008139 	.word	0x08008139
 80080c4:	08008139 	.word	0x08008139
 80080c8:	08008139 	.word	0x08008139
 80080cc:	08008103 	.word	0x08008103
 80080d0:	08008139 	.word	0x08008139
 80080d4:	08008139 	.word	0x08008139
 80080d8:	08008139 	.word	0x08008139
 80080dc:	08008115 	.word	0x08008115
 80080e0:	08008139 	.word	0x08008139
 80080e4:	08008139 	.word	0x08008139
 80080e8:	08008139 	.word	0x08008139
 80080ec:	08008127 	.word	0x08008127
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f042 0202 	orr.w	r2, r2, #2
 80080fe:	60da      	str	r2, [r3, #12]
      break;
 8008100:	e01b      	b.n	800813a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f042 0204 	orr.w	r2, r2, #4
 8008110:	60da      	str	r2, [r3, #12]
      break;
 8008112:	e012      	b.n	800813a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68da      	ldr	r2, [r3, #12]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 0208 	orr.w	r2, r2, #8
 8008122:	60da      	str	r2, [r3, #12]
      break;
 8008124:	e009      	b.n	800813a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f042 0210 	orr.w	r2, r2, #16
 8008134:	60da      	str	r2, [r3, #12]
      break;
 8008136:	e000      	b.n	800813a <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8008138:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2201      	movs	r2, #1
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	4618      	mov	r0, r3
 8008144:	f000 ff12 	bl	8008f6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a2d      	ldr	r2, [pc, #180]	; (8008204 <HAL_TIM_OC_Start_IT+0x200>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d004      	beq.n	800815c <HAL_TIM_OC_Start_IT+0x158>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a2c      	ldr	r2, [pc, #176]	; (8008208 <HAL_TIM_OC_Start_IT+0x204>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d101      	bne.n	8008160 <HAL_TIM_OC_Start_IT+0x15c>
 800815c:	2301      	movs	r3, #1
 800815e:	e000      	b.n	8008162 <HAL_TIM_OC_Start_IT+0x15e>
 8008160:	2300      	movs	r3, #0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008174:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a22      	ldr	r2, [pc, #136]	; (8008204 <HAL_TIM_OC_Start_IT+0x200>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d022      	beq.n	80081c6 <HAL_TIM_OC_Start_IT+0x1c2>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008188:	d01d      	beq.n	80081c6 <HAL_TIM_OC_Start_IT+0x1c2>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a1f      	ldr	r2, [pc, #124]	; (800820c <HAL_TIM_OC_Start_IT+0x208>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d018      	beq.n	80081c6 <HAL_TIM_OC_Start_IT+0x1c2>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a1d      	ldr	r2, [pc, #116]	; (8008210 <HAL_TIM_OC_Start_IT+0x20c>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d013      	beq.n	80081c6 <HAL_TIM_OC_Start_IT+0x1c2>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a1c      	ldr	r2, [pc, #112]	; (8008214 <HAL_TIM_OC_Start_IT+0x210>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d00e      	beq.n	80081c6 <HAL_TIM_OC_Start_IT+0x1c2>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a16      	ldr	r2, [pc, #88]	; (8008208 <HAL_TIM_OC_Start_IT+0x204>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d009      	beq.n	80081c6 <HAL_TIM_OC_Start_IT+0x1c2>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a18      	ldr	r2, [pc, #96]	; (8008218 <HAL_TIM_OC_Start_IT+0x214>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d004      	beq.n	80081c6 <HAL_TIM_OC_Start_IT+0x1c2>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a16      	ldr	r2, [pc, #88]	; (800821c <HAL_TIM_OC_Start_IT+0x218>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d111      	bne.n	80081ea <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f003 0307 	and.w	r3, r3, #7
 80081d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b06      	cmp	r3, #6
 80081d6:	d010      	beq.n	80081fa <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f042 0201 	orr.w	r2, r2, #1
 80081e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e8:	e007      	b.n	80081fa <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f042 0201 	orr.w	r2, r2, #1
 80081f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	40010000 	.word	0x40010000
 8008208:	40010400 	.word	0x40010400
 800820c:	40000400 	.word	0x40000400
 8008210:	40000800 	.word	0x40000800
 8008214:	40000c00 	.word	0x40000c00
 8008218:	40014000 	.word	0x40014000
 800821c:	40001800 	.word	0x40001800

08008220 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e041      	b.n	80082b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d106      	bne.n	800824c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f839 	bl	80082be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2202      	movs	r2, #2
 8008250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3304      	adds	r3, #4
 800825c:	4619      	mov	r1, r3
 800825e:	4610      	mov	r0, r2
 8008260:	f000 fb9a 	bl	8008998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80082c6:	bf00      	nop
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b086      	sub	sp, #24
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e097      	b.n	8008416 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d106      	bne.n	8008300 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7fa fa8e 	bl	800281c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2202      	movs	r2, #2
 8008304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	6812      	ldr	r2, [r2, #0]
 8008312:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008316:	f023 0307 	bic.w	r3, r3, #7
 800831a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3304      	adds	r3, #4
 8008324:	4619      	mov	r1, r3
 8008326:	4610      	mov	r0, r2
 8008328:	f000 fb36 	bl	8008998 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	4313      	orrs	r3, r2
 800834c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008354:	f023 0303 	bic.w	r3, r3, #3
 8008358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	021b      	lsls	r3, r3, #8
 8008364:	4313      	orrs	r3, r2
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	4313      	orrs	r3, r2
 800836a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008372:	f023 030c 	bic.w	r3, r3, #12
 8008376:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800837e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	021b      	lsls	r3, r3, #8
 800838e:	4313      	orrs	r3, r2
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	4313      	orrs	r3, r2
 8008394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	011a      	lsls	r2, r3, #4
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	6a1b      	ldr	r3, [r3, #32]
 80083a0:	031b      	lsls	r3, r3, #12
 80083a2:	4313      	orrs	r3, r2
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80083b0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80083b8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	011b      	lsls	r3, r3, #4
 80083c4:	4313      	orrs	r3, r2
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3718      	adds	r7, #24
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f003 0302 	and.w	r3, r3, #2
 8008430:	2b02      	cmp	r3, #2
 8008432:	d122      	bne.n	800847a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b02      	cmp	r3, #2
 8008440:	d11b      	bne.n	800847a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f06f 0202 	mvn.w	r2, #2
 800844a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	f003 0303 	and.w	r3, r3, #3
 800845c:	2b00      	cmp	r3, #0
 800845e:	d003      	beq.n	8008468 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fa7b 	bl	800895c <HAL_TIM_IC_CaptureCallback>
 8008466:	e005      	b.n	8008474 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fa6d 	bl	8008948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fa7e 	bl	8008970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	f003 0304 	and.w	r3, r3, #4
 8008484:	2b04      	cmp	r3, #4
 8008486:	d122      	bne.n	80084ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	f003 0304 	and.w	r3, r3, #4
 8008492:	2b04      	cmp	r3, #4
 8008494:	d11b      	bne.n	80084ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f06f 0204 	mvn.w	r2, #4
 800849e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d003      	beq.n	80084bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fa51 	bl	800895c <HAL_TIM_IC_CaptureCallback>
 80084ba:	e005      	b.n	80084c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fa43 	bl	8008948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fa54 	bl	8008970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	f003 0308 	and.w	r3, r3, #8
 80084d8:	2b08      	cmp	r3, #8
 80084da:	d122      	bne.n	8008522 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	f003 0308 	and.w	r3, r3, #8
 80084e6:	2b08      	cmp	r3, #8
 80084e8:	d11b      	bne.n	8008522 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f06f 0208 	mvn.w	r2, #8
 80084f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2204      	movs	r2, #4
 80084f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	f003 0303 	and.w	r3, r3, #3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d003      	beq.n	8008510 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fa27 	bl	800895c <HAL_TIM_IC_CaptureCallback>
 800850e:	e005      	b.n	800851c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fa19 	bl	8008948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fa2a 	bl	8008970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	f003 0310 	and.w	r3, r3, #16
 800852c:	2b10      	cmp	r3, #16
 800852e:	d122      	bne.n	8008576 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	f003 0310 	and.w	r3, r3, #16
 800853a:	2b10      	cmp	r3, #16
 800853c:	d11b      	bne.n	8008576 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f06f 0210 	mvn.w	r2, #16
 8008546:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2208      	movs	r2, #8
 800854c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008558:	2b00      	cmp	r3, #0
 800855a:	d003      	beq.n	8008564 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f9fd 	bl	800895c <HAL_TIM_IC_CaptureCallback>
 8008562:	e005      	b.n	8008570 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f9ef 	bl	8008948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fa00 	bl	8008970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	f003 0301 	and.w	r3, r3, #1
 8008580:	2b01      	cmp	r3, #1
 8008582:	d10e      	bne.n	80085a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b01      	cmp	r3, #1
 8008590:	d107      	bne.n	80085a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f06f 0201 	mvn.w	r2, #1
 800859a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f9c9 	bl	8008934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ac:	2b80      	cmp	r3, #128	; 0x80
 80085ae:	d10e      	bne.n	80085ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ba:	2b80      	cmp	r3, #128	; 0x80
 80085bc:	d107      	bne.n	80085ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fd7b 	bl	80090c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d8:	2b40      	cmp	r3, #64	; 0x40
 80085da:	d10e      	bne.n	80085fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e6:	2b40      	cmp	r3, #64	; 0x40
 80085e8:	d107      	bne.n	80085fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80085f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f9c5 	bl	8008984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	f003 0320 	and.w	r3, r3, #32
 8008604:	2b20      	cmp	r3, #32
 8008606:	d10e      	bne.n	8008626 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f003 0320 	and.w	r3, r3, #32
 8008612:	2b20      	cmp	r3, #32
 8008614:	d107      	bne.n	8008626 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f06f 0220 	mvn.w	r2, #32
 800861e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fd45 	bl	80090b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008642:	2b01      	cmp	r3, #1
 8008644:	d101      	bne.n	800864a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008646:	2302      	movs	r3, #2
 8008648:	e0ac      	b.n	80087a4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b0c      	cmp	r3, #12
 8008656:	f200 809f 	bhi.w	8008798 <HAL_TIM_PWM_ConfigChannel+0x168>
 800865a:	a201      	add	r2, pc, #4	; (adr r2, 8008660 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800865c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008660:	08008695 	.word	0x08008695
 8008664:	08008799 	.word	0x08008799
 8008668:	08008799 	.word	0x08008799
 800866c:	08008799 	.word	0x08008799
 8008670:	080086d5 	.word	0x080086d5
 8008674:	08008799 	.word	0x08008799
 8008678:	08008799 	.word	0x08008799
 800867c:	08008799 	.word	0x08008799
 8008680:	08008717 	.word	0x08008717
 8008684:	08008799 	.word	0x08008799
 8008688:	08008799 	.word	0x08008799
 800868c:	08008799 	.word	0x08008799
 8008690:	08008757 	.word	0x08008757
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68b9      	ldr	r1, [r7, #8]
 800869a:	4618      	mov	r0, r3
 800869c:	f000 fa1c 	bl	8008ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	699a      	ldr	r2, [r3, #24]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f042 0208 	orr.w	r2, r2, #8
 80086ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	699a      	ldr	r2, [r3, #24]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 0204 	bic.w	r2, r2, #4
 80086be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6999      	ldr	r1, [r3, #24]
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	691a      	ldr	r2, [r3, #16]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	619a      	str	r2, [r3, #24]
      break;
 80086d2:	e062      	b.n	800879a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68b9      	ldr	r1, [r7, #8]
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 fa6c 	bl	8008bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	699a      	ldr	r2, [r3, #24]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	699a      	ldr	r2, [r3, #24]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6999      	ldr	r1, [r3, #24]
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	021a      	lsls	r2, r3, #8
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	430a      	orrs	r2, r1
 8008712:	619a      	str	r2, [r3, #24]
      break;
 8008714:	e041      	b.n	800879a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68b9      	ldr	r1, [r7, #8]
 800871c:	4618      	mov	r0, r3
 800871e:	f000 fac1 	bl	8008ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69da      	ldr	r2, [r3, #28]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f042 0208 	orr.w	r2, r2, #8
 8008730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	69da      	ldr	r2, [r3, #28]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f022 0204 	bic.w	r2, r2, #4
 8008740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69d9      	ldr	r1, [r3, #28]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	691a      	ldr	r2, [r3, #16]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	430a      	orrs	r2, r1
 8008752:	61da      	str	r2, [r3, #28]
      break;
 8008754:	e021      	b.n	800879a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68b9      	ldr	r1, [r7, #8]
 800875c:	4618      	mov	r0, r3
 800875e:	f000 fb15 	bl	8008d8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	69da      	ldr	r2, [r3, #28]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	69da      	ldr	r2, [r3, #28]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	69d9      	ldr	r1, [r3, #28]
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	021a      	lsls	r2, r3, #8
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	61da      	str	r2, [r3, #28]
      break;
 8008796:	e000      	b.n	800879a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008798:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d101      	bne.n	80087c4 <HAL_TIM_ConfigClockSource+0x18>
 80087c0:	2302      	movs	r3, #2
 80087c2:	e0b3      	b.n	800892c <HAL_TIM_ConfigClockSource+0x180>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80087e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087fc:	d03e      	beq.n	800887c <HAL_TIM_ConfigClockSource+0xd0>
 80087fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008802:	f200 8087 	bhi.w	8008914 <HAL_TIM_ConfigClockSource+0x168>
 8008806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800880a:	f000 8085 	beq.w	8008918 <HAL_TIM_ConfigClockSource+0x16c>
 800880e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008812:	d87f      	bhi.n	8008914 <HAL_TIM_ConfigClockSource+0x168>
 8008814:	2b70      	cmp	r3, #112	; 0x70
 8008816:	d01a      	beq.n	800884e <HAL_TIM_ConfigClockSource+0xa2>
 8008818:	2b70      	cmp	r3, #112	; 0x70
 800881a:	d87b      	bhi.n	8008914 <HAL_TIM_ConfigClockSource+0x168>
 800881c:	2b60      	cmp	r3, #96	; 0x60
 800881e:	d050      	beq.n	80088c2 <HAL_TIM_ConfigClockSource+0x116>
 8008820:	2b60      	cmp	r3, #96	; 0x60
 8008822:	d877      	bhi.n	8008914 <HAL_TIM_ConfigClockSource+0x168>
 8008824:	2b50      	cmp	r3, #80	; 0x50
 8008826:	d03c      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0xf6>
 8008828:	2b50      	cmp	r3, #80	; 0x50
 800882a:	d873      	bhi.n	8008914 <HAL_TIM_ConfigClockSource+0x168>
 800882c:	2b40      	cmp	r3, #64	; 0x40
 800882e:	d058      	beq.n	80088e2 <HAL_TIM_ConfigClockSource+0x136>
 8008830:	2b40      	cmp	r3, #64	; 0x40
 8008832:	d86f      	bhi.n	8008914 <HAL_TIM_ConfigClockSource+0x168>
 8008834:	2b30      	cmp	r3, #48	; 0x30
 8008836:	d064      	beq.n	8008902 <HAL_TIM_ConfigClockSource+0x156>
 8008838:	2b30      	cmp	r3, #48	; 0x30
 800883a:	d86b      	bhi.n	8008914 <HAL_TIM_ConfigClockSource+0x168>
 800883c:	2b20      	cmp	r3, #32
 800883e:	d060      	beq.n	8008902 <HAL_TIM_ConfigClockSource+0x156>
 8008840:	2b20      	cmp	r3, #32
 8008842:	d867      	bhi.n	8008914 <HAL_TIM_ConfigClockSource+0x168>
 8008844:	2b00      	cmp	r3, #0
 8008846:	d05c      	beq.n	8008902 <HAL_TIM_ConfigClockSource+0x156>
 8008848:	2b10      	cmp	r3, #16
 800884a:	d05a      	beq.n	8008902 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800884c:	e062      	b.n	8008914 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6818      	ldr	r0, [r3, #0]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	6899      	ldr	r1, [r3, #8]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	685a      	ldr	r2, [r3, #4]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f000 fb65 	bl	8008f2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008870:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	609a      	str	r2, [r3, #8]
      break;
 800887a:	e04e      	b.n	800891a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6818      	ldr	r0, [r3, #0]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	6899      	ldr	r1, [r3, #8]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	685a      	ldr	r2, [r3, #4]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	f000 fb4e 	bl	8008f2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689a      	ldr	r2, [r3, #8]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800889e:	609a      	str	r2, [r3, #8]
      break;
 80088a0:	e03b      	b.n	800891a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	6859      	ldr	r1, [r3, #4]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	461a      	mov	r2, r3
 80088b0:	f000 fac2 	bl	8008e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2150      	movs	r1, #80	; 0x50
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 fb1b 	bl	8008ef6 <TIM_ITRx_SetConfig>
      break;
 80088c0:	e02b      	b.n	800891a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6818      	ldr	r0, [r3, #0]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	6859      	ldr	r1, [r3, #4]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	461a      	mov	r2, r3
 80088d0:	f000 fae1 	bl	8008e96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2160      	movs	r1, #96	; 0x60
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 fb0b 	bl	8008ef6 <TIM_ITRx_SetConfig>
      break;
 80088e0:	e01b      	b.n	800891a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6818      	ldr	r0, [r3, #0]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	6859      	ldr	r1, [r3, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	461a      	mov	r2, r3
 80088f0:	f000 faa2 	bl	8008e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2140      	movs	r1, #64	; 0x40
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fafb 	bl	8008ef6 <TIM_ITRx_SetConfig>
      break;
 8008900:	e00b      	b.n	800891a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4619      	mov	r1, r3
 800890c:	4610      	mov	r0, r2
 800890e:	f000 faf2 	bl	8008ef6 <TIM_ITRx_SetConfig>
        break;
 8008912:	e002      	b.n	800891a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008914:	bf00      	nop
 8008916:	e000      	b.n	800891a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008918:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a40      	ldr	r2, [pc, #256]	; (8008aac <TIM_Base_SetConfig+0x114>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d013      	beq.n	80089d8 <TIM_Base_SetConfig+0x40>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089b6:	d00f      	beq.n	80089d8 <TIM_Base_SetConfig+0x40>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a3d      	ldr	r2, [pc, #244]	; (8008ab0 <TIM_Base_SetConfig+0x118>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d00b      	beq.n	80089d8 <TIM_Base_SetConfig+0x40>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a3c      	ldr	r2, [pc, #240]	; (8008ab4 <TIM_Base_SetConfig+0x11c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d007      	beq.n	80089d8 <TIM_Base_SetConfig+0x40>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a3b      	ldr	r2, [pc, #236]	; (8008ab8 <TIM_Base_SetConfig+0x120>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d003      	beq.n	80089d8 <TIM_Base_SetConfig+0x40>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a3a      	ldr	r2, [pc, #232]	; (8008abc <TIM_Base_SetConfig+0x124>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d108      	bne.n	80089ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a2f      	ldr	r2, [pc, #188]	; (8008aac <TIM_Base_SetConfig+0x114>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d02b      	beq.n	8008a4a <TIM_Base_SetConfig+0xb2>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f8:	d027      	beq.n	8008a4a <TIM_Base_SetConfig+0xb2>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a2c      	ldr	r2, [pc, #176]	; (8008ab0 <TIM_Base_SetConfig+0x118>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d023      	beq.n	8008a4a <TIM_Base_SetConfig+0xb2>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a2b      	ldr	r2, [pc, #172]	; (8008ab4 <TIM_Base_SetConfig+0x11c>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d01f      	beq.n	8008a4a <TIM_Base_SetConfig+0xb2>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a2a      	ldr	r2, [pc, #168]	; (8008ab8 <TIM_Base_SetConfig+0x120>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d01b      	beq.n	8008a4a <TIM_Base_SetConfig+0xb2>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a29      	ldr	r2, [pc, #164]	; (8008abc <TIM_Base_SetConfig+0x124>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d017      	beq.n	8008a4a <TIM_Base_SetConfig+0xb2>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a28      	ldr	r2, [pc, #160]	; (8008ac0 <TIM_Base_SetConfig+0x128>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d013      	beq.n	8008a4a <TIM_Base_SetConfig+0xb2>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a27      	ldr	r2, [pc, #156]	; (8008ac4 <TIM_Base_SetConfig+0x12c>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d00f      	beq.n	8008a4a <TIM_Base_SetConfig+0xb2>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a26      	ldr	r2, [pc, #152]	; (8008ac8 <TIM_Base_SetConfig+0x130>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d00b      	beq.n	8008a4a <TIM_Base_SetConfig+0xb2>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a25      	ldr	r2, [pc, #148]	; (8008acc <TIM_Base_SetConfig+0x134>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d007      	beq.n	8008a4a <TIM_Base_SetConfig+0xb2>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a24      	ldr	r2, [pc, #144]	; (8008ad0 <TIM_Base_SetConfig+0x138>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d003      	beq.n	8008a4a <TIM_Base_SetConfig+0xb2>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a23      	ldr	r2, [pc, #140]	; (8008ad4 <TIM_Base_SetConfig+0x13c>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d108      	bne.n	8008a5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	689a      	ldr	r2, [r3, #8]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a0a      	ldr	r2, [pc, #40]	; (8008aac <TIM_Base_SetConfig+0x114>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d003      	beq.n	8008a90 <TIM_Base_SetConfig+0xf8>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a0c      	ldr	r2, [pc, #48]	; (8008abc <TIM_Base_SetConfig+0x124>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d103      	bne.n	8008a98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	615a      	str	r2, [r3, #20]
}
 8008a9e:	bf00      	nop
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	40010000 	.word	0x40010000
 8008ab0:	40000400 	.word	0x40000400
 8008ab4:	40000800 	.word	0x40000800
 8008ab8:	40000c00 	.word	0x40000c00
 8008abc:	40010400 	.word	0x40010400
 8008ac0:	40014000 	.word	0x40014000
 8008ac4:	40014400 	.word	0x40014400
 8008ac8:	40014800 	.word	0x40014800
 8008acc:	40001800 	.word	0x40001800
 8008ad0:	40001c00 	.word	0x40001c00
 8008ad4:	40002000 	.word	0x40002000

08008ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	f023 0201 	bic.w	r2, r3, #1
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f023 0303 	bic.w	r3, r3, #3
 8008b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f023 0302 	bic.w	r3, r3, #2
 8008b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a20      	ldr	r2, [pc, #128]	; (8008bb0 <TIM_OC1_SetConfig+0xd8>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d003      	beq.n	8008b3c <TIM_OC1_SetConfig+0x64>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a1f      	ldr	r2, [pc, #124]	; (8008bb4 <TIM_OC1_SetConfig+0xdc>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d10c      	bne.n	8008b56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	f023 0308 	bic.w	r3, r3, #8
 8008b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f023 0304 	bic.w	r3, r3, #4
 8008b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a15      	ldr	r2, [pc, #84]	; (8008bb0 <TIM_OC1_SetConfig+0xd8>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d003      	beq.n	8008b66 <TIM_OC1_SetConfig+0x8e>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a14      	ldr	r2, [pc, #80]	; (8008bb4 <TIM_OC1_SetConfig+0xdc>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d111      	bne.n	8008b8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	621a      	str	r2, [r3, #32]
}
 8008ba4:	bf00      	nop
 8008ba6:	371c      	adds	r7, #28
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	40010000 	.word	0x40010000
 8008bb4:	40010400 	.word	0x40010400

08008bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b087      	sub	sp, #28
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	f023 0210 	bic.w	r2, r3, #16
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	021b      	lsls	r3, r3, #8
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	f023 0320 	bic.w	r3, r3, #32
 8008c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	011b      	lsls	r3, r3, #4
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a22      	ldr	r2, [pc, #136]	; (8008c9c <TIM_OC2_SetConfig+0xe4>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d003      	beq.n	8008c20 <TIM_OC2_SetConfig+0x68>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a21      	ldr	r2, [pc, #132]	; (8008ca0 <TIM_OC2_SetConfig+0xe8>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d10d      	bne.n	8008c3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	011b      	lsls	r3, r3, #4
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a17      	ldr	r2, [pc, #92]	; (8008c9c <TIM_OC2_SetConfig+0xe4>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d003      	beq.n	8008c4c <TIM_OC2_SetConfig+0x94>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a16      	ldr	r2, [pc, #88]	; (8008ca0 <TIM_OC2_SetConfig+0xe8>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d113      	bne.n	8008c74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	695b      	ldr	r3, [r3, #20]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	621a      	str	r2, [r3, #32]
}
 8008c8e:	bf00      	nop
 8008c90:	371c      	adds	r7, #28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	40010000 	.word	0x40010000
 8008ca0:	40010400 	.word	0x40010400

08008ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f023 0303 	bic.w	r3, r3, #3
 8008cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	021b      	lsls	r3, r3, #8
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a21      	ldr	r2, [pc, #132]	; (8008d84 <TIM_OC3_SetConfig+0xe0>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d003      	beq.n	8008d0a <TIM_OC3_SetConfig+0x66>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a20      	ldr	r2, [pc, #128]	; (8008d88 <TIM_OC3_SetConfig+0xe4>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d10d      	bne.n	8008d26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	021b      	lsls	r3, r3, #8
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a16      	ldr	r2, [pc, #88]	; (8008d84 <TIM_OC3_SetConfig+0xe0>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d003      	beq.n	8008d36 <TIM_OC3_SetConfig+0x92>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a15      	ldr	r2, [pc, #84]	; (8008d88 <TIM_OC3_SetConfig+0xe4>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d113      	bne.n	8008d5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	011b      	lsls	r3, r3, #4
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	011b      	lsls	r3, r3, #4
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	621a      	str	r2, [r3, #32]
}
 8008d78:	bf00      	nop
 8008d7a:	371c      	adds	r7, #28
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	40010000 	.word	0x40010000
 8008d88:	40010400 	.word	0x40010400

08008d8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	021b      	lsls	r3, r3, #8
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	031b      	lsls	r3, r3, #12
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a12      	ldr	r2, [pc, #72]	; (8008e30 <TIM_OC4_SetConfig+0xa4>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d003      	beq.n	8008df4 <TIM_OC4_SetConfig+0x68>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a11      	ldr	r2, [pc, #68]	; (8008e34 <TIM_OC4_SetConfig+0xa8>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d109      	bne.n	8008e08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	019b      	lsls	r3, r3, #6
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	685a      	ldr	r2, [r3, #4]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	621a      	str	r2, [r3, #32]
}
 8008e22:	bf00      	nop
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	40010000 	.word	0x40010000
 8008e34:	40010400 	.word	0x40010400

08008e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6a1b      	ldr	r3, [r3, #32]
 8008e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	f023 0201 	bic.w	r2, r3, #1
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	011b      	lsls	r3, r3, #4
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	f023 030a 	bic.w	r3, r3, #10
 8008e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	621a      	str	r2, [r3, #32]
}
 8008e8a:	bf00      	nop
 8008e8c:	371c      	adds	r7, #28
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b087      	sub	sp, #28
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	60f8      	str	r0, [r7, #12]
 8008e9e:	60b9      	str	r1, [r7, #8]
 8008ea0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	f023 0210 	bic.w	r2, r3, #16
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ec0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	031b      	lsls	r3, r3, #12
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ed2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	011b      	lsls	r3, r3, #4
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	621a      	str	r2, [r3, #32]
}
 8008eea:	bf00      	nop
 8008eec:	371c      	adds	r7, #28
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b085      	sub	sp, #20
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	f043 0307 	orr.w	r3, r3, #7
 8008f18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	609a      	str	r2, [r3, #8]
}
 8008f20:	bf00      	nop
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
 8008f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	021a      	lsls	r2, r3, #8
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	609a      	str	r2, [r3, #8]
}
 8008f60:	bf00      	nop
 8008f62:	371c      	adds	r7, #28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f003 031f 	and.w	r3, r3, #31
 8008f7e:	2201      	movs	r2, #1
 8008f80:	fa02 f303 	lsl.w	r3, r2, r3
 8008f84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6a1a      	ldr	r2, [r3, #32]
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	43db      	mvns	r3, r3
 8008f8e:	401a      	ands	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6a1a      	ldr	r2, [r3, #32]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	f003 031f 	and.w	r3, r3, #31
 8008f9e:	6879      	ldr	r1, [r7, #4]
 8008fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	621a      	str	r2, [r3, #32]
}
 8008faa:	bf00      	nop
 8008fac:	371c      	adds	r7, #28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
	...

08008fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d101      	bne.n	8008fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fcc:	2302      	movs	r3, #2
 8008fce:	e05a      	b.n	8009086 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2202      	movs	r2, #2
 8008fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a21      	ldr	r2, [pc, #132]	; (8009094 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d022      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800901c:	d01d      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a1d      	ldr	r2, [pc, #116]	; (8009098 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d018      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a1b      	ldr	r2, [pc, #108]	; (800909c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d013      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a1a      	ldr	r2, [pc, #104]	; (80090a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d00e      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a18      	ldr	r2, [pc, #96]	; (80090a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d009      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a17      	ldr	r2, [pc, #92]	; (80090a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d004      	beq.n	800905a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a15      	ldr	r2, [pc, #84]	; (80090ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d10c      	bne.n	8009074 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	4313      	orrs	r3, r2
 800906a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	40010000 	.word	0x40010000
 8009098:	40000400 	.word	0x40000400
 800909c:	40000800 	.word	0x40000800
 80090a0:	40000c00 	.word	0x40000c00
 80090a4:	40010400 	.word	0x40010400
 80090a8:	40014000 	.word	0x40014000
 80090ac:	40001800 	.word	0x40001800

080090b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090d8:	b084      	sub	sp, #16
 80090da:	b580      	push	{r7, lr}
 80090dc:	b084      	sub	sp, #16
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	f107 001c 	add.w	r0, r7, #28
 80090e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d122      	bne.n	8009136 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800911a:	2b01      	cmp	r3, #1
 800911c:	d105      	bne.n	800912a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f94a 	bl	80093c4 <USB_CoreReset>
 8009130:	4603      	mov	r3, r0
 8009132:	73fb      	strb	r3, [r7, #15]
 8009134:	e01a      	b.n	800916c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f93e 	bl	80093c4 <USB_CoreReset>
 8009148:	4603      	mov	r3, r0
 800914a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800914c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800914e:	2b00      	cmp	r3, #0
 8009150:	d106      	bne.n	8009160 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009156:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	639a      	str	r2, [r3, #56]	; 0x38
 800915e:	e005      	b.n	800916c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009164:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916e:	2b01      	cmp	r3, #1
 8009170:	d10b      	bne.n	800918a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f043 0206 	orr.w	r2, r3, #6
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	f043 0220 	orr.w	r2, r3, #32
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800918a:	7bfb      	ldrb	r3, [r7, #15]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009196:	b004      	add	sp, #16
 8009198:	4770      	bx	lr

0800919a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f043 0201 	orr.w	r2, r3, #1
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	f023 0201 	bic.w	r2, r3, #1
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b082      	sub	sp, #8
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	460b      	mov	r3, r1
 80091e8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091f6:	78fb      	ldrb	r3, [r7, #3]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d106      	bne.n	800920a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	60da      	str	r2, [r3, #12]
 8009208:	e00b      	b.n	8009222 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800920a:	78fb      	ldrb	r3, [r7, #3]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d106      	bne.n	800921e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	60da      	str	r2, [r3, #12]
 800921c:	e001      	b.n	8009222 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e003      	b.n	800922a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009222:	2032      	movs	r0, #50	; 0x32
 8009224:	f7fa f88e 	bl	8003344 <HAL_Delay>

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
	...

08009234 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800923e:	2300      	movs	r3, #0
 8009240:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	019b      	lsls	r3, r3, #6
 8009246:	f043 0220 	orr.w	r2, r3, #32
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	3301      	adds	r3, #1
 8009252:	60fb      	str	r3, [r7, #12]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	4a09      	ldr	r2, [pc, #36]	; (800927c <USB_FlushTxFifo+0x48>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d901      	bls.n	8009260 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e006      	b.n	800926e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	f003 0320 	and.w	r3, r3, #32
 8009268:	2b20      	cmp	r3, #32
 800926a:	d0f0      	beq.n	800924e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	00030d40 	.word	0x00030d40

08009280 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009288:	2300      	movs	r3, #0
 800928a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2210      	movs	r2, #16
 8009290:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	3301      	adds	r3, #1
 8009296:	60fb      	str	r3, [r7, #12]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	4a09      	ldr	r2, [pc, #36]	; (80092c0 <USB_FlushRxFifo+0x40>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d901      	bls.n	80092a4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e006      	b.n	80092b2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	f003 0310 	and.w	r3, r3, #16
 80092ac:	2b10      	cmp	r3, #16
 80092ae:	d0f0      	beq.n	8009292 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	00030d40 	.word	0x00030d40

080092c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b089      	sub	sp, #36	; 0x24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	4611      	mov	r1, r2
 80092d0:	461a      	mov	r2, r3
 80092d2:	460b      	mov	r3, r1
 80092d4:	71fb      	strb	r3, [r7, #7]
 80092d6:	4613      	mov	r3, r2
 80092d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80092e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d11a      	bne.n	8009320 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80092ea:	88bb      	ldrh	r3, [r7, #4]
 80092ec:	3303      	adds	r3, #3
 80092ee:	089b      	lsrs	r3, r3, #2
 80092f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80092f2:	2300      	movs	r3, #0
 80092f4:	61bb      	str	r3, [r7, #24]
 80092f6:	e00f      	b.n	8009318 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80092f8:	79fb      	ldrb	r3, [r7, #7]
 80092fa:	031a      	lsls	r2, r3, #12
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	4413      	add	r3, r2
 8009300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009304:	461a      	mov	r2, r3
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	3304      	adds	r3, #4
 8009310:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	3301      	adds	r3, #1
 8009316:	61bb      	str	r3, [r7, #24]
 8009318:	69ba      	ldr	r2, [r7, #24]
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	429a      	cmp	r2, r3
 800931e:	d3eb      	bcc.n	80092f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3724      	adds	r7, #36	; 0x24
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800932e:	b480      	push	{r7}
 8009330:	b089      	sub	sp, #36	; 0x24
 8009332:	af00      	add	r7, sp, #0
 8009334:	60f8      	str	r0, [r7, #12]
 8009336:	60b9      	str	r1, [r7, #8]
 8009338:	4613      	mov	r3, r2
 800933a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009344:	88fb      	ldrh	r3, [r7, #6]
 8009346:	3303      	adds	r3, #3
 8009348:	089b      	lsrs	r3, r3, #2
 800934a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800934c:	2300      	movs	r3, #0
 800934e:	61bb      	str	r3, [r7, #24]
 8009350:	e00b      	b.n	800936a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	601a      	str	r2, [r3, #0]
    pDest++;
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	3304      	adds	r3, #4
 8009362:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	3301      	adds	r3, #1
 8009368:	61bb      	str	r3, [r7, #24]
 800936a:	69ba      	ldr	r2, [r7, #24]
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	429a      	cmp	r2, r3
 8009370:	d3ef      	bcc.n	8009352 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009372:	69fb      	ldr	r3, [r7, #28]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3724      	adds	r7, #36	; 0x24
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	695b      	ldr	r3, [r3, #20]
 800938c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	699b      	ldr	r3, [r3, #24]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	4013      	ands	r3, r2
 8009396:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009398:	68fb      	ldr	r3, [r7, #12]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80093a6:	b480      	push	{r7}
 80093a8:	b083      	sub	sp, #12
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	695b      	ldr	r3, [r3, #20]
 80093b2:	f003 0301 	and.w	r3, r3, #1
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
	...

080093c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3301      	adds	r3, #1
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	4a13      	ldr	r2, [pc, #76]	; (8009428 <USB_CoreReset+0x64>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d901      	bls.n	80093e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e01b      	b.n	800941a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	daf2      	bge.n	80093d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	f043 0201 	orr.w	r2, r3, #1
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	3301      	adds	r3, #1
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4a09      	ldr	r2, [pc, #36]	; (8009428 <USB_CoreReset+0x64>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d901      	bls.n	800940c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e006      	b.n	800941a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	2b01      	cmp	r3, #1
 8009416:	d0f0      	beq.n	80093fa <USB_CoreReset+0x36>

  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	00030d40 	.word	0x00030d40

0800942c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800942c:	b084      	sub	sp, #16
 800942e:	b580      	push	{r7, lr}
 8009430:	b084      	sub	sp, #16
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	f107 001c 	add.w	r0, r7, #28
 800943a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009448:	461a      	mov	r2, r3
 800944a:	2300      	movs	r3, #0
 800944c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009452:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800947a:	2b00      	cmp	r3, #0
 800947c:	d018      	beq.n	80094b0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	2b01      	cmp	r3, #1
 8009482:	d10a      	bne.n	800949a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009492:	f043 0304 	orr.w	r3, r3, #4
 8009496:	6013      	str	r3, [r2, #0]
 8009498:	e014      	b.n	80094c4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094a8:	f023 0304 	bic.w	r3, r3, #4
 80094ac:	6013      	str	r3, [r2, #0]
 80094ae:	e009      	b.n	80094c4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094be:	f023 0304 	bic.w	r3, r3, #4
 80094c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80094c4:	2110      	movs	r1, #16
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7ff feb4 	bl	8009234 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7ff fed7 	bl	8009280 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80094d2:	2300      	movs	r3, #0
 80094d4:	60fb      	str	r3, [r7, #12]
 80094d6:	e015      	b.n	8009504 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	015a      	lsls	r2, r3, #5
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	4413      	add	r3, r2
 80094e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e4:	461a      	mov	r2, r3
 80094e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094ea:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	015a      	lsls	r2, r3, #5
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094f8:	461a      	mov	r2, r3
 80094fa:	2300      	movs	r3, #0
 80094fc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3301      	adds	r3, #1
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	6a3b      	ldr	r3, [r7, #32]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	429a      	cmp	r2, r3
 800950a:	d3e5      	bcc.n	80094d8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800950c:	2101      	movs	r1, #1
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f8ac 	bl	800966c <USB_DriveVbus>

  HAL_Delay(200U);
 8009514:	20c8      	movs	r0, #200	; 0xc8
 8009516:	f7f9 ff15 	bl	8003344 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009526:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00b      	beq.n	800954c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800953a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a14      	ldr	r2, [pc, #80]	; (8009590 <USB_HostInit+0x164>)
 8009540:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a13      	ldr	r2, [pc, #76]	; (8009594 <USB_HostInit+0x168>)
 8009546:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800954a:	e009      	b.n	8009560 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2280      	movs	r2, #128	; 0x80
 8009550:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a10      	ldr	r2, [pc, #64]	; (8009598 <USB_HostInit+0x16c>)
 8009556:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a10      	ldr	r2, [pc, #64]	; (800959c <USB_HostInit+0x170>)
 800955c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	2b00      	cmp	r3, #0
 8009564:	d105      	bne.n	8009572 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	f043 0210 	orr.w	r2, r3, #16
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	699a      	ldr	r2, [r3, #24]
 8009576:	4b0a      	ldr	r3, [pc, #40]	; (80095a0 <USB_HostInit+0x174>)
 8009578:	4313      	orrs	r3, r2
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800958a:	b004      	add	sp, #16
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	01000200 	.word	0x01000200
 8009594:	00e00300 	.word	0x00e00300
 8009598:	00600080 	.word	0x00600080
 800959c:	004000e0 	.word	0x004000e0
 80095a0:	a3200008 	.word	0xa3200008

080095a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	460b      	mov	r3, r1
 80095ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80095c2:	f023 0303 	bic.w	r3, r3, #3
 80095c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	78fb      	ldrb	r3, [r7, #3]
 80095d2:	f003 0303 	and.w	r3, r3, #3
 80095d6:	68f9      	ldr	r1, [r7, #12]
 80095d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80095dc:	4313      	orrs	r3, r2
 80095de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80095e0:	78fb      	ldrb	r3, [r7, #3]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d107      	bne.n	80095f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095ec:	461a      	mov	r2, r3
 80095ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80095f2:	6053      	str	r3, [r2, #4]
 80095f4:	e009      	b.n	800960a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80095f6:	78fb      	ldrb	r3, [r7, #3]
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d106      	bne.n	800960a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009602:	461a      	mov	r2, r3
 8009604:	f241 7370 	movw	r3, #6000	; 0x1770
 8009608:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009638:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009646:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009648:	2064      	movs	r0, #100	; 0x64
 800964a:	f7f9 fe7b 	bl	8003344 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009656:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800965a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800965c:	200a      	movs	r0, #10
 800965e:	f7f9 fe71 	bl	8003344 <HAL_Delay>

  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	460b      	mov	r3, r1
 8009676:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800967c:	2300      	movs	r3, #0
 800967e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009690:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d109      	bne.n	80096b0 <USB_DriveVbus+0x44>
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d106      	bne.n	80096b0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80096aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80096ae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096ba:	d109      	bne.n	80096d0 <USB_DriveVbus+0x64>
 80096bc:	78fb      	ldrb	r3, [r7, #3]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d106      	bne.n	80096d0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80096ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3714      	adds	r7, #20
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80096de:	b480      	push	{r7}
 80096e0:	b085      	sub	sp, #20
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	0c5b      	lsrs	r3, r3, #17
 80096fc:	f003 0303 	and.w	r3, r3, #3
}
 8009700:	4618      	mov	r0, r3
 8009702:	3714      	adds	r7, #20
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	b29b      	uxth	r3, r3
}
 8009722:	4618      	mov	r0, r3
 8009724:	3714      	adds	r7, #20
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
	...

08009730 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b088      	sub	sp, #32
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	4608      	mov	r0, r1
 800973a:	4611      	mov	r1, r2
 800973c:	461a      	mov	r2, r3
 800973e:	4603      	mov	r3, r0
 8009740:	70fb      	strb	r3, [r7, #3]
 8009742:	460b      	mov	r3, r1
 8009744:	70bb      	strb	r3, [r7, #2]
 8009746:	4613      	mov	r3, r2
 8009748:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009752:	78fb      	ldrb	r3, [r7, #3]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	4413      	add	r3, r2
 800975a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800975e:	461a      	mov	r2, r3
 8009760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009764:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009766:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800976a:	2b03      	cmp	r3, #3
 800976c:	d87e      	bhi.n	800986c <USB_HC_Init+0x13c>
 800976e:	a201      	add	r2, pc, #4	; (adr r2, 8009774 <USB_HC_Init+0x44>)
 8009770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009774:	08009785 	.word	0x08009785
 8009778:	0800982f 	.word	0x0800982f
 800977c:	08009785 	.word	0x08009785
 8009780:	080097f1 	.word	0x080097f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009784:	78fb      	ldrb	r3, [r7, #3]
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	4413      	add	r3, r2
 800978c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009790:	461a      	mov	r2, r3
 8009792:	f240 439d 	movw	r3, #1181	; 0x49d
 8009796:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009798:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800979c:	2b00      	cmp	r3, #0
 800979e:	da10      	bge.n	80097c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80097a0:	78fb      	ldrb	r3, [r7, #3]
 80097a2:	015a      	lsls	r2, r3, #5
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	4413      	add	r3, r2
 80097a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	78fa      	ldrb	r2, [r7, #3]
 80097b0:	0151      	lsls	r1, r2, #5
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	440a      	add	r2, r1
 80097b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097be:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80097c0:	e057      	b.n	8009872 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d051      	beq.n	8009872 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80097ce:	78fb      	ldrb	r3, [r7, #3]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	78fa      	ldrb	r2, [r7, #3]
 80097de:	0151      	lsls	r1, r2, #5
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	440a      	add	r2, r1
 80097e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80097ec:	60d3      	str	r3, [r2, #12]
      break;
 80097ee:	e040      	b.n	8009872 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80097f0:	78fb      	ldrb	r3, [r7, #3]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097fc:	461a      	mov	r2, r3
 80097fe:	f240 639d 	movw	r3, #1693	; 0x69d
 8009802:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009804:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009808:	2b00      	cmp	r3, #0
 800980a:	da34      	bge.n	8009876 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800980c:	78fb      	ldrb	r3, [r7, #3]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	4413      	add	r3, r2
 8009814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	78fa      	ldrb	r2, [r7, #3]
 800981c:	0151      	lsls	r1, r2, #5
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	440a      	add	r2, r1
 8009822:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800982a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800982c:	e023      	b.n	8009876 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800982e:	78fb      	ldrb	r3, [r7, #3]
 8009830:	015a      	lsls	r2, r3, #5
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	4413      	add	r3, r2
 8009836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800983a:	461a      	mov	r2, r3
 800983c:	f240 2325 	movw	r3, #549	; 0x225
 8009840:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009842:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009846:	2b00      	cmp	r3, #0
 8009848:	da17      	bge.n	800987a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800984a:	78fb      	ldrb	r3, [r7, #3]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	4413      	add	r3, r2
 8009852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	78fa      	ldrb	r2, [r7, #3]
 800985a:	0151      	lsls	r1, r2, #5
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	440a      	add	r2, r1
 8009860:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009864:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009868:	60d3      	str	r3, [r2, #12]
      }
      break;
 800986a:	e006      	b.n	800987a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	77fb      	strb	r3, [r7, #31]
      break;
 8009870:	e004      	b.n	800987c <USB_HC_Init+0x14c>
      break;
 8009872:	bf00      	nop
 8009874:	e002      	b.n	800987c <USB_HC_Init+0x14c>
      break;
 8009876:	bf00      	nop
 8009878:	e000      	b.n	800987c <USB_HC_Init+0x14c>
      break;
 800987a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009882:	699a      	ldr	r2, [r3, #24]
 8009884:	78fb      	ldrb	r3, [r7, #3]
 8009886:	f003 030f 	and.w	r3, r3, #15
 800988a:	2101      	movs	r1, #1
 800988c:	fa01 f303 	lsl.w	r3, r1, r3
 8009890:	6939      	ldr	r1, [r7, #16]
 8009892:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009896:	4313      	orrs	r3, r2
 8009898:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80098a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	da03      	bge.n	80098b6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80098ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098b2:	61bb      	str	r3, [r7, #24]
 80098b4:	e001      	b.n	80098ba <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80098b6:	2300      	movs	r3, #0
 80098b8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff ff0f 	bl	80096de <USB_GetHostSpeed>
 80098c0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80098c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d106      	bne.n	80098d8 <USB_HC_Init+0x1a8>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d003      	beq.n	80098d8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80098d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80098d4:	617b      	str	r3, [r7, #20]
 80098d6:	e001      	b.n	80098dc <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80098d8:	2300      	movs	r3, #0
 80098da:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80098dc:	787b      	ldrb	r3, [r7, #1]
 80098de:	059b      	lsls	r3, r3, #22
 80098e0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80098e4:	78bb      	ldrb	r3, [r7, #2]
 80098e6:	02db      	lsls	r3, r3, #11
 80098e8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80098ec:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80098ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80098f2:	049b      	lsls	r3, r3, #18
 80098f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80098f8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80098fa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80098fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009900:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009906:	78fb      	ldrb	r3, [r7, #3]
 8009908:	0159      	lsls	r1, r3, #5
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	440b      	add	r3, r1
 800990e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009912:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009918:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800991a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800991e:	2b03      	cmp	r3, #3
 8009920:	d10f      	bne.n	8009942 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009922:	78fb      	ldrb	r3, [r7, #3]
 8009924:	015a      	lsls	r2, r3, #5
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	4413      	add	r3, r2
 800992a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	78fa      	ldrb	r2, [r7, #3]
 8009932:	0151      	lsls	r1, r2, #5
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	440a      	add	r2, r1
 8009938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800993c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009940:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009942:	7ffb      	ldrb	r3, [r7, #31]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3720      	adds	r7, #32
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b08c      	sub	sp, #48	; 0x30
 8009950:	af02      	add	r7, sp, #8
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	4613      	mov	r3, r2
 8009958:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	785b      	ldrb	r3, [r3, #1]
 8009962:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009968:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009972:	2b00      	cmp	r3, #0
 8009974:	d02d      	beq.n	80099d2 <USB_HC_StartXfer+0x86>
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	791b      	ldrb	r3, [r3, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d129      	bne.n	80099d2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800997e:	79fb      	ldrb	r3, [r7, #7]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d117      	bne.n	80099b4 <USB_HC_StartXfer+0x68>
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	79db      	ldrb	r3, [r3, #7]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d003      	beq.n	8009994 <USB_HC_StartXfer+0x48>
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	79db      	ldrb	r3, [r3, #7]
 8009990:	2b02      	cmp	r3, #2
 8009992:	d10f      	bne.n	80099b4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	6a3b      	ldr	r3, [r7, #32]
 800999a:	4413      	add	r3, r2
 800999c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	69fa      	ldr	r2, [r7, #28]
 80099a4:	0151      	lsls	r1, r2, #5
 80099a6:	6a3a      	ldr	r2, [r7, #32]
 80099a8:	440a      	add	r2, r1
 80099aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80099b4:	79fb      	ldrb	r3, [r7, #7]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10b      	bne.n	80099d2 <USB_HC_StartXfer+0x86>
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	795b      	ldrb	r3, [r3, #5]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d107      	bne.n	80099d2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	785b      	ldrb	r3, [r3, #1]
 80099c6:	4619      	mov	r1, r3
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 fa2f 	bl	8009e2c <USB_DoPing>
      return HAL_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	e0f8      	b.n	8009bc4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d018      	beq.n	8009a0c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	8912      	ldrh	r2, [r2, #8]
 80099e2:	4413      	add	r3, r2
 80099e4:	3b01      	subs	r3, #1
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	8912      	ldrh	r2, [r2, #8]
 80099ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80099ee:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80099f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80099f2:	8b7b      	ldrh	r3, [r7, #26]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d90b      	bls.n	8009a10 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80099f8:	8b7b      	ldrh	r3, [r7, #26]
 80099fa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80099fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	8912      	ldrh	r2, [r2, #8]
 8009a02:	fb02 f203 	mul.w	r2, r2, r3
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	611a      	str	r2, [r3, #16]
 8009a0a:	e001      	b.n	8009a10 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	78db      	ldrb	r3, [r3, #3]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d007      	beq.n	8009a28 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009a18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	8912      	ldrh	r2, [r2, #8]
 8009a1e:	fb02 f203 	mul.w	r2, r2, r3
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	611a      	str	r2, [r3, #16]
 8009a26:	e003      	b.n	8009a30 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	695a      	ldr	r2, [r3, #20]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009a38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a3a:	04d9      	lsls	r1, r3, #19
 8009a3c:	4b63      	ldr	r3, [pc, #396]	; (8009bcc <USB_HC_StartXfer+0x280>)
 8009a3e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009a40:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	7a9b      	ldrb	r3, [r3, #10]
 8009a46:	075b      	lsls	r3, r3, #29
 8009a48:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009a4c:	69f9      	ldr	r1, [r7, #28]
 8009a4e:	0148      	lsls	r0, r1, #5
 8009a50:	6a39      	ldr	r1, [r7, #32]
 8009a52:	4401      	add	r1, r0
 8009a54:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009a58:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009a5a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009a5c:	79fb      	ldrb	r3, [r7, #7]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d009      	beq.n	8009a76 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	68d9      	ldr	r1, [r3, #12]
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a72:	460a      	mov	r2, r1
 8009a74:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009a76:	6a3b      	ldr	r3, [r7, #32]
 8009a78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	f003 0301 	and.w	r3, r3, #1
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	bf0c      	ite	eq
 8009a86:	2301      	moveq	r3, #1
 8009a88:	2300      	movne	r3, #0
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	69fa      	ldr	r2, [r7, #28]
 8009a9e:	0151      	lsls	r1, r2, #5
 8009aa0:	6a3a      	ldr	r2, [r7, #32]
 8009aa2:	440a      	add	r2, r1
 8009aa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009aa8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009aac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	015a      	lsls	r2, r3, #5
 8009ab2:	6a3b      	ldr	r3, [r7, #32]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	7e7b      	ldrb	r3, [r7, #25]
 8009abe:	075b      	lsls	r3, r3, #29
 8009ac0:	69f9      	ldr	r1, [r7, #28]
 8009ac2:	0148      	lsls	r0, r1, #5
 8009ac4:	6a39      	ldr	r1, [r7, #32]
 8009ac6:	4401      	add	r1, r0
 8009ac8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009acc:	4313      	orrs	r3, r2
 8009ace:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	015a      	lsls	r2, r3, #5
 8009ad4:	6a3b      	ldr	r3, [r7, #32]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ae6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	78db      	ldrb	r3, [r3, #3]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d004      	beq.n	8009afa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009af6:	613b      	str	r3, [r7, #16]
 8009af8:	e003      	b.n	8009b02 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b00:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b08:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	015a      	lsls	r2, r3, #5
 8009b0e:	6a3b      	ldr	r3, [r7, #32]
 8009b10:	4413      	add	r3, r2
 8009b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b16:	461a      	mov	r2, r3
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d001      	beq.n	8009b26 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	e04e      	b.n	8009bc4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	78db      	ldrb	r3, [r3, #3]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d149      	bne.n	8009bc2 <USB_HC_StartXfer+0x276>
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d045      	beq.n	8009bc2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	79db      	ldrb	r3, [r3, #7]
 8009b3a:	2b03      	cmp	r3, #3
 8009b3c:	d830      	bhi.n	8009ba0 <USB_HC_StartXfer+0x254>
 8009b3e:	a201      	add	r2, pc, #4	; (adr r2, 8009b44 <USB_HC_StartXfer+0x1f8>)
 8009b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b44:	08009b55 	.word	0x08009b55
 8009b48:	08009b79 	.word	0x08009b79
 8009b4c:	08009b55 	.word	0x08009b55
 8009b50:	08009b79 	.word	0x08009b79
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	3303      	adds	r3, #3
 8009b5a:	089b      	lsrs	r3, r3, #2
 8009b5c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009b5e:	8afa      	ldrh	r2, [r7, #22]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d91c      	bls.n	8009ba4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	f043 0220 	orr.w	r2, r3, #32
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	619a      	str	r2, [r3, #24]
        }
        break;
 8009b76:	e015      	b.n	8009ba4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	3303      	adds	r3, #3
 8009b7e:	089b      	lsrs	r3, r3, #2
 8009b80:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009b82:	8afa      	ldrh	r2, [r7, #22]
 8009b84:	6a3b      	ldr	r3, [r7, #32]
 8009b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d90a      	bls.n	8009ba8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	619a      	str	r2, [r3, #24]
        }
        break;
 8009b9e:	e003      	b.n	8009ba8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009ba0:	bf00      	nop
 8009ba2:	e002      	b.n	8009baa <USB_HC_StartXfer+0x25e>
        break;
 8009ba4:	bf00      	nop
 8009ba6:	e000      	b.n	8009baa <USB_HC_StartXfer+0x25e>
        break;
 8009ba8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	68d9      	ldr	r1, [r3, #12]
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	785a      	ldrb	r2, [r3, #1]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	2000      	movs	r0, #0
 8009bba:	9000      	str	r0, [sp, #0]
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f7ff fb81 	bl	80092c4 <USB_WritePacket>
  }

  return HAL_OK;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3728      	adds	r7, #40	; 0x28
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	1ff80000 	.word	0x1ff80000

08009bd0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	b29b      	uxth	r3, r3
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3714      	adds	r7, #20
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b089      	sub	sp, #36	; 0x24
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8009c02:	78fb      	ldrb	r3, [r7, #3]
 8009c04:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8009c06:	2300      	movs	r3, #0
 8009c08:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	015a      	lsls	r2, r3, #5
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	0c9b      	lsrs	r3, r3, #18
 8009c1a:	f003 0303 	and.w	r3, r3, #3
 8009c1e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	0fdb      	lsrs	r3, r3, #31
 8009c30:	f003 0301 	and.w	r3, r3, #1
 8009c34:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f003 0320 	and.w	r3, r3, #32
 8009c3e:	2b20      	cmp	r3, #32
 8009c40:	d104      	bne.n	8009c4c <USB_HC_Halt+0x5a>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d101      	bne.n	8009c4c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	e0e8      	b.n	8009e1e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d002      	beq.n	8009c58 <USB_HC_Halt+0x66>
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d173      	bne.n	8009d40 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	015a      	lsls	r2, r3, #5
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	697a      	ldr	r2, [r7, #20]
 8009c68:	0151      	lsls	r1, r2, #5
 8009c6a:	69ba      	ldr	r2, [r7, #24]
 8009c6c:	440a      	add	r2, r1
 8009c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c76:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f003 0320 	and.w	r3, r3, #32
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f040 80cb 	bne.w	8009e1c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d143      	bne.n	8009d1a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	015a      	lsls	r2, r3, #5
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	4413      	add	r3, r2
 8009c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	697a      	ldr	r2, [r7, #20]
 8009ca2:	0151      	lsls	r1, r2, #5
 8009ca4:	69ba      	ldr	r2, [r7, #24]
 8009ca6:	440a      	add	r2, r1
 8009ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009cb0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	015a      	lsls	r2, r3, #5
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	4413      	add	r3, r2
 8009cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	0151      	lsls	r1, r2, #5
 8009cc4:	69ba      	ldr	r2, [r7, #24]
 8009cc6:	440a      	add	r2, r1
 8009cc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ccc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cd0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	015a      	lsls	r2, r3, #5
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	4413      	add	r3, r2
 8009cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	697a      	ldr	r2, [r7, #20]
 8009ce2:	0151      	lsls	r1, r2, #5
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	440a      	add	r2, r1
 8009ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009cec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cf0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	61fb      	str	r3, [r7, #28]
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cfe:	d81d      	bhi.n	8009d3c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	015a      	lsls	r2, r3, #5
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	4413      	add	r3, r2
 8009d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d16:	d0ec      	beq.n	8009cf2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009d18:	e080      	b.n	8009e1c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	015a      	lsls	r2, r3, #5
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	4413      	add	r3, r2
 8009d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	697a      	ldr	r2, [r7, #20]
 8009d2a:	0151      	lsls	r1, r2, #5
 8009d2c:	69ba      	ldr	r2, [r7, #24]
 8009d2e:	440a      	add	r2, r1
 8009d30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d38:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009d3a:	e06f      	b.n	8009e1c <USB_HC_Halt+0x22a>
            break;
 8009d3c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009d3e:	e06d      	b.n	8009e1c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	015a      	lsls	r2, r3, #5
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	4413      	add	r3, r2
 8009d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	0151      	lsls	r1, r2, #5
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	440a      	add	r2, r1
 8009d56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d5e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d143      	bne.n	8009df8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	015a      	lsls	r2, r3, #5
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	4413      	add	r3, r2
 8009d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	0151      	lsls	r1, r2, #5
 8009d82:	69ba      	ldr	r2, [r7, #24]
 8009d84:	440a      	add	r2, r1
 8009d86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d8e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	015a      	lsls	r2, r3, #5
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	4413      	add	r3, r2
 8009d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	697a      	ldr	r2, [r7, #20]
 8009da0:	0151      	lsls	r1, r2, #5
 8009da2:	69ba      	ldr	r2, [r7, #24]
 8009da4:	440a      	add	r2, r1
 8009da6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009daa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009dae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	0151      	lsls	r1, r2, #5
 8009dc2:	69ba      	ldr	r2, [r7, #24]
 8009dc4:	440a      	add	r2, r1
 8009dc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dce:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	61fb      	str	r3, [r7, #28]
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ddc:	d81d      	bhi.n	8009e1a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009df4:	d0ec      	beq.n	8009dd0 <USB_HC_Halt+0x1de>
 8009df6:	e011      	b.n	8009e1c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	015a      	lsls	r2, r3, #5
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	4413      	add	r3, r2
 8009e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	0151      	lsls	r1, r2, #5
 8009e0a:	69ba      	ldr	r2, [r7, #24]
 8009e0c:	440a      	add	r2, r1
 8009e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	e000      	b.n	8009e1c <USB_HC_Halt+0x22a>
          break;
 8009e1a:	bf00      	nop
    }
  }

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3724      	adds	r7, #36	; 0x24
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
	...

08009e2c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b087      	sub	sp, #28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009e3c:	78fb      	ldrb	r3, [r7, #3]
 8009e3e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009e40:	2301      	movs	r3, #1
 8009e42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	04da      	lsls	r2, r3, #19
 8009e48:	4b15      	ldr	r3, [pc, #84]	; (8009ea0 <USB_DoPing+0x74>)
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	0151      	lsls	r1, r2, #5
 8009e50:	697a      	ldr	r2, [r7, #20]
 8009e52:	440a      	add	r2, r1
 8009e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e5c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	015a      	lsls	r2, r3, #5
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	4413      	add	r3, r2
 8009e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e74:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e7c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	015a      	lsls	r2, r3, #5
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	4413      	add	r3, r2
 8009e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	371c      	adds	r7, #28
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	1ff80000 	.word	0x1ff80000

08009ea4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f7ff f981 	bl	80091bc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009eba:	2110      	movs	r1, #16
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f7ff f9b9 	bl	8009234 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7ff f9dc 	bl	8009280 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009ec8:	2300      	movs	r3, #0
 8009eca:	613b      	str	r3, [r7, #16]
 8009ecc:	e01f      	b.n	8009f0e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	015a      	lsls	r2, r3, #5
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ee4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009eec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ef4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	015a      	lsls	r2, r3, #5
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	4413      	add	r3, r2
 8009efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f02:	461a      	mov	r2, r3
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	613b      	str	r3, [r7, #16]
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	2b0f      	cmp	r3, #15
 8009f12:	d9dc      	bls.n	8009ece <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009f14:	2300      	movs	r3, #0
 8009f16:	613b      	str	r3, [r7, #16]
 8009f18:	e034      	b.n	8009f84 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	015a      	lsls	r2, r3, #5
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	4413      	add	r3, r2
 8009f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f30:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f38:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f40:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	015a      	lsls	r2, r3, #5
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	4413      	add	r3, r2
 8009f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f4e:	461a      	mov	r2, r3
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	3301      	adds	r3, #1
 8009f58:	617b      	str	r3, [r7, #20]
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f60:	d80c      	bhi.n	8009f7c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	015a      	lsls	r2, r3, #5
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	4413      	add	r3, r2
 8009f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f78:	d0ec      	beq.n	8009f54 <USB_StopHost+0xb0>
 8009f7a:	e000      	b.n	8009f7e <USB_StopHost+0xda>
        break;
 8009f7c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	3301      	adds	r3, #1
 8009f82:	613b      	str	r3, [r7, #16]
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	2b0f      	cmp	r3, #15
 8009f88:	d9c7      	bls.n	8009f1a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f90:	461a      	mov	r2, r3
 8009f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f96:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f9e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7ff f8fa 	bl	800919a <USB_EnableGlobalInt>

  return HAL_OK;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3718      	adds	r7, #24
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009fb0:	b590      	push	{r4, r7, lr}
 8009fb2:	b089      	sub	sp, #36	; 0x24
 8009fb4:	af04      	add	r7, sp, #16
 8009fb6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009fb8:	2301      	movs	r3, #1
 8009fba:	2202      	movs	r2, #2
 8009fbc:	2102      	movs	r1, #2
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 fc66 	bl	800a890 <USBH_FindInterface>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
 8009fca:	2bff      	cmp	r3, #255	; 0xff
 8009fcc:	d002      	beq.n	8009fd4 <USBH_CDC_InterfaceInit+0x24>
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d901      	bls.n	8009fd8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	e13d      	b.n	800a254 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 fc3b 	bl	800a858 <USBH_SelectInterface>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009fe6:	7bbb      	ldrb	r3, [r7, #14]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009fec:	2302      	movs	r3, #2
 8009fee:	e131      	b.n	800a254 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009ff6:	2050      	movs	r0, #80	; 0x50
 8009ff8:	f002 fa00 	bl	800c3fc <malloc>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a006:	69db      	ldr	r3, [r3, #28]
 800a008:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a010:	2302      	movs	r3, #2
 800a012:	e11f      	b.n	800a254 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a014:	2250      	movs	r2, #80	; 0x50
 800a016:	2100      	movs	r1, #0
 800a018:	68b8      	ldr	r0, [r7, #8]
 800a01a:	f002 f9ff 	bl	800c41c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a01e:	7bfb      	ldrb	r3, [r7, #15]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	211a      	movs	r1, #26
 800a024:	fb01 f303 	mul.w	r3, r1, r3
 800a028:	4413      	add	r3, r2
 800a02a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	b25b      	sxtb	r3, r3
 800a032:	2b00      	cmp	r3, #0
 800a034:	da15      	bge.n	800a062 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a036:	7bfb      	ldrb	r3, [r7, #15]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	211a      	movs	r1, #26
 800a03c:	fb01 f303 	mul.w	r3, r1, r3
 800a040:	4413      	add	r3, r2
 800a042:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a046:	781a      	ldrb	r2, [r3, #0]
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	211a      	movs	r1, #26
 800a052:	fb01 f303 	mul.w	r3, r1, r3
 800a056:	4413      	add	r3, r2
 800a058:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a05c:	881a      	ldrh	r2, [r3, #0]
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	785b      	ldrb	r3, [r3, #1]
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f001 fe32 	bl	800bcd2 <USBH_AllocPipe>
 800a06e:	4603      	mov	r3, r0
 800a070:	461a      	mov	r2, r3
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	7819      	ldrb	r1, [r3, #0]
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	7858      	ldrb	r0, [r3, #1]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	8952      	ldrh	r2, [r2, #10]
 800a08e:	9202      	str	r2, [sp, #8]
 800a090:	2203      	movs	r2, #3
 800a092:	9201      	str	r2, [sp, #4]
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	4623      	mov	r3, r4
 800a098:	4602      	mov	r2, r0
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f001 fdea 	bl	800bc74 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f002 f8f9 	bl	800c2a0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	210a      	movs	r1, #10
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fbeb 	bl	800a890 <USBH_FindInterface>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a0be:	7bfb      	ldrb	r3, [r7, #15]
 800a0c0:	2bff      	cmp	r3, #255	; 0xff
 800a0c2:	d002      	beq.n	800a0ca <USBH_CDC_InterfaceInit+0x11a>
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d901      	bls.n	800a0ce <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	e0c2      	b.n	800a254 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	211a      	movs	r1, #26
 800a0d4:	fb01 f303 	mul.w	r3, r1, r3
 800a0d8:	4413      	add	r3, r2
 800a0da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	b25b      	sxtb	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	da16      	bge.n	800a114 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	211a      	movs	r1, #26
 800a0ec:	fb01 f303 	mul.w	r3, r1, r3
 800a0f0:	4413      	add	r3, r2
 800a0f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a0f6:	781a      	ldrb	r2, [r3, #0]
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	211a      	movs	r1, #26
 800a102:	fb01 f303 	mul.w	r3, r1, r3
 800a106:	4413      	add	r3, r2
 800a108:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a10c:	881a      	ldrh	r2, [r3, #0]
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	835a      	strh	r2, [r3, #26]
 800a112:	e015      	b.n	800a140 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a114:	7bfb      	ldrb	r3, [r7, #15]
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	211a      	movs	r1, #26
 800a11a:	fb01 f303 	mul.w	r3, r1, r3
 800a11e:	4413      	add	r3, r2
 800a120:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a124:	781a      	ldrb	r2, [r3, #0]
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	211a      	movs	r1, #26
 800a130:	fb01 f303 	mul.w	r3, r1, r3
 800a134:	4413      	add	r3, r2
 800a136:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a13a:	881a      	ldrh	r2, [r3, #0]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a140:	7bfb      	ldrb	r3, [r7, #15]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	211a      	movs	r1, #26
 800a146:	fb01 f303 	mul.w	r3, r1, r3
 800a14a:	4413      	add	r3, r2
 800a14c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	b25b      	sxtb	r3, r3
 800a154:	2b00      	cmp	r3, #0
 800a156:	da16      	bge.n	800a186 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a158:	7bfb      	ldrb	r3, [r7, #15]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	211a      	movs	r1, #26
 800a15e:	fb01 f303 	mul.w	r3, r1, r3
 800a162:	4413      	add	r3, r2
 800a164:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a168:	781a      	ldrb	r2, [r3, #0]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	211a      	movs	r1, #26
 800a174:	fb01 f303 	mul.w	r3, r1, r3
 800a178:	4413      	add	r3, r2
 800a17a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a17e:	881a      	ldrh	r2, [r3, #0]
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	835a      	strh	r2, [r3, #26]
 800a184:	e015      	b.n	800a1b2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a186:	7bfb      	ldrb	r3, [r7, #15]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	211a      	movs	r1, #26
 800a18c:	fb01 f303 	mul.w	r3, r1, r3
 800a190:	4413      	add	r3, r2
 800a192:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a196:	781a      	ldrb	r2, [r3, #0]
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	211a      	movs	r1, #26
 800a1a2:	fb01 f303 	mul.w	r3, r1, r3
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a1ac:	881a      	ldrh	r2, [r3, #0]
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	7b9b      	ldrb	r3, [r3, #14]
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f001 fd8a 	bl	800bcd2 <USBH_AllocPipe>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	7bdb      	ldrb	r3, [r3, #15]
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f001 fd80 	bl	800bcd2 <USBH_AllocPipe>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	7b59      	ldrb	r1, [r3, #13]
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	7b98      	ldrb	r0, [r3, #14]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	8b12      	ldrh	r2, [r2, #24]
 800a1f2:	9202      	str	r2, [sp, #8]
 800a1f4:	2202      	movs	r2, #2
 800a1f6:	9201      	str	r2, [sp, #4]
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	4623      	mov	r3, r4
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f001 fd38 	bl	800bc74 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	7b19      	ldrb	r1, [r3, #12]
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	7bd8      	ldrb	r0, [r3, #15]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	8b52      	ldrh	r2, [r2, #26]
 800a21c:	9202      	str	r2, [sp, #8]
 800a21e:	2202      	movs	r2, #2
 800a220:	9201      	str	r2, [sp, #4]
 800a222:	9300      	str	r3, [sp, #0]
 800a224:	4623      	mov	r3, r4
 800a226:	4602      	mov	r2, r0
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f001 fd23 	bl	800bc74 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	2200      	movs	r2, #0
 800a232:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	7b5b      	ldrb	r3, [r3, #13]
 800a23a:	2200      	movs	r2, #0
 800a23c:	4619      	mov	r1, r3
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f002 f82e 	bl	800c2a0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	7b1b      	ldrb	r3, [r3, #12]
 800a248:	2200      	movs	r2, #0
 800a24a:	4619      	mov	r1, r3
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f002 f827 	bl	800c2a0 <USBH_LL_SetToggle>

  return USBH_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3714      	adds	r7, #20
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd90      	pop	{r4, r7, pc}

0800a25c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a26a:	69db      	ldr	r3, [r3, #28]
 800a26c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00e      	beq.n	800a294 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	4619      	mov	r1, r3
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f001 fd18 	bl	800bcb2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	4619      	mov	r1, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f001 fd43 	bl	800bd14 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	7b1b      	ldrb	r3, [r3, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00e      	beq.n	800a2ba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	7b1b      	ldrb	r3, [r3, #12]
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f001 fd05 	bl	800bcb2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	7b1b      	ldrb	r3, [r3, #12]
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f001 fd30 	bl	800bd14 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	7b5b      	ldrb	r3, [r3, #13]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00e      	beq.n	800a2e0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	7b5b      	ldrb	r3, [r3, #13]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f001 fcf2 	bl	800bcb2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	7b5b      	ldrb	r3, [r3, #13]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f001 fd1d 	bl	800bd14 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00b      	beq.n	800a304 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f002 f889 	bl	800c40c <free>
    phost->pActiveClass->pData = 0U;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a300:	2200      	movs	r2, #0
 800a302:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	3340      	adds	r3, #64	; 0x40
 800a324:	4619      	mov	r1, r3
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f8b1 	bl	800a48e <GetLineCoding>
 800a32c:	4603      	mov	r3, r0
 800a32e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a330:	7afb      	ldrb	r3, [r7, #11]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d105      	bne.n	800a342 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a33c:	2102      	movs	r1, #2
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a342:	7afb      	ldrb	r3, [r7, #11]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a354:	2301      	movs	r3, #1
 800a356:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a358:	2300      	movs	r3, #0
 800a35a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a362:	69db      	ldr	r3, [r3, #28]
 800a364:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a36c:	2b04      	cmp	r3, #4
 800a36e:	d877      	bhi.n	800a460 <USBH_CDC_Process+0x114>
 800a370:	a201      	add	r2, pc, #4	; (adr r2, 800a378 <USBH_CDC_Process+0x2c>)
 800a372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a376:	bf00      	nop
 800a378:	0800a38d 	.word	0x0800a38d
 800a37c:	0800a393 	.word	0x0800a393
 800a380:	0800a3c3 	.word	0x0800a3c3
 800a384:	0800a437 	.word	0x0800a437
 800a388:	0800a445 	.word	0x0800a445
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	73fb      	strb	r3, [r7, #15]
      break;
 800a390:	e06d      	b.n	800a46e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 f897 	bl	800a4cc <SetLineCoding>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a3a2:	7bbb      	ldrb	r3, [r7, #14]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d104      	bne.n	800a3b2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	2202      	movs	r2, #2
 800a3ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a3b0:	e058      	b.n	800a464 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a3b2:	7bbb      	ldrb	r3, [r7, #14]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d055      	beq.n	800a464 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	2204      	movs	r2, #4
 800a3bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a3c0:	e050      	b.n	800a464 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	3340      	adds	r3, #64	; 0x40
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 f860 	bl	800a48e <GetLineCoding>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a3d2:	7bbb      	ldrb	r3, [r7, #14]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d126      	bne.n	800a426 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3ea:	791b      	ldrb	r3, [r3, #4]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d13b      	bne.n	800a468 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3fa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d133      	bne.n	800a468 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a40a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d12b      	bne.n	800a468 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a418:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d124      	bne.n	800a468 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f958 	bl	800a6d4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a424:	e020      	b.n	800a468 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a426:	7bbb      	ldrb	r3, [r7, #14]
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d01d      	beq.n	800a468 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2204      	movs	r2, #4
 800a430:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a434:	e018      	b.n	800a468 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f867 	bl	800a50a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f8da 	bl	800a5f6 <CDC_ProcessReception>
      break;
 800a442:	e014      	b.n	800a46e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a444:	2100      	movs	r1, #0
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 ffe3 	bl	800b412 <USBH_ClrFeature>
 800a44c:	4603      	mov	r3, r0
 800a44e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a450:	7bbb      	ldrb	r3, [r7, #14]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10a      	bne.n	800a46c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a45e:	e005      	b.n	800a46c <USBH_CDC_Process+0x120>

    default:
      break;
 800a460:	bf00      	nop
 800a462:	e004      	b.n	800a46e <USBH_CDC_Process+0x122>
      break;
 800a464:	bf00      	nop
 800a466:	e002      	b.n	800a46e <USBH_CDC_Process+0x122>
      break;
 800a468:	bf00      	nop
 800a46a:	e000      	b.n	800a46e <USBH_CDC_Process+0x122>
      break;
 800a46c:	bf00      	nop

  }

  return status;
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b082      	sub	sp, #8
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	22a1      	movs	r2, #161	; 0xa1
 800a49c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2221      	movs	r2, #33	; 0x21
 800a4a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2207      	movs	r2, #7
 800a4b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	2207      	movs	r2, #7
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f001 f988 	bl	800b7d2 <USBH_CtlReq>
 800a4c2:	4603      	mov	r3, r0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2221      	movs	r2, #33	; 0x21
 800a4da:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2220      	movs	r2, #32
 800a4e0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2207      	movs	r2, #7
 800a4f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	2207      	movs	r2, #7
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f001 f969 	bl	800b7d2 <USBH_CtlReq>
 800a500:	4603      	mov	r3, r0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b086      	sub	sp, #24
 800a50e:	af02      	add	r7, sp, #8
 800a510:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a51c:	2300      	movs	r3, #0
 800a51e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a526:	2b01      	cmp	r3, #1
 800a528:	d002      	beq.n	800a530 <CDC_ProcessTransmission+0x26>
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d023      	beq.n	800a576 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a52e:	e05e      	b.n	800a5ee <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	8b12      	ldrh	r2, [r2, #24]
 800a538:	4293      	cmp	r3, r2
 800a53a:	d90b      	bls.n	800a554 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	69d9      	ldr	r1, [r3, #28]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	8b1a      	ldrh	r2, [r3, #24]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	7b5b      	ldrb	r3, [r3, #13]
 800a548:	2001      	movs	r0, #1
 800a54a:	9000      	str	r0, [sp, #0]
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f001 fb4e 	bl	800bbee <USBH_BulkSendData>
 800a552:	e00b      	b.n	800a56c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	7b5b      	ldrb	r3, [r3, #13]
 800a562:	2001      	movs	r0, #1
 800a564:	9000      	str	r0, [sp, #0]
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f001 fb41 	bl	800bbee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2202      	movs	r2, #2
 800a570:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a574:	e03b      	b.n	800a5ee <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	7b5b      	ldrb	r3, [r3, #13]
 800a57a:	4619      	mov	r1, r3
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f001 fe65 	bl	800c24c <USBH_LL_GetURBState>
 800a582:	4603      	mov	r3, r0
 800a584:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a586:	7afb      	ldrb	r3, [r7, #11]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d128      	bne.n	800a5de <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	8b12      	ldrh	r2, [r2, #24]
 800a594:	4293      	cmp	r3, r2
 800a596:	d90e      	bls.n	800a5b6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	8b12      	ldrh	r2, [r2, #24]
 800a5a0:	1a9a      	subs	r2, r3, r2
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	69db      	ldr	r3, [r3, #28]
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	8b12      	ldrh	r2, [r2, #24]
 800a5ae:	441a      	add	r2, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	61da      	str	r2, [r3, #28]
 800a5b4:	e002      	b.n	800a5bc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d004      	beq.n	800a5ce <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a5cc:	e00e      	b.n	800a5ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f868 	bl	800a6ac <USBH_CDC_TransmitCallback>
      break;
 800a5dc:	e006      	b.n	800a5ec <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a5de:	7afb      	ldrb	r3, [r7, #11]
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d103      	bne.n	800a5ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a5ec:	bf00      	nop
  }
}
 800a5ee:	bf00      	nop
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b086      	sub	sp, #24
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a604:	69db      	ldr	r3, [r3, #28]
 800a606:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a608:	2300      	movs	r3, #0
 800a60a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a612:	2b03      	cmp	r3, #3
 800a614:	d002      	beq.n	800a61c <CDC_ProcessReception+0x26>
 800a616:	2b04      	cmp	r3, #4
 800a618:	d00e      	beq.n	800a638 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a61a:	e043      	b.n	800a6a4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	6a19      	ldr	r1, [r3, #32]
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	8b5a      	ldrh	r2, [r3, #26]
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	7b1b      	ldrb	r3, [r3, #12]
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f001 fb05 	bl	800bc38 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	2204      	movs	r2, #4
 800a632:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a636:	e035      	b.n	800a6a4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	7b1b      	ldrb	r3, [r3, #12]
 800a63c:	4619      	mov	r1, r3
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f001 fe04 	bl	800c24c <USBH_LL_GetURBState>
 800a644:	4603      	mov	r3, r0
 800a646:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a648:	7cfb      	ldrb	r3, [r7, #19]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d129      	bne.n	800a6a2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	7b1b      	ldrb	r3, [r3, #12]
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f001 fd67 	bl	800c128 <USBH_LL_GetLastXferSize>
 800a65a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	429a      	cmp	r2, r3
 800a664:	d016      	beq.n	800a694 <CDC_ProcessReception+0x9e>
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	8b5b      	ldrh	r3, [r3, #26]
 800a66a:	461a      	mov	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	4293      	cmp	r3, r2
 800a670:	d910      	bls.n	800a694 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	1ad2      	subs	r2, r2, r3
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	6a1a      	ldr	r2, [r3, #32]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	441a      	add	r2, r3
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	2203      	movs	r2, #3
 800a68e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a692:	e006      	b.n	800a6a2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 f80f 	bl	800a6c0 <USBH_CDC_ReceiveCallback>
      break;
 800a6a2:	bf00      	nop
  }
}
 800a6a4:	bf00      	nop
 800a6a6:	3718      	adds	r7, #24
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a6c8:	bf00      	nop
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a6dc:	bf00      	nop
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	e029      	b.n	800a754 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	79fa      	ldrb	r2, [r7, #7]
 800a704:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 f81f 	bl	800a75c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2200      	movs	r2, #0
 800a73a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d003      	beq.n	800a74c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f001 fc37 	bl	800bfc0 <USBH_LL_Init>

  return USBH_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a764:	2300      	movs	r3, #0
 800a766:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a768:	2300      	movs	r3, #0
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	e009      	b.n	800a782 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	33e0      	adds	r3, #224	; 0xe0
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	2200      	movs	r2, #0
 800a77a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	3301      	adds	r3, #1
 800a780:	60fb      	str	r3, [r7, #12]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2b0e      	cmp	r3, #14
 800a786:	d9f2      	bls.n	800a76e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a788:	2300      	movs	r3, #0
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	e009      	b.n	800a7a2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	4413      	add	r3, r2
 800a794:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a798:	2200      	movs	r2, #0
 800a79a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	60fb      	str	r3, [r7, #12]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7a8:	d3f1      	bcc.n	800a78e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2240      	movs	r2, #64	; 0x40
 800a7ce:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3714      	adds	r7, #20
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d016      	beq.n	800a846 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10e      	bne.n	800a840 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a828:	1c59      	adds	r1, r3, #1
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	33de      	adds	r3, #222	; 0xde
 800a834:	6839      	ldr	r1, [r7, #0]
 800a836:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	73fb      	strb	r3, [r7, #15]
 800a83e:	e004      	b.n	800a84a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a840:	2302      	movs	r3, #2
 800a842:	73fb      	strb	r3, [r7, #15]
 800a844:	e001      	b.n	800a84a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a846:	2302      	movs	r3, #2
 800a848:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3714      	adds	r7, #20
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	460b      	mov	r3, r1
 800a862:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a86e:	78fa      	ldrb	r2, [r7, #3]
 800a870:	429a      	cmp	r2, r3
 800a872:	d204      	bcs.n	800a87e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	78fa      	ldrb	r2, [r7, #3]
 800a878:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a87c:	e001      	b.n	800a882 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a87e:	2302      	movs	r3, #2
 800a880:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a882:	7bfb      	ldrb	r3, [r7, #15]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3714      	adds	r7, #20
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr

0800a890 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a890:	b480      	push	{r7}
 800a892:	b087      	sub	sp, #28
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	4608      	mov	r0, r1
 800a89a:	4611      	mov	r1, r2
 800a89c:	461a      	mov	r2, r3
 800a89e:	4603      	mov	r3, r0
 800a8a0:	70fb      	strb	r3, [r7, #3]
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	70bb      	strb	r3, [r7, #2]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a8b8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a8ba:	e025      	b.n	800a908 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a8bc:	7dfb      	ldrb	r3, [r7, #23]
 800a8be:	221a      	movs	r2, #26
 800a8c0:	fb02 f303 	mul.w	r3, r2, r3
 800a8c4:	3308      	adds	r3, #8
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	3302      	adds	r3, #2
 800a8cc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	795b      	ldrb	r3, [r3, #5]
 800a8d2:	78fa      	ldrb	r2, [r7, #3]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d002      	beq.n	800a8de <USBH_FindInterface+0x4e>
 800a8d8:	78fb      	ldrb	r3, [r7, #3]
 800a8da:	2bff      	cmp	r3, #255	; 0xff
 800a8dc:	d111      	bne.n	800a902 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a8e2:	78ba      	ldrb	r2, [r7, #2]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d002      	beq.n	800a8ee <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a8e8:	78bb      	ldrb	r3, [r7, #2]
 800a8ea:	2bff      	cmp	r3, #255	; 0xff
 800a8ec:	d109      	bne.n	800a902 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a8f2:	787a      	ldrb	r2, [r7, #1]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d002      	beq.n	800a8fe <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a8f8:	787b      	ldrb	r3, [r7, #1]
 800a8fa:	2bff      	cmp	r3, #255	; 0xff
 800a8fc:	d101      	bne.n	800a902 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a8fe:	7dfb      	ldrb	r3, [r7, #23]
 800a900:	e006      	b.n	800a910 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a902:	7dfb      	ldrb	r3, [r7, #23]
 800a904:	3301      	adds	r3, #1
 800a906:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a908:	7dfb      	ldrb	r3, [r7, #23]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d9d6      	bls.n	800a8bc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a90e:	23ff      	movs	r3, #255	; 0xff
}
 800a910:	4618      	mov	r0, r3
 800a912:	371c      	adds	r7, #28
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f001 fb87 	bl	800c038 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a92a:	2101      	movs	r1, #1
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f001 fca0 	bl	800c272 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b088      	sub	sp, #32
 800a940:	af04      	add	r7, sp, #16
 800a942:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a944:	2302      	movs	r3, #2
 800a946:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a948:	2300      	movs	r3, #0
 800a94a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a952:	b2db      	uxtb	r3, r3
 800a954:	2b01      	cmp	r3, #1
 800a956:	d102      	bne.n	800a95e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2203      	movs	r2, #3
 800a95c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	b2db      	uxtb	r3, r3
 800a964:	2b0b      	cmp	r3, #11
 800a966:	f200 81b3 	bhi.w	800acd0 <USBH_Process+0x394>
 800a96a:	a201      	add	r2, pc, #4	; (adr r2, 800a970 <USBH_Process+0x34>)
 800a96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a970:	0800a9a1 	.word	0x0800a9a1
 800a974:	0800a9d3 	.word	0x0800a9d3
 800a978:	0800aa3b 	.word	0x0800aa3b
 800a97c:	0800ac6b 	.word	0x0800ac6b
 800a980:	0800acd1 	.word	0x0800acd1
 800a984:	0800aadf 	.word	0x0800aadf
 800a988:	0800ac11 	.word	0x0800ac11
 800a98c:	0800ab15 	.word	0x0800ab15
 800a990:	0800ab35 	.word	0x0800ab35
 800a994:	0800ab55 	.word	0x0800ab55
 800a998:	0800ab83 	.word	0x0800ab83
 800a99c:	0800ac53 	.word	0x0800ac53
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 8193 	beq.w	800acd4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a9b4:	20c8      	movs	r0, #200	; 0xc8
 800a9b6:	f001 fca3 	bl	800c300 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f001 fb99 	bl	800c0f2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a9d0:	e180      	b.n	800acd4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d107      	bne.n	800a9ec <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2202      	movs	r2, #2
 800a9e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a9ea:	e182      	b.n	800acf2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a9f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a9f6:	d914      	bls.n	800aa22 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a9fe:	3301      	adds	r3, #1
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d903      	bls.n	800aa1a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	220d      	movs	r2, #13
 800aa16:	701a      	strb	r2, [r3, #0]
      break;
 800aa18:	e16b      	b.n	800acf2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	701a      	strb	r2, [r3, #0]
      break;
 800aa20:	e167      	b.n	800acf2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800aa28:	f103 020a 	add.w	r2, r3, #10
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800aa32:	200a      	movs	r0, #10
 800aa34:	f001 fc64 	bl	800c300 <USBH_Delay>
      break;
 800aa38:	e15b      	b.n	800acf2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d005      	beq.n	800aa50 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa4a:	2104      	movs	r1, #4
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800aa50:	2064      	movs	r0, #100	; 0x64
 800aa52:	f001 fc55 	bl	800c300 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f001 fb24 	bl	800c0a4 <USBH_LL_GetSpeed>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	461a      	mov	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2205      	movs	r2, #5
 800aa6a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f001 f92f 	bl	800bcd2 <USBH_AllocPipe>
 800aa74:	4603      	mov	r3, r0
 800aa76:	461a      	mov	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800aa7c:	2180      	movs	r1, #128	; 0x80
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f001 f927 	bl	800bcd2 <USBH_AllocPipe>
 800aa84:	4603      	mov	r3, r0
 800aa86:	461a      	mov	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	7919      	ldrb	r1, [r3, #4]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800aaa0:	b292      	uxth	r2, r2
 800aaa2:	9202      	str	r2, [sp, #8]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	9201      	str	r2, [sp, #4]
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2280      	movs	r2, #128	; 0x80
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f001 f8e0 	bl	800bc74 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	7959      	ldrb	r1, [r3, #5]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800aac8:	b292      	uxth	r2, r2
 800aaca:	9202      	str	r2, [sp, #8]
 800aacc:	2200      	movs	r2, #0
 800aace:	9201      	str	r2, [sp, #4]
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	4603      	mov	r3, r0
 800aad4:	2200      	movs	r2, #0
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f001 f8cc 	bl	800bc74 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800aadc:	e109      	b.n	800acf2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 f90c 	bl	800acfc <USBH_HandleEnum>
 800aae4:	4603      	mov	r3, r0
 800aae6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800aae8:	7bbb      	ldrb	r3, [r7, #14]
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f040 80f3 	bne.w	800acd8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d103      	bne.n	800ab0c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2208      	movs	r2, #8
 800ab08:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ab0a:	e0e5      	b.n	800acd8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2207      	movs	r2, #7
 800ab10:	701a      	strb	r2, [r3, #0]
      break;
 800ab12:	e0e1      	b.n	800acd8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f000 80de 	beq.w	800acdc <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab26:	2101      	movs	r1, #1
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2208      	movs	r2, #8
 800ab30:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ab32:	e0d3      	b.n	800acdc <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 fc20 	bl	800b384 <USBH_SetCfg>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f040 80ca 	bne.w	800ace0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2209      	movs	r2, #9
 800ab50:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab52:	e0c5      	b.n	800ace0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ab5a:	f003 0320 	and.w	r3, r3, #32
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00b      	beq.n	800ab7a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ab62:	2101      	movs	r1, #1
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fc30 	bl	800b3ca <USBH_SetFeature>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f040 80b9 	bne.w	800ace4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	220a      	movs	r2, #10
 800ab76:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ab78:	e0b4      	b.n	800ace4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	220a      	movs	r2, #10
 800ab7e:	701a      	strb	r2, [r3, #0]
      break;
 800ab80:	e0b0      	b.n	800ace4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 80ad 	beq.w	800ace8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ab96:	2300      	movs	r3, #0
 800ab98:	73fb      	strb	r3, [r7, #15]
 800ab9a:	e016      	b.n	800abca <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ab9c:	7bfa      	ldrb	r2, [r7, #15]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	32de      	adds	r2, #222	; 0xde
 800aba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba6:	791a      	ldrb	r2, [r3, #4]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800abae:	429a      	cmp	r2, r3
 800abb0:	d108      	bne.n	800abc4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800abb2:	7bfa      	ldrb	r2, [r7, #15]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	32de      	adds	r2, #222	; 0xde
 800abb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800abc2:	e005      	b.n	800abd0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800abc4:	7bfb      	ldrb	r3, [r7, #15]
 800abc6:	3301      	adds	r3, #1
 800abc8:	73fb      	strb	r3, [r7, #15]
 800abca:	7bfb      	ldrb	r3, [r7, #15]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d0e5      	beq.n	800ab9c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d016      	beq.n	800ac08 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	4798      	blx	r3
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d109      	bne.n	800ac00 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2206      	movs	r2, #6
 800abf0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abf8:	2103      	movs	r1, #3
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800abfe:	e073      	b.n	800ace8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	220d      	movs	r2, #13
 800ac04:	701a      	strb	r2, [r3, #0]
      break;
 800ac06:	e06f      	b.n	800ace8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	220d      	movs	r2, #13
 800ac0c:	701a      	strb	r2, [r3, #0]
      break;
 800ac0e:	e06b      	b.n	800ace8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d017      	beq.n	800ac4a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	4798      	blx	r3
 800ac26:	4603      	mov	r3, r0
 800ac28:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ac2a:	7bbb      	ldrb	r3, [r7, #14]
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d103      	bne.n	800ac3a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	220b      	movs	r2, #11
 800ac36:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ac38:	e058      	b.n	800acec <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800ac3a:	7bbb      	ldrb	r3, [r7, #14]
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	d154      	bne.n	800acec <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	220d      	movs	r2, #13
 800ac46:	701a      	strb	r2, [r3, #0]
      break;
 800ac48:	e050      	b.n	800acec <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	220d      	movs	r2, #13
 800ac4e:	701a      	strb	r2, [r3, #0]
      break;
 800ac50:	e04c      	b.n	800acec <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d049      	beq.n	800acf0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac62:	695b      	ldr	r3, [r3, #20]
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	4798      	blx	r3
      }
      break;
 800ac68:	e042      	b.n	800acf0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff fd72 	bl	800a75c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d009      	beq.n	800ac96 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d005      	beq.n	800acac <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aca6:	2105      	movs	r1, #5
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d107      	bne.n	800acc8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7ff fe2b 	bl	800a91c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800acc6:	e014      	b.n	800acf2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f001 f9b5 	bl	800c038 <USBH_LL_Start>
      break;
 800acce:	e010      	b.n	800acf2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800acd0:	bf00      	nop
 800acd2:	e00e      	b.n	800acf2 <USBH_Process+0x3b6>
      break;
 800acd4:	bf00      	nop
 800acd6:	e00c      	b.n	800acf2 <USBH_Process+0x3b6>
      break;
 800acd8:	bf00      	nop
 800acda:	e00a      	b.n	800acf2 <USBH_Process+0x3b6>
    break;
 800acdc:	bf00      	nop
 800acde:	e008      	b.n	800acf2 <USBH_Process+0x3b6>
      break;
 800ace0:	bf00      	nop
 800ace2:	e006      	b.n	800acf2 <USBH_Process+0x3b6>
      break;
 800ace4:	bf00      	nop
 800ace6:	e004      	b.n	800acf2 <USBH_Process+0x3b6>
      break;
 800ace8:	bf00      	nop
 800acea:	e002      	b.n	800acf2 <USBH_Process+0x3b6>
      break;
 800acec:	bf00      	nop
 800acee:	e000      	b.n	800acf2 <USBH_Process+0x3b6>
      break;
 800acf0:	bf00      	nop
  }
  return USBH_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b088      	sub	sp, #32
 800ad00:	af04      	add	r7, sp, #16
 800ad02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ad04:	2301      	movs	r3, #1
 800ad06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	785b      	ldrb	r3, [r3, #1]
 800ad10:	2b07      	cmp	r3, #7
 800ad12:	f200 81c1 	bhi.w	800b098 <USBH_HandleEnum+0x39c>
 800ad16:	a201      	add	r2, pc, #4	; (adr r2, 800ad1c <USBH_HandleEnum+0x20>)
 800ad18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad1c:	0800ad3d 	.word	0x0800ad3d
 800ad20:	0800adfb 	.word	0x0800adfb
 800ad24:	0800ae65 	.word	0x0800ae65
 800ad28:	0800aef3 	.word	0x0800aef3
 800ad2c:	0800af5d 	.word	0x0800af5d
 800ad30:	0800afcd 	.word	0x0800afcd
 800ad34:	0800b013 	.word	0x0800b013
 800ad38:	0800b059 	.word	0x0800b059
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ad3c:	2108      	movs	r1, #8
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fa50 	bl	800b1e4 <USBH_Get_DevDesc>
 800ad44:	4603      	mov	r3, r0
 800ad46:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad48:	7bbb      	ldrb	r3, [r7, #14]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d130      	bne.n	800adb0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	7919      	ldrb	r1, [r3, #4]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ad72:	b292      	uxth	r2, r2
 800ad74:	9202      	str	r2, [sp, #8]
 800ad76:	2200      	movs	r2, #0
 800ad78:	9201      	str	r2, [sp, #4]
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2280      	movs	r2, #128	; 0x80
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 ff77 	bl	800bc74 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	7959      	ldrb	r1, [r3, #5]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ad9a:	b292      	uxth	r2, r2
 800ad9c:	9202      	str	r2, [sp, #8]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	9201      	str	r2, [sp, #4]
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	4603      	mov	r3, r0
 800ada6:	2200      	movs	r2, #0
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 ff63 	bl	800bc74 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800adae:	e175      	b.n	800b09c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800adb0:	7bbb      	ldrb	r3, [r7, #14]
 800adb2:	2b03      	cmp	r3, #3
 800adb4:	f040 8172 	bne.w	800b09c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adbe:	3301      	adds	r3, #1
 800adc0:	b2da      	uxtb	r2, r3
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adce:	2b03      	cmp	r3, #3
 800add0:	d903      	bls.n	800adda <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	220d      	movs	r2, #13
 800add6:	701a      	strb	r2, [r3, #0]
      break;
 800add8:	e160      	b.n	800b09c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	795b      	ldrb	r3, [r3, #5]
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 ff97 	bl	800bd14 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	791b      	ldrb	r3, [r3, #4]
 800adea:	4619      	mov	r1, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 ff91 	bl	800bd14 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	701a      	strb	r2, [r3, #0]
      break;
 800adf8:	e150      	b.n	800b09c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800adfa:	2112      	movs	r1, #18
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 f9f1 	bl	800b1e4 <USBH_Get_DevDesc>
 800ae02:	4603      	mov	r3, r0
 800ae04:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae06:	7bbb      	ldrb	r3, [r7, #14]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d103      	bne.n	800ae14 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2202      	movs	r2, #2
 800ae10:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ae12:	e145      	b.n	800b0a0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae14:	7bbb      	ldrb	r3, [r7, #14]
 800ae16:	2b03      	cmp	r3, #3
 800ae18:	f040 8142 	bne.w	800b0a0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae22:	3301      	adds	r3, #1
 800ae24:	b2da      	uxtb	r2, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae32:	2b03      	cmp	r3, #3
 800ae34:	d903      	bls.n	800ae3e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	220d      	movs	r2, #13
 800ae3a:	701a      	strb	r2, [r3, #0]
      break;
 800ae3c:	e130      	b.n	800b0a0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	795b      	ldrb	r3, [r3, #5]
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 ff65 	bl	800bd14 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	791b      	ldrb	r3, [r3, #4]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 ff5f 	bl	800bd14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	701a      	strb	r2, [r3, #0]
      break;
 800ae62:	e11d      	b.n	800b0a0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ae64:	2101      	movs	r1, #1
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fa68 	bl	800b33c <USBH_SetAddress>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ae70:	7bbb      	ldrb	r3, [r7, #14]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d132      	bne.n	800aedc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ae76:	2002      	movs	r0, #2
 800ae78:	f001 fa42 	bl	800c300 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2203      	movs	r2, #3
 800ae88:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	7919      	ldrb	r1, [r3, #4]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ae9e:	b292      	uxth	r2, r2
 800aea0:	9202      	str	r2, [sp, #8]
 800aea2:	2200      	movs	r2, #0
 800aea4:	9201      	str	r2, [sp, #4]
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2280      	movs	r2, #128	; 0x80
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fee1 	bl	800bc74 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	7959      	ldrb	r1, [r3, #5]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aec6:	b292      	uxth	r2, r2
 800aec8:	9202      	str	r2, [sp, #8]
 800aeca:	2200      	movs	r2, #0
 800aecc:	9201      	str	r2, [sp, #4]
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	4603      	mov	r3, r0
 800aed2:	2200      	movs	r2, #0
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 fecd 	bl	800bc74 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aeda:	e0e3      	b.n	800b0a4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aedc:	7bbb      	ldrb	r3, [r7, #14]
 800aede:	2b03      	cmp	r3, #3
 800aee0:	f040 80e0 	bne.w	800b0a4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	220d      	movs	r2, #13
 800aee8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	705a      	strb	r2, [r3, #1]
      break;
 800aef0:	e0d8      	b.n	800b0a4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aef2:	2109      	movs	r1, #9
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f99d 	bl	800b234 <USBH_Get_CfgDesc>
 800aefa:	4603      	mov	r3, r0
 800aefc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aefe:	7bbb      	ldrb	r3, [r7, #14]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d103      	bne.n	800af0c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2204      	movs	r2, #4
 800af08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800af0a:	e0cd      	b.n	800b0a8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af0c:	7bbb      	ldrb	r3, [r7, #14]
 800af0e:	2b03      	cmp	r3, #3
 800af10:	f040 80ca 	bne.w	800b0a8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af1a:	3301      	adds	r3, #1
 800af1c:	b2da      	uxtb	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af2a:	2b03      	cmp	r3, #3
 800af2c:	d903      	bls.n	800af36 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	220d      	movs	r2, #13
 800af32:	701a      	strb	r2, [r3, #0]
      break;
 800af34:	e0b8      	b.n	800b0a8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	795b      	ldrb	r3, [r3, #5]
 800af3a:	4619      	mov	r1, r3
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 fee9 	bl	800bd14 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	791b      	ldrb	r3, [r3, #4]
 800af46:	4619      	mov	r1, r3
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fee3 	bl	800bd14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	701a      	strb	r2, [r3, #0]
      break;
 800af5a:	e0a5      	b.n	800b0a8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800af62:	4619      	mov	r1, r3
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 f965 	bl	800b234 <USBH_Get_CfgDesc>
 800af6a:	4603      	mov	r3, r0
 800af6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af6e:	7bbb      	ldrb	r3, [r7, #14]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d103      	bne.n	800af7c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2205      	movs	r2, #5
 800af78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800af7a:	e097      	b.n	800b0ac <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af7c:	7bbb      	ldrb	r3, [r7, #14]
 800af7e:	2b03      	cmp	r3, #3
 800af80:	f040 8094 	bne.w	800b0ac <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af8a:	3301      	adds	r3, #1
 800af8c:	b2da      	uxtb	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800af9a:	2b03      	cmp	r3, #3
 800af9c:	d903      	bls.n	800afa6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	220d      	movs	r2, #13
 800afa2:	701a      	strb	r2, [r3, #0]
      break;
 800afa4:	e082      	b.n	800b0ac <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	795b      	ldrb	r3, [r3, #5]
 800afaa:	4619      	mov	r1, r3
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 feb1 	bl	800bd14 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	791b      	ldrb	r3, [r3, #4]
 800afb6:	4619      	mov	r1, r3
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 feab 	bl	800bd14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	701a      	strb	r2, [r3, #0]
      break;
 800afca:	e06f      	b.n	800b0ac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d019      	beq.n	800b00a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800afe2:	23ff      	movs	r3, #255	; 0xff
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f949 	bl	800b27c <USBH_Get_StringDesc>
 800afea:	4603      	mov	r3, r0
 800afec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800afee:	7bbb      	ldrb	r3, [r7, #14]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d103      	bne.n	800affc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2206      	movs	r2, #6
 800aff8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800affa:	e059      	b.n	800b0b0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800affc:	7bbb      	ldrb	r3, [r7, #14]
 800affe:	2b03      	cmp	r3, #3
 800b000:	d156      	bne.n	800b0b0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2206      	movs	r2, #6
 800b006:	705a      	strb	r2, [r3, #1]
      break;
 800b008:	e052      	b.n	800b0b0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2206      	movs	r2, #6
 800b00e:	705a      	strb	r2, [r3, #1]
      break;
 800b010:	e04e      	b.n	800b0b0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d019      	beq.n	800b050 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b028:	23ff      	movs	r3, #255	; 0xff
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f926 	bl	800b27c <USBH_Get_StringDesc>
 800b030:	4603      	mov	r3, r0
 800b032:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b034:	7bbb      	ldrb	r3, [r7, #14]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d103      	bne.n	800b042 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2207      	movs	r2, #7
 800b03e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b040:	e038      	b.n	800b0b4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b042:	7bbb      	ldrb	r3, [r7, #14]
 800b044:	2b03      	cmp	r3, #3
 800b046:	d135      	bne.n	800b0b4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2207      	movs	r2, #7
 800b04c:	705a      	strb	r2, [r3, #1]
      break;
 800b04e:	e031      	b.n	800b0b4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2207      	movs	r2, #7
 800b054:	705a      	strb	r2, [r3, #1]
      break;
 800b056:	e02d      	b.n	800b0b4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d017      	beq.n	800b092 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b06e:	23ff      	movs	r3, #255	; 0xff
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 f903 	bl	800b27c <USBH_Get_StringDesc>
 800b076:	4603      	mov	r3, r0
 800b078:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b07a:	7bbb      	ldrb	r3, [r7, #14]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d102      	bne.n	800b086 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b080:	2300      	movs	r3, #0
 800b082:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b084:	e018      	b.n	800b0b8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b086:	7bbb      	ldrb	r3, [r7, #14]
 800b088:	2b03      	cmp	r3, #3
 800b08a:	d115      	bne.n	800b0b8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	73fb      	strb	r3, [r7, #15]
      break;
 800b090:	e012      	b.n	800b0b8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b092:	2300      	movs	r3, #0
 800b094:	73fb      	strb	r3, [r7, #15]
      break;
 800b096:	e00f      	b.n	800b0b8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b098:	bf00      	nop
 800b09a:	e00e      	b.n	800b0ba <USBH_HandleEnum+0x3be>
      break;
 800b09c:	bf00      	nop
 800b09e:	e00c      	b.n	800b0ba <USBH_HandleEnum+0x3be>
      break;
 800b0a0:	bf00      	nop
 800b0a2:	e00a      	b.n	800b0ba <USBH_HandleEnum+0x3be>
      break;
 800b0a4:	bf00      	nop
 800b0a6:	e008      	b.n	800b0ba <USBH_HandleEnum+0x3be>
      break;
 800b0a8:	bf00      	nop
 800b0aa:	e006      	b.n	800b0ba <USBH_HandleEnum+0x3be>
      break;
 800b0ac:	bf00      	nop
 800b0ae:	e004      	b.n	800b0ba <USBH_HandleEnum+0x3be>
      break;
 800b0b0:	bf00      	nop
 800b0b2:	e002      	b.n	800b0ba <USBH_HandleEnum+0x3be>
      break;
 800b0b4:	bf00      	nop
 800b0b6:	e000      	b.n	800b0ba <USBH_HandleEnum+0x3be>
      break;
 800b0b8:	bf00      	nop
  }
  return Status;
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b0d6:	bf00      	nop
 800b0d8:	370c      	adds	r7, #12
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr

0800b0e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b082      	sub	sp, #8
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b0f0:	1c5a      	adds	r2, r3, #1
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 f804 	bl	800b106 <USBH_HandleSof>
}
 800b0fe:	bf00      	nop
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b082      	sub	sp, #8
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	b2db      	uxtb	r3, r3
 800b114:	2b0b      	cmp	r3, #11
 800b116:	d10a      	bne.n	800b12e <USBH_HandleSof+0x28>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d005      	beq.n	800b12e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b128:	699b      	ldr	r3, [r3, #24]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	4798      	blx	r3
  }
}
 800b12e:	bf00      	nop
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b136:	b480      	push	{r7}
 800b138:	b083      	sub	sp, #12
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2201      	movs	r2, #1
 800b142:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b146:	bf00      	nop
}
 800b148:	370c      	adds	r7, #12
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b152:	b480      	push	{r7}
 800b154:	b083      	sub	sp, #12
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b162:	bf00      	nop
}
 800b164:	370c      	adds	r7, #12
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b16e:	b480      	push	{r7}
 800b170:	b083      	sub	sp, #12
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2201      	movs	r2, #1
 800b17a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 ff56 	bl	800c06e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	791b      	ldrb	r3, [r3, #4]
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fda3 	bl	800bd14 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	795b      	ldrb	r3, [r3, #5]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 fd9d 	bl	800bd14 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3708      	adds	r7, #8
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af02      	add	r7, sp, #8
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b1f6:	78fb      	ldrb	r3, [r7, #3]
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	9300      	str	r3, [sp, #0]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b202:	2100      	movs	r1, #0
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f864 	bl	800b2d2 <USBH_GetDescriptor>
 800b20a:	4603      	mov	r3, r0
 800b20c:	73fb      	strb	r3, [r7, #15]
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10a      	bne.n	800b22a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b220:	78fa      	ldrb	r2, [r7, #3]
 800b222:	b292      	uxth	r2, r2
 800b224:	4619      	mov	r1, r3
 800b226:	f000 f918 	bl	800b45a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b234:	b580      	push	{r7, lr}
 800b236:	b086      	sub	sp, #24
 800b238:	af02      	add	r7, sp, #8
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	460b      	mov	r3, r1
 800b23e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	331c      	adds	r3, #28
 800b244:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b246:	887b      	ldrh	r3, [r7, #2]
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b250:	2100      	movs	r1, #0
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f83d 	bl	800b2d2 <USBH_GetDescriptor>
 800b258:	4603      	mov	r3, r0
 800b25a:	72fb      	strb	r3, [r7, #11]
 800b25c:	7afb      	ldrb	r3, [r7, #11]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d107      	bne.n	800b272 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b268:	887a      	ldrh	r2, [r7, #2]
 800b26a:	68f9      	ldr	r1, [r7, #12]
 800b26c:	4618      	mov	r0, r3
 800b26e:	f000 f964 	bl	800b53a <USBH_ParseCfgDesc>
  }

  return status;
 800b272:	7afb      	ldrb	r3, [r7, #11]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af02      	add	r7, sp, #8
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	607a      	str	r2, [r7, #4]
 800b286:	461a      	mov	r2, r3
 800b288:	460b      	mov	r3, r1
 800b28a:	72fb      	strb	r3, [r7, #11]
 800b28c:	4613      	mov	r3, r2
 800b28e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b290:	7afb      	ldrb	r3, [r7, #11]
 800b292:	b29b      	uxth	r3, r3
 800b294:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b298:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b2a0:	893b      	ldrh	r3, [r7, #8]
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f000 f812 	bl	800b2d2 <USBH_GetDescriptor>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	75fb      	strb	r3, [r7, #23]
 800b2b2:	7dfb      	ldrb	r3, [r7, #23]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d107      	bne.n	800b2c8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b2be:	893a      	ldrh	r2, [r7, #8]
 800b2c0:	6879      	ldr	r1, [r7, #4]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f000 fa37 	bl	800b736 <USBH_ParseStringDesc>
  }

  return status;
 800b2c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3718      	adds	r7, #24
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	60f8      	str	r0, [r7, #12]
 800b2da:	607b      	str	r3, [r7, #4]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	72fb      	strb	r3, [r7, #11]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	789b      	ldrb	r3, [r3, #2]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d11c      	bne.n	800b326 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b2ec:	7afb      	ldrb	r3, [r7, #11]
 800b2ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2206      	movs	r2, #6
 800b2fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	893a      	ldrh	r2, [r7, #8]
 800b302:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b304:	893b      	ldrh	r3, [r7, #8]
 800b306:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b30a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b30e:	d104      	bne.n	800b31a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f240 4209 	movw	r2, #1033	; 0x409
 800b316:	829a      	strh	r2, [r3, #20]
 800b318:	e002      	b.n	800b320 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2200      	movs	r2, #0
 800b31e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	8b3a      	ldrh	r2, [r7, #24]
 800b324:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b326:	8b3b      	ldrh	r3, [r7, #24]
 800b328:	461a      	mov	r2, r3
 800b32a:	6879      	ldr	r1, [r7, #4]
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f000 fa50 	bl	800b7d2 <USBH_CtlReq>
 800b332:	4603      	mov	r3, r0
}
 800b334:	4618      	mov	r0, r3
 800b336:	3710      	adds	r7, #16
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	460b      	mov	r3, r1
 800b346:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	789b      	ldrb	r3, [r3, #2]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d10f      	bne.n	800b370 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2205      	movs	r2, #5
 800b35a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b35c:	78fb      	ldrb	r3, [r7, #3]
 800b35e:	b29a      	uxth	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b370:	2200      	movs	r2, #0
 800b372:	2100      	movs	r1, #0
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 fa2c 	bl	800b7d2 <USBH_CtlReq>
 800b37a:	4603      	mov	r3, r0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	460b      	mov	r3, r1
 800b38e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	789b      	ldrb	r3, [r3, #2]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d10e      	bne.n	800b3b6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2209      	movs	r2, #9
 800b3a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	887a      	ldrh	r2, [r7, #2]
 800b3a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fa09 	bl	800b7d2 <USBH_CtlReq>
 800b3c0:	4603      	mov	r3, r0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b082      	sub	sp, #8
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	789b      	ldrb	r3, [r3, #2]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d10f      	bne.n	800b3fe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2203      	movs	r2, #3
 800b3e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b3ea:	78fb      	ldrb	r3, [r7, #3]
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b3fe:	2200      	movs	r2, #0
 800b400:	2100      	movs	r1, #0
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f9e5 	bl	800b7d2 <USBH_CtlReq>
 800b408:	4603      	mov	r3, r0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b082      	sub	sp, #8
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	460b      	mov	r3, r1
 800b41c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	789b      	ldrb	r3, [r3, #2]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d10f      	bne.n	800b446 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2202      	movs	r2, #2
 800b42a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b438:	78fb      	ldrb	r3, [r7, #3]
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b446:	2200      	movs	r2, #0
 800b448:	2100      	movs	r1, #0
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f9c1 	bl	800b7d2 <USBH_CtlReq>
 800b450:	4603      	mov	r3, r0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b45a:	b480      	push	{r7}
 800b45c:	b085      	sub	sp, #20
 800b45e:	af00      	add	r7, sp, #0
 800b460:	60f8      	str	r0, [r7, #12]
 800b462:	60b9      	str	r1, [r7, #8]
 800b464:	4613      	mov	r3, r2
 800b466:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	781a      	ldrb	r2, [r3, #0]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	785a      	ldrb	r2, [r3, #1]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	3302      	adds	r3, #2
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	b29a      	uxth	r2, r3
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	3303      	adds	r3, #3
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	b29b      	uxth	r3, r3
 800b488:	021b      	lsls	r3, r3, #8
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	4313      	orrs	r3, r2
 800b48e:	b29a      	uxth	r2, r3
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	791a      	ldrb	r2, [r3, #4]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	795a      	ldrb	r2, [r3, #5]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	799a      	ldrb	r2, [r3, #6]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	79da      	ldrb	r2, [r3, #7]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b4b4:	88fb      	ldrh	r3, [r7, #6]
 800b4b6:	2b08      	cmp	r3, #8
 800b4b8:	d939      	bls.n	800b52e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	3308      	adds	r3, #8
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	3309      	adds	r3, #9
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	021b      	lsls	r3, r3, #8
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	330a      	adds	r3, #10
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	330b      	adds	r3, #11
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	021b      	lsls	r3, r3, #8
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	330c      	adds	r3, #12
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	330d      	adds	r3, #13
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	b29b      	uxth	r3, r3
 800b502:	021b      	lsls	r3, r3, #8
 800b504:	b29b      	uxth	r3, r3
 800b506:	4313      	orrs	r3, r2
 800b508:	b29a      	uxth	r2, r3
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	7b9a      	ldrb	r2, [r3, #14]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	7bda      	ldrb	r2, [r3, #15]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	7c1a      	ldrb	r2, [r3, #16]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	7c5a      	ldrb	r2, [r3, #17]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	745a      	strb	r2, [r3, #17]
  }
}
 800b52e:	bf00      	nop
 800b530:	3714      	adds	r7, #20
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr

0800b53a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b08a      	sub	sp, #40	; 0x28
 800b53e:	af00      	add	r7, sp, #0
 800b540:	60f8      	str	r0, [r7, #12]
 800b542:	60b9      	str	r1, [r7, #8]
 800b544:	4613      	mov	r3, r2
 800b546:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b54c:	2300      	movs	r3, #0
 800b54e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b552:	2300      	movs	r3, #0
 800b554:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	781a      	ldrb	r2, [r3, #0]
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	785a      	ldrb	r2, [r3, #1]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	3302      	adds	r3, #2
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	b29a      	uxth	r2, r3
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	3303      	adds	r3, #3
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	021b      	lsls	r3, r3, #8
 800b57e:	b29b      	uxth	r3, r3
 800b580:	4313      	orrs	r3, r2
 800b582:	b29a      	uxth	r2, r3
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	791a      	ldrb	r2, [r3, #4]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	795a      	ldrb	r2, [r3, #5]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	799a      	ldrb	r2, [r3, #6]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	79da      	ldrb	r2, [r3, #7]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	7a1a      	ldrb	r2, [r3, #8]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b5b0:	88fb      	ldrh	r3, [r7, #6]
 800b5b2:	2b09      	cmp	r3, #9
 800b5b4:	d95f      	bls.n	800b676 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b5b6:	2309      	movs	r3, #9
 800b5b8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b5be:	e051      	b.n	800b664 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b5c0:	f107 0316 	add.w	r3, r7, #22
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5c8:	f000 f8e8 	bl	800b79c <USBH_GetNextDesc>
 800b5cc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	785b      	ldrb	r3, [r3, #1]
 800b5d2:	2b04      	cmp	r3, #4
 800b5d4:	d146      	bne.n	800b664 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b5d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5da:	221a      	movs	r2, #26
 800b5dc:	fb02 f303 	mul.w	r3, r2, r3
 800b5e0:	3308      	adds	r3, #8
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	3302      	adds	r3, #2
 800b5e8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b5ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5ec:	69f8      	ldr	r0, [r7, #28]
 800b5ee:	f000 f846 	bl	800b67e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b5fc:	e022      	b.n	800b644 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b5fe:	f107 0316 	add.w	r3, r7, #22
 800b602:	4619      	mov	r1, r3
 800b604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b606:	f000 f8c9 	bl	800b79c <USBH_GetNextDesc>
 800b60a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60e:	785b      	ldrb	r3, [r3, #1]
 800b610:	2b05      	cmp	r3, #5
 800b612:	d117      	bne.n	800b644 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b614:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b618:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b61c:	3201      	adds	r2, #1
 800b61e:	00d2      	lsls	r2, r2, #3
 800b620:	211a      	movs	r1, #26
 800b622:	fb01 f303 	mul.w	r3, r1, r3
 800b626:	4413      	add	r3, r2
 800b628:	3308      	adds	r3, #8
 800b62a:	68fa      	ldr	r2, [r7, #12]
 800b62c:	4413      	add	r3, r2
 800b62e:	3304      	adds	r3, #4
 800b630:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b632:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b634:	69b8      	ldr	r0, [r7, #24]
 800b636:	f000 f851 	bl	800b6dc <USBH_ParseEPDesc>
            ep_ix++;
 800b63a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b63e:	3301      	adds	r3, #1
 800b640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	791b      	ldrb	r3, [r3, #4]
 800b648:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d204      	bcs.n	800b65a <USBH_ParseCfgDesc+0x120>
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	885a      	ldrh	r2, [r3, #2]
 800b654:	8afb      	ldrh	r3, [r7, #22]
 800b656:	429a      	cmp	r2, r3
 800b658:	d8d1      	bhi.n	800b5fe <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b65a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b65e:	3301      	adds	r3, #1
 800b660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b664:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d804      	bhi.n	800b676 <USBH_ParseCfgDesc+0x13c>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	885a      	ldrh	r2, [r3, #2]
 800b670:	8afb      	ldrh	r3, [r7, #22]
 800b672:	429a      	cmp	r2, r3
 800b674:	d8a4      	bhi.n	800b5c0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b676:	bf00      	nop
 800b678:	3728      	adds	r7, #40	; 0x28
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b67e:	b480      	push	{r7}
 800b680:	b083      	sub	sp, #12
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	781a      	ldrb	r2, [r3, #0]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	785a      	ldrb	r2, [r3, #1]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	789a      	ldrb	r2, [r3, #2]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	78da      	ldrb	r2, [r3, #3]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	791a      	ldrb	r2, [r3, #4]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	795a      	ldrb	r2, [r3, #5]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	799a      	ldrb	r2, [r3, #6]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	79da      	ldrb	r2, [r3, #7]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	7a1a      	ldrb	r2, [r3, #8]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	721a      	strb	r2, [r3, #8]
}
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	781a      	ldrb	r2, [r3, #0]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	785a      	ldrb	r2, [r3, #1]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	789a      	ldrb	r2, [r3, #2]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	78da      	ldrb	r2, [r3, #3]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	3304      	adds	r3, #4
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	b29a      	uxth	r2, r3
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	3305      	adds	r3, #5
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	b29b      	uxth	r3, r3
 800b716:	021b      	lsls	r3, r3, #8
 800b718:	b29b      	uxth	r3, r3
 800b71a:	4313      	orrs	r3, r2
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	799a      	ldrb	r2, [r3, #6]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	719a      	strb	r2, [r3, #6]
}
 800b72a:	bf00      	nop
 800b72c:	370c      	adds	r7, #12
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b736:	b480      	push	{r7}
 800b738:	b087      	sub	sp, #28
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	60f8      	str	r0, [r7, #12]
 800b73e:	60b9      	str	r1, [r7, #8]
 800b740:	4613      	mov	r3, r2
 800b742:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	3301      	adds	r3, #1
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	2b03      	cmp	r3, #3
 800b74c:	d120      	bne.n	800b790 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	1e9a      	subs	r2, r3, #2
 800b754:	88fb      	ldrh	r3, [r7, #6]
 800b756:	4293      	cmp	r3, r2
 800b758:	bf28      	it	cs
 800b75a:	4613      	movcs	r3, r2
 800b75c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	3302      	adds	r3, #2
 800b762:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b764:	2300      	movs	r3, #0
 800b766:	82fb      	strh	r3, [r7, #22]
 800b768:	e00b      	b.n	800b782 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b76a:	8afb      	ldrh	r3, [r7, #22]
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	4413      	add	r3, r2
 800b770:	781a      	ldrb	r2, [r3, #0]
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	3301      	adds	r3, #1
 800b77a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b77c:	8afb      	ldrh	r3, [r7, #22]
 800b77e:	3302      	adds	r3, #2
 800b780:	82fb      	strh	r3, [r7, #22]
 800b782:	8afa      	ldrh	r2, [r7, #22]
 800b784:	8abb      	ldrh	r3, [r7, #20]
 800b786:	429a      	cmp	r2, r3
 800b788:	d3ef      	bcc.n	800b76a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	2200      	movs	r2, #0
 800b78e:	701a      	strb	r2, [r3, #0]
  }
}
 800b790:	bf00      	nop
 800b792:	371c      	adds	r7, #28
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	881a      	ldrh	r2, [r3, #0]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	4413      	add	r3, r2
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3714      	adds	r7, #20
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr

0800b7d2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b086      	sub	sp, #24
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	60f8      	str	r0, [r7, #12]
 800b7da:	60b9      	str	r1, [r7, #8]
 800b7dc:	4613      	mov	r3, r2
 800b7de:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	789b      	ldrb	r3, [r3, #2]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d002      	beq.n	800b7f2 <USBH_CtlReq+0x20>
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d00f      	beq.n	800b810 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b7f0:	e027      	b.n	800b842 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	88fa      	ldrh	r2, [r7, #6]
 800b7fc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2201      	movs	r2, #1
 800b802:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2202      	movs	r2, #2
 800b808:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b80a:	2301      	movs	r3, #1
 800b80c:	75fb      	strb	r3, [r7, #23]
      break;
 800b80e:	e018      	b.n	800b842 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f000 f81b 	bl	800b84c <USBH_HandleControl>
 800b816:	4603      	mov	r3, r0
 800b818:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b81a:	7dfb      	ldrb	r3, [r7, #23]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <USBH_CtlReq+0x54>
 800b820:	7dfb      	ldrb	r3, [r7, #23]
 800b822:	2b03      	cmp	r3, #3
 800b824:	d106      	bne.n	800b834 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2201      	movs	r2, #1
 800b82a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	761a      	strb	r2, [r3, #24]
      break;
 800b832:	e005      	b.n	800b840 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b834:	7dfb      	ldrb	r3, [r7, #23]
 800b836:	2b02      	cmp	r3, #2
 800b838:	d102      	bne.n	800b840 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2201      	movs	r2, #1
 800b83e:	709a      	strb	r2, [r3, #2]
      break;
 800b840:	bf00      	nop
  }
  return status;
 800b842:	7dfb      	ldrb	r3, [r7, #23]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3718      	adds	r7, #24
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af02      	add	r7, sp, #8
 800b852:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b854:	2301      	movs	r3, #1
 800b856:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b858:	2300      	movs	r3, #0
 800b85a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	7e1b      	ldrb	r3, [r3, #24]
 800b860:	3b01      	subs	r3, #1
 800b862:	2b0a      	cmp	r3, #10
 800b864:	f200 8156 	bhi.w	800bb14 <USBH_HandleControl+0x2c8>
 800b868:	a201      	add	r2, pc, #4	; (adr r2, 800b870 <USBH_HandleControl+0x24>)
 800b86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86e:	bf00      	nop
 800b870:	0800b89d 	.word	0x0800b89d
 800b874:	0800b8b7 	.word	0x0800b8b7
 800b878:	0800b921 	.word	0x0800b921
 800b87c:	0800b947 	.word	0x0800b947
 800b880:	0800b97f 	.word	0x0800b97f
 800b884:	0800b9a9 	.word	0x0800b9a9
 800b888:	0800b9fb 	.word	0x0800b9fb
 800b88c:	0800ba1d 	.word	0x0800ba1d
 800b890:	0800ba59 	.word	0x0800ba59
 800b894:	0800ba7f 	.word	0x0800ba7f
 800b898:	0800babd 	.word	0x0800babd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f103 0110 	add.w	r1, r3, #16
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	795b      	ldrb	r3, [r3, #5]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 f943 	bl	800bb34 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2202      	movs	r2, #2
 800b8b2:	761a      	strb	r2, [r3, #24]
      break;
 800b8b4:	e139      	b.n	800bb2a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	795b      	ldrb	r3, [r3, #5]
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 fcc5 	bl	800c24c <USBH_LL_GetURBState>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b8c6:	7bbb      	ldrb	r3, [r7, #14]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d11e      	bne.n	800b90a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	7c1b      	ldrb	r3, [r3, #16]
 800b8d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b8d4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	8adb      	ldrh	r3, [r3, #22]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00a      	beq.n	800b8f4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b8de:	7b7b      	ldrb	r3, [r7, #13]
 800b8e0:	2b80      	cmp	r3, #128	; 0x80
 800b8e2:	d103      	bne.n	800b8ec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2203      	movs	r2, #3
 800b8e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b8ea:	e115      	b.n	800bb18 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2205      	movs	r2, #5
 800b8f0:	761a      	strb	r2, [r3, #24]
      break;
 800b8f2:	e111      	b.n	800bb18 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b8f4:	7b7b      	ldrb	r3, [r7, #13]
 800b8f6:	2b80      	cmp	r3, #128	; 0x80
 800b8f8:	d103      	bne.n	800b902 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2209      	movs	r2, #9
 800b8fe:	761a      	strb	r2, [r3, #24]
      break;
 800b900:	e10a      	b.n	800bb18 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2207      	movs	r2, #7
 800b906:	761a      	strb	r2, [r3, #24]
      break;
 800b908:	e106      	b.n	800bb18 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b90a:	7bbb      	ldrb	r3, [r7, #14]
 800b90c:	2b04      	cmp	r3, #4
 800b90e:	d003      	beq.n	800b918 <USBH_HandleControl+0xcc>
 800b910:	7bbb      	ldrb	r3, [r7, #14]
 800b912:	2b02      	cmp	r3, #2
 800b914:	f040 8100 	bne.w	800bb18 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	220b      	movs	r2, #11
 800b91c:	761a      	strb	r2, [r3, #24]
      break;
 800b91e:	e0fb      	b.n	800bb18 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b926:	b29a      	uxth	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6899      	ldr	r1, [r3, #8]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	899a      	ldrh	r2, [r3, #12]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	791b      	ldrb	r3, [r3, #4]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 f93a 	bl	800bbb2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2204      	movs	r2, #4
 800b942:	761a      	strb	r2, [r3, #24]
      break;
 800b944:	e0f1      	b.n	800bb2a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	791b      	ldrb	r3, [r3, #4]
 800b94a:	4619      	mov	r1, r3
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 fc7d 	bl	800c24c <USBH_LL_GetURBState>
 800b952:	4603      	mov	r3, r0
 800b954:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b956:	7bbb      	ldrb	r3, [r7, #14]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d102      	bne.n	800b962 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2209      	movs	r2, #9
 800b960:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b962:	7bbb      	ldrb	r3, [r7, #14]
 800b964:	2b05      	cmp	r3, #5
 800b966:	d102      	bne.n	800b96e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b968:	2303      	movs	r3, #3
 800b96a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b96c:	e0d6      	b.n	800bb1c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b96e:	7bbb      	ldrb	r3, [r7, #14]
 800b970:	2b04      	cmp	r3, #4
 800b972:	f040 80d3 	bne.w	800bb1c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	220b      	movs	r2, #11
 800b97a:	761a      	strb	r2, [r3, #24]
      break;
 800b97c:	e0ce      	b.n	800bb1c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6899      	ldr	r1, [r3, #8]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	899a      	ldrh	r2, [r3, #12]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	795b      	ldrb	r3, [r3, #5]
 800b98a:	2001      	movs	r0, #1
 800b98c:	9000      	str	r0, [sp, #0]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 f8ea 	bl	800bb68 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b99a:	b29a      	uxth	r2, r3
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2206      	movs	r2, #6
 800b9a4:	761a      	strb	r2, [r3, #24]
      break;
 800b9a6:	e0c0      	b.n	800bb2a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	795b      	ldrb	r3, [r3, #5]
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 fc4c 	bl	800c24c <USBH_LL_GetURBState>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b9b8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d103      	bne.n	800b9c6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2207      	movs	r2, #7
 800b9c2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b9c4:	e0ac      	b.n	800bb20 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b9c6:	7bbb      	ldrb	r3, [r7, #14]
 800b9c8:	2b05      	cmp	r3, #5
 800b9ca:	d105      	bne.n	800b9d8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	220c      	movs	r2, #12
 800b9d0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b9d2:	2303      	movs	r3, #3
 800b9d4:	73fb      	strb	r3, [r7, #15]
      break;
 800b9d6:	e0a3      	b.n	800bb20 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b9d8:	7bbb      	ldrb	r3, [r7, #14]
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d103      	bne.n	800b9e6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2205      	movs	r2, #5
 800b9e2:	761a      	strb	r2, [r3, #24]
      break;
 800b9e4:	e09c      	b.n	800bb20 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b9e6:	7bbb      	ldrb	r3, [r7, #14]
 800b9e8:	2b04      	cmp	r3, #4
 800b9ea:	f040 8099 	bne.w	800bb20 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	220b      	movs	r2, #11
 800b9f2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b9f4:	2302      	movs	r3, #2
 800b9f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b9f8:	e092      	b.n	800bb20 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	791b      	ldrb	r3, [r3, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	2100      	movs	r1, #0
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f8d5 	bl	800bbb2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2208      	movs	r2, #8
 800ba18:	761a      	strb	r2, [r3, #24]

      break;
 800ba1a:	e086      	b.n	800bb2a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	791b      	ldrb	r3, [r3, #4]
 800ba20:	4619      	mov	r1, r3
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fc12 	bl	800c24c <USBH_LL_GetURBState>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d105      	bne.n	800ba3e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	220d      	movs	r2, #13
 800ba36:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba3c:	e072      	b.n	800bb24 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ba3e:	7bbb      	ldrb	r3, [r7, #14]
 800ba40:	2b04      	cmp	r3, #4
 800ba42:	d103      	bne.n	800ba4c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	220b      	movs	r2, #11
 800ba48:	761a      	strb	r2, [r3, #24]
      break;
 800ba4a:	e06b      	b.n	800bb24 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ba4c:	7bbb      	ldrb	r3, [r7, #14]
 800ba4e:	2b05      	cmp	r3, #5
 800ba50:	d168      	bne.n	800bb24 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ba52:	2303      	movs	r3, #3
 800ba54:	73fb      	strb	r3, [r7, #15]
      break;
 800ba56:	e065      	b.n	800bb24 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	795b      	ldrb	r3, [r3, #5]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	9200      	str	r2, [sp, #0]
 800ba60:	2200      	movs	r2, #0
 800ba62:	2100      	movs	r1, #0
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 f87f 	bl	800bb68 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba70:	b29a      	uxth	r2, r3
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	220a      	movs	r2, #10
 800ba7a:	761a      	strb	r2, [r3, #24]
      break;
 800ba7c:	e055      	b.n	800bb2a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	795b      	ldrb	r3, [r3, #5]
 800ba82:	4619      	mov	r1, r3
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fbe1 	bl	800c24c <USBH_LL_GetURBState>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ba8e:	7bbb      	ldrb	r3, [r7, #14]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d105      	bne.n	800baa0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	220d      	movs	r2, #13
 800ba9c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ba9e:	e043      	b.n	800bb28 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800baa0:	7bbb      	ldrb	r3, [r7, #14]
 800baa2:	2b02      	cmp	r3, #2
 800baa4:	d103      	bne.n	800baae <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2209      	movs	r2, #9
 800baaa:	761a      	strb	r2, [r3, #24]
      break;
 800baac:	e03c      	b.n	800bb28 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800baae:	7bbb      	ldrb	r3, [r7, #14]
 800bab0:	2b04      	cmp	r3, #4
 800bab2:	d139      	bne.n	800bb28 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	220b      	movs	r2, #11
 800bab8:	761a      	strb	r2, [r3, #24]
      break;
 800baba:	e035      	b.n	800bb28 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	7e5b      	ldrb	r3, [r3, #25]
 800bac0:	3301      	adds	r3, #1
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	765a      	strb	r2, [r3, #25]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	7e5b      	ldrb	r3, [r3, #25]
 800bacc:	2b02      	cmp	r3, #2
 800bace:	d806      	bhi.n	800bade <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2201      	movs	r2, #1
 800bad4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2201      	movs	r2, #1
 800bada:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800badc:	e025      	b.n	800bb2a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bae4:	2106      	movs	r1, #6
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	795b      	ldrb	r3, [r3, #5]
 800baf4:	4619      	mov	r1, r3
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 f90c 	bl	800bd14 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	791b      	ldrb	r3, [r3, #4]
 800bb00:	4619      	mov	r1, r3
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f906 	bl	800bd14 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bb0e:	2302      	movs	r3, #2
 800bb10:	73fb      	strb	r3, [r7, #15]
      break;
 800bb12:	e00a      	b.n	800bb2a <USBH_HandleControl+0x2de>

    default:
      break;
 800bb14:	bf00      	nop
 800bb16:	e008      	b.n	800bb2a <USBH_HandleControl+0x2de>
      break;
 800bb18:	bf00      	nop
 800bb1a:	e006      	b.n	800bb2a <USBH_HandleControl+0x2de>
      break;
 800bb1c:	bf00      	nop
 800bb1e:	e004      	b.n	800bb2a <USBH_HandleControl+0x2de>
      break;
 800bb20:	bf00      	nop
 800bb22:	e002      	b.n	800bb2a <USBH_HandleControl+0x2de>
      break;
 800bb24:	bf00      	nop
 800bb26:	e000      	b.n	800bb2a <USBH_HandleControl+0x2de>
      break;
 800bb28:	bf00      	nop
  }

  return status;
 800bb2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3710      	adds	r7, #16
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b088      	sub	sp, #32
 800bb38:	af04      	add	r7, sp, #16
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	4613      	mov	r3, r2
 800bb40:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb42:	79f9      	ldrb	r1, [r7, #7]
 800bb44:	2300      	movs	r3, #0
 800bb46:	9303      	str	r3, [sp, #12]
 800bb48:	2308      	movs	r3, #8
 800bb4a:	9302      	str	r3, [sp, #8]
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	9301      	str	r3, [sp, #4]
 800bb50:	2300      	movs	r3, #0
 800bb52:	9300      	str	r3, [sp, #0]
 800bb54:	2300      	movs	r3, #0
 800bb56:	2200      	movs	r2, #0
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	f000 fb46 	bl	800c1ea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b088      	sub	sp, #32
 800bb6c:	af04      	add	r7, sp, #16
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	4611      	mov	r1, r2
 800bb74:	461a      	mov	r2, r3
 800bb76:	460b      	mov	r3, r1
 800bb78:	80fb      	strh	r3, [r7, #6]
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d001      	beq.n	800bb8c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bb8c:	7979      	ldrb	r1, [r7, #5]
 800bb8e:	7e3b      	ldrb	r3, [r7, #24]
 800bb90:	9303      	str	r3, [sp, #12]
 800bb92:	88fb      	ldrh	r3, [r7, #6]
 800bb94:	9302      	str	r3, [sp, #8]
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	9301      	str	r3, [sp, #4]
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	2300      	movs	r3, #0
 800bba0:	2200      	movs	r2, #0
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f000 fb21 	bl	800c1ea <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b088      	sub	sp, #32
 800bbb6:	af04      	add	r7, sp, #16
 800bbb8:	60f8      	str	r0, [r7, #12]
 800bbba:	60b9      	str	r1, [r7, #8]
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	80fb      	strh	r3, [r7, #6]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bbc8:	7979      	ldrb	r1, [r7, #5]
 800bbca:	2300      	movs	r3, #0
 800bbcc:	9303      	str	r3, [sp, #12]
 800bbce:	88fb      	ldrh	r3, [r7, #6]
 800bbd0:	9302      	str	r3, [sp, #8]
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	9301      	str	r3, [sp, #4]
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	2300      	movs	r3, #0
 800bbdc:	2201      	movs	r2, #1
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	f000 fb03 	bl	800c1ea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bbe4:	2300      	movs	r3, #0

}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b088      	sub	sp, #32
 800bbf2:	af04      	add	r7, sp, #16
 800bbf4:	60f8      	str	r0, [r7, #12]
 800bbf6:	60b9      	str	r1, [r7, #8]
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	80fb      	strh	r3, [r7, #6]
 800bc00:	4613      	mov	r3, r2
 800bc02:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d001      	beq.n	800bc12 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc12:	7979      	ldrb	r1, [r7, #5]
 800bc14:	7e3b      	ldrb	r3, [r7, #24]
 800bc16:	9303      	str	r3, [sp, #12]
 800bc18:	88fb      	ldrh	r3, [r7, #6]
 800bc1a:	9302      	str	r3, [sp, #8]
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	9301      	str	r3, [sp, #4]
 800bc20:	2301      	movs	r3, #1
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	2302      	movs	r3, #2
 800bc26:	2200      	movs	r2, #0
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f000 fade 	bl	800c1ea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b088      	sub	sp, #32
 800bc3c:	af04      	add	r7, sp, #16
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	4611      	mov	r1, r2
 800bc44:	461a      	mov	r2, r3
 800bc46:	460b      	mov	r3, r1
 800bc48:	80fb      	strh	r3, [r7, #6]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800bc4e:	7979      	ldrb	r1, [r7, #5]
 800bc50:	2300      	movs	r3, #0
 800bc52:	9303      	str	r3, [sp, #12]
 800bc54:	88fb      	ldrh	r3, [r7, #6]
 800bc56:	9302      	str	r3, [sp, #8]
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	9301      	str	r3, [sp, #4]
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	9300      	str	r3, [sp, #0]
 800bc60:	2302      	movs	r3, #2
 800bc62:	2201      	movs	r2, #1
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f000 fac0 	bl	800c1ea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3710      	adds	r7, #16
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b086      	sub	sp, #24
 800bc78:	af04      	add	r7, sp, #16
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	4608      	mov	r0, r1
 800bc7e:	4611      	mov	r1, r2
 800bc80:	461a      	mov	r2, r3
 800bc82:	4603      	mov	r3, r0
 800bc84:	70fb      	strb	r3, [r7, #3]
 800bc86:	460b      	mov	r3, r1
 800bc88:	70bb      	strb	r3, [r7, #2]
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bc8e:	7878      	ldrb	r0, [r7, #1]
 800bc90:	78ba      	ldrb	r2, [r7, #2]
 800bc92:	78f9      	ldrb	r1, [r7, #3]
 800bc94:	8b3b      	ldrh	r3, [r7, #24]
 800bc96:	9302      	str	r3, [sp, #8]
 800bc98:	7d3b      	ldrb	r3, [r7, #20]
 800bc9a:	9301      	str	r3, [sp, #4]
 800bc9c:	7c3b      	ldrb	r3, [r7, #16]
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	4603      	mov	r3, r0
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 fa53 	bl	800c14e <USBH_LL_OpenPipe>

  return USBH_OK;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3708      	adds	r7, #8
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b082      	sub	sp, #8
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
 800bcba:	460b      	mov	r3, r1
 800bcbc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800bcbe:	78fb      	ldrb	r3, [r7, #3]
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fa72 	bl	800c1ac <USBH_LL_ClosePipe>

  return USBH_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3708      	adds	r7, #8
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b084      	sub	sp, #16
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f836 	bl	800bd50 <USBH_GetFreePipe>
 800bce4:	4603      	mov	r3, r0
 800bce6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bce8:	89fb      	ldrh	r3, [r7, #14]
 800bcea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d00a      	beq.n	800bd08 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800bcf2:	78fa      	ldrb	r2, [r7, #3]
 800bcf4:	89fb      	ldrh	r3, [r7, #14]
 800bcf6:	f003 030f 	and.w	r3, r3, #15
 800bcfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bcfe:	6879      	ldr	r1, [r7, #4]
 800bd00:	33e0      	adds	r3, #224	; 0xe0
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	440b      	add	r3, r1
 800bd06:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bd08:	89fb      	ldrh	r3, [r7, #14]
 800bd0a:	b2db      	uxtb	r3, r3
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800bd20:	78fb      	ldrb	r3, [r7, #3]
 800bd22:	2b0a      	cmp	r3, #10
 800bd24:	d80d      	bhi.n	800bd42 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bd26:	78fb      	ldrb	r3, [r7, #3]
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	33e0      	adds	r3, #224	; 0xe0
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	685a      	ldr	r2, [r3, #4]
 800bd32:	78fb      	ldrb	r3, [r7, #3]
 800bd34:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bd38:	6879      	ldr	r1, [r7, #4]
 800bd3a:	33e0      	adds	r3, #224	; 0xe0
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	440b      	add	r3, r1
 800bd40:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	73fb      	strb	r3, [r7, #15]
 800bd60:	e00f      	b.n	800bd82 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bd62:	7bfb      	ldrb	r3, [r7, #15]
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	33e0      	adds	r3, #224	; 0xe0
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	4413      	add	r3, r2
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d102      	bne.n	800bd7c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bd76:	7bfb      	ldrb	r3, [r7, #15]
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	e007      	b.n	800bd8c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800bd7c:	7bfb      	ldrb	r3, [r7, #15]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	73fb      	strb	r3, [r7, #15]
 800bd82:	7bfb      	ldrb	r3, [r7, #15]
 800bd84:	2b0a      	cmp	r3, #10
 800bd86:	d9ec      	bls.n	800bd62 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bd88:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	490e      	ldr	r1, [pc, #56]	; (800bdd8 <MX_USB_HOST_Init+0x40>)
 800bda0:	480e      	ldr	r0, [pc, #56]	; (800bddc <MX_USB_HOST_Init+0x44>)
 800bda2:	f7fe fca1 	bl	800a6e8 <USBH_Init>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d001      	beq.n	800bdb0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bdac:	f7f6 fb6e 	bl	800248c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bdb0:	490b      	ldr	r1, [pc, #44]	; (800bde0 <MX_USB_HOST_Init+0x48>)
 800bdb2:	480a      	ldr	r0, [pc, #40]	; (800bddc <MX_USB_HOST_Init+0x44>)
 800bdb4:	f7fe fd26 	bl	800a804 <USBH_RegisterClass>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d001      	beq.n	800bdc2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bdbe:	f7f6 fb65 	bl	800248c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bdc2:	4806      	ldr	r0, [pc, #24]	; (800bddc <MX_USB_HOST_Init+0x44>)
 800bdc4:	f7fe fdaa 	bl	800a91c <USBH_Start>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d001      	beq.n	800bdd2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bdce:	f7f6 fb5d 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bdd2:	bf00      	nop
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	0800bdf9 	.word	0x0800bdf9
 800bddc:	20000430 	.word	0x20000430
 800bde0:	200000b0 	.word	0x200000b0

0800bde4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800bde8:	4802      	ldr	r0, [pc, #8]	; (800bdf4 <MX_USB_HOST_Process+0x10>)
 800bdea:	f7fe fda7 	bl	800a93c <USBH_Process>
}
 800bdee:	bf00      	nop
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	20000430 	.word	0x20000430

0800bdf8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	460b      	mov	r3, r1
 800be02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800be04:	78fb      	ldrb	r3, [r7, #3]
 800be06:	3b01      	subs	r3, #1
 800be08:	2b04      	cmp	r3, #4
 800be0a:	d819      	bhi.n	800be40 <USBH_UserProcess+0x48>
 800be0c:	a201      	add	r2, pc, #4	; (adr r2, 800be14 <USBH_UserProcess+0x1c>)
 800be0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be12:	bf00      	nop
 800be14:	0800be41 	.word	0x0800be41
 800be18:	0800be31 	.word	0x0800be31
 800be1c:	0800be41 	.word	0x0800be41
 800be20:	0800be39 	.word	0x0800be39
 800be24:	0800be29 	.word	0x0800be29
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800be28:	4b09      	ldr	r3, [pc, #36]	; (800be50 <USBH_UserProcess+0x58>)
 800be2a:	2203      	movs	r2, #3
 800be2c:	701a      	strb	r2, [r3, #0]
  break;
 800be2e:	e008      	b.n	800be42 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800be30:	4b07      	ldr	r3, [pc, #28]	; (800be50 <USBH_UserProcess+0x58>)
 800be32:	2202      	movs	r2, #2
 800be34:	701a      	strb	r2, [r3, #0]
  break;
 800be36:	e004      	b.n	800be42 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800be38:	4b05      	ldr	r3, [pc, #20]	; (800be50 <USBH_UserProcess+0x58>)
 800be3a:	2201      	movs	r2, #1
 800be3c:	701a      	strb	r2, [r3, #0]
  break;
 800be3e:	e000      	b.n	800be42 <USBH_UserProcess+0x4a>

  default:
  break;
 800be40:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800be42:	bf00      	nop
 800be44:	370c      	adds	r7, #12
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	20000164 	.word	0x20000164

0800be54 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b08a      	sub	sp, #40	; 0x28
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be5c:	f107 0314 	add.w	r3, r7, #20
 800be60:	2200      	movs	r2, #0
 800be62:	601a      	str	r2, [r3, #0]
 800be64:	605a      	str	r2, [r3, #4]
 800be66:	609a      	str	r2, [r3, #8]
 800be68:	60da      	str	r2, [r3, #12]
 800be6a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be74:	d147      	bne.n	800bf06 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be76:	2300      	movs	r3, #0
 800be78:	613b      	str	r3, [r7, #16]
 800be7a:	4b25      	ldr	r3, [pc, #148]	; (800bf10 <HAL_HCD_MspInit+0xbc>)
 800be7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be7e:	4a24      	ldr	r2, [pc, #144]	; (800bf10 <HAL_HCD_MspInit+0xbc>)
 800be80:	f043 0301 	orr.w	r3, r3, #1
 800be84:	6313      	str	r3, [r2, #48]	; 0x30
 800be86:	4b22      	ldr	r3, [pc, #136]	; (800bf10 <HAL_HCD_MspInit+0xbc>)
 800be88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be8a:	f003 0301 	and.w	r3, r3, #1
 800be8e:	613b      	str	r3, [r7, #16]
 800be90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800be92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800be98:	2300      	movs	r3, #0
 800be9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be9c:	2300      	movs	r3, #0
 800be9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bea0:	f107 0314 	add.w	r3, r7, #20
 800bea4:	4619      	mov	r1, r3
 800bea6:	481b      	ldr	r0, [pc, #108]	; (800bf14 <HAL_HCD_MspInit+0xc0>)
 800bea8:	f7f7 fb82 	bl	80035b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800beac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800beb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800beb2:	2302      	movs	r3, #2
 800beb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800beb6:	2300      	movs	r3, #0
 800beb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800beba:	2300      	movs	r3, #0
 800bebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bebe:	230a      	movs	r3, #10
 800bec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bec2:	f107 0314 	add.w	r3, r7, #20
 800bec6:	4619      	mov	r1, r3
 800bec8:	4812      	ldr	r0, [pc, #72]	; (800bf14 <HAL_HCD_MspInit+0xc0>)
 800beca:	f7f7 fb71 	bl	80035b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bece:	4b10      	ldr	r3, [pc, #64]	; (800bf10 <HAL_HCD_MspInit+0xbc>)
 800bed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bed2:	4a0f      	ldr	r2, [pc, #60]	; (800bf10 <HAL_HCD_MspInit+0xbc>)
 800bed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bed8:	6353      	str	r3, [r2, #52]	; 0x34
 800beda:	2300      	movs	r3, #0
 800bedc:	60fb      	str	r3, [r7, #12]
 800bede:	4b0c      	ldr	r3, [pc, #48]	; (800bf10 <HAL_HCD_MspInit+0xbc>)
 800bee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bee2:	4a0b      	ldr	r2, [pc, #44]	; (800bf10 <HAL_HCD_MspInit+0xbc>)
 800bee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bee8:	6453      	str	r3, [r2, #68]	; 0x44
 800beea:	4b09      	ldr	r3, [pc, #36]	; (800bf10 <HAL_HCD_MspInit+0xbc>)
 800beec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bef2:	60fb      	str	r3, [r7, #12]
 800bef4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bef6:	2200      	movs	r2, #0
 800bef8:	2100      	movs	r1, #0
 800befa:	2043      	movs	r0, #67	; 0x43
 800befc:	f7f7 fb21 	bl	8003542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bf00:	2043      	movs	r0, #67	; 0x43
 800bf02:	f7f7 fb3a 	bl	800357a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf06:	bf00      	nop
 800bf08:	3728      	adds	r7, #40	; 0x28
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	40023800 	.word	0x40023800
 800bf14:	40020000 	.word	0x40020000

0800bf18 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7ff f8db 	bl	800b0e2 <USBH_LL_IncTimer>
}
 800bf2c:	bf00      	nop
 800bf2e:	3708      	adds	r7, #8
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7ff f913 	bl	800b16e <USBH_LL_Connect>
}
 800bf48:	bf00      	nop
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7ff f91c 	bl	800b19c <USBH_LL_Disconnect>
}
 800bf64:	bf00      	nop
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	460b      	mov	r3, r1
 800bf76:	70fb      	strb	r3, [r7, #3]
 800bf78:	4613      	mov	r3, r2
 800bf7a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bf7c:	bf00      	nop
 800bf7e:	370c      	adds	r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7ff f8cd 	bl	800b136 <USBH_LL_PortEnabled>
}
 800bf9c:	bf00      	nop
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff f8cd 	bl	800b152 <USBH_LL_PortDisabled>
}
 800bfb8:	bf00      	nop
 800bfba:	3708      	adds	r7, #8
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d12a      	bne.n	800c028 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bfd2:	4a18      	ldr	r2, [pc, #96]	; (800c034 <USBH_LL_Init+0x74>)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4a15      	ldr	r2, [pc, #84]	; (800c034 <USBH_LL_Init+0x74>)
 800bfde:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bfe2:	4b14      	ldr	r3, [pc, #80]	; (800c034 <USBH_LL_Init+0x74>)
 800bfe4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bfe8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bfea:	4b12      	ldr	r3, [pc, #72]	; (800c034 <USBH_LL_Init+0x74>)
 800bfec:	2208      	movs	r2, #8
 800bfee:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bff0:	4b10      	ldr	r3, [pc, #64]	; (800c034 <USBH_LL_Init+0x74>)
 800bff2:	2201      	movs	r2, #1
 800bff4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bff6:	4b0f      	ldr	r3, [pc, #60]	; (800c034 <USBH_LL_Init+0x74>)
 800bff8:	2200      	movs	r2, #0
 800bffa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bffc:	4b0d      	ldr	r3, [pc, #52]	; (800c034 <USBH_LL_Init+0x74>)
 800bffe:	2202      	movs	r2, #2
 800c000:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c002:	4b0c      	ldr	r3, [pc, #48]	; (800c034 <USBH_LL_Init+0x74>)
 800c004:	2200      	movs	r2, #0
 800c006:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c008:	480a      	ldr	r0, [pc, #40]	; (800c034 <USBH_LL_Init+0x74>)
 800c00a:	f7f7 fcb8 	bl	800397e <HAL_HCD_Init>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c014:	f7f6 fa3a 	bl	800248c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c018:	4806      	ldr	r0, [pc, #24]	; (800c034 <USBH_LL_Init+0x74>)
 800c01a:	f7f8 f895 	bl	8004148 <HAL_HCD_GetCurrentFrame>
 800c01e:	4603      	mov	r3, r0
 800c020:	4619      	mov	r1, r3
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f7ff f84e 	bl	800b0c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	20000808 	.word	0x20000808

0800c038 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c040:	2300      	movs	r3, #0
 800c042:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c044:	2300      	movs	r3, #0
 800c046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c04e:	4618      	mov	r0, r3
 800c050:	f7f8 f804 	bl	800405c <HAL_HCD_Start>
 800c054:	4603      	mov	r3, r0
 800c056:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c058:	7bfb      	ldrb	r3, [r7, #15]
 800c05a:	4618      	mov	r0, r3
 800c05c:	f000 f95c 	bl	800c318 <USBH_Get_USB_Status>
 800c060:	4603      	mov	r3, r0
 800c062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c064:	7bbb      	ldrb	r3, [r7, #14]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b084      	sub	sp, #16
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c076:	2300      	movs	r3, #0
 800c078:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c084:	4618      	mov	r0, r3
 800c086:	f7f8 f80c 	bl	80040a2 <HAL_HCD_Stop>
 800c08a:	4603      	mov	r3, r0
 800c08c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c08e:	7bfb      	ldrb	r3, [r7, #15]
 800c090:	4618      	mov	r0, r3
 800c092:	f000 f941 	bl	800c318 <USBH_Get_USB_Status>
 800c096:	4603      	mov	r3, r0
 800c098:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c09a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7f8 f854 	bl	8004164 <HAL_HCD_GetCurrentSpeed>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b02      	cmp	r3, #2
 800c0c0:	d00c      	beq.n	800c0dc <USBH_LL_GetSpeed+0x38>
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	d80d      	bhi.n	800c0e2 <USBH_LL_GetSpeed+0x3e>
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d002      	beq.n	800c0d0 <USBH_LL_GetSpeed+0x2c>
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d003      	beq.n	800c0d6 <USBH_LL_GetSpeed+0x32>
 800c0ce:	e008      	b.n	800c0e2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c0d4:	e008      	b.n	800c0e8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	73fb      	strb	r3, [r7, #15]
    break;
 800c0da:	e005      	b.n	800c0e8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c0dc:	2302      	movs	r3, #2
 800c0de:	73fb      	strb	r3, [r7, #15]
    break;
 800c0e0:	e002      	b.n	800c0e8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	73fb      	strb	r3, [r7, #15]
    break;
 800c0e6:	bf00      	nop
  }
  return  speed;
 800c0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3710      	adds	r7, #16
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b084      	sub	sp, #16
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c0fe:	2300      	movs	r3, #0
 800c100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c108:	4618      	mov	r0, r3
 800c10a:	f7f7 ffe7 	bl	80040dc <HAL_HCD_ResetPort>
 800c10e:	4603      	mov	r3, r0
 800c110:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c112:	7bfb      	ldrb	r3, [r7, #15]
 800c114:	4618      	mov	r0, r3
 800c116:	f000 f8ff 	bl	800c318 <USBH_Get_USB_Status>
 800c11a:	4603      	mov	r3, r0
 800c11c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c11e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c120:	4618      	mov	r0, r3
 800c122:	3710      	adds	r7, #16
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	460b      	mov	r3, r1
 800c132:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c13a:	78fa      	ldrb	r2, [r7, #3]
 800c13c:	4611      	mov	r1, r2
 800c13e:	4618      	mov	r0, r3
 800c140:	f7f7 ffee 	bl	8004120 <HAL_HCD_HC_GetXferCount>
 800c144:	4603      	mov	r3, r0
}
 800c146:	4618      	mov	r0, r3
 800c148:	3708      	adds	r7, #8
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c14e:	b590      	push	{r4, r7, lr}
 800c150:	b089      	sub	sp, #36	; 0x24
 800c152:	af04      	add	r7, sp, #16
 800c154:	6078      	str	r0, [r7, #4]
 800c156:	4608      	mov	r0, r1
 800c158:	4611      	mov	r1, r2
 800c15a:	461a      	mov	r2, r3
 800c15c:	4603      	mov	r3, r0
 800c15e:	70fb      	strb	r3, [r7, #3]
 800c160:	460b      	mov	r3, r1
 800c162:	70bb      	strb	r3, [r7, #2]
 800c164:	4613      	mov	r3, r2
 800c166:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c168:	2300      	movs	r3, #0
 800c16a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c16c:	2300      	movs	r3, #0
 800c16e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c176:	787c      	ldrb	r4, [r7, #1]
 800c178:	78ba      	ldrb	r2, [r7, #2]
 800c17a:	78f9      	ldrb	r1, [r7, #3]
 800c17c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c17e:	9302      	str	r3, [sp, #8]
 800c180:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c184:	9301      	str	r3, [sp, #4]
 800c186:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c18a:	9300      	str	r3, [sp, #0]
 800c18c:	4623      	mov	r3, r4
 800c18e:	f7f7 fc58 	bl	8003a42 <HAL_HCD_HC_Init>
 800c192:	4603      	mov	r3, r0
 800c194:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c196:	7bfb      	ldrb	r3, [r7, #15]
 800c198:	4618      	mov	r0, r3
 800c19a:	f000 f8bd 	bl	800c318 <USBH_Get_USB_Status>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3714      	adds	r7, #20
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd90      	pop	{r4, r7, pc}

0800c1ac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c1c6:	78fa      	ldrb	r2, [r7, #3]
 800c1c8:	4611      	mov	r1, r2
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7f7 fcc8 	bl	8003b60 <HAL_HCD_HC_Halt>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f000 f89e 	bl	800c318 <USBH_Get_USB_Status>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c1ea:	b590      	push	{r4, r7, lr}
 800c1ec:	b089      	sub	sp, #36	; 0x24
 800c1ee:	af04      	add	r7, sp, #16
 800c1f0:	6078      	str	r0, [r7, #4]
 800c1f2:	4608      	mov	r0, r1
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	70fb      	strb	r3, [r7, #3]
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	70bb      	strb	r3, [r7, #2]
 800c200:	4613      	mov	r3, r2
 800c202:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c204:	2300      	movs	r3, #0
 800c206:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c208:	2300      	movs	r3, #0
 800c20a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c212:	787c      	ldrb	r4, [r7, #1]
 800c214:	78ba      	ldrb	r2, [r7, #2]
 800c216:	78f9      	ldrb	r1, [r7, #3]
 800c218:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c21c:	9303      	str	r3, [sp, #12]
 800c21e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c220:	9302      	str	r3, [sp, #8]
 800c222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c224:	9301      	str	r3, [sp, #4]
 800c226:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	4623      	mov	r3, r4
 800c22e:	f7f7 fcbb 	bl	8003ba8 <HAL_HCD_HC_SubmitRequest>
 800c232:	4603      	mov	r3, r0
 800c234:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c236:	7bfb      	ldrb	r3, [r7, #15]
 800c238:	4618      	mov	r0, r3
 800c23a:	f000 f86d 	bl	800c318 <USBH_Get_USB_Status>
 800c23e:	4603      	mov	r3, r0
 800c240:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c242:	7bbb      	ldrb	r3, [r7, #14]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3714      	adds	r7, #20
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd90      	pop	{r4, r7, pc}

0800c24c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	460b      	mov	r3, r1
 800c256:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c25e:	78fa      	ldrb	r2, [r7, #3]
 800c260:	4611      	mov	r1, r2
 800c262:	4618      	mov	r0, r3
 800c264:	f7f7 ff48 	bl	80040f8 <HAL_HCD_HC_GetURBState>
 800c268:	4603      	mov	r3, r0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3708      	adds	r7, #8
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b082      	sub	sp, #8
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	460b      	mov	r3, r1
 800c27c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c284:	2b01      	cmp	r3, #1
 800c286:	d103      	bne.n	800c290 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c288:	78fb      	ldrb	r3, [r7, #3]
 800c28a:	4618      	mov	r0, r3
 800c28c:	f000 f870 	bl	800c370 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c290:	20c8      	movs	r0, #200	; 0xc8
 800c292:	f7f7 f857 	bl	8003344 <HAL_Delay>
  return USBH_OK;
 800c296:	2300      	movs	r3, #0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b085      	sub	sp, #20
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	70fb      	strb	r3, [r7, #3]
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c2b6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c2b8:	78fb      	ldrb	r3, [r7, #3]
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	212c      	movs	r1, #44	; 0x2c
 800c2be:	fb01 f303 	mul.w	r3, r1, r3
 800c2c2:	4413      	add	r3, r2
 800c2c4:	333b      	adds	r3, #59	; 0x3b
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d009      	beq.n	800c2e0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c2cc:	78fb      	ldrb	r3, [r7, #3]
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	212c      	movs	r1, #44	; 0x2c
 800c2d2:	fb01 f303 	mul.w	r3, r1, r3
 800c2d6:	4413      	add	r3, r2
 800c2d8:	3354      	adds	r3, #84	; 0x54
 800c2da:	78ba      	ldrb	r2, [r7, #2]
 800c2dc:	701a      	strb	r2, [r3, #0]
 800c2de:	e008      	b.n	800c2f2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c2e0:	78fb      	ldrb	r3, [r7, #3]
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	212c      	movs	r1, #44	; 0x2c
 800c2e6:	fb01 f303 	mul.w	r3, r1, r3
 800c2ea:	4413      	add	r3, r2
 800c2ec:	3355      	adds	r3, #85	; 0x55
 800c2ee:	78ba      	ldrb	r2, [r7, #2]
 800c2f0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3714      	adds	r7, #20
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f7f7 f81b 	bl	8003344 <HAL_Delay>
}
 800c30e:	bf00      	nop
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
	...

0800c318 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	4603      	mov	r3, r0
 800c320:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c322:	2300      	movs	r3, #0
 800c324:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c326:	79fb      	ldrb	r3, [r7, #7]
 800c328:	2b03      	cmp	r3, #3
 800c32a:	d817      	bhi.n	800c35c <USBH_Get_USB_Status+0x44>
 800c32c:	a201      	add	r2, pc, #4	; (adr r2, 800c334 <USBH_Get_USB_Status+0x1c>)
 800c32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c332:	bf00      	nop
 800c334:	0800c345 	.word	0x0800c345
 800c338:	0800c34b 	.word	0x0800c34b
 800c33c:	0800c351 	.word	0x0800c351
 800c340:	0800c357 	.word	0x0800c357
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c344:	2300      	movs	r3, #0
 800c346:	73fb      	strb	r3, [r7, #15]
    break;
 800c348:	e00b      	b.n	800c362 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c34a:	2302      	movs	r3, #2
 800c34c:	73fb      	strb	r3, [r7, #15]
    break;
 800c34e:	e008      	b.n	800c362 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c350:	2301      	movs	r3, #1
 800c352:	73fb      	strb	r3, [r7, #15]
    break;
 800c354:	e005      	b.n	800c362 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c356:	2302      	movs	r3, #2
 800c358:	73fb      	strb	r3, [r7, #15]
    break;
 800c35a:	e002      	b.n	800c362 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c35c:	2302      	movs	r3, #2
 800c35e:	73fb      	strb	r3, [r7, #15]
    break;
 800c360:	bf00      	nop
  }
  return usb_status;
 800c362:	7bfb      	ldrb	r3, [r7, #15]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3714      	adds	r7, #20
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	4603      	mov	r3, r0
 800c378:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c37a:	79fb      	ldrb	r3, [r7, #7]
 800c37c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c37e:	79fb      	ldrb	r3, [r7, #7]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d102      	bne.n	800c38a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c384:	2301      	movs	r3, #1
 800c386:	73fb      	strb	r3, [r7, #15]
 800c388:	e001      	b.n	800c38e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c38a:	2300      	movs	r3, #0
 800c38c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c38e:	7bfb      	ldrb	r3, [r7, #15]
 800c390:	461a      	mov	r2, r3
 800c392:	2101      	movs	r1, #1
 800c394:	4803      	ldr	r0, [pc, #12]	; (800c3a4 <MX_DriverVbusFS+0x34>)
 800c396:	f7f7 fabf 	bl	8003918 <HAL_GPIO_WritePin>
}
 800c39a:	bf00      	nop
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	40020800 	.word	0x40020800

0800c3a8 <__errno>:
 800c3a8:	4b01      	ldr	r3, [pc, #4]	; (800c3b0 <__errno+0x8>)
 800c3aa:	6818      	ldr	r0, [r3, #0]
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop
 800c3b0:	200000d0 	.word	0x200000d0

0800c3b4 <__libc_init_array>:
 800c3b4:	b570      	push	{r4, r5, r6, lr}
 800c3b6:	4d0d      	ldr	r5, [pc, #52]	; (800c3ec <__libc_init_array+0x38>)
 800c3b8:	4c0d      	ldr	r4, [pc, #52]	; (800c3f0 <__libc_init_array+0x3c>)
 800c3ba:	1b64      	subs	r4, r4, r5
 800c3bc:	10a4      	asrs	r4, r4, #2
 800c3be:	2600      	movs	r6, #0
 800c3c0:	42a6      	cmp	r6, r4
 800c3c2:	d109      	bne.n	800c3d8 <__libc_init_array+0x24>
 800c3c4:	4d0b      	ldr	r5, [pc, #44]	; (800c3f4 <__libc_init_array+0x40>)
 800c3c6:	4c0c      	ldr	r4, [pc, #48]	; (800c3f8 <__libc_init_array+0x44>)
 800c3c8:	f000 fc58 	bl	800cc7c <_init>
 800c3cc:	1b64      	subs	r4, r4, r5
 800c3ce:	10a4      	asrs	r4, r4, #2
 800c3d0:	2600      	movs	r6, #0
 800c3d2:	42a6      	cmp	r6, r4
 800c3d4:	d105      	bne.n	800c3e2 <__libc_init_array+0x2e>
 800c3d6:	bd70      	pop	{r4, r5, r6, pc}
 800c3d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3dc:	4798      	blx	r3
 800c3de:	3601      	adds	r6, #1
 800c3e0:	e7ee      	b.n	800c3c0 <__libc_init_array+0xc>
 800c3e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3e6:	4798      	blx	r3
 800c3e8:	3601      	adds	r6, #1
 800c3ea:	e7f2      	b.n	800c3d2 <__libc_init_array+0x1e>
 800c3ec:	0800cd30 	.word	0x0800cd30
 800c3f0:	0800cd30 	.word	0x0800cd30
 800c3f4:	0800cd30 	.word	0x0800cd30
 800c3f8:	0800cd34 	.word	0x0800cd34

0800c3fc <malloc>:
 800c3fc:	4b02      	ldr	r3, [pc, #8]	; (800c408 <malloc+0xc>)
 800c3fe:	4601      	mov	r1, r0
 800c400:	6818      	ldr	r0, [r3, #0]
 800c402:	f000 b863 	b.w	800c4cc <_malloc_r>
 800c406:	bf00      	nop
 800c408:	200000d0 	.word	0x200000d0

0800c40c <free>:
 800c40c:	4b02      	ldr	r3, [pc, #8]	; (800c418 <free+0xc>)
 800c40e:	4601      	mov	r1, r0
 800c410:	6818      	ldr	r0, [r3, #0]
 800c412:	f000 b80b 	b.w	800c42c <_free_r>
 800c416:	bf00      	nop
 800c418:	200000d0 	.word	0x200000d0

0800c41c <memset>:
 800c41c:	4402      	add	r2, r0
 800c41e:	4603      	mov	r3, r0
 800c420:	4293      	cmp	r3, r2
 800c422:	d100      	bne.n	800c426 <memset+0xa>
 800c424:	4770      	bx	lr
 800c426:	f803 1b01 	strb.w	r1, [r3], #1
 800c42a:	e7f9      	b.n	800c420 <memset+0x4>

0800c42c <_free_r>:
 800c42c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c42e:	2900      	cmp	r1, #0
 800c430:	d048      	beq.n	800c4c4 <_free_r+0x98>
 800c432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c436:	9001      	str	r0, [sp, #4]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f1a1 0404 	sub.w	r4, r1, #4
 800c43e:	bfb8      	it	lt
 800c440:	18e4      	addlt	r4, r4, r3
 800c442:	f000 f8ad 	bl	800c5a0 <__malloc_lock>
 800c446:	4a20      	ldr	r2, [pc, #128]	; (800c4c8 <_free_r+0x9c>)
 800c448:	9801      	ldr	r0, [sp, #4]
 800c44a:	6813      	ldr	r3, [r2, #0]
 800c44c:	4615      	mov	r5, r2
 800c44e:	b933      	cbnz	r3, 800c45e <_free_r+0x32>
 800c450:	6063      	str	r3, [r4, #4]
 800c452:	6014      	str	r4, [r2, #0]
 800c454:	b003      	add	sp, #12
 800c456:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c45a:	f000 b8a7 	b.w	800c5ac <__malloc_unlock>
 800c45e:	42a3      	cmp	r3, r4
 800c460:	d90b      	bls.n	800c47a <_free_r+0x4e>
 800c462:	6821      	ldr	r1, [r4, #0]
 800c464:	1862      	adds	r2, r4, r1
 800c466:	4293      	cmp	r3, r2
 800c468:	bf04      	itt	eq
 800c46a:	681a      	ldreq	r2, [r3, #0]
 800c46c:	685b      	ldreq	r3, [r3, #4]
 800c46e:	6063      	str	r3, [r4, #4]
 800c470:	bf04      	itt	eq
 800c472:	1852      	addeq	r2, r2, r1
 800c474:	6022      	streq	r2, [r4, #0]
 800c476:	602c      	str	r4, [r5, #0]
 800c478:	e7ec      	b.n	800c454 <_free_r+0x28>
 800c47a:	461a      	mov	r2, r3
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	b10b      	cbz	r3, 800c484 <_free_r+0x58>
 800c480:	42a3      	cmp	r3, r4
 800c482:	d9fa      	bls.n	800c47a <_free_r+0x4e>
 800c484:	6811      	ldr	r1, [r2, #0]
 800c486:	1855      	adds	r5, r2, r1
 800c488:	42a5      	cmp	r5, r4
 800c48a:	d10b      	bne.n	800c4a4 <_free_r+0x78>
 800c48c:	6824      	ldr	r4, [r4, #0]
 800c48e:	4421      	add	r1, r4
 800c490:	1854      	adds	r4, r2, r1
 800c492:	42a3      	cmp	r3, r4
 800c494:	6011      	str	r1, [r2, #0]
 800c496:	d1dd      	bne.n	800c454 <_free_r+0x28>
 800c498:	681c      	ldr	r4, [r3, #0]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	6053      	str	r3, [r2, #4]
 800c49e:	4421      	add	r1, r4
 800c4a0:	6011      	str	r1, [r2, #0]
 800c4a2:	e7d7      	b.n	800c454 <_free_r+0x28>
 800c4a4:	d902      	bls.n	800c4ac <_free_r+0x80>
 800c4a6:	230c      	movs	r3, #12
 800c4a8:	6003      	str	r3, [r0, #0]
 800c4aa:	e7d3      	b.n	800c454 <_free_r+0x28>
 800c4ac:	6825      	ldr	r5, [r4, #0]
 800c4ae:	1961      	adds	r1, r4, r5
 800c4b0:	428b      	cmp	r3, r1
 800c4b2:	bf04      	itt	eq
 800c4b4:	6819      	ldreq	r1, [r3, #0]
 800c4b6:	685b      	ldreq	r3, [r3, #4]
 800c4b8:	6063      	str	r3, [r4, #4]
 800c4ba:	bf04      	itt	eq
 800c4bc:	1949      	addeq	r1, r1, r5
 800c4be:	6021      	streq	r1, [r4, #0]
 800c4c0:	6054      	str	r4, [r2, #4]
 800c4c2:	e7c7      	b.n	800c454 <_free_r+0x28>
 800c4c4:	b003      	add	sp, #12
 800c4c6:	bd30      	pop	{r4, r5, pc}
 800c4c8:	20000168 	.word	0x20000168

0800c4cc <_malloc_r>:
 800c4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ce:	1ccd      	adds	r5, r1, #3
 800c4d0:	f025 0503 	bic.w	r5, r5, #3
 800c4d4:	3508      	adds	r5, #8
 800c4d6:	2d0c      	cmp	r5, #12
 800c4d8:	bf38      	it	cc
 800c4da:	250c      	movcc	r5, #12
 800c4dc:	2d00      	cmp	r5, #0
 800c4de:	4606      	mov	r6, r0
 800c4e0:	db01      	blt.n	800c4e6 <_malloc_r+0x1a>
 800c4e2:	42a9      	cmp	r1, r5
 800c4e4:	d903      	bls.n	800c4ee <_malloc_r+0x22>
 800c4e6:	230c      	movs	r3, #12
 800c4e8:	6033      	str	r3, [r6, #0]
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4ee:	f000 f857 	bl	800c5a0 <__malloc_lock>
 800c4f2:	4921      	ldr	r1, [pc, #132]	; (800c578 <_malloc_r+0xac>)
 800c4f4:	680a      	ldr	r2, [r1, #0]
 800c4f6:	4614      	mov	r4, r2
 800c4f8:	b99c      	cbnz	r4, 800c522 <_malloc_r+0x56>
 800c4fa:	4f20      	ldr	r7, [pc, #128]	; (800c57c <_malloc_r+0xb0>)
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	b923      	cbnz	r3, 800c50a <_malloc_r+0x3e>
 800c500:	4621      	mov	r1, r4
 800c502:	4630      	mov	r0, r6
 800c504:	f000 f83c 	bl	800c580 <_sbrk_r>
 800c508:	6038      	str	r0, [r7, #0]
 800c50a:	4629      	mov	r1, r5
 800c50c:	4630      	mov	r0, r6
 800c50e:	f000 f837 	bl	800c580 <_sbrk_r>
 800c512:	1c43      	adds	r3, r0, #1
 800c514:	d123      	bne.n	800c55e <_malloc_r+0x92>
 800c516:	230c      	movs	r3, #12
 800c518:	6033      	str	r3, [r6, #0]
 800c51a:	4630      	mov	r0, r6
 800c51c:	f000 f846 	bl	800c5ac <__malloc_unlock>
 800c520:	e7e3      	b.n	800c4ea <_malloc_r+0x1e>
 800c522:	6823      	ldr	r3, [r4, #0]
 800c524:	1b5b      	subs	r3, r3, r5
 800c526:	d417      	bmi.n	800c558 <_malloc_r+0x8c>
 800c528:	2b0b      	cmp	r3, #11
 800c52a:	d903      	bls.n	800c534 <_malloc_r+0x68>
 800c52c:	6023      	str	r3, [r4, #0]
 800c52e:	441c      	add	r4, r3
 800c530:	6025      	str	r5, [r4, #0]
 800c532:	e004      	b.n	800c53e <_malloc_r+0x72>
 800c534:	6863      	ldr	r3, [r4, #4]
 800c536:	42a2      	cmp	r2, r4
 800c538:	bf0c      	ite	eq
 800c53a:	600b      	streq	r3, [r1, #0]
 800c53c:	6053      	strne	r3, [r2, #4]
 800c53e:	4630      	mov	r0, r6
 800c540:	f000 f834 	bl	800c5ac <__malloc_unlock>
 800c544:	f104 000b 	add.w	r0, r4, #11
 800c548:	1d23      	adds	r3, r4, #4
 800c54a:	f020 0007 	bic.w	r0, r0, #7
 800c54e:	1ac2      	subs	r2, r0, r3
 800c550:	d0cc      	beq.n	800c4ec <_malloc_r+0x20>
 800c552:	1a1b      	subs	r3, r3, r0
 800c554:	50a3      	str	r3, [r4, r2]
 800c556:	e7c9      	b.n	800c4ec <_malloc_r+0x20>
 800c558:	4622      	mov	r2, r4
 800c55a:	6864      	ldr	r4, [r4, #4]
 800c55c:	e7cc      	b.n	800c4f8 <_malloc_r+0x2c>
 800c55e:	1cc4      	adds	r4, r0, #3
 800c560:	f024 0403 	bic.w	r4, r4, #3
 800c564:	42a0      	cmp	r0, r4
 800c566:	d0e3      	beq.n	800c530 <_malloc_r+0x64>
 800c568:	1a21      	subs	r1, r4, r0
 800c56a:	4630      	mov	r0, r6
 800c56c:	f000 f808 	bl	800c580 <_sbrk_r>
 800c570:	3001      	adds	r0, #1
 800c572:	d1dd      	bne.n	800c530 <_malloc_r+0x64>
 800c574:	e7cf      	b.n	800c516 <_malloc_r+0x4a>
 800c576:	bf00      	nop
 800c578:	20000168 	.word	0x20000168
 800c57c:	2000016c 	.word	0x2000016c

0800c580 <_sbrk_r>:
 800c580:	b538      	push	{r3, r4, r5, lr}
 800c582:	4d06      	ldr	r5, [pc, #24]	; (800c59c <_sbrk_r+0x1c>)
 800c584:	2300      	movs	r3, #0
 800c586:	4604      	mov	r4, r0
 800c588:	4608      	mov	r0, r1
 800c58a:	602b      	str	r3, [r5, #0]
 800c58c:	f7f6 fa5c 	bl	8002a48 <_sbrk>
 800c590:	1c43      	adds	r3, r0, #1
 800c592:	d102      	bne.n	800c59a <_sbrk_r+0x1a>
 800c594:	682b      	ldr	r3, [r5, #0]
 800c596:	b103      	cbz	r3, 800c59a <_sbrk_r+0x1a>
 800c598:	6023      	str	r3, [r4, #0]
 800c59a:	bd38      	pop	{r3, r4, r5, pc}
 800c59c:	20000b0c 	.word	0x20000b0c

0800c5a0 <__malloc_lock>:
 800c5a0:	4801      	ldr	r0, [pc, #4]	; (800c5a8 <__malloc_lock+0x8>)
 800c5a2:	f000 b809 	b.w	800c5b8 <__retarget_lock_acquire_recursive>
 800c5a6:	bf00      	nop
 800c5a8:	20000b14 	.word	0x20000b14

0800c5ac <__malloc_unlock>:
 800c5ac:	4801      	ldr	r0, [pc, #4]	; (800c5b4 <__malloc_unlock+0x8>)
 800c5ae:	f000 b804 	b.w	800c5ba <__retarget_lock_release_recursive>
 800c5b2:	bf00      	nop
 800c5b4:	20000b14 	.word	0x20000b14

0800c5b8 <__retarget_lock_acquire_recursive>:
 800c5b8:	4770      	bx	lr

0800c5ba <__retarget_lock_release_recursive>:
 800c5ba:	4770      	bx	lr
 800c5bc:	0000      	movs	r0, r0
	...

0800c5c0 <atan>:
 800c5c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c4:	ec55 4b10 	vmov	r4, r5, d0
 800c5c8:	4bc3      	ldr	r3, [pc, #780]	; (800c8d8 <atan+0x318>)
 800c5ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c5ce:	429e      	cmp	r6, r3
 800c5d0:	46ab      	mov	fp, r5
 800c5d2:	dd18      	ble.n	800c606 <atan+0x46>
 800c5d4:	4bc1      	ldr	r3, [pc, #772]	; (800c8dc <atan+0x31c>)
 800c5d6:	429e      	cmp	r6, r3
 800c5d8:	dc01      	bgt.n	800c5de <atan+0x1e>
 800c5da:	d109      	bne.n	800c5f0 <atan+0x30>
 800c5dc:	b144      	cbz	r4, 800c5f0 <atan+0x30>
 800c5de:	4622      	mov	r2, r4
 800c5e0:	462b      	mov	r3, r5
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	f7f3 fdf5 	bl	80001d4 <__adddf3>
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	460d      	mov	r5, r1
 800c5ee:	e006      	b.n	800c5fe <atan+0x3e>
 800c5f0:	f1bb 0f00 	cmp.w	fp, #0
 800c5f4:	f300 8131 	bgt.w	800c85a <atan+0x29a>
 800c5f8:	a59b      	add	r5, pc, #620	; (adr r5, 800c868 <atan+0x2a8>)
 800c5fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c5fe:	ec45 4b10 	vmov	d0, r4, r5
 800c602:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c606:	4bb6      	ldr	r3, [pc, #728]	; (800c8e0 <atan+0x320>)
 800c608:	429e      	cmp	r6, r3
 800c60a:	dc14      	bgt.n	800c636 <atan+0x76>
 800c60c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c610:	429e      	cmp	r6, r3
 800c612:	dc0d      	bgt.n	800c630 <atan+0x70>
 800c614:	a396      	add	r3, pc, #600	; (adr r3, 800c870 <atan+0x2b0>)
 800c616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61a:	ee10 0a10 	vmov	r0, s0
 800c61e:	4629      	mov	r1, r5
 800c620:	f7f3 fdd8 	bl	80001d4 <__adddf3>
 800c624:	4baf      	ldr	r3, [pc, #700]	; (800c8e4 <atan+0x324>)
 800c626:	2200      	movs	r2, #0
 800c628:	f7f4 fa1a 	bl	8000a60 <__aeabi_dcmpgt>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d1e6      	bne.n	800c5fe <atan+0x3e>
 800c630:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c634:	e02b      	b.n	800c68e <atan+0xce>
 800c636:	f000 f963 	bl	800c900 <fabs>
 800c63a:	4bab      	ldr	r3, [pc, #684]	; (800c8e8 <atan+0x328>)
 800c63c:	429e      	cmp	r6, r3
 800c63e:	ec55 4b10 	vmov	r4, r5, d0
 800c642:	f300 80bf 	bgt.w	800c7c4 <atan+0x204>
 800c646:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c64a:	429e      	cmp	r6, r3
 800c64c:	f300 80a0 	bgt.w	800c790 <atan+0x1d0>
 800c650:	ee10 2a10 	vmov	r2, s0
 800c654:	ee10 0a10 	vmov	r0, s0
 800c658:	462b      	mov	r3, r5
 800c65a:	4629      	mov	r1, r5
 800c65c:	f7f3 fdba 	bl	80001d4 <__adddf3>
 800c660:	4ba0      	ldr	r3, [pc, #640]	; (800c8e4 <atan+0x324>)
 800c662:	2200      	movs	r2, #0
 800c664:	f7f3 fdb4 	bl	80001d0 <__aeabi_dsub>
 800c668:	2200      	movs	r2, #0
 800c66a:	4606      	mov	r6, r0
 800c66c:	460f      	mov	r7, r1
 800c66e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c672:	4620      	mov	r0, r4
 800c674:	4629      	mov	r1, r5
 800c676:	f7f3 fdad 	bl	80001d4 <__adddf3>
 800c67a:	4602      	mov	r2, r0
 800c67c:	460b      	mov	r3, r1
 800c67e:	4630      	mov	r0, r6
 800c680:	4639      	mov	r1, r7
 800c682:	f7f4 f887 	bl	8000794 <__aeabi_ddiv>
 800c686:	f04f 0a00 	mov.w	sl, #0
 800c68a:	4604      	mov	r4, r0
 800c68c:	460d      	mov	r5, r1
 800c68e:	4622      	mov	r2, r4
 800c690:	462b      	mov	r3, r5
 800c692:	4620      	mov	r0, r4
 800c694:	4629      	mov	r1, r5
 800c696:	f7f3 ff53 	bl	8000540 <__aeabi_dmul>
 800c69a:	4602      	mov	r2, r0
 800c69c:	460b      	mov	r3, r1
 800c69e:	4680      	mov	r8, r0
 800c6a0:	4689      	mov	r9, r1
 800c6a2:	f7f3 ff4d 	bl	8000540 <__aeabi_dmul>
 800c6a6:	a374      	add	r3, pc, #464	; (adr r3, 800c878 <atan+0x2b8>)
 800c6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ac:	4606      	mov	r6, r0
 800c6ae:	460f      	mov	r7, r1
 800c6b0:	f7f3 ff46 	bl	8000540 <__aeabi_dmul>
 800c6b4:	a372      	add	r3, pc, #456	; (adr r3, 800c880 <atan+0x2c0>)
 800c6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ba:	f7f3 fd8b 	bl	80001d4 <__adddf3>
 800c6be:	4632      	mov	r2, r6
 800c6c0:	463b      	mov	r3, r7
 800c6c2:	f7f3 ff3d 	bl	8000540 <__aeabi_dmul>
 800c6c6:	a370      	add	r3, pc, #448	; (adr r3, 800c888 <atan+0x2c8>)
 800c6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6cc:	f7f3 fd82 	bl	80001d4 <__adddf3>
 800c6d0:	4632      	mov	r2, r6
 800c6d2:	463b      	mov	r3, r7
 800c6d4:	f7f3 ff34 	bl	8000540 <__aeabi_dmul>
 800c6d8:	a36d      	add	r3, pc, #436	; (adr r3, 800c890 <atan+0x2d0>)
 800c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6de:	f7f3 fd79 	bl	80001d4 <__adddf3>
 800c6e2:	4632      	mov	r2, r6
 800c6e4:	463b      	mov	r3, r7
 800c6e6:	f7f3 ff2b 	bl	8000540 <__aeabi_dmul>
 800c6ea:	a36b      	add	r3, pc, #428	; (adr r3, 800c898 <atan+0x2d8>)
 800c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f0:	f7f3 fd70 	bl	80001d4 <__adddf3>
 800c6f4:	4632      	mov	r2, r6
 800c6f6:	463b      	mov	r3, r7
 800c6f8:	f7f3 ff22 	bl	8000540 <__aeabi_dmul>
 800c6fc:	a368      	add	r3, pc, #416	; (adr r3, 800c8a0 <atan+0x2e0>)
 800c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c702:	f7f3 fd67 	bl	80001d4 <__adddf3>
 800c706:	4642      	mov	r2, r8
 800c708:	464b      	mov	r3, r9
 800c70a:	f7f3 ff19 	bl	8000540 <__aeabi_dmul>
 800c70e:	a366      	add	r3, pc, #408	; (adr r3, 800c8a8 <atan+0x2e8>)
 800c710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c714:	4680      	mov	r8, r0
 800c716:	4689      	mov	r9, r1
 800c718:	4630      	mov	r0, r6
 800c71a:	4639      	mov	r1, r7
 800c71c:	f7f3 ff10 	bl	8000540 <__aeabi_dmul>
 800c720:	a363      	add	r3, pc, #396	; (adr r3, 800c8b0 <atan+0x2f0>)
 800c722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c726:	f7f3 fd53 	bl	80001d0 <__aeabi_dsub>
 800c72a:	4632      	mov	r2, r6
 800c72c:	463b      	mov	r3, r7
 800c72e:	f7f3 ff07 	bl	8000540 <__aeabi_dmul>
 800c732:	a361      	add	r3, pc, #388	; (adr r3, 800c8b8 <atan+0x2f8>)
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	f7f3 fd4a 	bl	80001d0 <__aeabi_dsub>
 800c73c:	4632      	mov	r2, r6
 800c73e:	463b      	mov	r3, r7
 800c740:	f7f3 fefe 	bl	8000540 <__aeabi_dmul>
 800c744:	a35e      	add	r3, pc, #376	; (adr r3, 800c8c0 <atan+0x300>)
 800c746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74a:	f7f3 fd41 	bl	80001d0 <__aeabi_dsub>
 800c74e:	4632      	mov	r2, r6
 800c750:	463b      	mov	r3, r7
 800c752:	f7f3 fef5 	bl	8000540 <__aeabi_dmul>
 800c756:	a35c      	add	r3, pc, #368	; (adr r3, 800c8c8 <atan+0x308>)
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	f7f3 fd38 	bl	80001d0 <__aeabi_dsub>
 800c760:	4632      	mov	r2, r6
 800c762:	463b      	mov	r3, r7
 800c764:	f7f3 feec 	bl	8000540 <__aeabi_dmul>
 800c768:	4602      	mov	r2, r0
 800c76a:	460b      	mov	r3, r1
 800c76c:	4640      	mov	r0, r8
 800c76e:	4649      	mov	r1, r9
 800c770:	f7f3 fd30 	bl	80001d4 <__adddf3>
 800c774:	4622      	mov	r2, r4
 800c776:	462b      	mov	r3, r5
 800c778:	f7f3 fee2 	bl	8000540 <__aeabi_dmul>
 800c77c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800c780:	4602      	mov	r2, r0
 800c782:	460b      	mov	r3, r1
 800c784:	d14b      	bne.n	800c81e <atan+0x25e>
 800c786:	4620      	mov	r0, r4
 800c788:	4629      	mov	r1, r5
 800c78a:	f7f3 fd21 	bl	80001d0 <__aeabi_dsub>
 800c78e:	e72c      	b.n	800c5ea <atan+0x2a>
 800c790:	ee10 0a10 	vmov	r0, s0
 800c794:	4b53      	ldr	r3, [pc, #332]	; (800c8e4 <atan+0x324>)
 800c796:	2200      	movs	r2, #0
 800c798:	4629      	mov	r1, r5
 800c79a:	f7f3 fd19 	bl	80001d0 <__aeabi_dsub>
 800c79e:	4b51      	ldr	r3, [pc, #324]	; (800c8e4 <atan+0x324>)
 800c7a0:	4606      	mov	r6, r0
 800c7a2:	460f      	mov	r7, r1
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	4629      	mov	r1, r5
 800c7aa:	f7f3 fd13 	bl	80001d4 <__adddf3>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	4639      	mov	r1, r7
 800c7b6:	f7f3 ffed 	bl	8000794 <__aeabi_ddiv>
 800c7ba:	f04f 0a01 	mov.w	sl, #1
 800c7be:	4604      	mov	r4, r0
 800c7c0:	460d      	mov	r5, r1
 800c7c2:	e764      	b.n	800c68e <atan+0xce>
 800c7c4:	4b49      	ldr	r3, [pc, #292]	; (800c8ec <atan+0x32c>)
 800c7c6:	429e      	cmp	r6, r3
 800c7c8:	da1d      	bge.n	800c806 <atan+0x246>
 800c7ca:	ee10 0a10 	vmov	r0, s0
 800c7ce:	4b48      	ldr	r3, [pc, #288]	; (800c8f0 <atan+0x330>)
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	4629      	mov	r1, r5
 800c7d4:	f7f3 fcfc 	bl	80001d0 <__aeabi_dsub>
 800c7d8:	4b45      	ldr	r3, [pc, #276]	; (800c8f0 <atan+0x330>)
 800c7da:	4606      	mov	r6, r0
 800c7dc:	460f      	mov	r7, r1
 800c7de:	2200      	movs	r2, #0
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	f7f3 feac 	bl	8000540 <__aeabi_dmul>
 800c7e8:	4b3e      	ldr	r3, [pc, #248]	; (800c8e4 <atan+0x324>)
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f7f3 fcf2 	bl	80001d4 <__adddf3>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	f7f3 ffcc 	bl	8000794 <__aeabi_ddiv>
 800c7fc:	f04f 0a02 	mov.w	sl, #2
 800c800:	4604      	mov	r4, r0
 800c802:	460d      	mov	r5, r1
 800c804:	e743      	b.n	800c68e <atan+0xce>
 800c806:	462b      	mov	r3, r5
 800c808:	ee10 2a10 	vmov	r2, s0
 800c80c:	4939      	ldr	r1, [pc, #228]	; (800c8f4 <atan+0x334>)
 800c80e:	2000      	movs	r0, #0
 800c810:	f7f3 ffc0 	bl	8000794 <__aeabi_ddiv>
 800c814:	f04f 0a03 	mov.w	sl, #3
 800c818:	4604      	mov	r4, r0
 800c81a:	460d      	mov	r5, r1
 800c81c:	e737      	b.n	800c68e <atan+0xce>
 800c81e:	4b36      	ldr	r3, [pc, #216]	; (800c8f8 <atan+0x338>)
 800c820:	4e36      	ldr	r6, [pc, #216]	; (800c8fc <atan+0x33c>)
 800c822:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c826:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c82a:	e9da 2300 	ldrd	r2, r3, [sl]
 800c82e:	f7f3 fccf 	bl	80001d0 <__aeabi_dsub>
 800c832:	4622      	mov	r2, r4
 800c834:	462b      	mov	r3, r5
 800c836:	f7f3 fccb 	bl	80001d0 <__aeabi_dsub>
 800c83a:	4602      	mov	r2, r0
 800c83c:	460b      	mov	r3, r1
 800c83e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c842:	f7f3 fcc5 	bl	80001d0 <__aeabi_dsub>
 800c846:	f1bb 0f00 	cmp.w	fp, #0
 800c84a:	4604      	mov	r4, r0
 800c84c:	460d      	mov	r5, r1
 800c84e:	f6bf aed6 	bge.w	800c5fe <atan+0x3e>
 800c852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c856:	461d      	mov	r5, r3
 800c858:	e6d1      	b.n	800c5fe <atan+0x3e>
 800c85a:	a51d      	add	r5, pc, #116	; (adr r5, 800c8d0 <atan+0x310>)
 800c85c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c860:	e6cd      	b.n	800c5fe <atan+0x3e>
 800c862:	bf00      	nop
 800c864:	f3af 8000 	nop.w
 800c868:	54442d18 	.word	0x54442d18
 800c86c:	bff921fb 	.word	0xbff921fb
 800c870:	8800759c 	.word	0x8800759c
 800c874:	7e37e43c 	.word	0x7e37e43c
 800c878:	e322da11 	.word	0xe322da11
 800c87c:	3f90ad3a 	.word	0x3f90ad3a
 800c880:	24760deb 	.word	0x24760deb
 800c884:	3fa97b4b 	.word	0x3fa97b4b
 800c888:	a0d03d51 	.word	0xa0d03d51
 800c88c:	3fb10d66 	.word	0x3fb10d66
 800c890:	c54c206e 	.word	0xc54c206e
 800c894:	3fb745cd 	.word	0x3fb745cd
 800c898:	920083ff 	.word	0x920083ff
 800c89c:	3fc24924 	.word	0x3fc24924
 800c8a0:	5555550d 	.word	0x5555550d
 800c8a4:	3fd55555 	.word	0x3fd55555
 800c8a8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c8ac:	bfa2b444 	.word	0xbfa2b444
 800c8b0:	52defd9a 	.word	0x52defd9a
 800c8b4:	3fadde2d 	.word	0x3fadde2d
 800c8b8:	af749a6d 	.word	0xaf749a6d
 800c8bc:	3fb3b0f2 	.word	0x3fb3b0f2
 800c8c0:	fe231671 	.word	0xfe231671
 800c8c4:	3fbc71c6 	.word	0x3fbc71c6
 800c8c8:	9998ebc4 	.word	0x9998ebc4
 800c8cc:	3fc99999 	.word	0x3fc99999
 800c8d0:	54442d18 	.word	0x54442d18
 800c8d4:	3ff921fb 	.word	0x3ff921fb
 800c8d8:	440fffff 	.word	0x440fffff
 800c8dc:	7ff00000 	.word	0x7ff00000
 800c8e0:	3fdbffff 	.word	0x3fdbffff
 800c8e4:	3ff00000 	.word	0x3ff00000
 800c8e8:	3ff2ffff 	.word	0x3ff2ffff
 800c8ec:	40038000 	.word	0x40038000
 800c8f0:	3ff80000 	.word	0x3ff80000
 800c8f4:	bff00000 	.word	0xbff00000
 800c8f8:	0800ccd8 	.word	0x0800ccd8
 800c8fc:	0800ccb8 	.word	0x0800ccb8

0800c900 <fabs>:
 800c900:	ec51 0b10 	vmov	r0, r1, d0
 800c904:	ee10 2a10 	vmov	r2, s0
 800c908:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c90c:	ec43 2b10 	vmov	d0, r2, r3
 800c910:	4770      	bx	lr

0800c912 <atan2>:
 800c912:	f000 b835 	b.w	800c980 <__ieee754_atan2>
	...

0800c918 <sqrt>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	ed2d 8b02 	vpush	{d8}
 800c91e:	ec55 4b10 	vmov	r4, r5, d0
 800c922:	f000 f8f7 	bl	800cb14 <__ieee754_sqrt>
 800c926:	4b15      	ldr	r3, [pc, #84]	; (800c97c <sqrt+0x64>)
 800c928:	eeb0 8a40 	vmov.f32	s16, s0
 800c92c:	eef0 8a60 	vmov.f32	s17, s1
 800c930:	f993 3000 	ldrsb.w	r3, [r3]
 800c934:	3301      	adds	r3, #1
 800c936:	d019      	beq.n	800c96c <sqrt+0x54>
 800c938:	4622      	mov	r2, r4
 800c93a:	462b      	mov	r3, r5
 800c93c:	4620      	mov	r0, r4
 800c93e:	4629      	mov	r1, r5
 800c940:	f7f4 f898 	bl	8000a74 <__aeabi_dcmpun>
 800c944:	b990      	cbnz	r0, 800c96c <sqrt+0x54>
 800c946:	2200      	movs	r2, #0
 800c948:	2300      	movs	r3, #0
 800c94a:	4620      	mov	r0, r4
 800c94c:	4629      	mov	r1, r5
 800c94e:	f7f4 f869 	bl	8000a24 <__aeabi_dcmplt>
 800c952:	b158      	cbz	r0, 800c96c <sqrt+0x54>
 800c954:	f7ff fd28 	bl	800c3a8 <__errno>
 800c958:	2321      	movs	r3, #33	; 0x21
 800c95a:	6003      	str	r3, [r0, #0]
 800c95c:	2200      	movs	r2, #0
 800c95e:	2300      	movs	r3, #0
 800c960:	4610      	mov	r0, r2
 800c962:	4619      	mov	r1, r3
 800c964:	f7f3 ff16 	bl	8000794 <__aeabi_ddiv>
 800c968:	ec41 0b18 	vmov	d8, r0, r1
 800c96c:	eeb0 0a48 	vmov.f32	s0, s16
 800c970:	eef0 0a68 	vmov.f32	s1, s17
 800c974:	ecbd 8b02 	vpop	{d8}
 800c978:	bd38      	pop	{r3, r4, r5, pc}
 800c97a:	bf00      	nop
 800c97c:	20000134 	.word	0x20000134

0800c980 <__ieee754_atan2>:
 800c980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c984:	ec57 6b11 	vmov	r6, r7, d1
 800c988:	4273      	negs	r3, r6
 800c98a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800cb10 <__ieee754_atan2+0x190>
 800c98e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c992:	4333      	orrs	r3, r6
 800c994:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c998:	4573      	cmp	r3, lr
 800c99a:	ec51 0b10 	vmov	r0, r1, d0
 800c99e:	ee11 8a10 	vmov	r8, s2
 800c9a2:	d80a      	bhi.n	800c9ba <__ieee754_atan2+0x3a>
 800c9a4:	4244      	negs	r4, r0
 800c9a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c9aa:	4304      	orrs	r4, r0
 800c9ac:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c9b0:	4574      	cmp	r4, lr
 800c9b2:	ee10 9a10 	vmov	r9, s0
 800c9b6:	468c      	mov	ip, r1
 800c9b8:	d907      	bls.n	800c9ca <__ieee754_atan2+0x4a>
 800c9ba:	4632      	mov	r2, r6
 800c9bc:	463b      	mov	r3, r7
 800c9be:	f7f3 fc09 	bl	80001d4 <__adddf3>
 800c9c2:	ec41 0b10 	vmov	d0, r0, r1
 800c9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9ca:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c9ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c9d2:	4334      	orrs	r4, r6
 800c9d4:	d103      	bne.n	800c9de <__ieee754_atan2+0x5e>
 800c9d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9da:	f7ff bdf1 	b.w	800c5c0 <atan>
 800c9de:	17bc      	asrs	r4, r7, #30
 800c9e0:	f004 0402 	and.w	r4, r4, #2
 800c9e4:	ea53 0909 	orrs.w	r9, r3, r9
 800c9e8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c9ec:	d107      	bne.n	800c9fe <__ieee754_atan2+0x7e>
 800c9ee:	2c02      	cmp	r4, #2
 800c9f0:	d060      	beq.n	800cab4 <__ieee754_atan2+0x134>
 800c9f2:	2c03      	cmp	r4, #3
 800c9f4:	d1e5      	bne.n	800c9c2 <__ieee754_atan2+0x42>
 800c9f6:	a142      	add	r1, pc, #264	; (adr r1, 800cb00 <__ieee754_atan2+0x180>)
 800c9f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9fc:	e7e1      	b.n	800c9c2 <__ieee754_atan2+0x42>
 800c9fe:	ea52 0808 	orrs.w	r8, r2, r8
 800ca02:	d106      	bne.n	800ca12 <__ieee754_atan2+0x92>
 800ca04:	f1bc 0f00 	cmp.w	ip, #0
 800ca08:	da5f      	bge.n	800caca <__ieee754_atan2+0x14a>
 800ca0a:	a13f      	add	r1, pc, #252	; (adr r1, 800cb08 <__ieee754_atan2+0x188>)
 800ca0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca10:	e7d7      	b.n	800c9c2 <__ieee754_atan2+0x42>
 800ca12:	4572      	cmp	r2, lr
 800ca14:	d10f      	bne.n	800ca36 <__ieee754_atan2+0xb6>
 800ca16:	4293      	cmp	r3, r2
 800ca18:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ca1c:	d107      	bne.n	800ca2e <__ieee754_atan2+0xae>
 800ca1e:	2c02      	cmp	r4, #2
 800ca20:	d84c      	bhi.n	800cabc <__ieee754_atan2+0x13c>
 800ca22:	4b35      	ldr	r3, [pc, #212]	; (800caf8 <__ieee754_atan2+0x178>)
 800ca24:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ca28:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ca2c:	e7c9      	b.n	800c9c2 <__ieee754_atan2+0x42>
 800ca2e:	2c02      	cmp	r4, #2
 800ca30:	d848      	bhi.n	800cac4 <__ieee754_atan2+0x144>
 800ca32:	4b32      	ldr	r3, [pc, #200]	; (800cafc <__ieee754_atan2+0x17c>)
 800ca34:	e7f6      	b.n	800ca24 <__ieee754_atan2+0xa4>
 800ca36:	4573      	cmp	r3, lr
 800ca38:	d0e4      	beq.n	800ca04 <__ieee754_atan2+0x84>
 800ca3a:	1a9b      	subs	r3, r3, r2
 800ca3c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ca40:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ca44:	da1e      	bge.n	800ca84 <__ieee754_atan2+0x104>
 800ca46:	2f00      	cmp	r7, #0
 800ca48:	da01      	bge.n	800ca4e <__ieee754_atan2+0xce>
 800ca4a:	323c      	adds	r2, #60	; 0x3c
 800ca4c:	db1e      	blt.n	800ca8c <__ieee754_atan2+0x10c>
 800ca4e:	4632      	mov	r2, r6
 800ca50:	463b      	mov	r3, r7
 800ca52:	f7f3 fe9f 	bl	8000794 <__aeabi_ddiv>
 800ca56:	ec41 0b10 	vmov	d0, r0, r1
 800ca5a:	f7ff ff51 	bl	800c900 <fabs>
 800ca5e:	f7ff fdaf 	bl	800c5c0 <atan>
 800ca62:	ec51 0b10 	vmov	r0, r1, d0
 800ca66:	2c01      	cmp	r4, #1
 800ca68:	d013      	beq.n	800ca92 <__ieee754_atan2+0x112>
 800ca6a:	2c02      	cmp	r4, #2
 800ca6c:	d015      	beq.n	800ca9a <__ieee754_atan2+0x11a>
 800ca6e:	2c00      	cmp	r4, #0
 800ca70:	d0a7      	beq.n	800c9c2 <__ieee754_atan2+0x42>
 800ca72:	a319      	add	r3, pc, #100	; (adr r3, 800cad8 <__ieee754_atan2+0x158>)
 800ca74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca78:	f7f3 fbaa 	bl	80001d0 <__aeabi_dsub>
 800ca7c:	a318      	add	r3, pc, #96	; (adr r3, 800cae0 <__ieee754_atan2+0x160>)
 800ca7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca82:	e014      	b.n	800caae <__ieee754_atan2+0x12e>
 800ca84:	a118      	add	r1, pc, #96	; (adr r1, 800cae8 <__ieee754_atan2+0x168>)
 800ca86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca8a:	e7ec      	b.n	800ca66 <__ieee754_atan2+0xe6>
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	2100      	movs	r1, #0
 800ca90:	e7e9      	b.n	800ca66 <__ieee754_atan2+0xe6>
 800ca92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca96:	4619      	mov	r1, r3
 800ca98:	e793      	b.n	800c9c2 <__ieee754_atan2+0x42>
 800ca9a:	a30f      	add	r3, pc, #60	; (adr r3, 800cad8 <__ieee754_atan2+0x158>)
 800ca9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa0:	f7f3 fb96 	bl	80001d0 <__aeabi_dsub>
 800caa4:	4602      	mov	r2, r0
 800caa6:	460b      	mov	r3, r1
 800caa8:	a10d      	add	r1, pc, #52	; (adr r1, 800cae0 <__ieee754_atan2+0x160>)
 800caaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800caae:	f7f3 fb8f 	bl	80001d0 <__aeabi_dsub>
 800cab2:	e786      	b.n	800c9c2 <__ieee754_atan2+0x42>
 800cab4:	a10a      	add	r1, pc, #40	; (adr r1, 800cae0 <__ieee754_atan2+0x160>)
 800cab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800caba:	e782      	b.n	800c9c2 <__ieee754_atan2+0x42>
 800cabc:	a10c      	add	r1, pc, #48	; (adr r1, 800caf0 <__ieee754_atan2+0x170>)
 800cabe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cac2:	e77e      	b.n	800c9c2 <__ieee754_atan2+0x42>
 800cac4:	2000      	movs	r0, #0
 800cac6:	2100      	movs	r1, #0
 800cac8:	e77b      	b.n	800c9c2 <__ieee754_atan2+0x42>
 800caca:	a107      	add	r1, pc, #28	; (adr r1, 800cae8 <__ieee754_atan2+0x168>)
 800cacc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cad0:	e777      	b.n	800c9c2 <__ieee754_atan2+0x42>
 800cad2:	bf00      	nop
 800cad4:	f3af 8000 	nop.w
 800cad8:	33145c07 	.word	0x33145c07
 800cadc:	3ca1a626 	.word	0x3ca1a626
 800cae0:	54442d18 	.word	0x54442d18
 800cae4:	400921fb 	.word	0x400921fb
 800cae8:	54442d18 	.word	0x54442d18
 800caec:	3ff921fb 	.word	0x3ff921fb
 800caf0:	54442d18 	.word	0x54442d18
 800caf4:	3fe921fb 	.word	0x3fe921fb
 800caf8:	0800ccf8 	.word	0x0800ccf8
 800cafc:	0800cd10 	.word	0x0800cd10
 800cb00:	54442d18 	.word	0x54442d18
 800cb04:	c00921fb 	.word	0xc00921fb
 800cb08:	54442d18 	.word	0x54442d18
 800cb0c:	bff921fb 	.word	0xbff921fb
 800cb10:	7ff00000 	.word	0x7ff00000

0800cb14 <__ieee754_sqrt>:
 800cb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb18:	ec55 4b10 	vmov	r4, r5, d0
 800cb1c:	4e56      	ldr	r6, [pc, #344]	; (800cc78 <__ieee754_sqrt+0x164>)
 800cb1e:	43ae      	bics	r6, r5
 800cb20:	ee10 0a10 	vmov	r0, s0
 800cb24:	ee10 3a10 	vmov	r3, s0
 800cb28:	4629      	mov	r1, r5
 800cb2a:	462a      	mov	r2, r5
 800cb2c:	d110      	bne.n	800cb50 <__ieee754_sqrt+0x3c>
 800cb2e:	ee10 2a10 	vmov	r2, s0
 800cb32:	462b      	mov	r3, r5
 800cb34:	f7f3 fd04 	bl	8000540 <__aeabi_dmul>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	4629      	mov	r1, r5
 800cb40:	f7f3 fb48 	bl	80001d4 <__adddf3>
 800cb44:	4604      	mov	r4, r0
 800cb46:	460d      	mov	r5, r1
 800cb48:	ec45 4b10 	vmov	d0, r4, r5
 800cb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb50:	2d00      	cmp	r5, #0
 800cb52:	dc10      	bgt.n	800cb76 <__ieee754_sqrt+0x62>
 800cb54:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cb58:	4330      	orrs	r0, r6
 800cb5a:	d0f5      	beq.n	800cb48 <__ieee754_sqrt+0x34>
 800cb5c:	b15d      	cbz	r5, 800cb76 <__ieee754_sqrt+0x62>
 800cb5e:	ee10 2a10 	vmov	r2, s0
 800cb62:	462b      	mov	r3, r5
 800cb64:	ee10 0a10 	vmov	r0, s0
 800cb68:	f7f3 fb32 	bl	80001d0 <__aeabi_dsub>
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	460b      	mov	r3, r1
 800cb70:	f7f3 fe10 	bl	8000794 <__aeabi_ddiv>
 800cb74:	e7e6      	b.n	800cb44 <__ieee754_sqrt+0x30>
 800cb76:	1509      	asrs	r1, r1, #20
 800cb78:	d076      	beq.n	800cc68 <__ieee754_sqrt+0x154>
 800cb7a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cb7e:	07ce      	lsls	r6, r1, #31
 800cb80:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800cb84:	bf5e      	ittt	pl
 800cb86:	0fda      	lsrpl	r2, r3, #31
 800cb88:	005b      	lslpl	r3, r3, #1
 800cb8a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cb8e:	0fda      	lsrs	r2, r3, #31
 800cb90:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800cb94:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cb98:	2000      	movs	r0, #0
 800cb9a:	106d      	asrs	r5, r5, #1
 800cb9c:	005b      	lsls	r3, r3, #1
 800cb9e:	f04f 0e16 	mov.w	lr, #22
 800cba2:	4684      	mov	ip, r0
 800cba4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cba8:	eb0c 0401 	add.w	r4, ip, r1
 800cbac:	4294      	cmp	r4, r2
 800cbae:	bfde      	ittt	le
 800cbb0:	1b12      	suble	r2, r2, r4
 800cbb2:	eb04 0c01 	addle.w	ip, r4, r1
 800cbb6:	1840      	addle	r0, r0, r1
 800cbb8:	0052      	lsls	r2, r2, #1
 800cbba:	f1be 0e01 	subs.w	lr, lr, #1
 800cbbe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cbc2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cbc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cbca:	d1ed      	bne.n	800cba8 <__ieee754_sqrt+0x94>
 800cbcc:	4671      	mov	r1, lr
 800cbce:	2720      	movs	r7, #32
 800cbd0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cbd4:	4562      	cmp	r2, ip
 800cbd6:	eb04 060e 	add.w	r6, r4, lr
 800cbda:	dc02      	bgt.n	800cbe2 <__ieee754_sqrt+0xce>
 800cbdc:	d113      	bne.n	800cc06 <__ieee754_sqrt+0xf2>
 800cbde:	429e      	cmp	r6, r3
 800cbe0:	d811      	bhi.n	800cc06 <__ieee754_sqrt+0xf2>
 800cbe2:	2e00      	cmp	r6, #0
 800cbe4:	eb06 0e04 	add.w	lr, r6, r4
 800cbe8:	da43      	bge.n	800cc72 <__ieee754_sqrt+0x15e>
 800cbea:	f1be 0f00 	cmp.w	lr, #0
 800cbee:	db40      	blt.n	800cc72 <__ieee754_sqrt+0x15e>
 800cbf0:	f10c 0801 	add.w	r8, ip, #1
 800cbf4:	eba2 020c 	sub.w	r2, r2, ip
 800cbf8:	429e      	cmp	r6, r3
 800cbfa:	bf88      	it	hi
 800cbfc:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800cc00:	1b9b      	subs	r3, r3, r6
 800cc02:	4421      	add	r1, r4
 800cc04:	46c4      	mov	ip, r8
 800cc06:	0052      	lsls	r2, r2, #1
 800cc08:	3f01      	subs	r7, #1
 800cc0a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cc0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cc12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc16:	d1dd      	bne.n	800cbd4 <__ieee754_sqrt+0xc0>
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	d006      	beq.n	800cc2a <__ieee754_sqrt+0x116>
 800cc1c:	1c4c      	adds	r4, r1, #1
 800cc1e:	bf13      	iteet	ne
 800cc20:	3101      	addne	r1, #1
 800cc22:	3001      	addeq	r0, #1
 800cc24:	4639      	moveq	r1, r7
 800cc26:	f021 0101 	bicne.w	r1, r1, #1
 800cc2a:	1043      	asrs	r3, r0, #1
 800cc2c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cc30:	0849      	lsrs	r1, r1, #1
 800cc32:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cc36:	07c2      	lsls	r2, r0, #31
 800cc38:	bf48      	it	mi
 800cc3a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cc3e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800cc42:	460c      	mov	r4, r1
 800cc44:	463d      	mov	r5, r7
 800cc46:	e77f      	b.n	800cb48 <__ieee754_sqrt+0x34>
 800cc48:	0ada      	lsrs	r2, r3, #11
 800cc4a:	3815      	subs	r0, #21
 800cc4c:	055b      	lsls	r3, r3, #21
 800cc4e:	2a00      	cmp	r2, #0
 800cc50:	d0fa      	beq.n	800cc48 <__ieee754_sqrt+0x134>
 800cc52:	02d7      	lsls	r7, r2, #11
 800cc54:	d50a      	bpl.n	800cc6c <__ieee754_sqrt+0x158>
 800cc56:	f1c1 0420 	rsb	r4, r1, #32
 800cc5a:	fa23 f404 	lsr.w	r4, r3, r4
 800cc5e:	1e4d      	subs	r5, r1, #1
 800cc60:	408b      	lsls	r3, r1
 800cc62:	4322      	orrs	r2, r4
 800cc64:	1b41      	subs	r1, r0, r5
 800cc66:	e788      	b.n	800cb7a <__ieee754_sqrt+0x66>
 800cc68:	4608      	mov	r0, r1
 800cc6a:	e7f0      	b.n	800cc4e <__ieee754_sqrt+0x13a>
 800cc6c:	0052      	lsls	r2, r2, #1
 800cc6e:	3101      	adds	r1, #1
 800cc70:	e7ef      	b.n	800cc52 <__ieee754_sqrt+0x13e>
 800cc72:	46e0      	mov	r8, ip
 800cc74:	e7be      	b.n	800cbf4 <__ieee754_sqrt+0xe0>
 800cc76:	bf00      	nop
 800cc78:	7ff00000 	.word	0x7ff00000

0800cc7c <_init>:
 800cc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc7e:	bf00      	nop
 800cc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc82:	bc08      	pop	{r3}
 800cc84:	469e      	mov	lr, r3
 800cc86:	4770      	bx	lr

0800cc88 <_fini>:
 800cc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc8a:	bf00      	nop
 800cc8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc8e:	bc08      	pop	{r3}
 800cc90:	469e      	mov	lr, r3
 800cc92:	4770      	bx	lr
