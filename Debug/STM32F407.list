
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  0800aa80  0800aa80  0001aa80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acdc  0800acdc  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800acdc  0800acdc  0001acdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ace4  0800ace4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ace4  0800ace4  0001ace4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ace8  0800ace8  0001ace8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800acec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  20000098  0800ad84  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  0800ad84  00020a68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023c4c  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bc9  00000000  00000000  00043d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  000488e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  0004a1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000259e0  00000000  00000000  0004b8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022cd1  00000000  00000000  000712a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4f16  00000000  00000000  00093f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00168e87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a50  00000000  00000000  00168edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800aa68 	.word	0x0800aa68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	0800aa68 	.word	0x0800aa68

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	char digith = 0;;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 80004ca:	f000 f853 	bl	8000574 <read_one_digit_from_keyboard>
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b23      	cmp	r3, #35	; 0x23
 80004d6:	d10a      	bne.n	80004ee <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 80004d8:	221e      	movs	r2, #30
 80004da:	2100      	movs	r1, #0
 80004dc:	4824      	ldr	r0, [pc, #144]	; (8000570 <read_digits+0xb0>)
 80004de:	f00a f9f3 	bl	800a8c8 <memset>
		keyboard.read_digits_position = 0;
 80004e2:	4b23      	ldr	r3, [pc, #140]	; (8000570 <read_digits+0xb0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 80004e8:	4b21      	ldr	r3, [pc, #132]	; (8000570 <read_digits+0xb0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2b2a      	cmp	r3, #42	; 0x2a
 80004f2:	d109      	bne.n	8000508 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <read_digits+0xb0>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <read_digits+0xb0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <read_digits+0xb0>)
 8000504:	2200      	movs	r2, #0
 8000506:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d028      	beq.n	8000560 <read_digits+0xa0>
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b23      	cmp	r3, #35	; 0x23
 8000512:	d025      	beq.n	8000560 <read_digits+0xa0>
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	2b2a      	cmp	r3, #42	; 0x2a
 8000518:	d022      	beq.n	8000560 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <read_digits+0xb0>)
 800051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051e:	4a14      	ldr	r2, [pc, #80]	; (8000570 <read_digits+0xb0>)
 8000520:	7f92      	ldrb	r2, [r2, #30]
 8000522:	4293      	cmp	r3, r2
 8000524:	dc11      	bgt.n	800054a <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <read_digits+0xb0>)
 8000528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800052a:	4911      	ldr	r1, [pc, #68]	; (8000570 <read_digits+0xb0>)
 800052c:	79fa      	ldrb	r2, [r7, #7]
 800052e:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <read_digits+0xb0>)
 8000532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000534:	3301      	adds	r3, #1
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <read_digits+0xb0>)
 8000538:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <read_digits+0xb0>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <read_digits+0xb0>)
 8000544:	2201      	movs	r2, #1
 8000546:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000548:	e00e      	b.n	8000568 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <read_digits+0xb0>)
 800054c:	2201      	movs	r2, #1
 800054e:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <read_digits+0xb0>)
 8000554:	2200      	movs	r2, #0
 8000556:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <read_digits+0xb0>)
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800055e:	e003      	b.n	8000568 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <read_digits+0xb0>)
 8000562:	2200      	movs	r2, #0
 8000564:	77da      	strb	r2, [r3, #31]
	}
}
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200000c8 	.word	0x200000c8

08000574 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
	char digit = '\0';
 800057a:	2300      	movs	r3, #0
 800057c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000584:	48cf      	ldr	r0, [pc, #828]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000586:	f002 fa99 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	48cc      	ldr	r0, [pc, #816]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000592:	f002 fa93 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059c:	48c9      	ldr	r0, [pc, #804]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800059e:	f002 fa8d 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	48c6      	ldr	r0, [pc, #792]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005aa:	f002 fa87 	bl	8002abc <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80005ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b2:	48c5      	ldr	r0, [pc, #788]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80005b4:	f002 fa6a 	bl	8002a8c <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d169      	bne.n	8000692 <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c4:	48bf      	ldr	r0, [pc, #764]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005c6:	f002 fa79 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	48bc      	ldr	r0, [pc, #752]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005d2:	f002 fa73 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005dc:	48b9      	ldr	r0, [pc, #740]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005de:	f002 fa6d 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	48b6      	ldr	r0, [pc, #728]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005ea:	f002 fa67 	bl	8002abc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80005ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f2:	48b5      	ldr	r0, [pc, #724]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80005f4:	f002 fa4a 	bl	8002a8c <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d101      	bne.n	8000602 <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 80005fe:	2331      	movs	r3, #49	; 0x31
 8000600:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000608:	48ae      	ldr	r0, [pc, #696]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800060a:	f002 fa57 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	48ab      	ldr	r0, [pc, #684]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000616:	f002 fa51 	bl	8002abc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061e:	48aa      	ldr	r0, [pc, #680]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000620:	f002 fa34 	bl	8002a8c <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d101      	bne.n	800062e <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 800062a:	2334      	movs	r3, #52	; 0x34
 800062c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000634:	48a3      	ldr	r0, [pc, #652]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000636:	f002 fa41 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000640:	48a0      	ldr	r0, [pc, #640]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000642:	f002 fa3b 	bl	8002abc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000646:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064a:	489f      	ldr	r0, [pc, #636]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 800064c:	f002 fa1e 	bl	8002a8c <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d101      	bne.n	800065a <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 8000656:	2337      	movs	r3, #55	; 0x37
 8000658:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000660:	4898      	ldr	r0, [pc, #608]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000662:	f002 fa2b 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	4895      	ldr	r0, [pc, #596]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800066e:	f002 fa25 	bl	8002abc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000676:	4894      	ldr	r0, [pc, #592]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000678:	f002 fa08 	bl	8002a8c <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d101      	bne.n	8000686 <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 8000682:	232a      	movs	r3, #42	; 0x2a
 8000684:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	488d      	ldr	r0, [pc, #564]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800068e:	f002 fa15 	bl	8002abc <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000698:	488a      	ldr	r0, [pc, #552]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800069a:	f002 fa0f 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a4:	4887      	ldr	r0, [pc, #540]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006a6:	f002 fa09 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b0:	4884      	ldr	r0, [pc, #528]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006b2:	f002 fa03 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4881      	ldr	r0, [pc, #516]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006be:	f002 f9fd 	bl	8002abc <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 80006c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c6:	4880      	ldr	r0, [pc, #512]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80006c8:	f002 f9e0 	bl	8002a8c <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d169      	bne.n	80007a6 <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d8:	487a      	ldr	r0, [pc, #488]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006da:	f002 f9ef 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e4:	4877      	ldr	r0, [pc, #476]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006e6:	f002 f9e9 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f0:	4874      	ldr	r0, [pc, #464]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006f2:	f002 f9e3 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fc:	4871      	ldr	r0, [pc, #452]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006fe:	f002 f9dd 	bl	8002abc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000702:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000706:	4870      	ldr	r0, [pc, #448]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000708:	f002 f9c0 	bl	8002a8c <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 8000712:	2332      	movs	r3, #50	; 0x32
 8000714:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071c:	4869      	ldr	r0, [pc, #420]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800071e:	f002 f9cd 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000728:	4866      	ldr	r0, [pc, #408]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800072a:	f002 f9c7 	bl	8002abc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800072e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000732:	4865      	ldr	r0, [pc, #404]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000734:	f002 f9aa 	bl	8002a8c <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 800073e:	2335      	movs	r3, #53	; 0x35
 8000740:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000748:	485e      	ldr	r0, [pc, #376]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800074a:	f002 f9b7 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000754:	485b      	ldr	r0, [pc, #364]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000756:	f002 f9b1 	bl	8002abc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800075a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075e:	485a      	ldr	r0, [pc, #360]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000760:	f002 f994 	bl	8002a8c <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 800076a:	2338      	movs	r3, #56	; 0x38
 800076c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000774:	4853      	ldr	r0, [pc, #332]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000776:	f002 f9a1 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000780:	4850      	ldr	r0, [pc, #320]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000782:	f002 f99b 	bl	8002abc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078a:	484f      	ldr	r0, [pc, #316]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 800078c:	f002 f97e 	bl	8002a8c <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 8000796:	2330      	movs	r3, #48	; 0x30
 8000798:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	4848      	ldr	r0, [pc, #288]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007a2:	f002 f98b 	bl	8002abc <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	4845      	ldr	r0, [pc, #276]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ae:	f002 f985 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b8:	4842      	ldr	r0, [pc, #264]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ba:	f002 f97f 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c4:	483f      	ldr	r0, [pc, #252]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007c6:	f002 f979 	bl	8002abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d0:	483c      	ldr	r0, [pc, #240]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007d2:	f002 f973 	bl	8002abc <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 80007d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007da:	483c      	ldr	r0, [pc, #240]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 80007dc:	f002 f956 	bl	8002a8c <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d169      	bne.n	80008ba <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ec:	4835      	ldr	r0, [pc, #212]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ee:	f002 f965 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f8:	4832      	ldr	r0, [pc, #200]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007fa:	f002 f95f 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000804:	482f      	ldr	r0, [pc, #188]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000806:	f002 f959 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000810:	482c      	ldr	r0, [pc, #176]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000812:	f002 f953 	bl	8002abc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8000816:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081a:	482c      	ldr	r0, [pc, #176]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 800081c:	f002 f936 	bl	8002a8c <HAL_GPIO_ReadPin>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 8000826:	2333      	movs	r3, #51	; 0x33
 8000828:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000830:	4824      	ldr	r0, [pc, #144]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000832:	f002 f943 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083c:	4821      	ldr	r0, [pc, #132]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800083e:	f002 f93d 	bl	8002abc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8000842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000846:	4821      	ldr	r0, [pc, #132]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 8000848:	f002 f920 	bl	8002a8c <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d101      	bne.n	8000856 <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 8000852:	2336      	movs	r3, #54	; 0x36
 8000854:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085c:	4819      	ldr	r0, [pc, #100]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800085e:	f002 f92d 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000868:	4816      	ldr	r0, [pc, #88]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800086a:	f002 f927 	bl	8002abc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800086e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000872:	4816      	ldr	r0, [pc, #88]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 8000874:	f002 f90a 	bl	8002a8c <HAL_GPIO_ReadPin>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d101      	bne.n	8000882 <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 800087e:	2339      	movs	r3, #57	; 0x39
 8000880:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	480e      	ldr	r0, [pc, #56]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800088a:	f002 f917 	bl	8002abc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000894:	480b      	ldr	r0, [pc, #44]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000896:	f002 f911 	bl	8002abc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800089a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 80008a0:	f002 f8f4 	bl	8002a8c <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d101      	bne.n	80008ae <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 80008aa:	2323      	movs	r3, #35	; 0x23
 80008ac:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80008b6:	f002 f901 	bl	8002abc <HAL_GPIO_WritePin>
	}
	return digit;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40020c00 	.word	0x40020c00
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40021000 	.word	0x40021000

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f001 fd95 	bl	8002404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008da:	f000 f84b 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008de:	f000 fafd 	bl	8000edc <MX_GPIO_Init>
  MX_I2S3_Init();
 80008e2:	f000 f931 	bl	8000b48 <MX_I2S3_Init>
  MX_SPI1_Init();
 80008e6:	f000 f973 	bl	8000bd0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80008ea:	f009 fcab 	bl	800a244 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80008ee:	f000 fa33 	bl	8000d58 <MX_TIM2_Init>
  MX_SPI2_Init();
 80008f2:	f000 f9a3 	bl	8000c3c <MX_SPI2_Init>
  MX_RNG_Init();
 80008f6:	f000 f957 	bl	8000ba8 <MX_RNG_Init>
  MX_TIM3_Init();
 80008fa:	f000 fa7b 	bl	8000df4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80008fe:	f000 f9d3 	bl	8000ca8 <MX_TIM1_Init>
  MX_I2C3_Init();
 8000902:	f000 f8f3 	bl	8000aec <MX_I2C3_Init>
  MX_I2C2_Init();
 8000906:	f000 f8c3 	bl	8000a90 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800090a:	f000 f8b5 	bl	8000a78 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 800090e:	f001 fa15 	bl	8001d3c <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 8000912:	2000      	movs	r0, #0
 8000914:	f001 fbb8 	bl	8002088 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8000918:	2003      	movs	r0, #3
 800091a:	f001 f9b1 	bl	8001c80 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 800091e:	2000      	movs	r0, #0
 8000920:	f001 fbb2 	bl	8002088 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 8000924:	2364      	movs	r3, #100	; 0x64
 8000926:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f001 fcf7 	bl	800231c <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 800092e:	2000      	movs	r0, #0
 8000930:	f001 fbaa 	bl	8002088 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <main+0x9c>)
 8000936:	f005 fd4b 	bl	80063d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800093a:	2100      	movs	r1, #0
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <main+0x9c>)
 800093e:	f005 fdb7 	bl	80064b0 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <main+0xa0>)
 8000944:	220a      	movs	r2, #10
 8000946:	779a      	strb	r2, [r3, #30]
//	  }
//	  ////////////////////////////////////////////////////////////////


	  // Keyboard test //////////////////////////////////////////////
	  if(keyboard.read_one_digit_status == true)
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <main+0xa0>)
 800094a:	7fdb      	ldrb	r3, [r3, #31]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d00a      	beq.n	8000966 <main+0x96>
	  {
		  ILI9341_Draw_Text( keyboard.keyboard_digits_buffer, 10, 10, WHITE, 3, BLACK);
 8000950:	2300      	movs	r3, #0
 8000952:	9301      	str	r3, [sp, #4]
 8000954:	2303      	movs	r3, #3
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800095c:	220a      	movs	r2, #10
 800095e:	210a      	movs	r1, #10
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <main+0xa0>)
 8000962:	f001 f89d 	bl	8001aa0 <ILI9341_Draw_Text>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000966:	f009 fc93 	bl	800a290 <MX_USB_HOST_Process>
	  if(keyboard.read_one_digit_status == true)
 800096a:	e7ed      	b.n	8000948 <main+0x78>
 800096c:	200001f0 	.word	0x200001f0
 8000970:	200000c8 	.word	0x200000c8

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b098      	sub	sp, #96	; 0x60
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800097e:	2230      	movs	r2, #48	; 0x30
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f009 ffa0 	bl	800a8c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <SystemClock_Config+0xfc>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a30      	ldr	r2, [pc, #192]	; (8000a70 <SystemClock_Config+0xfc>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <SystemClock_Config+0xfc>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <SystemClock_Config+0x100>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a2a      	ldr	r2, [pc, #168]	; (8000a74 <SystemClock_Config+0x100>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <SystemClock_Config+0x100>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009de:	2301      	movs	r3, #1
 80009e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e8:	2302      	movs	r3, #2
 80009ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009f2:	2308      	movs	r3, #8
 80009f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009f6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a00:	2307      	movs	r3, #7
 8000a02:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f004 fbd3 	bl	80051b4 <HAL_RCC_OscConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a14:	f000 fbca 	bl	80011ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a18:	230f      	movs	r3, #15
 8000a1a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	2105      	movs	r1, #5
 8000a36:	4618      	mov	r0, r3
 8000a38:	f004 fe34 	bl	80056a4 <HAL_RCC_ClockConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a42:	f000 fbb3 	bl	80011ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a46:	2301      	movs	r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a4a:	23c0      	movs	r3, #192	; 0xc0
 8000a4c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4618      	mov	r0, r3
 8000a58:	f005 f80c 	bl	8005a74 <HAL_RCCEx_PeriphCLKConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000a62:	f000 fba3 	bl	80011ac <Error_Handler>
  }
}
 8000a66:	bf00      	nop
 8000a68:	3760      	adds	r7, #96	; 0x60
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40007000 	.word	0x40007000

08000a78 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	201c      	movs	r0, #28
 8000a82:	f001 fe30 	bl	80026e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a86:	201c      	movs	r0, #28
 8000a88:	f001 fe49 	bl	800271e <HAL_NVIC_EnableIRQ>
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_I2C2_Init+0x50>)
 8000a96:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <MX_I2C2_Init+0x54>)
 8000a98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_I2C2_Init+0x50>)
 8000a9c:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_I2C2_Init+0x58>)
 8000a9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_I2C2_Init+0x50>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_I2C2_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_I2C2_Init+0x50>)
 8000aae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ab2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <MX_I2C2_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_I2C2_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <MX_I2C2_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_I2C2_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_I2C2_Init+0x50>)
 8000ace:	f003 fd8d 	bl	80045ec <HAL_I2C_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ad8:	f000 fb68 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2000019c 	.word	0x2000019c
 8000ae4:	40005800 	.word	0x40005800
 8000ae8:	000186a0 	.word	0x000186a0

08000aec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_I2C3_Init+0x50>)
 8000af2:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <MX_I2C3_Init+0x54>)
 8000af4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_I2C3_Init+0x50>)
 8000af8:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <MX_I2C3_Init+0x58>)
 8000afa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_I2C3_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_I2C3_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_I2C3_Init+0x50>)
 8000b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b0e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <MX_I2C3_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_I2C3_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <MX_I2C3_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_I2C3_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_I2C3_Init+0x50>)
 8000b2a:	f003 fd5f 	bl	80045ec <HAL_I2C_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b34:	f000 fb3a 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200000f0 	.word	0x200000f0
 8000b40:	40005c00 	.word	0x40005c00
 8000b44:	000186a0 	.word	0x000186a0

08000b48 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_I2S3_Init+0x54>)
 8000b4e:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <MX_I2S3_Init+0x58>)
 8000b50:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_I2S3_Init+0x54>)
 8000b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b58:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_I2S3_Init+0x54>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_I2S3_Init+0x54>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <MX_I2S3_Init+0x54>)
 8000b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b6c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_I2S3_Init+0x54>)
 8000b70:	4a0c      	ldr	r2, [pc, #48]	; (8000ba4 <MX_I2S3_Init+0x5c>)
 8000b72:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_I2S3_Init+0x54>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_I2S3_Init+0x54>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_I2S3_Init+0x54>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_I2S3_Init+0x54>)
 8000b88:	f003 fe74 	bl	8004874 <HAL_I2S_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b92:	f000 fb0b 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000330 	.word	0x20000330
 8000ba0:	40003c00 	.word	0x40003c00
 8000ba4:	00017700 	.word	0x00017700

08000ba8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_RNG_Init+0x20>)
 8000bae:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <MX_RNG_Init+0x24>)
 8000bb0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_RNG_Init+0x20>)
 8000bb4:	f005 f89e 	bl	8005cf4 <HAL_RNG_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000bbe:	f000 faf5 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000280 	.word	0x20000280
 8000bcc:	50060800 	.word	0x50060800

08000bd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bd6:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <MX_SPI1_Init+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c1c:	220a      	movs	r2, #10
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_SPI1_Init+0x64>)
 8000c22:	f005 f8f5 	bl	8005e10 <HAL_SPI_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c2c:	f000 fabe 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000290 	.word	0x20000290
 8000c38:	40013000 	.word	0x40013000

08000c3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_SPI2_Init+0x64>)
 8000c42:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <MX_SPI2_Init+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_SPI2_Init+0x64>)
 8000c48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_SPI2_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_SPI2_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_SPI2_Init+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_SPI2_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_SPI2_Init+0x64>)
 8000c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_SPI2_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <MX_SPI2_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_SPI2_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <MX_SPI2_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_SPI2_Init+0x64>)
 8000c88:	220a      	movs	r2, #10
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_SPI2_Init+0x64>)
 8000c8e:	f005 f8bf 	bl	8005e10 <HAL_SPI_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c98:	f000 fa88 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000144 	.word	0x20000144
 8000ca4:	40003800 	.word	0x40003800

08000ca8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	; 0x30
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	2224      	movs	r2, #36	; 0x24
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f009 fe06 	bl	800a8c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <MX_TIM1_Init+0xa8>)
 8000cc6:	4a23      	ldr	r2, [pc, #140]	; (8000d54 <MX_TIM1_Init+0xac>)
 8000cc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <MX_TIM1_Init+0xa8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <MX_TIM1_Init+0xa8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <MX_TIM1_Init+0xa8>)
 8000cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cdc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <MX_TIM1_Init+0xa8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_TIM1_Init+0xa8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <MX_TIM1_Init+0xa8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480d      	ldr	r0, [pc, #52]	; (8000d50 <MX_TIM1_Init+0xa8>)
 8000d1c:	f005 fd2f 	bl	800677e <HAL_TIM_Encoder_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000d26:	f000 fa41 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	4619      	mov	r1, r3
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <MX_TIM1_Init+0xa8>)
 8000d38:	f006 fb94 	bl	8007464 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000d42:	f000 fa33 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	3730      	adds	r7, #48	; 0x30
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000238 	.word	0x20000238
 8000d54:	40010000 	.word	0x40010000

08000d58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d74:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8000d7c:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d7e:	f240 3247 	movw	r2, #839	; 0x347
 8000d82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000d8a:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d8c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000d9a:	2280      	movs	r2, #128	; 0x80
 8000d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d9e:	4814      	ldr	r0, [pc, #80]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000da0:	f005 fac6 	bl	8006330 <HAL_TIM_Base_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000daa:	f000 f9ff 	bl	80011ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	4619      	mov	r1, r3
 8000dba:	480d      	ldr	r0, [pc, #52]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000dbc:	f005 ff4c 	bl	8006c58 <HAL_TIM_ConfigClockSource>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dc6:	f000 f9f1 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000dca:	2310      	movs	r3, #16
 8000dcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4806      	ldr	r0, [pc, #24]	; (8000df0 <MX_TIM2_Init+0x98>)
 8000dd8:	f006 fb44 	bl	8007464 <HAL_TIMEx_MasterConfigSynchronization>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000de2:	f000 f9e3 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200002e8 	.word	0x200002e8

08000df4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08e      	sub	sp, #56	; 0x38
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e08:	f107 0320 	add.w	r3, r7, #32
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
 8000e20:	615a      	str	r2, [r3, #20]
 8000e22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e24:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <MX_TIM3_Init+0xe0>)
 8000e26:	4a2c      	ldr	r2, [pc, #176]	; (8000ed8 <MX_TIM3_Init+0xe4>)
 8000e28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <MX_TIM3_Init+0xe0>)
 8000e2c:	f640 0233 	movw	r2, #2099	; 0x833
 8000e30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e32:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <MX_TIM3_Init+0xe0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000e38:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <MX_TIM3_Init+0xe0>)
 8000e3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e40:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <MX_TIM3_Init+0xe0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e46:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <MX_TIM3_Init+0xe0>)
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e4c:	4821      	ldr	r0, [pc, #132]	; (8000ed4 <MX_TIM3_Init+0xe0>)
 8000e4e:	f005 fa6f 	bl	8006330 <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e58:	f000 f9a8 	bl	80011ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e66:	4619      	mov	r1, r3
 8000e68:	481a      	ldr	r0, [pc, #104]	; (8000ed4 <MX_TIM3_Init+0xe0>)
 8000e6a:	f005 fef5 	bl	8006c58 <HAL_TIM_ConfigClockSource>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e74:	f000 f99a 	bl	80011ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e78:	4816      	ldr	r0, [pc, #88]	; (8000ed4 <MX_TIM3_Init+0xe0>)
 8000e7a:	f005 fc27 	bl	80066cc <HAL_TIM_PWM_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e84:	f000 f992 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e90:	f107 0320 	add.w	r3, r7, #32
 8000e94:	4619      	mov	r1, r3
 8000e96:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <MX_TIM3_Init+0xe0>)
 8000e98:	f006 fae4 	bl	8007464 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000ea2:	f000 f983 	bl	80011ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea6:	2360      	movs	r3, #96	; 0x60
 8000ea8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_TIM3_Init+0xe0>)
 8000ebe:	f005 fe0d 	bl	8006adc <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ec8:	f000 f970 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3738      	adds	r7, #56	; 0x38
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200001f0 	.word	0x200001f0
 8000ed8:	40000400 	.word	0x40000400

08000edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
 8000ef6:	4ba6      	ldr	r3, [pc, #664]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4aa5      	ldr	r2, [pc, #660]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000efc:	f043 0310 	orr.w	r3, r3, #16
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4ba3      	ldr	r3, [pc, #652]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	61bb      	str	r3, [r7, #24]
 8000f0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	4b9f      	ldr	r3, [pc, #636]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a9e      	ldr	r2, [pc, #632]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b9c      	ldr	r3, [pc, #624]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b98      	ldr	r3, [pc, #608]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a97      	ldr	r2, [pc, #604]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b95      	ldr	r3, [pc, #596]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b91      	ldr	r3, [pc, #580]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a90      	ldr	r2, [pc, #576]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b8e      	ldr	r3, [pc, #568]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	4b8a      	ldr	r3, [pc, #552]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a89      	ldr	r2, [pc, #548]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b87      	ldr	r3, [pc, #540]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b83      	ldr	r3, [pc, #524]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a82      	ldr	r2, [pc, #520]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b80      	ldr	r3, [pc, #512]	; (8001190 <MX_GPIO_Init+0x2b4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	217c      	movs	r1, #124	; 0x7c
 8000f9e:	487d      	ldr	r0, [pc, #500]	; (8001194 <MX_GPIO_Init+0x2b8>)
 8000fa0:	f001 fd8c 	bl	8002abc <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	487b      	ldr	r0, [pc, #492]	; (8001198 <MX_GPIO_Init+0x2bc>)
 8000faa:	f001 fd87 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f64f 7110 	movw	r1, #65296	; 0xff10
 8000fb4:	4879      	ldr	r0, [pc, #484]	; (800119c <MX_GPIO_Init+0x2c0>)
 8000fb6:	f001 fd81 	bl	8002abc <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8000fc0:	4875      	ldr	r0, [pc, #468]	; (8001198 <MX_GPIO_Init+0x2bc>)
 8000fc2:	f001 fd7b 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000fcc:	4874      	ldr	r0, [pc, #464]	; (80011a0 <MX_GPIO_Init+0x2c4>)
 8000fce:	f001 fd75 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8000fd2:	2374      	movs	r3, #116	; 0x74
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	486a      	ldr	r0, [pc, #424]	; (8001194 <MX_GPIO_Init+0x2b8>)
 8000fea:	f001 fbb3 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fee:	2308      	movs	r3, #8
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4863      	ldr	r0, [pc, #396]	; (8001194 <MX_GPIO_Init+0x2b8>)
 8001006:	f001 fba5 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 800100a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	485e      	ldr	r0, [pc, #376]	; (8001198 <MX_GPIO_Init+0x2bc>)
 8001020:	f001 fb98 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 8001024:	f640 0341 	movw	r3, #2113	; 0x841
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	4856      	ldr	r0, [pc, #344]	; (8001198 <MX_GPIO_Init+0x2bc>)
 800103e:	f001 fb89 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001042:	2308      	movs	r3, #8
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001052:	2305      	movs	r3, #5
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	484e      	ldr	r0, [pc, #312]	; (8001198 <MX_GPIO_Init+0x2bc>)
 800105e:	f001 fb79 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001062:	2301      	movs	r3, #1
 8001064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001066:	4b4f      	ldr	r3, [pc, #316]	; (80011a4 <MX_GPIO_Init+0x2c8>)
 8001068:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	484c      	ldr	r0, [pc, #304]	; (80011a8 <MX_GPIO_Init+0x2cc>)
 8001076:	f001 fb6d 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800107a:	2304      	movs	r3, #4
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4844      	ldr	r0, [pc, #272]	; (80011a0 <MX_GPIO_Init+0x2c4>)
 800108e:	f001 fb61 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTION_SENSOR_9960_Pin KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin|KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 8001092:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109c:	2301      	movs	r3, #1
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	483b      	ldr	r0, [pc, #236]	; (8001194 <MX_GPIO_Init+0x2b8>)
 80010a8:	f001 fb54 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 80010ac:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	4837      	ldr	r0, [pc, #220]	; (80011a0 <MX_GPIO_Init+0x2c4>)
 80010c2:	f001 fb47 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 80010c6:	f64f 7310 	movw	r3, #65296	; 0xff10
 80010ca:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	482f      	ldr	r0, [pc, #188]	; (800119c <MX_GPIO_Init+0x2c0>)
 80010e0:	f001 fb38 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010e4:	2320      	movs	r3, #32
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4829      	ldr	r0, [pc, #164]	; (800119c <MX_GPIO_Init+0x2c0>)
 80010f8:	f001 fb2c 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010fc:	2340      	movs	r3, #64	; 0x40
 80010fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	2301      	movs	r3, #1
 8001102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	4823      	ldr	r0, [pc, #140]	; (80011a0 <MX_GPIO_Init+0x2c4>)
 8001114:	f001 fb1e 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001118:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	481b      	ldr	r0, [pc, #108]	; (80011a0 <MX_GPIO_Init+0x2c4>)
 8001132:	f001 fb0f 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001136:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800113c:	2312      	movs	r3, #18
 800113e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001140:	2301      	movs	r3, #1
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001148:	2304      	movs	r3, #4
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	4813      	ldr	r0, [pc, #76]	; (80011a0 <MX_GPIO_Init+0x2c4>)
 8001154:	f001 fafe 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001158:	2301      	movs	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	480a      	ldr	r0, [pc, #40]	; (8001194 <MX_GPIO_Init+0x2b8>)
 800116c:	f001 faf2 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001170:	2302      	movs	r3, #2
 8001172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_GPIO_Init+0x2c8>)
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_GPIO_Init+0x2b8>)
 8001184:	f001 fae6 	bl	8002754 <HAL_GPIO_Init>

}
 8001188:	bf00      	nop
 800118a:	3730      	adds	r7, #48	; 0x30
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	40021000 	.word	0x40021000
 8001198:	40020800 	.word	0x40020800
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40020400 	.word	0x40020400
 80011a4:	10120000 	.word	0x10120000
 80011a8:	40020000 	.word	0x40020000

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_MspInit+0x5c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <HAL_MspInit+0x5c>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_MspInit+0x5c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_MspInit+0x5c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <HAL_MspInit+0x5c>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_MspInit+0x5c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011f6:	2007      	movs	r0, #7
 80011f8:	f001 fa6a 	bl	80026d0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2005      	movs	r0, #5
 8001202:	f001 fa70 	bl	80026e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001206:	2005      	movs	r0, #5
 8001208:	f001 fa89 	bl	800271e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800

08001218 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a42      	ldr	r2, [pc, #264]	; (8001340 <HAL_I2C_MspInit+0x128>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d12d      	bne.n	8001296 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <HAL_I2C_MspInit+0x12c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a40      	ldr	r2, [pc, #256]	; (8001344 <HAL_I2C_MspInit+0x12c>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b3e      	ldr	r3, [pc, #248]	; (8001344 <HAL_I2C_MspInit+0x12c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001256:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800125a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800125c:	2312      	movs	r3, #18
 800125e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001260:	2301      	movs	r3, #1
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001268:	2304      	movs	r3, #4
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	4835      	ldr	r0, [pc, #212]	; (8001348 <HAL_I2C_MspInit+0x130>)
 8001274:	f001 fa6e 	bl	8002754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	4b31      	ldr	r3, [pc, #196]	; (8001344 <HAL_I2C_MspInit+0x12c>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	4a30      	ldr	r2, [pc, #192]	; (8001344 <HAL_I2C_MspInit+0x12c>)
 8001282:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001286:	6413      	str	r3, [r2, #64]	; 0x40
 8001288:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <HAL_I2C_MspInit+0x12c>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001294:	e050      	b.n	8001338 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a2c      	ldr	r2, [pc, #176]	; (800134c <HAL_I2C_MspInit+0x134>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d14b      	bne.n	8001338 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <HAL_I2C_MspInit+0x12c>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	4a26      	ldr	r2, [pc, #152]	; (8001344 <HAL_I2C_MspInit+0x12c>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6313      	str	r3, [r2, #48]	; 0x30
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <HAL_I2C_MspInit+0x12c>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <HAL_I2C_MspInit+0x12c>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <HAL_I2C_MspInit+0x12c>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6313      	str	r3, [r2, #48]	; 0x30
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_I2C_MspInit+0x12c>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012de:	2312      	movs	r3, #18
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012ea:	2304      	movs	r3, #4
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	4816      	ldr	r0, [pc, #88]	; (8001350 <HAL_I2C_MspInit+0x138>)
 80012f6:	f001 fa2d 	bl	8002754 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001300:	2312      	movs	r3, #18
 8001302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001304:	2301      	movs	r3, #1
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800130c:	2304      	movs	r3, #4
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	480f      	ldr	r0, [pc, #60]	; (8001354 <HAL_I2C_MspInit+0x13c>)
 8001318:	f001 fa1c 	bl	8002754 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_I2C_MspInit+0x12c>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <HAL_I2C_MspInit+0x12c>)
 8001326:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800132a:	6413      	str	r3, [r2, #64]	; 0x40
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_I2C_MspInit+0x12c>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
}
 8001338:	bf00      	nop
 800133a:	3730      	adds	r7, #48	; 0x30
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40005800 	.word	0x40005800
 8001344:	40023800 	.word	0x40023800
 8001348:	40020400 	.word	0x40020400
 800134c:	40005c00 	.word	0x40005c00
 8001350:	40020800 	.word	0x40020800
 8001354:	40020000 	.word	0x40020000

08001358 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a28      	ldr	r2, [pc, #160]	; (8001418 <HAL_I2S_MspInit+0xc0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d14a      	bne.n	8001410 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_I2S_MspInit+0xc4>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a26      	ldr	r2, [pc, #152]	; (800141c <HAL_I2S_MspInit+0xc4>)
 8001384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_I2S_MspInit+0xc4>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <HAL_I2S_MspInit+0xc4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a1f      	ldr	r2, [pc, #124]	; (800141c <HAL_I2S_MspInit+0xc4>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <HAL_I2S_MspInit+0xc4>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_I2S_MspInit+0xc4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a18      	ldr	r2, [pc, #96]	; (800141c <HAL_I2S_MspInit+0xc4>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_I2S_MspInit+0xc4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80013ce:	2310      	movs	r3, #16
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013de:	2306      	movs	r3, #6
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <HAL_I2S_MspInit+0xc8>)
 80013ea:	f001 f9b3 	bl	8002754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80013ee:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001400:	2306      	movs	r3, #6
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4806      	ldr	r0, [pc, #24]	; (8001424 <HAL_I2S_MspInit+0xcc>)
 800140c:	f001 f9a2 	bl	8002754 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	; 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40003c00 	.word	0x40003c00
 800141c:	40023800 	.word	0x40023800
 8001420:	40020000 	.word	0x40020000
 8001424:	40020800 	.word	0x40020800

08001428 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <HAL_RNG_MspInit+0x3c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d10d      	bne.n	8001456 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_RNG_MspInit+0x40>)
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	4a09      	ldr	r2, [pc, #36]	; (8001468 <HAL_RNG_MspInit+0x40>)
 8001444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001448:	6353      	str	r3, [r2, #52]	; 0x34
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <HAL_RNG_MspInit+0x40>)
 800144c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	50060800 	.word	0x50060800
 8001468:	40023800 	.word	0x40023800

0800146c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	; 0x30
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a41      	ldr	r2, [pc, #260]	; (8001590 <HAL_SPI_MspInit+0x124>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d12c      	bne.n	80014e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	4b40      	ldr	r3, [pc, #256]	; (8001594 <HAL_SPI_MspInit+0x128>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a3f      	ldr	r2, [pc, #252]	; (8001594 <HAL_SPI_MspInit+0x128>)
 8001498:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <HAL_SPI_MspInit+0x128>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	4b39      	ldr	r3, [pc, #228]	; (8001594 <HAL_SPI_MspInit+0x128>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a38      	ldr	r2, [pc, #224]	; (8001594 <HAL_SPI_MspInit+0x128>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b36      	ldr	r3, [pc, #216]	; (8001594 <HAL_SPI_MspInit+0x128>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014c6:	23e0      	movs	r3, #224	; 0xe0
 80014c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014d6:	2305      	movs	r3, #5
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	482d      	ldr	r0, [pc, #180]	; (8001598 <HAL_SPI_MspInit+0x12c>)
 80014e2:	f001 f937 	bl	8002754 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014e6:	e04f      	b.n	8001588 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a2b      	ldr	r2, [pc, #172]	; (800159c <HAL_SPI_MspInit+0x130>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d14a      	bne.n	8001588 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <HAL_SPI_MspInit+0x128>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a26      	ldr	r2, [pc, #152]	; (8001594 <HAL_SPI_MspInit+0x128>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <HAL_SPI_MspInit+0x128>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <HAL_SPI_MspInit+0x128>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a1f      	ldr	r2, [pc, #124]	; (8001594 <HAL_SPI_MspInit+0x128>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <HAL_SPI_MspInit+0x128>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <HAL_SPI_MspInit+0x128>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a18      	ldr	r2, [pc, #96]	; (8001594 <HAL_SPI_MspInit+0x128>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <HAL_SPI_MspInit+0x128>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001546:	2304      	movs	r3, #4
 8001548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001552:	2303      	movs	r3, #3
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001556:	2305      	movs	r3, #5
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4619      	mov	r1, r3
 8001560:	480f      	ldr	r0, [pc, #60]	; (80015a0 <HAL_SPI_MspInit+0x134>)
 8001562:	f001 f8f7 	bl	8002754 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001566:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001578:	2305      	movs	r3, #5
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	4808      	ldr	r0, [pc, #32]	; (80015a4 <HAL_SPI_MspInit+0x138>)
 8001584:	f001 f8e6 	bl	8002754 <HAL_GPIO_Init>
}
 8001588:	bf00      	nop
 800158a:	3730      	adds	r7, #48	; 0x30
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40013000 	.word	0x40013000
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000
 800159c:	40003800 	.word	0x40003800
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020400 	.word	0x40020400

080015a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a19      	ldr	r2, [pc, #100]	; (800162c <HAL_TIM_Encoder_MspInit+0x84>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d12c      	bne.n	8001624 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_TIM_Encoder_MspInit+0x88>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_TIM_Encoder_MspInit+0x88>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_TIM_Encoder_MspInit+0x88>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_TIM_Encoder_MspInit+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a10      	ldr	r2, [pc, #64]	; (8001630 <HAL_TIM_Encoder_MspInit+0x88>)
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <HAL_TIM_Encoder_MspInit+0x88>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001602:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160c:	2301      	movs	r3, #1
 800160e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001614:	2301      	movs	r3, #1
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001620:	f001 f898 	bl	8002754 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	; 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40010000 	.word	0x40010000
 8001630:	40023800 	.word	0x40023800
 8001634:	40021000 	.word	0x40021000

08001638 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001648:	d10e      	bne.n	8001668 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_TIM_Base_MspInit+0x70>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <HAL_TIM_Base_MspInit+0x70>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_TIM_Base_MspInit+0x70>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001666:	e01a      	b.n	800169e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_TIM_Base_MspInit+0x74>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d115      	bne.n	800169e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_TIM_Base_MspInit+0x70>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <HAL_TIM_Base_MspInit+0x70>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_TIM_Base_MspInit+0x70>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	201d      	movs	r0, #29
 8001694:	f001 f827 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001698:	201d      	movs	r0, #29
 800169a:	f001 f840 	bl	800271e <HAL_NVIC_EnableIRQ>
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40000400 	.word	0x40000400

080016b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <NMI_Handler+0x4>

080016b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <MemManage_Handler+0x4>

080016c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <UsageFault_Handler+0x4>

080016ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fc:	f000 fed4 	bl	80024a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 8001718:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800171c:	481b      	ldr	r0, [pc, #108]	; (800178c <TIM2_IRQHandler+0x78>)
 800171e:	f001 f9e6 	bl	8002aee <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <TIM2_IRQHandler+0x7c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d111      	bne.n	800174e <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <TIM2_IRQHandler+0x80>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2bc8      	cmp	r3, #200	; 0xc8
 8001730:	dc0a      	bgt.n	8001748 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <TIM2_IRQHandler+0x80>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <TIM2_IRQHandler+0x84>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <TIM2_IRQHandler+0x80>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	4a14      	ldr	r2, [pc, #80]	; (8001794 <TIM2_IRQHandler+0x80>)
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e002      	b.n	800174e <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <TIM2_IRQHandler+0x7c>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <TIM2_IRQHandler+0x7c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d114      	bne.n	8001780 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <TIM2_IRQHandler+0x80>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b63      	cmp	r3, #99	; 0x63
 800175c:	dd0a      	ble.n	8001774 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <TIM2_IRQHandler+0x80>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <TIM2_IRQHandler+0x84>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <TIM2_IRQHandler+0x80>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3b01      	subs	r3, #1
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <TIM2_IRQHandler+0x80>)
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e005      	b.n	8001780 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <TIM2_IRQHandler+0x7c>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
		  i = 100;
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <TIM2_IRQHandler+0x80>)
 800177c:	2264      	movs	r2, #100	; 0x64
 800177e:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <TIM2_IRQHandler+0x84>)
 8001782:	f005 f8a2 	bl	80068ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40020c00 	.word	0x40020c00
 8001790:	200000b4 	.word	0x200000b4
 8001794:	20000000 	.word	0x20000000
 8001798:	200002e8 	.word	0x200002e8

0800179c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80017a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <TIM3_IRQHandler+0x1c>)
 80017a6:	f001 f9a2 	bl	8002aee <HAL_GPIO_TogglePin>
  read_digits();
 80017aa:	f7fe fe89 	bl	80004c0 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017ae:	4803      	ldr	r0, [pc, #12]	; (80017bc <TIM3_IRQHandler+0x20>)
 80017b0:	f005 f88b 	bl	80068ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40020c00 	.word	0x40020c00
 80017bc:	200001f0 	.word	0x200001f0

080017c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <OTG_FS_IRQHandler+0x10>)
 80017c6:	f001 fc17 	bl	8002ff8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000754 	.word	0x20000754

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001804:	f009 f826 	bl	800a854 <__errno>
 8001808:	4603      	mov	r3, r0
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001812:	e009      	b.n	8001828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20020000 	.word	0x20020000
 8001834:	00000400 	.word	0x00000400
 8001838:	200000b8 	.word	0x200000b8
 800183c:	20000a68 	.word	0x20000a68

08001840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <SystemInit+0x20>)
 8001846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <SystemInit+0x20>)
 800184c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b08b      	sub	sp, #44	; 0x2c
 8001868:	af00      	add	r7, sp, #0
 800186a:	4604      	mov	r4, r0
 800186c:	4608      	mov	r0, r1
 800186e:	4611      	mov	r1, r2
 8001870:	461a      	mov	r2, r3
 8001872:	4623      	mov	r3, r4
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	4603      	mov	r3, r0
 8001878:	80bb      	strh	r3, [r7, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	807b      	strh	r3, [r7, #2]
 800187e:	4613      	mov	r3, r2
 8001880:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 800188a:	887b      	ldrh	r3, [r7, #2]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	f1c3 0301 	rsb	r3, r3, #1
 8001892:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

    while (x >= y)
 800189c:	e061      	b.n	8001962 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 800189e:	88fa      	ldrh	r2, [r7, #6]
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	e018      	b.n	80018da <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	b298      	uxth	r0, r3
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	88bb      	ldrh	r3, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	883a      	ldrh	r2, [r7, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f000 fc0b 	bl	80020d4 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	b298      	uxth	r0, r3
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	88ba      	ldrh	r2, [r7, #4]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	883a      	ldrh	r2, [r7, #0]
 80018ce:	4619      	mov	r1, r3
 80018d0:	f000 fc00 	bl	80020d4 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	3301      	adds	r3, #1
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	88fa      	ldrh	r2, [r7, #6]
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	4413      	add	r3, r2
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dde0      	ble.n	80018a8 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 80018e6:	88fa      	ldrh	r2, [r7, #6]
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e018      	b.n	8001922 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	b298      	uxth	r0, r3
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	88bb      	ldrh	r3, [r7, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	883a      	ldrh	r2, [r7, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	f000 fbe7 	bl	80020d4 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	b298      	uxth	r0, r3
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	b29b      	uxth	r3, r3
 800190e:	88ba      	ldrh	r2, [r7, #4]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	883a      	ldrh	r2, [r7, #0]
 8001916:	4619      	mov	r1, r3
 8001918:	f000 fbdc 	bl	80020d4 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3301      	adds	r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	88fa      	ldrh	r2, [r7, #6]
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	4413      	add	r3, r2
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	429a      	cmp	r2, r3
 800192c:	dde0      	ble.n	80018f0 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	3301      	adds	r3, #1
 8001932:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	4413      	add	r3, r2
 800193a:	617b      	str	r3, [r7, #20]
        yChange += 2;
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	3302      	adds	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005a      	lsls	r2, r3, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	4413      	add	r3, r2
 800194a:	2b00      	cmp	r3, #0
 800194c:	dd09      	ble.n	8001962 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	3b01      	subs	r3, #1
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	4413      	add	r3, r2
 800195a:	617b      	str	r3, [r7, #20]
            xChange += 2;
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	3302      	adds	r3, #2
 8001960:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8001962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	429a      	cmp	r2, r3
 8001968:	da99      	bge.n	800189e <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	372c      	adds	r7, #44	; 0x2c
 8001970:	46bd      	mov	sp, r7
 8001972:	bd90      	pop	{r4, r7, pc}

08001974 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af02      	add	r7, sp, #8
 800197a:	4604      	mov	r4, r0
 800197c:	4608      	mov	r0, r1
 800197e:	4611      	mov	r1, r2
 8001980:	461a      	mov	r2, r3
 8001982:	4623      	mov	r3, r4
 8001984:	71fb      	strb	r3, [r7, #7]
 8001986:	4603      	mov	r3, r0
 8001988:	80bb      	strh	r3, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	71bb      	strb	r3, [r7, #6]
 800198e:	4613      	mov	r3, r2
 8001990:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	2b1f      	cmp	r3, #31
 800199a:	d902      	bls.n	80019a2 <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 800199c:	7dfb      	ldrb	r3, [r7, #23]
 800199e:	3b20      	subs	r3, #32
 80019a0:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	753b      	strb	r3, [r7, #20]
 80019a6:	e012      	b.n	80019ce <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 80019a8:	7dfa      	ldrb	r2, [r7, #23]
 80019aa:	7d38      	ldrb	r0, [r7, #20]
 80019ac:	7d39      	ldrb	r1, [r7, #20]
 80019ae:	4c3b      	ldr	r4, [pc, #236]	; (8001a9c <ILI9341_Draw_Char+0x128>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4423      	add	r3, r4
 80019ba:	4403      	add	r3, r0
 80019bc:	781a      	ldrb	r2, [r3, #0]
 80019be:	f107 0318 	add.w	r3, r7, #24
 80019c2:	440b      	add	r3, r1
 80019c4:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80019c8:	7d3b      	ldrb	r3, [r7, #20]
 80019ca:	3301      	adds	r3, #1
 80019cc:	753b      	strb	r3, [r7, #20]
 80019ce:	7d3b      	ldrb	r3, [r7, #20]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d9e9      	bls.n	80019a8 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80019d4:	79bb      	ldrb	r3, [r7, #6]
 80019d6:	b299      	uxth	r1, r3
 80019d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019da:	461a      	mov	r2, r3
 80019dc:	0052      	lsls	r2, r2, #1
 80019de:	4413      	add	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	b29c      	uxth	r4, r3
 80019ea:	88b8      	ldrh	r0, [r7, #4]
 80019ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	4623      	mov	r3, r4
 80019f2:	f000 fc37 	bl	8002264 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80019f6:	2300      	movs	r3, #0
 80019f8:	757b      	strb	r3, [r7, #21]
 80019fa:	e046      	b.n	8001a8a <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80019fc:	2300      	movs	r3, #0
 80019fe:	75bb      	strb	r3, [r7, #22]
 8001a00:	e03d      	b.n	8001a7e <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 8001a02:	7d7b      	ldrb	r3, [r7, #21]
 8001a04:	f107 0218 	add.w	r2, r7, #24
 8001a08:	4413      	add	r3, r2
 8001a0a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	7dbb      	ldrb	r3, [r7, #22]
 8001a12:	fa42 f303 	asr.w	r3, r2, r3
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d02c      	beq.n	8001a78 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 8001a1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d10f      	bne.n	8001a44 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001a24:	7d7b      	ldrb	r3, [r7, #21]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	88bb      	ldrh	r3, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b298      	uxth	r0, r3
 8001a2e:	79bb      	ldrb	r3, [r7, #6]
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	7dbb      	ldrb	r3, [r7, #22]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	887a      	ldrh	r2, [r7, #2]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f000 fb49 	bl	80020d4 <ILI9341_Draw_Pixel>
 8001a42:	e019      	b.n	8001a78 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001a44:	7d7b      	ldrb	r3, [r7, #21]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a4a:	fb12 f303 	smulbb	r3, r2, r3
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	88bb      	ldrh	r3, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	b298      	uxth	r0, r3
 8001a56:	79bb      	ldrb	r3, [r7, #6]
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	7dbb      	ldrb	r3, [r7, #22]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001a60:	fb11 f303 	smulbb	r3, r1, r3
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	b299      	uxth	r1, r3
 8001a6a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001a6c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	4623      	mov	r3, r4
 8001a74:	f000 fbf6 	bl	8002264 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001a78:	7dbb      	ldrb	r3, [r7, #22]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	75bb      	strb	r3, [r7, #22]
 8001a7e:	7dbb      	ldrb	r3, [r7, #22]
 8001a80:	2b07      	cmp	r3, #7
 8001a82:	d9be      	bls.n	8001a02 <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001a84:	7d7b      	ldrb	r3, [r7, #21]
 8001a86:	3301      	adds	r3, #1
 8001a88:	757b      	strb	r3, [r7, #21]
 8001a8a:	7d7b      	ldrb	r3, [r7, #21]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d9b5      	bls.n	80019fc <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	371c      	adds	r7, #28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd90      	pop	{r4, r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	0800aa9c 	.word	0x0800aa9c

08001aa0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	4611      	mov	r1, r2
 8001aac:	461a      	mov	r2, r3
 8001aae:	4603      	mov	r3, r0
 8001ab0:	817b      	strh	r3, [r7, #10]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	727b      	strb	r3, [r7, #9]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8001aba:	e016      	b.n	8001aea <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	60fa      	str	r2, [r7, #12]
 8001ac2:	7818      	ldrb	r0, [r3, #0]
 8001ac4:	88fc      	ldrh	r4, [r7, #6]
 8001ac6:	7a7a      	ldrb	r2, [r7, #9]
 8001ac8:	8979      	ldrh	r1, [r7, #10]
 8001aca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	8c3b      	ldrh	r3, [r7, #32]
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	4623      	mov	r3, r4
 8001ad4:	f7ff ff4e 	bl	8001974 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001ad8:	8c3b      	ldrh	r3, [r7, #32]
 8001ada:	461a      	mov	r2, r3
 8001adc:	0052      	lsls	r2, r2, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	897b      	ldrh	r3, [r7, #10]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1e4      	bne.n	8001abc <ILI9341_Draw_Text+0x1c>
    }
}
 8001af2:	bf00      	nop
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd90      	pop	{r4, r7, pc}

08001afc <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001b00:	2200      	movs	r2, #0
 8001b02:	2110      	movs	r1, #16
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <ILI9341_SPI_Init+0x14>)
 8001b06:	f000 ffd9 	bl	8002abc <HAL_GPIO_WritePin>
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000

08001b14 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001b1e:	1df9      	adds	r1, r7, #7
 8001b20:	2301      	movs	r3, #1
 8001b22:	2201      	movs	r2, #1
 8001b24:	4803      	ldr	r0, [pc, #12]	; (8001b34 <ILI9341_SPI_Send+0x20>)
 8001b26:	f004 f9fc 	bl	8005f22 <HAL_SPI_Transmit>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000144 	.word	0x20000144

08001b38 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2110      	movs	r1, #16
 8001b46:	480a      	ldr	r0, [pc, #40]	; (8001b70 <ILI9341_Write_Command+0x38>)
 8001b48:	f000 ffb8 	bl	8002abc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2140      	movs	r1, #64	; 0x40
 8001b50:	4807      	ldr	r0, [pc, #28]	; (8001b70 <ILI9341_Write_Command+0x38>)
 8001b52:	f000 ffb3 	bl	8002abc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ffdb 	bl	8001b14 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001b5e:	2201      	movs	r2, #1
 8001b60:	2110      	movs	r1, #16
 8001b62:	4803      	ldr	r0, [pc, #12]	; (8001b70 <ILI9341_Write_Command+0x38>)
 8001b64:	f000 ffaa 	bl	8002abc <HAL_GPIO_WritePin>
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000

08001b74 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2140      	movs	r1, #64	; 0x40
 8001b82:	480a      	ldr	r0, [pc, #40]	; (8001bac <ILI9341_Write_Data+0x38>)
 8001b84:	f000 ff9a 	bl	8002abc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	4807      	ldr	r0, [pc, #28]	; (8001bac <ILI9341_Write_Data+0x38>)
 8001b8e:	f000 ff95 	bl	8002abc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ffbd 	bl	8001b14 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2110      	movs	r1, #16
 8001b9e:	4803      	ldr	r0, [pc, #12]	; (8001bac <ILI9341_Write_Data+0x38>)
 8001ba0:	f000 ff8c 	bl	8002abc <HAL_GPIO_WritePin>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000

08001bb0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	4608      	mov	r0, r1
 8001bba:	4611      	mov	r1, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	80fb      	strh	r3, [r7, #6]
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	80bb      	strh	r3, [r7, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	807b      	strh	r3, [r7, #2]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001bce:	202a      	movs	r0, #42	; 0x2a
 8001bd0:	f7ff ffb2 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ffc9 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ffc4 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ffbd 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ffb8 	bl	8001b74 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001c04:	202b      	movs	r0, #43	; 0x2b
 8001c06:	f7ff ff97 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001c0a:	88bb      	ldrh	r3, [r7, #4]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ffae 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001c18:	88bb      	ldrh	r3, [r7, #4]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ffa9 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001c22:	883b      	ldrh	r3, [r7, #0]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ffa2 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001c30:	883b      	ldrh	r3, [r7, #0]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff9d 	bl	8001b74 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001c3a:	202c      	movs	r0, #44	; 0x2c
 8001c3c:	f7ff ff7c 	bl	8001b38 <ILI9341_Write_Command>
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd90      	pop	{r4, r7, pc}

08001c48 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2120      	movs	r1, #32
 8001c50:	480a      	ldr	r0, [pc, #40]	; (8001c7c <ILI9341_Reset+0x34>)
 8001c52:	f000 ff33 	bl	8002abc <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001c56:	20c8      	movs	r0, #200	; 0xc8
 8001c58:	f000 fc46 	bl	80024e8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2110      	movs	r1, #16
 8001c60:	4806      	ldr	r0, [pc, #24]	; (8001c7c <ILI9341_Reset+0x34>)
 8001c62:	f000 ff2b 	bl	8002abc <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001c66:	20c8      	movs	r0, #200	; 0xc8
 8001c68:	f000 fc3e 	bl	80024e8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2120      	movs	r1, #32
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <ILI9341_Reset+0x34>)
 8001c72:	f000 ff23 	bl	8002abc <HAL_GPIO_WritePin>
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000

08001c80 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8001c8e:	2036      	movs	r0, #54	; 0x36
 8001c90:	f7ff ff52 	bl	8001b38 <ILI9341_Write_Command>
HAL_Delay(1);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f000 fc27 	bl	80024e8 <HAL_Delay>
	
switch(screen_rotation) 
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d837      	bhi.n	8001d10 <ILI9341_Set_Rotation+0x90>
 8001ca0:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <ILI9341_Set_Rotation+0x28>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	08001cb9 	.word	0x08001cb9
 8001cac:	08001ccf 	.word	0x08001ccf
 8001cb0:	08001ce5 	.word	0x08001ce5
 8001cb4:	08001cfb 	.word	0x08001cfb
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001cb8:	2048      	movs	r0, #72	; 0x48
 8001cba:	f7ff ff5b 	bl	8001b74 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001cbe:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <ILI9341_Set_Rotation+0x9c>)
 8001cc0:	22f0      	movs	r2, #240	; 0xf0
 8001cc2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <ILI9341_Set_Rotation+0xa0>)
 8001cc6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cca:	801a      	strh	r2, [r3, #0]
			break;
 8001ccc:	e021      	b.n	8001d12 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001cce:	2028      	movs	r0, #40	; 0x28
 8001cd0:	f7ff ff50 	bl	8001b74 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <ILI9341_Set_Rotation+0x9c>)
 8001cd6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cda:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <ILI9341_Set_Rotation+0xa0>)
 8001cde:	22f0      	movs	r2, #240	; 0xf0
 8001ce0:	801a      	strh	r2, [r3, #0]
			break;
 8001ce2:	e016      	b.n	8001d12 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001ce4:	2088      	movs	r0, #136	; 0x88
 8001ce6:	f7ff ff45 	bl	8001b74 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <ILI9341_Set_Rotation+0x9c>)
 8001cec:	22f0      	movs	r2, #240	; 0xf0
 8001cee:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <ILI9341_Set_Rotation+0xa0>)
 8001cf2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cf6:	801a      	strh	r2, [r3, #0]
			break;
 8001cf8:	e00b      	b.n	8001d12 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001cfa:	20e8      	movs	r0, #232	; 0xe8
 8001cfc:	f7ff ff3a 	bl	8001b74 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <ILI9341_Set_Rotation+0x9c>)
 8001d02:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d06:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <ILI9341_Set_Rotation+0xa0>)
 8001d0a:	22f0      	movs	r2, #240	; 0xf0
 8001d0c:	801a      	strh	r2, [r3, #0]
			break;
 8001d0e:	e000      	b.n	8001d12 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001d10:	bf00      	nop
	}
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000000a 	.word	0x2000000a
 8001d20:	20000008 	.word	0x20000008

08001d24 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	2120      	movs	r1, #32
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <ILI9341_Enable+0x14>)
 8001d2e:	f000 fec5 	bl	8002abc <HAL_GPIO_WritePin>
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000

08001d3c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001d40:	f7ff fff0 	bl	8001d24 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001d44:	f7ff feda 	bl	8001afc <ILI9341_SPI_Init>
ILI9341_Reset();
 8001d48:	f7ff ff7e 	bl	8001c48 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f7ff fef3 	bl	8001b38 <ILI9341_Write_Command>
HAL_Delay(1000);
 8001d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d56:	f000 fbc7 	bl	80024e8 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001d5a:	20cb      	movs	r0, #203	; 0xcb
 8001d5c:	f7ff feec 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001d60:	2039      	movs	r0, #57	; 0x39
 8001d62:	f7ff ff07 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001d66:	202c      	movs	r0, #44	; 0x2c
 8001d68:	f7ff ff04 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7ff ff01 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001d72:	2034      	movs	r0, #52	; 0x34
 8001d74:	f7ff fefe 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f7ff fefb 	bl	8001b74 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001d7e:	20cf      	movs	r0, #207	; 0xcf
 8001d80:	f7ff feda 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff fef5 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001d8a:	20c1      	movs	r0, #193	; 0xc1
 8001d8c:	f7ff fef2 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001d90:	2030      	movs	r0, #48	; 0x30
 8001d92:	f7ff feef 	bl	8001b74 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001d96:	20e8      	movs	r0, #232	; 0xe8
 8001d98:	f7ff fece 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001d9c:	2085      	movs	r0, #133	; 0x85
 8001d9e:	f7ff fee9 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f7ff fee6 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001da8:	2078      	movs	r0, #120	; 0x78
 8001daa:	f7ff fee3 	bl	8001b74 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001dae:	20ea      	movs	r0, #234	; 0xea
 8001db0:	f7ff fec2 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff fedd 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7ff feda 	bl	8001b74 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001dc0:	20ed      	movs	r0, #237	; 0xed
 8001dc2:	f7ff feb9 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001dc6:	2064      	movs	r0, #100	; 0x64
 8001dc8:	f7ff fed4 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f7ff fed1 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001dd2:	2012      	movs	r0, #18
 8001dd4:	f7ff fece 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001dd8:	2081      	movs	r0, #129	; 0x81
 8001dda:	f7ff fecb 	bl	8001b74 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001dde:	20f7      	movs	r0, #247	; 0xf7
 8001de0:	f7ff feaa 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001de4:	2020      	movs	r0, #32
 8001de6:	f7ff fec5 	bl	8001b74 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001dea:	20c0      	movs	r0, #192	; 0xc0
 8001dec:	f7ff fea4 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001df0:	2023      	movs	r0, #35	; 0x23
 8001df2:	f7ff febf 	bl	8001b74 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001df6:	20c1      	movs	r0, #193	; 0xc1
 8001df8:	f7ff fe9e 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001dfc:	2010      	movs	r0, #16
 8001dfe:	f7ff feb9 	bl	8001b74 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001e02:	20c5      	movs	r0, #197	; 0xc5
 8001e04:	f7ff fe98 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001e08:	203e      	movs	r0, #62	; 0x3e
 8001e0a:	f7ff feb3 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001e0e:	2028      	movs	r0, #40	; 0x28
 8001e10:	f7ff feb0 	bl	8001b74 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001e14:	20c7      	movs	r0, #199	; 0xc7
 8001e16:	f7ff fe8f 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001e1a:	2086      	movs	r0, #134	; 0x86
 8001e1c:	f7ff feaa 	bl	8001b74 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001e20:	2036      	movs	r0, #54	; 0x36
 8001e22:	f7ff fe89 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001e26:	2048      	movs	r0, #72	; 0x48
 8001e28:	f7ff fea4 	bl	8001b74 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001e2c:	203a      	movs	r0, #58	; 0x3a
 8001e2e:	f7ff fe83 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001e32:	2055      	movs	r0, #85	; 0x55
 8001e34:	f7ff fe9e 	bl	8001b74 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001e38:	20b1      	movs	r0, #177	; 0xb1
 8001e3a:	f7ff fe7d 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7ff fe98 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001e44:	2018      	movs	r0, #24
 8001e46:	f7ff fe95 	bl	8001b74 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001e4a:	20b6      	movs	r0, #182	; 0xb6
 8001e4c:	f7ff fe74 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001e50:	2008      	movs	r0, #8
 8001e52:	f7ff fe8f 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001e56:	2082      	movs	r0, #130	; 0x82
 8001e58:	f7ff fe8c 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001e5c:	2027      	movs	r0, #39	; 0x27
 8001e5e:	f7ff fe89 	bl	8001b74 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001e62:	20f2      	movs	r0, #242	; 0xf2
 8001e64:	f7ff fe68 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff fe83 	bl	8001b74 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001e6e:	2026      	movs	r0, #38	; 0x26
 8001e70:	f7ff fe62 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f7ff fe7d 	bl	8001b74 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001e7a:	20e0      	movs	r0, #224	; 0xe0
 8001e7c:	f7ff fe5c 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001e80:	200f      	movs	r0, #15
 8001e82:	f7ff fe77 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001e86:	2031      	movs	r0, #49	; 0x31
 8001e88:	f7ff fe74 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001e8c:	202b      	movs	r0, #43	; 0x2b
 8001e8e:	f7ff fe71 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001e92:	200c      	movs	r0, #12
 8001e94:	f7ff fe6e 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001e98:	200e      	movs	r0, #14
 8001e9a:	f7ff fe6b 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001e9e:	2008      	movs	r0, #8
 8001ea0:	f7ff fe68 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001ea4:	204e      	movs	r0, #78	; 0x4e
 8001ea6:	f7ff fe65 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001eaa:	20f1      	movs	r0, #241	; 0xf1
 8001eac:	f7ff fe62 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001eb0:	2037      	movs	r0, #55	; 0x37
 8001eb2:	f7ff fe5f 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001eb6:	2007      	movs	r0, #7
 8001eb8:	f7ff fe5c 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001ebc:	2010      	movs	r0, #16
 8001ebe:	f7ff fe59 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001ec2:	2003      	movs	r0, #3
 8001ec4:	f7ff fe56 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001ec8:	200e      	movs	r0, #14
 8001eca:	f7ff fe53 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001ece:	2009      	movs	r0, #9
 8001ed0:	f7ff fe50 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff fe4d 	bl	8001b74 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001eda:	20e1      	movs	r0, #225	; 0xe1
 8001edc:	f7ff fe2c 	bl	8001b38 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7ff fe47 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001ee6:	200e      	movs	r0, #14
 8001ee8:	f7ff fe44 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001eec:	2014      	movs	r0, #20
 8001eee:	f7ff fe41 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	f7ff fe3e 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001ef8:	2011      	movs	r0, #17
 8001efa:	f7ff fe3b 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001efe:	2007      	movs	r0, #7
 8001f00:	f7ff fe38 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001f04:	2031      	movs	r0, #49	; 0x31
 8001f06:	f7ff fe35 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001f0a:	20c1      	movs	r0, #193	; 0xc1
 8001f0c:	f7ff fe32 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001f10:	2048      	movs	r0, #72	; 0x48
 8001f12:	f7ff fe2f 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001f16:	2008      	movs	r0, #8
 8001f18:	f7ff fe2c 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001f1c:	200f      	movs	r0, #15
 8001f1e:	f7ff fe29 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001f22:	200c      	movs	r0, #12
 8001f24:	f7ff fe26 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001f28:	2031      	movs	r0, #49	; 0x31
 8001f2a:	f7ff fe23 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001f2e:	2036      	movs	r0, #54	; 0x36
 8001f30:	f7ff fe20 	bl	8001b74 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001f34:	200f      	movs	r0, #15
 8001f36:	f7ff fe1d 	bl	8001b74 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001f3a:	2011      	movs	r0, #17
 8001f3c:	f7ff fdfc 	bl	8001b38 <ILI9341_Write_Command>
HAL_Delay(120);
 8001f40:	2078      	movs	r0, #120	; 0x78
 8001f42:	f000 fad1 	bl	80024e8 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001f46:	2029      	movs	r0, #41	; 0x29
 8001f48:	f7ff fdf6 	bl	8001b38 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f7ff fe97 	bl	8001c80 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8001f52:	200a      	movs	r0, #10
 8001f54:	f000 fac8 	bl	80024e8 <HAL_Delay>
//
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001f5c:	b5b0      	push	{r4, r5, r7, lr}
 8001f5e:	b08c      	sub	sp, #48	; 0x30
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	80fb      	strh	r3, [r7, #6]
 8001f68:	466b      	mov	r3, sp
 8001f6a:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f78:	d202      	bcs.n	8001f80 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7e:	e002      	b.n	8001f86 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001f80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001f86:	2201      	movs	r2, #1
 8001f88:	2140      	movs	r1, #64	; 0x40
 8001f8a:	483d      	ldr	r0, [pc, #244]	; (8002080 <ILI9341_Draw_Colour_Burst+0x124>)
 8001f8c:	f000 fd96 	bl	8002abc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2110      	movs	r1, #16
 8001f94:	483a      	ldr	r0, [pc, #232]	; (8002080 <ILI9341_Draw_Colour_Burst+0x124>)
 8001f96:	f000 fd91 	bl	8002abc <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8001fa4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001fa6:	4623      	mov	r3, r4
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	4620      	mov	r0, r4
 8001fae:	f04f 0100 	mov.w	r1, #0
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	00cb      	lsls	r3, r1, #3
 8001fbc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001fc0:	00c2      	lsls	r2, r0, #3
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f04f 0100 	mov.w	r1, #0
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	00cb      	lsls	r3, r1, #3
 8001fd2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001fd6:	00c2      	lsls	r2, r0, #3
 8001fd8:	1de3      	adds	r3, r4, #7
 8001fda:	08db      	lsrs	r3, r3, #3
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	ebad 0d03 	sub.w	sp, sp, r3
 8001fe2:	466b      	mov	r3, sp
 8001fe4:	3300      	adds	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fec:	e00e      	b.n	800200c <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ff8:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	88fa      	ldrh	r2, [r7, #6]
 8002000:	b2d1      	uxtb	r1, r2
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002008:	3302      	adds	r3, #2
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
 800200c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	429a      	cmp	r2, r3
 8002012:	d3ec      	bcc.n	8001fee <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002022:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002028:	fbb3 f2f2 	udiv	r2, r3, r2
 800202c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800202e:	fb01 f202 	mul.w	r2, r1, r2
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d010      	beq.n	800205e <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800203c:	2300      	movs	r3, #0
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002040:	e009      	b.n	8002056 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002042:	69b9      	ldr	r1, [r7, #24]
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	b29a      	uxth	r2, r3
 8002048:	230a      	movs	r3, #10
 800204a:	480e      	ldr	r0, [pc, #56]	; (8002084 <ILI9341_Draw_Colour_Burst+0x128>)
 800204c:	f003 ff69 	bl	8005f22 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002052:	3301      	adds	r3, #1
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	429a      	cmp	r2, r3
 800205c:	d3f1      	bcc.n	8002042 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 800205e:	69b9      	ldr	r1, [r7, #24]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	b29a      	uxth	r2, r3
 8002064:	230a      	movs	r3, #10
 8002066:	4807      	ldr	r0, [pc, #28]	; (8002084 <ILI9341_Draw_Colour_Burst+0x128>)
 8002068:	f003 ff5b 	bl	8005f22 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	2110      	movs	r1, #16
 8002070:	4803      	ldr	r0, [pc, #12]	; (8002080 <ILI9341_Draw_Colour_Burst+0x124>)
 8002072:	f000 fd23 	bl	8002abc <HAL_GPIO_WritePin>
 8002076:	46ad      	mov	sp, r5
}
 8002078:	bf00      	nop
 800207a:	3730      	adds	r7, #48	; 0x30
 800207c:	46bd      	mov	sp, r7
 800207e:	bdb0      	pop	{r4, r5, r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	20000144 	.word	0x20000144

08002088 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <ILI9341_Fill_Screen+0x44>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	b29a      	uxth	r2, r3
 8002098:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <ILI9341_Fill_Screen+0x48>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	b29b      	uxth	r3, r3
 800209e:	2100      	movs	r1, #0
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7ff fd85 	bl	8001bb0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <ILI9341_Fill_Screen+0x44>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <ILI9341_Fill_Screen+0x48>)
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	fb03 f302 	mul.w	r3, r3, r2
 80020b8:	461a      	mov	r2, r3
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ff4c 	bl	8001f5c <ILI9341_Draw_Colour_Burst>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	2000000a 	.word	0x2000000a
 80020d0:	20000008 	.word	0x20000008

080020d4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	80fb      	strh	r3, [r7, #6]
 80020de:	460b      	mov	r3, r1
 80020e0:	80bb      	strh	r3, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80020e6:	4b5b      	ldr	r3, [pc, #364]	; (8002254 <ILI9341_Draw_Pixel+0x180>)
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	88fa      	ldrh	r2, [r7, #6]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	f080 80ac 	bcs.w	800224c <ILI9341_Draw_Pixel+0x178>
 80020f4:	4b58      	ldr	r3, [pc, #352]	; (8002258 <ILI9341_Draw_Pixel+0x184>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	88ba      	ldrh	r2, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	f080 80a5 	bcs.w	800224c <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002102:	2200      	movs	r2, #0
 8002104:	2140      	movs	r1, #64	; 0x40
 8002106:	4855      	ldr	r0, [pc, #340]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 8002108:	f000 fcd8 	bl	8002abc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800210c:	2200      	movs	r2, #0
 800210e:	2110      	movs	r1, #16
 8002110:	4852      	ldr	r0, [pc, #328]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 8002112:	f000 fcd3 	bl	8002abc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002116:	202a      	movs	r0, #42	; 0x2a
 8002118:	f7ff fcfc 	bl	8001b14 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800211c:	2201      	movs	r2, #1
 800211e:	2140      	movs	r1, #64	; 0x40
 8002120:	484e      	ldr	r0, [pc, #312]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 8002122:	f000 fccb 	bl	8002abc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002126:	2201      	movs	r2, #1
 8002128:	2110      	movs	r1, #16
 800212a:	484c      	ldr	r0, [pc, #304]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 800212c:	f000 fcc6 	bl	8002abc <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002130:	2200      	movs	r2, #0
 8002132:	2110      	movs	r1, #16
 8002134:	4849      	ldr	r0, [pc, #292]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 8002136:	f000 fcc1 	bl	8002abc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	b29b      	uxth	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	753b      	strb	r3, [r7, #20]
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	757b      	strb	r3, [r7, #21]
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	3301      	adds	r3, #1
 800214e:	121b      	asrs	r3, r3, #8
 8002150:	b2db      	uxtb	r3, r3
 8002152:	75bb      	strb	r3, [r7, #22]
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	3301      	adds	r3, #1
 800215a:	b2db      	uxtb	r3, r3
 800215c:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800215e:	f107 0114 	add.w	r1, r7, #20
 8002162:	2301      	movs	r3, #1
 8002164:	2204      	movs	r2, #4
 8002166:	483e      	ldr	r0, [pc, #248]	; (8002260 <ILI9341_Draw_Pixel+0x18c>)
 8002168:	f003 fedb 	bl	8005f22 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800216c:	2201      	movs	r2, #1
 800216e:	2110      	movs	r1, #16
 8002170:	483a      	ldr	r0, [pc, #232]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 8002172:	f000 fca3 	bl	8002abc <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002176:	2200      	movs	r2, #0
 8002178:	2140      	movs	r1, #64	; 0x40
 800217a:	4838      	ldr	r0, [pc, #224]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 800217c:	f000 fc9e 	bl	8002abc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002180:	2200      	movs	r2, #0
 8002182:	2110      	movs	r1, #16
 8002184:	4835      	ldr	r0, [pc, #212]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 8002186:	f000 fc99 	bl	8002abc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800218a:	202b      	movs	r0, #43	; 0x2b
 800218c:	f7ff fcc2 	bl	8001b14 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002190:	2201      	movs	r2, #1
 8002192:	2140      	movs	r1, #64	; 0x40
 8002194:	4831      	ldr	r0, [pc, #196]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 8002196:	f000 fc91 	bl	8002abc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800219a:	2201      	movs	r2, #1
 800219c:	2110      	movs	r1, #16
 800219e:	482f      	ldr	r0, [pc, #188]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 80021a0:	f000 fc8c 	bl	8002abc <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2110      	movs	r1, #16
 80021a8:	482c      	ldr	r0, [pc, #176]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 80021aa:	f000 fc87 	bl	8002abc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80021ae:	88bb      	ldrh	r3, [r7, #4]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	743b      	strb	r3, [r7, #16]
 80021b8:	88bb      	ldrh	r3, [r7, #4]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	747b      	strb	r3, [r7, #17]
 80021be:	88bb      	ldrh	r3, [r7, #4]
 80021c0:	3301      	adds	r3, #1
 80021c2:	121b      	asrs	r3, r3, #8
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	74bb      	strb	r3, [r7, #18]
 80021c8:	88bb      	ldrh	r3, [r7, #4]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80021d2:	f107 0110 	add.w	r1, r7, #16
 80021d6:	2301      	movs	r3, #1
 80021d8:	2204      	movs	r2, #4
 80021da:	4821      	ldr	r0, [pc, #132]	; (8002260 <ILI9341_Draw_Pixel+0x18c>)
 80021dc:	f003 fea1 	bl	8005f22 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80021e0:	2201      	movs	r2, #1
 80021e2:	2110      	movs	r1, #16
 80021e4:	481d      	ldr	r0, [pc, #116]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 80021e6:	f000 fc69 	bl	8002abc <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80021ea:	2200      	movs	r2, #0
 80021ec:	2140      	movs	r1, #64	; 0x40
 80021ee:	481b      	ldr	r0, [pc, #108]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 80021f0:	f000 fc64 	bl	8002abc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80021f4:	2200      	movs	r2, #0
 80021f6:	2110      	movs	r1, #16
 80021f8:	4818      	ldr	r0, [pc, #96]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 80021fa:	f000 fc5f 	bl	8002abc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80021fe:	202c      	movs	r0, #44	; 0x2c
 8002200:	f7ff fc88 	bl	8001b14 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002204:	2201      	movs	r2, #1
 8002206:	2140      	movs	r1, #64	; 0x40
 8002208:	4814      	ldr	r0, [pc, #80]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 800220a:	f000 fc57 	bl	8002abc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800220e:	2201      	movs	r2, #1
 8002210:	2110      	movs	r1, #16
 8002212:	4812      	ldr	r0, [pc, #72]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 8002214:	f000 fc52 	bl	8002abc <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002218:	2200      	movs	r2, #0
 800221a:	2110      	movs	r1, #16
 800221c:	480f      	ldr	r0, [pc, #60]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 800221e:	f000 fc4d 	bl	8002abc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002222:	887b      	ldrh	r3, [r7, #2]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	b29b      	uxth	r3, r3
 8002228:	b2db      	uxtb	r3, r3
 800222a:	733b      	strb	r3, [r7, #12]
 800222c:	887b      	ldrh	r3, [r7, #2]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002232:	f107 010c 	add.w	r1, r7, #12
 8002236:	2301      	movs	r3, #1
 8002238:	2202      	movs	r2, #2
 800223a:	4809      	ldr	r0, [pc, #36]	; (8002260 <ILI9341_Draw_Pixel+0x18c>)
 800223c:	f003 fe71 	bl	8005f22 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002240:	2201      	movs	r2, #1
 8002242:	2110      	movs	r1, #16
 8002244:	4805      	ldr	r0, [pc, #20]	; (800225c <ILI9341_Draw_Pixel+0x188>)
 8002246:	f000 fc39 	bl	8002abc <HAL_GPIO_WritePin>
 800224a:	e000      	b.n	800224e <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800224c:	bf00      	nop
	
}
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	2000000a 	.word	0x2000000a
 8002258:	20000008 	.word	0x20000008
 800225c:	40021000 	.word	0x40021000
 8002260:	20000144 	.word	0x20000144

08002264 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4604      	mov	r4, r0
 800226c:	4608      	mov	r0, r1
 800226e:	4611      	mov	r1, r2
 8002270:	461a      	mov	r2, r3
 8002272:	4623      	mov	r3, r4
 8002274:	80fb      	strh	r3, [r7, #6]
 8002276:	4603      	mov	r3, r0
 8002278:	80bb      	strh	r3, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	807b      	strh	r3, [r7, #2]
 800227e:	4613      	mov	r3, r2
 8002280:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <ILI9341_Draw_Rectangle+0xb0>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	88fa      	ldrh	r2, [r7, #6]
 800228a:	429a      	cmp	r2, r3
 800228c:	d23d      	bcs.n	800230a <ILI9341_Draw_Rectangle+0xa6>
 800228e:	4b22      	ldr	r3, [pc, #136]	; (8002318 <ILI9341_Draw_Rectangle+0xb4>)
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	88ba      	ldrh	r2, [r7, #4]
 8002296:	429a      	cmp	r2, r3
 8002298:	d237      	bcs.n	800230a <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800229a:	88fa      	ldrh	r2, [r7, #6]
 800229c:	887b      	ldrh	r3, [r7, #2]
 800229e:	4413      	add	r3, r2
 80022a0:	4a1c      	ldr	r2, [pc, #112]	; (8002314 <ILI9341_Draw_Rectangle+0xb0>)
 80022a2:	8812      	ldrh	r2, [r2, #0]
 80022a4:	b292      	uxth	r2, r2
 80022a6:	4293      	cmp	r3, r2
 80022a8:	dd05      	ble.n	80022b6 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <ILI9341_Draw_Rectangle+0xb0>)
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80022b6:	88ba      	ldrh	r2, [r7, #4]
 80022b8:	883b      	ldrh	r3, [r7, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	4a16      	ldr	r2, [pc, #88]	; (8002318 <ILI9341_Draw_Rectangle+0xb4>)
 80022be:	8812      	ldrh	r2, [r2, #0]
 80022c0:	b292      	uxth	r2, r2
 80022c2:	4293      	cmp	r3, r2
 80022c4:	dd05      	ble.n	80022d2 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <ILI9341_Draw_Rectangle+0xb4>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	88bb      	ldrh	r3, [r7, #4]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80022d2:	88fa      	ldrh	r2, [r7, #6]
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	4413      	add	r3, r2
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29c      	uxth	r4, r3
 80022de:	88ba      	ldrh	r2, [r7, #4]
 80022e0:	883b      	ldrh	r3, [r7, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	88b9      	ldrh	r1, [r7, #4]
 80022ec:	88f8      	ldrh	r0, [r7, #6]
 80022ee:	4622      	mov	r2, r4
 80022f0:	f7ff fc5e 	bl	8001bb0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80022f4:	883b      	ldrh	r3, [r7, #0]
 80022f6:	887a      	ldrh	r2, [r7, #2]
 80022f8:	fb02 f303 	mul.w	r3, r2, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	8b3b      	ldrh	r3, [r7, #24]
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fe2a 	bl	8001f5c <ILI9341_Draw_Colour_Burst>
 8002308:	e000      	b.n	800230c <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800230a:	bf00      	nop
}
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bd90      	pop	{r4, r7, pc}
 8002312:	bf00      	nop
 8002314:	2000000a 	.word	0x2000000a
 8002318:	20000008 	.word	0x20000008

0800231c <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	int i =0;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8002328:	e036      	b.n	8002398 <speed_test_LCD+0x7c>
	{
		i ++;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3301      	adds	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002344:	4819      	ldr	r0, [pc, #100]	; (80023ac <speed_test_LCD+0x90>)
 8002346:	f003 fd4e 	bl	8005de6 <HAL_RNG_GetRandomNumber>
 800234a:	6138      	str	r0, [r7, #16]
		xr = random_num;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002350:	4816      	ldr	r0, [pc, #88]	; (80023ac <speed_test_LCD+0x90>)
 8002352:	f003 fd48 	bl	8005de6 <HAL_RNG_GetRandomNumber>
 8002356:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 800235c:	4813      	ldr	r0, [pc, #76]	; (80023ac <speed_test_LCD+0x90>)
 800235e:	f003 fd42 	bl	8005de6 <HAL_RNG_GetRandomNumber>
 8002362:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002368:	4810      	ldr	r0, [pc, #64]	; (80023ac <speed_test_LCD+0x90>)
 800236a:	f003 fd3c 	bl	8005de6 <HAL_RNG_GetRandomNumber>
 800236e:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8002374:	89fb      	ldrh	r3, [r7, #14]
 8002376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800237a:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 800237c:	89bb      	ldrh	r3, [r7, #12]
 800237e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002382:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8002384:	897b      	ldrh	r3, [r7, #10]
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 800238c:	893b      	ldrh	r3, [r7, #8]
 800238e:	897a      	ldrh	r2, [r7, #10]
 8002390:	89b9      	ldrh	r1, [r7, #12]
 8002392:	89f8      	ldrh	r0, [r7, #14]
 8002394:	f7ff fa66 	bl	8001864 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	429a      	cmp	r2, r3
 800239e:	ddc4      	ble.n	800232a <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000280 	.word	0x20000280

080023b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023b4:	480d      	ldr	r0, [pc, #52]	; (80023ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023b6:	490e      	ldr	r1, [pc, #56]	; (80023f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023b8:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023bc:	e002      	b.n	80023c4 <LoopCopyDataInit>

080023be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c2:	3304      	adds	r3, #4

080023c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c8:	d3f9      	bcc.n	80023be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023cc:	4c0b      	ldr	r4, [pc, #44]	; (80023fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d0:	e001      	b.n	80023d6 <LoopFillZerobss>

080023d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d4:	3204      	adds	r2, #4

080023d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d8:	d3fb      	bcc.n	80023d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023da:	f7ff fa31 	bl	8001840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023de:	f008 fa3f 	bl	800a860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023e2:	f7fe fa75 	bl	80008d0 <main>
  bx  lr    
 80023e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80023f4:	0800acec 	.word	0x0800acec
  ldr r2, =_sbss
 80023f8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80023fc:	20000a68 	.word	0x20000a68

08002400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <ADC_IRQHandler>
	...

08002404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002408:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <HAL_Init+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <HAL_Init+0x40>)
 800240e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_Init+0x40>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <HAL_Init+0x40>)
 800241a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800241e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_Init+0x40>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a07      	ldr	r2, [pc, #28]	; (8002444 <HAL_Init+0x40>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242c:	2003      	movs	r0, #3
 800242e:	f000 f94f 	bl	80026d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002432:	2000      	movs	r0, #0
 8002434:	f000 f808 	bl	8002448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002438:	f7fe febe 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023c00 	.word	0x40023c00

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_InitTick+0x54>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_InitTick+0x58>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f967 	bl	800273a <HAL_SYSTICK_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e00e      	b.n	8002494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d80a      	bhi.n	8002492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247c:	2200      	movs	r2, #0
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002484:	f000 f92f 	bl	80026e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <HAL_InitTick+0x5c>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000004 	.word	0x20000004
 80024a0:	20000010 	.word	0x20000010
 80024a4:	2000000c 	.word	0x2000000c

080024a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_IncTick+0x20>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_IncTick+0x24>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <HAL_IncTick+0x24>)
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000010 	.word	0x20000010
 80024cc:	20000378 	.word	0x20000378

080024d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <HAL_GetTick+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000378 	.word	0x20000378

080024e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f0:	f7ff ffee 	bl	80024d0 <HAL_GetTick>
 80024f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002500:	d005      	beq.n	800250e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_Delay+0x44>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800250e:	bf00      	nop
 8002510:	f7ff ffde 	bl	80024d0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	429a      	cmp	r2, r3
 800251e:	d8f7      	bhi.n	8002510 <HAL_Delay+0x28>
  {
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000010 	.word	0x20000010

08002530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800254c:	4013      	ands	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800255c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002562:	4a04      	ldr	r2, [pc, #16]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	60d3      	str	r3, [r2, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <__NVIC_GetPriorityGrouping+0x18>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	f003 0307 	and.w	r3, r3, #7
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	db0b      	blt.n	80025be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	4907      	ldr	r1, [pc, #28]	; (80025cc <__NVIC_EnableIRQ+0x38>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2001      	movs	r0, #1
 80025b6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	6039      	str	r1, [r7, #0]
 80025da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	db0a      	blt.n	80025fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	490c      	ldr	r1, [pc, #48]	; (800261c <__NVIC_SetPriority+0x4c>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	440b      	add	r3, r1
 80025f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f8:	e00a      	b.n	8002610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4908      	ldr	r1, [pc, #32]	; (8002620 <__NVIC_SetPriority+0x50>)
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	3b04      	subs	r3, #4
 8002608:	0112      	lsls	r2, r2, #4
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	440b      	add	r3, r1
 800260e:	761a      	strb	r2, [r3, #24]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000e100 	.word	0xe000e100
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f1c3 0307 	rsb	r3, r3, #7
 800263e:	2b04      	cmp	r3, #4
 8002640:	bf28      	it	cs
 8002642:	2304      	movcs	r3, #4
 8002644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3304      	adds	r3, #4
 800264a:	2b06      	cmp	r3, #6
 800264c:	d902      	bls.n	8002654 <NVIC_EncodePriority+0x30>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3b03      	subs	r3, #3
 8002652:	e000      	b.n	8002656 <NVIC_EncodePriority+0x32>
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	401a      	ands	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800266c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	43d9      	mvns	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	4313      	orrs	r3, r2
         );
}
 800267e:	4618      	mov	r0, r3
 8002680:	3724      	adds	r7, #36	; 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800269c:	d301      	bcc.n	80026a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269e:	2301      	movs	r3, #1
 80026a0:	e00f      	b.n	80026c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <SysTick_Config+0x40>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026aa:	210f      	movs	r1, #15
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026b0:	f7ff ff8e 	bl	80025d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <SysTick_Config+0x40>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ba:	4b04      	ldr	r3, [pc, #16]	; (80026cc <SysTick_Config+0x40>)
 80026bc:	2207      	movs	r2, #7
 80026be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	e000e010 	.word	0xe000e010

080026d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ff29 	bl	8002530 <__NVIC_SetPriorityGrouping>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	4603      	mov	r3, r0
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f8:	f7ff ff3e 	bl	8002578 <__NVIC_GetPriorityGrouping>
 80026fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	6978      	ldr	r0, [r7, #20]
 8002704:	f7ff ff8e 	bl	8002624 <NVIC_EncodePriority>
 8002708:	4602      	mov	r2, r0
 800270a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff5d 	bl	80025d0 <__NVIC_SetPriority>
}
 8002716:	bf00      	nop
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff31 	bl	8002594 <__NVIC_EnableIRQ>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ffa2 	bl	800268c <SysTick_Config>
 8002748:	4603      	mov	r3, r0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	; 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	e16b      	b.n	8002a48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002770:	2201      	movs	r2, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	429a      	cmp	r2, r3
 800278a:	f040 815a 	bne.w	8002a42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d005      	beq.n	80027a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d130      	bne.n	8002808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	2203      	movs	r2, #3
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027dc:	2201      	movs	r2, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 0201 	and.w	r2, r3, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b03      	cmp	r3, #3
 8002812:	d017      	beq.n	8002844 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d123      	bne.n	8002898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	08da      	lsrs	r2, r3, #3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3208      	adds	r2, #8
 8002858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	220f      	movs	r2, #15
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	08da      	lsrs	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3208      	adds	r2, #8
 8002892:	69b9      	ldr	r1, [r7, #24]
 8002894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0203 	and.w	r2, r3, #3
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80b4 	beq.w	8002a42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	4b60      	ldr	r3, [pc, #384]	; (8002a60 <HAL_GPIO_Init+0x30c>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4a5f      	ldr	r2, [pc, #380]	; (8002a60 <HAL_GPIO_Init+0x30c>)
 80028e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ea:	4b5d      	ldr	r3, [pc, #372]	; (8002a60 <HAL_GPIO_Init+0x30c>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028f6:	4a5b      	ldr	r2, [pc, #364]	; (8002a64 <HAL_GPIO_Init+0x310>)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	089b      	lsrs	r3, r3, #2
 80028fc:	3302      	adds	r3, #2
 80028fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	220f      	movs	r2, #15
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a52      	ldr	r2, [pc, #328]	; (8002a68 <HAL_GPIO_Init+0x314>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d02b      	beq.n	800297a <HAL_GPIO_Init+0x226>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a51      	ldr	r2, [pc, #324]	; (8002a6c <HAL_GPIO_Init+0x318>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d025      	beq.n	8002976 <HAL_GPIO_Init+0x222>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a50      	ldr	r2, [pc, #320]	; (8002a70 <HAL_GPIO_Init+0x31c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d01f      	beq.n	8002972 <HAL_GPIO_Init+0x21e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4f      	ldr	r2, [pc, #316]	; (8002a74 <HAL_GPIO_Init+0x320>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d019      	beq.n	800296e <HAL_GPIO_Init+0x21a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a4e      	ldr	r2, [pc, #312]	; (8002a78 <HAL_GPIO_Init+0x324>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d013      	beq.n	800296a <HAL_GPIO_Init+0x216>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a4d      	ldr	r2, [pc, #308]	; (8002a7c <HAL_GPIO_Init+0x328>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00d      	beq.n	8002966 <HAL_GPIO_Init+0x212>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a4c      	ldr	r2, [pc, #304]	; (8002a80 <HAL_GPIO_Init+0x32c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d007      	beq.n	8002962 <HAL_GPIO_Init+0x20e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a4b      	ldr	r2, [pc, #300]	; (8002a84 <HAL_GPIO_Init+0x330>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d101      	bne.n	800295e <HAL_GPIO_Init+0x20a>
 800295a:	2307      	movs	r3, #7
 800295c:	e00e      	b.n	800297c <HAL_GPIO_Init+0x228>
 800295e:	2308      	movs	r3, #8
 8002960:	e00c      	b.n	800297c <HAL_GPIO_Init+0x228>
 8002962:	2306      	movs	r3, #6
 8002964:	e00a      	b.n	800297c <HAL_GPIO_Init+0x228>
 8002966:	2305      	movs	r3, #5
 8002968:	e008      	b.n	800297c <HAL_GPIO_Init+0x228>
 800296a:	2304      	movs	r3, #4
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x228>
 800296e:	2303      	movs	r3, #3
 8002970:	e004      	b.n	800297c <HAL_GPIO_Init+0x228>
 8002972:	2302      	movs	r3, #2
 8002974:	e002      	b.n	800297c <HAL_GPIO_Init+0x228>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_GPIO_Init+0x228>
 800297a:	2300      	movs	r3, #0
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	f002 0203 	and.w	r2, r2, #3
 8002982:	0092      	lsls	r2, r2, #2
 8002984:	4093      	lsls	r3, r2
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800298c:	4935      	ldr	r1, [pc, #212]	; (8002a64 <HAL_GPIO_Init+0x310>)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3302      	adds	r3, #2
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800299a:	4b3b      	ldr	r3, [pc, #236]	; (8002a88 <HAL_GPIO_Init+0x334>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029be:	4a32      	ldr	r2, [pc, #200]	; (8002a88 <HAL_GPIO_Init+0x334>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029c4:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <HAL_GPIO_Init+0x334>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029e8:	4a27      	ldr	r2, [pc, #156]	; (8002a88 <HAL_GPIO_Init+0x334>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <HAL_GPIO_Init+0x334>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a12:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <HAL_GPIO_Init+0x334>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_GPIO_Init+0x334>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a3c:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <HAL_GPIO_Init+0x334>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3301      	adds	r3, #1
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b0f      	cmp	r3, #15
 8002a4c:	f67f ae90 	bls.w	8002770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40013800 	.word	0x40013800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020c00 	.word	0x40020c00
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40021400 	.word	0x40021400
 8002a80:	40021800 	.word	0x40021800
 8002a84:	40021c00 	.word	0x40021c00
 8002a88:	40013c00 	.word	0x40013c00

08002a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	887b      	ldrh	r3, [r7, #2]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	e001      	b.n	8002aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	807b      	strh	r3, [r7, #2]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002acc:	787b      	ldrb	r3, [r7, #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ad8:	e003      	b.n	8002ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ada:	887b      	ldrh	r3, [r7, #2]
 8002adc:	041a      	lsls	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	619a      	str	r2, [r3, #24]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b085      	sub	sp, #20
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	460b      	mov	r3, r1
 8002af8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b00:	887a      	ldrh	r2, [r7, #2]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4013      	ands	r3, r2
 8002b06:	041a      	lsls	r2, r3, #16
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	43d9      	mvns	r1, r3
 8002b0c:	887b      	ldrh	r3, [r7, #2]
 8002b0e:	400b      	ands	r3, r1
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	619a      	str	r2, [r3, #24]
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b24:	b08f      	sub	sp, #60	; 0x3c
 8002b26:	af0a      	add	r7, sp, #40	; 0x28
 8002b28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e054      	b.n	8002bde <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f007 fbd6 	bl	800a300 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2203      	movs	r2, #3
 8002b58:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d102      	bne.n	8002b6e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f004 fd78 	bl	8007668 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	687e      	ldr	r6, [r7, #4]
 8002b80:	466d      	mov	r5, sp
 8002b82:	f106 0410 	add.w	r4, r6, #16
 8002b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b92:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b96:	1d33      	adds	r3, r6, #4
 8002b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b9a:	6838      	ldr	r0, [r7, #0]
 8002b9c:	f004 fcf2 	bl	8007584 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f004 fd6f 	bl	800768a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	687e      	ldr	r6, [r7, #4]
 8002bb4:	466d      	mov	r5, sp
 8002bb6:	f106 0410 	add.w	r4, r6, #16
 8002bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bca:	1d33      	adds	r3, r6, #4
 8002bcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bce:	6838      	ldr	r0, [r7, #0]
 8002bd0:	f004 fe82 	bl	80078d8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002be6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002be6:	b590      	push	{r4, r7, lr}
 8002be8:	b089      	sub	sp, #36	; 0x24
 8002bea:	af04      	add	r7, sp, #16
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	4608      	mov	r0, r1
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	70fb      	strb	r3, [r7, #3]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	70bb      	strb	r3, [r7, #2]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_HCD_HC_Init+0x28>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e076      	b.n	8002cfc <HAL_HCD_HC_Init+0x116>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	333d      	adds	r3, #61	; 0x3d
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	3338      	adds	r3, #56	; 0x38
 8002c36:	787a      	ldrb	r2, [r7, #1]
 8002c38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3340      	adds	r3, #64	; 0x40
 8002c48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002c4a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3339      	adds	r3, #57	; 0x39
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	333f      	adds	r3, #63	; 0x3f
 8002c6c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002c70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	78ba      	ldrb	r2, [r7, #2]
 8002c76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c7a:	b2d0      	uxtb	r0, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	212c      	movs	r1, #44	; 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	333a      	adds	r3, #58	; 0x3a
 8002c88:	4602      	mov	r2, r0
 8002c8a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002c8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	da09      	bge.n	8002ca8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	333b      	adds	r3, #59	; 0x3b
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e008      	b.n	8002cba <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	333b      	adds	r3, #59	; 0x3b
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	333c      	adds	r3, #60	; 0x3c
 8002cc8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ccc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	787c      	ldrb	r4, [r7, #1]
 8002cd4:	78ba      	ldrb	r2, [r7, #2]
 8002cd6:	78f9      	ldrb	r1, [r7, #3]
 8002cd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002cda:	9302      	str	r3, [sp, #8]
 8002cdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	4623      	mov	r3, r4
 8002cea:	f004 ff77 	bl	8007bdc <USB_HC_Init>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd90      	pop	{r4, r7, pc}

08002d04 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_HCD_HC_Halt+0x1e>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e00f      	b.n	8002d42 <HAL_HCD_HC_Halt+0x3e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f005 f9b3 	bl	800809e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	4608      	mov	r0, r1
 8002d56:	4611      	mov	r1, r2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	70fb      	strb	r3, [r7, #3]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	70bb      	strb	r3, [r7, #2]
 8002d62:	4613      	mov	r3, r2
 8002d64:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	212c      	movs	r1, #44	; 0x2c
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	333b      	adds	r3, #59	; 0x3b
 8002d74:	78ba      	ldrb	r2, [r7, #2]
 8002d76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	333f      	adds	r3, #63	; 0x3f
 8002d86:	787a      	ldrb	r2, [r7, #1]
 8002d88:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002d8a:	7c3b      	ldrb	r3, [r7, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d112      	bne.n	8002db6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3342      	adds	r3, #66	; 0x42
 8002d9e:	2203      	movs	r2, #3
 8002da0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	333d      	adds	r3, #61	; 0x3d
 8002db0:	7f3a      	ldrb	r2, [r7, #28]
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e008      	b.n	8002dc8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3342      	adds	r3, #66	; 0x42
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002dc8:	787b      	ldrb	r3, [r7, #1]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	f200 80c6 	bhi.w	8002f5c <HAL_HCD_HC_SubmitRequest+0x210>
 8002dd0:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd6:	bf00      	nop
 8002dd8:	08002de9 	.word	0x08002de9
 8002ddc:	08002f49 	.word	0x08002f49
 8002de0:	08002e4d 	.word	0x08002e4d
 8002de4:	08002ecb 	.word	0x08002ecb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002de8:	7c3b      	ldrb	r3, [r7, #16]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	f040 80b8 	bne.w	8002f60 <HAL_HCD_HC_SubmitRequest+0x214>
 8002df0:	78bb      	ldrb	r3, [r7, #2]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 80b4 	bne.w	8002f60 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002df8:	8b3b      	ldrh	r3, [r7, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d108      	bne.n	8002e10 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	3355      	adds	r3, #85	; 0x55
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3355      	adds	r3, #85	; 0x55
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3342      	adds	r3, #66	; 0x42
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002e36:	e093      	b.n	8002f60 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	3342      	adds	r3, #66	; 0x42
 8002e46:	2202      	movs	r2, #2
 8002e48:	701a      	strb	r2, [r3, #0]
      break;
 8002e4a:	e089      	b.n	8002f60 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002e4c:	78bb      	ldrb	r3, [r7, #2]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d11d      	bne.n	8002e8e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3355      	adds	r3, #85	; 0x55
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3342      	adds	r3, #66	; 0x42
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002e78:	e073      	b.n	8002f62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	3342      	adds	r3, #66	; 0x42
 8002e88:	2202      	movs	r2, #2
 8002e8a:	701a      	strb	r2, [r3, #0]
      break;
 8002e8c:	e069      	b.n	8002f62 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3354      	adds	r3, #84	; 0x54
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	3342      	adds	r3, #66	; 0x42
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
      break;
 8002eb4:	e055      	b.n	8002f62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3342      	adds	r3, #66	; 0x42
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	701a      	strb	r2, [r3, #0]
      break;
 8002ec8:	e04b      	b.n	8002f62 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002eca:	78bb      	ldrb	r3, [r7, #2]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d11d      	bne.n	8002f0c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3355      	adds	r3, #85	; 0x55
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	212c      	movs	r1, #44	; 0x2c
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	3342      	adds	r3, #66	; 0x42
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002ef6:	e034      	b.n	8002f62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	3342      	adds	r3, #66	; 0x42
 8002f06:	2202      	movs	r2, #2
 8002f08:	701a      	strb	r2, [r3, #0]
      break;
 8002f0a:	e02a      	b.n	8002f62 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	212c      	movs	r1, #44	; 0x2c
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	3354      	adds	r3, #84	; 0x54
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	212c      	movs	r1, #44	; 0x2c
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3342      	adds	r3, #66	; 0x42
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
      break;
 8002f32:	e016      	b.n	8002f62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	212c      	movs	r1, #44	; 0x2c
 8002f3a:	fb01 f303 	mul.w	r3, r1, r3
 8002f3e:	4413      	add	r3, r2
 8002f40:	3342      	adds	r3, #66	; 0x42
 8002f42:	2202      	movs	r2, #2
 8002f44:	701a      	strb	r2, [r3, #0]
      break;
 8002f46:	e00c      	b.n	8002f62 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	212c      	movs	r1, #44	; 0x2c
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	3342      	adds	r3, #66	; 0x42
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
      break;
 8002f5a:	e002      	b.n	8002f62 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002f5c:	bf00      	nop
 8002f5e:	e000      	b.n	8002f62 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002f60:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	212c      	movs	r1, #44	; 0x2c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3344      	adds	r3, #68	; 0x44
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	8b3a      	ldrh	r2, [r7, #24]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	202c      	movs	r0, #44	; 0x2c
 8002f7c:	fb00 f303 	mul.w	r3, r0, r3
 8002f80:	440b      	add	r3, r1
 8002f82:	334c      	adds	r3, #76	; 0x4c
 8002f84:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	3360      	adds	r3, #96	; 0x60
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	212c      	movs	r1, #44	; 0x2c
 8002f9e:	fb01 f303 	mul.w	r3, r1, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3350      	adds	r3, #80	; 0x50
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3339      	adds	r3, #57	; 0x39
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	212c      	movs	r1, #44	; 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3361      	adds	r3, #97	; 0x61
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	222c      	movs	r2, #44	; 0x2c
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	3338      	adds	r3, #56	; 0x38
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	18d1      	adds	r1, r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f004 ff06 	bl	8007df8 <USB_HC_StartXfer>
 8002fec:	4603      	mov	r3, r0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop

08002ff8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f004 fc1f 	bl	8007852 <USB_GetMode>
 8003014:	4603      	mov	r3, r0
 8003016:	2b01      	cmp	r3, #1
 8003018:	f040 80ef 	bne.w	80031fa <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f004 fc03 	bl	800782c <USB_ReadInterrupts>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80e5 	beq.w	80031f8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f004 fbfa 	bl	800782c <USB_ReadInterrupts>
 8003038:	4603      	mov	r3, r0
 800303a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800303e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003042:	d104      	bne.n	800304e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800304c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f004 fbea 	bl	800782c <USB_ReadInterrupts>
 8003058:	4603      	mov	r3, r0
 800305a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800305e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003062:	d104      	bne.n	800306e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800306c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f004 fbda 	bl	800782c <USB_ReadInterrupts>
 8003078:	4603      	mov	r3, r0
 800307a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800307e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003082:	d104      	bne.n	800308e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800308c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f004 fbca 	bl	800782c <USB_ReadInterrupts>
 8003098:	4603      	mov	r3, r0
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d103      	bne.n	80030aa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2202      	movs	r2, #2
 80030a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f004 fbbc 	bl	800782c <USB_ReadInterrupts>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030be:	d115      	bne.n	80030ec <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80030c8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d108      	bne.n	80030ec <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f007 f98e 	bl	800a3fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	4618      	mov	r0, r3
 80030e8:	f004 fcb2 	bl	8007a50 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f004 fb9b 	bl	800782c <USB_ReadInterrupts>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003100:	d102      	bne.n	8003108 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f001 f9ff 	bl	8004506 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f004 fb8d 	bl	800782c <USB_ReadInterrupts>
 8003112:	4603      	mov	r3, r0
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b08      	cmp	r3, #8
 800311a:	d106      	bne.n	800312a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f007 f951 	bl	800a3c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2208      	movs	r2, #8
 8003128:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f004 fb7c 	bl	800782c <USB_ReadInterrupts>
 8003134:	4603      	mov	r3, r0
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b10      	cmp	r3, #16
 800313c:	d101      	bne.n	8003142 <HAL_HCD_IRQHandler+0x14a>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_HCD_IRQHandler+0x14c>
 8003142:	2300      	movs	r3, #0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d012      	beq.n	800316e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0210 	bic.w	r2, r2, #16
 8003156:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f001 f902 	bl	8004362 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0210 	orr.w	r2, r2, #16
 800316c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f004 fb5a 	bl	800782c <USB_ReadInterrupts>
 8003178:	4603      	mov	r3, r0
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003182:	d13a      	bne.n	80031fa <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f004 ff77 	bl	800807c <USB_HC_ReadInterrupt>
 800318e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	e025      	b.n	80031e2 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	fa22 f303 	lsr.w	r3, r2, r3
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d018      	beq.n	80031dc <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c0:	d106      	bne.n	80031d0 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	4619      	mov	r1, r3
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f8ab 	bl	8003324 <HCD_HC_IN_IRQHandler>
 80031ce:	e005      	b.n	80031dc <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fcc6 	bl	8003b68 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	3301      	adds	r3, #1
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d3d4      	bcc.n	8003196 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f4:	615a      	str	r2, [r3, #20]
 80031f6:	e000      	b.n	80031fa <HAL_HCD_IRQHandler+0x202>
      return;
 80031f8:	bf00      	nop
    }
  }
}
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_HCD_Start+0x16>
 8003212:	2302      	movs	r3, #2
 8003214:	e013      	b.n	800323e <HAL_HCD_Start+0x3e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f004 fa0f 	bl	8007646 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2101      	movs	r1, #1
 800322e:	4618      	mov	r0, r3
 8003230:	f004 fc72 	bl	8007b18 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_HCD_Stop+0x16>
 8003258:	2302      	movs	r3, #2
 800325a:	e00d      	b.n	8003278 <HAL_HCD_Stop+0x32>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f005 f871 	bl	8008350 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f004 fc19 	bl	8007ac4 <USB_ResetPort>
 8003292:	4603      	mov	r3, r0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	3360      	adds	r3, #96	; 0x60
 80032b6:	781b      	ldrb	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	212c      	movs	r1, #44	; 0x2c
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	4413      	add	r3, r2
 80032dc:	3350      	adds	r3, #80	; 0x50
 80032de:	681b      	ldr	r3, [r3, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f004 fc5d 	bl	8007bb8 <USB_GetCurrentFrame>
 80032fe:	4603      	mov	r3, r0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f004 fc38 	bl	8007b8a <USB_GetHostSpeed>
 800331a:	4603      	mov	r3, r0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4413      	add	r3, r2
 8003346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b04      	cmp	r3, #4
 8003352:	d119      	bne.n	8003388 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003360:	461a      	mov	r2, r3
 8003362:	2304      	movs	r3, #4
 8003364:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4413      	add	r3, r2
 800336e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	0151      	lsls	r1, r2, #5
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	440a      	add	r2, r1
 800337c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003380:	f043 0302 	orr.w	r3, r3, #2
 8003384:	60d3      	str	r3, [r2, #12]
 8003386:	e101      	b.n	800358c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800339e:	d12b      	bne.n	80033f8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ac:	461a      	mov	r2, r3
 80033ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	212c      	movs	r1, #44	; 0x2c
 80033ba:	fb01 f303 	mul.w	r3, r1, r3
 80033be:	4413      	add	r3, r2
 80033c0:	3361      	adds	r3, #97	; 0x61
 80033c2:	2207      	movs	r2, #7
 80033c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	0151      	lsls	r1, r2, #5
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	440a      	add	r2, r1
 80033dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f004 fe54 	bl	800809e <USB_HC_Halt>
 80033f6:	e0c9      	b.n	800358c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0320 	and.w	r3, r3, #32
 800340a:	2b20      	cmp	r3, #32
 800340c:	d109      	bne.n	8003422 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4413      	add	r3, r2
 8003416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341a:	461a      	mov	r2, r3
 800341c:	2320      	movs	r3, #32
 800341e:	6093      	str	r3, [r2, #8]
 8003420:	e0b4      	b.n	800358c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4413      	add	r3, r2
 800342a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b08      	cmp	r3, #8
 8003436:	d133      	bne.n	80034a0 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	0151      	lsls	r1, r2, #5
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	440a      	add	r2, r1
 800344e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003452:	f043 0302 	orr.w	r3, r3, #2
 8003456:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	212c      	movs	r1, #44	; 0x2c
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	3361      	adds	r3, #97	; 0x61
 8003466:	2205      	movs	r2, #5
 8003468:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4413      	add	r3, r2
 8003472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003476:	461a      	mov	r2, r3
 8003478:	2310      	movs	r3, #16
 800347a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4413      	add	r3, r2
 8003484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003488:	461a      	mov	r2, r3
 800348a:	2308      	movs	r3, #8
 800348c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f004 fe00 	bl	800809e <USB_HC_Halt>
 800349e:	e075      	b.n	800358c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b6:	d134      	bne.n	8003522 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	0151      	lsls	r1, r2, #5
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	440a      	add	r2, r1
 80034ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034d2:	f043 0302 	orr.w	r3, r3, #2
 80034d6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	212c      	movs	r1, #44	; 0x2c
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	3361      	adds	r3, #97	; 0x61
 80034e6:	2208      	movs	r2, #8
 80034e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f6:	461a      	mov	r2, r3
 80034f8:	2310      	movs	r3, #16
 80034fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4413      	add	r3, r2
 8003504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003508:	461a      	mov	r2, r3
 800350a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800350e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f004 fdbf 	bl	800809e <USB_HC_Halt>
 8003520:	e034      	b.n	800358c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d129      	bne.n	800358c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4413      	add	r3, r2
 8003540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	0151      	lsls	r1, r2, #5
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	440a      	add	r2, r1
 800354e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003552:	f043 0302 	orr.w	r3, r3, #2
 8003556:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3361      	adds	r3, #97	; 0x61
 8003566:	2206      	movs	r2, #6
 8003568:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f004 fd92 	bl	800809e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003586:	461a      	mov	r2, r3
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a2:	d122      	bne.n	80035ea <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	0151      	lsls	r1, r2, #5
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	440a      	add	r2, r1
 80035ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035be:	f043 0302 	orr.w	r3, r3, #2
 80035c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 fd65 	bl	800809e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e0:	461a      	mov	r2, r3
 80035e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035e6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80035e8:	e2ba      	b.n	8003b60 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	f040 811b 	bne.w	8003838 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d019      	beq.n	800363e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	3348      	adds	r3, #72	; 0x48
 8003618:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	0159      	lsls	r1, r3, #5
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	440b      	add	r3, r1
 8003622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800362c:	1ad2      	subs	r2, r2, r3
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	202c      	movs	r0, #44	; 0x2c
 8003634:	fb00 f303 	mul.w	r3, r0, r3
 8003638:	440b      	add	r3, r1
 800363a:	3350      	adds	r3, #80	; 0x50
 800363c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	212c      	movs	r1, #44	; 0x2c
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	4413      	add	r3, r2
 800364a:	3361      	adds	r3, #97	; 0x61
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	212c      	movs	r1, #44	; 0x2c
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	4413      	add	r3, r2
 800365c:	335c      	adds	r3, #92	; 0x5c
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4413      	add	r3, r2
 800366a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366e:	461a      	mov	r2, r3
 8003670:	2301      	movs	r3, #1
 8003672:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	212c      	movs	r1, #44	; 0x2c
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	4413      	add	r3, r2
 8003680:	333f      	adds	r3, #63	; 0x3f
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d009      	beq.n	800369c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	212c      	movs	r1, #44	; 0x2c
 800368e:	fb01 f303 	mul.w	r3, r1, r3
 8003692:	4413      	add	r3, r2
 8003694:	333f      	adds	r3, #63	; 0x3f
 8003696:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003698:	2b02      	cmp	r3, #2
 800369a:	d121      	bne.n	80036e0 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	0151      	lsls	r1, r2, #5
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	440a      	add	r2, r1
 80036b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036b6:	f043 0302 	orr.w	r3, r3, #2
 80036ba:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	4611      	mov	r1, r2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f004 fce9 	bl	800809e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d8:	461a      	mov	r2, r3
 80036da:	2310      	movs	r3, #16
 80036dc:	6093      	str	r3, [r2, #8]
 80036de:	e066      	b.n	80037ae <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	212c      	movs	r1, #44	; 0x2c
 80036e6:	fb01 f303 	mul.w	r3, r1, r3
 80036ea:	4413      	add	r3, r2
 80036ec:	333f      	adds	r3, #63	; 0x3f
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d127      	bne.n	8003744 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	015a      	lsls	r2, r3, #5
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	0151      	lsls	r1, r2, #5
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	440a      	add	r2, r1
 800370a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800370e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003712:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	212c      	movs	r1, #44	; 0x2c
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	3360      	adds	r3, #96	; 0x60
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	b2d9      	uxtb	r1, r3
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	202c      	movs	r0, #44	; 0x2c
 8003730:	fb00 f303 	mul.w	r3, r0, r3
 8003734:	4413      	add	r3, r2
 8003736:	3360      	adds	r3, #96	; 0x60
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f006 fe6b 	bl	800a418 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003742:	e034      	b.n	80037ae <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	212c      	movs	r1, #44	; 0x2c
 800374a:	fb01 f303 	mul.w	r3, r1, r3
 800374e:	4413      	add	r3, r2
 8003750:	333f      	adds	r3, #63	; 0x3f
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d12a      	bne.n	80037ae <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	212c      	movs	r1, #44	; 0x2c
 800375e:	fb01 f303 	mul.w	r3, r1, r3
 8003762:	4413      	add	r3, r2
 8003764:	3360      	adds	r3, #96	; 0x60
 8003766:	2201      	movs	r2, #1
 8003768:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	212c      	movs	r1, #44	; 0x2c
 8003770:	fb01 f303 	mul.w	r3, r1, r3
 8003774:	4413      	add	r3, r2
 8003776:	3354      	adds	r3, #84	; 0x54
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	f083 0301 	eor.w	r3, r3, #1
 800377e:	b2d8      	uxtb	r0, r3
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	212c      	movs	r1, #44	; 0x2c
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	4413      	add	r3, r2
 800378c:	3354      	adds	r3, #84	; 0x54
 800378e:	4602      	mov	r2, r0
 8003790:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	b2d9      	uxtb	r1, r3
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	202c      	movs	r0, #44	; 0x2c
 800379c:	fb00 f303 	mul.w	r3, r0, r3
 80037a0:	4413      	add	r3, r2
 80037a2:	3360      	adds	r3, #96	; 0x60
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f006 fe35 	bl	800a418 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d12b      	bne.n	800380e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	212c      	movs	r1, #44	; 0x2c
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	4413      	add	r3, r2
 80037c2:	3348      	adds	r3, #72	; 0x48
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	202c      	movs	r0, #44	; 0x2c
 80037cc:	fb00 f202 	mul.w	r2, r0, r2
 80037d0:	440a      	add	r2, r1
 80037d2:	3240      	adds	r2, #64	; 0x40
 80037d4:	8812      	ldrh	r2, [r2, #0]
 80037d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 81be 	beq.w	8003b60 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	212c      	movs	r1, #44	; 0x2c
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	3354      	adds	r3, #84	; 0x54
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	f083 0301 	eor.w	r3, r3, #1
 80037f8:	b2d8      	uxtb	r0, r3
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	212c      	movs	r1, #44	; 0x2c
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	4413      	add	r3, r2
 8003806:	3354      	adds	r3, #84	; 0x54
 8003808:	4602      	mov	r2, r0
 800380a:	701a      	strb	r2, [r3, #0]
}
 800380c:	e1a8      	b.n	8003b60 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	212c      	movs	r1, #44	; 0x2c
 8003814:	fb01 f303 	mul.w	r3, r1, r3
 8003818:	4413      	add	r3, r2
 800381a:	3354      	adds	r3, #84	; 0x54
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	f083 0301 	eor.w	r3, r3, #1
 8003822:	b2d8      	uxtb	r0, r3
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	212c      	movs	r1, #44	; 0x2c
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	4413      	add	r3, r2
 8003830:	3354      	adds	r3, #84	; 0x54
 8003832:	4602      	mov	r2, r0
 8003834:	701a      	strb	r2, [r3, #0]
}
 8003836:	e193      	b.n	8003b60 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4413      	add	r3, r2
 8003840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b02      	cmp	r3, #2
 800384c:	f040 8106 	bne.w	8003a5c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	4413      	add	r3, r2
 8003858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	0151      	lsls	r1, r2, #5
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	440a      	add	r2, r1
 8003866:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800386a:	f023 0302 	bic.w	r3, r3, #2
 800386e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	212c      	movs	r1, #44	; 0x2c
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	4413      	add	r3, r2
 800387c:	3361      	adds	r3, #97	; 0x61
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d109      	bne.n	8003898 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	212c      	movs	r1, #44	; 0x2c
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	4413      	add	r3, r2
 8003890:	3360      	adds	r3, #96	; 0x60
 8003892:	2201      	movs	r2, #1
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	e0c9      	b.n	8003a2c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	212c      	movs	r1, #44	; 0x2c
 800389e:	fb01 f303 	mul.w	r3, r1, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	3361      	adds	r3, #97	; 0x61
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b05      	cmp	r3, #5
 80038aa:	d109      	bne.n	80038c0 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	212c      	movs	r1, #44	; 0x2c
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3360      	adds	r3, #96	; 0x60
 80038ba:	2205      	movs	r2, #5
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	e0b5      	b.n	8003a2c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	212c      	movs	r1, #44	; 0x2c
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	3361      	adds	r3, #97	; 0x61
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b06      	cmp	r3, #6
 80038d2:	d009      	beq.n	80038e8 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3361      	adds	r3, #97	; 0x61
 80038e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d150      	bne.n	800398a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	212c      	movs	r1, #44	; 0x2c
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	335c      	adds	r3, #92	; 0x5c
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	202c      	movs	r0, #44	; 0x2c
 8003900:	fb00 f303 	mul.w	r3, r0, r3
 8003904:	440b      	add	r3, r1
 8003906:	335c      	adds	r3, #92	; 0x5c
 8003908:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	212c      	movs	r1, #44	; 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	335c      	adds	r3, #92	; 0x5c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d912      	bls.n	8003944 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	212c      	movs	r1, #44	; 0x2c
 8003924:	fb01 f303 	mul.w	r3, r1, r3
 8003928:	4413      	add	r3, r2
 800392a:	335c      	adds	r3, #92	; 0x5c
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	212c      	movs	r1, #44	; 0x2c
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	3360      	adds	r3, #96	; 0x60
 800393e:	2204      	movs	r2, #4
 8003940:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003942:	e073      	b.n	8003a2c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	212c      	movs	r1, #44	; 0x2c
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	4413      	add	r3, r2
 8003950:	3360      	adds	r3, #96	; 0x60
 8003952:	2202      	movs	r2, #2
 8003954:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4413      	add	r3, r2
 800395e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800396c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003974:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4413      	add	r3, r2
 800397e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003982:	461a      	mov	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003988:	e050      	b.n	8003a2c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	212c      	movs	r1, #44	; 0x2c
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	4413      	add	r3, r2
 8003996:	3361      	adds	r3, #97	; 0x61
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b03      	cmp	r3, #3
 800399c:	d122      	bne.n	80039e4 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	212c      	movs	r1, #44	; 0x2c
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	3360      	adds	r3, #96	; 0x60
 80039ac:	2202      	movs	r2, #2
 80039ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039dc:	461a      	mov	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e023      	b.n	8003a2c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	212c      	movs	r1, #44	; 0x2c
 80039ea:	fb01 f303 	mul.w	r3, r1, r3
 80039ee:	4413      	add	r3, r2
 80039f0:	3361      	adds	r3, #97	; 0x61
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b07      	cmp	r3, #7
 80039f6:	d119      	bne.n	8003a2c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	212c      	movs	r1, #44	; 0x2c
 80039fe:	fb01 f303 	mul.w	r3, r1, r3
 8003a02:	4413      	add	r3, r2
 8003a04:	335c      	adds	r3, #92	; 0x5c
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	202c      	movs	r0, #44	; 0x2c
 8003a10:	fb00 f303 	mul.w	r3, r0, r3
 8003a14:	440b      	add	r3, r1
 8003a16:	335c      	adds	r3, #92	; 0x5c
 8003a18:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	212c      	movs	r1, #44	; 0x2c
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	3360      	adds	r3, #96	; 0x60
 8003a28:	2204      	movs	r2, #4
 8003a2a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a38:	461a      	mov	r2, r3
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	b2d9      	uxtb	r1, r3
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	202c      	movs	r0, #44	; 0x2c
 8003a48:	fb00 f303 	mul.w	r3, r0, r3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3360      	adds	r3, #96	; 0x60
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f006 fcdf 	bl	800a418 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003a5a:	e081      	b.n	8003b60 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0310 	and.w	r3, r3, #16
 8003a6e:	2b10      	cmp	r3, #16
 8003a70:	d176      	bne.n	8003b60 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	212c      	movs	r1, #44	; 0x2c
 8003a78:	fb01 f303 	mul.w	r3, r1, r3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	333f      	adds	r3, #63	; 0x3f
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d121      	bne.n	8003aca <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	335c      	adds	r3, #92	; 0x5c
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	0151      	lsls	r1, r2, #5
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	440a      	add	r2, r1
 8003aae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ab2:	f043 0302 	orr.w	r3, r3, #2
 8003ab6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f004 faeb 	bl	800809e <USB_HC_Halt>
 8003ac8:	e041      	b.n	8003b4e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	212c      	movs	r1, #44	; 0x2c
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	333f      	adds	r3, #63	; 0x3f
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	212c      	movs	r1, #44	; 0x2c
 8003ae4:	fb01 f303 	mul.w	r3, r1, r3
 8003ae8:	4413      	add	r3, r2
 8003aea:	333f      	adds	r3, #63	; 0x3f
 8003aec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d12d      	bne.n	8003b4e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	212c      	movs	r1, #44	; 0x2c
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	4413      	add	r3, r2
 8003afe:	335c      	adds	r3, #92	; 0x5c
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d120      	bne.n	8003b4e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	3361      	adds	r3, #97	; 0x61
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	0151      	lsls	r1, r2, #5
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	440a      	add	r2, r1
 8003b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f004 faa8 	bl	800809e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2310      	movs	r3, #16
 8003b5e:	6093      	str	r3, [r2, #8]
}
 8003b60:	bf00      	nop
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d119      	bne.n	8003bcc <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2304      	movs	r3, #4
 8003ba8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	0151      	lsls	r1, r2, #5
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	440a      	add	r2, r1
 8003bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bc4:	f043 0302 	orr.w	r3, r3, #2
 8003bc8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003bca:	e3c6      	b.n	800435a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	d13e      	bne.n	8003c60 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	212c      	movs	r1, #44	; 0x2c
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	333d      	adds	r3, #61	; 0x3d
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	f040 83a8 	bne.w	800435a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	212c      	movs	r1, #44	; 0x2c
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	333d      	adds	r3, #61	; 0x3d
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	212c      	movs	r1, #44	; 0x2c
 8003c22:	fb01 f303 	mul.w	r3, r1, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	3360      	adds	r3, #96	; 0x60
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	0151      	lsls	r1, r2, #5
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	440a      	add	r2, r1
 8003c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	4611      	mov	r1, r2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f004 fa20 	bl	800809e <USB_HC_Halt>
}
 8003c5e:	e37c      	b.n	800435a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c76:	d122      	bne.n	8003cbe <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	0151      	lsls	r1, r2, #5
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	440a      	add	r2, r1
 8003c8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c92:	f043 0302 	orr.w	r3, r3, #2
 8003c96:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f004 f9fb 	bl	800809e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cba:	6093      	str	r3, [r2, #8]
}
 8003cbc:	e34d      	b.n	800435a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d150      	bne.n	8003d76 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	212c      	movs	r1, #44	; 0x2c
 8003cda:	fb01 f303 	mul.w	r3, r1, r3
 8003cde:	4413      	add	r3, r2
 8003ce0:	335c      	adds	r3, #92	; 0x5c
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b40      	cmp	r3, #64	; 0x40
 8003cfa:	d111      	bne.n	8003d20 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	212c      	movs	r1, #44	; 0x2c
 8003d02:	fb01 f303 	mul.w	r3, r1, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	333d      	adds	r3, #61	; 0x3d
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	2340      	movs	r3, #64	; 0x40
 8003d1e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	0151      	lsls	r1, r2, #5
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	440a      	add	r2, r1
 8003d36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d3a:	f043 0302 	orr.w	r3, r3, #2
 8003d3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	4611      	mov	r1, r2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f004 f9a7 	bl	800809e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2301      	movs	r3, #1
 8003d60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3361      	adds	r3, #97	; 0x61
 8003d70:	2201      	movs	r2, #1
 8003d72:	701a      	strb	r2, [r3, #0]
}
 8003d74:	e2f1      	b.n	800435a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d13c      	bne.n	8003e06 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	212c      	movs	r1, #44	; 0x2c
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	4413      	add	r3, r2
 8003d98:	3361      	adds	r3, #97	; 0x61
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	212c      	movs	r1, #44	; 0x2c
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	4413      	add	r3, r2
 8003daa:	333d      	adds	r3, #61	; 0x3d
 8003dac:	2201      	movs	r2, #1
 8003dae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	212c      	movs	r1, #44	; 0x2c
 8003db6:	fb01 f303 	mul.w	r3, r1, r3
 8003dba:	4413      	add	r3, r2
 8003dbc:	335c      	adds	r3, #92	; 0x5c
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	0151      	lsls	r1, r2, #5
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	440a      	add	r2, r1
 8003dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ddc:	f043 0302 	orr.w	r3, r3, #2
 8003de0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f004 f956 	bl	800809e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2340      	movs	r3, #64	; 0x40
 8003e02:	6093      	str	r3, [r2, #8]
}
 8003e04:	e2a9      	b.n	800435a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d12a      	bne.n	8003e72 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2308      	movs	r3, #8
 8003e2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	0151      	lsls	r1, r2, #5
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	440a      	add	r2, r1
 8003e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e48:	f043 0302 	orr.w	r3, r3, #2
 8003e4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	4611      	mov	r1, r2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f004 f920 	bl	800809e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	212c      	movs	r1, #44	; 0x2c
 8003e64:	fb01 f303 	mul.w	r3, r1, r3
 8003e68:	4413      	add	r3, r2
 8003e6a:	3361      	adds	r3, #97	; 0x61
 8003e6c:	2205      	movs	r2, #5
 8003e6e:	701a      	strb	r2, [r3, #0]
}
 8003e70:	e273      	b.n	800435a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d150      	bne.n	8003f2a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	212c      	movs	r1, #44	; 0x2c
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	335c      	adds	r3, #92	; 0x5c
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	212c      	movs	r1, #44	; 0x2c
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3361      	adds	r3, #97	; 0x61
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	212c      	movs	r1, #44	; 0x2c
 8003eb2:	fb01 f303 	mul.w	r3, r1, r3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	333d      	adds	r3, #61	; 0x3d
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d112      	bne.n	8003ee6 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	212c      	movs	r1, #44	; 0x2c
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	333c      	adds	r3, #60	; 0x3c
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d108      	bne.n	8003ee6 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	212c      	movs	r1, #44	; 0x2c
 8003eda:	fb01 f303 	mul.w	r3, r1, r3
 8003ede:	4413      	add	r3, r2
 8003ee0:	333d      	adds	r3, #61	; 0x3d
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	0151      	lsls	r1, r2, #5
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	440a      	add	r2, r1
 8003efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f00:	f043 0302 	orr.w	r3, r3, #2
 8003f04:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f004 f8c4 	bl	800809e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f22:	461a      	mov	r2, r3
 8003f24:	2310      	movs	r3, #16
 8003f26:	6093      	str	r3, [r2, #8]
}
 8003f28:	e217      	b.n	800435a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	2b80      	cmp	r3, #128	; 0x80
 8003f3e:	d174      	bne.n	800402a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d121      	bne.n	8003f8c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	212c      	movs	r1, #44	; 0x2c
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	4413      	add	r3, r2
 8003f54:	3361      	adds	r3, #97	; 0x61
 8003f56:	2206      	movs	r2, #6
 8003f58:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	0151      	lsls	r1, r2, #5
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	440a      	add	r2, r1
 8003f70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f74:	f043 0302 	orr.w	r3, r3, #2
 8003f78:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f004 f88a 	bl	800809e <USB_HC_Halt>
 8003f8a:	e044      	b.n	8004016 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	212c      	movs	r1, #44	; 0x2c
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	4413      	add	r3, r2
 8003f98:	335c      	adds	r3, #92	; 0x5c
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	202c      	movs	r0, #44	; 0x2c
 8003fa4:	fb00 f303 	mul.w	r3, r0, r3
 8003fa8:	440b      	add	r3, r1
 8003faa:	335c      	adds	r3, #92	; 0x5c
 8003fac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	212c      	movs	r1, #44	; 0x2c
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	4413      	add	r3, r2
 8003fba:	335c      	adds	r3, #92	; 0x5c
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d920      	bls.n	8004004 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	212c      	movs	r1, #44	; 0x2c
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	4413      	add	r3, r2
 8003fce:	335c      	adds	r3, #92	; 0x5c
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	212c      	movs	r1, #44	; 0x2c
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	3360      	adds	r3, #96	; 0x60
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	b2d9      	uxtb	r1, r3
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	202c      	movs	r0, #44	; 0x2c
 8003ff0:	fb00 f303 	mul.w	r3, r0, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3360      	adds	r3, #96	; 0x60
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f006 fa0b 	bl	800a418 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004002:	e008      	b.n	8004016 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	212c      	movs	r1, #44	; 0x2c
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	4413      	add	r3, r2
 8004010:	3360      	adds	r3, #96	; 0x60
 8004012:	2202      	movs	r2, #2
 8004014:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	4413      	add	r3, r2
 800401e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004022:	461a      	mov	r2, r3
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	6093      	str	r3, [r2, #8]
}
 8004028:	e197      	b.n	800435a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	4413      	add	r3, r2
 8004032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004040:	d134      	bne.n	80040ac <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	4413      	add	r3, r2
 800404a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	0151      	lsls	r1, r2, #5
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	440a      	add	r2, r1
 8004058:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800405c:	f043 0302 	orr.w	r3, r3, #2
 8004060:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	4611      	mov	r1, r2
 800406c:	4618      	mov	r0, r3
 800406e:	f004 f816 	bl	800809e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	4413      	add	r3, r2
 800407a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407e:	461a      	mov	r2, r3
 8004080:	2310      	movs	r3, #16
 8004082:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	4413      	add	r3, r2
 800408c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004090:	461a      	mov	r2, r3
 8004092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004096:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	212c      	movs	r1, #44	; 0x2c
 800409e:	fb01 f303 	mul.w	r3, r1, r3
 80040a2:	4413      	add	r3, r2
 80040a4:	3361      	adds	r3, #97	; 0x61
 80040a6:	2208      	movs	r2, #8
 80040a8:	701a      	strb	r2, [r3, #0]
}
 80040aa:	e156      	b.n	800435a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b02      	cmp	r3, #2
 80040c0:	f040 814b 	bne.w	800435a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040de:	f023 0302 	bic.w	r3, r3, #2
 80040e2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	212c      	movs	r1, #44	; 0x2c
 80040ea:	fb01 f303 	mul.w	r3, r1, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	3361      	adds	r3, #97	; 0x61
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d179      	bne.n	80041ec <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	212c      	movs	r1, #44	; 0x2c
 80040fe:	fb01 f303 	mul.w	r3, r1, r3
 8004102:	4413      	add	r3, r2
 8004104:	3360      	adds	r3, #96	; 0x60
 8004106:	2201      	movs	r2, #1
 8004108:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	212c      	movs	r1, #44	; 0x2c
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	4413      	add	r3, r2
 8004116:	333f      	adds	r3, #63	; 0x3f
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d00a      	beq.n	8004134 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	212c      	movs	r1, #44	; 0x2c
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	4413      	add	r3, r2
 800412a:	333f      	adds	r3, #63	; 0x3f
 800412c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800412e:	2b03      	cmp	r3, #3
 8004130:	f040 80fc 	bne.w	800432c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d142      	bne.n	80041c2 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	212c      	movs	r1, #44	; 0x2c
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	4413      	add	r3, r2
 8004148:	334c      	adds	r3, #76	; 0x4c
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80ed 	beq.w	800432c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	212c      	movs	r1, #44	; 0x2c
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	334c      	adds	r3, #76	; 0x4c
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	202c      	movs	r0, #44	; 0x2c
 8004168:	fb00 f202 	mul.w	r2, r0, r2
 800416c:	440a      	add	r2, r1
 800416e:	3240      	adds	r2, #64	; 0x40
 8004170:	8812      	ldrh	r2, [r2, #0]
 8004172:	4413      	add	r3, r2
 8004174:	3b01      	subs	r3, #1
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	202c      	movs	r0, #44	; 0x2c
 800417c:	fb00 f202 	mul.w	r2, r0, r2
 8004180:	440a      	add	r2, r1
 8004182:	3240      	adds	r2, #64	; 0x40
 8004184:	8812      	ldrh	r2, [r2, #0]
 8004186:	fbb3 f3f2 	udiv	r3, r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80ca 	beq.w	800432c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3355      	adds	r3, #85	; 0x55
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	f083 0301 	eor.w	r3, r3, #1
 80041ac:	b2d8      	uxtb	r0, r3
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	212c      	movs	r1, #44	; 0x2c
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	4413      	add	r3, r2
 80041ba:	3355      	adds	r3, #85	; 0x55
 80041bc:	4602      	mov	r2, r0
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	e0b4      	b.n	800432c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	212c      	movs	r1, #44	; 0x2c
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	4413      	add	r3, r2
 80041ce:	3355      	adds	r3, #85	; 0x55
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	f083 0301 	eor.w	r3, r3, #1
 80041d6:	b2d8      	uxtb	r0, r3
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	212c      	movs	r1, #44	; 0x2c
 80041de:	fb01 f303 	mul.w	r3, r1, r3
 80041e2:	4413      	add	r3, r2
 80041e4:	3355      	adds	r3, #85	; 0x55
 80041e6:	4602      	mov	r2, r0
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	e09f      	b.n	800432c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	212c      	movs	r1, #44	; 0x2c
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	3361      	adds	r3, #97	; 0x61
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d109      	bne.n	8004214 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	212c      	movs	r1, #44	; 0x2c
 8004206:	fb01 f303 	mul.w	r3, r1, r3
 800420a:	4413      	add	r3, r2
 800420c:	3360      	adds	r3, #96	; 0x60
 800420e:	2202      	movs	r2, #2
 8004210:	701a      	strb	r2, [r3, #0]
 8004212:	e08b      	b.n	800432c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	212c      	movs	r1, #44	; 0x2c
 800421a:	fb01 f303 	mul.w	r3, r1, r3
 800421e:	4413      	add	r3, r2
 8004220:	3361      	adds	r3, #97	; 0x61
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b04      	cmp	r3, #4
 8004226:	d109      	bne.n	800423c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	212c      	movs	r1, #44	; 0x2c
 800422e:	fb01 f303 	mul.w	r3, r1, r3
 8004232:	4413      	add	r3, r2
 8004234:	3360      	adds	r3, #96	; 0x60
 8004236:	2202      	movs	r2, #2
 8004238:	701a      	strb	r2, [r3, #0]
 800423a:	e077      	b.n	800432c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	212c      	movs	r1, #44	; 0x2c
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	4413      	add	r3, r2
 8004248:	3361      	adds	r3, #97	; 0x61
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b05      	cmp	r3, #5
 800424e:	d109      	bne.n	8004264 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	212c      	movs	r1, #44	; 0x2c
 8004256:	fb01 f303 	mul.w	r3, r1, r3
 800425a:	4413      	add	r3, r2
 800425c:	3360      	adds	r3, #96	; 0x60
 800425e:	2205      	movs	r2, #5
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	e063      	b.n	800432c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	212c      	movs	r1, #44	; 0x2c
 800426a:	fb01 f303 	mul.w	r3, r1, r3
 800426e:	4413      	add	r3, r2
 8004270:	3361      	adds	r3, #97	; 0x61
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b06      	cmp	r3, #6
 8004276:	d009      	beq.n	800428c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	212c      	movs	r1, #44	; 0x2c
 800427e:	fb01 f303 	mul.w	r3, r1, r3
 8004282:	4413      	add	r3, r2
 8004284:	3361      	adds	r3, #97	; 0x61
 8004286:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004288:	2b08      	cmp	r3, #8
 800428a:	d14f      	bne.n	800432c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	212c      	movs	r1, #44	; 0x2c
 8004292:	fb01 f303 	mul.w	r3, r1, r3
 8004296:	4413      	add	r3, r2
 8004298:	335c      	adds	r3, #92	; 0x5c
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	202c      	movs	r0, #44	; 0x2c
 80042a4:	fb00 f303 	mul.w	r3, r0, r3
 80042a8:	440b      	add	r3, r1
 80042aa:	335c      	adds	r3, #92	; 0x5c
 80042ac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	212c      	movs	r1, #44	; 0x2c
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	335c      	adds	r3, #92	; 0x5c
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d912      	bls.n	80042e8 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	212c      	movs	r1, #44	; 0x2c
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	4413      	add	r3, r2
 80042ce:	335c      	adds	r3, #92	; 0x5c
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	212c      	movs	r1, #44	; 0x2c
 80042da:	fb01 f303 	mul.w	r3, r1, r3
 80042de:	4413      	add	r3, r2
 80042e0:	3360      	adds	r3, #96	; 0x60
 80042e2:	2204      	movs	r2, #4
 80042e4:	701a      	strb	r2, [r3, #0]
 80042e6:	e021      	b.n	800432c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	212c      	movs	r1, #44	; 0x2c
 80042ee:	fb01 f303 	mul.w	r3, r1, r3
 80042f2:	4413      	add	r3, r2
 80042f4:	3360      	adds	r3, #96	; 0x60
 80042f6:	2202      	movs	r2, #2
 80042f8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	4413      	add	r3, r2
 8004302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004310:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004318:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	4413      	add	r3, r2
 8004322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004326:	461a      	mov	r2, r3
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	4413      	add	r3, r2
 8004334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004338:	461a      	mov	r2, r3
 800433a:	2302      	movs	r3, #2
 800433c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	b2d9      	uxtb	r1, r3
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	202c      	movs	r0, #44	; 0x2c
 8004348:	fb00 f303 	mul.w	r3, r0, r3
 800434c:	4413      	add	r3, r2
 800434e:	3360      	adds	r3, #96	; 0x60
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f006 f85f 	bl	800a418 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800435a:	bf00      	nop
 800435c:	3720      	adds	r7, #32
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b08a      	sub	sp, #40	; 0x28
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	0c5b      	lsrs	r3, r3, #17
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004396:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d004      	beq.n	80043a8 <HCD_RXQLVL_IRQHandler+0x46>
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b05      	cmp	r3, #5
 80043a2:	f000 80a9 	beq.w	80044f8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80043a6:	e0aa      	b.n	80044fe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 80a6 	beq.w	80044fc <HCD_RXQLVL_IRQHandler+0x19a>
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	212c      	movs	r1, #44	; 0x2c
 80043b6:	fb01 f303 	mul.w	r3, r1, r3
 80043ba:	4413      	add	r3, r2
 80043bc:	3344      	adds	r3, #68	; 0x44
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 809b 	beq.w	80044fc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	212c      	movs	r1, #44	; 0x2c
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	4413      	add	r3, r2
 80043d2:	3350      	adds	r3, #80	; 0x50
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	441a      	add	r2, r3
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	202c      	movs	r0, #44	; 0x2c
 80043e0:	fb00 f303 	mul.w	r3, r0, r3
 80043e4:	440b      	add	r3, r1
 80043e6:	334c      	adds	r3, #76	; 0x4c
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d87a      	bhi.n	80044e4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	212c      	movs	r1, #44	; 0x2c
 80043f8:	fb01 f303 	mul.w	r3, r1, r3
 80043fc:	4413      	add	r3, r2
 80043fe:	3344      	adds	r3, #68	; 0x44
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	b292      	uxth	r2, r2
 8004406:	4619      	mov	r1, r3
 8004408:	f003 f9e7 	bl	80077da <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	212c      	movs	r1, #44	; 0x2c
 8004412:	fb01 f303 	mul.w	r3, r1, r3
 8004416:	4413      	add	r3, r2
 8004418:	3344      	adds	r3, #68	; 0x44
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	441a      	add	r2, r3
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	202c      	movs	r0, #44	; 0x2c
 8004426:	fb00 f303 	mul.w	r3, r0, r3
 800442a:	440b      	add	r3, r1
 800442c:	3344      	adds	r3, #68	; 0x44
 800442e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	212c      	movs	r1, #44	; 0x2c
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	4413      	add	r3, r2
 800443c:	3350      	adds	r3, #80	; 0x50
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	441a      	add	r2, r3
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	202c      	movs	r0, #44	; 0x2c
 800444a:	fb00 f303 	mul.w	r3, r0, r3
 800444e:	440b      	add	r3, r1
 8004450:	3350      	adds	r3, #80	; 0x50
 8004452:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	4413      	add	r3, r2
 800445c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	0cdb      	lsrs	r3, r3, #19
 8004464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004468:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	212c      	movs	r1, #44	; 0x2c
 8004470:	fb01 f303 	mul.w	r3, r1, r3
 8004474:	4413      	add	r3, r2
 8004476:	3340      	adds	r3, #64	; 0x40
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4293      	cmp	r3, r2
 8004480:	d13c      	bne.n	80044fc <HCD_RXQLVL_IRQHandler+0x19a>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d039      	beq.n	80044fc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	4413      	add	r3, r2
 8004490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800449e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044a6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b4:	461a      	mov	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	212c      	movs	r1, #44	; 0x2c
 80044c0:	fb01 f303 	mul.w	r3, r1, r3
 80044c4:	4413      	add	r3, r2
 80044c6:	3354      	adds	r3, #84	; 0x54
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	f083 0301 	eor.w	r3, r3, #1
 80044ce:	b2d8      	uxtb	r0, r3
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	212c      	movs	r1, #44	; 0x2c
 80044d6:	fb01 f303 	mul.w	r3, r1, r3
 80044da:	4413      	add	r3, r2
 80044dc:	3354      	adds	r3, #84	; 0x54
 80044de:	4602      	mov	r2, r0
 80044e0:	701a      	strb	r2, [r3, #0]
      break;
 80044e2:	e00b      	b.n	80044fc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	212c      	movs	r1, #44	; 0x2c
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	4413      	add	r3, r2
 80044f0:	3360      	adds	r3, #96	; 0x60
 80044f2:	2204      	movs	r2, #4
 80044f4:	701a      	strb	r2, [r3, #0]
      break;
 80044f6:	e001      	b.n	80044fc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80044f8:	bf00      	nop
 80044fa:	e000      	b.n	80044fe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80044fc:	bf00      	nop
  }
}
 80044fe:	bf00      	nop
 8004500:	3728      	adds	r7, #40	; 0x28
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b086      	sub	sp, #24
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004532:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b02      	cmp	r3, #2
 800453c:	d10b      	bne.n	8004556 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b01      	cmp	r3, #1
 8004546:	d102      	bne.n	800454e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f005 ff49 	bl	800a3e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f043 0302 	orr.w	r3, r3, #2
 8004554:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b08      	cmp	r3, #8
 800455e:	d132      	bne.n	80045c6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f043 0308 	orr.w	r3, r3, #8
 8004566:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b04      	cmp	r3, #4
 8004570:	d126      	bne.n	80045c0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d113      	bne.n	80045a2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004580:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004584:	d106      	bne.n	8004594 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2102      	movs	r1, #2
 800458c:	4618      	mov	r0, r3
 800458e:	f003 fa5f 	bl	8007a50 <USB_InitFSLSPClkSel>
 8004592:	e011      	b.n	80045b8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2101      	movs	r1, #1
 800459a:	4618      	mov	r0, r3
 800459c:	f003 fa58 	bl	8007a50 <USB_InitFSLSPClkSel>
 80045a0:	e00a      	b.n	80045b8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d106      	bne.n	80045b8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045b0:	461a      	mov	r2, r3
 80045b2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80045b6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f005 ff3b 	bl	800a434 <HAL_HCD_PortEnabled_Callback>
 80045be:	e002      	b.n	80045c6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f005 ff45 	bl	800a450 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d103      	bne.n	80045d8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f043 0320 	orr.w	r3, r3, #32
 80045d6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045de:	461a      	mov	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	6013      	str	r3, [r2, #0]
}
 80045e4:	bf00      	nop
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e12b      	b.n	8004856 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc fe00 	bl	8001218 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2224      	movs	r2, #36	; 0x24
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800463e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800464e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004650:	f001 f9fc 	bl	8005a4c <HAL_RCC_GetPCLK1Freq>
 8004654:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4a81      	ldr	r2, [pc, #516]	; (8004860 <HAL_I2C_Init+0x274>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d807      	bhi.n	8004670 <HAL_I2C_Init+0x84>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a80      	ldr	r2, [pc, #512]	; (8004864 <HAL_I2C_Init+0x278>)
 8004664:	4293      	cmp	r3, r2
 8004666:	bf94      	ite	ls
 8004668:	2301      	movls	r3, #1
 800466a:	2300      	movhi	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	e006      	b.n	800467e <HAL_I2C_Init+0x92>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a7d      	ldr	r2, [pc, #500]	; (8004868 <HAL_I2C_Init+0x27c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	bf94      	ite	ls
 8004678:	2301      	movls	r3, #1
 800467a:	2300      	movhi	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e0e7      	b.n	8004856 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4a78      	ldr	r2, [pc, #480]	; (800486c <HAL_I2C_Init+0x280>)
 800468a:	fba2 2303 	umull	r2, r3, r2, r3
 800468e:	0c9b      	lsrs	r3, r3, #18
 8004690:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	4a6a      	ldr	r2, [pc, #424]	; (8004860 <HAL_I2C_Init+0x274>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d802      	bhi.n	80046c0 <HAL_I2C_Init+0xd4>
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	3301      	adds	r3, #1
 80046be:	e009      	b.n	80046d4 <HAL_I2C_Init+0xe8>
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046c6:	fb02 f303 	mul.w	r3, r2, r3
 80046ca:	4a69      	ldr	r2, [pc, #420]	; (8004870 <HAL_I2C_Init+0x284>)
 80046cc:	fba2 2303 	umull	r2, r3, r2, r3
 80046d0:	099b      	lsrs	r3, r3, #6
 80046d2:	3301      	adds	r3, #1
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	430b      	orrs	r3, r1
 80046da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	495c      	ldr	r1, [pc, #368]	; (8004860 <HAL_I2C_Init+0x274>)
 80046f0:	428b      	cmp	r3, r1
 80046f2:	d819      	bhi.n	8004728 <HAL_I2C_Init+0x13c>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	1e59      	subs	r1, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004702:	1c59      	adds	r1, r3, #1
 8004704:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004708:	400b      	ands	r3, r1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_I2C_Init+0x138>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1e59      	subs	r1, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	fbb1 f3f3 	udiv	r3, r1, r3
 800471c:	3301      	adds	r3, #1
 800471e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004722:	e051      	b.n	80047c8 <HAL_I2C_Init+0x1dc>
 8004724:	2304      	movs	r3, #4
 8004726:	e04f      	b.n	80047c8 <HAL_I2C_Init+0x1dc>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d111      	bne.n	8004754 <HAL_I2C_Init+0x168>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1e58      	subs	r0, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6859      	ldr	r1, [r3, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	440b      	add	r3, r1
 800473e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004742:	3301      	adds	r3, #1
 8004744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004748:	2b00      	cmp	r3, #0
 800474a:	bf0c      	ite	eq
 800474c:	2301      	moveq	r3, #1
 800474e:	2300      	movne	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	e012      	b.n	800477a <HAL_I2C_Init+0x18e>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1e58      	subs	r0, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6859      	ldr	r1, [r3, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	0099      	lsls	r1, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	fbb0 f3f3 	udiv	r3, r0, r3
 800476a:	3301      	adds	r3, #1
 800476c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004770:	2b00      	cmp	r3, #0
 8004772:	bf0c      	ite	eq
 8004774:	2301      	moveq	r3, #1
 8004776:	2300      	movne	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_I2C_Init+0x196>
 800477e:	2301      	movs	r3, #1
 8004780:	e022      	b.n	80047c8 <HAL_I2C_Init+0x1dc>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10e      	bne.n	80047a8 <HAL_I2C_Init+0x1bc>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1e58      	subs	r0, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6859      	ldr	r1, [r3, #4]
 8004792:	460b      	mov	r3, r1
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	440b      	add	r3, r1
 8004798:	fbb0 f3f3 	udiv	r3, r0, r3
 800479c:	3301      	adds	r3, #1
 800479e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a6:	e00f      	b.n	80047c8 <HAL_I2C_Init+0x1dc>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1e58      	subs	r0, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6859      	ldr	r1, [r3, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	0099      	lsls	r1, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80047be:	3301      	adds	r3, #1
 80047c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	6809      	ldr	r1, [r1, #0]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69da      	ldr	r2, [r3, #28]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6911      	ldr	r1, [r2, #16]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68d2      	ldr	r2, [r2, #12]
 8004802:	4311      	orrs	r1, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	430b      	orrs	r3, r1
 800480a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695a      	ldr	r2, [r3, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2220      	movs	r2, #32
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	000186a0 	.word	0x000186a0
 8004864:	001e847f 	.word	0x001e847f
 8004868:	003d08ff 	.word	0x003d08ff
 800486c:	431bde83 	.word	0x431bde83
 8004870:	10624dd3 	.word	0x10624dd3

08004874 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e128      	b.n	8004ad8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a90      	ldr	r2, [pc, #576]	; (8004ae0 <HAL_I2S_Init+0x26c>)
 800489e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7fc fd59 	bl	8001358 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2202      	movs	r2, #2
 80048aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80048bc:	f023 030f 	bic.w	r3, r3, #15
 80048c0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2202      	movs	r2, #2
 80048c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d060      	beq.n	8004994 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d102      	bne.n	80048e0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80048da:	2310      	movs	r3, #16
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	e001      	b.n	80048e4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80048e0:	2320      	movs	r3, #32
 80048e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d802      	bhi.n	80048f2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80048f2:	2001      	movs	r0, #1
 80048f4:	f001 f9a0 	bl	8005c38 <HAL_RCCEx_GetPeriphCLKFreq>
 80048f8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004902:	d125      	bne.n	8004950 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d010      	beq.n	800492e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	fbb2 f2f3 	udiv	r2, r2, r3
 8004916:	4613      	mov	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	461a      	mov	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	3305      	adds	r3, #5
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	e01f      	b.n	800496e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	fbb2 f2f3 	udiv	r2, r2, r3
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	461a      	mov	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	fbb2 f3f3 	udiv	r3, r2, r3
 800494a:	3305      	adds	r3, #5
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	e00e      	b.n	800496e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	fbb2 f2f3 	udiv	r2, r2, r3
 8004958:	4613      	mov	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	461a      	mov	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	fbb2 f3f3 	udiv	r3, r2, r3
 800496a:	3305      	adds	r3, #5
 800496c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4a5c      	ldr	r2, [pc, #368]	; (8004ae4 <HAL_I2S_Init+0x270>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	08db      	lsrs	r3, r3, #3
 8004978:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	085b      	lsrs	r3, r3, #1
 800498a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e003      	b.n	800499c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004994:	2302      	movs	r3, #2
 8004996:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d902      	bls.n	80049a8 <HAL_I2S_Init+0x134>
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	2bff      	cmp	r3, #255	; 0xff
 80049a6:	d907      	bls.n	80049b8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ac:	f043 0210 	orr.w	r2, r3, #16
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e08f      	b.n	8004ad8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	ea42 0103 	orr.w	r1, r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69fa      	ldr	r2, [r7, #28]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80049d6:	f023 030f 	bic.w	r3, r3, #15
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6851      	ldr	r1, [r2, #4]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6892      	ldr	r2, [r2, #8]
 80049e2:	4311      	orrs	r1, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	68d2      	ldr	r2, [r2, #12]
 80049e8:	4311      	orrs	r1, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6992      	ldr	r2, [r2, #24]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049fa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d161      	bne.n	8004ac8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a38      	ldr	r2, [pc, #224]	; (8004ae8 <HAL_I2S_Init+0x274>)
 8004a08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a37      	ldr	r2, [pc, #220]	; (8004aec <HAL_I2S_Init+0x278>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d101      	bne.n	8004a18 <HAL_I2S_Init+0x1a4>
 8004a14:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <HAL_I2S_Init+0x27c>)
 8004a16:	e001      	b.n	8004a1c <HAL_I2S_Init+0x1a8>
 8004a18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6812      	ldr	r2, [r2, #0]
 8004a22:	4932      	ldr	r1, [pc, #200]	; (8004aec <HAL_I2S_Init+0x278>)
 8004a24:	428a      	cmp	r2, r1
 8004a26:	d101      	bne.n	8004a2c <HAL_I2S_Init+0x1b8>
 8004a28:	4a31      	ldr	r2, [pc, #196]	; (8004af0 <HAL_I2S_Init+0x27c>)
 8004a2a:	e001      	b.n	8004a30 <HAL_I2S_Init+0x1bc>
 8004a2c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004a30:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a34:	f023 030f 	bic.w	r3, r3, #15
 8004a38:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a2b      	ldr	r2, [pc, #172]	; (8004aec <HAL_I2S_Init+0x278>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d101      	bne.n	8004a48 <HAL_I2S_Init+0x1d4>
 8004a44:	4b2a      	ldr	r3, [pc, #168]	; (8004af0 <HAL_I2S_Init+0x27c>)
 8004a46:	e001      	b.n	8004a4c <HAL_I2S_Init+0x1d8>
 8004a48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a25      	ldr	r2, [pc, #148]	; (8004aec <HAL_I2S_Init+0x278>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d101      	bne.n	8004a5e <HAL_I2S_Init+0x1ea>
 8004a5a:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <HAL_I2S_Init+0x27c>)
 8004a5c:	e001      	b.n	8004a62 <HAL_I2S_Init+0x1ee>
 8004a5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a6e:	d003      	beq.n	8004a78 <HAL_I2S_Init+0x204>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d103      	bne.n	8004a80 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	e001      	b.n	8004a84 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	897b      	ldrh	r3, [r7, #10]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ab0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a0d      	ldr	r2, [pc, #52]	; (8004aec <HAL_I2S_Init+0x278>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d101      	bne.n	8004ac0 <HAL_I2S_Init+0x24c>
 8004abc:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <HAL_I2S_Init+0x27c>)
 8004abe:	e001      	b.n	8004ac4 <HAL_I2S_Init+0x250>
 8004ac0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ac4:	897a      	ldrh	r2, [r7, #10]
 8004ac6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3720      	adds	r7, #32
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	08004beb 	.word	0x08004beb
 8004ae4:	cccccccd 	.word	0xcccccccd
 8004ae8:	08004d01 	.word	0x08004d01
 8004aec:	40003800 	.word	0x40003800
 8004af0:	40003400 	.word	0x40003400

08004af4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	881a      	ldrh	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	1c9a      	adds	r2, r3, #2
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10e      	bne.n	8004b84 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b74:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff ffb8 	bl	8004af4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	b292      	uxth	r2, r2
 8004ba0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	1c9a      	adds	r2, r3, #2
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10e      	bne.n	8004be2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bd2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff ff93 	bl	8004b08 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b086      	sub	sp, #24
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d13a      	bne.n	8004c7c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d109      	bne.n	8004c24 <I2S_IRQHandler+0x3a>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1a:	2b40      	cmp	r3, #64	; 0x40
 8004c1c:	d102      	bne.n	8004c24 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff ffb4 	bl	8004b8c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b40      	cmp	r3, #64	; 0x40
 8004c2c:	d126      	bne.n	8004c7c <I2S_IRQHandler+0x92>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f003 0320 	and.w	r3, r3, #32
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d11f      	bne.n	8004c7c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c4a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	f043 0202 	orr.w	r2, r3, #2
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff ff50 	bl	8004b1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d136      	bne.n	8004cf6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d109      	bne.n	8004ca6 <I2S_IRQHandler+0xbc>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9c:	2b80      	cmp	r3, #128	; 0x80
 8004c9e:	d102      	bne.n	8004ca6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff ff45 	bl	8004b30 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d122      	bne.n	8004cf6 <I2S_IRQHandler+0x10c>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b20      	cmp	r3, #32
 8004cbc:	d11b      	bne.n	8004cf6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ccc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce8:	f043 0204 	orr.w	r2, r3, #4
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff ff13 	bl	8004b1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cf6:	bf00      	nop
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4aa2      	ldr	r2, [pc, #648]	; (8004fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d101      	bne.n	8004d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004d1a:	4ba2      	ldr	r3, [pc, #648]	; (8004fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d1c:	e001      	b.n	8004d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004d1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a9b      	ldr	r2, [pc, #620]	; (8004fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d101      	bne.n	8004d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004d38:	4b9a      	ldr	r3, [pc, #616]	; (8004fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d3a:	e001      	b.n	8004d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004d3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d4c:	d004      	beq.n	8004d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f040 8099 	bne.w	8004e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d107      	bne.n	8004d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f925 	bl	8004fbc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d107      	bne.n	8004d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f9c8 	bl	800511c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d13a      	bne.n	8004e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d035      	beq.n	8004e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a7e      	ldr	r2, [pc, #504]	; (8004fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d101      	bne.n	8004dae <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004daa:	4b7e      	ldr	r3, [pc, #504]	; (8004fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004dac:	e001      	b.n	8004db2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004dae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4979      	ldr	r1, [pc, #484]	; (8004fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004dba:	428b      	cmp	r3, r1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004dbe:	4b79      	ldr	r3, [pc, #484]	; (8004fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004dc0:	e001      	b.n	8004dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004dc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dca:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dda:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	f043 0202 	orr.w	r2, r3, #2
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff fe88 	bl	8004b1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	f040 80be 	bne.w	8004f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 80b8 	beq.w	8004f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e32:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a59      	ldr	r2, [pc, #356]	; (8004fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d101      	bne.n	8004e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004e3e:	4b59      	ldr	r3, [pc, #356]	; (8004fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e40:	e001      	b.n	8004e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004e42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4954      	ldr	r1, [pc, #336]	; (8004fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e4e:	428b      	cmp	r3, r1
 8004e50:	d101      	bne.n	8004e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004e52:	4b54      	ldr	r3, [pc, #336]	; (8004fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e54:	e001      	b.n	8004e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004e56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e5e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e60:	2300      	movs	r3, #0
 8004e62:	60bb      	str	r3, [r7, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	60bb      	str	r3, [r7, #8]
 8004e6c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7a:	f043 0204 	orr.w	r2, r3, #4
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7ff fe4a 	bl	8004b1c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e88:	e084      	b.n	8004f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d107      	bne.n	8004ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f8be 	bl	8005020 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d107      	bne.n	8004ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f8fd 	bl	80050b8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec4:	2b40      	cmp	r3, #64	; 0x40
 8004ec6:	d12f      	bne.n	8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d02a      	beq.n	8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ee0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a2e      	ldr	r2, [pc, #184]	; (8004fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d101      	bne.n	8004ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004eec:	4b2d      	ldr	r3, [pc, #180]	; (8004fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004eee:	e001      	b.n	8004ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004ef0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4929      	ldr	r1, [pc, #164]	; (8004fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004efc:	428b      	cmp	r3, r1
 8004efe:	d101      	bne.n	8004f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004f00:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f02:	e001      	b.n	8004f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f0c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1a:	f043 0202 	orr.w	r2, r3, #2
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff fdfa 	bl	8004b1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d131      	bne.n	8004f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d02c      	beq.n	8004f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a17      	ldr	r2, [pc, #92]	; (8004fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d101      	bne.n	8004f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004f46:	4b17      	ldr	r3, [pc, #92]	; (8004fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f48:	e001      	b.n	8004f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004f4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4912      	ldr	r1, [pc, #72]	; (8004fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f56:	428b      	cmp	r3, r1
 8004f58:	d101      	bne.n	8004f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004f5a:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f5c:	e001      	b.n	8004f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f66:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f76:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f84:	f043 0204 	orr.w	r2, r3, #4
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff fdc5 	bl	8004b1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f92:	e000      	b.n	8004f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f94:	bf00      	nop
}
 8004f96:	bf00      	nop
 8004f98:	3720      	adds	r7, #32
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40003800 	.word	0x40003800
 8004fa4:	40003400 	.word	0x40003400

08004fa8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	1c99      	adds	r1, r3, #2
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6251      	str	r1, [r2, #36]	; 0x24
 8004fce:	881a      	ldrh	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d113      	bne.n	8005016 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ffc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d106      	bne.n	8005016 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff ffc9 	bl	8004fa8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005016:	bf00      	nop
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	1c99      	adds	r1, r3, #2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6251      	str	r1, [r2, #36]	; 0x24
 8005032:	8819      	ldrh	r1, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1d      	ldr	r2, [pc, #116]	; (80050b0 <I2SEx_TxISR_I2SExt+0x90>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d101      	bne.n	8005042 <I2SEx_TxISR_I2SExt+0x22>
 800503e:	4b1d      	ldr	r3, [pc, #116]	; (80050b4 <I2SEx_TxISR_I2SExt+0x94>)
 8005040:	e001      	b.n	8005046 <I2SEx_TxISR_I2SExt+0x26>
 8005042:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005046:	460a      	mov	r2, r1
 8005048:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d121      	bne.n	80050a6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a12      	ldr	r2, [pc, #72]	; (80050b0 <I2SEx_TxISR_I2SExt+0x90>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d101      	bne.n	8005070 <I2SEx_TxISR_I2SExt+0x50>
 800506c:	4b11      	ldr	r3, [pc, #68]	; (80050b4 <I2SEx_TxISR_I2SExt+0x94>)
 800506e:	e001      	b.n	8005074 <I2SEx_TxISR_I2SExt+0x54>
 8005070:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	490d      	ldr	r1, [pc, #52]	; (80050b0 <I2SEx_TxISR_I2SExt+0x90>)
 800507c:	428b      	cmp	r3, r1
 800507e:	d101      	bne.n	8005084 <I2SEx_TxISR_I2SExt+0x64>
 8005080:	4b0c      	ldr	r3, [pc, #48]	; (80050b4 <I2SEx_TxISR_I2SExt+0x94>)
 8005082:	e001      	b.n	8005088 <I2SEx_TxISR_I2SExt+0x68>
 8005084:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005088:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800508c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d106      	bne.n	80050a6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff ff81 	bl	8004fa8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050a6:	bf00      	nop
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40003800 	.word	0x40003800
 80050b4:	40003400 	.word	0x40003400

080050b8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68d8      	ldr	r0, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	1c99      	adds	r1, r3, #2
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	62d1      	str	r1, [r2, #44]	; 0x2c
 80050d0:	b282      	uxth	r2, r0
 80050d2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29a      	uxth	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d113      	bne.n	8005114 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050fa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff ff4a 	bl	8004fa8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a20      	ldr	r2, [pc, #128]	; (80051ac <I2SEx_RxISR_I2SExt+0x90>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d101      	bne.n	8005132 <I2SEx_RxISR_I2SExt+0x16>
 800512e:	4b20      	ldr	r3, [pc, #128]	; (80051b0 <I2SEx_RxISR_I2SExt+0x94>)
 8005130:	e001      	b.n	8005136 <I2SEx_RxISR_I2SExt+0x1a>
 8005132:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005136:	68d8      	ldr	r0, [r3, #12]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	1c99      	adds	r1, r3, #2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005142:	b282      	uxth	r2, r0
 8005144:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d121      	bne.n	80051a2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a12      	ldr	r2, [pc, #72]	; (80051ac <I2SEx_RxISR_I2SExt+0x90>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d101      	bne.n	800516c <I2SEx_RxISR_I2SExt+0x50>
 8005168:	4b11      	ldr	r3, [pc, #68]	; (80051b0 <I2SEx_RxISR_I2SExt+0x94>)
 800516a:	e001      	b.n	8005170 <I2SEx_RxISR_I2SExt+0x54>
 800516c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	490d      	ldr	r1, [pc, #52]	; (80051ac <I2SEx_RxISR_I2SExt+0x90>)
 8005178:	428b      	cmp	r3, r1
 800517a:	d101      	bne.n	8005180 <I2SEx_RxISR_I2SExt+0x64>
 800517c:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <I2SEx_RxISR_I2SExt+0x94>)
 800517e:	e001      	b.n	8005184 <I2SEx_RxISR_I2SExt+0x68>
 8005180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005184:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005188:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d106      	bne.n	80051a2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff ff03 	bl	8004fa8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051a2:	bf00      	nop
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40003800 	.word	0x40003800
 80051b0:	40003400 	.word	0x40003400

080051b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e264      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d075      	beq.n	80052be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051d2:	4ba3      	ldr	r3, [pc, #652]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d00c      	beq.n	80051f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051de:	4ba0      	ldr	r3, [pc, #640]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d112      	bne.n	8005210 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ea:	4b9d      	ldr	r3, [pc, #628]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051f6:	d10b      	bne.n	8005210 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f8:	4b99      	ldr	r3, [pc, #612]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d05b      	beq.n	80052bc <HAL_RCC_OscConfig+0x108>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d157      	bne.n	80052bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e23f      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005218:	d106      	bne.n	8005228 <HAL_RCC_OscConfig+0x74>
 800521a:	4b91      	ldr	r3, [pc, #580]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a90      	ldr	r2, [pc, #576]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	e01d      	b.n	8005264 <HAL_RCC_OscConfig+0xb0>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005230:	d10c      	bne.n	800524c <HAL_RCC_OscConfig+0x98>
 8005232:	4b8b      	ldr	r3, [pc, #556]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a8a      	ldr	r2, [pc, #552]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	4b88      	ldr	r3, [pc, #544]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a87      	ldr	r2, [pc, #540]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	e00b      	b.n	8005264 <HAL_RCC_OscConfig+0xb0>
 800524c:	4b84      	ldr	r3, [pc, #528]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a83      	ldr	r2, [pc, #524]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005256:	6013      	str	r3, [r2, #0]
 8005258:	4b81      	ldr	r3, [pc, #516]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a80      	ldr	r2, [pc, #512]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 800525e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d013      	beq.n	8005294 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526c:	f7fd f930 	bl	80024d0 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005274:	f7fd f92c 	bl	80024d0 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b64      	cmp	r3, #100	; 0x64
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e204      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005286:	4b76      	ldr	r3, [pc, #472]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0f0      	beq.n	8005274 <HAL_RCC_OscConfig+0xc0>
 8005292:	e014      	b.n	80052be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005294:	f7fd f91c 	bl	80024d0 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800529c:	f7fd f918 	bl	80024d0 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b64      	cmp	r3, #100	; 0x64
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e1f0      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ae:	4b6c      	ldr	r3, [pc, #432]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f0      	bne.n	800529c <HAL_RCC_OscConfig+0xe8>
 80052ba:	e000      	b.n	80052be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d063      	beq.n	8005392 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052ca:	4b65      	ldr	r3, [pc, #404]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052d6:	4b62      	ldr	r3, [pc, #392]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d11c      	bne.n	800531c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052e2:	4b5f      	ldr	r3, [pc, #380]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d116      	bne.n	800531c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ee:	4b5c      	ldr	r3, [pc, #368]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <HAL_RCC_OscConfig+0x152>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d001      	beq.n	8005306 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e1c4      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005306:	4b56      	ldr	r3, [pc, #344]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4952      	ldr	r1, [pc, #328]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005316:	4313      	orrs	r3, r2
 8005318:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800531a:	e03a      	b.n	8005392 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d020      	beq.n	8005366 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005324:	4b4f      	ldr	r3, [pc, #316]	; (8005464 <HAL_RCC_OscConfig+0x2b0>)
 8005326:	2201      	movs	r2, #1
 8005328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532a:	f7fd f8d1 	bl	80024d0 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005332:	f7fd f8cd 	bl	80024d0 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e1a5      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005344:	4b46      	ldr	r3, [pc, #280]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005350:	4b43      	ldr	r3, [pc, #268]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4940      	ldr	r1, [pc, #256]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005360:	4313      	orrs	r3, r2
 8005362:	600b      	str	r3, [r1, #0]
 8005364:	e015      	b.n	8005392 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005366:	4b3f      	ldr	r3, [pc, #252]	; (8005464 <HAL_RCC_OscConfig+0x2b0>)
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536c:	f7fd f8b0 	bl	80024d0 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005374:	f7fd f8ac 	bl	80024d0 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e184      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005386:	4b36      	ldr	r3, [pc, #216]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d030      	beq.n	8005400 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d016      	beq.n	80053d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053a6:	4b30      	ldr	r3, [pc, #192]	; (8005468 <HAL_RCC_OscConfig+0x2b4>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ac:	f7fd f890 	bl	80024d0 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053b4:	f7fd f88c 	bl	80024d0 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e164      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053c6:	4b26      	ldr	r3, [pc, #152]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80053c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f0      	beq.n	80053b4 <HAL_RCC_OscConfig+0x200>
 80053d2:	e015      	b.n	8005400 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053d4:	4b24      	ldr	r3, [pc, #144]	; (8005468 <HAL_RCC_OscConfig+0x2b4>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053da:	f7fd f879 	bl	80024d0 <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053e2:	f7fd f875 	bl	80024d0 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e14d      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053f4:	4b1a      	ldr	r3, [pc, #104]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80053f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f0      	bne.n	80053e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80a0 	beq.w	800554e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800540e:	2300      	movs	r3, #0
 8005410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005412:	4b13      	ldr	r3, [pc, #76]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10f      	bne.n	800543e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	4b0f      	ldr	r3, [pc, #60]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	4a0e      	ldr	r2, [pc, #56]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800542c:	6413      	str	r3, [r2, #64]	; 0x40
 800542e:	4b0c      	ldr	r3, [pc, #48]	; (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005436:	60bb      	str	r3, [r7, #8]
 8005438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800543a:	2301      	movs	r3, #1
 800543c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800543e:	4b0b      	ldr	r3, [pc, #44]	; (800546c <HAL_RCC_OscConfig+0x2b8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005446:	2b00      	cmp	r3, #0
 8005448:	d121      	bne.n	800548e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800544a:	4b08      	ldr	r3, [pc, #32]	; (800546c <HAL_RCC_OscConfig+0x2b8>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a07      	ldr	r2, [pc, #28]	; (800546c <HAL_RCC_OscConfig+0x2b8>)
 8005450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005456:	f7fd f83b 	bl	80024d0 <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545c:	e011      	b.n	8005482 <HAL_RCC_OscConfig+0x2ce>
 800545e:	bf00      	nop
 8005460:	40023800 	.word	0x40023800
 8005464:	42470000 	.word	0x42470000
 8005468:	42470e80 	.word	0x42470e80
 800546c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005470:	f7fd f82e 	bl	80024d0 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e106      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005482:	4b85      	ldr	r3, [pc, #532]	; (8005698 <HAL_RCC_OscConfig+0x4e4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0f0      	beq.n	8005470 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d106      	bne.n	80054a4 <HAL_RCC_OscConfig+0x2f0>
 8005496:	4b81      	ldr	r3, [pc, #516]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 8005498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549a:	4a80      	ldr	r2, [pc, #512]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	6713      	str	r3, [r2, #112]	; 0x70
 80054a2:	e01c      	b.n	80054de <HAL_RCC_OscConfig+0x32a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2b05      	cmp	r3, #5
 80054aa:	d10c      	bne.n	80054c6 <HAL_RCC_OscConfig+0x312>
 80054ac:	4b7b      	ldr	r3, [pc, #492]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 80054ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b0:	4a7a      	ldr	r2, [pc, #488]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 80054b2:	f043 0304 	orr.w	r3, r3, #4
 80054b6:	6713      	str	r3, [r2, #112]	; 0x70
 80054b8:	4b78      	ldr	r3, [pc, #480]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054bc:	4a77      	ldr	r2, [pc, #476]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	6713      	str	r3, [r2, #112]	; 0x70
 80054c4:	e00b      	b.n	80054de <HAL_RCC_OscConfig+0x32a>
 80054c6:	4b75      	ldr	r3, [pc, #468]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 80054c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ca:	4a74      	ldr	r2, [pc, #464]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 80054cc:	f023 0301 	bic.w	r3, r3, #1
 80054d0:	6713      	str	r3, [r2, #112]	; 0x70
 80054d2:	4b72      	ldr	r3, [pc, #456]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 80054d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d6:	4a71      	ldr	r2, [pc, #452]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 80054d8:	f023 0304 	bic.w	r3, r3, #4
 80054dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d015      	beq.n	8005512 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e6:	f7fc fff3 	bl	80024d0 <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ec:	e00a      	b.n	8005504 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054ee:	f7fc ffef 	bl	80024d0 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e0c5      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005504:	4b65      	ldr	r3, [pc, #404]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 8005506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0ee      	beq.n	80054ee <HAL_RCC_OscConfig+0x33a>
 8005510:	e014      	b.n	800553c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005512:	f7fc ffdd 	bl	80024d0 <HAL_GetTick>
 8005516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005518:	e00a      	b.n	8005530 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800551a:	f7fc ffd9 	bl	80024d0 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	f241 3288 	movw	r2, #5000	; 0x1388
 8005528:	4293      	cmp	r3, r2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e0af      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005530:	4b5a      	ldr	r3, [pc, #360]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1ee      	bne.n	800551a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800553c:	7dfb      	ldrb	r3, [r7, #23]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d105      	bne.n	800554e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005542:	4b56      	ldr	r3, [pc, #344]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	4a55      	ldr	r2, [pc, #340]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 8005548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800554c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 809b 	beq.w	800568e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005558:	4b50      	ldr	r3, [pc, #320]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 030c 	and.w	r3, r3, #12
 8005560:	2b08      	cmp	r3, #8
 8005562:	d05c      	beq.n	800561e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	2b02      	cmp	r3, #2
 800556a:	d141      	bne.n	80055f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800556c:	4b4c      	ldr	r3, [pc, #304]	; (80056a0 <HAL_RCC_OscConfig+0x4ec>)
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005572:	f7fc ffad 	bl	80024d0 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005578:	e008      	b.n	800558c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800557a:	f7fc ffa9 	bl	80024d0 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e081      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800558c:	4b43      	ldr	r3, [pc, #268]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1f0      	bne.n	800557a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	019b      	lsls	r3, r3, #6
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	085b      	lsrs	r3, r3, #1
 80055b0:	3b01      	subs	r3, #1
 80055b2:	041b      	lsls	r3, r3, #16
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	061b      	lsls	r3, r3, #24
 80055bc:	4937      	ldr	r1, [pc, #220]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055c2:	4b37      	ldr	r3, [pc, #220]	; (80056a0 <HAL_RCC_OscConfig+0x4ec>)
 80055c4:	2201      	movs	r2, #1
 80055c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c8:	f7fc ff82 	bl	80024d0 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d0:	f7fc ff7e 	bl	80024d0 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e056      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055e2:	4b2e      	ldr	r3, [pc, #184]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0f0      	beq.n	80055d0 <HAL_RCC_OscConfig+0x41c>
 80055ee:	e04e      	b.n	800568e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f0:	4b2b      	ldr	r3, [pc, #172]	; (80056a0 <HAL_RCC_OscConfig+0x4ec>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f6:	f7fc ff6b 	bl	80024d0 <HAL_GetTick>
 80055fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055fe:	f7fc ff67 	bl	80024d0 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e03f      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005610:	4b22      	ldr	r3, [pc, #136]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1f0      	bne.n	80055fe <HAL_RCC_OscConfig+0x44a>
 800561c:	e037      	b.n	800568e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e032      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800562a:	4b1c      	ldr	r3, [pc, #112]	; (800569c <HAL_RCC_OscConfig+0x4e8>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d028      	beq.n	800568a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005642:	429a      	cmp	r2, r3
 8005644:	d121      	bne.n	800568a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005650:	429a      	cmp	r2, r3
 8005652:	d11a      	bne.n	800568a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800565a:	4013      	ands	r3, r2
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005660:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005662:	4293      	cmp	r3, r2
 8005664:	d111      	bne.n	800568a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005670:	085b      	lsrs	r3, r3, #1
 8005672:	3b01      	subs	r3, #1
 8005674:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005676:	429a      	cmp	r2, r3
 8005678:	d107      	bne.n	800568a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005686:	429a      	cmp	r2, r3
 8005688:	d001      	beq.n	800568e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40007000 	.word	0x40007000
 800569c:	40023800 	.word	0x40023800
 80056a0:	42470060 	.word	0x42470060

080056a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e0cc      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056b8:	4b68      	ldr	r3, [pc, #416]	; (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d90c      	bls.n	80056e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c6:	4b65      	ldr	r3, [pc, #404]	; (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ce:	4b63      	ldr	r3, [pc, #396]	; (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d001      	beq.n	80056e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e0b8      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d020      	beq.n	800572e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056f8:	4b59      	ldr	r3, [pc, #356]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	4a58      	ldr	r2, [pc, #352]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005710:	4b53      	ldr	r3, [pc, #332]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	4a52      	ldr	r2, [pc, #328]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800571a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800571c:	4b50      	ldr	r3, [pc, #320]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	494d      	ldr	r1, [pc, #308]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	4313      	orrs	r3, r2
 800572c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d044      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d107      	bne.n	8005752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005742:	4b47      	ldr	r3, [pc, #284]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d119      	bne.n	8005782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e07f      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d003      	beq.n	8005762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800575e:	2b03      	cmp	r3, #3
 8005760:	d107      	bne.n	8005772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005762:	4b3f      	ldr	r3, [pc, #252]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d109      	bne.n	8005782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e06f      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005772:	4b3b      	ldr	r3, [pc, #236]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e067      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005782:	4b37      	ldr	r3, [pc, #220]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f023 0203 	bic.w	r2, r3, #3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	4934      	ldr	r1, [pc, #208]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005790:	4313      	orrs	r3, r2
 8005792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005794:	f7fc fe9c 	bl	80024d0 <HAL_GetTick>
 8005798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800579a:	e00a      	b.n	80057b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800579c:	f7fc fe98 	bl	80024d0 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e04f      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057b2:	4b2b      	ldr	r3, [pc, #172]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 020c 	and.w	r2, r3, #12
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d1eb      	bne.n	800579c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057c4:	4b25      	ldr	r3, [pc, #148]	; (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d20c      	bcs.n	80057ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d2:	4b22      	ldr	r3, [pc, #136]	; (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057da:	4b20      	ldr	r3, [pc, #128]	; (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d001      	beq.n	80057ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e032      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d008      	beq.n	800580a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057f8:	4b19      	ldr	r3, [pc, #100]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	4916      	ldr	r1, [pc, #88]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005806:	4313      	orrs	r3, r2
 8005808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d009      	beq.n	800582a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005816:	4b12      	ldr	r3, [pc, #72]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	490e      	ldr	r1, [pc, #56]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	4313      	orrs	r3, r2
 8005828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800582a:	f000 f821 	bl	8005870 <HAL_RCC_GetSysClockFreq>
 800582e:	4602      	mov	r2, r0
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	490a      	ldr	r1, [pc, #40]	; (8005864 <HAL_RCC_ClockConfig+0x1c0>)
 800583c:	5ccb      	ldrb	r3, [r1, r3]
 800583e:	fa22 f303 	lsr.w	r3, r2, r3
 8005842:	4a09      	ldr	r2, [pc, #36]	; (8005868 <HAL_RCC_ClockConfig+0x1c4>)
 8005844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005846:	4b09      	ldr	r3, [pc, #36]	; (800586c <HAL_RCC_ClockConfig+0x1c8>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f7fc fdfc 	bl	8002448 <HAL_InitTick>

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40023c00 	.word	0x40023c00
 8005860:	40023800 	.word	0x40023800
 8005864:	0800aa84 	.word	0x0800aa84
 8005868:	20000004 	.word	0x20000004
 800586c:	2000000c 	.word	0x2000000c

08005870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005870:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005874:	b084      	sub	sp, #16
 8005876:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	607b      	str	r3, [r7, #4]
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	2300      	movs	r3, #0
 8005882:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005888:	4b67      	ldr	r3, [pc, #412]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 030c 	and.w	r3, r3, #12
 8005890:	2b08      	cmp	r3, #8
 8005892:	d00d      	beq.n	80058b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005894:	2b08      	cmp	r3, #8
 8005896:	f200 80bd 	bhi.w	8005a14 <HAL_RCC_GetSysClockFreq+0x1a4>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <HAL_RCC_GetSysClockFreq+0x34>
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d003      	beq.n	80058aa <HAL_RCC_GetSysClockFreq+0x3a>
 80058a2:	e0b7      	b.n	8005a14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058a4:	4b61      	ldr	r3, [pc, #388]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80058a6:	60bb      	str	r3, [r7, #8]
       break;
 80058a8:	e0b7      	b.n	8005a1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058aa:	4b61      	ldr	r3, [pc, #388]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80058ac:	60bb      	str	r3, [r7, #8]
      break;
 80058ae:	e0b4      	b.n	8005a1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058b0:	4b5d      	ldr	r3, [pc, #372]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058ba:	4b5b      	ldr	r3, [pc, #364]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d04d      	beq.n	8005962 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058c6:	4b58      	ldr	r3, [pc, #352]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	099b      	lsrs	r3, r3, #6
 80058cc:	461a      	mov	r2, r3
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80058d6:	f04f 0100 	mov.w	r1, #0
 80058da:	ea02 0800 	and.w	r8, r2, r0
 80058de:	ea03 0901 	and.w	r9, r3, r1
 80058e2:	4640      	mov	r0, r8
 80058e4:	4649      	mov	r1, r9
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	f04f 0300 	mov.w	r3, #0
 80058ee:	014b      	lsls	r3, r1, #5
 80058f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058f4:	0142      	lsls	r2, r0, #5
 80058f6:	4610      	mov	r0, r2
 80058f8:	4619      	mov	r1, r3
 80058fa:	ebb0 0008 	subs.w	r0, r0, r8
 80058fe:	eb61 0109 	sbc.w	r1, r1, r9
 8005902:	f04f 0200 	mov.w	r2, #0
 8005906:	f04f 0300 	mov.w	r3, #0
 800590a:	018b      	lsls	r3, r1, #6
 800590c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005910:	0182      	lsls	r2, r0, #6
 8005912:	1a12      	subs	r2, r2, r0
 8005914:	eb63 0301 	sbc.w	r3, r3, r1
 8005918:	f04f 0000 	mov.w	r0, #0
 800591c:	f04f 0100 	mov.w	r1, #0
 8005920:	00d9      	lsls	r1, r3, #3
 8005922:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005926:	00d0      	lsls	r0, r2, #3
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	eb12 0208 	adds.w	r2, r2, r8
 8005930:	eb43 0309 	adc.w	r3, r3, r9
 8005934:	f04f 0000 	mov.w	r0, #0
 8005938:	f04f 0100 	mov.w	r1, #0
 800593c:	0259      	lsls	r1, r3, #9
 800593e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005942:	0250      	lsls	r0, r2, #9
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4610      	mov	r0, r2
 800594a:	4619      	mov	r1, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	461a      	mov	r2, r3
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	f7fa fc38 	bl	80001c8 <__aeabi_uldivmod>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4613      	mov	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e04a      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005962:	4b31      	ldr	r3, [pc, #196]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	099b      	lsrs	r3, r3, #6
 8005968:	461a      	mov	r2, r3
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005972:	f04f 0100 	mov.w	r1, #0
 8005976:	ea02 0400 	and.w	r4, r2, r0
 800597a:	ea03 0501 	and.w	r5, r3, r1
 800597e:	4620      	mov	r0, r4
 8005980:	4629      	mov	r1, r5
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	014b      	lsls	r3, r1, #5
 800598c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005990:	0142      	lsls	r2, r0, #5
 8005992:	4610      	mov	r0, r2
 8005994:	4619      	mov	r1, r3
 8005996:	1b00      	subs	r0, r0, r4
 8005998:	eb61 0105 	sbc.w	r1, r1, r5
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	018b      	lsls	r3, r1, #6
 80059a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80059aa:	0182      	lsls	r2, r0, #6
 80059ac:	1a12      	subs	r2, r2, r0
 80059ae:	eb63 0301 	sbc.w	r3, r3, r1
 80059b2:	f04f 0000 	mov.w	r0, #0
 80059b6:	f04f 0100 	mov.w	r1, #0
 80059ba:	00d9      	lsls	r1, r3, #3
 80059bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059c0:	00d0      	lsls	r0, r2, #3
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	1912      	adds	r2, r2, r4
 80059c8:	eb45 0303 	adc.w	r3, r5, r3
 80059cc:	f04f 0000 	mov.w	r0, #0
 80059d0:	f04f 0100 	mov.w	r1, #0
 80059d4:	0299      	lsls	r1, r3, #10
 80059d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80059da:	0290      	lsls	r0, r2, #10
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	4610      	mov	r0, r2
 80059e2:	4619      	mov	r1, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	461a      	mov	r2, r3
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	f7fa fbec 	bl	80001c8 <__aeabi_uldivmod>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4613      	mov	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059f8:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	0c1b      	lsrs	r3, r3, #16
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	3301      	adds	r3, #1
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	60bb      	str	r3, [r7, #8]
      break;
 8005a12:	e002      	b.n	8005a1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a14:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a16:	60bb      	str	r3, [r7, #8]
      break;
 8005a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005a26:	bf00      	nop
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	00f42400 	.word	0x00f42400
 8005a30:	007a1200 	.word	0x007a1200

08005a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a38:	4b03      	ldr	r3, [pc, #12]	; (8005a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	20000004 	.word	0x20000004

08005a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a50:	f7ff fff0 	bl	8005a34 <HAL_RCC_GetHCLKFreq>
 8005a54:	4602      	mov	r2, r0
 8005a56:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	0a9b      	lsrs	r3, r3, #10
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	4903      	ldr	r1, [pc, #12]	; (8005a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a62:	5ccb      	ldrb	r3, [r1, r3]
 8005a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	0800aa94 	.word	0x0800aa94

08005a74 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d105      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d035      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a9c:	4b62      	ldr	r3, [pc, #392]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005aa2:	f7fc fd15 	bl	80024d0 <HAL_GetTick>
 8005aa6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005aa8:	e008      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005aaa:	f7fc fd11 	bl	80024d0 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d901      	bls.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e0b0      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005abc:	4b5b      	ldr	r3, [pc, #364]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1f0      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	019a      	lsls	r2, r3, #6
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	071b      	lsls	r3, r3, #28
 8005ad4:	4955      	ldr	r1, [pc, #340]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005adc:	4b52      	ldr	r3, [pc, #328]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ae2:	f7fc fcf5 	bl	80024d0 <HAL_GetTick>
 8005ae6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ae8:	e008      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005aea:	f7fc fcf1 	bl	80024d0 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e090      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005afc:	4b4b      	ldr	r3, [pc, #300]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0f0      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 8083 	beq.w	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	4b44      	ldr	r3, [pc, #272]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	4a43      	ldr	r2, [pc, #268]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b24:	6413      	str	r3, [r2, #64]	; 0x40
 8005b26:	4b41      	ldr	r3, [pc, #260]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b32:	4b3f      	ldr	r3, [pc, #252]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a3e      	ldr	r2, [pc, #248]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b3e:	f7fc fcc7 	bl	80024d0 <HAL_GetTick>
 8005b42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b44:	e008      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b46:	f7fc fcc3 	bl	80024d0 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e062      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b58:	4b35      	ldr	r3, [pc, #212]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0f0      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b64:	4b31      	ldr	r3, [pc, #196]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d02f      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d028      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b82:	4b2a      	ldr	r3, [pc, #168]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b8c:	4b29      	ldr	r3, [pc, #164]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b92:	4b28      	ldr	r3, [pc, #160]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b98:	4a24      	ldr	r2, [pc, #144]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b9e:	4b23      	ldr	r3, [pc, #140]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d114      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005baa:	f7fc fc91 	bl	80024d0 <HAL_GetTick>
 8005bae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb0:	e00a      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bb2:	f7fc fc8d 	bl	80024d0 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e02a      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc8:	4b18      	ldr	r3, [pc, #96]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0ee      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005be0:	d10d      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005be2:	4b12      	ldr	r3, [pc, #72]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf6:	490d      	ldr	r1, [pc, #52]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	608b      	str	r3, [r1, #8]
 8005bfc:	e005      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005bfe:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	4a0a      	ldr	r2, [pc, #40]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c08:	6093      	str	r3, [r2, #8]
 8005c0a:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c16:	4905      	ldr	r1, [pc, #20]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	42470068 	.word	0x42470068
 8005c2c:	40023800 	.word	0x40023800
 8005c30:	40007000 	.word	0x40007000
 8005c34:	42470e40 	.word	0x42470e40

08005c38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d13e      	bne.n	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005c56:	4b23      	ldr	r3, [pc, #140]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d12f      	bne.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c6c:	4b1e      	ldr	r3, [pc, #120]	; (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c6e:	617b      	str	r3, [r7, #20]
          break;
 8005c70:	e02f      	b.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c72:	4b1c      	ldr	r3, [pc, #112]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c7e:	d108      	bne.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c80:	4b18      	ldr	r3, [pc, #96]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c88:	4a18      	ldr	r2, [pc, #96]	; (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	e007      	b.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c92:	4b14      	ldr	r3, [pc, #80]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c9a:	4a15      	ldr	r2, [pc, #84]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005ca2:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca8:	099b      	lsrs	r3, r3, #6
 8005caa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	fb02 f303 	mul.w	r3, r2, r3
 8005cb4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cbc:	0f1b      	lsrs	r3, r3, #28
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc8:	617b      	str	r3, [r7, #20]
          break;
 8005cca:	e002      	b.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]
          break;
 8005cd0:	bf00      	nop
        }
      }
      break;
 8005cd2:	bf00      	nop
    }
  }
  return frequency;
 8005cd4:	697b      	ldr	r3, [r7, #20]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	00bb8000 	.word	0x00bb8000
 8005cec:	007a1200 	.word	0x007a1200
 8005cf0:	00f42400 	.word	0x00f42400

08005cf4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e01c      	b.n	8005d40 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	795b      	ldrb	r3, [r3, #5]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d105      	bne.n	8005d1c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fb fb86 	bl	8001428 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0204 	orr.w	r2, r2, #4
 8005d30:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	791b      	ldrb	r3, [r3, #4]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e03d      	b.n	8005dde <HAL_RNG_GenerateRandomNumber+0x96>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	795b      	ldrb	r3, [r3, #5]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d12c      	bne.n	8005dcc <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2202      	movs	r2, #2
 8005d76:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d78:	f7fc fbaa 	bl	80024d0 <HAL_GetTick>
 8005d7c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005d7e:	e011      	b.n	8005da4 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005d80:	f7fc fba6 	bl	80024d0 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d90a      	bls.n	8005da4 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e01c      	b.n	8005dde <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d1e6      	bne.n	8005d80 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	715a      	strb	r2, [r3, #5]
 8005dca:	e004      	b.n	8005dd6 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2204      	movs	r2, #4
 8005dd0:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	711a      	strb	r2, [r3, #4]

  return status;
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	330c      	adds	r3, #12
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff ffa7 	bl	8005d48 <HAL_RNG_GenerateRandomNumber>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d102      	bne.n	8005e06 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	e000      	b.n	8005e08 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005e06:	2300      	movs	r3, #0
  }
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e07b      	b.n	8005f1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d108      	bne.n	8005e3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e32:	d009      	beq.n	8005e48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	61da      	str	r2, [r3, #28]
 8005e3a:	e005      	b.n	8005e48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fb fb02 	bl	800146c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ecc:	ea42 0103 	orr.w	r1, r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	0c1b      	lsrs	r3, r3, #16
 8005ee6:	f003 0104 	and.w	r1, r3, #4
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	f003 0210 	and.w	r2, r3, #16
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69da      	ldr	r2, [r3, #28]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b088      	sub	sp, #32
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	603b      	str	r3, [r7, #0]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_SPI_Transmit+0x22>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e126      	b.n	8006192 <HAL_SPI_Transmit+0x270>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f4c:	f7fc fac0 	bl	80024d0 <HAL_GetTick>
 8005f50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f52:	88fb      	ldrh	r3, [r7, #6]
 8005f54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d002      	beq.n	8005f68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f62:	2302      	movs	r3, #2
 8005f64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f66:	e10b      	b.n	8006180 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_SPI_Transmit+0x52>
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d102      	bne.n	8005f7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f78:	e102      	b.n	8006180 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2203      	movs	r2, #3
 8005f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	88fa      	ldrh	r2, [r7, #6]
 8005f92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	88fa      	ldrh	r2, [r7, #6]
 8005f98:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc0:	d10f      	bne.n	8005fe2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fe0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d007      	beq.n	8006000 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ffe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006008:	d14b      	bne.n	80060a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_SPI_Transmit+0xf6>
 8006012:	8afb      	ldrh	r3, [r7, #22]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d13e      	bne.n	8006096 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601c:	881a      	ldrh	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006028:	1c9a      	adds	r2, r3, #2
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006032:	b29b      	uxth	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800603c:	e02b      	b.n	8006096 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b02      	cmp	r3, #2
 800604a:	d112      	bne.n	8006072 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006050:	881a      	ldrh	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	1c9a      	adds	r2, r3, #2
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006070:	e011      	b.n	8006096 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006072:	f7fc fa2d 	bl	80024d0 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d803      	bhi.n	800608a <HAL_SPI_Transmit+0x168>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006088:	d102      	bne.n	8006090 <HAL_SPI_Transmit+0x16e>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d102      	bne.n	8006096 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006094:	e074      	b.n	8006180 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1ce      	bne.n	800603e <HAL_SPI_Transmit+0x11c>
 80060a0:	e04c      	b.n	800613c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <HAL_SPI_Transmit+0x18e>
 80060aa:	8afb      	ldrh	r3, [r7, #22]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d140      	bne.n	8006132 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	330c      	adds	r3, #12
 80060ba:	7812      	ldrb	r2, [r2, #0]
 80060bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060d6:	e02c      	b.n	8006132 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d113      	bne.n	800610e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	330c      	adds	r3, #12
 80060f0:	7812      	ldrb	r2, [r2, #0]
 80060f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	86da      	strh	r2, [r3, #54]	; 0x36
 800610c:	e011      	b.n	8006132 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800610e:	f7fc f9df 	bl	80024d0 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d803      	bhi.n	8006126 <HAL_SPI_Transmit+0x204>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006124:	d102      	bne.n	800612c <HAL_SPI_Transmit+0x20a>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006130:	e026      	b.n	8006180 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1cd      	bne.n	80060d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	6839      	ldr	r1, [r7, #0]
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f8b3 	bl	80062ac <SPI_EndRxTxTransaction>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d002      	beq.n	8006152 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10a      	bne.n	8006170 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800615a:	2300      	movs	r3, #0
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	77fb      	strb	r3, [r7, #31]
 800617c:	e000      	b.n	8006180 <HAL_SPI_Transmit+0x25e>
  }

error:
 800617e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006190:	7ffb      	ldrb	r3, [r7, #31]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3720      	adds	r7, #32
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
	...

0800619c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	4613      	mov	r3, r2
 80061aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061ac:	f7fc f990 	bl	80024d0 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b4:	1a9b      	subs	r3, r3, r2
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	4413      	add	r3, r2
 80061ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061bc:	f7fc f988 	bl	80024d0 <HAL_GetTick>
 80061c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061c2:	4b39      	ldr	r3, [pc, #228]	; (80062a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	015b      	lsls	r3, r3, #5
 80061c8:	0d1b      	lsrs	r3, r3, #20
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	fb02 f303 	mul.w	r3, r2, r3
 80061d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061d2:	e054      	b.n	800627e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061da:	d050      	beq.n	800627e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061dc:	f7fc f978 	bl	80024d0 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d902      	bls.n	80061f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d13d      	bne.n	800626e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006200:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800620a:	d111      	bne.n	8006230 <SPI_WaitFlagStateUntilTimeout+0x94>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006214:	d004      	beq.n	8006220 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800621e:	d107      	bne.n	8006230 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800622e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006238:	d10f      	bne.n	800625a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006258:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e017      	b.n	800629e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006274:	2300      	movs	r3, #0
 8006276:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	3b01      	subs	r3, #1
 800627c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4013      	ands	r3, r2
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	429a      	cmp	r2, r3
 800628c:	bf0c      	ite	eq
 800628e:	2301      	moveq	r3, #1
 8006290:	2300      	movne	r3, #0
 8006292:	b2db      	uxtb	r3, r3
 8006294:	461a      	mov	r2, r3
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	429a      	cmp	r2, r3
 800629a:	d19b      	bne.n	80061d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20000004 	.word	0x20000004

080062ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80062b8:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <SPI_EndRxTxTransaction+0x7c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1b      	ldr	r2, [pc, #108]	; (800632c <SPI_EndRxTxTransaction+0x80>)
 80062be:	fba2 2303 	umull	r2, r3, r2, r3
 80062c2:	0d5b      	lsrs	r3, r3, #21
 80062c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062c8:	fb02 f303 	mul.w	r3, r2, r3
 80062cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062d6:	d112      	bne.n	80062fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2200      	movs	r2, #0
 80062e0:	2180      	movs	r1, #128	; 0x80
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f7ff ff5a 	bl	800619c <SPI_WaitFlagStateUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f2:	f043 0220 	orr.w	r2, r3, #32
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e00f      	b.n	800631e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	3b01      	subs	r3, #1
 8006308:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006314:	2b80      	cmp	r3, #128	; 0x80
 8006316:	d0f2      	beq.n	80062fe <SPI_EndRxTxTransaction+0x52>
 8006318:	e000      	b.n	800631c <SPI_EndRxTxTransaction+0x70>
        break;
 800631a:	bf00      	nop
  }

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000004 	.word	0x20000004
 800632c:	165e9f81 	.word	0x165e9f81

08006330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e041      	b.n	80063c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fb f96e 	bl	8001638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3304      	adds	r3, #4
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f000 fd68 	bl	8006e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d001      	beq.n	80063e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e04e      	b.n	8006486 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a23      	ldr	r2, [pc, #140]	; (8006494 <HAL_TIM_Base_Start_IT+0xc4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d022      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006412:	d01d      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1f      	ldr	r2, [pc, #124]	; (8006498 <HAL_TIM_Base_Start_IT+0xc8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d018      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1e      	ldr	r2, [pc, #120]	; (800649c <HAL_TIM_Base_Start_IT+0xcc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d013      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1c      	ldr	r2, [pc, #112]	; (80064a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00e      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1b      	ldr	r2, [pc, #108]	; (80064a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d009      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a19      	ldr	r2, [pc, #100]	; (80064a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d004      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a18      	ldr	r2, [pc, #96]	; (80064ac <HAL_TIM_Base_Start_IT+0xdc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d111      	bne.n	8006474 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b06      	cmp	r3, #6
 8006460:	d010      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0201 	orr.w	r2, r2, #1
 8006470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006472:	e007      	b.n	8006484 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40010000 	.word	0x40010000
 8006498:	40000400 	.word	0x40000400
 800649c:	40000800 	.word	0x40000800
 80064a0:	40000c00 	.word	0x40000c00
 80064a4:	40010400 	.word	0x40010400
 80064a8:	40014000 	.word	0x40014000
 80064ac:	40001800 	.word	0x40001800

080064b0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d109      	bne.n	80064d4 <HAL_TIM_OC_Start_IT+0x24>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	bf14      	ite	ne
 80064cc:	2301      	movne	r3, #1
 80064ce:	2300      	moveq	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	e022      	b.n	800651a <HAL_TIM_OC_Start_IT+0x6a>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d109      	bne.n	80064ee <HAL_TIM_OC_Start_IT+0x3e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	bf14      	ite	ne
 80064e6:	2301      	movne	r3, #1
 80064e8:	2300      	moveq	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	e015      	b.n	800651a <HAL_TIM_OC_Start_IT+0x6a>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d109      	bne.n	8006508 <HAL_TIM_OC_Start_IT+0x58>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	bf14      	ite	ne
 8006500:	2301      	movne	r3, #1
 8006502:	2300      	moveq	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	e008      	b.n	800651a <HAL_TIM_OC_Start_IT+0x6a>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	bf14      	ite	ne
 8006514:	2301      	movne	r3, #1
 8006516:	2300      	moveq	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e0c2      	b.n	80066a8 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d104      	bne.n	8006532 <HAL_TIM_OC_Start_IT+0x82>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006530:	e013      	b.n	800655a <HAL_TIM_OC_Start_IT+0xaa>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b04      	cmp	r3, #4
 8006536:	d104      	bne.n	8006542 <HAL_TIM_OC_Start_IT+0x92>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006540:	e00b      	b.n	800655a <HAL_TIM_OC_Start_IT+0xaa>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b08      	cmp	r3, #8
 8006546:	d104      	bne.n	8006552 <HAL_TIM_OC_Start_IT+0xa2>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006550:	e003      	b.n	800655a <HAL_TIM_OC_Start_IT+0xaa>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2202      	movs	r2, #2
 8006556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b0c      	cmp	r3, #12
 800655e:	d841      	bhi.n	80065e4 <HAL_TIM_OC_Start_IT+0x134>
 8006560:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <HAL_TIM_OC_Start_IT+0xb8>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	0800659d 	.word	0x0800659d
 800656c:	080065e5 	.word	0x080065e5
 8006570:	080065e5 	.word	0x080065e5
 8006574:	080065e5 	.word	0x080065e5
 8006578:	080065af 	.word	0x080065af
 800657c:	080065e5 	.word	0x080065e5
 8006580:	080065e5 	.word	0x080065e5
 8006584:	080065e5 	.word	0x080065e5
 8006588:	080065c1 	.word	0x080065c1
 800658c:	080065e5 	.word	0x080065e5
 8006590:	080065e5 	.word	0x080065e5
 8006594:	080065e5 	.word	0x080065e5
 8006598:	080065d3 	.word	0x080065d3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0202 	orr.w	r2, r2, #2
 80065aa:	60da      	str	r2, [r3, #12]
      break;
 80065ac:	e01b      	b.n	80065e6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68da      	ldr	r2, [r3, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f042 0204 	orr.w	r2, r2, #4
 80065bc:	60da      	str	r2, [r3, #12]
      break;
 80065be:	e012      	b.n	80065e6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0208 	orr.w	r2, r2, #8
 80065ce:	60da      	str	r2, [r3, #12]
      break;
 80065d0:	e009      	b.n	80065e6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0210 	orr.w	r2, r2, #16
 80065e0:	60da      	str	r2, [r3, #12]
      break;
 80065e2:	e000      	b.n	80065e6 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 80065e4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2201      	movs	r2, #1
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 ff12 	bl	8007418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a2d      	ldr	r2, [pc, #180]	; (80066b0 <HAL_TIM_OC_Start_IT+0x200>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d004      	beq.n	8006608 <HAL_TIM_OC_Start_IT+0x158>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a2c      	ldr	r2, [pc, #176]	; (80066b4 <HAL_TIM_OC_Start_IT+0x204>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d101      	bne.n	800660c <HAL_TIM_OC_Start_IT+0x15c>
 8006608:	2301      	movs	r3, #1
 800660a:	e000      	b.n	800660e <HAL_TIM_OC_Start_IT+0x15e>
 800660c:	2300      	movs	r3, #0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d007      	beq.n	8006622 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006620:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a22      	ldr	r2, [pc, #136]	; (80066b0 <HAL_TIM_OC_Start_IT+0x200>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d022      	beq.n	8006672 <HAL_TIM_OC_Start_IT+0x1c2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006634:	d01d      	beq.n	8006672 <HAL_TIM_OC_Start_IT+0x1c2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a1f      	ldr	r2, [pc, #124]	; (80066b8 <HAL_TIM_OC_Start_IT+0x208>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d018      	beq.n	8006672 <HAL_TIM_OC_Start_IT+0x1c2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1d      	ldr	r2, [pc, #116]	; (80066bc <HAL_TIM_OC_Start_IT+0x20c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d013      	beq.n	8006672 <HAL_TIM_OC_Start_IT+0x1c2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a1c      	ldr	r2, [pc, #112]	; (80066c0 <HAL_TIM_OC_Start_IT+0x210>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00e      	beq.n	8006672 <HAL_TIM_OC_Start_IT+0x1c2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a16      	ldr	r2, [pc, #88]	; (80066b4 <HAL_TIM_OC_Start_IT+0x204>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d009      	beq.n	8006672 <HAL_TIM_OC_Start_IT+0x1c2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a18      	ldr	r2, [pc, #96]	; (80066c4 <HAL_TIM_OC_Start_IT+0x214>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d004      	beq.n	8006672 <HAL_TIM_OC_Start_IT+0x1c2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a16      	ldr	r2, [pc, #88]	; (80066c8 <HAL_TIM_OC_Start_IT+0x218>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d111      	bne.n	8006696 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b06      	cmp	r3, #6
 8006682:	d010      	beq.n	80066a6 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f042 0201 	orr.w	r2, r2, #1
 8006692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006694:	e007      	b.n	80066a6 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f042 0201 	orr.w	r2, r2, #1
 80066a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	40010000 	.word	0x40010000
 80066b4:	40010400 	.word	0x40010400
 80066b8:	40000400 	.word	0x40000400
 80066bc:	40000800 	.word	0x40000800
 80066c0:	40000c00 	.word	0x40000c00
 80066c4:	40014000 	.word	0x40014000
 80066c8:	40001800 	.word	0x40001800

080066cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e041      	b.n	8006762 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d106      	bne.n	80066f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f839 	bl	800676a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3304      	adds	r3, #4
 8006708:	4619      	mov	r1, r3
 800670a:	4610      	mov	r0, r2
 800670c:	f000 fb9a 	bl	8006e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006772:	bf00      	nop
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e097      	b.n	80068c2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fa fefe 	bl	80015a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6812      	ldr	r2, [r2, #0]
 80067be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067c2:	f023 0307 	bic.w	r3, r3, #7
 80067c6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3304      	adds	r3, #4
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f000 fb36 	bl	8006e44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006800:	f023 0303 	bic.w	r3, r3, #3
 8006804:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	021b      	lsls	r3, r3, #8
 8006810:	4313      	orrs	r3, r2
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800681e:	f023 030c 	bic.w	r3, r3, #12
 8006822:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800682a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800682e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	021b      	lsls	r3, r3, #8
 800683a:	4313      	orrs	r3, r2
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4313      	orrs	r3, r2
 8006840:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	011a      	lsls	r2, r3, #4
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	031b      	lsls	r3, r3, #12
 800684e:	4313      	orrs	r3, r2
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800685c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006864:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	4313      	orrs	r3, r2
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4313      	orrs	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d122      	bne.n	8006926 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d11b      	bne.n	8006926 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f06f 0202 	mvn.w	r2, #2
 80068f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	f003 0303 	and.w	r3, r3, #3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fa7b 	bl	8006e08 <HAL_TIM_IC_CaptureCallback>
 8006912:	e005      	b.n	8006920 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fa6d 	bl	8006df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fa7e 	bl	8006e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b04      	cmp	r3, #4
 8006932:	d122      	bne.n	800697a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f003 0304 	and.w	r3, r3, #4
 800693e:	2b04      	cmp	r3, #4
 8006940:	d11b      	bne.n	800697a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f06f 0204 	mvn.w	r2, #4
 800694a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fa51 	bl	8006e08 <HAL_TIM_IC_CaptureCallback>
 8006966:	e005      	b.n	8006974 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fa43 	bl	8006df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa54 	bl	8006e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	f003 0308 	and.w	r3, r3, #8
 8006984:	2b08      	cmp	r3, #8
 8006986:	d122      	bne.n	80069ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b08      	cmp	r3, #8
 8006994:	d11b      	bne.n	80069ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f06f 0208 	mvn.w	r2, #8
 800699e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2204      	movs	r2, #4
 80069a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	f003 0303 	and.w	r3, r3, #3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fa27 	bl	8006e08 <HAL_TIM_IC_CaptureCallback>
 80069ba:	e005      	b.n	80069c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fa19 	bl	8006df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fa2a 	bl	8006e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f003 0310 	and.w	r3, r3, #16
 80069d8:	2b10      	cmp	r3, #16
 80069da:	d122      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f003 0310 	and.w	r3, r3, #16
 80069e6:	2b10      	cmp	r3, #16
 80069e8:	d11b      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f06f 0210 	mvn.w	r2, #16
 80069f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2208      	movs	r2, #8
 80069f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f9fd 	bl	8006e08 <HAL_TIM_IC_CaptureCallback>
 8006a0e:	e005      	b.n	8006a1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f9ef 	bl	8006df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa00 	bl	8006e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d10e      	bne.n	8006a4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d107      	bne.n	8006a4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f06f 0201 	mvn.w	r2, #1
 8006a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f9c9 	bl	8006de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a58:	2b80      	cmp	r3, #128	; 0x80
 8006a5a:	d10e      	bne.n	8006a7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a66:	2b80      	cmp	r3, #128	; 0x80
 8006a68:	d107      	bne.n	8006a7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fd7b 	bl	8007570 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a84:	2b40      	cmp	r3, #64	; 0x40
 8006a86:	d10e      	bne.n	8006aa6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a92:	2b40      	cmp	r3, #64	; 0x40
 8006a94:	d107      	bne.n	8006aa6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f9c5 	bl	8006e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	f003 0320 	and.w	r3, r3, #32
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d10e      	bne.n	8006ad2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	d107      	bne.n	8006ad2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f06f 0220 	mvn.w	r2, #32
 8006aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fd45 	bl	800755c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ad2:	bf00      	nop
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d101      	bne.n	8006af6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006af2:	2302      	movs	r3, #2
 8006af4:	e0ac      	b.n	8006c50 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b0c      	cmp	r3, #12
 8006b02:	f200 809f 	bhi.w	8006c44 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006b06:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b41 	.word	0x08006b41
 8006b10:	08006c45 	.word	0x08006c45
 8006b14:	08006c45 	.word	0x08006c45
 8006b18:	08006c45 	.word	0x08006c45
 8006b1c:	08006b81 	.word	0x08006b81
 8006b20:	08006c45 	.word	0x08006c45
 8006b24:	08006c45 	.word	0x08006c45
 8006b28:	08006c45 	.word	0x08006c45
 8006b2c:	08006bc3 	.word	0x08006bc3
 8006b30:	08006c45 	.word	0x08006c45
 8006b34:	08006c45 	.word	0x08006c45
 8006b38:	08006c45 	.word	0x08006c45
 8006b3c:	08006c03 	.word	0x08006c03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fa1c 	bl	8006f84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0208 	orr.w	r2, r2, #8
 8006b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0204 	bic.w	r2, r2, #4
 8006b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6999      	ldr	r1, [r3, #24]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	691a      	ldr	r2, [r3, #16]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	619a      	str	r2, [r3, #24]
      break;
 8006b7e:	e062      	b.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fa6c 	bl	8007064 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699a      	ldr	r2, [r3, #24]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699a      	ldr	r2, [r3, #24]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6999      	ldr	r1, [r3, #24]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	021a      	lsls	r2, r3, #8
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	619a      	str	r2, [r3, #24]
      break;
 8006bc0:	e041      	b.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fac1 	bl	8007150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69da      	ldr	r2, [r3, #28]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0208 	orr.w	r2, r2, #8
 8006bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0204 	bic.w	r2, r2, #4
 8006bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69d9      	ldr	r1, [r3, #28]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	691a      	ldr	r2, [r3, #16]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	61da      	str	r2, [r3, #28]
      break;
 8006c00:	e021      	b.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68b9      	ldr	r1, [r7, #8]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 fb15 	bl	8007238 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	69da      	ldr	r2, [r3, #28]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69da      	ldr	r2, [r3, #28]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69d9      	ldr	r1, [r3, #28]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	021a      	lsls	r2, r3, #8
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	61da      	str	r2, [r3, #28]
      break;
 8006c42:	e000      	b.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006c44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_TIM_ConfigClockSource+0x18>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e0b3      	b.n	8006dd8 <HAL_TIM_ConfigClockSource+0x180>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ca8:	d03e      	beq.n	8006d28 <HAL_TIM_ConfigClockSource+0xd0>
 8006caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cae:	f200 8087 	bhi.w	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
 8006cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb6:	f000 8085 	beq.w	8006dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cbe:	d87f      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
 8006cc0:	2b70      	cmp	r3, #112	; 0x70
 8006cc2:	d01a      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0xa2>
 8006cc4:	2b70      	cmp	r3, #112	; 0x70
 8006cc6:	d87b      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
 8006cc8:	2b60      	cmp	r3, #96	; 0x60
 8006cca:	d050      	beq.n	8006d6e <HAL_TIM_ConfigClockSource+0x116>
 8006ccc:	2b60      	cmp	r3, #96	; 0x60
 8006cce:	d877      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
 8006cd0:	2b50      	cmp	r3, #80	; 0x50
 8006cd2:	d03c      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0xf6>
 8006cd4:	2b50      	cmp	r3, #80	; 0x50
 8006cd6:	d873      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
 8006cd8:	2b40      	cmp	r3, #64	; 0x40
 8006cda:	d058      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x136>
 8006cdc:	2b40      	cmp	r3, #64	; 0x40
 8006cde:	d86f      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ce0:	2b30      	cmp	r3, #48	; 0x30
 8006ce2:	d064      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x156>
 8006ce4:	2b30      	cmp	r3, #48	; 0x30
 8006ce6:	d86b      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
 8006ce8:	2b20      	cmp	r3, #32
 8006cea:	d060      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x156>
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	d867      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d05c      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x156>
 8006cf4:	2b10      	cmp	r3, #16
 8006cf6:	d05a      	beq.n	8006dae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006cf8:	e062      	b.n	8006dc0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	6899      	ldr	r1, [r3, #8]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f000 fb65 	bl	80073d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	609a      	str	r2, [r3, #8]
      break;
 8006d26:	e04e      	b.n	8006dc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	6899      	ldr	r1, [r3, #8]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f000 fb4e 	bl	80073d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d4a:	609a      	str	r2, [r3, #8]
      break;
 8006d4c:	e03b      	b.n	8006dc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	6859      	ldr	r1, [r3, #4]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	f000 fac2 	bl	80072e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2150      	movs	r1, #80	; 0x50
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 fb1b 	bl	80073a2 <TIM_ITRx_SetConfig>
      break;
 8006d6c:	e02b      	b.n	8006dc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	6859      	ldr	r1, [r3, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f000 fae1 	bl	8007342 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2160      	movs	r1, #96	; 0x60
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fb0b 	bl	80073a2 <TIM_ITRx_SetConfig>
      break;
 8006d8c:	e01b      	b.n	8006dc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	6859      	ldr	r1, [r3, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f000 faa2 	bl	80072e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2140      	movs	r1, #64	; 0x40
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fafb 	bl	80073a2 <TIM_ITRx_SetConfig>
      break;
 8006dac:	e00b      	b.n	8006dc6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4619      	mov	r1, r3
 8006db8:	4610      	mov	r0, r2
 8006dba:	f000 faf2 	bl	80073a2 <TIM_ITRx_SetConfig>
        break;
 8006dbe:	e002      	b.n	8006dc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006dc0:	bf00      	nop
 8006dc2:	e000      	b.n	8006dc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006dc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a40      	ldr	r2, [pc, #256]	; (8006f58 <TIM_Base_SetConfig+0x114>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d013      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e62:	d00f      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a3d      	ldr	r2, [pc, #244]	; (8006f5c <TIM_Base_SetConfig+0x118>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00b      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a3c      	ldr	r2, [pc, #240]	; (8006f60 <TIM_Base_SetConfig+0x11c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d007      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a3b      	ldr	r2, [pc, #236]	; (8006f64 <TIM_Base_SetConfig+0x120>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <TIM_Base_SetConfig+0x40>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a3a      	ldr	r2, [pc, #232]	; (8006f68 <TIM_Base_SetConfig+0x124>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d108      	bne.n	8006e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a2f      	ldr	r2, [pc, #188]	; (8006f58 <TIM_Base_SetConfig+0x114>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d02b      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea4:	d027      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a2c      	ldr	r2, [pc, #176]	; (8006f5c <TIM_Base_SetConfig+0x118>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d023      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a2b      	ldr	r2, [pc, #172]	; (8006f60 <TIM_Base_SetConfig+0x11c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d01f      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a2a      	ldr	r2, [pc, #168]	; (8006f64 <TIM_Base_SetConfig+0x120>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d01b      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a29      	ldr	r2, [pc, #164]	; (8006f68 <TIM_Base_SetConfig+0x124>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d017      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a28      	ldr	r2, [pc, #160]	; (8006f6c <TIM_Base_SetConfig+0x128>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d013      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a27      	ldr	r2, [pc, #156]	; (8006f70 <TIM_Base_SetConfig+0x12c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00f      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a26      	ldr	r2, [pc, #152]	; (8006f74 <TIM_Base_SetConfig+0x130>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d00b      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a25      	ldr	r2, [pc, #148]	; (8006f78 <TIM_Base_SetConfig+0x134>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d007      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a24      	ldr	r2, [pc, #144]	; (8006f7c <TIM_Base_SetConfig+0x138>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d003      	beq.n	8006ef6 <TIM_Base_SetConfig+0xb2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a23      	ldr	r2, [pc, #140]	; (8006f80 <TIM_Base_SetConfig+0x13c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d108      	bne.n	8006f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a0a      	ldr	r2, [pc, #40]	; (8006f58 <TIM_Base_SetConfig+0x114>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_Base_SetConfig+0xf8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a0c      	ldr	r2, [pc, #48]	; (8006f68 <TIM_Base_SetConfig+0x124>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d103      	bne.n	8006f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	691a      	ldr	r2, [r3, #16]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	615a      	str	r2, [r3, #20]
}
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40010000 	.word	0x40010000
 8006f5c:	40000400 	.word	0x40000400
 8006f60:	40000800 	.word	0x40000800
 8006f64:	40000c00 	.word	0x40000c00
 8006f68:	40010400 	.word	0x40010400
 8006f6c:	40014000 	.word	0x40014000
 8006f70:	40014400 	.word	0x40014400
 8006f74:	40014800 	.word	0x40014800
 8006f78:	40001800 	.word	0x40001800
 8006f7c:	40001c00 	.word	0x40001c00
 8006f80:	40002000 	.word	0x40002000

08006f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f023 0201 	bic.w	r2, r3, #1
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0303 	bic.w	r3, r3, #3
 8006fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f023 0302 	bic.w	r3, r3, #2
 8006fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a20      	ldr	r2, [pc, #128]	; (800705c <TIM_OC1_SetConfig+0xd8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d003      	beq.n	8006fe8 <TIM_OC1_SetConfig+0x64>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a1f      	ldr	r2, [pc, #124]	; (8007060 <TIM_OC1_SetConfig+0xdc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d10c      	bne.n	8007002 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f023 0308 	bic.w	r3, r3, #8
 8006fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f023 0304 	bic.w	r3, r3, #4
 8007000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a15      	ldr	r2, [pc, #84]	; (800705c <TIM_OC1_SetConfig+0xd8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d003      	beq.n	8007012 <TIM_OC1_SetConfig+0x8e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a14      	ldr	r2, [pc, #80]	; (8007060 <TIM_OC1_SetConfig+0xdc>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d111      	bne.n	8007036 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	4313      	orrs	r3, r2
 8007034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	621a      	str	r2, [r3, #32]
}
 8007050:	bf00      	nop
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	40010000 	.word	0x40010000
 8007060:	40010400 	.word	0x40010400

08007064 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f023 0210 	bic.w	r2, r3, #16
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800709a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	021b      	lsls	r3, r3, #8
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	f023 0320 	bic.w	r3, r3, #32
 80070ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	011b      	lsls	r3, r3, #4
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a22      	ldr	r2, [pc, #136]	; (8007148 <TIM_OC2_SetConfig+0xe4>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d003      	beq.n	80070cc <TIM_OC2_SetConfig+0x68>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a21      	ldr	r2, [pc, #132]	; (800714c <TIM_OC2_SetConfig+0xe8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d10d      	bne.n	80070e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	011b      	lsls	r3, r3, #4
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	4313      	orrs	r3, r2
 80070de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a17      	ldr	r2, [pc, #92]	; (8007148 <TIM_OC2_SetConfig+0xe4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d003      	beq.n	80070f8 <TIM_OC2_SetConfig+0x94>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a16      	ldr	r2, [pc, #88]	; (800714c <TIM_OC2_SetConfig+0xe8>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d113      	bne.n	8007120 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	4313      	orrs	r3, r2
 8007112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	621a      	str	r2, [r3, #32]
}
 800713a:	bf00      	nop
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40010000 	.word	0x40010000
 800714c:	40010400 	.word	0x40010400

08007150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 0303 	bic.w	r3, r3, #3
 8007186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	4313      	orrs	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	021b      	lsls	r3, r3, #8
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a21      	ldr	r2, [pc, #132]	; (8007230 <TIM_OC3_SetConfig+0xe0>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d003      	beq.n	80071b6 <TIM_OC3_SetConfig+0x66>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a20      	ldr	r2, [pc, #128]	; (8007234 <TIM_OC3_SetConfig+0xe4>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d10d      	bne.n	80071d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a16      	ldr	r2, [pc, #88]	; (8007230 <TIM_OC3_SetConfig+0xe0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d003      	beq.n	80071e2 <TIM_OC3_SetConfig+0x92>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a15      	ldr	r2, [pc, #84]	; (8007234 <TIM_OC3_SetConfig+0xe4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d113      	bne.n	800720a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	011b      	lsls	r3, r3, #4
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	4313      	orrs	r3, r2
 8007208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	621a      	str	r2, [r3, #32]
}
 8007224:	bf00      	nop
 8007226:	371c      	adds	r7, #28
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	40010000 	.word	0x40010000
 8007234:	40010400 	.word	0x40010400

08007238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800726e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	031b      	lsls	r3, r3, #12
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	4313      	orrs	r3, r2
 800728e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a12      	ldr	r2, [pc, #72]	; (80072dc <TIM_OC4_SetConfig+0xa4>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d003      	beq.n	80072a0 <TIM_OC4_SetConfig+0x68>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a11      	ldr	r2, [pc, #68]	; (80072e0 <TIM_OC4_SetConfig+0xa8>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d109      	bne.n	80072b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	019b      	lsls	r3, r3, #6
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	621a      	str	r2, [r3, #32]
}
 80072ce:	bf00      	nop
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40010000 	.word	0x40010000
 80072e0:	40010400 	.word	0x40010400

080072e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	f023 0201 	bic.w	r2, r3, #1
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800730e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	011b      	lsls	r3, r3, #4
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	4313      	orrs	r3, r2
 8007318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f023 030a 	bic.w	r3, r3, #10
 8007320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	4313      	orrs	r3, r2
 8007328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	621a      	str	r2, [r3, #32]
}
 8007336:	bf00      	nop
 8007338:	371c      	adds	r7, #28
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007342:	b480      	push	{r7}
 8007344:	b087      	sub	sp, #28
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	f023 0210 	bic.w	r2, r3, #16
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800736c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	031b      	lsls	r3, r3, #12
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800737e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	011b      	lsls	r3, r3, #4
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	4313      	orrs	r3, r2
 8007388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	621a      	str	r2, [r3, #32]
}
 8007396:	bf00      	nop
 8007398:	371c      	adds	r7, #28
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4313      	orrs	r3, r2
 80073c0:	f043 0307 	orr.w	r3, r3, #7
 80073c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	609a      	str	r2, [r3, #8]
}
 80073cc:	bf00      	nop
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	021a      	lsls	r2, r3, #8
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	431a      	orrs	r2, r3
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	4313      	orrs	r3, r2
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	4313      	orrs	r3, r2
 8007404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	609a      	str	r2, [r3, #8]
}
 800740c:	bf00      	nop
 800740e:	371c      	adds	r7, #28
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f003 031f 	and.w	r3, r3, #31
 800742a:	2201      	movs	r2, #1
 800742c:	fa02 f303 	lsl.w	r3, r2, r3
 8007430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a1a      	ldr	r2, [r3, #32]
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	43db      	mvns	r3, r3
 800743a:	401a      	ands	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6a1a      	ldr	r2, [r3, #32]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f003 031f 	and.w	r3, r3, #31
 800744a:	6879      	ldr	r1, [r7, #4]
 800744c:	fa01 f303 	lsl.w	r3, r1, r3
 8007450:	431a      	orrs	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	621a      	str	r2, [r3, #32]
}
 8007456:	bf00      	nop
 8007458:	371c      	adds	r7, #28
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
	...

08007464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007474:	2b01      	cmp	r3, #1
 8007476:	d101      	bne.n	800747c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007478:	2302      	movs	r3, #2
 800747a:	e05a      	b.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a21      	ldr	r2, [pc, #132]	; (8007540 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d022      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c8:	d01d      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a1d      	ldr	r2, [pc, #116]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d018      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1b      	ldr	r2, [pc, #108]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d013      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a1a      	ldr	r2, [pc, #104]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d00e      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a18      	ldr	r2, [pc, #96]	; (8007550 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d009      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a17      	ldr	r2, [pc, #92]	; (8007554 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d004      	beq.n	8007506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a15      	ldr	r2, [pc, #84]	; (8007558 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d10c      	bne.n	8007520 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800750c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	4313      	orrs	r3, r2
 8007516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	40010000 	.word	0x40010000
 8007544:	40000400 	.word	0x40000400
 8007548:	40000800 	.word	0x40000800
 800754c:	40000c00 	.word	0x40000c00
 8007550:	40010400 	.word	0x40010400
 8007554:	40014000 	.word	0x40014000
 8007558:	40001800 	.word	0x40001800

0800755c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007584:	b084      	sub	sp, #16
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	f107 001c 	add.w	r0, r7, #28
 8007592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	2b01      	cmp	r3, #1
 800759a:	d122      	bne.n	80075e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80075b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80075c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d105      	bne.n	80075d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f94a 	bl	8007870 <USB_CoreReset>
 80075dc:	4603      	mov	r3, r0
 80075de:	73fb      	strb	r3, [r7, #15]
 80075e0:	e01a      	b.n	8007618 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f93e 	bl	8007870 <USB_CoreReset>
 80075f4:	4603      	mov	r3, r0
 80075f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80075f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007602:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	639a      	str	r2, [r3, #56]	; 0x38
 800760a:	e005      	b.n	8007618 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007610:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761a:	2b01      	cmp	r3, #1
 800761c:	d10b      	bne.n	8007636 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f043 0206 	orr.w	r2, r3, #6
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f043 0220 	orr.w	r2, r3, #32
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007642:	b004      	add	sp, #16
 8007644:	4770      	bx	lr

08007646 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f043 0201 	orr.w	r2, r3, #1
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f023 0201 	bic.w	r2, r3, #1
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b082      	sub	sp, #8
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	460b      	mov	r3, r1
 8007694:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076a2:	78fb      	ldrb	r3, [r7, #3]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d106      	bne.n	80076b6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	60da      	str	r2, [r3, #12]
 80076b4:	e00b      	b.n	80076ce <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80076b6:	78fb      	ldrb	r3, [r7, #3]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d106      	bne.n	80076ca <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	60da      	str	r2, [r3, #12]
 80076c8:	e001      	b.n	80076ce <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e003      	b.n	80076d6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80076ce:	2032      	movs	r0, #50	; 0x32
 80076d0:	f7fa ff0a 	bl	80024e8 <HAL_Delay>

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	019b      	lsls	r3, r3, #6
 80076f2:	f043 0220 	orr.w	r2, r3, #32
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3301      	adds	r3, #1
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4a09      	ldr	r2, [pc, #36]	; (8007728 <USB_FlushTxFifo+0x48>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d901      	bls.n	800770c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e006      	b.n	800771a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f003 0320 	and.w	r3, r3, #32
 8007714:	2b20      	cmp	r3, #32
 8007716:	d0f0      	beq.n	80076fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	00030d40 	.word	0x00030d40

0800772c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007734:	2300      	movs	r3, #0
 8007736:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2210      	movs	r2, #16
 800773c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3301      	adds	r3, #1
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4a09      	ldr	r2, [pc, #36]	; (800776c <USB_FlushRxFifo+0x40>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d901      	bls.n	8007750 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e006      	b.n	800775e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	f003 0310 	and.w	r3, r3, #16
 8007758:	2b10      	cmp	r3, #16
 800775a:	d0f0      	beq.n	800773e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	00030d40 	.word	0x00030d40

08007770 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007770:	b480      	push	{r7}
 8007772:	b089      	sub	sp, #36	; 0x24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	4611      	mov	r1, r2
 800777c:	461a      	mov	r2, r3
 800777e:	460b      	mov	r3, r1
 8007780:	71fb      	strb	r3, [r7, #7]
 8007782:	4613      	mov	r3, r2
 8007784:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800778e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007792:	2b00      	cmp	r3, #0
 8007794:	d11a      	bne.n	80077cc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007796:	88bb      	ldrh	r3, [r7, #4]
 8007798:	3303      	adds	r3, #3
 800779a:	089b      	lsrs	r3, r3, #2
 800779c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800779e:	2300      	movs	r3, #0
 80077a0:	61bb      	str	r3, [r7, #24]
 80077a2:	e00f      	b.n	80077c4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80077a4:	79fb      	ldrb	r3, [r7, #7]
 80077a6:	031a      	lsls	r2, r3, #12
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b0:	461a      	mov	r2, r3
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	3304      	adds	r3, #4
 80077bc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	3301      	adds	r3, #1
 80077c2:	61bb      	str	r3, [r7, #24]
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d3eb      	bcc.n	80077a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3724      	adds	r7, #36	; 0x24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80077da:	b480      	push	{r7}
 80077dc:	b089      	sub	sp, #36	; 0x24
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	4613      	mov	r3, r2
 80077e6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80077f0:	88fb      	ldrh	r3, [r7, #6]
 80077f2:	3303      	adds	r3, #3
 80077f4:	089b      	lsrs	r3, r3, #2
 80077f6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80077f8:	2300      	movs	r3, #0
 80077fa:	61bb      	str	r3, [r7, #24]
 80077fc:	e00b      	b.n	8007816 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	601a      	str	r2, [r3, #0]
    pDest++;
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	3304      	adds	r3, #4
 800780e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	3301      	adds	r3, #1
 8007814:	61bb      	str	r3, [r7, #24]
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	429a      	cmp	r2, r3
 800781c:	d3ef      	bcc.n	80077fe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800781e:	69fb      	ldr	r3, [r7, #28]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3724      	adds	r7, #36	; 0x24
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	4013      	ands	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007844:	68fb      	ldr	r3, [r7, #12]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	f003 0301 	and.w	r3, r3, #1
}
 8007862:	4618      	mov	r0, r3
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
	...

08007870 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3301      	adds	r3, #1
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4a13      	ldr	r2, [pc, #76]	; (80078d4 <USB_CoreReset+0x64>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d901      	bls.n	800788e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e01b      	b.n	80078c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	daf2      	bge.n	800787c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	f043 0201 	orr.w	r2, r3, #1
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3301      	adds	r3, #1
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4a09      	ldr	r2, [pc, #36]	; (80078d4 <USB_CoreReset+0x64>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d901      	bls.n	80078b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e006      	b.n	80078c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d0f0      	beq.n	80078a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	00030d40 	.word	0x00030d40

080078d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078d8:	b084      	sub	sp, #16
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	f107 001c 	add.w	r0, r7, #28
 80078e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078f4:	461a      	mov	r2, r3
 80078f6:	2300      	movs	r3, #0
 80078f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007916:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007926:	2b00      	cmp	r3, #0
 8007928:	d018      	beq.n	800795c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	2b01      	cmp	r3, #1
 800792e:	d10a      	bne.n	8007946 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800793e:	f043 0304 	orr.w	r3, r3, #4
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	e014      	b.n	8007970 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007954:	f023 0304 	bic.w	r3, r3, #4
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	e009      	b.n	8007970 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800796a:	f023 0304 	bic.w	r3, r3, #4
 800796e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007970:	2110      	movs	r1, #16
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff feb4 	bl	80076e0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7ff fed7 	bl	800772c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800797e:	2300      	movs	r3, #0
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	e015      	b.n	80079b0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	4413      	add	r3, r2
 800798c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007990:	461a      	mov	r2, r3
 8007992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007996:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a4:	461a      	mov	r2, r3
 80079a6:	2300      	movs	r3, #0
 80079a8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3301      	adds	r3, #1
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d3e5      	bcc.n	8007984 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80079b8:	2101      	movs	r1, #1
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f8ac 	bl	8007b18 <USB_DriveVbus>

  HAL_Delay(200U);
 80079c0:	20c8      	movs	r0, #200	; 0xc8
 80079c2:	f7fa fd91 	bl	80024e8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079d2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00b      	beq.n	80079f8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079e6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a14      	ldr	r2, [pc, #80]	; (8007a3c <USB_HostInit+0x164>)
 80079ec:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a13      	ldr	r2, [pc, #76]	; (8007a40 <USB_HostInit+0x168>)
 80079f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80079f6:	e009      	b.n	8007a0c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2280      	movs	r2, #128	; 0x80
 80079fc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a10      	ldr	r2, [pc, #64]	; (8007a44 <USB_HostInit+0x16c>)
 8007a02:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a10      	ldr	r2, [pc, #64]	; (8007a48 <USB_HostInit+0x170>)
 8007a08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d105      	bne.n	8007a1e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	f043 0210 	orr.w	r2, r3, #16
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	699a      	ldr	r2, [r3, #24]
 8007a22:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <USB_HostInit+0x174>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a36:	b004      	add	sp, #16
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	01000200 	.word	0x01000200
 8007a40:	00e00300 	.word	0x00e00300
 8007a44:	00600080 	.word	0x00600080
 8007a48:	004000e0 	.word	0x004000e0
 8007a4c:	a3200008 	.word	0xa3200008

08007a50 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a6e:	f023 0303 	bic.w	r3, r3, #3
 8007a72:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	78fb      	ldrb	r3, [r7, #3]
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	68f9      	ldr	r1, [r7, #12]
 8007a84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007a8c:	78fb      	ldrb	r3, [r7, #3]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d107      	bne.n	8007aa2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a98:	461a      	mov	r2, r3
 8007a9a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007a9e:	6053      	str	r3, [r2, #4]
 8007aa0:	e009      	b.n	8007ab6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007aa2:	78fb      	ldrb	r3, [r7, #3]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d106      	bne.n	8007ab6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f241 7370 	movw	r3, #6000	; 0x1770
 8007ab4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007ae4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007af2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007af4:	2064      	movs	r0, #100	; 0x64
 8007af6:	f7fa fcf7 	bl	80024e8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b06:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007b08:	200a      	movs	r0, #10
 8007b0a:	f7fa fced 	bl	80024e8 <HAL_Delay>

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007b3c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d109      	bne.n	8007b5c <USB_DriveVbus+0x44>
 8007b48:	78fb      	ldrb	r3, [r7, #3]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d106      	bne.n	8007b5c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b5a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b66:	d109      	bne.n	8007b7c <USB_DriveVbus+0x64>
 8007b68:	78fb      	ldrb	r3, [r7, #3]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d106      	bne.n	8007b7c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b7a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b085      	sub	sp, #20
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	0c5b      	lsrs	r3, r3, #17
 8007ba8:	f003 0303 	and.w	r3, r3, #3
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	b29b      	uxth	r3, r3
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
	...

08007bdc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b088      	sub	sp, #32
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	4608      	mov	r0, r1
 8007be6:	4611      	mov	r1, r2
 8007be8:	461a      	mov	r2, r3
 8007bea:	4603      	mov	r3, r0
 8007bec:	70fb      	strb	r3, [r7, #3]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	70bb      	strb	r3, [r7, #2]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007bfe:	78fb      	ldrb	r3, [r7, #3]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c10:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007c12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d87e      	bhi.n	8007d18 <USB_HC_Init+0x13c>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <USB_HC_Init+0x44>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c31 	.word	0x08007c31
 8007c24:	08007cdb 	.word	0x08007cdb
 8007c28:	08007c31 	.word	0x08007c31
 8007c2c:	08007c9d 	.word	0x08007c9d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007c42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007c44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	da10      	bge.n	8007c6e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007c4c:	78fb      	ldrb	r3, [r7, #3]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	78fa      	ldrb	r2, [r7, #3]
 8007c5c:	0151      	lsls	r1, r2, #5
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	440a      	add	r2, r1
 8007c62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c6a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007c6c:	e057      	b.n	8007d1e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d051      	beq.n	8007d1e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	78fa      	ldrb	r2, [r7, #3]
 8007c8a:	0151      	lsls	r1, r2, #5
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	440a      	add	r2, r1
 8007c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007c98:	60d3      	str	r3, [r2, #12]
      break;
 8007c9a:	e040      	b.n	8007d1e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c9c:	78fb      	ldrb	r3, [r7, #3]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca8:	461a      	mov	r2, r3
 8007caa:	f240 639d 	movw	r3, #1693	; 0x69d
 8007cae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007cb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	da34      	bge.n	8007d22 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007cb8:	78fb      	ldrb	r3, [r7, #3]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	78fa      	ldrb	r2, [r7, #3]
 8007cc8:	0151      	lsls	r1, r2, #5
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	440a      	add	r2, r1
 8007cce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cd6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007cd8:	e023      	b.n	8007d22 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007cda:	78fb      	ldrb	r3, [r7, #3]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f240 2325 	movw	r3, #549	; 0x225
 8007cec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007cee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	da17      	bge.n	8007d26 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007cf6:	78fb      	ldrb	r3, [r7, #3]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	0151      	lsls	r1, r2, #5
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	440a      	add	r2, r1
 8007d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d10:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007d14:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007d16:	e006      	b.n	8007d26 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	77fb      	strb	r3, [r7, #31]
      break;
 8007d1c:	e004      	b.n	8007d28 <USB_HC_Init+0x14c>
      break;
 8007d1e:	bf00      	nop
 8007d20:	e002      	b.n	8007d28 <USB_HC_Init+0x14c>
      break;
 8007d22:	bf00      	nop
 8007d24:	e000      	b.n	8007d28 <USB_HC_Init+0x14c>
      break;
 8007d26:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d2e:	699a      	ldr	r2, [r3, #24]
 8007d30:	78fb      	ldrb	r3, [r7, #3]
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	2101      	movs	r1, #1
 8007d38:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3c:	6939      	ldr	r1, [r7, #16]
 8007d3e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007d42:	4313      	orrs	r3, r2
 8007d44:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007d52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	da03      	bge.n	8007d62 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d5e:	61bb      	str	r3, [r7, #24]
 8007d60:	e001      	b.n	8007d66 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7ff ff0f 	bl	8007b8a <USB_GetHostSpeed>
 8007d6c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007d6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d106      	bne.n	8007d84 <USB_HC_Init+0x1a8>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d003      	beq.n	8007d84 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d80:	617b      	str	r3, [r7, #20]
 8007d82:	e001      	b.n	8007d88 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d88:	787b      	ldrb	r3, [r7, #1]
 8007d8a:	059b      	lsls	r3, r3, #22
 8007d8c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d90:	78bb      	ldrb	r3, [r7, #2]
 8007d92:	02db      	lsls	r3, r3, #11
 8007d94:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d98:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d9e:	049b      	lsls	r3, r3, #18
 8007da0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007da4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007da6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007da8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007dac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007db2:	78fb      	ldrb	r3, [r7, #3]
 8007db4:	0159      	lsls	r1, r3, #5
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	440b      	add	r3, r1
 8007dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dbe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007dc4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007dc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d10f      	bne.n	8007dee <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	78fa      	ldrb	r2, [r7, #3]
 8007dde:	0151      	lsls	r1, r2, #5
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	440a      	add	r2, r1
 8007de4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007de8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dec:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007dee:	7ffb      	ldrb	r3, [r7, #31]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3720      	adds	r7, #32
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08c      	sub	sp, #48	; 0x30
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	4613      	mov	r3, r2
 8007e04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	785b      	ldrb	r3, [r3, #1]
 8007e0e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e14:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d02d      	beq.n	8007e7e <USB_HC_StartXfer+0x86>
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	791b      	ldrb	r3, [r3, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d129      	bne.n	8007e7e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007e2a:	79fb      	ldrb	r3, [r7, #7]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d117      	bne.n	8007e60 <USB_HC_StartXfer+0x68>
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	79db      	ldrb	r3, [r3, #7]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d003      	beq.n	8007e40 <USB_HC_StartXfer+0x48>
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	79db      	ldrb	r3, [r3, #7]
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d10f      	bne.n	8007e60 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	69fa      	ldr	r2, [r7, #28]
 8007e50:	0151      	lsls	r1, r2, #5
 8007e52:	6a3a      	ldr	r2, [r7, #32]
 8007e54:	440a      	add	r2, r1
 8007e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e5e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007e60:	79fb      	ldrb	r3, [r7, #7]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10b      	bne.n	8007e7e <USB_HC_StartXfer+0x86>
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	795b      	ldrb	r3, [r3, #5]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d107      	bne.n	8007e7e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	785b      	ldrb	r3, [r3, #1]
 8007e72:	4619      	mov	r1, r3
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f000 fa2f 	bl	80082d8 <USB_DoPing>
      return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e0f8      	b.n	8008070 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d018      	beq.n	8007eb8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	8912      	ldrh	r2, [r2, #8]
 8007e8e:	4413      	add	r3, r2
 8007e90:	3b01      	subs	r3, #1
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	8912      	ldrh	r2, [r2, #8]
 8007e96:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e9a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007e9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007e9e:	8b7b      	ldrh	r3, [r7, #26]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d90b      	bls.n	8007ebc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007ea4:	8b7b      	ldrh	r3, [r7, #26]
 8007ea6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ea8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	8912      	ldrh	r2, [r2, #8]
 8007eae:	fb02 f203 	mul.w	r2, r2, r3
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	611a      	str	r2, [r3, #16]
 8007eb6:	e001      	b.n	8007ebc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	78db      	ldrb	r3, [r3, #3]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d007      	beq.n	8007ed4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ec4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	8912      	ldrh	r2, [r2, #8]
 8007eca:	fb02 f203 	mul.w	r2, r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	611a      	str	r2, [r3, #16]
 8007ed2:	e003      	b.n	8007edc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	695a      	ldr	r2, [r3, #20]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ee4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ee6:	04d9      	lsls	r1, r3, #19
 8007ee8:	4b63      	ldr	r3, [pc, #396]	; (8008078 <USB_HC_StartXfer+0x280>)
 8007eea:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007eec:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	7a9b      	ldrb	r3, [r3, #10]
 8007ef2:	075b      	lsls	r3, r3, #29
 8007ef4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ef8:	69f9      	ldr	r1, [r7, #28]
 8007efa:	0148      	lsls	r0, r1, #5
 8007efc:	6a39      	ldr	r1, [r7, #32]
 8007efe:	4401      	add	r1, r0
 8007f00:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f04:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f06:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d009      	beq.n	8007f22 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	68d9      	ldr	r1, [r3, #12]
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f1e:	460a      	mov	r2, r1
 8007f20:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007f22:	6a3b      	ldr	r3, [r7, #32]
 8007f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	bf0c      	ite	eq
 8007f32:	2301      	moveq	r3, #1
 8007f34:	2300      	movne	r3, #0
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	69fa      	ldr	r2, [r7, #28]
 8007f4a:	0151      	lsls	r1, r2, #5
 8007f4c:	6a3a      	ldr	r2, [r7, #32]
 8007f4e:	440a      	add	r2, r1
 8007f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f58:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	7e7b      	ldrb	r3, [r7, #25]
 8007f6a:	075b      	lsls	r3, r3, #29
 8007f6c:	69f9      	ldr	r1, [r7, #28]
 8007f6e:	0148      	lsls	r0, r1, #5
 8007f70:	6a39      	ldr	r1, [r7, #32]
 8007f72:	4401      	add	r1, r0
 8007f74:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f92:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	78db      	ldrb	r3, [r3, #3]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d004      	beq.n	8007fa6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fa2:	613b      	str	r3, [r7, #16]
 8007fa4:	e003      	b.n	8007fae <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fac:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fb4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007fc8:	79fb      	ldrb	r3, [r7, #7]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	e04e      	b.n	8008070 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	78db      	ldrb	r3, [r3, #3]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d149      	bne.n	800806e <USB_HC_StartXfer+0x276>
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d045      	beq.n	800806e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	79db      	ldrb	r3, [r3, #7]
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d830      	bhi.n	800804c <USB_HC_StartXfer+0x254>
 8007fea:	a201      	add	r2, pc, #4	; (adr r2, 8007ff0 <USB_HC_StartXfer+0x1f8>)
 8007fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff0:	08008001 	.word	0x08008001
 8007ff4:	08008025 	.word	0x08008025
 8007ff8:	08008001 	.word	0x08008001
 8007ffc:	08008025 	.word	0x08008025
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	3303      	adds	r3, #3
 8008006:	089b      	lsrs	r3, r3, #2
 8008008:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800800a:	8afa      	ldrh	r2, [r7, #22]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008010:	b29b      	uxth	r3, r3
 8008012:	429a      	cmp	r2, r3
 8008014:	d91c      	bls.n	8008050 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	f043 0220 	orr.w	r2, r3, #32
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	619a      	str	r2, [r3, #24]
        }
        break;
 8008022:	e015      	b.n	8008050 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	3303      	adds	r3, #3
 800802a:	089b      	lsrs	r3, r3, #2
 800802c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800802e:	8afa      	ldrh	r2, [r7, #22]
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	b29b      	uxth	r3, r3
 800803a:	429a      	cmp	r2, r3
 800803c:	d90a      	bls.n	8008054 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	619a      	str	r2, [r3, #24]
        }
        break;
 800804a:	e003      	b.n	8008054 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800804c:	bf00      	nop
 800804e:	e002      	b.n	8008056 <USB_HC_StartXfer+0x25e>
        break;
 8008050:	bf00      	nop
 8008052:	e000      	b.n	8008056 <USB_HC_StartXfer+0x25e>
        break;
 8008054:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	68d9      	ldr	r1, [r3, #12]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	785a      	ldrb	r2, [r3, #1]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	b29b      	uxth	r3, r3
 8008064:	2000      	movs	r0, #0
 8008066:	9000      	str	r0, [sp, #0]
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f7ff fb81 	bl	8007770 <USB_WritePacket>
  }

  return HAL_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3728      	adds	r7, #40	; 0x28
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	1ff80000 	.word	0x1ff80000

0800807c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	b29b      	uxth	r3, r3
}
 8008092:	4618      	mov	r0, r3
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800809e:	b480      	push	{r7}
 80080a0:	b089      	sub	sp, #36	; 0x24
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	460b      	mov	r3, r1
 80080a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80080ae:	78fb      	ldrb	r3, [r7, #3]
 80080b0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	0c9b      	lsrs	r3, r3, #18
 80080c6:	f003 0303 	and.w	r3, r3, #3
 80080ca:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	0fdb      	lsrs	r3, r3, #31
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b20      	cmp	r3, #32
 80080ec:	d104      	bne.n	80080f8 <USB_HC_Halt+0x5a>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d101      	bne.n	80080f8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	e0e8      	b.n	80082ca <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <USB_HC_Halt+0x66>
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	2b02      	cmp	r3, #2
 8008102:	d173      	bne.n	80081ec <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	4413      	add	r3, r2
 800810c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	0151      	lsls	r1, r2, #5
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	440a      	add	r2, r1
 800811a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800811e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008122:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f003 0320 	and.w	r3, r3, #32
 800812c:	2b00      	cmp	r3, #0
 800812e:	f040 80cb 	bne.w	80082c8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008136:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d143      	bne.n	80081c6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	4413      	add	r3, r2
 8008146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	0151      	lsls	r1, r2, #5
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	440a      	add	r2, r1
 8008154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008158:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800815c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	4413      	add	r3, r2
 8008166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	0151      	lsls	r1, r2, #5
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	440a      	add	r2, r1
 8008174:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800817c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	4413      	add	r3, r2
 8008186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	0151      	lsls	r1, r2, #5
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	440a      	add	r2, r1
 8008194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008198:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800819c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	3301      	adds	r3, #1
 80081a2:	61fb      	str	r3, [r7, #28]
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081aa:	d81d      	bhi.n	80081e8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081c2:	d0ec      	beq.n	800819e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081c4:	e080      	b.n	80082c8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	0151      	lsls	r1, r2, #5
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	440a      	add	r2, r1
 80081dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081e6:	e06f      	b.n	80082c8 <USB_HC_Halt+0x22a>
            break;
 80081e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081ea:	e06d      	b.n	80082c8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	0151      	lsls	r1, r2, #5
 80081fe:	69ba      	ldr	r2, [r7, #24]
 8008200:	440a      	add	r2, r1
 8008202:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008206:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800820a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d143      	bne.n	80082a4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	4413      	add	r3, r2
 8008224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	0151      	lsls	r1, r2, #5
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	440a      	add	r2, r1
 8008232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008236:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800823a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	4413      	add	r3, r2
 8008244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	0151      	lsls	r1, r2, #5
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	440a      	add	r2, r1
 8008252:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008256:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800825a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	015a      	lsls	r2, r3, #5
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	4413      	add	r3, r2
 8008264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	0151      	lsls	r1, r2, #5
 800826e:	69ba      	ldr	r2, [r7, #24]
 8008270:	440a      	add	r2, r1
 8008272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008276:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800827a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	3301      	adds	r3, #1
 8008280:	61fb      	str	r3, [r7, #28]
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008288:	d81d      	bhi.n	80082c6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	4413      	add	r3, r2
 8008292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800829c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082a0:	d0ec      	beq.n	800827c <USB_HC_Halt+0x1de>
 80082a2:	e011      	b.n	80082c8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	0151      	lsls	r1, r2, #5
 80082b6:	69ba      	ldr	r2, [r7, #24]
 80082b8:	440a      	add	r2, r1
 80082ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082c2:	6013      	str	r3, [r2, #0]
 80082c4:	e000      	b.n	80082c8 <USB_HC_Halt+0x22a>
          break;
 80082c6:	bf00      	nop
    }
  }

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3724      	adds	r7, #36	; 0x24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
	...

080082d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80082e8:	78fb      	ldrb	r3, [r7, #3]
 80082ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80082ec:	2301      	movs	r3, #1
 80082ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	04da      	lsls	r2, r3, #19
 80082f4:	4b15      	ldr	r3, [pc, #84]	; (800834c <USB_DoPing+0x74>)
 80082f6:	4013      	ands	r3, r2
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	0151      	lsls	r1, r2, #5
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	440a      	add	r2, r1
 8008300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008304:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008308:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	4413      	add	r3, r2
 8008312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008320:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008328:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	015a      	lsls	r2, r3, #5
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	4413      	add	r3, r2
 8008332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008336:	461a      	mov	r2, r3
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	371c      	adds	r7, #28
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	1ff80000 	.word	0x1ff80000

08008350 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff f981 	bl	8007668 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008366:	2110      	movs	r1, #16
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7ff f9b9 	bl	80076e0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7ff f9dc 	bl	800772c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008374:	2300      	movs	r3, #0
 8008376:	613b      	str	r3, [r7, #16]
 8008378:	e01f      	b.n	80083ba <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	4413      	add	r3, r2
 8008382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008390:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008398:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ae:	461a      	mov	r2, r3
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	3301      	adds	r3, #1
 80083b8:	613b      	str	r3, [r7, #16]
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	2b0f      	cmp	r3, #15
 80083be:	d9dc      	bls.n	800837a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80083c0:	2300      	movs	r3, #0
 80083c2:	613b      	str	r3, [r7, #16]
 80083c4:	e034      	b.n	8008430 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083fa:	461a      	mov	r2, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	3301      	adds	r3, #1
 8008404:	617b      	str	r3, [r7, #20]
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800840c:	d80c      	bhi.n	8008428 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	015a      	lsls	r2, r3, #5
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4413      	add	r3, r2
 8008416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008420:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008424:	d0ec      	beq.n	8008400 <USB_StopHost+0xb0>
 8008426:	e000      	b.n	800842a <USB_StopHost+0xda>
        break;
 8008428:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	3301      	adds	r3, #1
 800842e:	613b      	str	r3, [r7, #16]
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	2b0f      	cmp	r3, #15
 8008434:	d9c7      	bls.n	80083c6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800843c:	461a      	mov	r2, r3
 800843e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008442:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800844a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff f8fa 	bl	8007646 <USB_EnableGlobalInt>

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800845c:	b590      	push	{r4, r7, lr}
 800845e:	b089      	sub	sp, #36	; 0x24
 8008460:	af04      	add	r7, sp, #16
 8008462:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008464:	2301      	movs	r3, #1
 8008466:	2202      	movs	r2, #2
 8008468:	2102      	movs	r1, #2
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fc66 	bl	8008d3c <USBH_FindInterface>
 8008470:	4603      	mov	r3, r0
 8008472:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008474:	7bfb      	ldrb	r3, [r7, #15]
 8008476:	2bff      	cmp	r3, #255	; 0xff
 8008478:	d002      	beq.n	8008480 <USBH_CDC_InterfaceInit+0x24>
 800847a:	7bfb      	ldrb	r3, [r7, #15]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d901      	bls.n	8008484 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008480:	2302      	movs	r3, #2
 8008482:	e13d      	b.n	8008700 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008484:	7bfb      	ldrb	r3, [r7, #15]
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fc3b 	bl	8008d04 <USBH_SelectInterface>
 800848e:	4603      	mov	r3, r0
 8008490:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008492:	7bbb      	ldrb	r3, [r7, #14]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008498:	2302      	movs	r3, #2
 800849a:	e131      	b.n	8008700 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80084a2:	2050      	movs	r0, #80	; 0x50
 80084a4:	f002 fa00 	bl	800a8a8 <malloc>
 80084a8:	4603      	mov	r3, r0
 80084aa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084b2:	69db      	ldr	r3, [r3, #28]
 80084b4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80084bc:	2302      	movs	r3, #2
 80084be:	e11f      	b.n	8008700 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80084c0:	2250      	movs	r2, #80	; 0x50
 80084c2:	2100      	movs	r1, #0
 80084c4:	68b8      	ldr	r0, [r7, #8]
 80084c6:	f002 f9ff 	bl	800a8c8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	211a      	movs	r1, #26
 80084d0:	fb01 f303 	mul.w	r3, r1, r3
 80084d4:	4413      	add	r3, r2
 80084d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	b25b      	sxtb	r3, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	da15      	bge.n	800850e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	211a      	movs	r1, #26
 80084e8:	fb01 f303 	mul.w	r3, r1, r3
 80084ec:	4413      	add	r3, r2
 80084ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80084f2:	781a      	ldrb	r2, [r3, #0]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	211a      	movs	r1, #26
 80084fe:	fb01 f303 	mul.w	r3, r1, r3
 8008502:	4413      	add	r3, r2
 8008504:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008508:	881a      	ldrh	r2, [r3, #0]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	785b      	ldrb	r3, [r3, #1]
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f001 fe32 	bl	800a17e <USBH_AllocPipe>
 800851a:	4603      	mov	r3, r0
 800851c:	461a      	mov	r2, r3
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	7819      	ldrb	r1, [r3, #0]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	7858      	ldrb	r0, [r3, #1]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	8952      	ldrh	r2, [r2, #10]
 800853a:	9202      	str	r2, [sp, #8]
 800853c:	2203      	movs	r2, #3
 800853e:	9201      	str	r2, [sp, #4]
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	4623      	mov	r3, r4
 8008544:	4602      	mov	r2, r0
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f001 fdea 	bl	800a120 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2200      	movs	r2, #0
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f002 f8f9 	bl	800a74c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800855a:	2300      	movs	r3, #0
 800855c:	2200      	movs	r2, #0
 800855e:	210a      	movs	r1, #10
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fbeb 	bl	8008d3c <USBH_FindInterface>
 8008566:	4603      	mov	r3, r0
 8008568:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	2bff      	cmp	r3, #255	; 0xff
 800856e:	d002      	beq.n	8008576 <USBH_CDC_InterfaceInit+0x11a>
 8008570:	7bfb      	ldrb	r3, [r7, #15]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d901      	bls.n	800857a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008576:	2302      	movs	r3, #2
 8008578:	e0c2      	b.n	8008700 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800857a:	7bfb      	ldrb	r3, [r7, #15]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	211a      	movs	r1, #26
 8008580:	fb01 f303 	mul.w	r3, r1, r3
 8008584:	4413      	add	r3, r2
 8008586:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	b25b      	sxtb	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	da16      	bge.n	80085c0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008592:	7bfb      	ldrb	r3, [r7, #15]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	211a      	movs	r1, #26
 8008598:	fb01 f303 	mul.w	r3, r1, r3
 800859c:	4413      	add	r3, r2
 800859e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80085a2:	781a      	ldrb	r2, [r3, #0]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	211a      	movs	r1, #26
 80085ae:	fb01 f303 	mul.w	r3, r1, r3
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80085b8:	881a      	ldrh	r2, [r3, #0]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	835a      	strh	r2, [r3, #26]
 80085be:	e015      	b.n	80085ec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	211a      	movs	r1, #26
 80085c6:	fb01 f303 	mul.w	r3, r1, r3
 80085ca:	4413      	add	r3, r2
 80085cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80085d0:	781a      	ldrb	r2, [r3, #0]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	211a      	movs	r1, #26
 80085dc:	fb01 f303 	mul.w	r3, r1, r3
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80085e6:	881a      	ldrh	r2, [r3, #0]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	211a      	movs	r1, #26
 80085f2:	fb01 f303 	mul.w	r3, r1, r3
 80085f6:	4413      	add	r3, r2
 80085f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	b25b      	sxtb	r3, r3
 8008600:	2b00      	cmp	r3, #0
 8008602:	da16      	bge.n	8008632 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	211a      	movs	r1, #26
 800860a:	fb01 f303 	mul.w	r3, r1, r3
 800860e:	4413      	add	r3, r2
 8008610:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008614:	781a      	ldrb	r2, [r3, #0]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800861a:	7bfb      	ldrb	r3, [r7, #15]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	211a      	movs	r1, #26
 8008620:	fb01 f303 	mul.w	r3, r1, r3
 8008624:	4413      	add	r3, r2
 8008626:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800862a:	881a      	ldrh	r2, [r3, #0]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	835a      	strh	r2, [r3, #26]
 8008630:	e015      	b.n	800865e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	211a      	movs	r1, #26
 8008638:	fb01 f303 	mul.w	r3, r1, r3
 800863c:	4413      	add	r3, r2
 800863e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008642:	781a      	ldrb	r2, [r3, #0]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	211a      	movs	r1, #26
 800864e:	fb01 f303 	mul.w	r3, r1, r3
 8008652:	4413      	add	r3, r2
 8008654:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008658:	881a      	ldrh	r2, [r3, #0]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	7b9b      	ldrb	r3, [r3, #14]
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f001 fd8a 	bl	800a17e <USBH_AllocPipe>
 800866a:	4603      	mov	r3, r0
 800866c:	461a      	mov	r2, r3
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	7bdb      	ldrb	r3, [r3, #15]
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 fd80 	bl	800a17e <USBH_AllocPipe>
 800867e:	4603      	mov	r3, r0
 8008680:	461a      	mov	r2, r3
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	7b59      	ldrb	r1, [r3, #13]
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	7b98      	ldrb	r0, [r3, #14]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	8b12      	ldrh	r2, [r2, #24]
 800869e:	9202      	str	r2, [sp, #8]
 80086a0:	2202      	movs	r2, #2
 80086a2:	9201      	str	r2, [sp, #4]
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	4623      	mov	r3, r4
 80086a8:	4602      	mov	r2, r0
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f001 fd38 	bl	800a120 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	7b19      	ldrb	r1, [r3, #12]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	7bd8      	ldrb	r0, [r3, #15]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	8b52      	ldrh	r2, [r2, #26]
 80086c8:	9202      	str	r2, [sp, #8]
 80086ca:	2202      	movs	r2, #2
 80086cc:	9201      	str	r2, [sp, #4]
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	4623      	mov	r3, r4
 80086d2:	4602      	mov	r2, r0
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f001 fd23 	bl	800a120 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	7b5b      	ldrb	r3, [r3, #13]
 80086e6:	2200      	movs	r2, #0
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f002 f82e 	bl	800a74c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	7b1b      	ldrb	r3, [r3, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	4619      	mov	r1, r3
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f002 f827 	bl	800a74c <USBH_LL_SetToggle>

  return USBH_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	bd90      	pop	{r4, r7, pc}

08008708 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00e      	beq.n	8008740 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f001 fd18 	bl	800a15e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 fd43 	bl	800a1c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	7b1b      	ldrb	r3, [r3, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00e      	beq.n	8008766 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	7b1b      	ldrb	r3, [r3, #12]
 800874c:	4619      	mov	r1, r3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 fd05 	bl	800a15e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	7b1b      	ldrb	r3, [r3, #12]
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f001 fd30 	bl	800a1c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	7b5b      	ldrb	r3, [r3, #13]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00e      	beq.n	800878c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	7b5b      	ldrb	r3, [r3, #13]
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f001 fcf2 	bl	800a15e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	7b5b      	ldrb	r3, [r3, #13]
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f001 fd1d 	bl	800a1c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00b      	beq.n	80087b0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f002 f889 	bl	800a8b8 <free>
    phost->pActiveClass->pData = 0U;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ac:	2200      	movs	r2, #0
 80087ae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b084      	sub	sp, #16
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	3340      	adds	r3, #64	; 0x40
 80087d0:	4619      	mov	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f8b1 	bl	800893a <GetLineCoding>
 80087d8:	4603      	mov	r3, r0
 80087da:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80087dc:	7afb      	ldrb	r3, [r7, #11]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d105      	bne.n	80087ee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087e8:	2102      	movs	r1, #2
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80087ee:	7afb      	ldrb	r3, [r7, #11]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008800:	2301      	movs	r3, #1
 8008802:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008818:	2b04      	cmp	r3, #4
 800881a:	d877      	bhi.n	800890c <USBH_CDC_Process+0x114>
 800881c:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <USBH_CDC_Process+0x2c>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	08008839 	.word	0x08008839
 8008828:	0800883f 	.word	0x0800883f
 800882c:	0800886f 	.word	0x0800886f
 8008830:	080088e3 	.word	0x080088e3
 8008834:	080088f1 	.word	0x080088f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73fb      	strb	r3, [r7, #15]
      break;
 800883c:	e06d      	b.n	800891a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008842:	4619      	mov	r1, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f897 	bl	8008978 <SetLineCoding>
 800884a:	4603      	mov	r3, r0
 800884c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800884e:	7bbb      	ldrb	r3, [r7, #14]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d104      	bne.n	800885e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2202      	movs	r2, #2
 8008858:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800885c:	e058      	b.n	8008910 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d055      	beq.n	8008910 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2204      	movs	r2, #4
 8008868:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800886c:	e050      	b.n	8008910 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	3340      	adds	r3, #64	; 0x40
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f860 	bl	800893a <GetLineCoding>
 800887a:	4603      	mov	r3, r0
 800887c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800887e:	7bbb      	ldrb	r3, [r7, #14]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d126      	bne.n	80088d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008896:	791b      	ldrb	r3, [r3, #4]
 8008898:	429a      	cmp	r2, r3
 800889a:	d13b      	bne.n	8008914 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d133      	bne.n	8008914 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d12b      	bne.n	8008914 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d124      	bne.n	8008914 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f958 	bl	8008b80 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80088d0:	e020      	b.n	8008914 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80088d2:	7bbb      	ldrb	r3, [r7, #14]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d01d      	beq.n	8008914 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2204      	movs	r2, #4
 80088dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80088e0:	e018      	b.n	8008914 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f867 	bl	80089b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f8da 	bl	8008aa2 <CDC_ProcessReception>
      break;
 80088ee:	e014      	b.n	800891a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80088f0:	2100      	movs	r1, #0
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 ffe3 	bl	80098be <USBH_ClrFeature>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10a      	bne.n	8008918 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800890a:	e005      	b.n	8008918 <USBH_CDC_Process+0x120>

    default:
      break;
 800890c:	bf00      	nop
 800890e:	e004      	b.n	800891a <USBH_CDC_Process+0x122>
      break;
 8008910:	bf00      	nop
 8008912:	e002      	b.n	800891a <USBH_CDC_Process+0x122>
      break;
 8008914:	bf00      	nop
 8008916:	e000      	b.n	800891a <USBH_CDC_Process+0x122>
      break;
 8008918:	bf00      	nop

  }

  return status;
 800891a:	7bfb      	ldrb	r3, [r7, #15]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b082      	sub	sp, #8
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	22a1      	movs	r2, #161	; 0xa1
 8008948:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2221      	movs	r2, #33	; 0x21
 800894e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2207      	movs	r2, #7
 8008960:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2207      	movs	r2, #7
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f001 f988 	bl	8009c7e <USBH_CtlReq>
 800896e:	4603      	mov	r3, r0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2221      	movs	r2, #33	; 0x21
 8008986:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2220      	movs	r2, #32
 800898c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2207      	movs	r2, #7
 800899e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2207      	movs	r2, #7
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f001 f969 	bl	8009c7e <USBH_CtlReq>
 80089ac:	4603      	mov	r3, r0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b086      	sub	sp, #24
 80089ba:	af02      	add	r7, sp, #8
 80089bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80089c8:	2300      	movs	r3, #0
 80089ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d002      	beq.n	80089dc <CDC_ProcessTransmission+0x26>
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d023      	beq.n	8008a22 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80089da:	e05e      	b.n	8008a9a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	8b12      	ldrh	r2, [r2, #24]
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d90b      	bls.n	8008a00 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	69d9      	ldr	r1, [r3, #28]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8b1a      	ldrh	r2, [r3, #24]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	7b5b      	ldrb	r3, [r3, #13]
 80089f4:	2001      	movs	r0, #1
 80089f6:	9000      	str	r0, [sp, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f001 fb4e 	bl	800a09a <USBH_BulkSendData>
 80089fe:	e00b      	b.n	8008a18 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	7b5b      	ldrb	r3, [r3, #13]
 8008a0e:	2001      	movs	r0, #1
 8008a10:	9000      	str	r0, [sp, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f001 fb41 	bl	800a09a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008a20:	e03b      	b.n	8008a9a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	7b5b      	ldrb	r3, [r3, #13]
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f001 fe65 	bl	800a6f8 <USBH_LL_GetURBState>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008a32:	7afb      	ldrb	r3, [r7, #11]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d128      	bne.n	8008a8a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	8b12      	ldrh	r2, [r2, #24]
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d90e      	bls.n	8008a62 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	8b12      	ldrh	r2, [r2, #24]
 8008a4c:	1a9a      	subs	r2, r3, r2
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	8b12      	ldrh	r2, [r2, #24]
 8008a5a:	441a      	add	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	61da      	str	r2, [r3, #28]
 8008a60:	e002      	b.n	8008a68 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d004      	beq.n	8008a7a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008a78:	e00e      	b.n	8008a98 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f868 	bl	8008b58 <USBH_CDC_TransmitCallback>
      break;
 8008a88:	e006      	b.n	8008a98 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008a8a:	7afb      	ldrb	r3, [r7, #11]
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d103      	bne.n	8008a98 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008a98:	bf00      	nop
  }
}
 8008a9a:	bf00      	nop
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b086      	sub	sp, #24
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d002      	beq.n	8008ac8 <CDC_ProcessReception+0x26>
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	d00e      	beq.n	8008ae4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008ac6:	e043      	b.n	8008b50 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	6a19      	ldr	r1, [r3, #32]
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	8b5a      	ldrh	r2, [r3, #26]
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	7b1b      	ldrb	r3, [r3, #12]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 fb05 	bl	800a0e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2204      	movs	r2, #4
 8008ade:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008ae2:	e035      	b.n	8008b50 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	7b1b      	ldrb	r3, [r3, #12]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f001 fe04 	bl	800a6f8 <USBH_LL_GetURBState>
 8008af0:	4603      	mov	r3, r0
 8008af2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008af4:	7cfb      	ldrb	r3, [r7, #19]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d129      	bne.n	8008b4e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	7b1b      	ldrb	r3, [r3, #12]
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f001 fd67 	bl	800a5d4 <USBH_LL_GetLastXferSize>
 8008b06:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d016      	beq.n	8008b40 <CDC_ProcessReception+0x9e>
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	8b5b      	ldrh	r3, [r3, #26]
 8008b16:	461a      	mov	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d910      	bls.n	8008b40 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	1ad2      	subs	r2, r2, r3
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	6a1a      	ldr	r2, [r3, #32]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	441a      	add	r2, r3
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2203      	movs	r2, #3
 8008b3a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008b3e:	e006      	b.n	8008b4e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f80f 	bl	8008b6c <USBH_CDC_ReceiveCallback>
      break;
 8008b4e:	bf00      	nop
  }
}
 8008b50:	bf00      	nop
 8008b52:	3718      	adds	r7, #24
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008ba8:	2302      	movs	r3, #2
 8008baa:	e029      	b.n	8008c00 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	79fa      	ldrb	r2, [r7, #7]
 8008bb0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 f81f 	bl	8008c08 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f001 fc37 	bl	800a46c <USBH_LL_Init>

  return USBH_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008c14:	2300      	movs	r3, #0
 8008c16:	60fb      	str	r3, [r7, #12]
 8008c18:	e009      	b.n	8008c2e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	33e0      	adds	r3, #224	; 0xe0
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	2200      	movs	r2, #0
 8008c26:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	60fb      	str	r3, [r7, #12]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2b0e      	cmp	r3, #14
 8008c32:	d9f2      	bls.n	8008c1a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008c34:	2300      	movs	r3, #0
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	e009      	b.n	8008c4e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	4413      	add	r3, r2
 8008c40:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008c44:	2200      	movs	r2, #0
 8008c46:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	60fb      	str	r3, [r7, #12]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c54:	d3f1      	bcc.n	8008c3a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2240      	movs	r2, #64	; 0x40
 8008c7a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d016      	beq.n	8008cf2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10e      	bne.n	8008cec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008cd4:	1c59      	adds	r1, r3, #1
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	33de      	adds	r3, #222	; 0xde
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	73fb      	strb	r3, [r7, #15]
 8008cea:	e004      	b.n	8008cf6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008cec:	2302      	movs	r3, #2
 8008cee:	73fb      	strb	r3, [r7, #15]
 8008cf0:	e001      	b.n	8008cf6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008d1a:	78fa      	ldrb	r2, [r7, #3]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d204      	bcs.n	8008d2a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	78fa      	ldrb	r2, [r7, #3]
 8008d24:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008d28:	e001      	b.n	8008d2e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	4608      	mov	r0, r1
 8008d46:	4611      	mov	r1, r2
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	70fb      	strb	r3, [r7, #3]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	70bb      	strb	r3, [r7, #2]
 8008d52:	4613      	mov	r3, r2
 8008d54:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008d64:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008d66:	e025      	b.n	8008db4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008d68:	7dfb      	ldrb	r3, [r7, #23]
 8008d6a:	221a      	movs	r2, #26
 8008d6c:	fb02 f303 	mul.w	r3, r2, r3
 8008d70:	3308      	adds	r3, #8
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	4413      	add	r3, r2
 8008d76:	3302      	adds	r3, #2
 8008d78:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	795b      	ldrb	r3, [r3, #5]
 8008d7e:	78fa      	ldrb	r2, [r7, #3]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d002      	beq.n	8008d8a <USBH_FindInterface+0x4e>
 8008d84:	78fb      	ldrb	r3, [r7, #3]
 8008d86:	2bff      	cmp	r3, #255	; 0xff
 8008d88:	d111      	bne.n	8008dae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008d8e:	78ba      	ldrb	r2, [r7, #2]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d002      	beq.n	8008d9a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d94:	78bb      	ldrb	r3, [r7, #2]
 8008d96:	2bff      	cmp	r3, #255	; 0xff
 8008d98:	d109      	bne.n	8008dae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008d9e:	787a      	ldrb	r2, [r7, #1]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d002      	beq.n	8008daa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008da4:	787b      	ldrb	r3, [r7, #1]
 8008da6:	2bff      	cmp	r3, #255	; 0xff
 8008da8:	d101      	bne.n	8008dae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
 8008dac:	e006      	b.n	8008dbc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	3301      	adds	r3, #1
 8008db2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008db4:	7dfb      	ldrb	r3, [r7, #23]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d9d6      	bls.n	8008d68 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008dba:	23ff      	movs	r3, #255	; 0xff
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	371c      	adds	r7, #28
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f001 fb87 	bl	800a4e4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008dd6:	2101      	movs	r1, #1
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f001 fca0 	bl	800a71e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af04      	add	r7, sp, #16
 8008dee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008df0:	2302      	movs	r3, #2
 8008df2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008df4:	2300      	movs	r3, #0
 8008df6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d102      	bne.n	8008e0a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2203      	movs	r2, #3
 8008e08:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b0b      	cmp	r3, #11
 8008e12:	f200 81b3 	bhi.w	800917c <USBH_Process+0x394>
 8008e16:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <USBH_Process+0x34>)
 8008e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1c:	08008e4d 	.word	0x08008e4d
 8008e20:	08008e7f 	.word	0x08008e7f
 8008e24:	08008ee7 	.word	0x08008ee7
 8008e28:	08009117 	.word	0x08009117
 8008e2c:	0800917d 	.word	0x0800917d
 8008e30:	08008f8b 	.word	0x08008f8b
 8008e34:	080090bd 	.word	0x080090bd
 8008e38:	08008fc1 	.word	0x08008fc1
 8008e3c:	08008fe1 	.word	0x08008fe1
 8008e40:	08009001 	.word	0x08009001
 8008e44:	0800902f 	.word	0x0800902f
 8008e48:	080090ff 	.word	0x080090ff
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 8193 	beq.w	8009180 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008e60:	20c8      	movs	r0, #200	; 0xc8
 8008e62:	f001 fca3 	bl	800a7ac <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f001 fb99 	bl	800a59e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008e7c:	e180      	b.n	8009180 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d107      	bne.n	8008e98 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2202      	movs	r2, #2
 8008e94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e96:	e182      	b.n	800919e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ea2:	d914      	bls.n	8008ece <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008eaa:	3301      	adds	r3, #1
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d903      	bls.n	8008ec6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	220d      	movs	r2, #13
 8008ec2:	701a      	strb	r2, [r3, #0]
      break;
 8008ec4:	e16b      	b.n	800919e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	701a      	strb	r2, [r3, #0]
      break;
 8008ecc:	e167      	b.n	800919e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008ed4:	f103 020a 	add.w	r2, r3, #10
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008ede:	200a      	movs	r0, #10
 8008ee0:	f001 fc64 	bl	800a7ac <USBH_Delay>
      break;
 8008ee4:	e15b      	b.n	800919e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d005      	beq.n	8008efc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ef6:	2104      	movs	r1, #4
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008efc:	2064      	movs	r0, #100	; 0x64
 8008efe:	f001 fc55 	bl	800a7ac <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f001 fb24 	bl	800a550 <USBH_LL_GetSpeed>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2205      	movs	r2, #5
 8008f16:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008f18:	2100      	movs	r1, #0
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f001 f92f 	bl	800a17e <USBH_AllocPipe>
 8008f20:	4603      	mov	r3, r0
 8008f22:	461a      	mov	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008f28:	2180      	movs	r1, #128	; 0x80
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f001 f927 	bl	800a17e <USBH_AllocPipe>
 8008f30:	4603      	mov	r3, r0
 8008f32:	461a      	mov	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	7919      	ldrb	r1, [r3, #4]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008f4c:	b292      	uxth	r2, r2
 8008f4e:	9202      	str	r2, [sp, #8]
 8008f50:	2200      	movs	r2, #0
 8008f52:	9201      	str	r2, [sp, #4]
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	4603      	mov	r3, r0
 8008f58:	2280      	movs	r2, #128	; 0x80
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f001 f8e0 	bl	800a120 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	7959      	ldrb	r1, [r3, #5]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008f74:	b292      	uxth	r2, r2
 8008f76:	9202      	str	r2, [sp, #8]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	9201      	str	r2, [sp, #4]
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2200      	movs	r2, #0
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f001 f8cc 	bl	800a120 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008f88:	e109      	b.n	800919e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f90c 	bl	80091a8 <USBH_HandleEnum>
 8008f90:	4603      	mov	r3, r0
 8008f92:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f040 80f3 	bne.w	8009184 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d103      	bne.n	8008fb8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2208      	movs	r2, #8
 8008fb4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008fb6:	e0e5      	b.n	8009184 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2207      	movs	r2, #7
 8008fbc:	701a      	strb	r2, [r3, #0]
      break;
 8008fbe:	e0e1      	b.n	8009184 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f000 80de 	beq.w	8009188 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2208      	movs	r2, #8
 8008fdc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008fde:	e0d3      	b.n	8009188 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fc20 	bl	8009830 <USBH_SetCfg>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f040 80ca 	bne.w	800918c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2209      	movs	r2, #9
 8008ffc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ffe:	e0c5      	b.n	800918c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00b      	beq.n	8009026 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800900e:	2101      	movs	r1, #1
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fc30 	bl	8009876 <USBH_SetFeature>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	f040 80b9 	bne.w	8009190 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	220a      	movs	r2, #10
 8009022:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009024:	e0b4      	b.n	8009190 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	220a      	movs	r2, #10
 800902a:	701a      	strb	r2, [r3, #0]
      break;
 800902c:	e0b0      	b.n	8009190 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 80ad 	beq.w	8009194 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009042:	2300      	movs	r3, #0
 8009044:	73fb      	strb	r3, [r7, #15]
 8009046:	e016      	b.n	8009076 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009048:	7bfa      	ldrb	r2, [r7, #15]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	32de      	adds	r2, #222	; 0xde
 800904e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009052:	791a      	ldrb	r2, [r3, #4]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800905a:	429a      	cmp	r2, r3
 800905c:	d108      	bne.n	8009070 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800905e:	7bfa      	ldrb	r2, [r7, #15]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	32de      	adds	r2, #222	; 0xde
 8009064:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800906e:	e005      	b.n	800907c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009070:	7bfb      	ldrb	r3, [r7, #15]
 8009072:	3301      	adds	r3, #1
 8009074:	73fb      	strb	r3, [r7, #15]
 8009076:	7bfb      	ldrb	r3, [r7, #15]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d0e5      	beq.n	8009048 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009082:	2b00      	cmp	r3, #0
 8009084:	d016      	beq.n	80090b4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	4798      	blx	r3
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d109      	bne.n	80090ac <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2206      	movs	r2, #6
 800909c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090a4:	2103      	movs	r1, #3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80090aa:	e073      	b.n	8009194 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	220d      	movs	r2, #13
 80090b0:	701a      	strb	r2, [r3, #0]
      break;
 80090b2:	e06f      	b.n	8009194 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	220d      	movs	r2, #13
 80090b8:	701a      	strb	r2, [r3, #0]
      break;
 80090ba:	e06b      	b.n	8009194 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d017      	beq.n	80090f6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	4798      	blx	r3
 80090d2:	4603      	mov	r3, r0
 80090d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80090d6:	7bbb      	ldrb	r3, [r7, #14]
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d103      	bne.n	80090e6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	220b      	movs	r2, #11
 80090e2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80090e4:	e058      	b.n	8009198 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80090e6:	7bbb      	ldrb	r3, [r7, #14]
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d154      	bne.n	8009198 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	220d      	movs	r2, #13
 80090f2:	701a      	strb	r2, [r3, #0]
      break;
 80090f4:	e050      	b.n	8009198 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	220d      	movs	r2, #13
 80090fa:	701a      	strb	r2, [r3, #0]
      break;
 80090fc:	e04c      	b.n	8009198 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009104:	2b00      	cmp	r3, #0
 8009106:	d049      	beq.n	800919c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	4798      	blx	r3
      }
      break;
 8009114:	e042      	b.n	800919c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7ff fd72 	bl	8008c08 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800912a:	2b00      	cmp	r3, #0
 800912c:	d009      	beq.n	8009142 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009148:	2b00      	cmp	r3, #0
 800914a:	d005      	beq.n	8009158 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009152:	2105      	movs	r1, #5
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800915e:	b2db      	uxtb	r3, r3
 8009160:	2b01      	cmp	r3, #1
 8009162:	d107      	bne.n	8009174 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7ff fe2b 	bl	8008dc8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009172:	e014      	b.n	800919e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 f9b5 	bl	800a4e4 <USBH_LL_Start>
      break;
 800917a:	e010      	b.n	800919e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800917c:	bf00      	nop
 800917e:	e00e      	b.n	800919e <USBH_Process+0x3b6>
      break;
 8009180:	bf00      	nop
 8009182:	e00c      	b.n	800919e <USBH_Process+0x3b6>
      break;
 8009184:	bf00      	nop
 8009186:	e00a      	b.n	800919e <USBH_Process+0x3b6>
    break;
 8009188:	bf00      	nop
 800918a:	e008      	b.n	800919e <USBH_Process+0x3b6>
      break;
 800918c:	bf00      	nop
 800918e:	e006      	b.n	800919e <USBH_Process+0x3b6>
      break;
 8009190:	bf00      	nop
 8009192:	e004      	b.n	800919e <USBH_Process+0x3b6>
      break;
 8009194:	bf00      	nop
 8009196:	e002      	b.n	800919e <USBH_Process+0x3b6>
      break;
 8009198:	bf00      	nop
 800919a:	e000      	b.n	800919e <USBH_Process+0x3b6>
      break;
 800919c:	bf00      	nop
  }
  return USBH_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af04      	add	r7, sp, #16
 80091ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80091b0:	2301      	movs	r3, #1
 80091b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80091b4:	2301      	movs	r3, #1
 80091b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	785b      	ldrb	r3, [r3, #1]
 80091bc:	2b07      	cmp	r3, #7
 80091be:	f200 81c1 	bhi.w	8009544 <USBH_HandleEnum+0x39c>
 80091c2:	a201      	add	r2, pc, #4	; (adr r2, 80091c8 <USBH_HandleEnum+0x20>)
 80091c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c8:	080091e9 	.word	0x080091e9
 80091cc:	080092a7 	.word	0x080092a7
 80091d0:	08009311 	.word	0x08009311
 80091d4:	0800939f 	.word	0x0800939f
 80091d8:	08009409 	.word	0x08009409
 80091dc:	08009479 	.word	0x08009479
 80091e0:	080094bf 	.word	0x080094bf
 80091e4:	08009505 	.word	0x08009505
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80091e8:	2108      	movs	r1, #8
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fa50 	bl	8009690 <USBH_Get_DevDesc>
 80091f0:	4603      	mov	r3, r0
 80091f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091f4:	7bbb      	ldrb	r3, [r7, #14]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d130      	bne.n	800925c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	7919      	ldrb	r1, [r3, #4]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800921e:	b292      	uxth	r2, r2
 8009220:	9202      	str	r2, [sp, #8]
 8009222:	2200      	movs	r2, #0
 8009224:	9201      	str	r2, [sp, #4]
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	4603      	mov	r3, r0
 800922a:	2280      	movs	r2, #128	; 0x80
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 ff77 	bl	800a120 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	7959      	ldrb	r1, [r3, #5]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009246:	b292      	uxth	r2, r2
 8009248:	9202      	str	r2, [sp, #8]
 800924a:	2200      	movs	r2, #0
 800924c:	9201      	str	r2, [sp, #4]
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	4603      	mov	r3, r0
 8009252:	2200      	movs	r2, #0
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 ff63 	bl	800a120 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800925a:	e175      	b.n	8009548 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	2b03      	cmp	r3, #3
 8009260:	f040 8172 	bne.w	8009548 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800926a:	3301      	adds	r3, #1
 800926c:	b2da      	uxtb	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800927a:	2b03      	cmp	r3, #3
 800927c:	d903      	bls.n	8009286 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	220d      	movs	r2, #13
 8009282:	701a      	strb	r2, [r3, #0]
      break;
 8009284:	e160      	b.n	8009548 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	795b      	ldrb	r3, [r3, #5]
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 ff97 	bl	800a1c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	791b      	ldrb	r3, [r3, #4]
 8009296:	4619      	mov	r1, r3
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 ff91 	bl	800a1c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	701a      	strb	r2, [r3, #0]
      break;
 80092a4:	e150      	b.n	8009548 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80092a6:	2112      	movs	r1, #18
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f9f1 	bl	8009690 <USBH_Get_DevDesc>
 80092ae:	4603      	mov	r3, r0
 80092b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d103      	bne.n	80092c0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80092be:	e145      	b.n	800954c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
 80092c2:	2b03      	cmp	r3, #3
 80092c4:	f040 8142 	bne.w	800954c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092ce:	3301      	adds	r3, #1
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d903      	bls.n	80092ea <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	220d      	movs	r2, #13
 80092e6:	701a      	strb	r2, [r3, #0]
      break;
 80092e8:	e130      	b.n	800954c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	795b      	ldrb	r3, [r3, #5]
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 ff65 	bl	800a1c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	791b      	ldrb	r3, [r3, #4]
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 ff5f 	bl	800a1c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	701a      	strb	r2, [r3, #0]
      break;
 800930e:	e11d      	b.n	800954c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009310:	2101      	movs	r1, #1
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fa68 	bl	80097e8 <USBH_SetAddress>
 8009318:	4603      	mov	r3, r0
 800931a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800931c:	7bbb      	ldrb	r3, [r7, #14]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d132      	bne.n	8009388 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009322:	2002      	movs	r0, #2
 8009324:	f001 fa42 	bl	800a7ac <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2203      	movs	r2, #3
 8009334:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	7919      	ldrb	r1, [r3, #4]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800934a:	b292      	uxth	r2, r2
 800934c:	9202      	str	r2, [sp, #8]
 800934e:	2200      	movs	r2, #0
 8009350:	9201      	str	r2, [sp, #4]
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	4603      	mov	r3, r0
 8009356:	2280      	movs	r2, #128	; 0x80
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fee1 	bl	800a120 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	7959      	ldrb	r1, [r3, #5]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009372:	b292      	uxth	r2, r2
 8009374:	9202      	str	r2, [sp, #8]
 8009376:	2200      	movs	r2, #0
 8009378:	9201      	str	r2, [sp, #4]
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	4603      	mov	r3, r0
 800937e:	2200      	movs	r2, #0
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fecd 	bl	800a120 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009386:	e0e3      	b.n	8009550 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009388:	7bbb      	ldrb	r3, [r7, #14]
 800938a:	2b03      	cmp	r3, #3
 800938c:	f040 80e0 	bne.w	8009550 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	220d      	movs	r2, #13
 8009394:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	705a      	strb	r2, [r3, #1]
      break;
 800939c:	e0d8      	b.n	8009550 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800939e:	2109      	movs	r1, #9
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f99d 	bl	80096e0 <USBH_Get_CfgDesc>
 80093a6:	4603      	mov	r3, r0
 80093a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093aa:	7bbb      	ldrb	r3, [r7, #14]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d103      	bne.n	80093b8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2204      	movs	r2, #4
 80093b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80093b6:	e0cd      	b.n	8009554 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093b8:	7bbb      	ldrb	r3, [r7, #14]
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	f040 80ca 	bne.w	8009554 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093c6:	3301      	adds	r3, #1
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	d903      	bls.n	80093e2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	220d      	movs	r2, #13
 80093de:	701a      	strb	r2, [r3, #0]
      break;
 80093e0:	e0b8      	b.n	8009554 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	795b      	ldrb	r3, [r3, #5]
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fee9 	bl	800a1c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	791b      	ldrb	r3, [r3, #4]
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fee3 	bl	800a1c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	701a      	strb	r2, [r3, #0]
      break;
 8009406:	e0a5      	b.n	8009554 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800940e:	4619      	mov	r1, r3
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f965 	bl	80096e0 <USBH_Get_CfgDesc>
 8009416:	4603      	mov	r3, r0
 8009418:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800941a:	7bbb      	ldrb	r3, [r7, #14]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d103      	bne.n	8009428 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2205      	movs	r2, #5
 8009424:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009426:	e097      	b.n	8009558 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009428:	7bbb      	ldrb	r3, [r7, #14]
 800942a:	2b03      	cmp	r3, #3
 800942c:	f040 8094 	bne.w	8009558 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009436:	3301      	adds	r3, #1
 8009438:	b2da      	uxtb	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009446:	2b03      	cmp	r3, #3
 8009448:	d903      	bls.n	8009452 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	220d      	movs	r2, #13
 800944e:	701a      	strb	r2, [r3, #0]
      break;
 8009450:	e082      	b.n	8009558 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	795b      	ldrb	r3, [r3, #5]
 8009456:	4619      	mov	r1, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 feb1 	bl	800a1c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	791b      	ldrb	r3, [r3, #4]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 feab 	bl	800a1c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	701a      	strb	r2, [r3, #0]
      break;
 8009476:	e06f      	b.n	8009558 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800947e:	2b00      	cmp	r3, #0
 8009480:	d019      	beq.n	80094b6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800948e:	23ff      	movs	r3, #255	; 0xff
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f949 	bl	8009728 <USBH_Get_StringDesc>
 8009496:	4603      	mov	r3, r0
 8009498:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800949a:	7bbb      	ldrb	r3, [r7, #14]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d103      	bne.n	80094a8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2206      	movs	r2, #6
 80094a4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80094a6:	e059      	b.n	800955c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094a8:	7bbb      	ldrb	r3, [r7, #14]
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d156      	bne.n	800955c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2206      	movs	r2, #6
 80094b2:	705a      	strb	r2, [r3, #1]
      break;
 80094b4:	e052      	b.n	800955c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2206      	movs	r2, #6
 80094ba:	705a      	strb	r2, [r3, #1]
      break;
 80094bc:	e04e      	b.n	800955c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d019      	beq.n	80094fc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80094d4:	23ff      	movs	r3, #255	; 0xff
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f926 	bl	8009728 <USBH_Get_StringDesc>
 80094dc:	4603      	mov	r3, r0
 80094de:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d103      	bne.n	80094ee <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2207      	movs	r2, #7
 80094ea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80094ec:	e038      	b.n	8009560 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d135      	bne.n	8009560 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2207      	movs	r2, #7
 80094f8:	705a      	strb	r2, [r3, #1]
      break;
 80094fa:	e031      	b.n	8009560 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2207      	movs	r2, #7
 8009500:	705a      	strb	r2, [r3, #1]
      break;
 8009502:	e02d      	b.n	8009560 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800950a:	2b00      	cmp	r3, #0
 800950c:	d017      	beq.n	800953e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800951a:	23ff      	movs	r3, #255	; 0xff
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f903 	bl	8009728 <USBH_Get_StringDesc>
 8009522:	4603      	mov	r3, r0
 8009524:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009526:	7bbb      	ldrb	r3, [r7, #14]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d102      	bne.n	8009532 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009530:	e018      	b.n	8009564 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009532:	7bbb      	ldrb	r3, [r7, #14]
 8009534:	2b03      	cmp	r3, #3
 8009536:	d115      	bne.n	8009564 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73fb      	strb	r3, [r7, #15]
      break;
 800953c:	e012      	b.n	8009564 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	73fb      	strb	r3, [r7, #15]
      break;
 8009542:	e00f      	b.n	8009564 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009544:	bf00      	nop
 8009546:	e00e      	b.n	8009566 <USBH_HandleEnum+0x3be>
      break;
 8009548:	bf00      	nop
 800954a:	e00c      	b.n	8009566 <USBH_HandleEnum+0x3be>
      break;
 800954c:	bf00      	nop
 800954e:	e00a      	b.n	8009566 <USBH_HandleEnum+0x3be>
      break;
 8009550:	bf00      	nop
 8009552:	e008      	b.n	8009566 <USBH_HandleEnum+0x3be>
      break;
 8009554:	bf00      	nop
 8009556:	e006      	b.n	8009566 <USBH_HandleEnum+0x3be>
      break;
 8009558:	bf00      	nop
 800955a:	e004      	b.n	8009566 <USBH_HandleEnum+0x3be>
      break;
 800955c:	bf00      	nop
 800955e:	e002      	b.n	8009566 <USBH_HandleEnum+0x3be>
      break;
 8009560:	bf00      	nop
 8009562:	e000      	b.n	8009566 <USBH_HandleEnum+0x3be>
      break;
 8009564:	bf00      	nop
  }
  return Status;
 8009566:	7bfb      	ldrb	r3, [r7, #15]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009582:	bf00      	nop
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b082      	sub	sp, #8
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 f804 	bl	80095b2 <USBH_HandleSof>
}
 80095aa:	bf00      	nop
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b0b      	cmp	r3, #11
 80095c2:	d10a      	bne.n	80095da <USBH_HandleSof+0x28>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d005      	beq.n	80095da <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	4798      	blx	r3
  }
}
 80095da:	bf00      	nop
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80095e2:	b480      	push	{r7}
 80095e4:	b083      	sub	sp, #12
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80095f2:	bf00      	nop
}
 80095f4:	370c      	adds	r7, #12
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80095fe:	b480      	push	{r7}
 8009600:	b083      	sub	sp, #12
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800960e:	bf00      	nop
}
 8009610:	370c      	adds	r7, #12
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800961a:	b480      	push	{r7}
 800961c:	b083      	sub	sp, #12
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 ff56 	bl	800a51a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	791b      	ldrb	r3, [r3, #4]
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fda3 	bl	800a1c0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	795b      	ldrb	r3, [r3, #5]
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 fd9d 	bl	800a1c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af02      	add	r7, sp, #8
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	460b      	mov	r3, r1
 800969a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80096a2:	78fb      	ldrb	r3, [r7, #3]
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	4613      	mov	r3, r2
 80096aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096ae:	2100      	movs	r1, #0
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f864 	bl	800977e <USBH_GetDescriptor>
 80096b6:	4603      	mov	r3, r0
 80096b8:	73fb      	strb	r3, [r7, #15]
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80096cc:	78fa      	ldrb	r2, [r7, #3]
 80096ce:	b292      	uxth	r2, r2
 80096d0:	4619      	mov	r1, r3
 80096d2:	f000 f918 	bl	8009906 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af02      	add	r7, sp, #8
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	460b      	mov	r3, r1
 80096ea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	331c      	adds	r3, #28
 80096f0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80096f2:	887b      	ldrh	r3, [r7, #2]
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096fc:	2100      	movs	r1, #0
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f83d 	bl	800977e <USBH_GetDescriptor>
 8009704:	4603      	mov	r3, r0
 8009706:	72fb      	strb	r3, [r7, #11]
 8009708:	7afb      	ldrb	r3, [r7, #11]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d107      	bne.n	800971e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009714:	887a      	ldrh	r2, [r7, #2]
 8009716:	68f9      	ldr	r1, [r7, #12]
 8009718:	4618      	mov	r0, r3
 800971a:	f000 f964 	bl	80099e6 <USBH_ParseCfgDesc>
  }

  return status;
 800971e:	7afb      	ldrb	r3, [r7, #11]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b088      	sub	sp, #32
 800972c:	af02      	add	r7, sp, #8
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	607a      	str	r2, [r7, #4]
 8009732:	461a      	mov	r2, r3
 8009734:	460b      	mov	r3, r1
 8009736:	72fb      	strb	r3, [r7, #11]
 8009738:	4613      	mov	r3, r2
 800973a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800973c:	7afb      	ldrb	r3, [r7, #11]
 800973e:	b29b      	uxth	r3, r3
 8009740:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009744:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800974c:	893b      	ldrh	r3, [r7, #8]
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	460b      	mov	r3, r1
 8009752:	2100      	movs	r1, #0
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f000 f812 	bl	800977e <USBH_GetDescriptor>
 800975a:	4603      	mov	r3, r0
 800975c:	75fb      	strb	r3, [r7, #23]
 800975e:	7dfb      	ldrb	r3, [r7, #23]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d107      	bne.n	8009774 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800976a:	893a      	ldrh	r2, [r7, #8]
 800976c:	6879      	ldr	r1, [r7, #4]
 800976e:	4618      	mov	r0, r3
 8009770:	f000 fa37 	bl	8009be2 <USBH_ParseStringDesc>
  }

  return status;
 8009774:	7dfb      	ldrb	r3, [r7, #23]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b084      	sub	sp, #16
 8009782:	af00      	add	r7, sp, #0
 8009784:	60f8      	str	r0, [r7, #12]
 8009786:	607b      	str	r3, [r7, #4]
 8009788:	460b      	mov	r3, r1
 800978a:	72fb      	strb	r3, [r7, #11]
 800978c:	4613      	mov	r3, r2
 800978e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	789b      	ldrb	r3, [r3, #2]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d11c      	bne.n	80097d2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009798:	7afb      	ldrb	r3, [r7, #11]
 800979a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800979e:	b2da      	uxtb	r2, r3
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2206      	movs	r2, #6
 80097a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	893a      	ldrh	r2, [r7, #8]
 80097ae:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80097b0:	893b      	ldrh	r3, [r7, #8]
 80097b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80097b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097ba:	d104      	bne.n	80097c6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f240 4209 	movw	r2, #1033	; 0x409
 80097c2:	829a      	strh	r2, [r3, #20]
 80097c4:	e002      	b.n	80097cc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	8b3a      	ldrh	r2, [r7, #24]
 80097d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80097d2:	8b3b      	ldrh	r3, [r7, #24]
 80097d4:	461a      	mov	r2, r3
 80097d6:	6879      	ldr	r1, [r7, #4]
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f000 fa50 	bl	8009c7e <USBH_CtlReq>
 80097de:	4603      	mov	r3, r0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	789b      	ldrb	r3, [r3, #2]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d10f      	bne.n	800981c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2205      	movs	r2, #5
 8009806:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	b29a      	uxth	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800981c:	2200      	movs	r2, #0
 800981e:	2100      	movs	r1, #0
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fa2c 	bl	8009c7e <USBH_CtlReq>
 8009826:	4603      	mov	r3, r0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	460b      	mov	r3, r1
 800983a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	789b      	ldrb	r3, [r3, #2]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d10e      	bne.n	8009862 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2209      	movs	r2, #9
 800984e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	887a      	ldrh	r2, [r7, #2]
 8009854:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009862:	2200      	movs	r2, #0
 8009864:	2100      	movs	r1, #0
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fa09 	bl	8009c7e <USBH_CtlReq>
 800986c:	4603      	mov	r3, r0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	789b      	ldrb	r3, [r3, #2]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d10f      	bne.n	80098aa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2203      	movs	r2, #3
 8009894:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009896:	78fb      	ldrb	r3, [r7, #3]
 8009898:	b29a      	uxth	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80098aa:	2200      	movs	r2, #0
 80098ac:	2100      	movs	r1, #0
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f9e5 	bl	8009c7e <USBH_CtlReq>
 80098b4:	4603      	mov	r3, r0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b082      	sub	sp, #8
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	460b      	mov	r3, r1
 80098c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	789b      	ldrb	r3, [r3, #2]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d10f      	bne.n	80098f2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2202      	movs	r2, #2
 80098d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80098f2:	2200      	movs	r2, #0
 80098f4:	2100      	movs	r1, #0
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f9c1 	bl	8009c7e <USBH_CtlReq>
 80098fc:	4603      	mov	r3, r0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009906:	b480      	push	{r7}
 8009908:	b085      	sub	sp, #20
 800990a:	af00      	add	r7, sp, #0
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	60b9      	str	r1, [r7, #8]
 8009910:	4613      	mov	r3, r2
 8009912:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	781a      	ldrb	r2, [r3, #0]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	785a      	ldrb	r2, [r3, #1]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	3302      	adds	r3, #2
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	b29a      	uxth	r2, r3
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	3303      	adds	r3, #3
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	b29b      	uxth	r3, r3
 8009934:	021b      	lsls	r3, r3, #8
 8009936:	b29b      	uxth	r3, r3
 8009938:	4313      	orrs	r3, r2
 800993a:	b29a      	uxth	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	791a      	ldrb	r2, [r3, #4]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	795a      	ldrb	r2, [r3, #5]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	799a      	ldrb	r2, [r3, #6]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	79da      	ldrb	r2, [r3, #7]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009960:	88fb      	ldrh	r3, [r7, #6]
 8009962:	2b08      	cmp	r3, #8
 8009964:	d939      	bls.n	80099da <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	3308      	adds	r3, #8
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	b29a      	uxth	r2, r3
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	3309      	adds	r3, #9
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	b29b      	uxth	r3, r3
 8009976:	021b      	lsls	r3, r3, #8
 8009978:	b29b      	uxth	r3, r3
 800997a:	4313      	orrs	r3, r2
 800997c:	b29a      	uxth	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	330a      	adds	r3, #10
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	b29a      	uxth	r2, r3
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	330b      	adds	r3, #11
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	b29b      	uxth	r3, r3
 8009992:	021b      	lsls	r3, r3, #8
 8009994:	b29b      	uxth	r3, r3
 8009996:	4313      	orrs	r3, r2
 8009998:	b29a      	uxth	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	330c      	adds	r3, #12
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	330d      	adds	r3, #13
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	021b      	lsls	r3, r3, #8
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	4313      	orrs	r3, r2
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	7b9a      	ldrb	r2, [r3, #14]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	7bda      	ldrb	r2, [r3, #15]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	7c1a      	ldrb	r2, [r3, #16]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	7c5a      	ldrb	r2, [r3, #17]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	745a      	strb	r2, [r3, #17]
  }
}
 80099da:	bf00      	nop
 80099dc:	3714      	adds	r7, #20
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b08a      	sub	sp, #40	; 0x28
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	60f8      	str	r0, [r7, #12]
 80099ee:	60b9      	str	r1, [r7, #8]
 80099f0:	4613      	mov	r3, r2
 80099f2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80099f8:	2300      	movs	r3, #0
 80099fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80099fe:	2300      	movs	r3, #0
 8009a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	781a      	ldrb	r2, [r3, #0]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	785a      	ldrb	r2, [r3, #1]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	3302      	adds	r3, #2
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	3303      	adds	r3, #3
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	021b      	lsls	r3, r3, #8
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	791a      	ldrb	r2, [r3, #4]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	795a      	ldrb	r2, [r3, #5]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	799a      	ldrb	r2, [r3, #6]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	79da      	ldrb	r2, [r3, #7]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	7a1a      	ldrb	r2, [r3, #8]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009a5c:	88fb      	ldrh	r3, [r7, #6]
 8009a5e:	2b09      	cmp	r3, #9
 8009a60:	d95f      	bls.n	8009b22 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009a62:	2309      	movs	r3, #9
 8009a64:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a6a:	e051      	b.n	8009b10 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009a6c:	f107 0316 	add.w	r3, r7, #22
 8009a70:	4619      	mov	r1, r3
 8009a72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a74:	f000 f8e8 	bl	8009c48 <USBH_GetNextDesc>
 8009a78:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7c:	785b      	ldrb	r3, [r3, #1]
 8009a7e:	2b04      	cmp	r3, #4
 8009a80:	d146      	bne.n	8009b10 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009a82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a86:	221a      	movs	r2, #26
 8009a88:	fb02 f303 	mul.w	r3, r2, r3
 8009a8c:	3308      	adds	r3, #8
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	4413      	add	r3, r2
 8009a92:	3302      	adds	r3, #2
 8009a94:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009a96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a98:	69f8      	ldr	r0, [r7, #28]
 8009a9a:	f000 f846 	bl	8009b2a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009aa8:	e022      	b.n	8009af0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009aaa:	f107 0316 	add.w	r3, r7, #22
 8009aae:	4619      	mov	r1, r3
 8009ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ab2:	f000 f8c9 	bl	8009c48 <USBH_GetNextDesc>
 8009ab6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	785b      	ldrb	r3, [r3, #1]
 8009abc:	2b05      	cmp	r3, #5
 8009abe:	d117      	bne.n	8009af0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ac4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009ac8:	3201      	adds	r2, #1
 8009aca:	00d2      	lsls	r2, r2, #3
 8009acc:	211a      	movs	r1, #26
 8009ace:	fb01 f303 	mul.w	r3, r1, r3
 8009ad2:	4413      	add	r3, r2
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	4413      	add	r3, r2
 8009ada:	3304      	adds	r3, #4
 8009adc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009ade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ae0:	69b8      	ldr	r0, [r7, #24]
 8009ae2:	f000 f851 	bl	8009b88 <USBH_ParseEPDesc>
            ep_ix++;
 8009ae6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009aea:	3301      	adds	r3, #1
 8009aec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	791b      	ldrb	r3, [r3, #4]
 8009af4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d204      	bcs.n	8009b06 <USBH_ParseCfgDesc+0x120>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	885a      	ldrh	r2, [r3, #2]
 8009b00:	8afb      	ldrh	r3, [r7, #22]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d8d1      	bhi.n	8009aaa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009b06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009b10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d804      	bhi.n	8009b22 <USBH_ParseCfgDesc+0x13c>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	885a      	ldrh	r2, [r3, #2]
 8009b1c:	8afb      	ldrh	r3, [r7, #22]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d8a4      	bhi.n	8009a6c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009b22:	bf00      	nop
 8009b24:	3728      	adds	r7, #40	; 0x28
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b083      	sub	sp, #12
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	781a      	ldrb	r2, [r3, #0]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	785a      	ldrb	r2, [r3, #1]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	789a      	ldrb	r2, [r3, #2]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	78da      	ldrb	r2, [r3, #3]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	791a      	ldrb	r2, [r3, #4]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	795a      	ldrb	r2, [r3, #5]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	799a      	ldrb	r2, [r3, #6]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	79da      	ldrb	r2, [r3, #7]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	7a1a      	ldrb	r2, [r3, #8]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	721a      	strb	r2, [r3, #8]
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	781a      	ldrb	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	785a      	ldrb	r2, [r3, #1]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	789a      	ldrb	r2, [r3, #2]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	78da      	ldrb	r2, [r3, #3]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	3305      	adds	r3, #5
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	021b      	lsls	r3, r3, #8
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	799a      	ldrb	r2, [r3, #6]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	719a      	strb	r2, [r3, #6]
}
 8009bd6:	bf00      	nop
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr

08009be2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009be2:	b480      	push	{r7}
 8009be4:	b087      	sub	sp, #28
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	60f8      	str	r0, [r7, #12]
 8009bea:	60b9      	str	r1, [r7, #8]
 8009bec:	4613      	mov	r3, r2
 8009bee:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	2b03      	cmp	r3, #3
 8009bf8:	d120      	bne.n	8009c3c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	1e9a      	subs	r2, r3, #2
 8009c00:	88fb      	ldrh	r3, [r7, #6]
 8009c02:	4293      	cmp	r3, r2
 8009c04:	bf28      	it	cs
 8009c06:	4613      	movcs	r3, r2
 8009c08:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3302      	adds	r3, #2
 8009c0e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009c10:	2300      	movs	r3, #0
 8009c12:	82fb      	strh	r3, [r7, #22]
 8009c14:	e00b      	b.n	8009c2e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009c16:	8afb      	ldrh	r3, [r7, #22]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	781a      	ldrb	r2, [r3, #0]
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	3301      	adds	r3, #1
 8009c26:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009c28:	8afb      	ldrh	r3, [r7, #22]
 8009c2a:	3302      	adds	r3, #2
 8009c2c:	82fb      	strh	r3, [r7, #22]
 8009c2e:	8afa      	ldrh	r2, [r7, #22]
 8009c30:	8abb      	ldrh	r3, [r7, #20]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d3ef      	bcc.n	8009c16 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	701a      	strb	r2, [r3, #0]
  }
}
 8009c3c:	bf00      	nop
 8009c3e:	371c      	adds	r7, #28
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	881a      	ldrh	r2, [r3, #0]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	4413      	add	r3, r2
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c70:	68fb      	ldr	r3, [r7, #12]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3714      	adds	r7, #20
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr

08009c7e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b086      	sub	sp, #24
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	60f8      	str	r0, [r7, #12]
 8009c86:	60b9      	str	r1, [r7, #8]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	789b      	ldrb	r3, [r3, #2]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d002      	beq.n	8009c9e <USBH_CtlReq+0x20>
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d00f      	beq.n	8009cbc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009c9c:	e027      	b.n	8009cee <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	88fa      	ldrh	r2, [r7, #6]
 8009ca8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2201      	movs	r2, #1
 8009cae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8009cba:	e018      	b.n	8009cee <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f000 f81b 	bl	8009cf8 <USBH_HandleControl>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009cc6:	7dfb      	ldrb	r3, [r7, #23]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <USBH_CtlReq+0x54>
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	d106      	bne.n	8009ce0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	761a      	strb	r2, [r3, #24]
      break;
 8009cde:	e005      	b.n	8009cec <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009ce0:	7dfb      	ldrb	r3, [r7, #23]
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d102      	bne.n	8009cec <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	709a      	strb	r2, [r3, #2]
      break;
 8009cec:	bf00      	nop
  }
  return status;
 8009cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af02      	add	r7, sp, #8
 8009cfe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d00:	2301      	movs	r3, #1
 8009d02:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d04:	2300      	movs	r3, #0
 8009d06:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	7e1b      	ldrb	r3, [r3, #24]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	2b0a      	cmp	r3, #10
 8009d10:	f200 8156 	bhi.w	8009fc0 <USBH_HandleControl+0x2c8>
 8009d14:	a201      	add	r2, pc, #4	; (adr r2, 8009d1c <USBH_HandleControl+0x24>)
 8009d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1a:	bf00      	nop
 8009d1c:	08009d49 	.word	0x08009d49
 8009d20:	08009d63 	.word	0x08009d63
 8009d24:	08009dcd 	.word	0x08009dcd
 8009d28:	08009df3 	.word	0x08009df3
 8009d2c:	08009e2b 	.word	0x08009e2b
 8009d30:	08009e55 	.word	0x08009e55
 8009d34:	08009ea7 	.word	0x08009ea7
 8009d38:	08009ec9 	.word	0x08009ec9
 8009d3c:	08009f05 	.word	0x08009f05
 8009d40:	08009f2b 	.word	0x08009f2b
 8009d44:	08009f69 	.word	0x08009f69
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f103 0110 	add.w	r1, r3, #16
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	795b      	ldrb	r3, [r3, #5]
 8009d52:	461a      	mov	r2, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f943 	bl	8009fe0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	761a      	strb	r2, [r3, #24]
      break;
 8009d60:	e139      	b.n	8009fd6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	795b      	ldrb	r3, [r3, #5]
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fcc5 	bl	800a6f8 <USBH_LL_GetURBState>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d11e      	bne.n	8009db6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	7c1b      	ldrb	r3, [r3, #16]
 8009d7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d80:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	8adb      	ldrh	r3, [r3, #22]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00a      	beq.n	8009da0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009d8a:	7b7b      	ldrb	r3, [r7, #13]
 8009d8c:	2b80      	cmp	r3, #128	; 0x80
 8009d8e:	d103      	bne.n	8009d98 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2203      	movs	r2, #3
 8009d94:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009d96:	e115      	b.n	8009fc4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2205      	movs	r2, #5
 8009d9c:	761a      	strb	r2, [r3, #24]
      break;
 8009d9e:	e111      	b.n	8009fc4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009da0:	7b7b      	ldrb	r3, [r7, #13]
 8009da2:	2b80      	cmp	r3, #128	; 0x80
 8009da4:	d103      	bne.n	8009dae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2209      	movs	r2, #9
 8009daa:	761a      	strb	r2, [r3, #24]
      break;
 8009dac:	e10a      	b.n	8009fc4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2207      	movs	r2, #7
 8009db2:	761a      	strb	r2, [r3, #24]
      break;
 8009db4:	e106      	b.n	8009fc4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009db6:	7bbb      	ldrb	r3, [r7, #14]
 8009db8:	2b04      	cmp	r3, #4
 8009dba:	d003      	beq.n	8009dc4 <USBH_HandleControl+0xcc>
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	f040 8100 	bne.w	8009fc4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	220b      	movs	r2, #11
 8009dc8:	761a      	strb	r2, [r3, #24]
      break;
 8009dca:	e0fb      	b.n	8009fc4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6899      	ldr	r1, [r3, #8]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	899a      	ldrh	r2, [r3, #12]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	791b      	ldrb	r3, [r3, #4]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f93a 	bl	800a05e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2204      	movs	r2, #4
 8009dee:	761a      	strb	r2, [r3, #24]
      break;
 8009df0:	e0f1      	b.n	8009fd6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	791b      	ldrb	r3, [r3, #4]
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fc7d 	bl	800a6f8 <USBH_LL_GetURBState>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d102      	bne.n	8009e0e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2209      	movs	r2, #9
 8009e0c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009e0e:	7bbb      	ldrb	r3, [r7, #14]
 8009e10:	2b05      	cmp	r3, #5
 8009e12:	d102      	bne.n	8009e1a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009e14:	2303      	movs	r3, #3
 8009e16:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009e18:	e0d6      	b.n	8009fc8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009e1a:	7bbb      	ldrb	r3, [r7, #14]
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	f040 80d3 	bne.w	8009fc8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	220b      	movs	r2, #11
 8009e26:	761a      	strb	r2, [r3, #24]
      break;
 8009e28:	e0ce      	b.n	8009fc8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6899      	ldr	r1, [r3, #8]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	899a      	ldrh	r2, [r3, #12]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	795b      	ldrb	r3, [r3, #5]
 8009e36:	2001      	movs	r0, #1
 8009e38:	9000      	str	r0, [sp, #0]
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f8ea 	bl	800a014 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2206      	movs	r2, #6
 8009e50:	761a      	strb	r2, [r3, #24]
      break;
 8009e52:	e0c0      	b.n	8009fd6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	795b      	ldrb	r3, [r3, #5]
 8009e58:	4619      	mov	r1, r3
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fc4c 	bl	800a6f8 <USBH_LL_GetURBState>
 8009e60:	4603      	mov	r3, r0
 8009e62:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d103      	bne.n	8009e72 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2207      	movs	r2, #7
 8009e6e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009e70:	e0ac      	b.n	8009fcc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
 8009e74:	2b05      	cmp	r3, #5
 8009e76:	d105      	bne.n	8009e84 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	220c      	movs	r2, #12
 8009e7c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	73fb      	strb	r3, [r7, #15]
      break;
 8009e82:	e0a3      	b.n	8009fcc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009e84:	7bbb      	ldrb	r3, [r7, #14]
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d103      	bne.n	8009e92 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2205      	movs	r2, #5
 8009e8e:	761a      	strb	r2, [r3, #24]
      break;
 8009e90:	e09c      	b.n	8009fcc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009e92:	7bbb      	ldrb	r3, [r7, #14]
 8009e94:	2b04      	cmp	r3, #4
 8009e96:	f040 8099 	bne.w	8009fcc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	220b      	movs	r2, #11
 8009e9e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea4:	e092      	b.n	8009fcc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	791b      	ldrb	r3, [r3, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	2100      	movs	r1, #0
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f8d5 	bl	800a05e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2208      	movs	r2, #8
 8009ec4:	761a      	strb	r2, [r3, #24]

      break;
 8009ec6:	e086      	b.n	8009fd6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	791b      	ldrb	r3, [r3, #4]
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fc12 	bl	800a6f8 <USBH_LL_GetURBState>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009ed8:	7bbb      	ldrb	r3, [r7, #14]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d105      	bne.n	8009eea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	220d      	movs	r2, #13
 8009ee2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009ee8:	e072      	b.n	8009fd0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009eea:	7bbb      	ldrb	r3, [r7, #14]
 8009eec:	2b04      	cmp	r3, #4
 8009eee:	d103      	bne.n	8009ef8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	220b      	movs	r2, #11
 8009ef4:	761a      	strb	r2, [r3, #24]
      break;
 8009ef6:	e06b      	b.n	8009fd0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009ef8:	7bbb      	ldrb	r3, [r7, #14]
 8009efa:	2b05      	cmp	r3, #5
 8009efc:	d168      	bne.n	8009fd0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009efe:	2303      	movs	r3, #3
 8009f00:	73fb      	strb	r3, [r7, #15]
      break;
 8009f02:	e065      	b.n	8009fd0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	795b      	ldrb	r3, [r3, #5]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	9200      	str	r2, [sp, #0]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	2100      	movs	r1, #0
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f87f 	bl	800a014 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f1c:	b29a      	uxth	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	220a      	movs	r2, #10
 8009f26:	761a      	strb	r2, [r3, #24]
      break;
 8009f28:	e055      	b.n	8009fd6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	795b      	ldrb	r3, [r3, #5]
 8009f2e:	4619      	mov	r1, r3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fbe1 	bl	800a6f8 <USBH_LL_GetURBState>
 8009f36:	4603      	mov	r3, r0
 8009f38:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009f3a:	7bbb      	ldrb	r3, [r7, #14]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d105      	bne.n	8009f4c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	220d      	movs	r2, #13
 8009f48:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009f4a:	e043      	b.n	8009fd4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d103      	bne.n	8009f5a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2209      	movs	r2, #9
 8009f56:	761a      	strb	r2, [r3, #24]
      break;
 8009f58:	e03c      	b.n	8009fd4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009f5a:	7bbb      	ldrb	r3, [r7, #14]
 8009f5c:	2b04      	cmp	r3, #4
 8009f5e:	d139      	bne.n	8009fd4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	220b      	movs	r2, #11
 8009f64:	761a      	strb	r2, [r3, #24]
      break;
 8009f66:	e035      	b.n	8009fd4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	7e5b      	ldrb	r3, [r3, #25]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	b2da      	uxtb	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	765a      	strb	r2, [r3, #25]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	7e5b      	ldrb	r3, [r3, #25]
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d806      	bhi.n	8009f8a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2201      	movs	r2, #1
 8009f86:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009f88:	e025      	b.n	8009fd6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f90:	2106      	movs	r1, #6
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	795b      	ldrb	r3, [r3, #5]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f90c 	bl	800a1c0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	791b      	ldrb	r3, [r3, #4]
 8009fac:	4619      	mov	r1, r3
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f906 	bl	800a1c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009fba:	2302      	movs	r3, #2
 8009fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8009fbe:	e00a      	b.n	8009fd6 <USBH_HandleControl+0x2de>

    default:
      break;
 8009fc0:	bf00      	nop
 8009fc2:	e008      	b.n	8009fd6 <USBH_HandleControl+0x2de>
      break;
 8009fc4:	bf00      	nop
 8009fc6:	e006      	b.n	8009fd6 <USBH_HandleControl+0x2de>
      break;
 8009fc8:	bf00      	nop
 8009fca:	e004      	b.n	8009fd6 <USBH_HandleControl+0x2de>
      break;
 8009fcc:	bf00      	nop
 8009fce:	e002      	b.n	8009fd6 <USBH_HandleControl+0x2de>
      break;
 8009fd0:	bf00      	nop
 8009fd2:	e000      	b.n	8009fd6 <USBH_HandleControl+0x2de>
      break;
 8009fd4:	bf00      	nop
  }

  return status;
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b088      	sub	sp, #32
 8009fe4:	af04      	add	r7, sp, #16
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	4613      	mov	r3, r2
 8009fec:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009fee:	79f9      	ldrb	r1, [r7, #7]
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	9303      	str	r3, [sp, #12]
 8009ff4:	2308      	movs	r3, #8
 8009ff6:	9302      	str	r3, [sp, #8]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	9301      	str	r3, [sp, #4]
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	2300      	movs	r3, #0
 800a002:	2200      	movs	r2, #0
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f000 fb46 	bl	800a696 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b088      	sub	sp, #32
 800a018:	af04      	add	r7, sp, #16
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	4611      	mov	r1, r2
 800a020:	461a      	mov	r2, r3
 800a022:	460b      	mov	r3, r1
 800a024:	80fb      	strh	r3, [r7, #6]
 800a026:	4613      	mov	r3, r2
 800a028:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a034:	2300      	movs	r3, #0
 800a036:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a038:	7979      	ldrb	r1, [r7, #5]
 800a03a:	7e3b      	ldrb	r3, [r7, #24]
 800a03c:	9303      	str	r3, [sp, #12]
 800a03e:	88fb      	ldrh	r3, [r7, #6]
 800a040:	9302      	str	r3, [sp, #8]
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	9301      	str	r3, [sp, #4]
 800a046:	2301      	movs	r3, #1
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	2300      	movs	r3, #0
 800a04c:	2200      	movs	r2, #0
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f000 fb21 	bl	800a696 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b088      	sub	sp, #32
 800a062:	af04      	add	r7, sp, #16
 800a064:	60f8      	str	r0, [r7, #12]
 800a066:	60b9      	str	r1, [r7, #8]
 800a068:	4611      	mov	r1, r2
 800a06a:	461a      	mov	r2, r3
 800a06c:	460b      	mov	r3, r1
 800a06e:	80fb      	strh	r3, [r7, #6]
 800a070:	4613      	mov	r3, r2
 800a072:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a074:	7979      	ldrb	r1, [r7, #5]
 800a076:	2300      	movs	r3, #0
 800a078:	9303      	str	r3, [sp, #12]
 800a07a:	88fb      	ldrh	r3, [r7, #6]
 800a07c:	9302      	str	r3, [sp, #8]
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	9301      	str	r3, [sp, #4]
 800a082:	2301      	movs	r3, #1
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	2300      	movs	r3, #0
 800a088:	2201      	movs	r2, #1
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 fb03 	bl	800a696 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a090:	2300      	movs	r3, #0

}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b088      	sub	sp, #32
 800a09e:	af04      	add	r7, sp, #16
 800a0a0:	60f8      	str	r0, [r7, #12]
 800a0a2:	60b9      	str	r1, [r7, #8]
 800a0a4:	4611      	mov	r1, r2
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	80fb      	strh	r3, [r7, #6]
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d001      	beq.n	800a0be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a0be:	7979      	ldrb	r1, [r7, #5]
 800a0c0:	7e3b      	ldrb	r3, [r7, #24]
 800a0c2:	9303      	str	r3, [sp, #12]
 800a0c4:	88fb      	ldrh	r3, [r7, #6]
 800a0c6:	9302      	str	r3, [sp, #8]
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	9301      	str	r3, [sp, #4]
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 fade 	bl	800a696 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b088      	sub	sp, #32
 800a0e8:	af04      	add	r7, sp, #16
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	4611      	mov	r1, r2
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	80fb      	strh	r3, [r7, #6]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a0fa:	7979      	ldrb	r1, [r7, #5]
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	9303      	str	r3, [sp, #12]
 800a100:	88fb      	ldrh	r3, [r7, #6]
 800a102:	9302      	str	r3, [sp, #8]
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	9301      	str	r3, [sp, #4]
 800a108:	2301      	movs	r3, #1
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	2302      	movs	r3, #2
 800a10e:	2201      	movs	r2, #1
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f000 fac0 	bl	800a696 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af04      	add	r7, sp, #16
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	4608      	mov	r0, r1
 800a12a:	4611      	mov	r1, r2
 800a12c:	461a      	mov	r2, r3
 800a12e:	4603      	mov	r3, r0
 800a130:	70fb      	strb	r3, [r7, #3]
 800a132:	460b      	mov	r3, r1
 800a134:	70bb      	strb	r3, [r7, #2]
 800a136:	4613      	mov	r3, r2
 800a138:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a13a:	7878      	ldrb	r0, [r7, #1]
 800a13c:	78ba      	ldrb	r2, [r7, #2]
 800a13e:	78f9      	ldrb	r1, [r7, #3]
 800a140:	8b3b      	ldrh	r3, [r7, #24]
 800a142:	9302      	str	r3, [sp, #8]
 800a144:	7d3b      	ldrb	r3, [r7, #20]
 800a146:	9301      	str	r3, [sp, #4]
 800a148:	7c3b      	ldrb	r3, [r7, #16]
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	4603      	mov	r3, r0
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fa53 	bl	800a5fa <USBH_LL_OpenPipe>

  return USBH_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b082      	sub	sp, #8
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	460b      	mov	r3, r1
 800a168:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a16a:	78fb      	ldrb	r3, [r7, #3]
 800a16c:	4619      	mov	r1, r3
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fa72 	bl	800a658 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b084      	sub	sp, #16
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	460b      	mov	r3, r1
 800a188:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f836 	bl	800a1fc <USBH_GetFreePipe>
 800a190:	4603      	mov	r3, r0
 800a192:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a194:	89fb      	ldrh	r3, [r7, #14]
 800a196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d00a      	beq.n	800a1b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a19e:	78fa      	ldrb	r2, [r7, #3]
 800a1a0:	89fb      	ldrh	r3, [r7, #14]
 800a1a2:	f003 030f 	and.w	r3, r3, #15
 800a1a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1aa:	6879      	ldr	r1, [r7, #4]
 800a1ac:	33e0      	adds	r3, #224	; 0xe0
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	440b      	add	r3, r1
 800a1b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a1b4:	89fb      	ldrh	r3, [r7, #14]
 800a1b6:	b2db      	uxtb	r3, r3
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a1cc:	78fb      	ldrb	r3, [r7, #3]
 800a1ce:	2b0a      	cmp	r3, #10
 800a1d0:	d80d      	bhi.n	800a1ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a1d2:	78fb      	ldrb	r3, [r7, #3]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	33e0      	adds	r3, #224	; 0xe0
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4413      	add	r3, r2
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	78fb      	ldrb	r3, [r7, #3]
 800a1e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a1e4:	6879      	ldr	r1, [r7, #4]
 800a1e6:	33e0      	adds	r3, #224	; 0xe0
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	440b      	add	r3, r1
 800a1ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a204:	2300      	movs	r3, #0
 800a206:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]
 800a20c:	e00f      	b.n	800a22e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	33e0      	adds	r3, #224	; 0xe0
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d102      	bne.n	800a228 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a222:	7bfb      	ldrb	r3, [r7, #15]
 800a224:	b29b      	uxth	r3, r3
 800a226:	e007      	b.n	800a238 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a228:	7bfb      	ldrb	r3, [r7, #15]
 800a22a:	3301      	adds	r3, #1
 800a22c:	73fb      	strb	r3, [r7, #15]
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
 800a230:	2b0a      	cmp	r3, #10
 800a232:	d9ec      	bls.n	800a20e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a234:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a248:	2201      	movs	r2, #1
 800a24a:	490e      	ldr	r1, [pc, #56]	; (800a284 <MX_USB_HOST_Init+0x40>)
 800a24c:	480e      	ldr	r0, [pc, #56]	; (800a288 <MX_USB_HOST_Init+0x44>)
 800a24e:	f7fe fca1 	bl	8008b94 <USBH_Init>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d001      	beq.n	800a25c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a258:	f7f6 ffa8 	bl	80011ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a25c:	490b      	ldr	r1, [pc, #44]	; (800a28c <MX_USB_HOST_Init+0x48>)
 800a25e:	480a      	ldr	r0, [pc, #40]	; (800a288 <MX_USB_HOST_Init+0x44>)
 800a260:	f7fe fd26 	bl	8008cb0 <USBH_RegisterClass>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d001      	beq.n	800a26e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a26a:	f7f6 ff9f 	bl	80011ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a26e:	4806      	ldr	r0, [pc, #24]	; (800a288 <MX_USB_HOST_Init+0x44>)
 800a270:	f7fe fdaa 	bl	8008dc8 <USBH_Start>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a27a:	f7f6 ff97 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a27e:	bf00      	nop
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	0800a2a5 	.word	0x0800a2a5
 800a288:	2000037c 	.word	0x2000037c
 800a28c:	20000014 	.word	0x20000014

0800a290 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a294:	4802      	ldr	r0, [pc, #8]	; (800a2a0 <MX_USB_HOST_Process+0x10>)
 800a296:	f7fe fda7 	bl	8008de8 <USBH_Process>
}
 800a29a:	bf00      	nop
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	2000037c 	.word	0x2000037c

0800a2a4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a2b0:	78fb      	ldrb	r3, [r7, #3]
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	2b04      	cmp	r3, #4
 800a2b6:	d819      	bhi.n	800a2ec <USBH_UserProcess+0x48>
 800a2b8:	a201      	add	r2, pc, #4	; (adr r2, 800a2c0 <USBH_UserProcess+0x1c>)
 800a2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2be:	bf00      	nop
 800a2c0:	0800a2ed 	.word	0x0800a2ed
 800a2c4:	0800a2dd 	.word	0x0800a2dd
 800a2c8:	0800a2ed 	.word	0x0800a2ed
 800a2cc:	0800a2e5 	.word	0x0800a2e5
 800a2d0:	0800a2d5 	.word	0x0800a2d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a2d4:	4b09      	ldr	r3, [pc, #36]	; (800a2fc <USBH_UserProcess+0x58>)
 800a2d6:	2203      	movs	r2, #3
 800a2d8:	701a      	strb	r2, [r3, #0]
  break;
 800a2da:	e008      	b.n	800a2ee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a2dc:	4b07      	ldr	r3, [pc, #28]	; (800a2fc <USBH_UserProcess+0x58>)
 800a2de:	2202      	movs	r2, #2
 800a2e0:	701a      	strb	r2, [r3, #0]
  break;
 800a2e2:	e004      	b.n	800a2ee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a2e4:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <USBH_UserProcess+0x58>)
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	701a      	strb	r2, [r3, #0]
  break;
 800a2ea:	e000      	b.n	800a2ee <USBH_UserProcess+0x4a>

  default:
  break;
 800a2ec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a2ee:	bf00      	nop
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	200000bc 	.word	0x200000bc

0800a300 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b08a      	sub	sp, #40	; 0x28
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a308:	f107 0314 	add.w	r3, r7, #20
 800a30c:	2200      	movs	r2, #0
 800a30e:	601a      	str	r2, [r3, #0]
 800a310:	605a      	str	r2, [r3, #4]
 800a312:	609a      	str	r2, [r3, #8]
 800a314:	60da      	str	r2, [r3, #12]
 800a316:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a320:	d147      	bne.n	800a3b2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a322:	2300      	movs	r3, #0
 800a324:	613b      	str	r3, [r7, #16]
 800a326:	4b25      	ldr	r3, [pc, #148]	; (800a3bc <HAL_HCD_MspInit+0xbc>)
 800a328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32a:	4a24      	ldr	r2, [pc, #144]	; (800a3bc <HAL_HCD_MspInit+0xbc>)
 800a32c:	f043 0301 	orr.w	r3, r3, #1
 800a330:	6313      	str	r3, [r2, #48]	; 0x30
 800a332:	4b22      	ldr	r3, [pc, #136]	; (800a3bc <HAL_HCD_MspInit+0xbc>)
 800a334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	613b      	str	r3, [r7, #16]
 800a33c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a33e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a344:	2300      	movs	r3, #0
 800a346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a348:	2300      	movs	r3, #0
 800a34a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a34c:	f107 0314 	add.w	r3, r7, #20
 800a350:	4619      	mov	r1, r3
 800a352:	481b      	ldr	r0, [pc, #108]	; (800a3c0 <HAL_HCD_MspInit+0xc0>)
 800a354:	f7f8 f9fe 	bl	8002754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a358:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a35c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a35e:	2302      	movs	r3, #2
 800a360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a362:	2300      	movs	r3, #0
 800a364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a366:	2300      	movs	r3, #0
 800a368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a36a:	230a      	movs	r3, #10
 800a36c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a36e:	f107 0314 	add.w	r3, r7, #20
 800a372:	4619      	mov	r1, r3
 800a374:	4812      	ldr	r0, [pc, #72]	; (800a3c0 <HAL_HCD_MspInit+0xc0>)
 800a376:	f7f8 f9ed 	bl	8002754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a37a:	4b10      	ldr	r3, [pc, #64]	; (800a3bc <HAL_HCD_MspInit+0xbc>)
 800a37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a37e:	4a0f      	ldr	r2, [pc, #60]	; (800a3bc <HAL_HCD_MspInit+0xbc>)
 800a380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a384:	6353      	str	r3, [r2, #52]	; 0x34
 800a386:	2300      	movs	r3, #0
 800a388:	60fb      	str	r3, [r7, #12]
 800a38a:	4b0c      	ldr	r3, [pc, #48]	; (800a3bc <HAL_HCD_MspInit+0xbc>)
 800a38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a38e:	4a0b      	ldr	r2, [pc, #44]	; (800a3bc <HAL_HCD_MspInit+0xbc>)
 800a390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a394:	6453      	str	r3, [r2, #68]	; 0x44
 800a396:	4b09      	ldr	r3, [pc, #36]	; (800a3bc <HAL_HCD_MspInit+0xbc>)
 800a398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a39a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	2043      	movs	r0, #67	; 0x43
 800a3a8:	f7f8 f99d 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a3ac:	2043      	movs	r0, #67	; 0x43
 800a3ae:	f7f8 f9b6 	bl	800271e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a3b2:	bf00      	nop
 800a3b4:	3728      	adds	r7, #40	; 0x28
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	40023800 	.word	0x40023800
 800a3c0:	40020000 	.word	0x40020000

0800a3c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7ff f8db 	bl	800958e <USBH_LL_IncTimer>
}
 800a3d8:	bf00      	nop
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7ff f913 	bl	800961a <USBH_LL_Connect>
}
 800a3f4:	bf00      	nop
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff f91c 	bl	8009648 <USBH_LL_Disconnect>
}
 800a410:	bf00      	nop
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	460b      	mov	r3, r1
 800a422:	70fb      	strb	r3, [r7, #3]
 800a424:	4613      	mov	r3, r2
 800a426:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a428:	bf00      	nop
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a442:	4618      	mov	r0, r3
 800a444:	f7ff f8cd 	bl	80095e2 <USBH_LL_PortEnabled>
}
 800a448:	bf00      	nop
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a45e:	4618      	mov	r0, r3
 800a460:	f7ff f8cd 	bl	80095fe <USBH_LL_PortDisabled>
}
 800a464:	bf00      	nop
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d12a      	bne.n	800a4d4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a47e:	4a18      	ldr	r2, [pc, #96]	; (800a4e0 <USBH_LL_Init+0x74>)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a15      	ldr	r2, [pc, #84]	; (800a4e0 <USBH_LL_Init+0x74>)
 800a48a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a48e:	4b14      	ldr	r3, [pc, #80]	; (800a4e0 <USBH_LL_Init+0x74>)
 800a490:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a494:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a496:	4b12      	ldr	r3, [pc, #72]	; (800a4e0 <USBH_LL_Init+0x74>)
 800a498:	2208      	movs	r2, #8
 800a49a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a49c:	4b10      	ldr	r3, [pc, #64]	; (800a4e0 <USBH_LL_Init+0x74>)
 800a49e:	2201      	movs	r2, #1
 800a4a0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a4a2:	4b0f      	ldr	r3, [pc, #60]	; (800a4e0 <USBH_LL_Init+0x74>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a4a8:	4b0d      	ldr	r3, [pc, #52]	; (800a4e0 <USBH_LL_Init+0x74>)
 800a4aa:	2202      	movs	r2, #2
 800a4ac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4ae:	4b0c      	ldr	r3, [pc, #48]	; (800a4e0 <USBH_LL_Init+0x74>)
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a4b4:	480a      	ldr	r0, [pc, #40]	; (800a4e0 <USBH_LL_Init+0x74>)
 800a4b6:	f7f8 fb34 	bl	8002b22 <HAL_HCD_Init>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a4c0:	f7f6 fe74 	bl	80011ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a4c4:	4806      	ldr	r0, [pc, #24]	; (800a4e0 <USBH_LL_Init+0x74>)
 800a4c6:	f7f8 ff11 	bl	80032ec <HAL_HCD_GetCurrentFrame>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f7ff f84e 	bl	8009570 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20000754 	.word	0x20000754

0800a4e4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7f8 fe80 	bl	8003200 <HAL_HCD_Start>
 800a500:	4603      	mov	r3, r0
 800a502:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a504:	7bfb      	ldrb	r3, [r7, #15]
 800a506:	4618      	mov	r0, r3
 800a508:	f000 f95c 	bl	800a7c4 <USBH_Get_USB_Status>
 800a50c:	4603      	mov	r3, r0
 800a50e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a510:	7bbb      	ldrb	r3, [r7, #14]
}
 800a512:	4618      	mov	r0, r3
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b084      	sub	sp, #16
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a530:	4618      	mov	r0, r3
 800a532:	f7f8 fe88 	bl	8003246 <HAL_HCD_Stop>
 800a536:	4603      	mov	r3, r0
 800a538:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a53a:	7bfb      	ldrb	r3, [r7, #15]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 f941 	bl	800a7c4 <USBH_Get_USB_Status>
 800a542:	4603      	mov	r3, r0
 800a544:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a546:	7bbb      	ldrb	r3, [r7, #14]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a558:	2301      	movs	r3, #1
 800a55a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a562:	4618      	mov	r0, r3
 800a564:	f7f8 fed0 	bl	8003308 <HAL_HCD_GetCurrentSpeed>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d00c      	beq.n	800a588 <USBH_LL_GetSpeed+0x38>
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d80d      	bhi.n	800a58e <USBH_LL_GetSpeed+0x3e>
 800a572:	2b00      	cmp	r3, #0
 800a574:	d002      	beq.n	800a57c <USBH_LL_GetSpeed+0x2c>
 800a576:	2b01      	cmp	r3, #1
 800a578:	d003      	beq.n	800a582 <USBH_LL_GetSpeed+0x32>
 800a57a:	e008      	b.n	800a58e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a57c:	2300      	movs	r3, #0
 800a57e:	73fb      	strb	r3, [r7, #15]
    break;
 800a580:	e008      	b.n	800a594 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a582:	2301      	movs	r3, #1
 800a584:	73fb      	strb	r3, [r7, #15]
    break;
 800a586:	e005      	b.n	800a594 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a588:	2302      	movs	r3, #2
 800a58a:	73fb      	strb	r3, [r7, #15]
    break;
 800a58c:	e002      	b.n	800a594 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a58e:	2301      	movs	r3, #1
 800a590:	73fb      	strb	r3, [r7, #15]
    break;
 800a592:	bf00      	nop
  }
  return  speed;
 800a594:	7bfb      	ldrb	r3, [r7, #15]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b084      	sub	sp, #16
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7f8 fe63 	bl	8003280 <HAL_HCD_ResetPort>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 f8ff 	bl	800a7c4 <USBH_Get_USB_Status>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a5e6:	78fa      	ldrb	r2, [r7, #3]
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7f8 fe6a 	bl	80032c4 <HAL_HCD_HC_GetXferCount>
 800a5f0:	4603      	mov	r3, r0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a5fa:	b590      	push	{r4, r7, lr}
 800a5fc:	b089      	sub	sp, #36	; 0x24
 800a5fe:	af04      	add	r7, sp, #16
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	4608      	mov	r0, r1
 800a604:	4611      	mov	r1, r2
 800a606:	461a      	mov	r2, r3
 800a608:	4603      	mov	r3, r0
 800a60a:	70fb      	strb	r3, [r7, #3]
 800a60c:	460b      	mov	r3, r1
 800a60e:	70bb      	strb	r3, [r7, #2]
 800a610:	4613      	mov	r3, r2
 800a612:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a622:	787c      	ldrb	r4, [r7, #1]
 800a624:	78ba      	ldrb	r2, [r7, #2]
 800a626:	78f9      	ldrb	r1, [r7, #3]
 800a628:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a62a:	9302      	str	r3, [sp, #8]
 800a62c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a630:	9301      	str	r3, [sp, #4]
 800a632:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	4623      	mov	r3, r4
 800a63a:	f7f8 fad4 	bl	8002be6 <HAL_HCD_HC_Init>
 800a63e:	4603      	mov	r3, r0
 800a640:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	4618      	mov	r0, r3
 800a646:	f000 f8bd 	bl	800a7c4 <USBH_Get_USB_Status>
 800a64a:	4603      	mov	r3, r0
 800a64c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a64e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	bd90      	pop	{r4, r7, pc}

0800a658 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a672:	78fa      	ldrb	r2, [r7, #3]
 800a674:	4611      	mov	r1, r2
 800a676:	4618      	mov	r0, r3
 800a678:	f7f8 fb44 	bl	8002d04 <HAL_HCD_HC_Halt>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a680:	7bfb      	ldrb	r3, [r7, #15]
 800a682:	4618      	mov	r0, r3
 800a684:	f000 f89e 	bl	800a7c4 <USBH_Get_USB_Status>
 800a688:	4603      	mov	r3, r0
 800a68a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a68c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a696:	b590      	push	{r4, r7, lr}
 800a698:	b089      	sub	sp, #36	; 0x24
 800a69a:	af04      	add	r7, sp, #16
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	4608      	mov	r0, r1
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	70fb      	strb	r3, [r7, #3]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	70bb      	strb	r3, [r7, #2]
 800a6ac:	4613      	mov	r3, r2
 800a6ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a6be:	787c      	ldrb	r4, [r7, #1]
 800a6c0:	78ba      	ldrb	r2, [r7, #2]
 800a6c2:	78f9      	ldrb	r1, [r7, #3]
 800a6c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a6c8:	9303      	str	r3, [sp, #12]
 800a6ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a6cc:	9302      	str	r3, [sp, #8]
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d0:	9301      	str	r3, [sp, #4]
 800a6d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6d6:	9300      	str	r3, [sp, #0]
 800a6d8:	4623      	mov	r3, r4
 800a6da:	f7f8 fb37 	bl	8002d4c <HAL_HCD_HC_SubmitRequest>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 f86d 	bl	800a7c4 <USBH_Get_USB_Status>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd90      	pop	{r4, r7, pc}

0800a6f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a70a:	78fa      	ldrb	r2, [r7, #3]
 800a70c:	4611      	mov	r1, r2
 800a70e:	4618      	mov	r0, r3
 800a710:	f7f8 fdc4 	bl	800329c <HAL_HCD_HC_GetURBState>
 800a714:	4603      	mov	r3, r0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b082      	sub	sp, #8
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	460b      	mov	r3, r1
 800a728:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a730:	2b01      	cmp	r3, #1
 800a732:	d103      	bne.n	800a73c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a734:	78fb      	ldrb	r3, [r7, #3]
 800a736:	4618      	mov	r0, r3
 800a738:	f000 f870 	bl	800a81c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a73c:	20c8      	movs	r0, #200	; 0xc8
 800a73e:	f7f7 fed3 	bl	80024e8 <HAL_Delay>
  return USBH_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	460b      	mov	r3, r1
 800a756:	70fb      	strb	r3, [r7, #3]
 800a758:	4613      	mov	r3, r2
 800a75a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a762:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a764:	78fb      	ldrb	r3, [r7, #3]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	212c      	movs	r1, #44	; 0x2c
 800a76a:	fb01 f303 	mul.w	r3, r1, r3
 800a76e:	4413      	add	r3, r2
 800a770:	333b      	adds	r3, #59	; 0x3b
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d009      	beq.n	800a78c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a778:	78fb      	ldrb	r3, [r7, #3]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	212c      	movs	r1, #44	; 0x2c
 800a77e:	fb01 f303 	mul.w	r3, r1, r3
 800a782:	4413      	add	r3, r2
 800a784:	3354      	adds	r3, #84	; 0x54
 800a786:	78ba      	ldrb	r2, [r7, #2]
 800a788:	701a      	strb	r2, [r3, #0]
 800a78a:	e008      	b.n	800a79e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a78c:	78fb      	ldrb	r3, [r7, #3]
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	212c      	movs	r1, #44	; 0x2c
 800a792:	fb01 f303 	mul.w	r3, r1, r3
 800a796:	4413      	add	r3, r2
 800a798:	3355      	adds	r3, #85	; 0x55
 800a79a:	78ba      	ldrb	r2, [r7, #2]
 800a79c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7f7 fe97 	bl	80024e8 <HAL_Delay>
}
 800a7ba:	bf00      	nop
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
	...

0800a7c4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7d2:	79fb      	ldrb	r3, [r7, #7]
 800a7d4:	2b03      	cmp	r3, #3
 800a7d6:	d817      	bhi.n	800a808 <USBH_Get_USB_Status+0x44>
 800a7d8:	a201      	add	r2, pc, #4	; (adr r2, 800a7e0 <USBH_Get_USB_Status+0x1c>)
 800a7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7de:	bf00      	nop
 800a7e0:	0800a7f1 	.word	0x0800a7f1
 800a7e4:	0800a7f7 	.word	0x0800a7f7
 800a7e8:	0800a7fd 	.word	0x0800a7fd
 800a7ec:	0800a803 	.word	0x0800a803
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7f4:	e00b      	b.n	800a80e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a7fa:	e008      	b.n	800a80e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a800:	e005      	b.n	800a80e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a802:	2302      	movs	r3, #2
 800a804:	73fb      	strb	r3, [r7, #15]
    break;
 800a806:	e002      	b.n	800a80e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a808:	2302      	movs	r3, #2
 800a80a:	73fb      	strb	r3, [r7, #15]
    break;
 800a80c:	bf00      	nop
  }
  return usb_status;
 800a80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3714      	adds	r7, #20
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a82a:	79fb      	ldrb	r3, [r7, #7]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d102      	bne.n	800a836 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a830:	2301      	movs	r3, #1
 800a832:	73fb      	strb	r3, [r7, #15]
 800a834:	e001      	b.n	800a83a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a836:	2300      	movs	r3, #0
 800a838:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a83a:	7bfb      	ldrb	r3, [r7, #15]
 800a83c:	461a      	mov	r2, r3
 800a83e:	2101      	movs	r1, #1
 800a840:	4803      	ldr	r0, [pc, #12]	; (800a850 <MX_DriverVbusFS+0x34>)
 800a842:	f7f8 f93b 	bl	8002abc <HAL_GPIO_WritePin>
}
 800a846:	bf00      	nop
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	40020800 	.word	0x40020800

0800a854 <__errno>:
 800a854:	4b01      	ldr	r3, [pc, #4]	; (800a85c <__errno+0x8>)
 800a856:	6818      	ldr	r0, [r3, #0]
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	20000034 	.word	0x20000034

0800a860 <__libc_init_array>:
 800a860:	b570      	push	{r4, r5, r6, lr}
 800a862:	4d0d      	ldr	r5, [pc, #52]	; (800a898 <__libc_init_array+0x38>)
 800a864:	4c0d      	ldr	r4, [pc, #52]	; (800a89c <__libc_init_array+0x3c>)
 800a866:	1b64      	subs	r4, r4, r5
 800a868:	10a4      	asrs	r4, r4, #2
 800a86a:	2600      	movs	r6, #0
 800a86c:	42a6      	cmp	r6, r4
 800a86e:	d109      	bne.n	800a884 <__libc_init_array+0x24>
 800a870:	4d0b      	ldr	r5, [pc, #44]	; (800a8a0 <__libc_init_array+0x40>)
 800a872:	4c0c      	ldr	r4, [pc, #48]	; (800a8a4 <__libc_init_array+0x44>)
 800a874:	f000 f8f8 	bl	800aa68 <_init>
 800a878:	1b64      	subs	r4, r4, r5
 800a87a:	10a4      	asrs	r4, r4, #2
 800a87c:	2600      	movs	r6, #0
 800a87e:	42a6      	cmp	r6, r4
 800a880:	d105      	bne.n	800a88e <__libc_init_array+0x2e>
 800a882:	bd70      	pop	{r4, r5, r6, pc}
 800a884:	f855 3b04 	ldr.w	r3, [r5], #4
 800a888:	4798      	blx	r3
 800a88a:	3601      	adds	r6, #1
 800a88c:	e7ee      	b.n	800a86c <__libc_init_array+0xc>
 800a88e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a892:	4798      	blx	r3
 800a894:	3601      	adds	r6, #1
 800a896:	e7f2      	b.n	800a87e <__libc_init_array+0x1e>
 800a898:	0800ace4 	.word	0x0800ace4
 800a89c:	0800ace4 	.word	0x0800ace4
 800a8a0:	0800ace4 	.word	0x0800ace4
 800a8a4:	0800ace8 	.word	0x0800ace8

0800a8a8 <malloc>:
 800a8a8:	4b02      	ldr	r3, [pc, #8]	; (800a8b4 <malloc+0xc>)
 800a8aa:	4601      	mov	r1, r0
 800a8ac:	6818      	ldr	r0, [r3, #0]
 800a8ae:	f000 b863 	b.w	800a978 <_malloc_r>
 800a8b2:	bf00      	nop
 800a8b4:	20000034 	.word	0x20000034

0800a8b8 <free>:
 800a8b8:	4b02      	ldr	r3, [pc, #8]	; (800a8c4 <free+0xc>)
 800a8ba:	4601      	mov	r1, r0
 800a8bc:	6818      	ldr	r0, [r3, #0]
 800a8be:	f000 b80b 	b.w	800a8d8 <_free_r>
 800a8c2:	bf00      	nop
 800a8c4:	20000034 	.word	0x20000034

0800a8c8 <memset>:
 800a8c8:	4402      	add	r2, r0
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d100      	bne.n	800a8d2 <memset+0xa>
 800a8d0:	4770      	bx	lr
 800a8d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a8d6:	e7f9      	b.n	800a8cc <memset+0x4>

0800a8d8 <_free_r>:
 800a8d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8da:	2900      	cmp	r1, #0
 800a8dc:	d048      	beq.n	800a970 <_free_r+0x98>
 800a8de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e2:	9001      	str	r0, [sp, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f1a1 0404 	sub.w	r4, r1, #4
 800a8ea:	bfb8      	it	lt
 800a8ec:	18e4      	addlt	r4, r4, r3
 800a8ee:	f000 f8ad 	bl	800aa4c <__malloc_lock>
 800a8f2:	4a20      	ldr	r2, [pc, #128]	; (800a974 <_free_r+0x9c>)
 800a8f4:	9801      	ldr	r0, [sp, #4]
 800a8f6:	6813      	ldr	r3, [r2, #0]
 800a8f8:	4615      	mov	r5, r2
 800a8fa:	b933      	cbnz	r3, 800a90a <_free_r+0x32>
 800a8fc:	6063      	str	r3, [r4, #4]
 800a8fe:	6014      	str	r4, [r2, #0]
 800a900:	b003      	add	sp, #12
 800a902:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a906:	f000 b8a7 	b.w	800aa58 <__malloc_unlock>
 800a90a:	42a3      	cmp	r3, r4
 800a90c:	d90b      	bls.n	800a926 <_free_r+0x4e>
 800a90e:	6821      	ldr	r1, [r4, #0]
 800a910:	1862      	adds	r2, r4, r1
 800a912:	4293      	cmp	r3, r2
 800a914:	bf04      	itt	eq
 800a916:	681a      	ldreq	r2, [r3, #0]
 800a918:	685b      	ldreq	r3, [r3, #4]
 800a91a:	6063      	str	r3, [r4, #4]
 800a91c:	bf04      	itt	eq
 800a91e:	1852      	addeq	r2, r2, r1
 800a920:	6022      	streq	r2, [r4, #0]
 800a922:	602c      	str	r4, [r5, #0]
 800a924:	e7ec      	b.n	800a900 <_free_r+0x28>
 800a926:	461a      	mov	r2, r3
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	b10b      	cbz	r3, 800a930 <_free_r+0x58>
 800a92c:	42a3      	cmp	r3, r4
 800a92e:	d9fa      	bls.n	800a926 <_free_r+0x4e>
 800a930:	6811      	ldr	r1, [r2, #0]
 800a932:	1855      	adds	r5, r2, r1
 800a934:	42a5      	cmp	r5, r4
 800a936:	d10b      	bne.n	800a950 <_free_r+0x78>
 800a938:	6824      	ldr	r4, [r4, #0]
 800a93a:	4421      	add	r1, r4
 800a93c:	1854      	adds	r4, r2, r1
 800a93e:	42a3      	cmp	r3, r4
 800a940:	6011      	str	r1, [r2, #0]
 800a942:	d1dd      	bne.n	800a900 <_free_r+0x28>
 800a944:	681c      	ldr	r4, [r3, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	6053      	str	r3, [r2, #4]
 800a94a:	4421      	add	r1, r4
 800a94c:	6011      	str	r1, [r2, #0]
 800a94e:	e7d7      	b.n	800a900 <_free_r+0x28>
 800a950:	d902      	bls.n	800a958 <_free_r+0x80>
 800a952:	230c      	movs	r3, #12
 800a954:	6003      	str	r3, [r0, #0]
 800a956:	e7d3      	b.n	800a900 <_free_r+0x28>
 800a958:	6825      	ldr	r5, [r4, #0]
 800a95a:	1961      	adds	r1, r4, r5
 800a95c:	428b      	cmp	r3, r1
 800a95e:	bf04      	itt	eq
 800a960:	6819      	ldreq	r1, [r3, #0]
 800a962:	685b      	ldreq	r3, [r3, #4]
 800a964:	6063      	str	r3, [r4, #4]
 800a966:	bf04      	itt	eq
 800a968:	1949      	addeq	r1, r1, r5
 800a96a:	6021      	streq	r1, [r4, #0]
 800a96c:	6054      	str	r4, [r2, #4]
 800a96e:	e7c7      	b.n	800a900 <_free_r+0x28>
 800a970:	b003      	add	sp, #12
 800a972:	bd30      	pop	{r4, r5, pc}
 800a974:	200000c0 	.word	0x200000c0

0800a978 <_malloc_r>:
 800a978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97a:	1ccd      	adds	r5, r1, #3
 800a97c:	f025 0503 	bic.w	r5, r5, #3
 800a980:	3508      	adds	r5, #8
 800a982:	2d0c      	cmp	r5, #12
 800a984:	bf38      	it	cc
 800a986:	250c      	movcc	r5, #12
 800a988:	2d00      	cmp	r5, #0
 800a98a:	4606      	mov	r6, r0
 800a98c:	db01      	blt.n	800a992 <_malloc_r+0x1a>
 800a98e:	42a9      	cmp	r1, r5
 800a990:	d903      	bls.n	800a99a <_malloc_r+0x22>
 800a992:	230c      	movs	r3, #12
 800a994:	6033      	str	r3, [r6, #0]
 800a996:	2000      	movs	r0, #0
 800a998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a99a:	f000 f857 	bl	800aa4c <__malloc_lock>
 800a99e:	4921      	ldr	r1, [pc, #132]	; (800aa24 <_malloc_r+0xac>)
 800a9a0:	680a      	ldr	r2, [r1, #0]
 800a9a2:	4614      	mov	r4, r2
 800a9a4:	b99c      	cbnz	r4, 800a9ce <_malloc_r+0x56>
 800a9a6:	4f20      	ldr	r7, [pc, #128]	; (800aa28 <_malloc_r+0xb0>)
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	b923      	cbnz	r3, 800a9b6 <_malloc_r+0x3e>
 800a9ac:	4621      	mov	r1, r4
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f000 f83c 	bl	800aa2c <_sbrk_r>
 800a9b4:	6038      	str	r0, [r7, #0]
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	f000 f837 	bl	800aa2c <_sbrk_r>
 800a9be:	1c43      	adds	r3, r0, #1
 800a9c0:	d123      	bne.n	800aa0a <_malloc_r+0x92>
 800a9c2:	230c      	movs	r3, #12
 800a9c4:	6033      	str	r3, [r6, #0]
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f000 f846 	bl	800aa58 <__malloc_unlock>
 800a9cc:	e7e3      	b.n	800a996 <_malloc_r+0x1e>
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	1b5b      	subs	r3, r3, r5
 800a9d2:	d417      	bmi.n	800aa04 <_malloc_r+0x8c>
 800a9d4:	2b0b      	cmp	r3, #11
 800a9d6:	d903      	bls.n	800a9e0 <_malloc_r+0x68>
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	441c      	add	r4, r3
 800a9dc:	6025      	str	r5, [r4, #0]
 800a9de:	e004      	b.n	800a9ea <_malloc_r+0x72>
 800a9e0:	6863      	ldr	r3, [r4, #4]
 800a9e2:	42a2      	cmp	r2, r4
 800a9e4:	bf0c      	ite	eq
 800a9e6:	600b      	streq	r3, [r1, #0]
 800a9e8:	6053      	strne	r3, [r2, #4]
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f000 f834 	bl	800aa58 <__malloc_unlock>
 800a9f0:	f104 000b 	add.w	r0, r4, #11
 800a9f4:	1d23      	adds	r3, r4, #4
 800a9f6:	f020 0007 	bic.w	r0, r0, #7
 800a9fa:	1ac2      	subs	r2, r0, r3
 800a9fc:	d0cc      	beq.n	800a998 <_malloc_r+0x20>
 800a9fe:	1a1b      	subs	r3, r3, r0
 800aa00:	50a3      	str	r3, [r4, r2]
 800aa02:	e7c9      	b.n	800a998 <_malloc_r+0x20>
 800aa04:	4622      	mov	r2, r4
 800aa06:	6864      	ldr	r4, [r4, #4]
 800aa08:	e7cc      	b.n	800a9a4 <_malloc_r+0x2c>
 800aa0a:	1cc4      	adds	r4, r0, #3
 800aa0c:	f024 0403 	bic.w	r4, r4, #3
 800aa10:	42a0      	cmp	r0, r4
 800aa12:	d0e3      	beq.n	800a9dc <_malloc_r+0x64>
 800aa14:	1a21      	subs	r1, r4, r0
 800aa16:	4630      	mov	r0, r6
 800aa18:	f000 f808 	bl	800aa2c <_sbrk_r>
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	d1dd      	bne.n	800a9dc <_malloc_r+0x64>
 800aa20:	e7cf      	b.n	800a9c2 <_malloc_r+0x4a>
 800aa22:	bf00      	nop
 800aa24:	200000c0 	.word	0x200000c0
 800aa28:	200000c4 	.word	0x200000c4

0800aa2c <_sbrk_r>:
 800aa2c:	b538      	push	{r3, r4, r5, lr}
 800aa2e:	4d06      	ldr	r5, [pc, #24]	; (800aa48 <_sbrk_r+0x1c>)
 800aa30:	2300      	movs	r3, #0
 800aa32:	4604      	mov	r4, r0
 800aa34:	4608      	mov	r0, r1
 800aa36:	602b      	str	r3, [r5, #0]
 800aa38:	f7f6 fecc 	bl	80017d4 <_sbrk>
 800aa3c:	1c43      	adds	r3, r0, #1
 800aa3e:	d102      	bne.n	800aa46 <_sbrk_r+0x1a>
 800aa40:	682b      	ldr	r3, [r5, #0]
 800aa42:	b103      	cbz	r3, 800aa46 <_sbrk_r+0x1a>
 800aa44:	6023      	str	r3, [r4, #0]
 800aa46:	bd38      	pop	{r3, r4, r5, pc}
 800aa48:	20000a58 	.word	0x20000a58

0800aa4c <__malloc_lock>:
 800aa4c:	4801      	ldr	r0, [pc, #4]	; (800aa54 <__malloc_lock+0x8>)
 800aa4e:	f000 b809 	b.w	800aa64 <__retarget_lock_acquire_recursive>
 800aa52:	bf00      	nop
 800aa54:	20000a60 	.word	0x20000a60

0800aa58 <__malloc_unlock>:
 800aa58:	4801      	ldr	r0, [pc, #4]	; (800aa60 <__malloc_unlock+0x8>)
 800aa5a:	f000 b804 	b.w	800aa66 <__retarget_lock_release_recursive>
 800aa5e:	bf00      	nop
 800aa60:	20000a60 	.word	0x20000a60

0800aa64 <__retarget_lock_acquire_recursive>:
 800aa64:	4770      	bx	lr

0800aa66 <__retarget_lock_release_recursive>:
 800aa66:	4770      	bx	lr

0800aa68 <_init>:
 800aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6a:	bf00      	nop
 800aa6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa6e:	bc08      	pop	{r3}
 800aa70:	469e      	mov	lr, r3
 800aa72:	4770      	bx	lr

0800aa74 <_fini>:
 800aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa76:	bf00      	nop
 800aa78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa7a:	bc08      	pop	{r3}
 800aa7c:	469e      	mov	lr, r3
 800aa7e:	4770      	bx	lr
