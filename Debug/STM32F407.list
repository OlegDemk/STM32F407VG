
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ddc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08008f64  08008f64  00018f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800921c  0800921c  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800921c  0800921c  0001921c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009224  08009224  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009224  08009224  00019224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009228  08009228  00019228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800922c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b4  20000098  080092c4  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  080092c4  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022615  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045c6  00000000  00000000  000426dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  00046ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c8  00000000  00000000  00048410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a03  00000000  00000000  000499d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020a61  00000000  00000000  0006f3db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3d34  00000000  00000000  0008fe3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00163b70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064e8  00000000  00000000  00163bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f4c 	.word	0x08008f4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08008f4c 	.word	0x08008f4c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ILI9341_Draw_Hollow_Circle>:
#include "5x5_font.h"
//#include "spi.h"

/*Draw hollow circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Hollow_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b089      	sub	sp, #36	; 0x24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4604      	mov	r4, r0
 80004c8:	4608      	mov	r0, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	461a      	mov	r2, r3
 80004ce:	4623      	mov	r3, r4
 80004d0:	80fb      	strh	r3, [r7, #6]
 80004d2:	4603      	mov	r3, r0
 80004d4:	80bb      	strh	r3, [r7, #4]
 80004d6:	460b      	mov	r3, r1
 80004d8:	807b      	strh	r3, [r7, #2]
 80004da:	4613      	mov	r3, r2
 80004dc:	803b      	strh	r3, [r7, #0]
	int x = Radius-1;
 80004de:	887b      	ldrh	r3, [r7, #2]
 80004e0:	3b01      	subs	r3, #1
 80004e2:	61fb      	str	r3, [r7, #28]
    int y = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
    int dx = 1;
 80004e8:	2301      	movs	r3, #1
 80004ea:	617b      	str	r3, [r7, #20]
    int dy = 1;
 80004ec:	2301      	movs	r3, #1
 80004ee:	613b      	str	r3, [r7, #16]
    int err = dx - (Radius << 1);
 80004f0:	887b      	ldrh	r3, [r7, #2]
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	697a      	ldr	r2, [r7, #20]
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	60fb      	str	r3, [r7, #12]

    while (x >= y)
 80004fa:	e08d      	b.n	8000618 <ILI9341_Draw_Hollow_Circle+0x158>
    {
        ILI9341_Draw_Pixel(X + x, Y + y, Colour);
 80004fc:	69fb      	ldr	r3, [r7, #28]
 80004fe:	b29a      	uxth	r2, r3
 8000500:	88fb      	ldrh	r3, [r7, #6]
 8000502:	4413      	add	r3, r2
 8000504:	b298      	uxth	r0, r3
 8000506:	69bb      	ldr	r3, [r7, #24]
 8000508:	b29a      	uxth	r2, r3
 800050a:	88bb      	ldrh	r3, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	b29b      	uxth	r3, r3
 8000510:	883a      	ldrh	r2, [r7, #0]
 8000512:	4619      	mov	r1, r3
 8000514:	f000 fc4a 	bl	8000dac <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y + x, Colour);
 8000518:	69bb      	ldr	r3, [r7, #24]
 800051a:	b29a      	uxth	r2, r3
 800051c:	88fb      	ldrh	r3, [r7, #6]
 800051e:	4413      	add	r3, r2
 8000520:	b298      	uxth	r0, r3
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	b29a      	uxth	r2, r3
 8000526:	88bb      	ldrh	r3, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	b29b      	uxth	r3, r3
 800052c:	883a      	ldrh	r2, [r7, #0]
 800052e:	4619      	mov	r1, r3
 8000530:	f000 fc3c 	bl	8000dac <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y + x, Colour);
 8000534:	69bb      	ldr	r3, [r7, #24]
 8000536:	b29b      	uxth	r3, r3
 8000538:	88fa      	ldrh	r2, [r7, #6]
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	b298      	uxth	r0, r3
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	b29a      	uxth	r2, r3
 8000542:	88bb      	ldrh	r3, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	b29b      	uxth	r3, r3
 8000548:	883a      	ldrh	r2, [r7, #0]
 800054a:	4619      	mov	r1, r3
 800054c:	f000 fc2e 	bl	8000dac <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y + y, Colour);
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	b29b      	uxth	r3, r3
 8000554:	88fa      	ldrh	r2, [r7, #6]
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	b298      	uxth	r0, r3
 800055a:	69bb      	ldr	r3, [r7, #24]
 800055c:	b29a      	uxth	r2, r3
 800055e:	88bb      	ldrh	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	b29b      	uxth	r3, r3
 8000564:	883a      	ldrh	r2, [r7, #0]
 8000566:	4619      	mov	r1, r3
 8000568:	f000 fc20 	bl	8000dac <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y - y, Colour);
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	b29b      	uxth	r3, r3
 8000570:	88fa      	ldrh	r2, [r7, #6]
 8000572:	1ad3      	subs	r3, r2, r3
 8000574:	b298      	uxth	r0, r3
 8000576:	69bb      	ldr	r3, [r7, #24]
 8000578:	b29b      	uxth	r3, r3
 800057a:	88ba      	ldrh	r2, [r7, #4]
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	b29b      	uxth	r3, r3
 8000580:	883a      	ldrh	r2, [r7, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	f000 fc12 	bl	8000dac <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y - x, Colour);
 8000588:	69bb      	ldr	r3, [r7, #24]
 800058a:	b29b      	uxth	r3, r3
 800058c:	88fa      	ldrh	r2, [r7, #6]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	b298      	uxth	r0, r3
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	b29b      	uxth	r3, r3
 8000596:	88ba      	ldrh	r2, [r7, #4]
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	b29b      	uxth	r3, r3
 800059c:	883a      	ldrh	r2, [r7, #0]
 800059e:	4619      	mov	r1, r3
 80005a0:	f000 fc04 	bl	8000dac <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y - x, Colour);
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	4413      	add	r3, r2
 80005ac:	b298      	uxth	r0, r3
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	88ba      	ldrh	r2, [r7, #4]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	883a      	ldrh	r2, [r7, #0]
 80005ba:	4619      	mov	r1, r3
 80005bc:	f000 fbf6 	bl	8000dac <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + x, Y - y, Colour);
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	88fb      	ldrh	r3, [r7, #6]
 80005c6:	4413      	add	r3, r2
 80005c8:	b298      	uxth	r0, r3
 80005ca:	69bb      	ldr	r3, [r7, #24]
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	88ba      	ldrh	r2, [r7, #4]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	883a      	ldrh	r2, [r7, #0]
 80005d6:	4619      	mov	r1, r3
 80005d8:	f000 fbe8 	bl	8000dac <ILI9341_Draw_Pixel>

        if (err <= 0)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	dc09      	bgt.n	80005f6 <ILI9341_Draw_Hollow_Circle+0x136>
        {
            y++;
 80005e2:	69bb      	ldr	r3, [r7, #24]
 80005e4:	3301      	adds	r3, #1
 80005e6:	61bb      	str	r3, [r7, #24]
            err += dy;
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	4413      	add	r3, r2
 80005ee:	60fb      	str	r3, [r7, #12]
            dy += 2;
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	3302      	adds	r3, #2
 80005f4:	613b      	str	r3, [r7, #16]
        }
        if (err > 0)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	dd0d      	ble.n	8000618 <ILI9341_Draw_Hollow_Circle+0x158>
        {
            x--;
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	3b01      	subs	r3, #1
 8000600:	61fb      	str	r3, [r7, #28]
            dx += 2;
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	3302      	adds	r3, #2
 8000606:	617b      	str	r3, [r7, #20]
            err += (-Radius << 1) + dx;
 8000608:	887b      	ldrh	r3, [r7, #2]
 800060a:	425b      	negs	r3, r3
 800060c:	005a      	lsls	r2, r3, #1
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	4413      	add	r3, r2
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	4413      	add	r3, r2
 8000616:	60fb      	str	r3, [r7, #12]
    while (x >= y)
 8000618:	69fa      	ldr	r2, [r7, #28]
 800061a:	69bb      	ldr	r3, [r7, #24]
 800061c:	429a      	cmp	r2, r3
 800061e:	f6bf af6d 	bge.w	80004fc <ILI9341_Draw_Hollow_Circle+0x3c>
        }
    }
}
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	3724      	adds	r7, #36	; 0x24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd90      	pop	{r4, r7, pc}

0800062c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b089      	sub	sp, #36	; 0x24
 8000630:	af02      	add	r7, sp, #8
 8000632:	4604      	mov	r4, r0
 8000634:	4608      	mov	r0, r1
 8000636:	4611      	mov	r1, r2
 8000638:	461a      	mov	r2, r3
 800063a:	4623      	mov	r3, r4
 800063c:	71fb      	strb	r3, [r7, #7]
 800063e:	4603      	mov	r3, r0
 8000640:	80bb      	strh	r3, [r7, #4]
 8000642:	460b      	mov	r3, r1
 8000644:	71bb      	strb	r3, [r7, #6]
 8000646:	4613      	mov	r3, r2
 8000648:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800064e:	7dfb      	ldrb	r3, [r7, #23]
 8000650:	2b1f      	cmp	r3, #31
 8000652:	d902      	bls.n	800065a <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 8000654:	7dfb      	ldrb	r3, [r7, #23]
 8000656:	3b20      	subs	r3, #32
 8000658:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800065a:	2300      	movs	r3, #0
 800065c:	753b      	strb	r3, [r7, #20]
 800065e:	e012      	b.n	8000686 <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 8000660:	7dfa      	ldrb	r2, [r7, #23]
 8000662:	7d38      	ldrb	r0, [r7, #20]
 8000664:	7d39      	ldrb	r1, [r7, #20]
 8000666:	4c3b      	ldr	r4, [pc, #236]	; (8000754 <ILI9341_Draw_Char+0x128>)
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	4423      	add	r3, r4
 8000672:	4403      	add	r3, r0
 8000674:	781a      	ldrb	r2, [r3, #0]
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	440b      	add	r3, r1
 800067c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000680:	7d3b      	ldrb	r3, [r7, #20]
 8000682:	3301      	adds	r3, #1
 8000684:	753b      	strb	r3, [r7, #20]
 8000686:	7d3b      	ldrb	r3, [r7, #20]
 8000688:	2b05      	cmp	r3, #5
 800068a:	d9e9      	bls.n	8000660 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	b299      	uxth	r1, r3
 8000690:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000692:	461a      	mov	r2, r3
 8000694:	0052      	lsls	r2, r2, #1
 8000696:	4413      	add	r3, r2
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	b29a      	uxth	r2, r3
 800069c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	b29c      	uxth	r4, r3
 80006a2:	88b8      	ldrh	r0, [r7, #4]
 80006a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	4623      	mov	r3, r4
 80006aa:	f000 fc47 	bl	8000f3c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80006ae:	2300      	movs	r3, #0
 80006b0:	757b      	strb	r3, [r7, #21]
 80006b2:	e046      	b.n	8000742 <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80006b4:	2300      	movs	r3, #0
 80006b6:	75bb      	strb	r3, [r7, #22]
 80006b8:	e03d      	b.n	8000736 <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 80006ba:	7d7b      	ldrb	r3, [r7, #21]
 80006bc:	f107 0218 	add.w	r2, r7, #24
 80006c0:	4413      	add	r3, r2
 80006c2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80006c6:	461a      	mov	r2, r3
 80006c8:	7dbb      	ldrb	r3, [r7, #22]
 80006ca:	fa42 f303 	asr.w	r3, r2, r3
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d02c      	beq.n	8000730 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 80006d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d10f      	bne.n	80006fc <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80006dc:	7d7b      	ldrb	r3, [r7, #21]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	88bb      	ldrh	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	b298      	uxth	r0, r3
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	7dbb      	ldrb	r3, [r7, #22]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	4413      	add	r3, r2
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	887a      	ldrh	r2, [r7, #2]
 80006f4:	4619      	mov	r1, r3
 80006f6:	f000 fb59 	bl	8000dac <ILI9341_Draw_Pixel>
 80006fa:	e019      	b.n	8000730 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80006fc:	7d7b      	ldrb	r3, [r7, #21]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000702:	fb12 f303 	smulbb	r3, r2, r3
 8000706:	b29a      	uxth	r2, r3
 8000708:	88bb      	ldrh	r3, [r7, #4]
 800070a:	4413      	add	r3, r2
 800070c:	b298      	uxth	r0, r3
 800070e:	79bb      	ldrb	r3, [r7, #6]
 8000710:	b29a      	uxth	r2, r3
 8000712:	7dbb      	ldrb	r3, [r7, #22]
 8000714:	b29b      	uxth	r3, r3
 8000716:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000718:	fb11 f303 	smulbb	r3, r1, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	4413      	add	r3, r2
 8000720:	b299      	uxth	r1, r3
 8000722:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8000724:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000726:	887b      	ldrh	r3, [r7, #2]
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	4623      	mov	r3, r4
 800072c:	f000 fc06 	bl	8000f3c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000730:	7dbb      	ldrb	r3, [r7, #22]
 8000732:	3301      	adds	r3, #1
 8000734:	75bb      	strb	r3, [r7, #22]
 8000736:	7dbb      	ldrb	r3, [r7, #22]
 8000738:	2b07      	cmp	r3, #7
 800073a:	d9be      	bls.n	80006ba <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 800073c:	7d7b      	ldrb	r3, [r7, #21]
 800073e:	3301      	adds	r3, #1
 8000740:	757b      	strb	r3, [r7, #21]
 8000742:	7d7b      	ldrb	r3, [r7, #21]
 8000744:	2b05      	cmp	r3, #5
 8000746:	d9b5      	bls.n	80006b4 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	371c      	adds	r7, #28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd90      	pop	{r4, r7, pc}
 8000752:	bf00      	nop
 8000754:	08008fc4 	.word	0x08008fc4

08000758 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b087      	sub	sp, #28
 800075c:	af02      	add	r7, sp, #8
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	4608      	mov	r0, r1
 8000762:	4611      	mov	r1, r2
 8000764:	461a      	mov	r2, r3
 8000766:	4603      	mov	r3, r0
 8000768:	817b      	strh	r3, [r7, #10]
 800076a:	460b      	mov	r3, r1
 800076c:	727b      	strb	r3, [r7, #9]
 800076e:	4613      	mov	r3, r2
 8000770:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8000772:	e016      	b.n	80007a2 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	60fa      	str	r2, [r7, #12]
 800077a:	7818      	ldrb	r0, [r3, #0]
 800077c:	88fc      	ldrh	r4, [r7, #6]
 800077e:	7a7a      	ldrb	r2, [r7, #9]
 8000780:	8979      	ldrh	r1, [r7, #10]
 8000782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	8c3b      	ldrh	r3, [r7, #32]
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	4623      	mov	r3, r4
 800078c:	f7ff ff4e 	bl	800062c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000790:	8c3b      	ldrh	r3, [r7, #32]
 8000792:	461a      	mov	r2, r3
 8000794:	0052      	lsls	r2, r2, #1
 8000796:	4413      	add	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	b29a      	uxth	r2, r3
 800079c:	897b      	ldrh	r3, [r7, #10]
 800079e:	4413      	add	r3, r2
 80007a0:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1e4      	bne.n	8000774 <ILI9341_Draw_Text+0x1c>
    }
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd90      	pop	{r4, r7, pc}

080007b4 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80007b8:	2200      	movs	r2, #0
 80007ba:	2110      	movs	r1, #16
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <ILI9341_SPI_Init+0x14>)
 80007be:	f001 fdfd 	bl	80023bc <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80007d6:	1df9      	adds	r1, r7, #7
 80007d8:	2301      	movs	r3, #1
 80007da:	2201      	movs	r2, #1
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <ILI9341_SPI_Send+0x20>)
 80007de:	f004 ff76 	bl	80056ce <HAL_SPI_Transmit>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000c8 	.word	0x200000c8

080007f0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2110      	movs	r1, #16
 80007fe:	480a      	ldr	r0, [pc, #40]	; (8000828 <ILI9341_Write_Command+0x38>)
 8000800:	f001 fddc 	bl	80023bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000804:	2200      	movs	r2, #0
 8000806:	2140      	movs	r1, #64	; 0x40
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <ILI9341_Write_Command+0x38>)
 800080a:	f001 fdd7 	bl	80023bc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ffdb 	bl	80007cc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000816:	2201      	movs	r2, #1
 8000818:	2110      	movs	r1, #16
 800081a:	4803      	ldr	r0, [pc, #12]	; (8000828 <ILI9341_Write_Command+0x38>)
 800081c:	f001 fdce 	bl	80023bc <HAL_GPIO_WritePin>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40021000 	.word	0x40021000

0800082c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000836:	2201      	movs	r2, #1
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	480a      	ldr	r0, [pc, #40]	; (8000864 <ILI9341_Write_Data+0x38>)
 800083c:	f001 fdbe 	bl	80023bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2110      	movs	r1, #16
 8000844:	4807      	ldr	r0, [pc, #28]	; (8000864 <ILI9341_Write_Data+0x38>)
 8000846:	f001 fdb9 	bl	80023bc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ffbd 	bl	80007cc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2110      	movs	r1, #16
 8000856:	4803      	ldr	r0, [pc, #12]	; (8000864 <ILI9341_Write_Data+0x38>)
 8000858:	f001 fdb0 	bl	80023bc <HAL_GPIO_WritePin>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40021000 	.word	0x40021000

08000868 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4604      	mov	r4, r0
 8000870:	4608      	mov	r0, r1
 8000872:	4611      	mov	r1, r2
 8000874:	461a      	mov	r2, r3
 8000876:	4623      	mov	r3, r4
 8000878:	80fb      	strh	r3, [r7, #6]
 800087a:	4603      	mov	r3, r0
 800087c:	80bb      	strh	r3, [r7, #4]
 800087e:	460b      	mov	r3, r1
 8000880:	807b      	strh	r3, [r7, #2]
 8000882:	4613      	mov	r3, r2
 8000884:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000886:	202a      	movs	r0, #42	; 0x2a
 8000888:	f7ff ffb2 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	0a1b      	lsrs	r3, r3, #8
 8000890:	b29b      	uxth	r3, r3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ffc9 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ffc4 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80008a4:	887b      	ldrh	r3, [r7, #2]
 80008a6:	0a1b      	lsrs	r3, r3, #8
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ffbd 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80008b2:	887b      	ldrh	r3, [r7, #2]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffb8 	bl	800082c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80008bc:	202b      	movs	r0, #43	; 0x2b
 80008be:	f7ff ff97 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ffae 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80008d0:	88bb      	ldrh	r3, [r7, #4]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ffa9 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80008da:	883b      	ldrh	r3, [r7, #0]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	b29b      	uxth	r3, r3
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ffa2 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80008e8:	883b      	ldrh	r3, [r7, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff9d 	bl	800082c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80008f2:	202c      	movs	r0, #44	; 0x2c
 80008f4:	f7ff ff7c 	bl	80007f0 <ILI9341_Write_Command>
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd90      	pop	{r4, r7, pc}

08000900 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2120      	movs	r1, #32
 8000908:	480a      	ldr	r0, [pc, #40]	; (8000934 <ILI9341_Reset+0x34>)
 800090a:	f001 fd57 	bl	80023bc <HAL_GPIO_WritePin>
HAL_Delay(200);
 800090e:	20c8      	movs	r0, #200	; 0xc8
 8000910:	f001 fa82 	bl	8001e18 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2110      	movs	r1, #16
 8000918:	4806      	ldr	r0, [pc, #24]	; (8000934 <ILI9341_Reset+0x34>)
 800091a:	f001 fd4f 	bl	80023bc <HAL_GPIO_WritePin>
HAL_Delay(200);
 800091e:	20c8      	movs	r0, #200	; 0xc8
 8000920:	f001 fa7a 	bl	8001e18 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000924:	2201      	movs	r2, #1
 8000926:	2120      	movs	r1, #32
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <ILI9341_Reset+0x34>)
 800092a:	f001 fd47 	bl	80023bc <HAL_GPIO_WritePin>
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000946:	2036      	movs	r0, #54	; 0x36
 8000948:	f7ff ff52 	bl	80007f0 <ILI9341_Write_Command>
HAL_Delay(1);
 800094c:	2001      	movs	r0, #1
 800094e:	f001 fa63 	bl	8001e18 <HAL_Delay>
	
switch(screen_rotation) 
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	2b03      	cmp	r3, #3
 8000956:	d837      	bhi.n	80009c8 <ILI9341_Set_Rotation+0x90>
 8000958:	a201      	add	r2, pc, #4	; (adr r2, 8000960 <ILI9341_Set_Rotation+0x28>)
 800095a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095e:	bf00      	nop
 8000960:	08000971 	.word	0x08000971
 8000964:	08000987 	.word	0x08000987
 8000968:	0800099d 	.word	0x0800099d
 800096c:	080009b3 	.word	0x080009b3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000970:	2048      	movs	r0, #72	; 0x48
 8000972:	f7ff ff5b 	bl	800082c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <ILI9341_Set_Rotation+0x9c>)
 8000978:	22f0      	movs	r2, #240	; 0xf0
 800097a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800097c:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <ILI9341_Set_Rotation+0xa0>)
 800097e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000982:	801a      	strh	r2, [r3, #0]
			break;
 8000984:	e021      	b.n	80009ca <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000986:	2028      	movs	r0, #40	; 0x28
 8000988:	f7ff ff50 	bl	800082c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <ILI9341_Set_Rotation+0x9c>)
 800098e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000992:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <ILI9341_Set_Rotation+0xa0>)
 8000996:	22f0      	movs	r2, #240	; 0xf0
 8000998:	801a      	strh	r2, [r3, #0]
			break;
 800099a:	e016      	b.n	80009ca <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 800099c:	2088      	movs	r0, #136	; 0x88
 800099e:	f7ff ff45 	bl	800082c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <ILI9341_Set_Rotation+0x9c>)
 80009a4:	22f0      	movs	r2, #240	; 0xf0
 80009a6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <ILI9341_Set_Rotation+0xa0>)
 80009aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80009ae:	801a      	strh	r2, [r3, #0]
			break;
 80009b0:	e00b      	b.n	80009ca <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80009b2:	20e8      	movs	r0, #232	; 0xe8
 80009b4:	f7ff ff3a 	bl	800082c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <ILI9341_Set_Rotation+0x9c>)
 80009ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80009be:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <ILI9341_Set_Rotation+0xa0>)
 80009c2:	22f0      	movs	r2, #240	; 0xf0
 80009c4:	801a      	strh	r2, [r3, #0]
			break;
 80009c6:	e000      	b.n	80009ca <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80009c8:	bf00      	nop
	}
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000002 	.word	0x20000002
 80009d8:	20000000 	.word	0x20000000

080009dc <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2120      	movs	r1, #32
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <ILI9341_Enable+0x14>)
 80009e6:	f001 fce9 	bl	80023bc <HAL_GPIO_WritePin>
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000

080009f4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af02      	add	r7, sp, #8

ILI9341_Enable();
 80009fa:	f7ff ffef 	bl	80009dc <ILI9341_Enable>
ILI9341_SPI_Init();
 80009fe:	f7ff fed9 	bl	80007b4 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000a02:	f7ff ff7d 	bl	8000900 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f7ff fef2 	bl	80007f0 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000a0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a10:	f001 fa02 	bl	8001e18 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000a14:	20cb      	movs	r0, #203	; 0xcb
 8000a16:	f7ff feeb 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000a1a:	2039      	movs	r0, #57	; 0x39
 8000a1c:	f7ff ff06 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000a20:	202c      	movs	r0, #44	; 0x2c
 8000a22:	f7ff ff03 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff ff00 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000a2c:	2034      	movs	r0, #52	; 0x34
 8000a2e:	f7ff fefd 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff fefa 	bl	800082c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000a38:	20cf      	movs	r0, #207	; 0xcf
 8000a3a:	f7ff fed9 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fef4 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000a44:	20c1      	movs	r0, #193	; 0xc1
 8000a46:	f7ff fef1 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000a4a:	2030      	movs	r0, #48	; 0x30
 8000a4c:	f7ff feee 	bl	800082c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000a50:	20e8      	movs	r0, #232	; 0xe8
 8000a52:	f7ff fecd 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000a56:	2085      	movs	r0, #133	; 0x85
 8000a58:	f7ff fee8 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff fee5 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000a62:	2078      	movs	r0, #120	; 0x78
 8000a64:	f7ff fee2 	bl	800082c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000a68:	20ea      	movs	r0, #234	; 0xea
 8000a6a:	f7ff fec1 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff fedc 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f7ff fed9 	bl	800082c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000a7a:	20ed      	movs	r0, #237	; 0xed
 8000a7c:	f7ff feb8 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000a80:	2064      	movs	r0, #100	; 0x64
 8000a82:	f7ff fed3 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000a86:	2003      	movs	r0, #3
 8000a88:	f7ff fed0 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000a8c:	2012      	movs	r0, #18
 8000a8e:	f7ff fecd 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000a92:	2081      	movs	r0, #129	; 0x81
 8000a94:	f7ff feca 	bl	800082c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000a98:	20f7      	movs	r0, #247	; 0xf7
 8000a9a:	f7ff fea9 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000a9e:	2020      	movs	r0, #32
 8000aa0:	f7ff fec4 	bl	800082c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000aa4:	20c0      	movs	r0, #192	; 0xc0
 8000aa6:	f7ff fea3 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000aaa:	2023      	movs	r0, #35	; 0x23
 8000aac:	f7ff febe 	bl	800082c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000ab0:	20c1      	movs	r0, #193	; 0xc1
 8000ab2:	f7ff fe9d 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000ab6:	2010      	movs	r0, #16
 8000ab8:	f7ff feb8 	bl	800082c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000abc:	20c5      	movs	r0, #197	; 0xc5
 8000abe:	f7ff fe97 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000ac2:	203e      	movs	r0, #62	; 0x3e
 8000ac4:	f7ff feb2 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000ac8:	2028      	movs	r0, #40	; 0x28
 8000aca:	f7ff feaf 	bl	800082c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000ace:	20c7      	movs	r0, #199	; 0xc7
 8000ad0:	f7ff fe8e 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000ad4:	2086      	movs	r0, #134	; 0x86
 8000ad6:	f7ff fea9 	bl	800082c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000ada:	2036      	movs	r0, #54	; 0x36
 8000adc:	f7ff fe88 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000ae0:	2048      	movs	r0, #72	; 0x48
 8000ae2:	f7ff fea3 	bl	800082c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000ae6:	203a      	movs	r0, #58	; 0x3a
 8000ae8:	f7ff fe82 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000aec:	2055      	movs	r0, #85	; 0x55
 8000aee:	f7ff fe9d 	bl	800082c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000af2:	20b1      	movs	r0, #177	; 0xb1
 8000af4:	f7ff fe7c 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff fe97 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000afe:	2018      	movs	r0, #24
 8000b00:	f7ff fe94 	bl	800082c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000b04:	20b6      	movs	r0, #182	; 0xb6
 8000b06:	f7ff fe73 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000b0a:	2008      	movs	r0, #8
 8000b0c:	f7ff fe8e 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000b10:	2082      	movs	r0, #130	; 0x82
 8000b12:	f7ff fe8b 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000b16:	2027      	movs	r0, #39	; 0x27
 8000b18:	f7ff fe88 	bl	800082c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000b1c:	20f2      	movs	r0, #242	; 0xf2
 8000b1e:	f7ff fe67 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff fe82 	bl	800082c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000b28:	2026      	movs	r0, #38	; 0x26
 8000b2a:	f7ff fe61 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fe7c 	bl	800082c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000b34:	20e0      	movs	r0, #224	; 0xe0
 8000b36:	f7ff fe5b 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f7ff fe76 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000b40:	2031      	movs	r0, #49	; 0x31
 8000b42:	f7ff fe73 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000b46:	202b      	movs	r0, #43	; 0x2b
 8000b48:	f7ff fe70 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000b4c:	200c      	movs	r0, #12
 8000b4e:	f7ff fe6d 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000b52:	200e      	movs	r0, #14
 8000b54:	f7ff fe6a 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000b58:	2008      	movs	r0, #8
 8000b5a:	f7ff fe67 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000b5e:	204e      	movs	r0, #78	; 0x4e
 8000b60:	f7ff fe64 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000b64:	20f1      	movs	r0, #241	; 0xf1
 8000b66:	f7ff fe61 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000b6a:	2037      	movs	r0, #55	; 0x37
 8000b6c:	f7ff fe5e 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000b70:	2007      	movs	r0, #7
 8000b72:	f7ff fe5b 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000b76:	2010      	movs	r0, #16
 8000b78:	f7ff fe58 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f7ff fe55 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000b82:	200e      	movs	r0, #14
 8000b84:	f7ff fe52 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000b88:	2009      	movs	r0, #9
 8000b8a:	f7ff fe4f 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff fe4c 	bl	800082c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000b94:	20e1      	movs	r0, #225	; 0xe1
 8000b96:	f7ff fe2b 	bl	80007f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff fe46 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000ba0:	200e      	movs	r0, #14
 8000ba2:	f7ff fe43 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000ba6:	2014      	movs	r0, #20
 8000ba8:	f7ff fe40 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f7ff fe3d 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000bb2:	2011      	movs	r0, #17
 8000bb4:	f7ff fe3a 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000bb8:	2007      	movs	r0, #7
 8000bba:	f7ff fe37 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000bbe:	2031      	movs	r0, #49	; 0x31
 8000bc0:	f7ff fe34 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000bc4:	20c1      	movs	r0, #193	; 0xc1
 8000bc6:	f7ff fe31 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000bca:	2048      	movs	r0, #72	; 0x48
 8000bcc:	f7ff fe2e 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000bd0:	2008      	movs	r0, #8
 8000bd2:	f7ff fe2b 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000bd6:	200f      	movs	r0, #15
 8000bd8:	f7ff fe28 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000bdc:	200c      	movs	r0, #12
 8000bde:	f7ff fe25 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000be2:	2031      	movs	r0, #49	; 0x31
 8000be4:	f7ff fe22 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000be8:	2036      	movs	r0, #54	; 0x36
 8000bea:	f7ff fe1f 	bl	800082c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f7ff fe1c 	bl	800082c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000bf4:	2011      	movs	r0, #17
 8000bf6:	f7ff fdfb 	bl	80007f0 <ILI9341_Write_Command>
HAL_Delay(120);
 8000bfa:	2078      	movs	r0, #120	; 0x78
 8000bfc:	f001 f90c 	bl	8001e18 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000c00:	2029      	movs	r0, #41	; 0x29
 8000c02:	f7ff fdf5 	bl	80007f0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c06:	2003      	movs	r0, #3
 8000c08:	f7ff fe96 	bl	8000938 <ILI9341_Set_Rotation>

// For test
ILI9341_Draw_Text("FIRST TEST 1234567891234", 0, 0, WHITE, 2, BLACK);
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	2302      	movs	r3, #2
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <ILI9341_Init+0x23c>)
 8000c1e:	f7ff fd9b 	bl	8000758 <ILI9341_Draw_Text>

HAL_Delay(10);
 8000c22:	200a      	movs	r0, #10
 8000c24:	f001 f8f8 	bl	8001e18 <HAL_Delay>
//
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	08008f64 	.word	0x08008f64

08000c34 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000c34:	b5b0      	push	{r4, r5, r7, lr}
 8000c36:	b08c      	sub	sp, #48	; 0x30
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	80fb      	strh	r3, [r7, #6]
 8000c40:	466b      	mov	r3, sp
 8000c42:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c50:	d202      	bcs.n	8000c58 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
 8000c56:	e002      	b.n	8000c5e <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000c58:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2140      	movs	r1, #64	; 0x40
 8000c62:	483d      	ldr	r0, [pc, #244]	; (8000d58 <ILI9341_Draw_Colour_Burst+0x124>)
 8000c64:	f001 fbaa 	bl	80023bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	483a      	ldr	r0, [pc, #232]	; (8000d58 <ILI9341_Draw_Colour_Burst+0x124>)
 8000c6e:	f001 fba5 	bl	80023bc <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000c7c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000c7e:	4623      	mov	r3, r4
 8000c80:	3b01      	subs	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
 8000c84:	4620      	mov	r0, r4
 8000c86:	f04f 0100 	mov.w	r1, #0
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	00cb      	lsls	r3, r1, #3
 8000c94:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c98:	00c2      	lsls	r2, r0, #3
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f04f 0100 	mov.w	r1, #0
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	00cb      	lsls	r3, r1, #3
 8000caa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000cae:	00c2      	lsls	r2, r0, #3
 8000cb0:	1de3      	adds	r3, r4, #7
 8000cb2:	08db      	lsrs	r3, r3, #3
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	ebad 0d03 	sub.w	sp, sp, r3
 8000cba:	466b      	mov	r3, sp
 8000cbc:	3300      	adds	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cc4:	e00e      	b.n	8000ce4 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cca:	4413      	add	r3, r2
 8000ccc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cd0:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	88fa      	ldrh	r2, [r7, #6]
 8000cd8:	b2d1      	uxtb	r1, r2
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d3ec      	bcc.n	8000cc6 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d00:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d06:	fb01 f202 	mul.w	r2, r1, r2
 8000d0a:	1a9b      	subs	r3, r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d010      	beq.n	8000d36 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d18:	e009      	b.n	8000d2e <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000d1a:	69b9      	ldr	r1, [r7, #24]
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	230a      	movs	r3, #10
 8000d22:	480e      	ldr	r0, [pc, #56]	; (8000d5c <ILI9341_Draw_Colour_Burst+0x128>)
 8000d24:	f004 fcd3 	bl	80056ce <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d3f1      	bcc.n	8000d1a <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000d36:	69b9      	ldr	r1, [r7, #24]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	230a      	movs	r3, #10
 8000d3e:	4807      	ldr	r0, [pc, #28]	; (8000d5c <ILI9341_Draw_Colour_Burst+0x128>)
 8000d40:	f004 fcc5 	bl	80056ce <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2110      	movs	r1, #16
 8000d48:	4803      	ldr	r0, [pc, #12]	; (8000d58 <ILI9341_Draw_Colour_Burst+0x124>)
 8000d4a:	f001 fb37 	bl	80023bc <HAL_GPIO_WritePin>
 8000d4e:	46ad      	mov	sp, r5
}
 8000d50:	bf00      	nop
 8000d52:	3730      	adds	r7, #48	; 0x30
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bdb0      	pop	{r4, r5, r7, pc}
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	200000c8 	.word	0x200000c8

08000d60 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <ILI9341_Fill_Screen+0x44>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <ILI9341_Fill_Screen+0x48>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff fd75 	bl	8000868 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <ILI9341_Fill_Screen+0x44>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <ILI9341_Fill_Screen+0x48>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	fb03 f302 	mul.w	r3, r3, r2
 8000d90:	461a      	mov	r2, r3
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff4c 	bl	8000c34 <ILI9341_Draw_Colour_Burst>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000002 	.word	0x20000002
 8000da8:	20000000 	.word	0x20000000

08000dac <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
 8000db6:	460b      	mov	r3, r1
 8000db8:	80bb      	strh	r3, [r7, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000dbe:	4b5b      	ldr	r3, [pc, #364]	; (8000f2c <ILI9341_Draw_Pixel+0x180>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	88fa      	ldrh	r2, [r7, #6]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	f080 80ac 	bcs.w	8000f24 <ILI9341_Draw_Pixel+0x178>
 8000dcc:	4b58      	ldr	r3, [pc, #352]	; (8000f30 <ILI9341_Draw_Pixel+0x184>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	88ba      	ldrh	r2, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	f080 80a5 	bcs.w	8000f24 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2140      	movs	r1, #64	; 0x40
 8000dde:	4855      	ldr	r0, [pc, #340]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000de0:	f001 faec 	bl	80023bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2110      	movs	r1, #16
 8000de8:	4852      	ldr	r0, [pc, #328]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000dea:	f001 fae7 	bl	80023bc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000dee:	202a      	movs	r0, #42	; 0x2a
 8000df0:	f7ff fcec 	bl	80007cc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000df4:	2201      	movs	r2, #1
 8000df6:	2140      	movs	r1, #64	; 0x40
 8000df8:	484e      	ldr	r0, [pc, #312]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000dfa:	f001 fadf 	bl	80023bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2110      	movs	r1, #16
 8000e02:	484c      	ldr	r0, [pc, #304]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000e04:	f001 fada 	bl	80023bc <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2110      	movs	r1, #16
 8000e0c:	4849      	ldr	r0, [pc, #292]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000e0e:	f001 fad5 	bl	80023bc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	753b      	strb	r3, [r7, #20]
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	757b      	strb	r3, [r7, #21]
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	3301      	adds	r3, #1
 8000e26:	121b      	asrs	r3, r3, #8
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	75bb      	strb	r3, [r7, #22]
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	3301      	adds	r3, #1
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000e36:	f107 0114 	add.w	r1, r7, #20
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	483e      	ldr	r0, [pc, #248]	; (8000f38 <ILI9341_Draw_Pixel+0x18c>)
 8000e40:	f004 fc45 	bl	80056ce <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2110      	movs	r1, #16
 8000e48:	483a      	ldr	r0, [pc, #232]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000e4a:	f001 fab7 	bl	80023bc <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2140      	movs	r1, #64	; 0x40
 8000e52:	4838      	ldr	r0, [pc, #224]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000e54:	f001 fab2 	bl	80023bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4835      	ldr	r0, [pc, #212]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000e5e:	f001 faad 	bl	80023bc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000e62:	202b      	movs	r0, #43	; 0x2b
 8000e64:	f7ff fcb2 	bl	80007cc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2140      	movs	r1, #64	; 0x40
 8000e6c:	4831      	ldr	r0, [pc, #196]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000e6e:	f001 faa5 	bl	80023bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000e72:	2201      	movs	r2, #1
 8000e74:	2110      	movs	r1, #16
 8000e76:	482f      	ldr	r0, [pc, #188]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000e78:	f001 faa0 	bl	80023bc <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2110      	movs	r1, #16
 8000e80:	482c      	ldr	r0, [pc, #176]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000e82:	f001 fa9b 	bl	80023bc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	743b      	strb	r3, [r7, #16]
 8000e90:	88bb      	ldrh	r3, [r7, #4]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	747b      	strb	r3, [r7, #17]
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	121b      	asrs	r3, r3, #8
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	74bb      	strb	r3, [r7, #18]
 8000ea0:	88bb      	ldrh	r3, [r7, #4]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000eaa:	f107 0110 	add.w	r1, r7, #16
 8000eae:	2301      	movs	r3, #1
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	4821      	ldr	r0, [pc, #132]	; (8000f38 <ILI9341_Draw_Pixel+0x18c>)
 8000eb4:	f004 fc0b 	bl	80056ce <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2110      	movs	r1, #16
 8000ebc:	481d      	ldr	r0, [pc, #116]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000ebe:	f001 fa7d 	bl	80023bc <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2140      	movs	r1, #64	; 0x40
 8000ec6:	481b      	ldr	r0, [pc, #108]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000ec8:	f001 fa78 	bl	80023bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2110      	movs	r1, #16
 8000ed0:	4818      	ldr	r0, [pc, #96]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000ed2:	f001 fa73 	bl	80023bc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000ed6:	202c      	movs	r0, #44	; 0x2c
 8000ed8:	f7ff fc78 	bl	80007cc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000edc:	2201      	movs	r2, #1
 8000ede:	2140      	movs	r1, #64	; 0x40
 8000ee0:	4814      	ldr	r0, [pc, #80]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000ee2:	f001 fa6b 	bl	80023bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2110      	movs	r1, #16
 8000eea:	4812      	ldr	r0, [pc, #72]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000eec:	f001 fa66 	bl	80023bc <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	480f      	ldr	r0, [pc, #60]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000ef6:	f001 fa61 	bl	80023bc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000efa:	887b      	ldrh	r3, [r7, #2]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	733b      	strb	r3, [r7, #12]
 8000f04:	887b      	ldrh	r3, [r7, #2]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000f0a:	f107 010c 	add.w	r1, r7, #12
 8000f0e:	2301      	movs	r3, #1
 8000f10:	2202      	movs	r2, #2
 8000f12:	4809      	ldr	r0, [pc, #36]	; (8000f38 <ILI9341_Draw_Pixel+0x18c>)
 8000f14:	f004 fbdb 	bl	80056ce <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <ILI9341_Draw_Pixel+0x188>)
 8000f1e:	f001 fa4d 	bl	80023bc <HAL_GPIO_WritePin>
 8000f22:	e000      	b.n	8000f26 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000f24:	bf00      	nop
	
}
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000002 	.word	0x20000002
 8000f30:	20000000 	.word	0x20000000
 8000f34:	40021000 	.word	0x40021000
 8000f38:	200000c8 	.word	0x200000c8

08000f3c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4604      	mov	r4, r0
 8000f44:	4608      	mov	r0, r1
 8000f46:	4611      	mov	r1, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4623      	mov	r3, r4
 8000f4c:	80fb      	strh	r3, [r7, #6]
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80bb      	strh	r3, [r7, #4]
 8000f52:	460b      	mov	r3, r1
 8000f54:	807b      	strh	r3, [r7, #2]
 8000f56:	4613      	mov	r3, r2
 8000f58:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000f5a:	4b24      	ldr	r3, [pc, #144]	; (8000fec <ILI9341_Draw_Rectangle+0xb0>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	88fa      	ldrh	r2, [r7, #6]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d23d      	bcs.n	8000fe2 <ILI9341_Draw_Rectangle+0xa6>
 8000f66:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <ILI9341_Draw_Rectangle+0xb4>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	88ba      	ldrh	r2, [r7, #4]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d237      	bcs.n	8000fe2 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8000f72:	88fa      	ldrh	r2, [r7, #6]
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a1c      	ldr	r2, [pc, #112]	; (8000fec <ILI9341_Draw_Rectangle+0xb0>)
 8000f7a:	8812      	ldrh	r2, [r2, #0]
 8000f7c:	b292      	uxth	r2, r2
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	dd05      	ble.n	8000f8e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <ILI9341_Draw_Rectangle+0xb0>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8000f8e:	88ba      	ldrh	r2, [r7, #4]
 8000f90:	883b      	ldrh	r3, [r7, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <ILI9341_Draw_Rectangle+0xb4>)
 8000f96:	8812      	ldrh	r2, [r2, #0]
 8000f98:	b292      	uxth	r2, r2
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	dd05      	ble.n	8000faa <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <ILI9341_Draw_Rectangle+0xb4>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	88bb      	ldrh	r3, [r7, #4]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000faa:	88fa      	ldrh	r2, [r7, #6]
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	4413      	add	r3, r2
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	b29c      	uxth	r4, r3
 8000fb6:	88ba      	ldrh	r2, [r7, #4]
 8000fb8:	883b      	ldrh	r3, [r7, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	88b9      	ldrh	r1, [r7, #4]
 8000fc4:	88f8      	ldrh	r0, [r7, #6]
 8000fc6:	4622      	mov	r2, r4
 8000fc8:	f7ff fc4e 	bl	8000868 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000fcc:	883b      	ldrh	r3, [r7, #0]
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	8b3b      	ldrh	r3, [r7, #24]
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fe2a 	bl	8000c34 <ILI9341_Draw_Colour_Burst>
 8000fe0:	e000      	b.n	8000fe4 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000fe2:	bf00      	nop
}
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000002 	.word	0x20000002
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <ILI9341_Draw_Vertical_Line>:
ILI9341_Draw_Colour_Burst(Colour, Width);
}

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	4611      	mov	r1, r2
 8001000:	461a      	mov	r2, r3
 8001002:	4623      	mov	r3, r4
 8001004:	80fb      	strh	r3, [r7, #6]
 8001006:	4603      	mov	r3, r0
 8001008:	80bb      	strh	r3, [r7, #4]
 800100a:	460b      	mov	r3, r1
 800100c:	807b      	strh	r3, [r7, #2]
 800100e:	4613      	mov	r3, r2
 8001010:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <ILI9341_Draw_Vertical_Line+0x80>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	b29b      	uxth	r3, r3
 8001018:	88fa      	ldrh	r2, [r7, #6]
 800101a:	429a      	cmp	r2, r3
 800101c:	d225      	bcs.n	800106a <ILI9341_Draw_Vertical_Line+0x76>
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <ILI9341_Draw_Vertical_Line+0x84>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	88ba      	ldrh	r2, [r7, #4]
 8001026:	429a      	cmp	r2, r3
 8001028:	d21f      	bcs.n	800106a <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 800102a:	88ba      	ldrh	r2, [r7, #4]
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	4413      	add	r3, r2
 8001030:	4a11      	ldr	r2, [pc, #68]	; (8001078 <ILI9341_Draw_Vertical_Line+0x84>)
 8001032:	8812      	ldrh	r2, [r2, #0]
 8001034:	b292      	uxth	r2, r2
 8001036:	4293      	cmp	r3, r2
 8001038:	dd05      	ble.n	8001046 <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <ILI9341_Draw_Vertical_Line+0x84>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	b29a      	uxth	r2, r3
 8001040:	88bb      	ldrh	r3, [r7, #4]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 8001046:	88ba      	ldrh	r2, [r7, #4]
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	4413      	add	r3, r2
 800104c:	b29b      	uxth	r3, r3
 800104e:	3b01      	subs	r3, #1
 8001050:	b29b      	uxth	r3, r3
 8001052:	88fa      	ldrh	r2, [r7, #6]
 8001054:	88b9      	ldrh	r1, [r7, #4]
 8001056:	88f8      	ldrh	r0, [r7, #6]
 8001058:	f7ff fc06 	bl	8000868 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 800105c:	887a      	ldrh	r2, [r7, #2]
 800105e:	883b      	ldrh	r3, [r7, #0]
 8001060:	4611      	mov	r1, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fde6 	bl	8000c34 <ILI9341_Draw_Colour_Burst>
 8001068:	e000      	b.n	800106c <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800106a:	bf00      	nop
}
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	bd90      	pop	{r4, r7, pc}
 8001072:	bf00      	nop
 8001074:	20000002 	.word	0x20000002
 8001078:	20000000 	.word	0x20000000

0800107c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001082:	f000 fe57 	bl	8001d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001086:	f000 f8ad 	bl	80011e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108a:	f000 fa79 	bl	8001580 <MX_GPIO_Init>
  MX_I2C1_Init();
 800108e:	f000 f937 	bl	8001300 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001092:	f000 f963 	bl	800135c <MX_I2S3_Init>
  MX_SPI1_Init();
 8001096:	f000 f991 	bl	80013bc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800109a:	f007 fb9d 	bl	80087d8 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 800109e:	f000 f9f9 	bl	8001494 <MX_TIM2_Init>
  MX_SPI2_Init();
 80010a2:	f000 f9c1 	bl	8001428 <MX_SPI2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80010a6:	f000 f91f 	bl	80012e8 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80010aa:	f7ff fca3 	bl	80009f4 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f7ff fe56 	bl	8000d60 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 80010b4:	2003      	movs	r0, #3
 80010b6:	f7ff fc3f 	bl	8000938 <ILI9341_Set_Rotation>
  ILI9341_Draw_Text("FIRST TEST 12345678912", 0, 0, WHITE, 2, BLACK);
 80010ba:	2300      	movs	r3, #0
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	2302      	movs	r3, #2
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	4841      	ldr	r0, [pc, #260]	; (80011d0 <main+0x154>)
 80010cc:	f7ff fb44 	bl	8000758 <ILI9341_Draw_Text>
  ILI9341_Draw_Text("12345678912345", 0, 30, WHITE, 3, BLACK);
 80010d0:	2300      	movs	r3, #0
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	2303      	movs	r3, #3
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010dc:	221e      	movs	r2, #30
 80010de:	2100      	movs	r1, #0
 80010e0:	483c      	ldr	r0, [pc, #240]	; (80011d4 <main+0x158>)
 80010e2:	f7ff fb39 	bl	8000758 <ILI9341_Draw_Text>
  ILI9341_Draw_Text("12345678", 0, 100, WHITE, 5, BLACK);
 80010e6:	2300      	movs	r3, #0
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	2305      	movs	r3, #5
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f2:	2264      	movs	r2, #100	; 0x64
 80010f4:	2100      	movs	r1, #0
 80010f6:	4838      	ldr	r0, [pc, #224]	; (80011d8 <main+0x15c>)
 80010f8:	f7ff fb2e 	bl	8000758 <ILI9341_Draw_Text>

  ILI9341_Draw_Text("12345678912345", 0, 220, WHITE, 3, BLACK);
 80010fc:	2300      	movs	r3, #0
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	2303      	movs	r3, #3
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001108:	22dc      	movs	r2, #220	; 0xdc
 800110a:	2100      	movs	r1, #0
 800110c:	4831      	ldr	r0, [pc, #196]	; (80011d4 <main+0x158>)
 800110e:	f7ff fb23 	bl	8000758 <ILI9341_Draw_Text>
  //Проблема з друком тексту з права

  char Character = 'T';
 8001112:	2354      	movs	r3, #84	; 0x54
 8001114:	70fb      	strb	r3, [r7, #3]
  ILI9341_Draw_Char(Character, 250, 140, RED, 3, BLACK);
 8001116:	78f8      	ldrb	r0, [r7, #3]
 8001118:	2300      	movs	r3, #0
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	2303      	movs	r3, #3
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001124:	228c      	movs	r2, #140	; 0x8c
 8001126:	21fa      	movs	r1, #250	; 0xfa
 8001128:	f7ff fa80 	bl	800062c <ILI9341_Draw_Char>

  ILI9341_Draw_Rectangle(290, 100, 20, 20, RED);
 800112c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2314      	movs	r3, #20
 8001134:	2214      	movs	r2, #20
 8001136:	2164      	movs	r1, #100	; 0x64
 8001138:	f44f 7091 	mov.w	r0, #290	; 0x122
 800113c:	f7ff fefe 	bl	8000f3c <ILI9341_Draw_Rectangle>
  ILI9341_Draw_Rectangle(250, 70, 30, 30, GREEN);
 8001140:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	231e      	movs	r3, #30
 8001148:	221e      	movs	r2, #30
 800114a:	2146      	movs	r1, #70	; 0x46
 800114c:	20fa      	movs	r0, #250	; 0xfa
 800114e:	f7ff fef5 	bl	8000f3c <ILI9341_Draw_Rectangle>

  ILI9341_Draw_Hollow_Circle(290, 30, 20, BLUE);
 8001152:	231f      	movs	r3, #31
 8001154:	2214      	movs	r2, #20
 8001156:	211e      	movs	r1, #30
 8001158:	f44f 7091 	mov.w	r0, #290	; 0x122
 800115c:	f7ff f9b0 	bl	80004c0 <ILI9341_Draw_Hollow_Circle>
  ILI9341_Draw_Hollow_Circle(310, 60, 10, BLUE);
 8001160:	231f      	movs	r3, #31
 8001162:	220a      	movs	r2, #10
 8001164:	213c      	movs	r1, #60	; 0x3c
 8001166:	f44f 709b 	mov.w	r0, #310	; 0x136
 800116a:	f7ff f9a9 	bl	80004c0 <ILI9341_Draw_Hollow_Circle>


  ILI9341_Draw_Vertical_Line(270, 120, 50, YELLOW);
 800116e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001172:	2232      	movs	r2, #50	; 0x32
 8001174:	2178      	movs	r1, #120	; 0x78
 8001176:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800117a:	f7ff ff3b 	bl	8000ff4 <ILI9341_Draw_Vertical_Line>

  //ILI9341_Fill_Screen(WHITE);

  int i = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
  while (1)
  {
	 ILI9341_Draw_Text(" TEST", i, 180, WHITE, 2, BLACK);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	b299      	uxth	r1, r3
 8001186:	2300      	movs	r3, #0
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2302      	movs	r3, #2
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001192:	22b4      	movs	r2, #180	; 0xb4
 8001194:	4811      	ldr	r0, [pc, #68]	; (80011dc <main+0x160>)
 8001196:	f7ff fadf 	bl	8000758 <ILI9341_Draw_Text>
	 ILI9341_Draw_Text(" ", i-1, 160, WHITE, 2, BLACK);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	b29b      	uxth	r3, r3
 800119e:	3b01      	subs	r3, #1
 80011a0:	b299      	uxth	r1, r3
 80011a2:	2300      	movs	r3, #0
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	2302      	movs	r3, #2
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ae:	22a0      	movs	r2, #160	; 0xa0
 80011b0:	480b      	ldr	r0, [pc, #44]	; (80011e0 <main+0x164>)
 80011b2:	f7ff fad1 	bl	8000758 <ILI9341_Draw_Text>
	 i = i+3;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3303      	adds	r3, #3
 80011ba:	607b      	str	r3, [r7, #4]
	 HAL_Delay(40);
 80011bc:	2028      	movs	r0, #40	; 0x28
 80011be:	f000 fe2b 	bl	8001e18 <HAL_Delay>
	 if(i>=320)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80011c8:	dbdb      	blt.n	8001182 <main+0x106>
	 {
		 i=0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
	 ILI9341_Draw_Text(" TEST", i, 180, WHITE, 2, BLACK);
 80011ce:	e7d8      	b.n	8001182 <main+0x106>
 80011d0:	08008f80 	.word	0x08008f80
 80011d4:	08008f98 	.word	0x08008f98
 80011d8:	08008fa8 	.word	0x08008fa8
 80011dc:	08008fb4 	.word	0x08008fb4
 80011e0:	08008fbc 	.word	0x08008fbc

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b098      	sub	sp, #96	; 0x60
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ee:	2230      	movs	r2, #48	; 0x30
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f007 fdda 	bl	8008dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <SystemClock_Config+0xfc>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a30      	ldr	r2, [pc, #192]	; (80012e0 <SystemClock_Config+0xfc>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <SystemClock_Config+0xfc>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <SystemClock_Config+0x100>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a2a      	ldr	r2, [pc, #168]	; (80012e4 <SystemClock_Config+0x100>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <SystemClock_Config+0x100>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800124e:	2301      	movs	r3, #1
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001258:	2302      	movs	r3, #2
 800125a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001260:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001262:	2308      	movs	r3, #8
 8001264:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001266:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800126a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126c:	2302      	movs	r3, #2
 800126e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001270:	2307      	movs	r3, #7
 8001272:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001278:	4618      	mov	r0, r3
 800127a:	f003 fbff 	bl	8004a7c <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001284:	f000 fa88 	bl	8001798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
 800128a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128c:	2302      	movs	r3, #2
 800128e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001294:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	2105      	movs	r1, #5
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fe60 	bl	8004f6c <HAL_RCC_ClockConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80012b2:	f000 fa71 	bl	8001798 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80012b6:	2301      	movs	r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80012ba:	23c0      	movs	r3, #192	; 0xc0
 80012bc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80012be:	2302      	movs	r3, #2
 80012c0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4618      	mov	r0, r3
 80012c8:	f004 f838 	bl	800533c <HAL_RCCEx_PeriphCLKConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80012d2:	f000 fa61 	bl	8001798 <Error_Handler>
  }
}
 80012d6:	bf00      	nop
 80012d8:	3760      	adds	r7, #96	; 0x60
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40007000 	.word	0x40007000

080012e8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	201c      	movs	r0, #28
 80012f2:	f000 fe90 	bl	8002016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012f6:	201c      	movs	r0, #28
 80012f8:	f000 fea9 	bl	800204e <HAL_NVIC_EnableIRQ>
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_I2C1_Init+0x50>)
 8001306:	4a13      	ldr	r2, [pc, #76]	; (8001354 <MX_I2C1_Init+0x54>)
 8001308:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_I2C1_Init+0x50>)
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <MX_I2C1_Init+0x58>)
 800130e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_I2C1_Init+0x50>)
 800131e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001322:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <MX_I2C1_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_I2C1_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_I2C1_Init+0x50>)
 800133e:	f002 fdb9 	bl	8003eb4 <HAL_I2C_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001348:	f000 fa26 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000120 	.word	0x20000120
 8001354:	40005400 	.word	0x40005400
 8001358:	000186a0 	.word	0x000186a0

0800135c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <MX_I2S3_Init+0x54>)
 8001362:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <MX_I2S3_Init+0x58>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <MX_I2S3_Init+0x54>)
 8001368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <MX_I2S3_Init+0x54>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001374:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_I2S3_Init+0x54>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <MX_I2S3_Init+0x54>)
 800137c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001380:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_I2S3_Init+0x54>)
 8001384:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <MX_I2S3_Init+0x5c>)
 8001386:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_I2S3_Init+0x54>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_I2S3_Init+0x54>)
 8001390:	2200      	movs	r2, #0
 8001392:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_I2S3_Init+0x54>)
 8001396:	2200      	movs	r2, #0
 8001398:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_I2S3_Init+0x54>)
 800139c:	f002 fece 	bl	800413c <HAL_I2S_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80013a6:	f000 f9f7 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000214 	.word	0x20000214
 80013b4:	40003c00 	.word	0x40003c00
 80013b8:	00017700 	.word	0x00017700

080013bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <MX_SPI1_Init+0x64>)
 80013c2:	4a18      	ldr	r2, [pc, #96]	; (8001424 <MX_SPI1_Init+0x68>)
 80013c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <MX_SPI1_Init+0x64>)
 80013c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_SPI1_Init+0x64>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_SPI1_Init+0x64>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_SPI1_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_SPI1_Init+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_SPI1_Init+0x64>)
 80013e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_SPI1_Init+0x64>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <MX_SPI1_Init+0x64>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_SPI1_Init+0x64>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <MX_SPI1_Init+0x64>)
 8001402:	2200      	movs	r2, #0
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_SPI1_Init+0x64>)
 8001408:	220a      	movs	r2, #10
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800140c:	4804      	ldr	r0, [pc, #16]	; (8001420 <MX_SPI1_Init+0x64>)
 800140e:	f004 f8d5 	bl	80055bc <HAL_SPI_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001418:	f000 f9be 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000174 	.word	0x20000174
 8001424:	40013000 	.word	0x40013000

08001428 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <MX_SPI2_Init+0x64>)
 800142e:	4a18      	ldr	r2, [pc, #96]	; (8001490 <MX_SPI2_Init+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <MX_SPI2_Init+0x64>)
 8001434:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001438:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_SPI2_Init+0x64>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <MX_SPI2_Init+0x64>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_SPI2_Init+0x64>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_SPI2_Init+0x64>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_SPI2_Init+0x64>)
 8001454:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001458:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_SPI2_Init+0x64>)
 800145c:	2210      	movs	r2, #16
 800145e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <MX_SPI2_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_SPI2_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <MX_SPI2_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_SPI2_Init+0x64>)
 8001474:	220a      	movs	r2, #10
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <MX_SPI2_Init+0x64>)
 800147a:	f004 f89f 	bl	80055bc <HAL_SPI_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001484:	f000 f988 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200000c8 	.word	0x200000c8
 8001490:	40003800 	.word	0x40003800

08001494 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08e      	sub	sp, #56	; 0x38
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a8:	f107 0320 	add.w	r3, r7, #32
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	615a      	str	r2, [r3, #20]
 80014c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <MX_TIM2_Init+0xe8>)
 80014c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <MX_TIM2_Init+0xe8>)
 80014ce:	f240 3247 	movw	r2, #839	; 0x347
 80014d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b29      	ldr	r3, [pc, #164]	; (800157c <MX_TIM2_Init+0xe8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80014da:	4b28      	ldr	r3, [pc, #160]	; (800157c <MX_TIM2_Init+0xe8>)
 80014dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <MX_TIM2_Init+0xe8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <MX_TIM2_Init+0xe8>)
 80014ea:	2280      	movs	r2, #128	; 0x80
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ee:	4823      	ldr	r0, [pc, #140]	; (800157c <MX_TIM2_Init+0xe8>)
 80014f0:	f004 faf4 	bl	8005adc <HAL_TIM_Base_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80014fa:	f000 f94d 	bl	8001798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001508:	4619      	mov	r1, r3
 800150a:	481c      	ldr	r0, [pc, #112]	; (800157c <MX_TIM2_Init+0xe8>)
 800150c:	f004 fd54 	bl	8005fb8 <HAL_TIM_ConfigClockSource>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001516:	f000 f93f 	bl	8001798 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800151a:	4818      	ldr	r0, [pc, #96]	; (800157c <MX_TIM2_Init+0xe8>)
 800151c:	f004 fb2d 	bl	8005b7a <HAL_TIM_PWM_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001526:	f000 f937 	bl	8001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800152a:	2310      	movs	r3, #16
 800152c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	4619      	mov	r1, r3
 8001538:	4810      	ldr	r0, [pc, #64]	; (800157c <MX_TIM2_Init+0xe8>)
 800153a:	f005 f91d 	bl	8006778 <HAL_TIMEx_MasterConfigSynchronization>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001544:	f000 f928 	bl	8001798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001548:	2360      	movs	r3, #96	; 0x60
 800154a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800154c:	2364      	movs	r3, #100	; 0x64
 800154e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	4807      	ldr	r0, [pc, #28]	; (800157c <MX_TIM2_Init+0xe8>)
 8001560:	f004 fc6c 	bl	8005e3c <HAL_TIM_PWM_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800156a:	f000 f915 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <MX_TIM2_Init+0xe8>)
 8001570:	f000 fab6 	bl	8001ae0 <HAL_TIM_MspPostInit>

}
 8001574:	bf00      	nop
 8001576:	3738      	adds	r7, #56	; 0x38
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200001cc 	.word	0x200001cc

08001580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08c      	sub	sp, #48	; 0x30
 8001584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	4b78      	ldr	r3, [pc, #480]	; (800177c <MX_GPIO_Init+0x1fc>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a77      	ldr	r2, [pc, #476]	; (800177c <MX_GPIO_Init+0x1fc>)
 80015a0:	f043 0310 	orr.w	r3, r3, #16
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b75      	ldr	r3, [pc, #468]	; (800177c <MX_GPIO_Init+0x1fc>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	4b71      	ldr	r3, [pc, #452]	; (800177c <MX_GPIO_Init+0x1fc>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a70      	ldr	r2, [pc, #448]	; (800177c <MX_GPIO_Init+0x1fc>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b6e      	ldr	r3, [pc, #440]	; (800177c <MX_GPIO_Init+0x1fc>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	4b6a      	ldr	r3, [pc, #424]	; (800177c <MX_GPIO_Init+0x1fc>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a69      	ldr	r2, [pc, #420]	; (800177c <MX_GPIO_Init+0x1fc>)
 80015d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b67      	ldr	r3, [pc, #412]	; (800177c <MX_GPIO_Init+0x1fc>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b63      	ldr	r3, [pc, #396]	; (800177c <MX_GPIO_Init+0x1fc>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a62      	ldr	r2, [pc, #392]	; (800177c <MX_GPIO_Init+0x1fc>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b60      	ldr	r3, [pc, #384]	; (800177c <MX_GPIO_Init+0x1fc>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	4b5c      	ldr	r3, [pc, #368]	; (800177c <MX_GPIO_Init+0x1fc>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a5b      	ldr	r2, [pc, #364]	; (800177c <MX_GPIO_Init+0x1fc>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b59      	ldr	r3, [pc, #356]	; (800177c <MX_GPIO_Init+0x1fc>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	4b55      	ldr	r3, [pc, #340]	; (800177c <MX_GPIO_Init+0x1fc>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a54      	ldr	r2, [pc, #336]	; (800177c <MX_GPIO_Init+0x1fc>)
 800162c:	f043 0308 	orr.w	r3, r3, #8
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b52      	ldr	r3, [pc, #328]	; (800177c <MX_GPIO_Init+0x1fc>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2178      	movs	r1, #120	; 0x78
 8001642:	484f      	ldr	r0, [pc, #316]	; (8001780 <MX_GPIO_Init+0x200>)
 8001644:	f000 feba 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	2101      	movs	r1, #1
 800164c:	484d      	ldr	r0, [pc, #308]	; (8001784 <MX_GPIO_Init+0x204>)
 800164e:	f000 feb5 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001652:	2200      	movs	r2, #0
 8001654:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001658:	484b      	ldr	r0, [pc, #300]	; (8001788 <MX_GPIO_Init+0x208>)
 800165a:	f000 feaf 	bl	80023bc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800165e:	2308      	movs	r3, #8
 8001660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	4619      	mov	r1, r3
 8001674:	4842      	ldr	r0, [pc, #264]	; (8001780 <MX_GPIO_Init+0x200>)
 8001676:	f000 fd05 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 800167a:	2370      	movs	r3, #112	; 0x70
 800167c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	483b      	ldr	r0, [pc, #236]	; (8001780 <MX_GPIO_Init+0x200>)
 8001692:	f000 fcf7 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001696:	2301      	movs	r3, #1
 8001698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169a:	2301      	movs	r3, #1
 800169c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	4835      	ldr	r0, [pc, #212]	; (8001784 <MX_GPIO_Init+0x204>)
 80016ae:	f000 fce9 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80016b2:	2308      	movs	r3, #8
 80016b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016c2:	2305      	movs	r3, #5
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	482d      	ldr	r0, [pc, #180]	; (8001784 <MX_GPIO_Init+0x204>)
 80016ce:	f000 fcd9 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016d2:	2301      	movs	r3, #1
 80016d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <MX_GPIO_Init+0x20c>)
 80016d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	482a      	ldr	r0, [pc, #168]	; (8001790 <MX_GPIO_Init+0x210>)
 80016e6:	f000 fccd 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80016ea:	2304      	movs	r3, #4
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	4825      	ldr	r0, [pc, #148]	; (8001794 <MX_GPIO_Init+0x214>)
 80016fe:	f000 fcc1 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001714:	2305      	movs	r3, #5
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	4619      	mov	r1, r3
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <MX_GPIO_Init+0x214>)
 8001720:	f000 fcb0 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001724:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001728:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	4812      	ldr	r0, [pc, #72]	; (8001788 <MX_GPIO_Init+0x208>)
 800173e:	f000 fca1 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001742:	2320      	movs	r3, #32
 8001744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <MX_GPIO_Init+0x208>)
 8001756:	f000 fc95 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800175a:	2302      	movs	r3, #2
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_GPIO_Init+0x20c>)
 8001760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	4804      	ldr	r0, [pc, #16]	; (8001780 <MX_GPIO_Init+0x200>)
 800176e:	f000 fc89 	bl	8002084 <HAL_GPIO_Init>

}
 8001772:	bf00      	nop
 8001774:	3730      	adds	r7, #48	; 0x30
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800
 8001780:	40021000 	.word	0x40021000
 8001784:	40020800 	.word	0x40020800
 8001788:	40020c00 	.word	0x40020c00
 800178c:	10120000 	.word	0x10120000
 8001790:	40020000 	.word	0x40020000
 8001794:	40020400 	.word	0x40020400

08001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179c:	b672      	cpsid	i
}
 800179e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <Error_Handler+0x8>
	...

080017a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HAL_MspInit+0x5c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a13      	ldr	r2, [pc, #76]	; (8001800 <HAL_MspInit+0x5c>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_MspInit+0x5c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_MspInit+0x5c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <HAL_MspInit+0x5c>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_MspInit+0x5c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017e2:	2007      	movs	r0, #7
 80017e4:	f000 fc0c 	bl	8002000 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	2005      	movs	r0, #5
 80017ee:	f000 fc12 	bl	8002016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80017f2:	2005      	movs	r0, #5
 80017f4:	f000 fc2b 	bl	800204e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40023800 	.word	0x40023800

08001804 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a19      	ldr	r2, [pc, #100]	; (8001888 <HAL_I2C_MspInit+0x84>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d12c      	bne.n	8001880 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_I2C_MspInit+0x88>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a17      	ldr	r2, [pc, #92]	; (800188c <HAL_I2C_MspInit+0x88>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_I2C_MspInit+0x88>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001842:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001848:	2312      	movs	r3, #18
 800184a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800184c:	2301      	movs	r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001854:	2304      	movs	r3, #4
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	480c      	ldr	r0, [pc, #48]	; (8001890 <HAL_I2C_MspInit+0x8c>)
 8001860:	f000 fc10 	bl	8002084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_I2C_MspInit+0x88>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_I2C_MspInit+0x88>)
 800186e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_I2C_MspInit+0x88>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001880:	bf00      	nop
 8001882:	3728      	adds	r7, #40	; 0x28
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40005400 	.word	0x40005400
 800188c:	40023800 	.word	0x40023800
 8001890:	40020400 	.word	0x40020400

08001894 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a28      	ldr	r2, [pc, #160]	; (8001954 <HAL_I2S_MspInit+0xc0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d14a      	bne.n	800194c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b27      	ldr	r3, [pc, #156]	; (8001958 <HAL_I2S_MspInit+0xc4>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a26      	ldr	r2, [pc, #152]	; (8001958 <HAL_I2S_MspInit+0xc4>)
 80018c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b24      	ldr	r3, [pc, #144]	; (8001958 <HAL_I2S_MspInit+0xc4>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <HAL_I2S_MspInit+0xc4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <HAL_I2S_MspInit+0xc4>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_I2S_MspInit+0xc4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b19      	ldr	r3, [pc, #100]	; (8001958 <HAL_I2S_MspInit+0xc4>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a18      	ldr	r2, [pc, #96]	; (8001958 <HAL_I2S_MspInit+0xc4>)
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <HAL_I2S_MspInit+0xc4>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800190a:	2310      	movs	r3, #16
 800190c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800191a:	2306      	movs	r3, #6
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	480d      	ldr	r0, [pc, #52]	; (800195c <HAL_I2S_MspInit+0xc8>)
 8001926:	f000 fbad 	bl	8002084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800192a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800192e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800193c:	2306      	movs	r3, #6
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4619      	mov	r1, r3
 8001946:	4806      	ldr	r0, [pc, #24]	; (8001960 <HAL_I2S_MspInit+0xcc>)
 8001948:	f000 fb9c 	bl	8002084 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800194c:	bf00      	nop
 800194e:	3728      	adds	r7, #40	; 0x28
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40003c00 	.word	0x40003c00
 8001958:	40023800 	.word	0x40023800
 800195c:	40020000 	.word	0x40020000
 8001960:	40020800 	.word	0x40020800

08001964 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	; 0x30
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a41      	ldr	r2, [pc, #260]	; (8001a88 <HAL_SPI_MspInit+0x124>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d12c      	bne.n	80019e0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	4b40      	ldr	r3, [pc, #256]	; (8001a8c <HAL_SPI_MspInit+0x128>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a3f      	ldr	r2, [pc, #252]	; (8001a8c <HAL_SPI_MspInit+0x128>)
 8001990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b3d      	ldr	r3, [pc, #244]	; (8001a8c <HAL_SPI_MspInit+0x128>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199e:	61bb      	str	r3, [r7, #24]
 80019a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	4b39      	ldr	r3, [pc, #228]	; (8001a8c <HAL_SPI_MspInit+0x128>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a38      	ldr	r2, [pc, #224]	; (8001a8c <HAL_SPI_MspInit+0x128>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <HAL_SPI_MspInit+0x128>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80019be:	23e0      	movs	r3, #224	; 0xe0
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ce:	2305      	movs	r3, #5
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	482d      	ldr	r0, [pc, #180]	; (8001a90 <HAL_SPI_MspInit+0x12c>)
 80019da:	f000 fb53 	bl	8002084 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019de:	e04f      	b.n	8001a80 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a2b      	ldr	r2, [pc, #172]	; (8001a94 <HAL_SPI_MspInit+0x130>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d14a      	bne.n	8001a80 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <HAL_SPI_MspInit+0x128>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a26      	ldr	r2, [pc, #152]	; (8001a8c <HAL_SPI_MspInit+0x128>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
 80019fa:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_SPI_MspInit+0x128>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_SPI_MspInit+0x128>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a1f      	ldr	r2, [pc, #124]	; (8001a8c <HAL_SPI_MspInit+0x128>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <HAL_SPI_MspInit+0x128>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <HAL_SPI_MspInit+0x128>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a18      	ldr	r2, [pc, #96]	; (8001a8c <HAL_SPI_MspInit+0x128>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_SPI_MspInit+0x128>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a4e:	2305      	movs	r3, #5
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4619      	mov	r1, r3
 8001a58:	480f      	ldr	r0, [pc, #60]	; (8001a98 <HAL_SPI_MspInit+0x134>)
 8001a5a:	f000 fb13 	bl	8002084 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001a5e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a70:	2305      	movs	r3, #5
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4808      	ldr	r0, [pc, #32]	; (8001a9c <HAL_SPI_MspInit+0x138>)
 8001a7c:	f000 fb02 	bl	8002084 <HAL_GPIO_Init>
}
 8001a80:	bf00      	nop
 8001a82:	3730      	adds	r7, #48	; 0x30
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40013000 	.word	0x40013000
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40003800 	.word	0x40003800
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	40020400 	.word	0x40020400

08001aa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab0:	d10d      	bne.n	8001ace <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_TIM_Base_MspInit+0x3c>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a08      	ldr	r2, [pc, #32]	; (8001adc <HAL_TIM_Base_MspInit+0x3c>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_TIM_Base_MspInit+0x3c>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800

08001ae0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b00:	d11e      	bne.n	8001b40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <HAL_TIM_MspPostInit+0x68>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <HAL_TIM_MspPostInit+0x68>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <HAL_TIM_MspPostInit+0x68>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b30:	2301      	movs	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4804      	ldr	r0, [pc, #16]	; (8001b4c <HAL_TIM_MspPostInit+0x6c>)
 8001b3c:	f000 faa2 	bl	8002084 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b40:	bf00      	nop
 8001b42:	3720      	adds	r7, #32
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020000 	.word	0x40020000

08001b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <NMI_Handler+0x4>

08001b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <HardFault_Handler+0x4>

08001b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <MemManage_Handler+0x4>

08001b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <BusFault_Handler+0x4>

08001b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <UsageFault_Handler+0x4>

08001b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b9c:	f000 f91c 	bl	8001dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 8001bb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bbc:	481b      	ldr	r0, [pc, #108]	; (8001c2c <TIM2_IRQHandler+0x78>)
 8001bbe:	f000 fc16 	bl	80023ee <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <TIM2_IRQHandler+0x7c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d111      	bne.n	8001bee <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <TIM2_IRQHandler+0x80>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2bc8      	cmp	r3, #200	; 0xc8
 8001bd0:	dc0a      	bgt.n	8001be8 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <TIM2_IRQHandler+0x80>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <TIM2_IRQHandler+0x84>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <TIM2_IRQHandler+0x80>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <TIM2_IRQHandler+0x80>)
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e002      	b.n	8001bee <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <TIM2_IRQHandler+0x7c>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <TIM2_IRQHandler+0x7c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d114      	bne.n	8001c20 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <TIM2_IRQHandler+0x80>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b63      	cmp	r3, #99	; 0x63
 8001bfc:	dd0a      	ble.n	8001c14 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <TIM2_IRQHandler+0x80>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <TIM2_IRQHandler+0x84>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <TIM2_IRQHandler+0x80>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <TIM2_IRQHandler+0x80>)
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e005      	b.n	8001c20 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <TIM2_IRQHandler+0x7c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
		  i = 100;
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <TIM2_IRQHandler+0x80>)
 8001c1c:	2264      	movs	r2, #100	; 0x64
 8001c1e:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c20:	4805      	ldr	r0, [pc, #20]	; (8001c38 <TIM2_IRQHandler+0x84>)
 8001c22:	f004 f803 	bl	8005c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40020c00 	.word	0x40020c00
 8001c30:	200000b4 	.word	0x200000b4
 8001c34:	20000004 	.word	0x20000004
 8001c38:	200001cc 	.word	0x200001cc

08001c3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <OTG_FS_IRQHandler+0x10>)
 8001c42:	f000 fe59 	bl	80028f8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000638 	.word	0x20000638

08001c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c58:	4a14      	ldr	r2, [pc, #80]	; (8001cac <_sbrk+0x5c>)
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <_sbrk+0x60>)
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <_sbrk+0x64>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <_sbrk+0x64>)
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <_sbrk+0x68>)
 8001c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d207      	bcs.n	8001c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c80:	f007 f85a 	bl	8008d38 <__errno>
 8001c84:	4603      	mov	r3, r0
 8001c86:	220c      	movs	r2, #12
 8001c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c8e:	e009      	b.n	8001ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <_sbrk+0x64>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c96:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <_sbrk+0x64>)
 8001ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20020000 	.word	0x20020000
 8001cb0:	00000400 	.word	0x00000400
 8001cb4:	200000b8 	.word	0x200000b8
 8001cb8:	20000950 	.word	0x20000950

08001cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <SystemInit+0x20>)
 8001cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <SystemInit+0x20>)
 8001cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ce4:	480d      	ldr	r0, [pc, #52]	; (8001d1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ce6:	490e      	ldr	r1, [pc, #56]	; (8001d20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ce8:	4a0e      	ldr	r2, [pc, #56]	; (8001d24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cec:	e002      	b.n	8001cf4 <LoopCopyDataInit>

08001cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf2:	3304      	adds	r3, #4

08001cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf8:	d3f9      	bcc.n	8001cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfa:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cfc:	4c0b      	ldr	r4, [pc, #44]	; (8001d2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d00:	e001      	b.n	8001d06 <LoopFillZerobss>

08001d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d04:	3204      	adds	r2, #4

08001d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d08:	d3fb      	bcc.n	8001d02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d0a:	f7ff ffd7 	bl	8001cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d0e:	f007 f819 	bl	8008d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d12:	f7ff f9b3 	bl	800107c <main>
  bx  lr    
 8001d16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d20:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001d24:	0800922c 	.word	0x0800922c
  ldr r2, =_sbss
 8001d28:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001d2c:	2000094c 	.word	0x2000094c

08001d30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d30:	e7fe      	b.n	8001d30 <ADC_IRQHandler>
	...

08001d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <HAL_Init+0x40>)
 8001d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_Init+0x40>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_Init+0x40>)
 8001d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_Init+0x40>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <HAL_Init+0x40>)
 8001d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	f000 f94f 	bl	8002000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f000 f808 	bl	8001d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d68:	f7ff fd1c 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023c00 	.word	0x40023c00

08001d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_InitTick+0x54>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_InitTick+0x58>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 f967 	bl	800206a <HAL_SYSTICK_Config>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00e      	b.n	8001dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b0f      	cmp	r3, #15
 8001daa:	d80a      	bhi.n	8001dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dac:	2200      	movs	r2, #0
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db4:	f000 f92f 	bl	8002016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db8:	4a06      	ldr	r2, [pc, #24]	; (8001dd4 <HAL_InitTick+0x5c>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e000      	b.n	8001dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	20000010 	.word	0x20000010
 8001dd4:	2000000c 	.word	0x2000000c

08001dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_IncTick+0x20>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_IncTick+0x24>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_IncTick+0x24>)
 8001dea:	6013      	str	r3, [r2, #0]
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000010 	.word	0x20000010
 8001dfc:	2000025c 	.word	0x2000025c

08001e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return uwTick;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_GetTick+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	2000025c 	.word	0x2000025c

08001e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff ffee 	bl	8001e00 <HAL_GetTick>
 8001e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e30:	d005      	beq.n	8001e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_Delay+0x44>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e3e:	bf00      	nop
 8001e40:	f7ff ffde 	bl	8001e00 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d8f7      	bhi.n	8001e40 <HAL_Delay+0x28>
  {
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000010 	.word	0x20000010

08001e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e92:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	60d3      	str	r3, [r2, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db0b      	blt.n	8001eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 021f 	and.w	r2, r3, #31
 8001edc:	4907      	ldr	r1, [pc, #28]	; (8001efc <__NVIC_EnableIRQ+0x38>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000e100 	.word	0xe000e100

08001f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	6039      	str	r1, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	db0a      	blt.n	8001f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	490c      	ldr	r1, [pc, #48]	; (8001f4c <__NVIC_SetPriority+0x4c>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	440b      	add	r3, r1
 8001f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f28:	e00a      	b.n	8001f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4908      	ldr	r1, [pc, #32]	; (8001f50 <__NVIC_SetPriority+0x50>)
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	3b04      	subs	r3, #4
 8001f38:	0112      	lsls	r2, r2, #4
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	761a      	strb	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f1c3 0307 	rsb	r3, r3, #7
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	bf28      	it	cs
 8001f72:	2304      	movcs	r3, #4
 8001f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d902      	bls.n	8001f84 <NVIC_EncodePriority+0x30>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3b03      	subs	r3, #3
 8001f82:	e000      	b.n	8001f86 <NVIC_EncodePriority+0x32>
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	401a      	ands	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	4313      	orrs	r3, r2
         );
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fcc:	d301      	bcc.n	8001fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00f      	b.n	8001ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <SysTick_Config+0x40>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fda:	210f      	movs	r1, #15
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fe0:	f7ff ff8e 	bl	8001f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <SysTick_Config+0x40>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <SysTick_Config+0x40>)
 8001fec:	2207      	movs	r2, #7
 8001fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	e000e010 	.word	0xe000e010

08002000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff29 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002028:	f7ff ff3e 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 800202c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	6978      	ldr	r0, [r7, #20]
 8002034:	f7ff ff8e 	bl	8001f54 <NVIC_EncodePriority>
 8002038:	4602      	mov	r2, r0
 800203a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff5d 	bl	8001f00 <__NVIC_SetPriority>
}
 8002046:	bf00      	nop
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff31 	bl	8001ec4 <__NVIC_EnableIRQ>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ffa2 	bl	8001fbc <SysTick_Config>
 8002078:	4603      	mov	r3, r0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	e16b      	b.n	8002378 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a0:	2201      	movs	r2, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	f040 815a 	bne.w	8002372 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d005      	beq.n	80020d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d130      	bne.n	8002138 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2203      	movs	r2, #3
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 0201 	and.w	r2, r3, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b03      	cmp	r3, #3
 8002142:	d017      	beq.n	8002174 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d123      	bne.n	80021c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	08da      	lsrs	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3208      	adds	r2, #8
 8002188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	220f      	movs	r2, #15
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	08da      	lsrs	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3208      	adds	r2, #8
 80021c2:	69b9      	ldr	r1, [r7, #24]
 80021c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	2203      	movs	r2, #3
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0203 	and.w	r2, r3, #3
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80b4 	beq.w	8002372 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	4b60      	ldr	r3, [pc, #384]	; (8002390 <HAL_GPIO_Init+0x30c>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	4a5f      	ldr	r2, [pc, #380]	; (8002390 <HAL_GPIO_Init+0x30c>)
 8002214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002218:	6453      	str	r3, [r2, #68]	; 0x44
 800221a:	4b5d      	ldr	r3, [pc, #372]	; (8002390 <HAL_GPIO_Init+0x30c>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002226:	4a5b      	ldr	r2, [pc, #364]	; (8002394 <HAL_GPIO_Init+0x310>)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	3302      	adds	r3, #2
 800222e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	220f      	movs	r2, #15
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a52      	ldr	r2, [pc, #328]	; (8002398 <HAL_GPIO_Init+0x314>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d02b      	beq.n	80022aa <HAL_GPIO_Init+0x226>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a51      	ldr	r2, [pc, #324]	; (800239c <HAL_GPIO_Init+0x318>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d025      	beq.n	80022a6 <HAL_GPIO_Init+0x222>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a50      	ldr	r2, [pc, #320]	; (80023a0 <HAL_GPIO_Init+0x31c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01f      	beq.n	80022a2 <HAL_GPIO_Init+0x21e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4f      	ldr	r2, [pc, #316]	; (80023a4 <HAL_GPIO_Init+0x320>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d019      	beq.n	800229e <HAL_GPIO_Init+0x21a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4e      	ldr	r2, [pc, #312]	; (80023a8 <HAL_GPIO_Init+0x324>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_GPIO_Init+0x216>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4d      	ldr	r2, [pc, #308]	; (80023ac <HAL_GPIO_Init+0x328>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00d      	beq.n	8002296 <HAL_GPIO_Init+0x212>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4c      	ldr	r2, [pc, #304]	; (80023b0 <HAL_GPIO_Init+0x32c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d007      	beq.n	8002292 <HAL_GPIO_Init+0x20e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4b      	ldr	r2, [pc, #300]	; (80023b4 <HAL_GPIO_Init+0x330>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_GPIO_Init+0x20a>
 800228a:	2307      	movs	r3, #7
 800228c:	e00e      	b.n	80022ac <HAL_GPIO_Init+0x228>
 800228e:	2308      	movs	r3, #8
 8002290:	e00c      	b.n	80022ac <HAL_GPIO_Init+0x228>
 8002292:	2306      	movs	r3, #6
 8002294:	e00a      	b.n	80022ac <HAL_GPIO_Init+0x228>
 8002296:	2305      	movs	r3, #5
 8002298:	e008      	b.n	80022ac <HAL_GPIO_Init+0x228>
 800229a:	2304      	movs	r3, #4
 800229c:	e006      	b.n	80022ac <HAL_GPIO_Init+0x228>
 800229e:	2303      	movs	r3, #3
 80022a0:	e004      	b.n	80022ac <HAL_GPIO_Init+0x228>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e002      	b.n	80022ac <HAL_GPIO_Init+0x228>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_GPIO_Init+0x228>
 80022aa:	2300      	movs	r3, #0
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	f002 0203 	and.w	r2, r2, #3
 80022b2:	0092      	lsls	r2, r2, #2
 80022b4:	4093      	lsls	r3, r2
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022bc:	4935      	ldr	r1, [pc, #212]	; (8002394 <HAL_GPIO_Init+0x310>)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	3302      	adds	r3, #2
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ca:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <HAL_GPIO_Init+0x334>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ee:	4a32      	ldr	r2, [pc, #200]	; (80023b8 <HAL_GPIO_Init+0x334>)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022f4:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <HAL_GPIO_Init+0x334>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002318:	4a27      	ldr	r2, [pc, #156]	; (80023b8 <HAL_GPIO_Init+0x334>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_GPIO_Init+0x334>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002342:	4a1d      	ldr	r2, [pc, #116]	; (80023b8 <HAL_GPIO_Init+0x334>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002348:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <HAL_GPIO_Init+0x334>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800236c:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <HAL_GPIO_Init+0x334>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3301      	adds	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2b0f      	cmp	r3, #15
 800237c:	f67f ae90 	bls.w	80020a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800
 8002394:	40013800 	.word	0x40013800
 8002398:	40020000 	.word	0x40020000
 800239c:	40020400 	.word	0x40020400
 80023a0:	40020800 	.word	0x40020800
 80023a4:	40020c00 	.word	0x40020c00
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40021400 	.word	0x40021400
 80023b0:	40021800 	.word	0x40021800
 80023b4:	40021c00 	.word	0x40021c00
 80023b8:	40013c00 	.word	0x40013c00

080023bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
 80023c8:	4613      	mov	r3, r2
 80023ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023cc:	787b      	ldrb	r3, [r7, #1]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d8:	e003      	b.n	80023e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	041a      	lsls	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	619a      	str	r2, [r3, #24]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b085      	sub	sp, #20
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002400:	887a      	ldrh	r2, [r7, #2]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4013      	ands	r3, r2
 8002406:	041a      	lsls	r2, r3, #16
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	43d9      	mvns	r1, r3
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	400b      	ands	r3, r1
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	619a      	str	r2, [r3, #24]
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002422:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002424:	b08f      	sub	sp, #60	; 0x3c
 8002426:	af0a      	add	r7, sp, #40	; 0x28
 8002428:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e054      	b.n	80024de <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f006 fa16 	bl	8008880 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2203      	movs	r2, #3
 8002458:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f004 fa82 	bl	800697c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	687e      	ldr	r6, [r7, #4]
 8002480:	466d      	mov	r5, sp
 8002482:	f106 0410 	add.w	r4, r6, #16
 8002486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800248c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002492:	e885 0003 	stmia.w	r5, {r0, r1}
 8002496:	1d33      	adds	r3, r6, #4
 8002498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800249a:	6838      	ldr	r0, [r7, #0]
 800249c:	f004 f9fc 	bl	8006898 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2101      	movs	r1, #1
 80024a6:	4618      	mov	r0, r3
 80024a8:	f004 fa79 	bl	800699e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	687e      	ldr	r6, [r7, #4]
 80024b4:	466d      	mov	r5, sp
 80024b6:	f106 0410 	add.w	r4, r6, #16
 80024ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80024ca:	1d33      	adds	r3, r6, #4
 80024cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ce:	6838      	ldr	r0, [r7, #0]
 80024d0:	f004 fb8c 	bl	8006bec <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024e6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80024e6:	b590      	push	{r4, r7, lr}
 80024e8:	b089      	sub	sp, #36	; 0x24
 80024ea:	af04      	add	r7, sp, #16
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	4608      	mov	r0, r1
 80024f0:	4611      	mov	r1, r2
 80024f2:	461a      	mov	r2, r3
 80024f4:	4603      	mov	r3, r0
 80024f6:	70fb      	strb	r3, [r7, #3]
 80024f8:	460b      	mov	r3, r1
 80024fa:	70bb      	strb	r3, [r7, #2]
 80024fc:	4613      	mov	r3, r2
 80024fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_HCD_HC_Init+0x28>
 800250a:	2302      	movs	r3, #2
 800250c:	e076      	b.n	80025fc <HAL_HCD_HC_Init+0x116>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	212c      	movs	r1, #44	; 0x2c
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	333d      	adds	r3, #61	; 0x3d
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	212c      	movs	r1, #44	; 0x2c
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	3338      	adds	r3, #56	; 0x38
 8002536:	787a      	ldrb	r2, [r7, #1]
 8002538:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	3340      	adds	r3, #64	; 0x40
 8002548:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800254a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	212c      	movs	r1, #44	; 0x2c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	3339      	adds	r3, #57	; 0x39
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	212c      	movs	r1, #44	; 0x2c
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	333f      	adds	r3, #63	; 0x3f
 800256c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002570:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	78ba      	ldrb	r2, [r7, #2]
 8002576:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800257a:	b2d0      	uxtb	r0, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	333a      	adds	r3, #58	; 0x3a
 8002588:	4602      	mov	r2, r0
 800258a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800258c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002590:	2b00      	cmp	r3, #0
 8002592:	da09      	bge.n	80025a8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	212c      	movs	r1, #44	; 0x2c
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	333b      	adds	r3, #59	; 0x3b
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
 80025a6:	e008      	b.n	80025ba <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	333b      	adds	r3, #59	; 0x3b
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	333c      	adds	r3, #60	; 0x3c
 80025c8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80025cc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	787c      	ldrb	r4, [r7, #1]
 80025d4:	78ba      	ldrb	r2, [r7, #2]
 80025d6:	78f9      	ldrb	r1, [r7, #3]
 80025d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025da:	9302      	str	r3, [sp, #8]
 80025dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	4623      	mov	r3, r4
 80025ea:	f004 fc57 	bl	8006e9c <USB_HC_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	bd90      	pop	{r4, r7, pc}

08002604 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_HCD_HC_Halt+0x1e>
 800261e:	2302      	movs	r3, #2
 8002620:	e00f      	b.n	8002642 <HAL_HCD_HC_Halt+0x3e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	78fa      	ldrb	r2, [r7, #3]
 8002630:	4611      	mov	r1, r2
 8002632:	4618      	mov	r0, r3
 8002634:	f004 fe93 	bl	800735e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002640:	7bfb      	ldrb	r3, [r7, #15]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	4608      	mov	r0, r1
 8002656:	4611      	mov	r1, r2
 8002658:	461a      	mov	r2, r3
 800265a:	4603      	mov	r3, r0
 800265c:	70fb      	strb	r3, [r7, #3]
 800265e:	460b      	mov	r3, r1
 8002660:	70bb      	strb	r3, [r7, #2]
 8002662:	4613      	mov	r3, r2
 8002664:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	333b      	adds	r3, #59	; 0x3b
 8002674:	78ba      	ldrb	r2, [r7, #2]
 8002676:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	333f      	adds	r3, #63	; 0x3f
 8002686:	787a      	ldrb	r2, [r7, #1]
 8002688:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800268a:	7c3b      	ldrb	r3, [r7, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d112      	bne.n	80026b6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	212c      	movs	r1, #44	; 0x2c
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	3342      	adds	r3, #66	; 0x42
 800269e:	2203      	movs	r2, #3
 80026a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	333d      	adds	r3, #61	; 0x3d
 80026b0:	7f3a      	ldrb	r2, [r7, #28]
 80026b2:	701a      	strb	r2, [r3, #0]
 80026b4:	e008      	b.n	80026c8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	212c      	movs	r1, #44	; 0x2c
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	3342      	adds	r3, #66	; 0x42
 80026c4:	2202      	movs	r2, #2
 80026c6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80026c8:	787b      	ldrb	r3, [r7, #1]
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	f200 80c6 	bhi.w	800285c <HAL_HCD_HC_SubmitRequest+0x210>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	080026e9 	.word	0x080026e9
 80026dc:	08002849 	.word	0x08002849
 80026e0:	0800274d 	.word	0x0800274d
 80026e4:	080027cb 	.word	0x080027cb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80026e8:	7c3b      	ldrb	r3, [r7, #16]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	f040 80b8 	bne.w	8002860 <HAL_HCD_HC_SubmitRequest+0x214>
 80026f0:	78bb      	ldrb	r3, [r7, #2]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 80b4 	bne.w	8002860 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80026f8:	8b3b      	ldrh	r3, [r7, #24]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d108      	bne.n	8002710 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	3355      	adds	r3, #85	; 0x55
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	3355      	adds	r3, #85	; 0x55
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	212c      	movs	r1, #44	; 0x2c
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	4413      	add	r3, r2
 8002730:	3342      	adds	r3, #66	; 0x42
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002736:	e093      	b.n	8002860 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	212c      	movs	r1, #44	; 0x2c
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	3342      	adds	r3, #66	; 0x42
 8002746:	2202      	movs	r2, #2
 8002748:	701a      	strb	r2, [r3, #0]
      break;
 800274a:	e089      	b.n	8002860 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800274c:	78bb      	ldrb	r3, [r7, #2]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d11d      	bne.n	800278e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	3355      	adds	r3, #85	; 0x55
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	212c      	movs	r1, #44	; 0x2c
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	4413      	add	r3, r2
 8002772:	3342      	adds	r3, #66	; 0x42
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002778:	e073      	b.n	8002862 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	3342      	adds	r3, #66	; 0x42
 8002788:	2202      	movs	r2, #2
 800278a:	701a      	strb	r2, [r3, #0]
      break;
 800278c:	e069      	b.n	8002862 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	3354      	adds	r3, #84	; 0x54
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	3342      	adds	r3, #66	; 0x42
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
      break;
 80027b4:	e055      	b.n	8002862 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	3342      	adds	r3, #66	; 0x42
 80027c4:	2202      	movs	r2, #2
 80027c6:	701a      	strb	r2, [r3, #0]
      break;
 80027c8:	e04b      	b.n	8002862 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80027ca:	78bb      	ldrb	r3, [r7, #2]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d11d      	bne.n	800280c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	212c      	movs	r1, #44	; 0x2c
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	3355      	adds	r3, #85	; 0x55
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d109      	bne.n	80027f8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3342      	adds	r3, #66	; 0x42
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80027f6:	e034      	b.n	8002862 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	3342      	adds	r3, #66	; 0x42
 8002806:	2202      	movs	r2, #2
 8002808:	701a      	strb	r2, [r3, #0]
      break;
 800280a:	e02a      	b.n	8002862 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	212c      	movs	r1, #44	; 0x2c
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	3354      	adds	r3, #84	; 0x54
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3342      	adds	r3, #66	; 0x42
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
      break;
 8002832:	e016      	b.n	8002862 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	3342      	adds	r3, #66	; 0x42
 8002842:	2202      	movs	r2, #2
 8002844:	701a      	strb	r2, [r3, #0]
      break;
 8002846:	e00c      	b.n	8002862 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	212c      	movs	r1, #44	; 0x2c
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	3342      	adds	r3, #66	; 0x42
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
      break;
 800285a:	e002      	b.n	8002862 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800285c:	bf00      	nop
 800285e:	e000      	b.n	8002862 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002860:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	3344      	adds	r3, #68	; 0x44
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	8b3a      	ldrh	r2, [r7, #24]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	202c      	movs	r0, #44	; 0x2c
 800287c:	fb00 f303 	mul.w	r3, r0, r3
 8002880:	440b      	add	r3, r1
 8002882:	334c      	adds	r3, #76	; 0x4c
 8002884:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	212c      	movs	r1, #44	; 0x2c
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	3360      	adds	r3, #96	; 0x60
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	3350      	adds	r3, #80	; 0x50
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	3339      	adds	r3, #57	; 0x39
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3361      	adds	r3, #97	; 0x61
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	222c      	movs	r2, #44	; 0x2c
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	3338      	adds	r3, #56	; 0x38
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	18d1      	adds	r1, r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	f004 fbe6 	bl	80070b8 <USB_HC_StartXfer>
 80028ec:	4603      	mov	r3, r0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop

080028f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f004 f929 	bl	8006b66 <USB_GetMode>
 8002914:	4603      	mov	r3, r0
 8002916:	2b01      	cmp	r3, #1
 8002918:	f040 80ef 	bne.w	8002afa <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f004 f90d 	bl	8006b40 <USB_ReadInterrupts>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80e5 	beq.w	8002af8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f004 f904 	bl	8006b40 <USB_ReadInterrupts>
 8002938:	4603      	mov	r3, r0
 800293a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800293e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002942:	d104      	bne.n	800294e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800294c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f004 f8f4 	bl	8006b40 <USB_ReadInterrupts>
 8002958:	4603      	mov	r3, r0
 800295a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002962:	d104      	bne.n	800296e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800296c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f004 f8e4 	bl	8006b40 <USB_ReadInterrupts>
 8002978:	4603      	mov	r3, r0
 800297a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800297e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002982:	d104      	bne.n	800298e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800298c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f004 f8d4 	bl	8006b40 <USB_ReadInterrupts>
 8002998:	4603      	mov	r3, r0
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d103      	bne.n	80029aa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2202      	movs	r2, #2
 80029a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f004 f8c6 	bl	8006b40 <USB_ReadInterrupts>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029be:	d115      	bne.n	80029ec <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80029c8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d108      	bne.n	80029ec <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f005 ffce 	bl	800897c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2101      	movs	r1, #1
 80029e6:	4618      	mov	r0, r3
 80029e8:	f004 f9bc 	bl	8006d64 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 f8a5 	bl	8006b40 <USB_ReadInterrupts>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a00:	d102      	bne.n	8002a08 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f001 f9e3 	bl	8003dce <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f004 f897 	bl	8006b40 <USB_ReadInterrupts>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d106      	bne.n	8002a2a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f005 ff91 	bl	8008944 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2208      	movs	r2, #8
 8002a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f004 f886 	bl	8006b40 <USB_ReadInterrupts>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b10      	cmp	r3, #16
 8002a3c:	d101      	bne.n	8002a42 <HAL_HCD_IRQHandler+0x14a>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_HCD_IRQHandler+0x14c>
 8002a42:	2300      	movs	r3, #0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d012      	beq.n	8002a6e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0210 	bic.w	r2, r2, #16
 8002a56:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f001 f8e6 	bl	8003c2a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699a      	ldr	r2, [r3, #24]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0210 	orr.w	r2, r2, #16
 8002a6c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f004 f864 	bl	8006b40 <USB_ReadInterrupts>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a82:	d13a      	bne.n	8002afa <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f004 fc57 	bl	800733c <USB_HC_ReadInterrupt>
 8002a8e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	e025      	b.n	8002ae2 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d018      	beq.n	8002adc <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac0:	d106      	bne.n	8002ad0 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f88f 	bl	8002bec <HCD_HC_IN_IRQHandler>
 8002ace:	e005      	b.n	8002adc <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fcaa 	bl	8003430 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d3d4      	bcc.n	8002a96 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af4:	615a      	str	r2, [r3, #20]
 8002af6:	e000      	b.n	8002afa <HAL_HCD_IRQHandler+0x202>
      return;
 8002af8:	bf00      	nop
    }
  }
}
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_HCD_Start+0x16>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e013      	b.n	8002b3e <HAL_HCD_Start+0x3e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f003 ff19 	bl	800695a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f004 f952 	bl	8006dd8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_HCD_Stop+0x16>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e00d      	b.n	8002b78 <HAL_HCD_Stop+0x32>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 fd51 	bl	8007610 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3360      	adds	r3, #96	; 0x60
 8002b9a:	781b      	ldrb	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3350      	adds	r3, #80	; 0x50
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f004 f94b 	bl	8006e78 <USB_GetCurrentFrame>
 8002be2:	4603      	mov	r3, r0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d119      	bne.n	8002c50 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	0151      	lsls	r1, r2, #5
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	440a      	add	r2, r1
 8002c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	60d3      	str	r3, [r2, #12]
 8002c4e:	e101      	b.n	8002e54 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c66:	d12b      	bne.n	8002cc0 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	461a      	mov	r2, r3
 8002c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	212c      	movs	r1, #44	; 0x2c
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	3361      	adds	r3, #97	; 0x61
 8002c8a:	2207      	movs	r2, #7
 8002c8c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	0151      	lsls	r1, r2, #5
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	440a      	add	r2, r1
 8002ca4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ca8:	f043 0302 	orr.w	r3, r3, #2
 8002cac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f004 fb50 	bl	800735e <USB_HC_Halt>
 8002cbe:	e0c9      	b.n	8002e54 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d109      	bne.n	8002cea <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	6093      	str	r3, [r2, #8]
 8002ce8:	e0b4      	b.n	8002e54 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d133      	bne.n	8002d68 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	0151      	lsls	r1, r2, #5
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	440a      	add	r2, r1
 8002d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d1a:	f043 0302 	orr.w	r3, r3, #2
 8002d1e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3361      	adds	r3, #97	; 0x61
 8002d2e:	2205      	movs	r2, #5
 8002d30:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2310      	movs	r3, #16
 8002d42:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d50:	461a      	mov	r2, r3
 8002d52:	2308      	movs	r3, #8
 8002d54:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f004 fafc 	bl	800735e <USB_HC_Halt>
 8002d66:	e075      	b.n	8002e54 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7e:	d134      	bne.n	8002dea <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	0151      	lsls	r1, r2, #5
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	440a      	add	r2, r1
 8002d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d9a:	f043 0302 	orr.w	r3, r3, #2
 8002d9e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	3361      	adds	r3, #97	; 0x61
 8002dae:	2208      	movs	r2, #8
 8002db0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2310      	movs	r3, #16
 8002dc2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dd6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f004 fabb 	bl	800735e <USB_HC_Halt>
 8002de8:	e034      	b.n	8002e54 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfc:	2b80      	cmp	r3, #128	; 0x80
 8002dfe:	d129      	bne.n	8002e54 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	0151      	lsls	r1, r2, #5
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	440a      	add	r2, r1
 8002e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e1a:	f043 0302 	orr.w	r3, r3, #2
 8002e1e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	212c      	movs	r1, #44	; 0x2c
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3361      	adds	r3, #97	; 0x61
 8002e2e:	2206      	movs	r2, #6
 8002e30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f004 fa8e 	bl	800735e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e6a:	d122      	bne.n	8002eb2 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	0151      	lsls	r1, r2, #5
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	440a      	add	r2, r1
 8002e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e86:	f043 0302 	orr.w	r3, r3, #2
 8002e8a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f004 fa61 	bl	800735e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eae:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002eb0:	e2ba      	b.n	8003428 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	f040 811b 	bne.w	8003100 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d019      	beq.n	8002f06 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	3348      	adds	r3, #72	; 0x48
 8002ee0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	0159      	lsls	r1, r3, #5
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	440b      	add	r3, r1
 8002eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002ef4:	1ad2      	subs	r2, r2, r3
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	202c      	movs	r0, #44	; 0x2c
 8002efc:	fb00 f303 	mul.w	r3, r0, r3
 8002f00:	440b      	add	r3, r1
 8002f02:	3350      	adds	r3, #80	; 0x50
 8002f04:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3361      	adds	r3, #97	; 0x61
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	335c      	adds	r3, #92	; 0x5c
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f36:	461a      	mov	r2, r3
 8002f38:	2301      	movs	r3, #1
 8002f3a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	333f      	adds	r3, #63	; 0x3f
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d009      	beq.n	8002f64 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	212c      	movs	r1, #44	; 0x2c
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	333f      	adds	r3, #63	; 0x3f
 8002f5e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d121      	bne.n	8002fa8 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	0151      	lsls	r1, r2, #5
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	440a      	add	r2, r1
 8002f7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f7e:	f043 0302 	orr.w	r3, r3, #2
 8002f82:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f004 f9e5 	bl	800735e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2310      	movs	r3, #16
 8002fa4:	6093      	str	r3, [r2, #8]
 8002fa6:	e066      	b.n	8003076 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	212c      	movs	r1, #44	; 0x2c
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	333f      	adds	r3, #63	; 0x3f
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d127      	bne.n	800300c <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	0151      	lsls	r1, r2, #5
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	440a      	add	r2, r1
 8002fd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fda:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3360      	adds	r3, #96	; 0x60
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	b2d9      	uxtb	r1, r3
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	202c      	movs	r0, #44	; 0x2c
 8002ff8:	fb00 f303 	mul.w	r3, r0, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3360      	adds	r3, #96	; 0x60
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f005 fcc7 	bl	8008998 <HAL_HCD_HC_NotifyURBChange_Callback>
 800300a:	e034      	b.n	8003076 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	212c      	movs	r1, #44	; 0x2c
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	4413      	add	r3, r2
 8003018:	333f      	adds	r3, #63	; 0x3f
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d12a      	bne.n	8003076 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	3360      	adds	r3, #96	; 0x60
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	3354      	adds	r3, #84	; 0x54
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	f083 0301 	eor.w	r3, r3, #1
 8003046:	b2d8      	uxtb	r0, r3
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	3354      	adds	r3, #84	; 0x54
 8003056:	4602      	mov	r2, r0
 8003058:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	b2d9      	uxtb	r1, r3
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	202c      	movs	r0, #44	; 0x2c
 8003064:	fb00 f303 	mul.w	r3, r0, r3
 8003068:	4413      	add	r3, r2
 800306a:	3360      	adds	r3, #96	; 0x60
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f005 fc91 	bl	8008998 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d12b      	bne.n	80030d6 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	3348      	adds	r3, #72	; 0x48
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	202c      	movs	r0, #44	; 0x2c
 8003094:	fb00 f202 	mul.w	r2, r0, r2
 8003098:	440a      	add	r2, r1
 800309a:	3240      	adds	r2, #64	; 0x40
 800309c:	8812      	ldrh	r2, [r2, #0]
 800309e:	fbb3 f3f2 	udiv	r3, r3, r2
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 81be 	beq.w	8003428 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	212c      	movs	r1, #44	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	3354      	adds	r3, #84	; 0x54
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	f083 0301 	eor.w	r3, r3, #1
 80030c0:	b2d8      	uxtb	r0, r3
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	212c      	movs	r1, #44	; 0x2c
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	3354      	adds	r3, #84	; 0x54
 80030d0:	4602      	mov	r2, r0
 80030d2:	701a      	strb	r2, [r3, #0]
}
 80030d4:	e1a8      	b.n	8003428 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	212c      	movs	r1, #44	; 0x2c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	3354      	adds	r3, #84	; 0x54
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	f083 0301 	eor.w	r3, r3, #1
 80030ea:	b2d8      	uxtb	r0, r3
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	212c      	movs	r1, #44	; 0x2c
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	3354      	adds	r3, #84	; 0x54
 80030fa:	4602      	mov	r2, r0
 80030fc:	701a      	strb	r2, [r3, #0]
}
 80030fe:	e193      	b.n	8003428 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4413      	add	r3, r2
 8003108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	f040 8106 	bne.w	8003324 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	0151      	lsls	r1, r2, #5
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	440a      	add	r2, r1
 800312e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003132:	f023 0302 	bic.w	r3, r3, #2
 8003136:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	212c      	movs	r1, #44	; 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	3361      	adds	r3, #97	; 0x61
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d109      	bne.n	8003160 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3360      	adds	r3, #96	; 0x60
 800315a:	2201      	movs	r2, #1
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	e0c9      	b.n	80032f4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	212c      	movs	r1, #44	; 0x2c
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	4413      	add	r3, r2
 800316c:	3361      	adds	r3, #97	; 0x61
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b05      	cmp	r3, #5
 8003172:	d109      	bne.n	8003188 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3360      	adds	r3, #96	; 0x60
 8003182:	2205      	movs	r2, #5
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	e0b5      	b.n	80032f4 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	212c      	movs	r1, #44	; 0x2c
 800318e:	fb01 f303 	mul.w	r3, r1, r3
 8003192:	4413      	add	r3, r2
 8003194:	3361      	adds	r3, #97	; 0x61
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b06      	cmp	r3, #6
 800319a:	d009      	beq.n	80031b0 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	212c      	movs	r1, #44	; 0x2c
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	3361      	adds	r3, #97	; 0x61
 80031aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d150      	bne.n	8003252 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	212c      	movs	r1, #44	; 0x2c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	335c      	adds	r3, #92	; 0x5c
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	202c      	movs	r0, #44	; 0x2c
 80031c8:	fb00 f303 	mul.w	r3, r0, r3
 80031cc:	440b      	add	r3, r1
 80031ce:	335c      	adds	r3, #92	; 0x5c
 80031d0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	212c      	movs	r1, #44	; 0x2c
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	4413      	add	r3, r2
 80031de:	335c      	adds	r3, #92	; 0x5c
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d912      	bls.n	800320c <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	212c      	movs	r1, #44	; 0x2c
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	335c      	adds	r3, #92	; 0x5c
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	212c      	movs	r1, #44	; 0x2c
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	4413      	add	r3, r2
 8003204:	3360      	adds	r3, #96	; 0x60
 8003206:	2204      	movs	r2, #4
 8003208:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800320a:	e073      	b.n	80032f4 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	3360      	adds	r3, #96	; 0x60
 800321a:	2202      	movs	r2, #2
 800321c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4413      	add	r3, r2
 8003226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003234:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800323c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324a:	461a      	mov	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003250:	e050      	b.n	80032f4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	212c      	movs	r1, #44	; 0x2c
 8003258:	fb01 f303 	mul.w	r3, r1, r3
 800325c:	4413      	add	r3, r2
 800325e:	3361      	adds	r3, #97	; 0x61
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d122      	bne.n	80032ac <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	212c      	movs	r1, #44	; 0x2c
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	4413      	add	r3, r2
 8003272:	3360      	adds	r3, #96	; 0x60
 8003274:	2202      	movs	r2, #2
 8003276:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4413      	add	r3, r2
 8003280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800328e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003296:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a4:	461a      	mov	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e023      	b.n	80032f4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	fb01 f303 	mul.w	r3, r1, r3
 80032b6:	4413      	add	r3, r2
 80032b8:	3361      	adds	r3, #97	; 0x61
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b07      	cmp	r3, #7
 80032be:	d119      	bne.n	80032f4 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	335c      	adds	r3, #92	; 0x5c
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	202c      	movs	r0, #44	; 0x2c
 80032d8:	fb00 f303 	mul.w	r3, r0, r3
 80032dc:	440b      	add	r3, r1
 80032de:	335c      	adds	r3, #92	; 0x5c
 80032e0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	3360      	adds	r3, #96	; 0x60
 80032f0:	2204      	movs	r2, #4
 80032f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003300:	461a      	mov	r2, r3
 8003302:	2302      	movs	r3, #2
 8003304:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	b2d9      	uxtb	r1, r3
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	202c      	movs	r0, #44	; 0x2c
 8003310:	fb00 f303 	mul.w	r3, r0, r3
 8003314:	4413      	add	r3, r2
 8003316:	3360      	adds	r3, #96	; 0x60
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f005 fb3b 	bl	8008998 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003322:	e081      	b.n	8003428 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4413      	add	r3, r2
 800332c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b10      	cmp	r3, #16
 8003338:	d176      	bne.n	8003428 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	212c      	movs	r1, #44	; 0x2c
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	4413      	add	r3, r2
 8003346:	333f      	adds	r3, #63	; 0x3f
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b03      	cmp	r3, #3
 800334c:	d121      	bne.n	8003392 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	335c      	adds	r3, #92	; 0x5c
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	0151      	lsls	r1, r2, #5
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	440a      	add	r2, r1
 8003376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800337a:	f043 0302 	orr.w	r3, r3, #2
 800337e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	4611      	mov	r1, r2
 800338a:	4618      	mov	r0, r3
 800338c:	f003 ffe7 	bl	800735e <USB_HC_Halt>
 8003390:	e041      	b.n	8003416 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	212c      	movs	r1, #44	; 0x2c
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	4413      	add	r3, r2
 800339e:	333f      	adds	r3, #63	; 0x3f
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	212c      	movs	r1, #44	; 0x2c
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	4413      	add	r3, r2
 80033b2:	333f      	adds	r3, #63	; 0x3f
 80033b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d12d      	bne.n	8003416 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	212c      	movs	r1, #44	; 0x2c
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	335c      	adds	r3, #92	; 0x5c
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d120      	bne.n	8003416 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3361      	adds	r3, #97	; 0x61
 80033e2:	2203      	movs	r2, #3
 80033e4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	0151      	lsls	r1, r2, #5
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	440a      	add	r2, r1
 80033fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f003 ffa4 	bl	800735e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	4413      	add	r3, r2
 800341e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003422:	461a      	mov	r2, r3
 8003424:	2310      	movs	r3, #16
 8003426:	6093      	str	r3, [r2, #8]
}
 8003428:	bf00      	nop
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4413      	add	r3, r2
 8003452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b04      	cmp	r3, #4
 800345e:	d119      	bne.n	8003494 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	4413      	add	r3, r2
 8003468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346c:	461a      	mov	r2, r3
 800346e:	2304      	movs	r3, #4
 8003470:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	4413      	add	r3, r2
 800347a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	0151      	lsls	r1, r2, #5
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	440a      	add	r2, r1
 8003488:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800348c:	f043 0302 	orr.w	r3, r3, #2
 8003490:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003492:	e3c6      	b.n	8003c22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	4413      	add	r3, r2
 800349c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d13e      	bne.n	8003528 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b6:	461a      	mov	r2, r3
 80034b8:	2320      	movs	r3, #32
 80034ba:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	333d      	adds	r3, #61	; 0x3d
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	f040 83a8 	bne.w	8003c22 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	212c      	movs	r1, #44	; 0x2c
 80034d8:	fb01 f303 	mul.w	r3, r1, r3
 80034dc:	4413      	add	r3, r2
 80034de:	333d      	adds	r3, #61	; 0x3d
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	212c      	movs	r1, #44	; 0x2c
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	3360      	adds	r3, #96	; 0x60
 80034f2:	2202      	movs	r2, #2
 80034f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	0151      	lsls	r1, r2, #5
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	440a      	add	r2, r1
 800350c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003510:	f043 0302 	orr.w	r3, r3, #2
 8003514:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f003 ff1c 	bl	800735e <USB_HC_Halt>
}
 8003526:	e37c      	b.n	8003c22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800353a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800353e:	d122      	bne.n	8003586 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	0151      	lsls	r1, r2, #5
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	440a      	add	r2, r1
 8003556:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800355a:	f043 0302 	orr.w	r3, r3, #2
 800355e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f003 fef7 	bl	800735e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	4413      	add	r3, r2
 8003578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357c:	461a      	mov	r2, r3
 800357e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003582:	6093      	str	r3, [r2, #8]
}
 8003584:	e34d      	b.n	8003c22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	4413      	add	r3, r2
 800358e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d150      	bne.n	800363e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	212c      	movs	r1, #44	; 0x2c
 80035a2:	fb01 f303 	mul.w	r3, r1, r3
 80035a6:	4413      	add	r3, r2
 80035a8:	335c      	adds	r3, #92	; 0x5c
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	d111      	bne.n	80035e8 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	212c      	movs	r1, #44	; 0x2c
 80035ca:	fb01 f303 	mul.w	r3, r1, r3
 80035ce:	4413      	add	r3, r2
 80035d0:	333d      	adds	r3, #61	; 0x3d
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e2:	461a      	mov	r2, r3
 80035e4:	2340      	movs	r3, #64	; 0x40
 80035e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	0151      	lsls	r1, r2, #5
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	440a      	add	r2, r1
 80035fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	4611      	mov	r1, r2
 8003612:	4618      	mov	r0, r3
 8003614:	f003 fea3 	bl	800735e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	4413      	add	r3, r2
 8003620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003624:	461a      	mov	r2, r3
 8003626:	2301      	movs	r3, #1
 8003628:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	212c      	movs	r1, #44	; 0x2c
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	4413      	add	r3, r2
 8003636:	3361      	adds	r3, #97	; 0x61
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
}
 800363c:	e2f1      	b.n	8003c22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	4413      	add	r3, r2
 8003646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	d13c      	bne.n	80036ce <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	212c      	movs	r1, #44	; 0x2c
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	4413      	add	r3, r2
 8003660:	3361      	adds	r3, #97	; 0x61
 8003662:	2204      	movs	r2, #4
 8003664:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	333d      	adds	r3, #61	; 0x3d
 8003674:	2201      	movs	r2, #1
 8003676:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	335c      	adds	r3, #92	; 0x5c
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	4413      	add	r3, r2
 8003692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	0151      	lsls	r1, r2, #5
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	440a      	add	r2, r1
 80036a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036a4:	f043 0302 	orr.w	r3, r3, #2
 80036a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	4611      	mov	r1, r2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f003 fe52 	bl	800735e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c6:	461a      	mov	r2, r3
 80036c8:	2340      	movs	r3, #64	; 0x40
 80036ca:	6093      	str	r3, [r2, #8]
}
 80036cc:	e2a9      	b.n	8003c22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d12a      	bne.n	800373a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f0:	461a      	mov	r2, r3
 80036f2:	2308      	movs	r3, #8
 80036f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	0151      	lsls	r1, r2, #5
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	440a      	add	r2, r1
 800370c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003710:	f043 0302 	orr.w	r3, r3, #2
 8003714:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	4611      	mov	r1, r2
 8003720:	4618      	mov	r0, r3
 8003722:	f003 fe1c 	bl	800735e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	3361      	adds	r3, #97	; 0x61
 8003734:	2205      	movs	r2, #5
 8003736:	701a      	strb	r2, [r3, #0]
}
 8003738:	e273      	b.n	8003c22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	4413      	add	r3, r2
 8003742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b10      	cmp	r3, #16
 800374e:	d150      	bne.n	80037f2 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	212c      	movs	r1, #44	; 0x2c
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	4413      	add	r3, r2
 800375c:	335c      	adds	r3, #92	; 0x5c
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	212c      	movs	r1, #44	; 0x2c
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	4413      	add	r3, r2
 800376e:	3361      	adds	r3, #97	; 0x61
 8003770:	2203      	movs	r2, #3
 8003772:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	333d      	adds	r3, #61	; 0x3d
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d112      	bne.n	80037ae <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	333c      	adds	r3, #60	; 0x3c
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d108      	bne.n	80037ae <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	212c      	movs	r1, #44	; 0x2c
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	333d      	adds	r3, #61	; 0x3d
 80037aa:	2201      	movs	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	0151      	lsls	r1, r2, #5
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	440a      	add	r2, r1
 80037c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037c8:	f043 0302 	orr.w	r3, r3, #2
 80037cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f003 fdc0 	bl	800735e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ea:	461a      	mov	r2, r3
 80037ec:	2310      	movs	r3, #16
 80037ee:	6093      	str	r3, [r2, #8]
}
 80037f0:	e217      	b.n	8003c22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003804:	2b80      	cmp	r3, #128	; 0x80
 8003806:	d174      	bne.n	80038f2 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d121      	bne.n	8003854 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	212c      	movs	r1, #44	; 0x2c
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	4413      	add	r3, r2
 800381c:	3361      	adds	r3, #97	; 0x61
 800381e:	2206      	movs	r2, #6
 8003820:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	4413      	add	r3, r2
 800382a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	0151      	lsls	r1, r2, #5
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	440a      	add	r2, r1
 8003838:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800383c:	f043 0302 	orr.w	r3, r3, #2
 8003840:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f003 fd86 	bl	800735e <USB_HC_Halt>
 8003852:	e044      	b.n	80038de <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	212c      	movs	r1, #44	; 0x2c
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	4413      	add	r3, r2
 8003860:	335c      	adds	r3, #92	; 0x5c
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	202c      	movs	r0, #44	; 0x2c
 800386c:	fb00 f303 	mul.w	r3, r0, r3
 8003870:	440b      	add	r3, r1
 8003872:	335c      	adds	r3, #92	; 0x5c
 8003874:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	212c      	movs	r1, #44	; 0x2c
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	4413      	add	r3, r2
 8003882:	335c      	adds	r3, #92	; 0x5c
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d920      	bls.n	80038cc <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	212c      	movs	r1, #44	; 0x2c
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	4413      	add	r3, r2
 8003896:	335c      	adds	r3, #92	; 0x5c
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	212c      	movs	r1, #44	; 0x2c
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	3360      	adds	r3, #96	; 0x60
 80038aa:	2204      	movs	r2, #4
 80038ac:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	b2d9      	uxtb	r1, r3
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	202c      	movs	r0, #44	; 0x2c
 80038b8:	fb00 f303 	mul.w	r3, r0, r3
 80038bc:	4413      	add	r3, r2
 80038be:	3360      	adds	r3, #96	; 0x60
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f005 f867 	bl	8008998 <HAL_HCD_HC_NotifyURBChange_Callback>
 80038ca:	e008      	b.n	80038de <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	212c      	movs	r1, #44	; 0x2c
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	3360      	adds	r3, #96	; 0x60
 80038da:	2202      	movs	r2, #2
 80038dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ea:	461a      	mov	r2, r3
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	6093      	str	r3, [r2, #8]
}
 80038f0:	e197      	b.n	8003c22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003908:	d134      	bne.n	8003974 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	4413      	add	r3, r2
 8003912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	0151      	lsls	r1, r2, #5
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	440a      	add	r2, r1
 8003920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003924:	f043 0302 	orr.w	r3, r3, #2
 8003928:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f003 fd12 	bl	800735e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	4413      	add	r3, r2
 8003942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003946:	461a      	mov	r2, r3
 8003948:	2310      	movs	r3, #16
 800394a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	4413      	add	r3, r2
 8003954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003958:	461a      	mov	r2, r3
 800395a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800395e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	3361      	adds	r3, #97	; 0x61
 800396e:	2208      	movs	r2, #8
 8003970:	701a      	strb	r2, [r3, #0]
}
 8003972:	e156      	b.n	8003c22 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	4413      	add	r3, r2
 800397c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b02      	cmp	r3, #2
 8003988:	f040 814b 	bne.w	8003c22 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	0151      	lsls	r1, r2, #5
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	440a      	add	r2, r1
 80039a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039a6:	f023 0302 	bic.w	r3, r3, #2
 80039aa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	212c      	movs	r1, #44	; 0x2c
 80039b2:	fb01 f303 	mul.w	r3, r1, r3
 80039b6:	4413      	add	r3, r2
 80039b8:	3361      	adds	r3, #97	; 0x61
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d179      	bne.n	8003ab4 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	212c      	movs	r1, #44	; 0x2c
 80039c6:	fb01 f303 	mul.w	r3, r1, r3
 80039ca:	4413      	add	r3, r2
 80039cc:	3360      	adds	r3, #96	; 0x60
 80039ce:	2201      	movs	r2, #1
 80039d0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	212c      	movs	r1, #44	; 0x2c
 80039d8:	fb01 f303 	mul.w	r3, r1, r3
 80039dc:	4413      	add	r3, r2
 80039de:	333f      	adds	r3, #63	; 0x3f
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d00a      	beq.n	80039fc <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	212c      	movs	r1, #44	; 0x2c
 80039ec:	fb01 f303 	mul.w	r3, r1, r3
 80039f0:	4413      	add	r3, r2
 80039f2:	333f      	adds	r3, #63	; 0x3f
 80039f4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	f040 80fc 	bne.w	8003bf4 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d142      	bne.n	8003a8a <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	212c      	movs	r1, #44	; 0x2c
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	4413      	add	r3, r2
 8003a10:	334c      	adds	r3, #76	; 0x4c
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80ed 	beq.w	8003bf4 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	212c      	movs	r1, #44	; 0x2c
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	334c      	adds	r3, #76	; 0x4c
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	202c      	movs	r0, #44	; 0x2c
 8003a30:	fb00 f202 	mul.w	r2, r0, r2
 8003a34:	440a      	add	r2, r1
 8003a36:	3240      	adds	r2, #64	; 0x40
 8003a38:	8812      	ldrh	r2, [r2, #0]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	202c      	movs	r0, #44	; 0x2c
 8003a44:	fb00 f202 	mul.w	r2, r0, r2
 8003a48:	440a      	add	r2, r1
 8003a4a:	3240      	adds	r2, #64	; 0x40
 8003a4c:	8812      	ldrh	r2, [r2, #0]
 8003a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 80ca 	beq.w	8003bf4 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	212c      	movs	r1, #44	; 0x2c
 8003a66:	fb01 f303 	mul.w	r3, r1, r3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3355      	adds	r3, #85	; 0x55
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	f083 0301 	eor.w	r3, r3, #1
 8003a74:	b2d8      	uxtb	r0, r3
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	212c      	movs	r1, #44	; 0x2c
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
 8003a80:	4413      	add	r3, r2
 8003a82:	3355      	adds	r3, #85	; 0x55
 8003a84:	4602      	mov	r2, r0
 8003a86:	701a      	strb	r2, [r3, #0]
 8003a88:	e0b4      	b.n	8003bf4 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	212c      	movs	r1, #44	; 0x2c
 8003a90:	fb01 f303 	mul.w	r3, r1, r3
 8003a94:	4413      	add	r3, r2
 8003a96:	3355      	adds	r3, #85	; 0x55
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	f083 0301 	eor.w	r3, r3, #1
 8003a9e:	b2d8      	uxtb	r0, r3
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	212c      	movs	r1, #44	; 0x2c
 8003aa6:	fb01 f303 	mul.w	r3, r1, r3
 8003aaa:	4413      	add	r3, r2
 8003aac:	3355      	adds	r3, #85	; 0x55
 8003aae:	4602      	mov	r2, r0
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	e09f      	b.n	8003bf4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	212c      	movs	r1, #44	; 0x2c
 8003aba:	fb01 f303 	mul.w	r3, r1, r3
 8003abe:	4413      	add	r3, r2
 8003ac0:	3361      	adds	r3, #97	; 0x61
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d109      	bne.n	8003adc <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	212c      	movs	r1, #44	; 0x2c
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3360      	adds	r3, #96	; 0x60
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	e08b      	b.n	8003bf4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	212c      	movs	r1, #44	; 0x2c
 8003ae2:	fb01 f303 	mul.w	r3, r1, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3361      	adds	r3, #97	; 0x61
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d109      	bne.n	8003b04 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	212c      	movs	r1, #44	; 0x2c
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	4413      	add	r3, r2
 8003afc:	3360      	adds	r3, #96	; 0x60
 8003afe:	2202      	movs	r2, #2
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	e077      	b.n	8003bf4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	3361      	adds	r3, #97	; 0x61
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b05      	cmp	r3, #5
 8003b16:	d109      	bne.n	8003b2c <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	212c      	movs	r1, #44	; 0x2c
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	3360      	adds	r3, #96	; 0x60
 8003b26:	2205      	movs	r2, #5
 8003b28:	701a      	strb	r2, [r3, #0]
 8003b2a:	e063      	b.n	8003bf4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3361      	adds	r3, #97	; 0x61
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b06      	cmp	r3, #6
 8003b3e:	d009      	beq.n	8003b54 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	212c      	movs	r1, #44	; 0x2c
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3361      	adds	r3, #97	; 0x61
 8003b4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d14f      	bne.n	8003bf4 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	335c      	adds	r3, #92	; 0x5c
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	202c      	movs	r0, #44	; 0x2c
 8003b6c:	fb00 f303 	mul.w	r3, r0, r3
 8003b70:	440b      	add	r3, r1
 8003b72:	335c      	adds	r3, #92	; 0x5c
 8003b74:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	212c      	movs	r1, #44	; 0x2c
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	4413      	add	r3, r2
 8003b82:	335c      	adds	r3, #92	; 0x5c
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d912      	bls.n	8003bb0 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	212c      	movs	r1, #44	; 0x2c
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	335c      	adds	r3, #92	; 0x5c
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	212c      	movs	r1, #44	; 0x2c
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3360      	adds	r3, #96	; 0x60
 8003baa:	2204      	movs	r2, #4
 8003bac:	701a      	strb	r2, [r3, #0]
 8003bae:	e021      	b.n	8003bf4 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	3360      	adds	r3, #96	; 0x60
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bd8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003be0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bee:	461a      	mov	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c00:	461a      	mov	r2, r3
 8003c02:	2302      	movs	r3, #2
 8003c04:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	b2d9      	uxtb	r1, r3
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	202c      	movs	r0, #44	; 0x2c
 8003c10:	fb00 f303 	mul.w	r3, r0, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	3360      	adds	r3, #96	; 0x60
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f004 febb 	bl	8008998 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c22:	bf00      	nop
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b08a      	sub	sp, #40	; 0x28
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	0c5b      	lsrs	r3, r3, #17
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c5e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d004      	beq.n	8003c70 <HCD_RXQLVL_IRQHandler+0x46>
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	f000 80a9 	beq.w	8003dc0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003c6e:	e0aa      	b.n	8003dc6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 80a6 	beq.w	8003dc4 <HCD_RXQLVL_IRQHandler+0x19a>
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	212c      	movs	r1, #44	; 0x2c
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	3344      	adds	r3, #68	; 0x44
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 809b 	beq.w	8003dc4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	212c      	movs	r1, #44	; 0x2c
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	4413      	add	r3, r2
 8003c9a:	3350      	adds	r3, #80	; 0x50
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	441a      	add	r2, r3
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	202c      	movs	r0, #44	; 0x2c
 8003ca8:	fb00 f303 	mul.w	r3, r0, r3
 8003cac:	440b      	add	r3, r1
 8003cae:	334c      	adds	r3, #76	; 0x4c
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d87a      	bhi.n	8003dac <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	212c      	movs	r1, #44	; 0x2c
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3344      	adds	r3, #68	; 0x44
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	b292      	uxth	r2, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	f002 ff0d 	bl	8006aee <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	212c      	movs	r1, #44	; 0x2c
 8003cda:	fb01 f303 	mul.w	r3, r1, r3
 8003cde:	4413      	add	r3, r2
 8003ce0:	3344      	adds	r3, #68	; 0x44
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	441a      	add	r2, r3
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	202c      	movs	r0, #44	; 0x2c
 8003cee:	fb00 f303 	mul.w	r3, r0, r3
 8003cf2:	440b      	add	r3, r1
 8003cf4:	3344      	adds	r3, #68	; 0x44
 8003cf6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	212c      	movs	r1, #44	; 0x2c
 8003cfe:	fb01 f303 	mul.w	r3, r1, r3
 8003d02:	4413      	add	r3, r2
 8003d04:	3350      	adds	r3, #80	; 0x50
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	441a      	add	r2, r3
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	202c      	movs	r0, #44	; 0x2c
 8003d12:	fb00 f303 	mul.w	r3, r0, r3
 8003d16:	440b      	add	r3, r1
 8003d18:	3350      	adds	r3, #80	; 0x50
 8003d1a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	0cdb      	lsrs	r3, r3, #19
 8003d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d30:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	212c      	movs	r1, #44	; 0x2c
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3340      	adds	r3, #64	; 0x40
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d13c      	bne.n	8003dc4 <HCD_RXQLVL_IRQHandler+0x19a>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d039      	beq.n	8003dc4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d66:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d6e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	212c      	movs	r1, #44	; 0x2c
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3354      	adds	r3, #84	; 0x54
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	f083 0301 	eor.w	r3, r3, #1
 8003d96:	b2d8      	uxtb	r0, r3
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	3354      	adds	r3, #84	; 0x54
 8003da6:	4602      	mov	r2, r0
 8003da8:	701a      	strb	r2, [r3, #0]
      break;
 8003daa:	e00b      	b.n	8003dc4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	212c      	movs	r1, #44	; 0x2c
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	3360      	adds	r3, #96	; 0x60
 8003dba:	2204      	movs	r2, #4
 8003dbc:	701a      	strb	r2, [r3, #0]
      break;
 8003dbe:	e001      	b.n	8003dc4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003dc0:	bf00      	nop
 8003dc2:	e000      	b.n	8003dc6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003dc4:	bf00      	nop
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	3728      	adds	r7, #40	; 0x28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b086      	sub	sp, #24
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003dfa:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d10b      	bne.n	8003e1e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d102      	bne.n	8003e16 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f004 fda5 	bl	8008960 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	f043 0302 	orr.w	r3, r3, #2
 8003e1c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d132      	bne.n	8003e8e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f043 0308 	orr.w	r3, r3, #8
 8003e2e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d126      	bne.n	8003e88 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d113      	bne.n	8003e6a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003e48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e4c:	d106      	bne.n	8003e5c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2102      	movs	r1, #2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f002 ff85 	bl	8006d64 <USB_InitFSLSPClkSel>
 8003e5a:	e011      	b.n	8003e80 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2101      	movs	r1, #1
 8003e62:	4618      	mov	r0, r3
 8003e64:	f002 ff7e 	bl	8006d64 <USB_InitFSLSPClkSel>
 8003e68:	e00a      	b.n	8003e80 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d106      	bne.n	8003e80 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003e7e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f004 fd97 	bl	80089b4 <HAL_HCD_PortEnabled_Callback>
 8003e86:	e002      	b.n	8003e8e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f004 fda1 	bl	80089d0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d103      	bne.n	8003ea0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f043 0320 	orr.w	r3, r3, #32
 8003e9e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	6013      	str	r3, [r2, #0]
}
 8003eac:	bf00      	nop
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e12b      	b.n	800411e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fd fc92 	bl	8001804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2224      	movs	r2, #36	; 0x24
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0201 	bic.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f18:	f001 f9fc 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
 8003f1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4a81      	ldr	r2, [pc, #516]	; (8004128 <HAL_I2C_Init+0x274>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d807      	bhi.n	8003f38 <HAL_I2C_Init+0x84>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a80      	ldr	r2, [pc, #512]	; (800412c <HAL_I2C_Init+0x278>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	bf94      	ite	ls
 8003f30:	2301      	movls	r3, #1
 8003f32:	2300      	movhi	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	e006      	b.n	8003f46 <HAL_I2C_Init+0x92>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4a7d      	ldr	r2, [pc, #500]	; (8004130 <HAL_I2C_Init+0x27c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	bf94      	ite	ls
 8003f40:	2301      	movls	r3, #1
 8003f42:	2300      	movhi	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0e7      	b.n	800411e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4a78      	ldr	r2, [pc, #480]	; (8004134 <HAL_I2C_Init+0x280>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	0c9b      	lsrs	r3, r3, #18
 8003f58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4a6a      	ldr	r2, [pc, #424]	; (8004128 <HAL_I2C_Init+0x274>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d802      	bhi.n	8003f88 <HAL_I2C_Init+0xd4>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	3301      	adds	r3, #1
 8003f86:	e009      	b.n	8003f9c <HAL_I2C_Init+0xe8>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f8e:	fb02 f303 	mul.w	r3, r2, r3
 8003f92:	4a69      	ldr	r2, [pc, #420]	; (8004138 <HAL_I2C_Init+0x284>)
 8003f94:	fba2 2303 	umull	r2, r3, r2, r3
 8003f98:	099b      	lsrs	r3, r3, #6
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	495c      	ldr	r1, [pc, #368]	; (8004128 <HAL_I2C_Init+0x274>)
 8003fb8:	428b      	cmp	r3, r1
 8003fba:	d819      	bhi.n	8003ff0 <HAL_I2C_Init+0x13c>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1e59      	subs	r1, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fca:	1c59      	adds	r1, r3, #1
 8003fcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fd0:	400b      	ands	r3, r1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_I2C_Init+0x138>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1e59      	subs	r1, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fea:	e051      	b.n	8004090 <HAL_I2C_Init+0x1dc>
 8003fec:	2304      	movs	r3, #4
 8003fee:	e04f      	b.n	8004090 <HAL_I2C_Init+0x1dc>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d111      	bne.n	800401c <HAL_I2C_Init+0x168>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1e58      	subs	r0, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6859      	ldr	r1, [r3, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	440b      	add	r3, r1
 8004006:	fbb0 f3f3 	udiv	r3, r0, r3
 800400a:	3301      	adds	r3, #1
 800400c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004010:	2b00      	cmp	r3, #0
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	e012      	b.n	8004042 <HAL_I2C_Init+0x18e>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1e58      	subs	r0, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6859      	ldr	r1, [r3, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	0099      	lsls	r1, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004032:	3301      	adds	r3, #1
 8004034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004038:	2b00      	cmp	r3, #0
 800403a:	bf0c      	ite	eq
 800403c:	2301      	moveq	r3, #1
 800403e:	2300      	movne	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_I2C_Init+0x196>
 8004046:	2301      	movs	r3, #1
 8004048:	e022      	b.n	8004090 <HAL_I2C_Init+0x1dc>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10e      	bne.n	8004070 <HAL_I2C_Init+0x1bc>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1e58      	subs	r0, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6859      	ldr	r1, [r3, #4]
 800405a:	460b      	mov	r3, r1
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	440b      	add	r3, r1
 8004060:	fbb0 f3f3 	udiv	r3, r0, r3
 8004064:	3301      	adds	r3, #1
 8004066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800406e:	e00f      	b.n	8004090 <HAL_I2C_Init+0x1dc>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	1e58      	subs	r0, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	0099      	lsls	r1, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	fbb0 f3f3 	udiv	r3, r0, r3
 8004086:	3301      	adds	r3, #1
 8004088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	6809      	ldr	r1, [r1, #0]
 8004094:	4313      	orrs	r3, r2
 8004096:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6911      	ldr	r1, [r2, #16]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	68d2      	ldr	r2, [r2, #12]
 80040ca:	4311      	orrs	r1, r2
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	000186a0 	.word	0x000186a0
 800412c:	001e847f 	.word	0x001e847f
 8004130:	003d08ff 	.word	0x003d08ff
 8004134:	431bde83 	.word	0x431bde83
 8004138:	10624dd3 	.word	0x10624dd3

0800413c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e128      	b.n	80043a0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a90      	ldr	r2, [pc, #576]	; (80043a8 <HAL_I2S_Init+0x26c>)
 8004166:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7fd fb93 	bl	8001894 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004184:	f023 030f 	bic.w	r3, r3, #15
 8004188:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2202      	movs	r2, #2
 8004190:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d060      	beq.n	800425c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d102      	bne.n	80041a8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80041a2:	2310      	movs	r3, #16
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e001      	b.n	80041ac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80041a8:	2320      	movs	r3, #32
 80041aa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d802      	bhi.n	80041ba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80041ba:	2001      	movs	r0, #1
 80041bc:	f001 f9a0 	bl	8005500 <HAL_RCCEx_GetPeriphCLKFreq>
 80041c0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ca:	d125      	bne.n	8004218 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d010      	beq.n	80041f6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	fbb2 f2f3 	udiv	r2, r2, r3
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	461a      	mov	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	3305      	adds	r3, #5
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	e01f      	b.n	8004236 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	461a      	mov	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004212:	3305      	adds	r3, #5
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	e00e      	b.n	8004236 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	461a      	mov	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004232:	3305      	adds	r3, #5
 8004234:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4a5c      	ldr	r2, [pc, #368]	; (80043ac <HAL_I2S_Init+0x270>)
 800423a:	fba2 2303 	umull	r2, r3, r2, r3
 800423e:	08db      	lsrs	r3, r3, #3
 8004240:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	021b      	lsls	r3, r3, #8
 8004258:	61bb      	str	r3, [r7, #24]
 800425a:	e003      	b.n	8004264 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800425c:	2302      	movs	r3, #2
 800425e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d902      	bls.n	8004270 <HAL_I2S_Init+0x134>
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	2bff      	cmp	r3, #255	; 0xff
 800426e:	d907      	bls.n	8004280 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004274:	f043 0210 	orr.w	r2, r3, #16
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e08f      	b.n	80043a0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	ea42 0103 	orr.w	r1, r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	430a      	orrs	r2, r1
 8004292:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800429e:	f023 030f 	bic.w	r3, r3, #15
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6851      	ldr	r1, [r2, #4]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6892      	ldr	r2, [r2, #8]
 80042aa:	4311      	orrs	r1, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	68d2      	ldr	r2, [r2, #12]
 80042b0:	4311      	orrs	r1, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6992      	ldr	r2, [r2, #24]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042c2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d161      	bne.n	8004390 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a38      	ldr	r2, [pc, #224]	; (80043b0 <HAL_I2S_Init+0x274>)
 80042d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a37      	ldr	r2, [pc, #220]	; (80043b4 <HAL_I2S_Init+0x278>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d101      	bne.n	80042e0 <HAL_I2S_Init+0x1a4>
 80042dc:	4b36      	ldr	r3, [pc, #216]	; (80043b8 <HAL_I2S_Init+0x27c>)
 80042de:	e001      	b.n	80042e4 <HAL_I2S_Init+0x1a8>
 80042e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	4932      	ldr	r1, [pc, #200]	; (80043b4 <HAL_I2S_Init+0x278>)
 80042ec:	428a      	cmp	r2, r1
 80042ee:	d101      	bne.n	80042f4 <HAL_I2S_Init+0x1b8>
 80042f0:	4a31      	ldr	r2, [pc, #196]	; (80043b8 <HAL_I2S_Init+0x27c>)
 80042f2:	e001      	b.n	80042f8 <HAL_I2S_Init+0x1bc>
 80042f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80042f8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80042fc:	f023 030f 	bic.w	r3, r3, #15
 8004300:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a2b      	ldr	r2, [pc, #172]	; (80043b4 <HAL_I2S_Init+0x278>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d101      	bne.n	8004310 <HAL_I2S_Init+0x1d4>
 800430c:	4b2a      	ldr	r3, [pc, #168]	; (80043b8 <HAL_I2S_Init+0x27c>)
 800430e:	e001      	b.n	8004314 <HAL_I2S_Init+0x1d8>
 8004310:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004314:	2202      	movs	r2, #2
 8004316:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a25      	ldr	r2, [pc, #148]	; (80043b4 <HAL_I2S_Init+0x278>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d101      	bne.n	8004326 <HAL_I2S_Init+0x1ea>
 8004322:	4b25      	ldr	r3, [pc, #148]	; (80043b8 <HAL_I2S_Init+0x27c>)
 8004324:	e001      	b.n	800432a <HAL_I2S_Init+0x1ee>
 8004326:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004336:	d003      	beq.n	8004340 <HAL_I2S_Init+0x204>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d103      	bne.n	8004348 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	e001      	b.n	800434c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004348:	2300      	movs	r3, #0
 800434a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004356:	4313      	orrs	r3, r2
 8004358:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004360:	4313      	orrs	r3, r2
 8004362:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800436a:	4313      	orrs	r3, r2
 800436c:	b29a      	uxth	r2, r3
 800436e:	897b      	ldrh	r3, [r7, #10]
 8004370:	4313      	orrs	r3, r2
 8004372:	b29b      	uxth	r3, r3
 8004374:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004378:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a0d      	ldr	r2, [pc, #52]	; (80043b4 <HAL_I2S_Init+0x278>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d101      	bne.n	8004388 <HAL_I2S_Init+0x24c>
 8004384:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <HAL_I2S_Init+0x27c>)
 8004386:	e001      	b.n	800438c <HAL_I2S_Init+0x250>
 8004388:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800438c:	897a      	ldrh	r2, [r7, #10]
 800438e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	080044b3 	.word	0x080044b3
 80043ac:	cccccccd 	.word	0xcccccccd
 80043b0:	080045c9 	.word	0x080045c9
 80043b4:	40003800 	.word	0x40003800
 80043b8:	40003400 	.word	0x40003400

080043bc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	881a      	ldrh	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	1c9a      	adds	r2, r3, #2
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10e      	bne.n	800444c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800443c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff ffb8 	bl	80043bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800444c:	bf00      	nop
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	b292      	uxth	r2, r2
 8004468:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	1c9a      	adds	r2, r3, #2
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10e      	bne.n	80044aa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800449a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff ff93 	bl	80043d0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d13a      	bne.n	8004544 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d109      	bne.n	80044ec <I2S_IRQHandler+0x3a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b40      	cmp	r3, #64	; 0x40
 80044e4:	d102      	bne.n	80044ec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff ffb4 	bl	8004454 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f2:	2b40      	cmp	r3, #64	; 0x40
 80044f4:	d126      	bne.n	8004544 <I2S_IRQHandler+0x92>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b20      	cmp	r3, #32
 8004502:	d11f      	bne.n	8004544 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004512:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004514:	2300      	movs	r3, #0
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	f043 0202 	orr.w	r2, r3, #2
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff ff50 	bl	80043e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b03      	cmp	r3, #3
 800454e:	d136      	bne.n	80045be <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b02      	cmp	r3, #2
 8004558:	d109      	bne.n	800456e <I2S_IRQHandler+0xbc>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004564:	2b80      	cmp	r3, #128	; 0x80
 8004566:	d102      	bne.n	800456e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff ff45 	bl	80043f8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b08      	cmp	r3, #8
 8004576:	d122      	bne.n	80045be <I2S_IRQHandler+0x10c>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b20      	cmp	r3, #32
 8004584:	d11b      	bne.n	80045be <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004594:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b0:	f043 0204 	orr.w	r2, r3, #4
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ff13 	bl	80043e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045be:	bf00      	nop
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4aa2      	ldr	r2, [pc, #648]	; (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d101      	bne.n	80045e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80045e2:	4ba2      	ldr	r3, [pc, #648]	; (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80045e4:	e001      	b.n	80045ea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80045e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a9b      	ldr	r2, [pc, #620]	; (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d101      	bne.n	8004604 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004600:	4b9a      	ldr	r3, [pc, #616]	; (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004602:	e001      	b.n	8004608 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004604:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004614:	d004      	beq.n	8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f040 8099 	bne.w	8004752 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b02      	cmp	r3, #2
 8004628:	d107      	bne.n	800463a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f925 	bl	8004884 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b01      	cmp	r3, #1
 8004642:	d107      	bne.n	8004654 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f9c8 	bl	80049e4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465a:	2b40      	cmp	r3, #64	; 0x40
 800465c:	d13a      	bne.n	80046d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d035      	beq.n	80046d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a7e      	ldr	r2, [pc, #504]	; (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d101      	bne.n	8004676 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004672:	4b7e      	ldr	r3, [pc, #504]	; (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004674:	e001      	b.n	800467a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004676:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4979      	ldr	r1, [pc, #484]	; (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004682:	428b      	cmp	r3, r1
 8004684:	d101      	bne.n	800468a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004686:	4b79      	ldr	r3, [pc, #484]	; (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004688:	e001      	b.n	800468e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800468a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800468e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004692:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	f043 0202 	orr.w	r2, r3, #2
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff fe88 	bl	80043e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b08      	cmp	r3, #8
 80046dc:	f040 80be 	bne.w	800485c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f003 0320 	and.w	r3, r3, #32
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80b8 	beq.w	800485c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046fa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a59      	ldr	r2, [pc, #356]	; (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d101      	bne.n	800470a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004706:	4b59      	ldr	r3, [pc, #356]	; (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004708:	e001      	b.n	800470e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800470a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4954      	ldr	r1, [pc, #336]	; (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004716:	428b      	cmp	r3, r1
 8004718:	d101      	bne.n	800471e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800471a:	4b54      	ldr	r3, [pc, #336]	; (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800471c:	e001      	b.n	8004722 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800471e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004722:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004726:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004728:	2300      	movs	r3, #0
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004742:	f043 0204 	orr.w	r2, r3, #4
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff fe4a 	bl	80043e4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004750:	e084      	b.n	800485c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b02      	cmp	r3, #2
 800475a:	d107      	bne.n	800476c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f8be 	bl	80048e8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b01      	cmp	r3, #1
 8004774:	d107      	bne.n	8004786 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f8fd 	bl	8004980 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	d12f      	bne.n	80047f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d02a      	beq.n	80047f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047a8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a2e      	ldr	r2, [pc, #184]	; (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d101      	bne.n	80047b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80047b4:	4b2d      	ldr	r3, [pc, #180]	; (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047b6:	e001      	b.n	80047bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80047b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4929      	ldr	r1, [pc, #164]	; (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80047c4:	428b      	cmp	r3, r1
 80047c6:	d101      	bne.n	80047cc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80047c8:	4b28      	ldr	r3, [pc, #160]	; (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80047ca:	e001      	b.n	80047d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80047cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	f043 0202 	orr.w	r2, r3, #2
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff fdfa 	bl	80043e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d131      	bne.n	800485e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d02c      	beq.n	800485e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a17      	ldr	r2, [pc, #92]	; (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d101      	bne.n	8004812 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800480e:	4b17      	ldr	r3, [pc, #92]	; (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004810:	e001      	b.n	8004816 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004812:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4912      	ldr	r1, [pc, #72]	; (8004868 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800481e:	428b      	cmp	r3, r1
 8004820:	d101      	bne.n	8004826 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004822:	4b12      	ldr	r3, [pc, #72]	; (800486c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004824:	e001      	b.n	800482a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004826:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800482a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800482e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800483e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484c:	f043 0204 	orr.w	r2, r3, #4
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff fdc5 	bl	80043e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800485a:	e000      	b.n	800485e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800485c:	bf00      	nop
}
 800485e:	bf00      	nop
 8004860:	3720      	adds	r7, #32
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40003800 	.word	0x40003800
 800486c:	40003400 	.word	0x40003400

08004870 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	1c99      	adds	r1, r3, #2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6251      	str	r1, [r2, #36]	; 0x24
 8004896:	881a      	ldrh	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d113      	bne.n	80048de <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d106      	bne.n	80048de <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff ffc9 	bl	8004870 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048de:	bf00      	nop
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	1c99      	adds	r1, r3, #2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6251      	str	r1, [r2, #36]	; 0x24
 80048fa:	8819      	ldrh	r1, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1d      	ldr	r2, [pc, #116]	; (8004978 <I2SEx_TxISR_I2SExt+0x90>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d101      	bne.n	800490a <I2SEx_TxISR_I2SExt+0x22>
 8004906:	4b1d      	ldr	r3, [pc, #116]	; (800497c <I2SEx_TxISR_I2SExt+0x94>)
 8004908:	e001      	b.n	800490e <I2SEx_TxISR_I2SExt+0x26>
 800490a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800490e:	460a      	mov	r2, r1
 8004910:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d121      	bne.n	800496e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a12      	ldr	r2, [pc, #72]	; (8004978 <I2SEx_TxISR_I2SExt+0x90>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d101      	bne.n	8004938 <I2SEx_TxISR_I2SExt+0x50>
 8004934:	4b11      	ldr	r3, [pc, #68]	; (800497c <I2SEx_TxISR_I2SExt+0x94>)
 8004936:	e001      	b.n	800493c <I2SEx_TxISR_I2SExt+0x54>
 8004938:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	490d      	ldr	r1, [pc, #52]	; (8004978 <I2SEx_TxISR_I2SExt+0x90>)
 8004944:	428b      	cmp	r3, r1
 8004946:	d101      	bne.n	800494c <I2SEx_TxISR_I2SExt+0x64>
 8004948:	4b0c      	ldr	r3, [pc, #48]	; (800497c <I2SEx_TxISR_I2SExt+0x94>)
 800494a:	e001      	b.n	8004950 <I2SEx_TxISR_I2SExt+0x68>
 800494c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004950:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004954:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d106      	bne.n	800496e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff ff81 	bl	8004870 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800496e:	bf00      	nop
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40003800 	.word	0x40003800
 800497c:	40003400 	.word	0x40003400

08004980 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68d8      	ldr	r0, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	1c99      	adds	r1, r3, #2
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004998:	b282      	uxth	r2, r0
 800499a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d113      	bne.n	80049dc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049c2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff ff4a 	bl	8004870 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049dc:	bf00      	nop
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a20      	ldr	r2, [pc, #128]	; (8004a74 <I2SEx_RxISR_I2SExt+0x90>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d101      	bne.n	80049fa <I2SEx_RxISR_I2SExt+0x16>
 80049f6:	4b20      	ldr	r3, [pc, #128]	; (8004a78 <I2SEx_RxISR_I2SExt+0x94>)
 80049f8:	e001      	b.n	80049fe <I2SEx_RxISR_I2SExt+0x1a>
 80049fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049fe:	68d8      	ldr	r0, [r3, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	1c99      	adds	r1, r3, #2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004a0a:	b282      	uxth	r2, r0
 8004a0c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d121      	bne.n	8004a6a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a12      	ldr	r2, [pc, #72]	; (8004a74 <I2SEx_RxISR_I2SExt+0x90>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d101      	bne.n	8004a34 <I2SEx_RxISR_I2SExt+0x50>
 8004a30:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <I2SEx_RxISR_I2SExt+0x94>)
 8004a32:	e001      	b.n	8004a38 <I2SEx_RxISR_I2SExt+0x54>
 8004a34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	490d      	ldr	r1, [pc, #52]	; (8004a74 <I2SEx_RxISR_I2SExt+0x90>)
 8004a40:	428b      	cmp	r3, r1
 8004a42:	d101      	bne.n	8004a48 <I2SEx_RxISR_I2SExt+0x64>
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <I2SEx_RxISR_I2SExt+0x94>)
 8004a46:	e001      	b.n	8004a4c <I2SEx_RxISR_I2SExt+0x68>
 8004a48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a50:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d106      	bne.n	8004a6a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff ff03 	bl	8004870 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40003800 	.word	0x40003800
 8004a78:	40003400 	.word	0x40003400

08004a7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e264      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d075      	beq.n	8004b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a9a:	4ba3      	ldr	r3, [pc, #652]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d00c      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aa6:	4ba0      	ldr	r3, [pc, #640]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d112      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ab2:	4b9d      	ldr	r3, [pc, #628]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004abe:	d10b      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac0:	4b99      	ldr	r3, [pc, #612]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d05b      	beq.n	8004b84 <HAL_RCC_OscConfig+0x108>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d157      	bne.n	8004b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e23f      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae0:	d106      	bne.n	8004af0 <HAL_RCC_OscConfig+0x74>
 8004ae2:	4b91      	ldr	r3, [pc, #580]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a90      	ldr	r2, [pc, #576]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	e01d      	b.n	8004b2c <HAL_RCC_OscConfig+0xb0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x98>
 8004afa:	4b8b      	ldr	r3, [pc, #556]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a8a      	ldr	r2, [pc, #552]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	4b88      	ldr	r3, [pc, #544]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a87      	ldr	r2, [pc, #540]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	e00b      	b.n	8004b2c <HAL_RCC_OscConfig+0xb0>
 8004b14:	4b84      	ldr	r3, [pc, #528]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a83      	ldr	r2, [pc, #524]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	4b81      	ldr	r3, [pc, #516]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a80      	ldr	r2, [pc, #512]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d013      	beq.n	8004b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b34:	f7fd f964 	bl	8001e00 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b3c:	f7fd f960 	bl	8001e00 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b64      	cmp	r3, #100	; 0x64
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e204      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4e:	4b76      	ldr	r3, [pc, #472]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0xc0>
 8004b5a:	e014      	b.n	8004b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5c:	f7fd f950 	bl	8001e00 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b64:	f7fd f94c 	bl	8001e00 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b64      	cmp	r3, #100	; 0x64
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e1f0      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b76:	4b6c      	ldr	r3, [pc, #432]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f0      	bne.n	8004b64 <HAL_RCC_OscConfig+0xe8>
 8004b82:	e000      	b.n	8004b86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d063      	beq.n	8004c5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b92:	4b65      	ldr	r3, [pc, #404]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00b      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b9e:	4b62      	ldr	r3, [pc, #392]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d11c      	bne.n	8004be4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004baa:	4b5f      	ldr	r3, [pc, #380]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d116      	bne.n	8004be4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb6:	4b5c      	ldr	r3, [pc, #368]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d005      	beq.n	8004bce <HAL_RCC_OscConfig+0x152>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d001      	beq.n	8004bce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e1c4      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bce:	4b56      	ldr	r3, [pc, #344]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	4952      	ldr	r1, [pc, #328]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004be2:	e03a      	b.n	8004c5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d020      	beq.n	8004c2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bec:	4b4f      	ldr	r3, [pc, #316]	; (8004d2c <HAL_RCC_OscConfig+0x2b0>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf2:	f7fd f905 	bl	8001e00 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bfa:	f7fd f901 	bl	8001e00 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e1a5      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0c:	4b46      	ldr	r3, [pc, #280]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0f0      	beq.n	8004bfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c18:	4b43      	ldr	r3, [pc, #268]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	4940      	ldr	r1, [pc, #256]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	600b      	str	r3, [r1, #0]
 8004c2c:	e015      	b.n	8004c5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c2e:	4b3f      	ldr	r3, [pc, #252]	; (8004d2c <HAL_RCC_OscConfig+0x2b0>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fd f8e4 	bl	8001e00 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c3c:	f7fd f8e0 	bl	8001e00 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e184      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c4e:	4b36      	ldr	r3, [pc, #216]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d030      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d016      	beq.n	8004c9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c6e:	4b30      	ldr	r3, [pc, #192]	; (8004d30 <HAL_RCC_OscConfig+0x2b4>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c74:	f7fd f8c4 	bl	8001e00 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7c:	f7fd f8c0 	bl	8001e00 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e164      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c8e:	4b26      	ldr	r3, [pc, #152]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0x200>
 8004c9a:	e015      	b.n	8004cc8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c9c:	4b24      	ldr	r3, [pc, #144]	; (8004d30 <HAL_RCC_OscConfig+0x2b4>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca2:	f7fd f8ad 	bl	8001e00 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004caa:	f7fd f8a9 	bl	8001e00 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e14d      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cbc:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f0      	bne.n	8004caa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 80a0 	beq.w	8004e16 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cda:	4b13      	ldr	r3, [pc, #76]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10f      	bne.n	8004d06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60bb      	str	r3, [r7, #8]
 8004cea:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	4a0e      	ldr	r2, [pc, #56]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cf6:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <HAL_RCC_OscConfig+0x2ac>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfe:	60bb      	str	r3, [r7, #8]
 8004d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d06:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <HAL_RCC_OscConfig+0x2b8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d121      	bne.n	8004d56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d12:	4b08      	ldr	r3, [pc, #32]	; (8004d34 <HAL_RCC_OscConfig+0x2b8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a07      	ldr	r2, [pc, #28]	; (8004d34 <HAL_RCC_OscConfig+0x2b8>)
 8004d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d1e:	f7fd f86f 	bl	8001e00 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d24:	e011      	b.n	8004d4a <HAL_RCC_OscConfig+0x2ce>
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	42470000 	.word	0x42470000
 8004d30:	42470e80 	.word	0x42470e80
 8004d34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d38:	f7fd f862 	bl	8001e00 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e106      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4a:	4b85      	ldr	r3, [pc, #532]	; (8004f60 <HAL_RCC_OscConfig+0x4e4>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d106      	bne.n	8004d6c <HAL_RCC_OscConfig+0x2f0>
 8004d5e:	4b81      	ldr	r3, [pc, #516]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	4a80      	ldr	r2, [pc, #512]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6a:	e01c      	b.n	8004da6 <HAL_RCC_OscConfig+0x32a>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b05      	cmp	r3, #5
 8004d72:	d10c      	bne.n	8004d8e <HAL_RCC_OscConfig+0x312>
 8004d74:	4b7b      	ldr	r3, [pc, #492]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d78:	4a7a      	ldr	r2, [pc, #488]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004d7a:	f043 0304 	orr.w	r3, r3, #4
 8004d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d80:	4b78      	ldr	r3, [pc, #480]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d84:	4a77      	ldr	r2, [pc, #476]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d8c:	e00b      	b.n	8004da6 <HAL_RCC_OscConfig+0x32a>
 8004d8e:	4b75      	ldr	r3, [pc, #468]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d92:	4a74      	ldr	r2, [pc, #464]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004d94:	f023 0301 	bic.w	r3, r3, #1
 8004d98:	6713      	str	r3, [r2, #112]	; 0x70
 8004d9a:	4b72      	ldr	r3, [pc, #456]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9e:	4a71      	ldr	r2, [pc, #452]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004da0:	f023 0304 	bic.w	r3, r3, #4
 8004da4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d015      	beq.n	8004dda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dae:	f7fd f827 	bl	8001e00 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db4:	e00a      	b.n	8004dcc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db6:	f7fd f823 	bl	8001e00 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e0c5      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dcc:	4b65      	ldr	r3, [pc, #404]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0ee      	beq.n	8004db6 <HAL_RCC_OscConfig+0x33a>
 8004dd8:	e014      	b.n	8004e04 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dda:	f7fd f811 	bl	8001e00 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de0:	e00a      	b.n	8004df8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de2:	f7fd f80d 	bl	8001e00 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e0af      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004df8:	4b5a      	ldr	r3, [pc, #360]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1ee      	bne.n	8004de2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d105      	bne.n	8004e16 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e0a:	4b56      	ldr	r3, [pc, #344]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	4a55      	ldr	r2, [pc, #340]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 809b 	beq.w	8004f56 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e20:	4b50      	ldr	r3, [pc, #320]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 030c 	and.w	r3, r3, #12
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d05c      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d141      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e34:	4b4c      	ldr	r3, [pc, #304]	; (8004f68 <HAL_RCC_OscConfig+0x4ec>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3a:	f7fc ffe1 	bl	8001e00 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e42:	f7fc ffdd 	bl	8001e00 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e081      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e54:	4b43      	ldr	r3, [pc, #268]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f0      	bne.n	8004e42 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	019b      	lsls	r3, r3, #6
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	041b      	lsls	r3, r3, #16
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e82:	061b      	lsls	r3, r3, #24
 8004e84:	4937      	ldr	r1, [pc, #220]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e8a:	4b37      	ldr	r3, [pc, #220]	; (8004f68 <HAL_RCC_OscConfig+0x4ec>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e90:	f7fc ffb6 	bl	8001e00 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e98:	f7fc ffb2 	bl	8001e00 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e056      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eaa:	4b2e      	ldr	r3, [pc, #184]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0x41c>
 8004eb6:	e04e      	b.n	8004f56 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb8:	4b2b      	ldr	r3, [pc, #172]	; (8004f68 <HAL_RCC_OscConfig+0x4ec>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebe:	f7fc ff9f 	bl	8001e00 <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec6:	f7fc ff9b 	bl	8001e00 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e03f      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed8:	4b22      	ldr	r3, [pc, #136]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1f0      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x44a>
 8004ee4:	e037      	b.n	8004f56 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e032      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ef2:	4b1c      	ldr	r3, [pc, #112]	; (8004f64 <HAL_RCC_OscConfig+0x4e8>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d028      	beq.n	8004f52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d121      	bne.n	8004f52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d11a      	bne.n	8004f52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f22:	4013      	ands	r3, r2
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f28:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d111      	bne.n	8004f52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	085b      	lsrs	r3, r3, #1
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d107      	bne.n	8004f52 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d001      	beq.n	8004f56 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40007000 	.word	0x40007000
 8004f64:	40023800 	.word	0x40023800
 8004f68:	42470060 	.word	0x42470060

08004f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e0cc      	b.n	800511a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f80:	4b68      	ldr	r3, [pc, #416]	; (8005124 <HAL_RCC_ClockConfig+0x1b8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d90c      	bls.n	8004fa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8e:	4b65      	ldr	r3, [pc, #404]	; (8005124 <HAL_RCC_ClockConfig+0x1b8>)
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f96:	4b63      	ldr	r3, [pc, #396]	; (8005124 <HAL_RCC_ClockConfig+0x1b8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e0b8      	b.n	800511a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d020      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fc0:	4b59      	ldr	r3, [pc, #356]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	4a58      	ldr	r2, [pc, #352]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fd8:	4b53      	ldr	r3, [pc, #332]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	4a52      	ldr	r2, [pc, #328]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 8004fde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe4:	4b50      	ldr	r3, [pc, #320]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	494d      	ldr	r1, [pc, #308]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d044      	beq.n	800508c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d107      	bne.n	800501a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500a:	4b47      	ldr	r3, [pc, #284]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d119      	bne.n	800504a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e07f      	b.n	800511a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d003      	beq.n	800502a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005026:	2b03      	cmp	r3, #3
 8005028:	d107      	bne.n	800503a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800502a:	4b3f      	ldr	r3, [pc, #252]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e06f      	b.n	800511a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800503a:	4b3b      	ldr	r3, [pc, #236]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e067      	b.n	800511a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800504a:	4b37      	ldr	r3, [pc, #220]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f023 0203 	bic.w	r2, r3, #3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	4934      	ldr	r1, [pc, #208]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 8005058:	4313      	orrs	r3, r2
 800505a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800505c:	f7fc fed0 	bl	8001e00 <HAL_GetTick>
 8005060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005062:	e00a      	b.n	800507a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005064:	f7fc fecc 	bl	8001e00 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005072:	4293      	cmp	r3, r2
 8005074:	d901      	bls.n	800507a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e04f      	b.n	800511a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800507a:	4b2b      	ldr	r3, [pc, #172]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 020c 	and.w	r2, r3, #12
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	429a      	cmp	r2, r3
 800508a:	d1eb      	bne.n	8005064 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800508c:	4b25      	ldr	r3, [pc, #148]	; (8005124 <HAL_RCC_ClockConfig+0x1b8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d20c      	bcs.n	80050b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509a:	4b22      	ldr	r3, [pc, #136]	; (8005124 <HAL_RCC_ClockConfig+0x1b8>)
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a2:	4b20      	ldr	r3, [pc, #128]	; (8005124 <HAL_RCC_ClockConfig+0x1b8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d001      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e032      	b.n	800511a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d008      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050c0:	4b19      	ldr	r3, [pc, #100]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	4916      	ldr	r1, [pc, #88]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d009      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050de:	4b12      	ldr	r3, [pc, #72]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	490e      	ldr	r1, [pc, #56]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050f2:	f000 f821 	bl	8005138 <HAL_RCC_GetSysClockFreq>
 80050f6:	4602      	mov	r2, r0
 80050f8:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	091b      	lsrs	r3, r3, #4
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	490a      	ldr	r1, [pc, #40]	; (800512c <HAL_RCC_ClockConfig+0x1c0>)
 8005104:	5ccb      	ldrb	r3, [r1, r3]
 8005106:	fa22 f303 	lsr.w	r3, r2, r3
 800510a:	4a09      	ldr	r2, [pc, #36]	; (8005130 <HAL_RCC_ClockConfig+0x1c4>)
 800510c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800510e:	4b09      	ldr	r3, [pc, #36]	; (8005134 <HAL_RCC_ClockConfig+0x1c8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f7fc fe30 	bl	8001d78 <HAL_InitTick>

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40023c00 	.word	0x40023c00
 8005128:	40023800 	.word	0x40023800
 800512c:	08009204 	.word	0x08009204
 8005130:	20000008 	.word	0x20000008
 8005134:	2000000c 	.word	0x2000000c

08005138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	607b      	str	r3, [r7, #4]
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	2300      	movs	r3, #0
 800514a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005150:	4b67      	ldr	r3, [pc, #412]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 030c 	and.w	r3, r3, #12
 8005158:	2b08      	cmp	r3, #8
 800515a:	d00d      	beq.n	8005178 <HAL_RCC_GetSysClockFreq+0x40>
 800515c:	2b08      	cmp	r3, #8
 800515e:	f200 80bd 	bhi.w	80052dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <HAL_RCC_GetSysClockFreq+0x34>
 8005166:	2b04      	cmp	r3, #4
 8005168:	d003      	beq.n	8005172 <HAL_RCC_GetSysClockFreq+0x3a>
 800516a:	e0b7      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800516c:	4b61      	ldr	r3, [pc, #388]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800516e:	60bb      	str	r3, [r7, #8]
       break;
 8005170:	e0b7      	b.n	80052e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005172:	4b61      	ldr	r3, [pc, #388]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005174:	60bb      	str	r3, [r7, #8]
      break;
 8005176:	e0b4      	b.n	80052e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005178:	4b5d      	ldr	r3, [pc, #372]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005180:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005182:	4b5b      	ldr	r3, [pc, #364]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d04d      	beq.n	800522a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800518e:	4b58      	ldr	r3, [pc, #352]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	099b      	lsrs	r3, r3, #6
 8005194:	461a      	mov	r2, r3
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800519e:	f04f 0100 	mov.w	r1, #0
 80051a2:	ea02 0800 	and.w	r8, r2, r0
 80051a6:	ea03 0901 	and.w	r9, r3, r1
 80051aa:	4640      	mov	r0, r8
 80051ac:	4649      	mov	r1, r9
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	014b      	lsls	r3, r1, #5
 80051b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051bc:	0142      	lsls	r2, r0, #5
 80051be:	4610      	mov	r0, r2
 80051c0:	4619      	mov	r1, r3
 80051c2:	ebb0 0008 	subs.w	r0, r0, r8
 80051c6:	eb61 0109 	sbc.w	r1, r1, r9
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	018b      	lsls	r3, r1, #6
 80051d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051d8:	0182      	lsls	r2, r0, #6
 80051da:	1a12      	subs	r2, r2, r0
 80051dc:	eb63 0301 	sbc.w	r3, r3, r1
 80051e0:	f04f 0000 	mov.w	r0, #0
 80051e4:	f04f 0100 	mov.w	r1, #0
 80051e8:	00d9      	lsls	r1, r3, #3
 80051ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051ee:	00d0      	lsls	r0, r2, #3
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	eb12 0208 	adds.w	r2, r2, r8
 80051f8:	eb43 0309 	adc.w	r3, r3, r9
 80051fc:	f04f 0000 	mov.w	r0, #0
 8005200:	f04f 0100 	mov.w	r1, #0
 8005204:	0259      	lsls	r1, r3, #9
 8005206:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800520a:	0250      	lsls	r0, r2, #9
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4610      	mov	r0, r2
 8005212:	4619      	mov	r1, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	461a      	mov	r2, r3
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	f7fa ffd4 	bl	80001c8 <__aeabi_uldivmod>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4613      	mov	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	e04a      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522a:	4b31      	ldr	r3, [pc, #196]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	099b      	lsrs	r3, r3, #6
 8005230:	461a      	mov	r2, r3
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	f240 10ff 	movw	r0, #511	; 0x1ff
 800523a:	f04f 0100 	mov.w	r1, #0
 800523e:	ea02 0400 	and.w	r4, r2, r0
 8005242:	ea03 0501 	and.w	r5, r3, r1
 8005246:	4620      	mov	r0, r4
 8005248:	4629      	mov	r1, r5
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	014b      	lsls	r3, r1, #5
 8005254:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005258:	0142      	lsls	r2, r0, #5
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	1b00      	subs	r0, r0, r4
 8005260:	eb61 0105 	sbc.w	r1, r1, r5
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	018b      	lsls	r3, r1, #6
 800526e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005272:	0182      	lsls	r2, r0, #6
 8005274:	1a12      	subs	r2, r2, r0
 8005276:	eb63 0301 	sbc.w	r3, r3, r1
 800527a:	f04f 0000 	mov.w	r0, #0
 800527e:	f04f 0100 	mov.w	r1, #0
 8005282:	00d9      	lsls	r1, r3, #3
 8005284:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005288:	00d0      	lsls	r0, r2, #3
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	1912      	adds	r2, r2, r4
 8005290:	eb45 0303 	adc.w	r3, r5, r3
 8005294:	f04f 0000 	mov.w	r0, #0
 8005298:	f04f 0100 	mov.w	r1, #0
 800529c:	0299      	lsls	r1, r3, #10
 800529e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052a2:	0290      	lsls	r0, r2, #10
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4610      	mov	r0, r2
 80052aa:	4619      	mov	r1, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	461a      	mov	r2, r3
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	f7fa ff88 	bl	80001c8 <__aeabi_uldivmod>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4613      	mov	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	3301      	adds	r3, #1
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d8:	60bb      	str	r3, [r7, #8]
      break;
 80052da:	e002      	b.n	80052e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052dc:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80052de:	60bb      	str	r3, [r7, #8]
      break;
 80052e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052e2:	68bb      	ldr	r3, [r7, #8]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80052ee:	bf00      	nop
 80052f0:	40023800 	.word	0x40023800
 80052f4:	00f42400 	.word	0x00f42400
 80052f8:	007a1200 	.word	0x007a1200

080052fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005300:	4b03      	ldr	r3, [pc, #12]	; (8005310 <HAL_RCC_GetHCLKFreq+0x14>)
 8005302:	681b      	ldr	r3, [r3, #0]
}
 8005304:	4618      	mov	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000008 	.word	0x20000008

08005314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005318:	f7ff fff0 	bl	80052fc <HAL_RCC_GetHCLKFreq>
 800531c:	4602      	mov	r2, r0
 800531e:	4b05      	ldr	r3, [pc, #20]	; (8005334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	0a9b      	lsrs	r3, r3, #10
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	4903      	ldr	r1, [pc, #12]	; (8005338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800532a:	5ccb      	ldrb	r3, [r1, r3]
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40023800 	.word	0x40023800
 8005338:	08009214 	.word	0x08009214

0800533c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d105      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005360:	2b00      	cmp	r3, #0
 8005362:	d035      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005364:	4b62      	ldr	r3, [pc, #392]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800536a:	f7fc fd49 	bl	8001e00 <HAL_GetTick>
 800536e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005370:	e008      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005372:	f7fc fd45 	bl	8001e00 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e0b0      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005384:	4b5b      	ldr	r3, [pc, #364]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1f0      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	019a      	lsls	r2, r3, #6
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	071b      	lsls	r3, r3, #28
 800539c:	4955      	ldr	r1, [pc, #340]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053a4:	4b52      	ldr	r3, [pc, #328]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80053a6:	2201      	movs	r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053aa:	f7fc fd29 	bl	8001e00 <HAL_GetTick>
 80053ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053b0:	e008      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053b2:	f7fc fd25 	bl	8001e00 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e090      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053c4:	4b4b      	ldr	r3, [pc, #300]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0f0      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8083 	beq.w	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	4b44      	ldr	r3, [pc, #272]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	4a43      	ldr	r2, [pc, #268]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ec:	6413      	str	r3, [r2, #64]	; 0x40
 80053ee:	4b41      	ldr	r3, [pc, #260]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053fa:	4b3f      	ldr	r3, [pc, #252]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a3e      	ldr	r2, [pc, #248]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005404:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005406:	f7fc fcfb 	bl	8001e00 <HAL_GetTick>
 800540a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800540c:	e008      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800540e:	f7fc fcf7 	bl	8001e00 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e062      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005420:	4b35      	ldr	r3, [pc, #212]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0f0      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800542c:	4b31      	ldr	r3, [pc, #196]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800542e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005430:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005434:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d02f      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	429a      	cmp	r2, r3
 8005448:	d028      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800544a:	4b2a      	ldr	r3, [pc, #168]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800544c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005452:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005454:	4b29      	ldr	r3, [pc, #164]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005456:	2201      	movs	r2, #1
 8005458:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800545a:	4b28      	ldr	r3, [pc, #160]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005460:	4a24      	ldr	r2, [pc, #144]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005466:	4b23      	ldr	r3, [pc, #140]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b01      	cmp	r3, #1
 8005470:	d114      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005472:	f7fc fcc5 	bl	8001e00 <HAL_GetTick>
 8005476:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005478:	e00a      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800547a:	f7fc fcc1 	bl	8001e00 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	f241 3288 	movw	r2, #5000	; 0x1388
 8005488:	4293      	cmp	r3, r2
 800548a:	d901      	bls.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e02a      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005490:	4b18      	ldr	r3, [pc, #96]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0ee      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054a8:	d10d      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80054aa:	4b12      	ldr	r3, [pc, #72]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054be:	490d      	ldr	r1, [pc, #52]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	608b      	str	r3, [r1, #8]
 80054c4:	e005      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80054c6:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	4a0a      	ldr	r2, [pc, #40]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054d0:	6093      	str	r3, [r2, #8]
 80054d2:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054de:	4905      	ldr	r1, [pc, #20]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	42470068 	.word	0x42470068
 80054f4:	40023800 	.word	0x40023800
 80054f8:	40007000 	.word	0x40007000
 80054fc:	42470e40 	.word	0x42470e40

08005500 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d13e      	bne.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800551e:	4b23      	ldr	r3, [pc, #140]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d005      	beq.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d12f      	bne.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005534:	4b1e      	ldr	r3, [pc, #120]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005536:	617b      	str	r3, [r7, #20]
          break;
 8005538:	e02f      	b.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800553a:	4b1c      	ldr	r3, [pc, #112]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005546:	d108      	bne.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005548:	4b18      	ldr	r3, [pc, #96]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005550:	4a18      	ldr	r2, [pc, #96]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005552:	fbb2 f3f3 	udiv	r3, r2, r3
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	e007      	b.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800555a:	4b14      	ldr	r3, [pc, #80]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005562:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005564:	fbb2 f3f3 	udiv	r3, r2, r3
 8005568:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800556a:	4b10      	ldr	r3, [pc, #64]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800556c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005570:	099b      	lsrs	r3, r3, #6
 8005572:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	fb02 f303 	mul.w	r3, r2, r3
 800557c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800557e:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005584:	0f1b      	lsrs	r3, r3, #28
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005590:	617b      	str	r3, [r7, #20]
          break;
 8005592:	e002      	b.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
          break;
 8005598:	bf00      	nop
        }
      }
      break;
 800559a:	bf00      	nop
    }
  }
  return frequency;
 800559c:	697b      	ldr	r3, [r7, #20]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40023800 	.word	0x40023800
 80055b0:	00bb8000 	.word	0x00bb8000
 80055b4:	007a1200 	.word	0x007a1200
 80055b8:	00f42400 	.word	0x00f42400

080055bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e07b      	b.n	80056c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d108      	bne.n	80055e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055de:	d009      	beq.n	80055f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	61da      	str	r2, [r3, #28]
 80055e6:	e005      	b.n	80055f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fc f9a8 	bl	8001964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800562a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005678:	ea42 0103 	orr.w	r1, r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005680:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	0c1b      	lsrs	r3, r3, #16
 8005692:	f003 0104 	and.w	r1, r3, #4
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	f003 0210 	and.w	r2, r3, #16
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69da      	ldr	r2, [r3, #28]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b088      	sub	sp, #32
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	603b      	str	r3, [r7, #0]
 80056da:	4613      	mov	r3, r2
 80056dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_SPI_Transmit+0x22>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e126      	b.n	800593e <HAL_SPI_Transmit+0x270>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056f8:	f7fc fb82 	bl	8001e00 <HAL_GetTick>
 80056fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	d002      	beq.n	8005714 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800570e:	2302      	movs	r3, #2
 8005710:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005712:	e10b      	b.n	800592c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <HAL_SPI_Transmit+0x52>
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d102      	bne.n	8005726 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005724:	e102      	b.n	800592c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2203      	movs	r2, #3
 800572a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	88fa      	ldrh	r2, [r7, #6]
 800573e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	88fa      	ldrh	r2, [r7, #6]
 8005744:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800576c:	d10f      	bne.n	800578e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800577c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800578c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005798:	2b40      	cmp	r3, #64	; 0x40
 800579a:	d007      	beq.n	80057ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b4:	d14b      	bne.n	800584e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_SPI_Transmit+0xf6>
 80057be:	8afb      	ldrh	r3, [r7, #22]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d13e      	bne.n	8005842 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	881a      	ldrh	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d4:	1c9a      	adds	r2, r3, #2
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057e8:	e02b      	b.n	8005842 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d112      	bne.n	800581e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	881a      	ldrh	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	1c9a      	adds	r2, r3, #2
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	86da      	strh	r2, [r3, #54]	; 0x36
 800581c:	e011      	b.n	8005842 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800581e:	f7fc faef 	bl	8001e00 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d803      	bhi.n	8005836 <HAL_SPI_Transmit+0x168>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005834:	d102      	bne.n	800583c <HAL_SPI_Transmit+0x16e>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d102      	bne.n	8005842 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005840:	e074      	b.n	800592c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1ce      	bne.n	80057ea <HAL_SPI_Transmit+0x11c>
 800584c:	e04c      	b.n	80058e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_SPI_Transmit+0x18e>
 8005856:	8afb      	ldrh	r3, [r7, #22]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d140      	bne.n	80058de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	330c      	adds	r3, #12
 8005866:	7812      	ldrb	r2, [r2, #0]
 8005868:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005878:	b29b      	uxth	r3, r3
 800587a:	3b01      	subs	r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005882:	e02c      	b.n	80058de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b02      	cmp	r3, #2
 8005890:	d113      	bne.n	80058ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	330c      	adds	r3, #12
 800589c:	7812      	ldrb	r2, [r2, #0]
 800589e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80058b8:	e011      	b.n	80058de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058ba:	f7fc faa1 	bl	8001e00 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d803      	bhi.n	80058d2 <HAL_SPI_Transmit+0x204>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058d0:	d102      	bne.n	80058d8 <HAL_SPI_Transmit+0x20a>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d102      	bne.n	80058de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058dc:	e026      	b.n	800592c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1cd      	bne.n	8005884 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	6839      	ldr	r1, [r7, #0]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f8b3 	bl	8005a58 <SPI_EndRxTxTransaction>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2220      	movs	r2, #32
 80058fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10a      	bne.n	800591c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005906:	2300      	movs	r3, #0
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	613b      	str	r3, [r7, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	77fb      	strb	r3, [r7, #31]
 8005928:	e000      	b.n	800592c <HAL_SPI_Transmit+0x25e>
  }

error:
 800592a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800593c:	7ffb      	ldrb	r3, [r7, #31]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3720      	adds	r7, #32
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	4613      	mov	r3, r2
 8005956:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005958:	f7fc fa52 	bl	8001e00 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005960:	1a9b      	subs	r3, r3, r2
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	4413      	add	r3, r2
 8005966:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005968:	f7fc fa4a 	bl	8001e00 <HAL_GetTick>
 800596c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800596e:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	015b      	lsls	r3, r3, #5
 8005974:	0d1b      	lsrs	r3, r3, #20
 8005976:	69fa      	ldr	r2, [r7, #28]
 8005978:	fb02 f303 	mul.w	r3, r2, r3
 800597c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800597e:	e054      	b.n	8005a2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005986:	d050      	beq.n	8005a2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005988:	f7fc fa3a 	bl	8001e00 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	429a      	cmp	r2, r3
 8005996:	d902      	bls.n	800599e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d13d      	bne.n	8005a1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059b6:	d111      	bne.n	80059dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c0:	d004      	beq.n	80059cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ca:	d107      	bne.n	80059dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059e4:	d10f      	bne.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e017      	b.n	8005a4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4013      	ands	r3, r2
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	bf0c      	ite	eq
 8005a3a:	2301      	moveq	r3, #1
 8005a3c:	2300      	movne	r3, #0
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d19b      	bne.n	8005980 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3720      	adds	r7, #32
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20000008 	.word	0x20000008

08005a58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a64:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <SPI_EndRxTxTransaction+0x7c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a1b      	ldr	r2, [pc, #108]	; (8005ad8 <SPI_EndRxTxTransaction+0x80>)
 8005a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6e:	0d5b      	lsrs	r3, r3, #21
 8005a70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a74:	fb02 f303 	mul.w	r3, r2, r3
 8005a78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a82:	d112      	bne.n	8005aaa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2180      	movs	r1, #128	; 0x80
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f7ff ff5a 	bl	8005948 <SPI_WaitFlagStateUntilTimeout>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d016      	beq.n	8005ac8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9e:	f043 0220 	orr.w	r2, r3, #32
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e00f      	b.n	8005aca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00a      	beq.n	8005ac6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac0:	2b80      	cmp	r3, #128	; 0x80
 8005ac2:	d0f2      	beq.n	8005aaa <SPI_EndRxTxTransaction+0x52>
 8005ac4:	e000      	b.n	8005ac8 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ac6:	bf00      	nop
  }

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000008 	.word	0x20000008
 8005ad8:	165e9f81 	.word	0x165e9f81

08005adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e041      	b.n	8005b72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fb ffcc 	bl	8001aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	f000 fb42 	bl	80061a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e041      	b.n	8005c10 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d106      	bne.n	8005ba6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f839 	bl	8005c18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4610      	mov	r0, r2
 8005bba:	f000 faf3 	bl	80061a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d122      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d11b      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f06f 0202 	mvn.w	r2, #2
 8005c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa7a 	bl	8006168 <HAL_TIM_IC_CaptureCallback>
 8005c74:	e005      	b.n	8005c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fa6c 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fa7d 	bl	800617c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f003 0304 	and.w	r3, r3, #4
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d122      	bne.n	8005cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d11b      	bne.n	8005cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f06f 0204 	mvn.w	r2, #4
 8005cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fa50 	bl	8006168 <HAL_TIM_IC_CaptureCallback>
 8005cc8:	e005      	b.n	8005cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fa42 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fa53 	bl	800617c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b08      	cmp	r3, #8
 8005ce8:	d122      	bne.n	8005d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f003 0308 	and.w	r3, r3, #8
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d11b      	bne.n	8005d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0208 	mvn.w	r2, #8
 8005d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2204      	movs	r2, #4
 8005d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fa26 	bl	8006168 <HAL_TIM_IC_CaptureCallback>
 8005d1c:	e005      	b.n	8005d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fa18 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fa29 	bl	800617c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f003 0310 	and.w	r3, r3, #16
 8005d3a:	2b10      	cmp	r3, #16
 8005d3c:	d122      	bne.n	8005d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	2b10      	cmp	r3, #16
 8005d4a:	d11b      	bne.n	8005d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f06f 0210 	mvn.w	r2, #16
 8005d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2208      	movs	r2, #8
 8005d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f9fc 	bl	8006168 <HAL_TIM_IC_CaptureCallback>
 8005d70:	e005      	b.n	8005d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f9ee 	bl	8006154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f9ff 	bl	800617c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d10e      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d107      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f06f 0201 	mvn.w	r2, #1
 8005da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f9c8 	bl	8006140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dba:	2b80      	cmp	r3, #128	; 0x80
 8005dbc:	d10e      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc8:	2b80      	cmp	r3, #128	; 0x80
 8005dca:	d107      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fd54 	bl	8006884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d10e      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df4:	2b40      	cmp	r3, #64	; 0x40
 8005df6:	d107      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f9c4 	bl	8006190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d10e      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b20      	cmp	r3, #32
 8005e22:	d107      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0220 	mvn.w	r2, #32
 8005e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fd1e 	bl	8006870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e0ac      	b.n	8005fb0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b0c      	cmp	r3, #12
 8005e62:	f200 809f 	bhi.w	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005e66:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6c:	08005ea1 	.word	0x08005ea1
 8005e70:	08005fa5 	.word	0x08005fa5
 8005e74:	08005fa5 	.word	0x08005fa5
 8005e78:	08005fa5 	.word	0x08005fa5
 8005e7c:	08005ee1 	.word	0x08005ee1
 8005e80:	08005fa5 	.word	0x08005fa5
 8005e84:	08005fa5 	.word	0x08005fa5
 8005e88:	08005fa5 	.word	0x08005fa5
 8005e8c:	08005f23 	.word	0x08005f23
 8005e90:	08005fa5 	.word	0x08005fa5
 8005e94:	08005fa5 	.word	0x08005fa5
 8005e98:	08005fa5 	.word	0x08005fa5
 8005e9c:	08005f63 	.word	0x08005f63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fa1c 	bl	80062e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0208 	orr.w	r2, r2, #8
 8005eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0204 	bic.w	r2, r2, #4
 8005eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6999      	ldr	r1, [r3, #24]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	619a      	str	r2, [r3, #24]
      break;
 8005ede:	e062      	b.n	8005fa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 fa6c 	bl	80063c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6999      	ldr	r1, [r3, #24]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	021a      	lsls	r2, r3, #8
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	619a      	str	r2, [r3, #24]
      break;
 8005f20:	e041      	b.n	8005fa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68b9      	ldr	r1, [r7, #8]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fac1 	bl	80064b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0208 	orr.w	r2, r2, #8
 8005f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69da      	ldr	r2, [r3, #28]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0204 	bic.w	r2, r2, #4
 8005f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69d9      	ldr	r1, [r3, #28]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	61da      	str	r2, [r3, #28]
      break;
 8005f60:	e021      	b.n	8005fa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fb15 	bl	8006598 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69d9      	ldr	r1, [r3, #28]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	021a      	lsls	r2, r3, #8
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	61da      	str	r2, [r3, #28]
      break;
 8005fa2:	e000      	b.n	8005fa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005fa4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_TIM_ConfigClockSource+0x18>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e0b3      	b.n	8006138 <HAL_TIM_ConfigClockSource+0x180>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ff6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006008:	d03e      	beq.n	8006088 <HAL_TIM_ConfigClockSource+0xd0>
 800600a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800600e:	f200 8087 	bhi.w	8006120 <HAL_TIM_ConfigClockSource+0x168>
 8006012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006016:	f000 8085 	beq.w	8006124 <HAL_TIM_ConfigClockSource+0x16c>
 800601a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601e:	d87f      	bhi.n	8006120 <HAL_TIM_ConfigClockSource+0x168>
 8006020:	2b70      	cmp	r3, #112	; 0x70
 8006022:	d01a      	beq.n	800605a <HAL_TIM_ConfigClockSource+0xa2>
 8006024:	2b70      	cmp	r3, #112	; 0x70
 8006026:	d87b      	bhi.n	8006120 <HAL_TIM_ConfigClockSource+0x168>
 8006028:	2b60      	cmp	r3, #96	; 0x60
 800602a:	d050      	beq.n	80060ce <HAL_TIM_ConfigClockSource+0x116>
 800602c:	2b60      	cmp	r3, #96	; 0x60
 800602e:	d877      	bhi.n	8006120 <HAL_TIM_ConfigClockSource+0x168>
 8006030:	2b50      	cmp	r3, #80	; 0x50
 8006032:	d03c      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0xf6>
 8006034:	2b50      	cmp	r3, #80	; 0x50
 8006036:	d873      	bhi.n	8006120 <HAL_TIM_ConfigClockSource+0x168>
 8006038:	2b40      	cmp	r3, #64	; 0x40
 800603a:	d058      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0x136>
 800603c:	2b40      	cmp	r3, #64	; 0x40
 800603e:	d86f      	bhi.n	8006120 <HAL_TIM_ConfigClockSource+0x168>
 8006040:	2b30      	cmp	r3, #48	; 0x30
 8006042:	d064      	beq.n	800610e <HAL_TIM_ConfigClockSource+0x156>
 8006044:	2b30      	cmp	r3, #48	; 0x30
 8006046:	d86b      	bhi.n	8006120 <HAL_TIM_ConfigClockSource+0x168>
 8006048:	2b20      	cmp	r3, #32
 800604a:	d060      	beq.n	800610e <HAL_TIM_ConfigClockSource+0x156>
 800604c:	2b20      	cmp	r3, #32
 800604e:	d867      	bhi.n	8006120 <HAL_TIM_ConfigClockSource+0x168>
 8006050:	2b00      	cmp	r3, #0
 8006052:	d05c      	beq.n	800610e <HAL_TIM_ConfigClockSource+0x156>
 8006054:	2b10      	cmp	r3, #16
 8006056:	d05a      	beq.n	800610e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006058:	e062      	b.n	8006120 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6899      	ldr	r1, [r3, #8]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f000 fb65 	bl	8006738 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800607c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	609a      	str	r2, [r3, #8]
      break;
 8006086:	e04e      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	6899      	ldr	r1, [r3, #8]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f000 fb4e 	bl	8006738 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060aa:	609a      	str	r2, [r3, #8]
      break;
 80060ac:	e03b      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6818      	ldr	r0, [r3, #0]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	6859      	ldr	r1, [r3, #4]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	461a      	mov	r2, r3
 80060bc:	f000 fac2 	bl	8006644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2150      	movs	r1, #80	; 0x50
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fb1b 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 80060cc:	e02b      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	6859      	ldr	r1, [r3, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	461a      	mov	r2, r3
 80060dc:	f000 fae1 	bl	80066a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2160      	movs	r1, #96	; 0x60
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 fb0b 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 80060ec:	e01b      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	6859      	ldr	r1, [r3, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	461a      	mov	r2, r3
 80060fc:	f000 faa2 	bl	8006644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2140      	movs	r1, #64	; 0x40
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fafb 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 800610c:	e00b      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4619      	mov	r1, r3
 8006118:	4610      	mov	r0, r2
 800611a:	f000 faf2 	bl	8006702 <TIM_ITRx_SetConfig>
        break;
 800611e:	e002      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006120:	bf00      	nop
 8006122:	e000      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006124:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a40      	ldr	r2, [pc, #256]	; (80062b8 <TIM_Base_SetConfig+0x114>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d013      	beq.n	80061e4 <TIM_Base_SetConfig+0x40>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c2:	d00f      	beq.n	80061e4 <TIM_Base_SetConfig+0x40>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a3d      	ldr	r2, [pc, #244]	; (80062bc <TIM_Base_SetConfig+0x118>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d00b      	beq.n	80061e4 <TIM_Base_SetConfig+0x40>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a3c      	ldr	r2, [pc, #240]	; (80062c0 <TIM_Base_SetConfig+0x11c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d007      	beq.n	80061e4 <TIM_Base_SetConfig+0x40>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a3b      	ldr	r2, [pc, #236]	; (80062c4 <TIM_Base_SetConfig+0x120>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d003      	beq.n	80061e4 <TIM_Base_SetConfig+0x40>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a3a      	ldr	r2, [pc, #232]	; (80062c8 <TIM_Base_SetConfig+0x124>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d108      	bne.n	80061f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a2f      	ldr	r2, [pc, #188]	; (80062b8 <TIM_Base_SetConfig+0x114>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d02b      	beq.n	8006256 <TIM_Base_SetConfig+0xb2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006204:	d027      	beq.n	8006256 <TIM_Base_SetConfig+0xb2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a2c      	ldr	r2, [pc, #176]	; (80062bc <TIM_Base_SetConfig+0x118>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d023      	beq.n	8006256 <TIM_Base_SetConfig+0xb2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a2b      	ldr	r2, [pc, #172]	; (80062c0 <TIM_Base_SetConfig+0x11c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d01f      	beq.n	8006256 <TIM_Base_SetConfig+0xb2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a2a      	ldr	r2, [pc, #168]	; (80062c4 <TIM_Base_SetConfig+0x120>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d01b      	beq.n	8006256 <TIM_Base_SetConfig+0xb2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a29      	ldr	r2, [pc, #164]	; (80062c8 <TIM_Base_SetConfig+0x124>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d017      	beq.n	8006256 <TIM_Base_SetConfig+0xb2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a28      	ldr	r2, [pc, #160]	; (80062cc <TIM_Base_SetConfig+0x128>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d013      	beq.n	8006256 <TIM_Base_SetConfig+0xb2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a27      	ldr	r2, [pc, #156]	; (80062d0 <TIM_Base_SetConfig+0x12c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d00f      	beq.n	8006256 <TIM_Base_SetConfig+0xb2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a26      	ldr	r2, [pc, #152]	; (80062d4 <TIM_Base_SetConfig+0x130>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00b      	beq.n	8006256 <TIM_Base_SetConfig+0xb2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a25      	ldr	r2, [pc, #148]	; (80062d8 <TIM_Base_SetConfig+0x134>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d007      	beq.n	8006256 <TIM_Base_SetConfig+0xb2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a24      	ldr	r2, [pc, #144]	; (80062dc <TIM_Base_SetConfig+0x138>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d003      	beq.n	8006256 <TIM_Base_SetConfig+0xb2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a23      	ldr	r2, [pc, #140]	; (80062e0 <TIM_Base_SetConfig+0x13c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d108      	bne.n	8006268 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800625c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	4313      	orrs	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a0a      	ldr	r2, [pc, #40]	; (80062b8 <TIM_Base_SetConfig+0x114>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d003      	beq.n	800629c <TIM_Base_SetConfig+0xf8>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a0c      	ldr	r2, [pc, #48]	; (80062c8 <TIM_Base_SetConfig+0x124>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d103      	bne.n	80062a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	691a      	ldr	r2, [r3, #16]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	615a      	str	r2, [r3, #20]
}
 80062aa:	bf00      	nop
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	40010000 	.word	0x40010000
 80062bc:	40000400 	.word	0x40000400
 80062c0:	40000800 	.word	0x40000800
 80062c4:	40000c00 	.word	0x40000c00
 80062c8:	40010400 	.word	0x40010400
 80062cc:	40014000 	.word	0x40014000
 80062d0:	40014400 	.word	0x40014400
 80062d4:	40014800 	.word	0x40014800
 80062d8:	40001800 	.word	0x40001800
 80062dc:	40001c00 	.word	0x40001c00
 80062e0:	40002000 	.word	0x40002000

080062e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	f023 0201 	bic.w	r2, r3, #1
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0303 	bic.w	r3, r3, #3
 800631a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f023 0302 	bic.w	r3, r3, #2
 800632c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	4313      	orrs	r3, r2
 8006336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a20      	ldr	r2, [pc, #128]	; (80063bc <TIM_OC1_SetConfig+0xd8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d003      	beq.n	8006348 <TIM_OC1_SetConfig+0x64>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a1f      	ldr	r2, [pc, #124]	; (80063c0 <TIM_OC1_SetConfig+0xdc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d10c      	bne.n	8006362 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f023 0308 	bic.w	r3, r3, #8
 800634e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f023 0304 	bic.w	r3, r3, #4
 8006360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a15      	ldr	r2, [pc, #84]	; (80063bc <TIM_OC1_SetConfig+0xd8>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d003      	beq.n	8006372 <TIM_OC1_SetConfig+0x8e>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a14      	ldr	r2, [pc, #80]	; (80063c0 <TIM_OC1_SetConfig+0xdc>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d111      	bne.n	8006396 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	4313      	orrs	r3, r2
 800638a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	621a      	str	r2, [r3, #32]
}
 80063b0:	bf00      	nop
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	40010000 	.word	0x40010000
 80063c0:	40010400 	.word	0x40010400

080063c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f023 0210 	bic.w	r2, r3, #16
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f023 0320 	bic.w	r3, r3, #32
 800640e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a22      	ldr	r2, [pc, #136]	; (80064a8 <TIM_OC2_SetConfig+0xe4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_OC2_SetConfig+0x68>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a21      	ldr	r2, [pc, #132]	; (80064ac <TIM_OC2_SetConfig+0xe8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d10d      	bne.n	8006448 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006446:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a17      	ldr	r2, [pc, #92]	; (80064a8 <TIM_OC2_SetConfig+0xe4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_OC2_SetConfig+0x94>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a16      	ldr	r2, [pc, #88]	; (80064ac <TIM_OC2_SetConfig+0xe8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d113      	bne.n	8006480 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800645e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006466:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4313      	orrs	r3, r2
 800647e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	621a      	str	r2, [r3, #32]
}
 800649a:	bf00      	nop
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	40010000 	.word	0x40010000
 80064ac:	40010400 	.word	0x40010400

080064b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0303 	bic.w	r3, r3, #3
 80064e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	021b      	lsls	r3, r3, #8
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	4313      	orrs	r3, r2
 8006504:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a21      	ldr	r2, [pc, #132]	; (8006590 <TIM_OC3_SetConfig+0xe0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d003      	beq.n	8006516 <TIM_OC3_SetConfig+0x66>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a20      	ldr	r2, [pc, #128]	; (8006594 <TIM_OC3_SetConfig+0xe4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d10d      	bne.n	8006532 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800651c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	021b      	lsls	r3, r3, #8
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a16      	ldr	r2, [pc, #88]	; (8006590 <TIM_OC3_SetConfig+0xe0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d003      	beq.n	8006542 <TIM_OC3_SetConfig+0x92>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a15      	ldr	r2, [pc, #84]	; (8006594 <TIM_OC3_SetConfig+0xe4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d113      	bne.n	800656a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	011b      	lsls	r3, r3, #4
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	4313      	orrs	r3, r2
 800655c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	011b      	lsls	r3, r3, #4
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	621a      	str	r2, [r3, #32]
}
 8006584:	bf00      	nop
 8006586:	371c      	adds	r7, #28
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	40010000 	.word	0x40010000
 8006594:	40010400 	.word	0x40010400

08006598 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	031b      	lsls	r3, r3, #12
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a12      	ldr	r2, [pc, #72]	; (800663c <TIM_OC4_SetConfig+0xa4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d003      	beq.n	8006600 <TIM_OC4_SetConfig+0x68>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a11      	ldr	r2, [pc, #68]	; (8006640 <TIM_OC4_SetConfig+0xa8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d109      	bne.n	8006614 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006606:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	019b      	lsls	r3, r3, #6
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	621a      	str	r2, [r3, #32]
}
 800662e:	bf00      	nop
 8006630:	371c      	adds	r7, #28
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40010000 	.word	0x40010000
 8006640:	40010400 	.word	0x40010400

08006644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f023 0201 	bic.w	r2, r3, #1
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800666e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	011b      	lsls	r3, r3, #4
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	4313      	orrs	r3, r2
 8006678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f023 030a 	bic.w	r3, r3, #10
 8006680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	621a      	str	r2, [r3, #32]
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b087      	sub	sp, #28
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	60f8      	str	r0, [r7, #12]
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	f023 0210 	bic.w	r2, r3, #16
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	031b      	lsls	r3, r3, #12
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	f043 0307 	orr.w	r3, r3, #7
 8006724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	609a      	str	r2, [r3, #8]
}
 800672c:	bf00      	nop
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	021a      	lsls	r2, r3, #8
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	431a      	orrs	r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4313      	orrs	r3, r2
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	609a      	str	r2, [r3, #8]
}
 800676c:	bf00      	nop
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800678c:	2302      	movs	r3, #2
 800678e:	e05a      	b.n	8006846 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a21      	ldr	r2, [pc, #132]	; (8006854 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d022      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067dc:	d01d      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a1d      	ldr	r2, [pc, #116]	; (8006858 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d018      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a1b      	ldr	r2, [pc, #108]	; (800685c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d013      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a1a      	ldr	r2, [pc, #104]	; (8006860 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00e      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a18      	ldr	r2, [pc, #96]	; (8006864 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d009      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a17      	ldr	r2, [pc, #92]	; (8006868 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d004      	beq.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a15      	ldr	r2, [pc, #84]	; (800686c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d10c      	bne.n	8006834 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006820:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	4313      	orrs	r3, r2
 800682a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	40010000 	.word	0x40010000
 8006858:	40000400 	.word	0x40000400
 800685c:	40000800 	.word	0x40000800
 8006860:	40000c00 	.word	0x40000c00
 8006864:	40010400 	.word	0x40010400
 8006868:	40014000 	.word	0x40014000
 800686c:	40001800 	.word	0x40001800

08006870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006898:	b084      	sub	sp, #16
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	f107 001c 	add.w	r0, r7, #28
 80068a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d122      	bne.n	80068f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80068c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d105      	bne.n	80068ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f94a 	bl	8006b84 <USB_CoreReset>
 80068f0:	4603      	mov	r3, r0
 80068f2:	73fb      	strb	r3, [r7, #15]
 80068f4:	e01a      	b.n	800692c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f93e 	bl	8006b84 <USB_CoreReset>
 8006908:	4603      	mov	r3, r0
 800690a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800690c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	639a      	str	r2, [r3, #56]	; 0x38
 800691e:	e005      	b.n	800692c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006924:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	2b01      	cmp	r3, #1
 8006930:	d10b      	bne.n	800694a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f043 0206 	orr.w	r2, r3, #6
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f043 0220 	orr.w	r2, r3, #32
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800694a:	7bfb      	ldrb	r3, [r7, #15]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006956:	b004      	add	sp, #16
 8006958:	4770      	bx	lr

0800695a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800695a:	b480      	push	{r7}
 800695c:	b083      	sub	sp, #12
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f043 0201 	orr.w	r2, r3, #1
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f023 0201 	bic.w	r2, r3, #1
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b082      	sub	sp, #8
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	460b      	mov	r3, r1
 80069a8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069b6:	78fb      	ldrb	r3, [r7, #3]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d106      	bne.n	80069ca <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	60da      	str	r2, [r3, #12]
 80069c8:	e00b      	b.n	80069e2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80069ca:	78fb      	ldrb	r3, [r7, #3]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d106      	bne.n	80069de <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	60da      	str	r2, [r3, #12]
 80069dc:	e001      	b.n	80069e2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e003      	b.n	80069ea <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80069e2:	2032      	movs	r0, #50	; 0x32
 80069e4:	f7fb fa18 	bl	8001e18 <HAL_Delay>

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	019b      	lsls	r3, r3, #6
 8006a06:	f043 0220 	orr.w	r2, r3, #32
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3301      	adds	r3, #1
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4a09      	ldr	r2, [pc, #36]	; (8006a3c <USB_FlushTxFifo+0x48>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d901      	bls.n	8006a20 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e006      	b.n	8006a2e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	d0f0      	beq.n	8006a0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	00030d40 	.word	0x00030d40

08006a40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2210      	movs	r2, #16
 8006a50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3301      	adds	r3, #1
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4a09      	ldr	r2, [pc, #36]	; (8006a80 <USB_FlushRxFifo+0x40>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d901      	bls.n	8006a64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e006      	b.n	8006a72 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	f003 0310 	and.w	r3, r3, #16
 8006a6c:	2b10      	cmp	r3, #16
 8006a6e:	d0f0      	beq.n	8006a52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	00030d40 	.word	0x00030d40

08006a84 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b089      	sub	sp, #36	; 0x24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	4611      	mov	r1, r2
 8006a90:	461a      	mov	r2, r3
 8006a92:	460b      	mov	r3, r1
 8006a94:	71fb      	strb	r3, [r7, #7]
 8006a96:	4613      	mov	r3, r2
 8006a98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006aa2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d11a      	bne.n	8006ae0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006aaa:	88bb      	ldrh	r3, [r7, #4]
 8006aac:	3303      	adds	r3, #3
 8006aae:	089b      	lsrs	r3, r3, #2
 8006ab0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61bb      	str	r3, [r7, #24]
 8006ab6:	e00f      	b.n	8006ad8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ab8:	79fb      	ldrb	r3, [r7, #7]
 8006aba:	031a      	lsls	r2, r3, #12
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	3304      	adds	r3, #4
 8006ad0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d3eb      	bcc.n	8006ab8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3724      	adds	r7, #36	; 0x24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b089      	sub	sp, #36	; 0x24
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	4613      	mov	r3, r2
 8006afa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006b04:	88fb      	ldrh	r3, [r7, #6]
 8006b06:	3303      	adds	r3, #3
 8006b08:	089b      	lsrs	r3, r3, #2
 8006b0a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	e00b      	b.n	8006b2a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	3304      	adds	r3, #4
 8006b22:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	3301      	adds	r3, #1
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d3ef      	bcc.n	8006b12 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006b32:	69fb      	ldr	r3, [r7, #28]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3724      	adds	r7, #36	; 0x24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4013      	ands	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b58:	68fb      	ldr	r3, [r7, #12]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	f003 0301 	and.w	r3, r3, #1
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
	...

08006b84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3301      	adds	r3, #1
 8006b94:	60fb      	str	r3, [r7, #12]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4a13      	ldr	r2, [pc, #76]	; (8006be8 <USB_CoreReset+0x64>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d901      	bls.n	8006ba2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e01b      	b.n	8006bda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	daf2      	bge.n	8006b90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f043 0201 	orr.w	r2, r3, #1
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4a09      	ldr	r2, [pc, #36]	; (8006be8 <USB_CoreReset+0x64>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d901      	bls.n	8006bcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e006      	b.n	8006bda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d0f0      	beq.n	8006bba <USB_CoreReset+0x36>

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	00030d40 	.word	0x00030d40

08006bec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bec:	b084      	sub	sp, #16
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	f107 001c 	add.w	r0, r7, #28
 8006bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c08:	461a      	mov	r2, r3
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d018      	beq.n	8006c70 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d10a      	bne.n	8006c5a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c52:	f043 0304 	orr.w	r3, r3, #4
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	e014      	b.n	8006c84 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c68:	f023 0304 	bic.w	r3, r3, #4
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	e009      	b.n	8006c84 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c7e:	f023 0304 	bic.w	r3, r3, #4
 8006c82:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006c84:	2110      	movs	r1, #16
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7ff feb4 	bl	80069f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff fed7 	bl	8006a40 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	e015      	b.n	8006cc4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006caa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb8:	461a      	mov	r2, r3
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d3e5      	bcc.n	8006c98 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006ccc:	2101      	movs	r1, #1
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f882 	bl	8006dd8 <USB_DriveVbus>

  HAL_Delay(200U);
 8006cd4:	20c8      	movs	r0, #200	; 0xc8
 8006cd6:	f7fb f89f 	bl	8001e18 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ce6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00b      	beq.n	8006d0c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cfa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a14      	ldr	r2, [pc, #80]	; (8006d50 <USB_HostInit+0x164>)
 8006d00:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a13      	ldr	r2, [pc, #76]	; (8006d54 <USB_HostInit+0x168>)
 8006d06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006d0a:	e009      	b.n	8006d20 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2280      	movs	r2, #128	; 0x80
 8006d10:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a10      	ldr	r2, [pc, #64]	; (8006d58 <USB_HostInit+0x16c>)
 8006d16:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a10      	ldr	r2, [pc, #64]	; (8006d5c <USB_HostInit+0x170>)
 8006d1c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d105      	bne.n	8006d32 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	f043 0210 	orr.w	r2, r3, #16
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	4b0a      	ldr	r3, [pc, #40]	; (8006d60 <USB_HostInit+0x174>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d4a:	b004      	add	sp, #16
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	01000200 	.word	0x01000200
 8006d54:	00e00300 	.word	0x00e00300
 8006d58:	00600080 	.word	0x00600080
 8006d5c:	004000e0 	.word	0x004000e0
 8006d60:	a3200008 	.word	0xa3200008

08006d64 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d82:	f023 0303 	bic.w	r3, r3, #3
 8006d86:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	68f9      	ldr	r1, [r7, #12]
 8006d98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006da0:	78fb      	ldrb	r3, [r7, #3]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d107      	bne.n	8006db6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dac:	461a      	mov	r2, r3
 8006dae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006db2:	6053      	str	r3, [r2, #4]
 8006db4:	e009      	b.n	8006dca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006db6:	78fb      	ldrb	r3, [r7, #3]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d106      	bne.n	8006dca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f241 7370 	movw	r3, #6000	; 0x1770
 8006dc8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006dfc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d109      	bne.n	8006e1c <USB_DriveVbus+0x44>
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d106      	bne.n	8006e1c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e1a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e26:	d109      	bne.n	8006e3c <USB_DriveVbus+0x64>
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d106      	bne.n	8006e3c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e3a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	0c5b      	lsrs	r3, r3, #17
 8006e68:	f003 0303 	and.w	r3, r3, #3
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	b29b      	uxth	r3, r3
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
	...

08006e9c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4603      	mov	r3, r0
 8006eac:	70fb      	strb	r3, [r7, #3]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	70bb      	strb	r3, [r7, #2]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006ebe:	78fb      	ldrb	r3, [r7, #3]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ed0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006ed2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d87e      	bhi.n	8006fd8 <USB_HC_Init+0x13c>
 8006eda:	a201      	add	r2, pc, #4	; (adr r2, 8006ee0 <USB_HC_Init+0x44>)
 8006edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee0:	08006ef1 	.word	0x08006ef1
 8006ee4:	08006f9b 	.word	0x08006f9b
 8006ee8:	08006ef1 	.word	0x08006ef1
 8006eec:	08006f5d 	.word	0x08006f5d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ef0:	78fb      	ldrb	r3, [r7, #3]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efc:	461a      	mov	r2, r3
 8006efe:	f240 439d 	movw	r3, #1181	; 0x49d
 8006f02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006f04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	da10      	bge.n	8006f2e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006f0c:	78fb      	ldrb	r3, [r7, #3]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	78fa      	ldrb	r2, [r7, #3]
 8006f1c:	0151      	lsls	r1, r2, #5
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	440a      	add	r2, r1
 8006f22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f2a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006f2c:	e057      	b.n	8006fde <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d051      	beq.n	8006fde <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	78fa      	ldrb	r2, [r7, #3]
 8006f4a:	0151      	lsls	r1, r2, #5
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	440a      	add	r2, r1
 8006f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006f58:	60d3      	str	r3, [r2, #12]
      break;
 8006f5a:	e040      	b.n	8006fde <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f5c:	78fb      	ldrb	r3, [r7, #3]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f68:	461a      	mov	r2, r3
 8006f6a:	f240 639d 	movw	r3, #1693	; 0x69d
 8006f6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006f70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	da34      	bge.n	8006fe2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006f78:	78fb      	ldrb	r3, [r7, #3]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	78fa      	ldrb	r2, [r7, #3]
 8006f88:	0151      	lsls	r1, r2, #5
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	440a      	add	r2, r1
 8006f8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f96:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006f98:	e023      	b.n	8006fe2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f9a:	78fb      	ldrb	r3, [r7, #3]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f240 2325 	movw	r3, #549	; 0x225
 8006fac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006fae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	da17      	bge.n	8006fe6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006fb6:	78fb      	ldrb	r3, [r7, #3]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	78fa      	ldrb	r2, [r7, #3]
 8006fc6:	0151      	lsls	r1, r2, #5
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	440a      	add	r2, r1
 8006fcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fd0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006fd4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006fd6:	e006      	b.n	8006fe6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	77fb      	strb	r3, [r7, #31]
      break;
 8006fdc:	e004      	b.n	8006fe8 <USB_HC_Init+0x14c>
      break;
 8006fde:	bf00      	nop
 8006fe0:	e002      	b.n	8006fe8 <USB_HC_Init+0x14c>
      break;
 8006fe2:	bf00      	nop
 8006fe4:	e000      	b.n	8006fe8 <USB_HC_Init+0x14c>
      break;
 8006fe6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fee:	699a      	ldr	r2, [r3, #24]
 8006ff0:	78fb      	ldrb	r3, [r7, #3]
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ffc:	6939      	ldr	r1, [r7, #16]
 8006ffe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007002:	4313      	orrs	r3, r2
 8007004:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007012:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007016:	2b00      	cmp	r3, #0
 8007018:	da03      	bge.n	8007022 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800701a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	e001      	b.n	8007026 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff ff0f 	bl	8006e4a <USB_GetHostSpeed>
 800702c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800702e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007032:	2b02      	cmp	r3, #2
 8007034:	d106      	bne.n	8007044 <USB_HC_Init+0x1a8>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b02      	cmp	r3, #2
 800703a:	d003      	beq.n	8007044 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800703c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	e001      	b.n	8007048 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007048:	787b      	ldrb	r3, [r7, #1]
 800704a:	059b      	lsls	r3, r3, #22
 800704c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007050:	78bb      	ldrb	r3, [r7, #2]
 8007052:	02db      	lsls	r3, r3, #11
 8007054:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007058:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800705a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800705e:	049b      	lsls	r3, r3, #18
 8007060:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007064:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007066:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007068:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800706c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007072:	78fb      	ldrb	r3, [r7, #3]
 8007074:	0159      	lsls	r1, r3, #5
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	440b      	add	r3, r1
 800707a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800707e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007084:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007086:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800708a:	2b03      	cmp	r3, #3
 800708c:	d10f      	bne.n	80070ae <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800708e:	78fb      	ldrb	r3, [r7, #3]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	4413      	add	r3, r2
 8007096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	78fa      	ldrb	r2, [r7, #3]
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80070ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3720      	adds	r7, #32
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08c      	sub	sp, #48	; 0x30
 80070bc:	af02      	add	r7, sp, #8
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	4613      	mov	r3, r2
 80070c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	785b      	ldrb	r3, [r3, #1]
 80070ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80070d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070d4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d02d      	beq.n	800713e <USB_HC_StartXfer+0x86>
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	791b      	ldrb	r3, [r3, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d129      	bne.n	800713e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80070ea:	79fb      	ldrb	r3, [r7, #7]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d117      	bne.n	8007120 <USB_HC_StartXfer+0x68>
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	79db      	ldrb	r3, [r3, #7]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <USB_HC_StartXfer+0x48>
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	79db      	ldrb	r3, [r3, #7]
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d10f      	bne.n	8007120 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	4413      	add	r3, r2
 8007108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	69fa      	ldr	r2, [r7, #28]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	6a3a      	ldr	r2, [r7, #32]
 8007114:	440a      	add	r2, r1
 8007116:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800711a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10b      	bne.n	800713e <USB_HC_StartXfer+0x86>
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	795b      	ldrb	r3, [r3, #5]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d107      	bne.n	800713e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	785b      	ldrb	r3, [r3, #1]
 8007132:	4619      	mov	r1, r3
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 fa2f 	bl	8007598 <USB_DoPing>
      return HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	e0f8      	b.n	8007330 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d018      	beq.n	8007178 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	8912      	ldrh	r2, [r2, #8]
 800714e:	4413      	add	r3, r2
 8007150:	3b01      	subs	r3, #1
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	8912      	ldrh	r2, [r2, #8]
 8007156:	fbb3 f3f2 	udiv	r3, r3, r2
 800715a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800715c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800715e:	8b7b      	ldrh	r3, [r7, #26]
 8007160:	429a      	cmp	r2, r3
 8007162:	d90b      	bls.n	800717c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007164:	8b7b      	ldrh	r3, [r7, #26]
 8007166:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007168:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	8912      	ldrh	r2, [r2, #8]
 800716e:	fb02 f203 	mul.w	r2, r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	611a      	str	r2, [r3, #16]
 8007176:	e001      	b.n	800717c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007178:	2301      	movs	r3, #1
 800717a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	78db      	ldrb	r3, [r3, #3]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d007      	beq.n	8007194 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	8912      	ldrh	r2, [r2, #8]
 800718a:	fb02 f203 	mul.w	r2, r2, r3
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	611a      	str	r2, [r3, #16]
 8007192:	e003      	b.n	800719c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	695a      	ldr	r2, [r3, #20]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80071a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071a6:	04d9      	lsls	r1, r3, #19
 80071a8:	4b63      	ldr	r3, [pc, #396]	; (8007338 <USB_HC_StartXfer+0x280>)
 80071aa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071ac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	7a9b      	ldrb	r3, [r3, #10]
 80071b2:	075b      	lsls	r3, r3, #29
 80071b4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071b8:	69f9      	ldr	r1, [r7, #28]
 80071ba:	0148      	lsls	r0, r1, #5
 80071bc:	6a39      	ldr	r1, [r7, #32]
 80071be:	4401      	add	r1, r0
 80071c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80071c4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071c6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	68d9      	ldr	r1, [r3, #12]
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071de:	460a      	mov	r2, r1
 80071e0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	bf0c      	ite	eq
 80071f2:	2301      	moveq	r3, #1
 80071f4:	2300      	movne	r3, #0
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	4413      	add	r3, r2
 8007202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	0151      	lsls	r1, r2, #5
 800720c:	6a3a      	ldr	r2, [r7, #32]
 800720e:	440a      	add	r2, r1
 8007210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007214:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007218:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	4413      	add	r3, r2
 8007222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	7e7b      	ldrb	r3, [r7, #25]
 800722a:	075b      	lsls	r3, r3, #29
 800722c:	69f9      	ldr	r1, [r7, #28]
 800722e:	0148      	lsls	r0, r1, #5
 8007230:	6a39      	ldr	r1, [r7, #32]
 8007232:	4401      	add	r1, r0
 8007234:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007238:	4313      	orrs	r3, r2
 800723a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	4413      	add	r3, r2
 8007244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007252:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	78db      	ldrb	r3, [r3, #3]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d004      	beq.n	8007266 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007262:	613b      	str	r3, [r7, #16]
 8007264:	e003      	b.n	800726e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800726c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007274:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	4413      	add	r3, r2
 800727e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007282:	461a      	mov	r2, r3
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007288:	79fb      	ldrb	r3, [r7, #7]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	e04e      	b.n	8007330 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	78db      	ldrb	r3, [r3, #3]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d149      	bne.n	800732e <USB_HC_StartXfer+0x276>
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d045      	beq.n	800732e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	79db      	ldrb	r3, [r3, #7]
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d830      	bhi.n	800730c <USB_HC_StartXfer+0x254>
 80072aa:	a201      	add	r2, pc, #4	; (adr r2, 80072b0 <USB_HC_StartXfer+0x1f8>)
 80072ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b0:	080072c1 	.word	0x080072c1
 80072b4:	080072e5 	.word	0x080072e5
 80072b8:	080072c1 	.word	0x080072c1
 80072bc:	080072e5 	.word	0x080072e5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	3303      	adds	r3, #3
 80072c6:	089b      	lsrs	r3, r3, #2
 80072c8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80072ca:	8afa      	ldrh	r2, [r7, #22]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d91c      	bls.n	8007310 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	f043 0220 	orr.w	r2, r3, #32
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80072e2:	e015      	b.n	8007310 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	3303      	adds	r3, #3
 80072ea:	089b      	lsrs	r3, r3, #2
 80072ec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80072ee:	8afa      	ldrh	r2, [r7, #22]
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d90a      	bls.n	8007314 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	619a      	str	r2, [r3, #24]
        }
        break;
 800730a:	e003      	b.n	8007314 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800730c:	bf00      	nop
 800730e:	e002      	b.n	8007316 <USB_HC_StartXfer+0x25e>
        break;
 8007310:	bf00      	nop
 8007312:	e000      	b.n	8007316 <USB_HC_StartXfer+0x25e>
        break;
 8007314:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	68d9      	ldr	r1, [r3, #12]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	785a      	ldrb	r2, [r3, #1]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	b29b      	uxth	r3, r3
 8007324:	2000      	movs	r0, #0
 8007326:	9000      	str	r0, [sp, #0]
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff fbab 	bl	8006a84 <USB_WritePacket>
  }

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3728      	adds	r7, #40	; 0x28
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	1ff80000 	.word	0x1ff80000

0800733c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	b29b      	uxth	r3, r3
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800735e:	b480      	push	{r7}
 8007360:	b089      	sub	sp, #36	; 0x24
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	460b      	mov	r3, r1
 8007368:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800736e:	78fb      	ldrb	r3, [r7, #3]
 8007370:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	4413      	add	r3, r2
 800737e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	0c9b      	lsrs	r3, r3, #18
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	4413      	add	r3, r2
 8007394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	0fdb      	lsrs	r3, r3, #31
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f003 0320 	and.w	r3, r3, #32
 80073aa:	2b20      	cmp	r3, #32
 80073ac:	d104      	bne.n	80073b8 <USB_HC_Halt+0x5a>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	e0e8      	b.n	800758a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <USB_HC_Halt+0x66>
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d173      	bne.n	80074ac <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	0151      	lsls	r1, r2, #5
 80073d6:	69ba      	ldr	r2, [r7, #24]
 80073d8:	440a      	add	r2, r1
 80073da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073e2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f040 80cb 	bne.w	8007588 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d143      	bne.n	8007486 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	015a      	lsls	r2, r3, #5
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	4413      	add	r3, r2
 8007406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	0151      	lsls	r1, r2, #5
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	440a      	add	r2, r1
 8007414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007418:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800741c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	4413      	add	r3, r2
 8007426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	0151      	lsls	r1, r2, #5
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	440a      	add	r2, r1
 8007434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800743c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	4413      	add	r3, r2
 8007446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	0151      	lsls	r1, r2, #5
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	440a      	add	r2, r1
 8007454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007458:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800745c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	3301      	adds	r3, #1
 8007462:	61fb      	str	r3, [r7, #28]
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800746a:	d81d      	bhi.n	80074a8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	4413      	add	r3, r2
 8007474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800747e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007482:	d0ec      	beq.n	800745e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007484:	e080      	b.n	8007588 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	4413      	add	r3, r2
 800748e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	0151      	lsls	r1, r2, #5
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	440a      	add	r2, r1
 800749c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074a4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074a6:	e06f      	b.n	8007588 <USB_HC_Halt+0x22a>
            break;
 80074a8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074aa:	e06d      	b.n	8007588 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	0151      	lsls	r1, r2, #5
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	440a      	add	r2, r1
 80074c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074ca:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d143      	bne.n	8007564 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	0151      	lsls	r1, r2, #5
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	440a      	add	r2, r1
 80074f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074fa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	4413      	add	r3, r2
 8007504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	0151      	lsls	r1, r2, #5
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	440a      	add	r2, r1
 8007512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007516:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800751a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	4413      	add	r3, r2
 8007524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	0151      	lsls	r1, r2, #5
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	440a      	add	r2, r1
 8007532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007536:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800753a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	3301      	adds	r3, #1
 8007540:	61fb      	str	r3, [r7, #28]
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007548:	d81d      	bhi.n	8007586 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	015a      	lsls	r2, r3, #5
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	4413      	add	r3, r2
 8007552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800755c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007560:	d0ec      	beq.n	800753c <USB_HC_Halt+0x1de>
 8007562:	e011      	b.n	8007588 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	4413      	add	r3, r2
 800756c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	0151      	lsls	r1, r2, #5
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	440a      	add	r2, r1
 800757a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800757e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	e000      	b.n	8007588 <USB_HC_Halt+0x22a>
          break;
 8007586:	bf00      	nop
    }
  }

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3724      	adds	r7, #36	; 0x24
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
	...

08007598 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80075a8:	78fb      	ldrb	r3, [r7, #3]
 80075aa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80075ac:	2301      	movs	r3, #1
 80075ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	04da      	lsls	r2, r3, #19
 80075b4:	4b15      	ldr	r3, [pc, #84]	; (800760c <USB_DoPing+0x74>)
 80075b6:	4013      	ands	r3, r2
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	0151      	lsls	r1, r2, #5
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	440a      	add	r2, r1
 80075c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075c8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075e0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075e8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f6:	461a      	mov	r2, r3
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	371c      	adds	r7, #28
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	1ff80000 	.word	0x1ff80000

08007610 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff f9ab 	bl	800697c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007626:	2110      	movs	r1, #16
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff f9e3 	bl	80069f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff fa06 	bl	8006a40 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007634:	2300      	movs	r3, #0
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	e01f      	b.n	800767a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4413      	add	r3, r2
 8007642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007650:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007658:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007660:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4413      	add	r3, r2
 800766a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800766e:	461a      	mov	r2, r3
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	3301      	adds	r3, #1
 8007678:	613b      	str	r3, [r7, #16]
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	2b0f      	cmp	r3, #15
 800767e:	d9dc      	bls.n	800763a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007680:	2300      	movs	r3, #0
 8007682:	613b      	str	r3, [r7, #16]
 8007684:	e034      	b.n	80076f0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	4413      	add	r3, r2
 800768e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800769c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076a4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076ac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ba:	461a      	mov	r2, r3
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	3301      	adds	r3, #1
 80076c4:	617b      	str	r3, [r7, #20]
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076cc:	d80c      	bhi.n	80076e8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076e4:	d0ec      	beq.n	80076c0 <USB_StopHost+0xb0>
 80076e6:	e000      	b.n	80076ea <USB_StopHost+0xda>
        break;
 80076e8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	3301      	adds	r3, #1
 80076ee:	613b      	str	r3, [r7, #16]
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	2b0f      	cmp	r3, #15
 80076f4:	d9c7      	bls.n	8007686 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076fc:	461a      	mov	r2, r3
 80076fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007702:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800770a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7ff f924 	bl	800695a <USB_EnableGlobalInt>

  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3718      	adds	r7, #24
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800771c:	b590      	push	{r4, r7, lr}
 800771e:	b089      	sub	sp, #36	; 0x24
 8007720:	af04      	add	r7, sp, #16
 8007722:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007724:	2301      	movs	r3, #1
 8007726:	2202      	movs	r2, #2
 8007728:	2102      	movs	r1, #2
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fc66 	bl	8007ffc <USBH_FindInterface>
 8007730:	4603      	mov	r3, r0
 8007732:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007734:	7bfb      	ldrb	r3, [r7, #15]
 8007736:	2bff      	cmp	r3, #255	; 0xff
 8007738:	d002      	beq.n	8007740 <USBH_CDC_InterfaceInit+0x24>
 800773a:	7bfb      	ldrb	r3, [r7, #15]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d901      	bls.n	8007744 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007740:	2302      	movs	r3, #2
 8007742:	e13d      	b.n	80079c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fc3b 	bl	8007fc4 <USBH_SelectInterface>
 800774e:	4603      	mov	r3, r0
 8007750:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007752:	7bbb      	ldrb	r3, [r7, #14]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007758:	2302      	movs	r3, #2
 800775a:	e131      	b.n	80079c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007762:	2050      	movs	r0, #80	; 0x50
 8007764:	f001 fb12 	bl	8008d8c <malloc>
 8007768:	4603      	mov	r3, r0
 800776a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800777c:	2302      	movs	r3, #2
 800777e:	e11f      	b.n	80079c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007780:	2250      	movs	r2, #80	; 0x50
 8007782:	2100      	movs	r1, #0
 8007784:	68b8      	ldr	r0, [r7, #8]
 8007786:	f001 fb11 	bl	8008dac <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800778a:	7bfb      	ldrb	r3, [r7, #15]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	211a      	movs	r1, #26
 8007790:	fb01 f303 	mul.w	r3, r1, r3
 8007794:	4413      	add	r3, r2
 8007796:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	b25b      	sxtb	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	da15      	bge.n	80077ce <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	211a      	movs	r1, #26
 80077a8:	fb01 f303 	mul.w	r3, r1, r3
 80077ac:	4413      	add	r3, r2
 80077ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077b2:	781a      	ldrb	r2, [r3, #0]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	211a      	movs	r1, #26
 80077be:	fb01 f303 	mul.w	r3, r1, r3
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80077c8:	881a      	ldrh	r2, [r3, #0]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	785b      	ldrb	r3, [r3, #1]
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 ff9c 	bl	8008712 <USBH_AllocPipe>
 80077da:	4603      	mov	r3, r0
 80077dc:	461a      	mov	r2, r3
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	7819      	ldrb	r1, [r3, #0]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	7858      	ldrb	r0, [r3, #1]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	8952      	ldrh	r2, [r2, #10]
 80077fa:	9202      	str	r2, [sp, #8]
 80077fc:	2203      	movs	r2, #3
 80077fe:	9201      	str	r2, [sp, #4]
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	4623      	mov	r3, r4
 8007804:	4602      	mov	r2, r0
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 ff54 	bl	80086b4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	2200      	movs	r2, #0
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 fa17 	bl	8008c48 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800781a:	2300      	movs	r3, #0
 800781c:	2200      	movs	r2, #0
 800781e:	210a      	movs	r1, #10
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fbeb 	bl	8007ffc <USBH_FindInterface>
 8007826:	4603      	mov	r3, r0
 8007828:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	2bff      	cmp	r3, #255	; 0xff
 800782e:	d002      	beq.n	8007836 <USBH_CDC_InterfaceInit+0x11a>
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d901      	bls.n	800783a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007836:	2302      	movs	r3, #2
 8007838:	e0c2      	b.n	80079c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	211a      	movs	r1, #26
 8007840:	fb01 f303 	mul.w	r3, r1, r3
 8007844:	4413      	add	r3, r2
 8007846:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	b25b      	sxtb	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	da16      	bge.n	8007880 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007852:	7bfb      	ldrb	r3, [r7, #15]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	211a      	movs	r1, #26
 8007858:	fb01 f303 	mul.w	r3, r1, r3
 800785c:	4413      	add	r3, r2
 800785e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007862:	781a      	ldrb	r2, [r3, #0]
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	211a      	movs	r1, #26
 800786e:	fb01 f303 	mul.w	r3, r1, r3
 8007872:	4413      	add	r3, r2
 8007874:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007878:	881a      	ldrh	r2, [r3, #0]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	835a      	strh	r2, [r3, #26]
 800787e:	e015      	b.n	80078ac <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	211a      	movs	r1, #26
 8007886:	fb01 f303 	mul.w	r3, r1, r3
 800788a:	4413      	add	r3, r2
 800788c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007890:	781a      	ldrb	r2, [r3, #0]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	211a      	movs	r1, #26
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80078a6:	881a      	ldrh	r2, [r3, #0]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	211a      	movs	r1, #26
 80078b2:	fb01 f303 	mul.w	r3, r1, r3
 80078b6:	4413      	add	r3, r2
 80078b8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	b25b      	sxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	da16      	bge.n	80078f2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	211a      	movs	r1, #26
 80078ca:	fb01 f303 	mul.w	r3, r1, r3
 80078ce:	4413      	add	r3, r2
 80078d0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80078d4:	781a      	ldrb	r2, [r3, #0]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	211a      	movs	r1, #26
 80078e0:	fb01 f303 	mul.w	r3, r1, r3
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80078ea:	881a      	ldrh	r2, [r3, #0]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	835a      	strh	r2, [r3, #26]
 80078f0:	e015      	b.n	800791e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	211a      	movs	r1, #26
 80078f8:	fb01 f303 	mul.w	r3, r1, r3
 80078fc:	4413      	add	r3, r2
 80078fe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007902:	781a      	ldrb	r2, [r3, #0]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	211a      	movs	r1, #26
 800790e:	fb01 f303 	mul.w	r3, r1, r3
 8007912:	4413      	add	r3, r2
 8007914:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007918:	881a      	ldrh	r2, [r3, #0]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	7b9b      	ldrb	r3, [r3, #14]
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fef4 	bl	8008712 <USBH_AllocPipe>
 800792a:	4603      	mov	r3, r0
 800792c:	461a      	mov	r2, r3
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	7bdb      	ldrb	r3, [r3, #15]
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 feea 	bl	8008712 <USBH_AllocPipe>
 800793e:	4603      	mov	r3, r0
 8007940:	461a      	mov	r2, r3
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	7b59      	ldrb	r1, [r3, #13]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	7b98      	ldrb	r0, [r3, #14]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	8b12      	ldrh	r2, [r2, #24]
 800795e:	9202      	str	r2, [sp, #8]
 8007960:	2202      	movs	r2, #2
 8007962:	9201      	str	r2, [sp, #4]
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	4623      	mov	r3, r4
 8007968:	4602      	mov	r2, r0
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fea2 	bl	80086b4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	7b19      	ldrb	r1, [r3, #12]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	7bd8      	ldrb	r0, [r3, #15]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	8b52      	ldrh	r2, [r2, #26]
 8007988:	9202      	str	r2, [sp, #8]
 800798a:	2202      	movs	r2, #2
 800798c:	9201      	str	r2, [sp, #4]
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	4623      	mov	r3, r4
 8007992:	4602      	mov	r2, r0
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fe8d 	bl	80086b4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	7b5b      	ldrb	r3, [r3, #13]
 80079a6:	2200      	movs	r2, #0
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 f94c 	bl	8008c48 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	7b1b      	ldrb	r3, [r3, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 f945 	bl	8008c48 <USBH_LL_SetToggle>

  return USBH_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd90      	pop	{r4, r7, pc}

080079c8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00e      	beq.n	8007a00 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fe82 	bl	80086f2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fead 	bl	8008754 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	7b1b      	ldrb	r3, [r3, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00e      	beq.n	8007a26 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	7b1b      	ldrb	r3, [r3, #12]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fe6f 	bl	80086f2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	7b1b      	ldrb	r3, [r3, #12]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fe9a 	bl	8008754 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	7b5b      	ldrb	r3, [r3, #13]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00e      	beq.n	8007a4c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	7b5b      	ldrb	r3, [r3, #13]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fe5c 	bl	80086f2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	7b5b      	ldrb	r3, [r3, #13]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fe87 	bl	8008754 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00b      	beq.n	8007a70 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f001 f99b 	bl	8008d9c <free>
    phost->pActiveClass->pData = 0U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3340      	adds	r3, #64	; 0x40
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f8b1 	bl	8007bfa <GetLineCoding>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007a9c:	7afb      	ldrb	r3, [r7, #11]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d105      	bne.n	8007aae <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007aa8:	2102      	movs	r1, #2
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007aae:	7afb      	ldrb	r3, [r7, #11]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007ad8:	2b04      	cmp	r3, #4
 8007ada:	d877      	bhi.n	8007bcc <USBH_CDC_Process+0x114>
 8007adc:	a201      	add	r2, pc, #4	; (adr r2, 8007ae4 <USBH_CDC_Process+0x2c>)
 8007ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae2:	bf00      	nop
 8007ae4:	08007af9 	.word	0x08007af9
 8007ae8:	08007aff 	.word	0x08007aff
 8007aec:	08007b2f 	.word	0x08007b2f
 8007af0:	08007ba3 	.word	0x08007ba3
 8007af4:	08007bb1 	.word	0x08007bb1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73fb      	strb	r3, [r7, #15]
      break;
 8007afc:	e06d      	b.n	8007bda <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f897 	bl	8007c38 <SetLineCoding>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d104      	bne.n	8007b1e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007b1c:	e058      	b.n	8007bd0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d055      	beq.n	8007bd0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2204      	movs	r2, #4
 8007b28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007b2c:	e050      	b.n	8007bd0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	3340      	adds	r3, #64	; 0x40
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f860 	bl	8007bfa <GetLineCoding>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d126      	bne.n	8007b92 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b56:	791b      	ldrb	r3, [r3, #4]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d13b      	bne.n	8007bd4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b66:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d133      	bne.n	8007bd4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b76:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d12b      	bne.n	8007bd4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b84:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d124      	bne.n	8007bd4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f958 	bl	8007e40 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007b90:	e020      	b.n	8007bd4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d01d      	beq.n	8007bd4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2204      	movs	r2, #4
 8007b9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007ba0:	e018      	b.n	8007bd4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f867 	bl	8007c76 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f8da 	bl	8007d62 <CDC_ProcessReception>
      break;
 8007bae:	e014      	b.n	8007bda <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fb08 	bl	80081c8 <USBH_ClrFeature>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10a      	bne.n	8007bd8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007bca:	e005      	b.n	8007bd8 <USBH_CDC_Process+0x120>

    default:
      break;
 8007bcc:	bf00      	nop
 8007bce:	e004      	b.n	8007bda <USBH_CDC_Process+0x122>
      break;
 8007bd0:	bf00      	nop
 8007bd2:	e002      	b.n	8007bda <USBH_CDC_Process+0x122>
      break;
 8007bd4:	bf00      	nop
 8007bd6:	e000      	b.n	8007bda <USBH_CDC_Process+0x122>
      break;
 8007bd8:	bf00      	nop

  }

  return status;
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	22a1      	movs	r2, #161	; 0xa1
 8007c08:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2221      	movs	r2, #33	; 0x21
 8007c0e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2207      	movs	r2, #7
 8007c20:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2207      	movs	r2, #7
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 faf1 	bl	8008210 <USBH_CtlReq>
 8007c2e:	4603      	mov	r3, r0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2221      	movs	r2, #33	; 0x21
 8007c46:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2207      	movs	r2, #7
 8007c5e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2207      	movs	r2, #7
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fad2 	bl	8008210 <USBH_CtlReq>
 8007c6c:	4603      	mov	r3, r0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b086      	sub	sp, #24
 8007c7a:	af02      	add	r7, sp, #8
 8007c7c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d002      	beq.n	8007c9c <CDC_ProcessTransmission+0x26>
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d023      	beq.n	8007ce2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007c9a:	e05e      	b.n	8007d5a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	8b12      	ldrh	r2, [r2, #24]
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d90b      	bls.n	8007cc0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	69d9      	ldr	r1, [r3, #28]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8b1a      	ldrh	r2, [r3, #24]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	7b5b      	ldrb	r3, [r3, #13]
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	9000      	str	r0, [sp, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fcb8 	bl	800862e <USBH_BulkSendData>
 8007cbe:	e00b      	b.n	8007cd8 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	7b5b      	ldrb	r3, [r3, #13]
 8007cce:	2001      	movs	r0, #1
 8007cd0:	9000      	str	r0, [sp, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fcab 	bl	800862e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007ce0:	e03b      	b.n	8007d5a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	7b5b      	ldrb	r3, [r3, #13]
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 ff83 	bl	8008bf4 <USBH_LL_GetURBState>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007cf2:	7afb      	ldrb	r3, [r7, #11]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d128      	bne.n	8007d4a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	8b12      	ldrh	r2, [r2, #24]
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d90e      	bls.n	8007d22 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	8b12      	ldrh	r2, [r2, #24]
 8007d0c:	1a9a      	subs	r2, r3, r2
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	8b12      	ldrh	r2, [r2, #24]
 8007d1a:	441a      	add	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	61da      	str	r2, [r3, #28]
 8007d20:	e002      	b.n	8007d28 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d004      	beq.n	8007d3a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d38:	e00e      	b.n	8007d58 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f868 	bl	8007e18 <USBH_CDC_TransmitCallback>
      break;
 8007d48:	e006      	b.n	8007d58 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007d4a:	7afb      	ldrb	r3, [r7, #11]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d103      	bne.n	8007d58 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d58:	bf00      	nop
  }
}
 8007d5a:	bf00      	nop
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b086      	sub	sp, #24
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d70:	69db      	ldr	r3, [r3, #28]
 8007d72:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d74:	2300      	movs	r3, #0
 8007d76:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d002      	beq.n	8007d88 <CDC_ProcessReception+0x26>
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d00e      	beq.n	8007da4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007d86:	e043      	b.n	8007e10 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	6a19      	ldr	r1, [r3, #32]
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	8b5a      	ldrh	r2, [r3, #26]
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	7b1b      	ldrb	r3, [r3, #12]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fc6f 	bl	8008678 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	2204      	movs	r2, #4
 8007d9e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007da2:	e035      	b.n	8007e10 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	7b1b      	ldrb	r3, [r3, #12]
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 ff22 	bl	8008bf4 <USBH_LL_GetURBState>
 8007db0:	4603      	mov	r3, r0
 8007db2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007db4:	7cfb      	ldrb	r3, [r7, #19]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d129      	bne.n	8007e0e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	7b1b      	ldrb	r3, [r3, #12]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fe85 	bl	8008ad0 <USBH_LL_GetLastXferSize>
 8007dc6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d016      	beq.n	8007e00 <CDC_ProcessReception+0x9e>
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	8b5b      	ldrh	r3, [r3, #26]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d910      	bls.n	8007e00 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	1ad2      	subs	r2, r2, r3
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	6a1a      	ldr	r2, [r3, #32]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	441a      	add	r2, r3
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	2203      	movs	r2, #3
 8007dfa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007dfe:	e006      	b.n	8007e0e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f80f 	bl	8007e2c <USBH_CDC_ReceiveCallback>
      break;
 8007e0e:	bf00      	nop
  }
}
 8007e10:	bf00      	nop
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007e68:	2302      	movs	r3, #2
 8007e6a:	e029      	b.n	8007ec0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	79fa      	ldrb	r2, [r7, #7]
 8007e70:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 f81f 	bl	8007ec8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 fd97 	bl	80089ec <USBH_LL_Init>

  return USBH_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	e009      	b.n	8007eee <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	33e0      	adds	r3, #224	; 0xe0
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b0e      	cmp	r3, #14
 8007ef2:	d9f2      	bls.n	8007eda <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	e009      	b.n	8007f0e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f04:	2200      	movs	r2, #0
 8007f06:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	60fb      	str	r3, [r7, #12]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f14:	d3f1      	bcc.n	8007efa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2240      	movs	r2, #64	; 0x40
 8007f3a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d016      	beq.n	8007fb2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10e      	bne.n	8007fac <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f94:	1c59      	adds	r1, r3, #1
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	33de      	adds	r3, #222	; 0xde
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	73fb      	strb	r3, [r7, #15]
 8007faa:	e004      	b.n	8007fb6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007fac:	2302      	movs	r3, #2
 8007fae:	73fb      	strb	r3, [r7, #15]
 8007fb0:	e001      	b.n	8007fb6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007fda:	78fa      	ldrb	r2, [r7, #3]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d204      	bcs.n	8007fea <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	78fa      	ldrb	r2, [r7, #3]
 8007fe4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007fe8:	e001      	b.n	8007fee <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007fea:	2302      	movs	r3, #2
 8007fec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	4608      	mov	r0, r1
 8008006:	4611      	mov	r1, r2
 8008008:	461a      	mov	r2, r3
 800800a:	4603      	mov	r3, r0
 800800c:	70fb      	strb	r3, [r7, #3]
 800800e:	460b      	mov	r3, r1
 8008010:	70bb      	strb	r3, [r7, #2]
 8008012:	4613      	mov	r3, r2
 8008014:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800801a:	2300      	movs	r3, #0
 800801c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008024:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008026:	e025      	b.n	8008074 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008028:	7dfb      	ldrb	r3, [r7, #23]
 800802a:	221a      	movs	r2, #26
 800802c:	fb02 f303 	mul.w	r3, r2, r3
 8008030:	3308      	adds	r3, #8
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	4413      	add	r3, r2
 8008036:	3302      	adds	r3, #2
 8008038:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	795b      	ldrb	r3, [r3, #5]
 800803e:	78fa      	ldrb	r2, [r7, #3]
 8008040:	429a      	cmp	r2, r3
 8008042:	d002      	beq.n	800804a <USBH_FindInterface+0x4e>
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	2bff      	cmp	r3, #255	; 0xff
 8008048:	d111      	bne.n	800806e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800804e:	78ba      	ldrb	r2, [r7, #2]
 8008050:	429a      	cmp	r2, r3
 8008052:	d002      	beq.n	800805a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008054:	78bb      	ldrb	r3, [r7, #2]
 8008056:	2bff      	cmp	r3, #255	; 0xff
 8008058:	d109      	bne.n	800806e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800805e:	787a      	ldrb	r2, [r7, #1]
 8008060:	429a      	cmp	r2, r3
 8008062:	d002      	beq.n	800806a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008064:	787b      	ldrb	r3, [r7, #1]
 8008066:	2bff      	cmp	r3, #255	; 0xff
 8008068:	d101      	bne.n	800806e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800806a:	7dfb      	ldrb	r3, [r7, #23]
 800806c:	e006      	b.n	800807c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	3301      	adds	r3, #1
 8008072:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d9d6      	bls.n	8008028 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800807a:	23ff      	movs	r3, #255	; 0xff
}
 800807c:	4618      	mov	r0, r3
 800807e:	371c      	adds	r7, #28
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fce7 	bl	8008a64 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008096:	2101      	movs	r1, #1
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fdbe 	bl	8008c1a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80080ba:	bf00      	nop
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080d4:	1c5a      	adds	r2, r3, #1
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f804 	bl	80080ea <USBH_HandleSof>
}
 80080e2:	bf00      	nop
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	2b0b      	cmp	r3, #11
 80080fa:	d10a      	bne.n	8008112 <USBH_HandleSof+0x28>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008102:	2b00      	cmp	r3, #0
 8008104:	d005      	beq.n	8008112 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
  }
}
 8008112:	bf00      	nop
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800812a:	bf00      	nop
}
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008146:	bf00      	nop
}
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fc7a 	bl	8008a9a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	791b      	ldrb	r3, [r3, #4]
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fad1 	bl	8008754 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	795b      	ldrb	r3, [r3, #5]
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 facb 	bl	8008754 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	789b      	ldrb	r3, [r3, #2]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d10f      	bne.n	80081fc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80081ee:	78fb      	ldrb	r3, [r7, #3]
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80081fc:	2200      	movs	r2, #0
 80081fe:	2100      	movs	r1, #0
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f805 	bl	8008210 <USBH_CtlReq>
 8008206:	4603      	mov	r3, r0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	4613      	mov	r3, r2
 800821c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800821e:	2301      	movs	r3, #1
 8008220:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	789b      	ldrb	r3, [r3, #2]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d002      	beq.n	8008230 <USBH_CtlReq+0x20>
 800822a:	2b02      	cmp	r3, #2
 800822c:	d00f      	beq.n	800824e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800822e:	e027      	b.n	8008280 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	88fa      	ldrh	r2, [r7, #6]
 800823a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2201      	movs	r2, #1
 8008240:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2202      	movs	r2, #2
 8008246:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008248:	2301      	movs	r3, #1
 800824a:	75fb      	strb	r3, [r7, #23]
      break;
 800824c:	e018      	b.n	8008280 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 f81c 	bl	800828c <USBH_HandleControl>
 8008254:	4603      	mov	r3, r0
 8008256:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008258:	7dfb      	ldrb	r3, [r7, #23]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <USBH_CtlReq+0x54>
 800825e:	7dfb      	ldrb	r3, [r7, #23]
 8008260:	2b03      	cmp	r3, #3
 8008262:	d106      	bne.n	8008272 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2201      	movs	r2, #1
 8008268:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	761a      	strb	r2, [r3, #24]
      break;
 8008270:	e005      	b.n	800827e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	2b02      	cmp	r3, #2
 8008276:	d102      	bne.n	800827e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2201      	movs	r2, #1
 800827c:	709a      	strb	r2, [r3, #2]
      break;
 800827e:	bf00      	nop
  }
  return status;
 8008280:	7dfb      	ldrb	r3, [r7, #23]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
	...

0800828c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af02      	add	r7, sp, #8
 8008292:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008294:	2301      	movs	r3, #1
 8008296:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008298:	2300      	movs	r3, #0
 800829a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	7e1b      	ldrb	r3, [r3, #24]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	2b0a      	cmp	r3, #10
 80082a4:	f200 8156 	bhi.w	8008554 <USBH_HandleControl+0x2c8>
 80082a8:	a201      	add	r2, pc, #4	; (adr r2, 80082b0 <USBH_HandleControl+0x24>)
 80082aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ae:	bf00      	nop
 80082b0:	080082dd 	.word	0x080082dd
 80082b4:	080082f7 	.word	0x080082f7
 80082b8:	08008361 	.word	0x08008361
 80082bc:	08008387 	.word	0x08008387
 80082c0:	080083bf 	.word	0x080083bf
 80082c4:	080083e9 	.word	0x080083e9
 80082c8:	0800843b 	.word	0x0800843b
 80082cc:	0800845d 	.word	0x0800845d
 80082d0:	08008499 	.word	0x08008499
 80082d4:	080084bf 	.word	0x080084bf
 80082d8:	080084fd 	.word	0x080084fd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f103 0110 	add.w	r1, r3, #16
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	795b      	ldrb	r3, [r3, #5]
 80082e6:	461a      	mov	r2, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f943 	bl	8008574 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2202      	movs	r2, #2
 80082f2:	761a      	strb	r2, [r3, #24]
      break;
 80082f4:	e139      	b.n	800856a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	795b      	ldrb	r3, [r3, #5]
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fc79 	bl	8008bf4 <USBH_LL_GetURBState>
 8008302:	4603      	mov	r3, r0
 8008304:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d11e      	bne.n	800834a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	7c1b      	ldrb	r3, [r3, #16]
 8008310:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008314:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	8adb      	ldrh	r3, [r3, #22]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800831e:	7b7b      	ldrb	r3, [r7, #13]
 8008320:	2b80      	cmp	r3, #128	; 0x80
 8008322:	d103      	bne.n	800832c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2203      	movs	r2, #3
 8008328:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800832a:	e115      	b.n	8008558 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2205      	movs	r2, #5
 8008330:	761a      	strb	r2, [r3, #24]
      break;
 8008332:	e111      	b.n	8008558 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008334:	7b7b      	ldrb	r3, [r7, #13]
 8008336:	2b80      	cmp	r3, #128	; 0x80
 8008338:	d103      	bne.n	8008342 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2209      	movs	r2, #9
 800833e:	761a      	strb	r2, [r3, #24]
      break;
 8008340:	e10a      	b.n	8008558 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2207      	movs	r2, #7
 8008346:	761a      	strb	r2, [r3, #24]
      break;
 8008348:	e106      	b.n	8008558 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800834a:	7bbb      	ldrb	r3, [r7, #14]
 800834c:	2b04      	cmp	r3, #4
 800834e:	d003      	beq.n	8008358 <USBH_HandleControl+0xcc>
 8008350:	7bbb      	ldrb	r3, [r7, #14]
 8008352:	2b02      	cmp	r3, #2
 8008354:	f040 8100 	bne.w	8008558 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	220b      	movs	r2, #11
 800835c:	761a      	strb	r2, [r3, #24]
      break;
 800835e:	e0fb      	b.n	8008558 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008366:	b29a      	uxth	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6899      	ldr	r1, [r3, #8]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	899a      	ldrh	r2, [r3, #12]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	791b      	ldrb	r3, [r3, #4]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f93a 	bl	80085f2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2204      	movs	r2, #4
 8008382:	761a      	strb	r2, [r3, #24]
      break;
 8008384:	e0f1      	b.n	800856a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	791b      	ldrb	r3, [r3, #4]
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fc31 	bl	8008bf4 <USBH_LL_GetURBState>
 8008392:	4603      	mov	r3, r0
 8008394:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d102      	bne.n	80083a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2209      	movs	r2, #9
 80083a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	2b05      	cmp	r3, #5
 80083a6:	d102      	bne.n	80083ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80083a8:	2303      	movs	r3, #3
 80083aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80083ac:	e0d6      	b.n	800855c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
 80083b0:	2b04      	cmp	r3, #4
 80083b2:	f040 80d3 	bne.w	800855c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	220b      	movs	r2, #11
 80083ba:	761a      	strb	r2, [r3, #24]
      break;
 80083bc:	e0ce      	b.n	800855c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6899      	ldr	r1, [r3, #8]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	899a      	ldrh	r2, [r3, #12]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	795b      	ldrb	r3, [r3, #5]
 80083ca:	2001      	movs	r0, #1
 80083cc:	9000      	str	r0, [sp, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f8ea 	bl	80085a8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083da:	b29a      	uxth	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2206      	movs	r2, #6
 80083e4:	761a      	strb	r2, [r3, #24]
      break;
 80083e6:	e0c0      	b.n	800856a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	795b      	ldrb	r3, [r3, #5]
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fc00 	bl	8008bf4 <USBH_LL_GetURBState>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d103      	bne.n	8008406 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2207      	movs	r2, #7
 8008402:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008404:	e0ac      	b.n	8008560 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	2b05      	cmp	r3, #5
 800840a:	d105      	bne.n	8008418 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	220c      	movs	r2, #12
 8008410:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008412:	2303      	movs	r3, #3
 8008414:	73fb      	strb	r3, [r7, #15]
      break;
 8008416:	e0a3      	b.n	8008560 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008418:	7bbb      	ldrb	r3, [r7, #14]
 800841a:	2b02      	cmp	r3, #2
 800841c:	d103      	bne.n	8008426 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2205      	movs	r2, #5
 8008422:	761a      	strb	r2, [r3, #24]
      break;
 8008424:	e09c      	b.n	8008560 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008426:	7bbb      	ldrb	r3, [r7, #14]
 8008428:	2b04      	cmp	r3, #4
 800842a:	f040 8099 	bne.w	8008560 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	220b      	movs	r2, #11
 8008432:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008434:	2302      	movs	r3, #2
 8008436:	73fb      	strb	r3, [r7, #15]
      break;
 8008438:	e092      	b.n	8008560 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	791b      	ldrb	r3, [r3, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	2100      	movs	r1, #0
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f8d5 	bl	80085f2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800844e:	b29a      	uxth	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2208      	movs	r2, #8
 8008458:	761a      	strb	r2, [r3, #24]

      break;
 800845a:	e086      	b.n	800856a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	791b      	ldrb	r3, [r3, #4]
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fbc6 	bl	8008bf4 <USBH_LL_GetURBState>
 8008468:	4603      	mov	r3, r0
 800846a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d105      	bne.n	800847e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	220d      	movs	r2, #13
 8008476:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800847c:	e072      	b.n	8008564 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800847e:	7bbb      	ldrb	r3, [r7, #14]
 8008480:	2b04      	cmp	r3, #4
 8008482:	d103      	bne.n	800848c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	220b      	movs	r2, #11
 8008488:	761a      	strb	r2, [r3, #24]
      break;
 800848a:	e06b      	b.n	8008564 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800848c:	7bbb      	ldrb	r3, [r7, #14]
 800848e:	2b05      	cmp	r3, #5
 8008490:	d168      	bne.n	8008564 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008492:	2303      	movs	r3, #3
 8008494:	73fb      	strb	r3, [r7, #15]
      break;
 8008496:	e065      	b.n	8008564 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	795b      	ldrb	r3, [r3, #5]
 800849c:	2201      	movs	r2, #1
 800849e:	9200      	str	r2, [sp, #0]
 80084a0:	2200      	movs	r2, #0
 80084a2:	2100      	movs	r1, #0
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f87f 	bl	80085a8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	220a      	movs	r2, #10
 80084ba:	761a      	strb	r2, [r3, #24]
      break;
 80084bc:	e055      	b.n	800856a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	795b      	ldrb	r3, [r3, #5]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fb95 	bl	8008bf4 <USBH_LL_GetURBState>
 80084ca:	4603      	mov	r3, r0
 80084cc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80084ce:	7bbb      	ldrb	r3, [r7, #14]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d105      	bne.n	80084e0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	220d      	movs	r2, #13
 80084dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80084de:	e043      	b.n	8008568 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d103      	bne.n	80084ee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2209      	movs	r2, #9
 80084ea:	761a      	strb	r2, [r3, #24]
      break;
 80084ec:	e03c      	b.n	8008568 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b04      	cmp	r3, #4
 80084f2:	d139      	bne.n	8008568 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	220b      	movs	r2, #11
 80084f8:	761a      	strb	r2, [r3, #24]
      break;
 80084fa:	e035      	b.n	8008568 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	7e5b      	ldrb	r3, [r3, #25]
 8008500:	3301      	adds	r3, #1
 8008502:	b2da      	uxtb	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	765a      	strb	r2, [r3, #25]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	7e5b      	ldrb	r3, [r3, #25]
 800850c:	2b02      	cmp	r3, #2
 800850e:	d806      	bhi.n	800851e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800851c:	e025      	b.n	800856a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008524:	2106      	movs	r1, #6
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	795b      	ldrb	r3, [r3, #5]
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f90c 	bl	8008754 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	791b      	ldrb	r3, [r3, #4]
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f906 	bl	8008754 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800854e:	2302      	movs	r3, #2
 8008550:	73fb      	strb	r3, [r7, #15]
      break;
 8008552:	e00a      	b.n	800856a <USBH_HandleControl+0x2de>

    default:
      break;
 8008554:	bf00      	nop
 8008556:	e008      	b.n	800856a <USBH_HandleControl+0x2de>
      break;
 8008558:	bf00      	nop
 800855a:	e006      	b.n	800856a <USBH_HandleControl+0x2de>
      break;
 800855c:	bf00      	nop
 800855e:	e004      	b.n	800856a <USBH_HandleControl+0x2de>
      break;
 8008560:	bf00      	nop
 8008562:	e002      	b.n	800856a <USBH_HandleControl+0x2de>
      break;
 8008564:	bf00      	nop
 8008566:	e000      	b.n	800856a <USBH_HandleControl+0x2de>
      break;
 8008568:	bf00      	nop
  }

  return status;
 800856a:	7bfb      	ldrb	r3, [r7, #15]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af04      	add	r7, sp, #16
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	4613      	mov	r3, r2
 8008580:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008582:	79f9      	ldrb	r1, [r7, #7]
 8008584:	2300      	movs	r3, #0
 8008586:	9303      	str	r3, [sp, #12]
 8008588:	2308      	movs	r3, #8
 800858a:	9302      	str	r3, [sp, #8]
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	9301      	str	r3, [sp, #4]
 8008590:	2300      	movs	r3, #0
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	2300      	movs	r3, #0
 8008596:	2200      	movs	r2, #0
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 fafa 	bl	8008b92 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b088      	sub	sp, #32
 80085ac:	af04      	add	r7, sp, #16
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	4611      	mov	r1, r2
 80085b4:	461a      	mov	r2, r3
 80085b6:	460b      	mov	r3, r1
 80085b8:	80fb      	strh	r3, [r7, #6]
 80085ba:	4613      	mov	r3, r2
 80085bc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80085cc:	7979      	ldrb	r1, [r7, #5]
 80085ce:	7e3b      	ldrb	r3, [r7, #24]
 80085d0:	9303      	str	r3, [sp, #12]
 80085d2:	88fb      	ldrh	r3, [r7, #6]
 80085d4:	9302      	str	r3, [sp, #8]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	2301      	movs	r3, #1
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	2300      	movs	r3, #0
 80085e0:	2200      	movs	r2, #0
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f000 fad5 	bl	8008b92 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b088      	sub	sp, #32
 80085f6:	af04      	add	r7, sp, #16
 80085f8:	60f8      	str	r0, [r7, #12]
 80085fa:	60b9      	str	r1, [r7, #8]
 80085fc:	4611      	mov	r1, r2
 80085fe:	461a      	mov	r2, r3
 8008600:	460b      	mov	r3, r1
 8008602:	80fb      	strh	r3, [r7, #6]
 8008604:	4613      	mov	r3, r2
 8008606:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008608:	7979      	ldrb	r1, [r7, #5]
 800860a:	2300      	movs	r3, #0
 800860c:	9303      	str	r3, [sp, #12]
 800860e:	88fb      	ldrh	r3, [r7, #6]
 8008610:	9302      	str	r3, [sp, #8]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	9301      	str	r3, [sp, #4]
 8008616:	2301      	movs	r3, #1
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	2300      	movs	r3, #0
 800861c:	2201      	movs	r2, #1
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f000 fab7 	bl	8008b92 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008624:	2300      	movs	r3, #0

}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b088      	sub	sp, #32
 8008632:	af04      	add	r7, sp, #16
 8008634:	60f8      	str	r0, [r7, #12]
 8008636:	60b9      	str	r1, [r7, #8]
 8008638:	4611      	mov	r1, r2
 800863a:	461a      	mov	r2, r3
 800863c:	460b      	mov	r3, r1
 800863e:	80fb      	strh	r3, [r7, #6]
 8008640:	4613      	mov	r3, r2
 8008642:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800864e:	2300      	movs	r3, #0
 8008650:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008652:	7979      	ldrb	r1, [r7, #5]
 8008654:	7e3b      	ldrb	r3, [r7, #24]
 8008656:	9303      	str	r3, [sp, #12]
 8008658:	88fb      	ldrh	r3, [r7, #6]
 800865a:	9302      	str	r3, [sp, #8]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	2301      	movs	r3, #1
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	2302      	movs	r3, #2
 8008666:	2200      	movs	r2, #0
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 fa92 	bl	8008b92 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b088      	sub	sp, #32
 800867c:	af04      	add	r7, sp, #16
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	4611      	mov	r1, r2
 8008684:	461a      	mov	r2, r3
 8008686:	460b      	mov	r3, r1
 8008688:	80fb      	strh	r3, [r7, #6]
 800868a:	4613      	mov	r3, r2
 800868c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800868e:	7979      	ldrb	r1, [r7, #5]
 8008690:	2300      	movs	r3, #0
 8008692:	9303      	str	r3, [sp, #12]
 8008694:	88fb      	ldrh	r3, [r7, #6]
 8008696:	9302      	str	r3, [sp, #8]
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	9301      	str	r3, [sp, #4]
 800869c:	2301      	movs	r3, #1
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	2302      	movs	r3, #2
 80086a2:	2201      	movs	r2, #1
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 fa74 	bl	8008b92 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af04      	add	r7, sp, #16
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	4608      	mov	r0, r1
 80086be:	4611      	mov	r1, r2
 80086c0:	461a      	mov	r2, r3
 80086c2:	4603      	mov	r3, r0
 80086c4:	70fb      	strb	r3, [r7, #3]
 80086c6:	460b      	mov	r3, r1
 80086c8:	70bb      	strb	r3, [r7, #2]
 80086ca:	4613      	mov	r3, r2
 80086cc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80086ce:	7878      	ldrb	r0, [r7, #1]
 80086d0:	78ba      	ldrb	r2, [r7, #2]
 80086d2:	78f9      	ldrb	r1, [r7, #3]
 80086d4:	8b3b      	ldrh	r3, [r7, #24]
 80086d6:	9302      	str	r3, [sp, #8]
 80086d8:	7d3b      	ldrb	r3, [r7, #20]
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	7c3b      	ldrb	r3, [r7, #16]
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	4603      	mov	r3, r0
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fa07 	bl	8008af6 <USBH_LL_OpenPipe>

  return USBH_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	460b      	mov	r3, r1
 80086fc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80086fe:	78fb      	ldrb	r3, [r7, #3]
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fa26 	bl	8008b54 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b084      	sub	sp, #16
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	460b      	mov	r3, r1
 800871c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f836 	bl	8008790 <USBH_GetFreePipe>
 8008724:	4603      	mov	r3, r0
 8008726:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008728:	89fb      	ldrh	r3, [r7, #14]
 800872a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800872e:	4293      	cmp	r3, r2
 8008730:	d00a      	beq.n	8008748 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008732:	78fa      	ldrb	r2, [r7, #3]
 8008734:	89fb      	ldrh	r3, [r7, #14]
 8008736:	f003 030f 	and.w	r3, r3, #15
 800873a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	33e0      	adds	r3, #224	; 0xe0
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	440b      	add	r3, r1
 8008746:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008748:	89fb      	ldrh	r3, [r7, #14]
 800874a:	b2db      	uxtb	r3, r3
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	2b0a      	cmp	r3, #10
 8008764:	d80d      	bhi.n	8008782 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008766:	78fb      	ldrb	r3, [r7, #3]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	33e0      	adds	r3, #224	; 0xe0
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	78fb      	ldrb	r3, [r7, #3]
 8008774:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008778:	6879      	ldr	r1, [r7, #4]
 800877a:	33e0      	adds	r3, #224	; 0xe0
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	440b      	add	r3, r1
 8008780:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008798:	2300      	movs	r3, #0
 800879a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
 80087a0:	e00f      	b.n	80087c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	33e0      	adds	r3, #224	; 0xe0
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d102      	bne.n	80087bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	e007      	b.n	80087cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	3301      	adds	r3, #1
 80087c0:	73fb      	strb	r3, [r7, #15]
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	2b0a      	cmp	r3, #10
 80087c6:	d9ec      	bls.n	80087a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80087c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3714      	adds	r7, #20
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80087dc:	2201      	movs	r2, #1
 80087de:	490e      	ldr	r1, [pc, #56]	; (8008818 <MX_USB_HOST_Init+0x40>)
 80087e0:	480e      	ldr	r0, [pc, #56]	; (800881c <MX_USB_HOST_Init+0x44>)
 80087e2:	f7ff fb37 	bl	8007e54 <USBH_Init>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80087ec:	f7f8 ffd4 	bl	8001798 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80087f0:	490b      	ldr	r1, [pc, #44]	; (8008820 <MX_USB_HOST_Init+0x48>)
 80087f2:	480a      	ldr	r0, [pc, #40]	; (800881c <MX_USB_HOST_Init+0x44>)
 80087f4:	f7ff fbbc 	bl	8007f70 <USBH_RegisterClass>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80087fe:	f7f8 ffcb 	bl	8001798 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008802:	4806      	ldr	r0, [pc, #24]	; (800881c <MX_USB_HOST_Init+0x44>)
 8008804:	f7ff fc40 	bl	8008088 <USBH_Start>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800880e:	f7f8 ffc3 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008812:	bf00      	nop
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	08008825 	.word	0x08008825
 800881c:	20000260 	.word	0x20000260
 8008820:	20000014 	.word	0x20000014

08008824 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	460b      	mov	r3, r1
 800882e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008830:	78fb      	ldrb	r3, [r7, #3]
 8008832:	3b01      	subs	r3, #1
 8008834:	2b04      	cmp	r3, #4
 8008836:	d819      	bhi.n	800886c <USBH_UserProcess+0x48>
 8008838:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <USBH_UserProcess+0x1c>)
 800883a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883e:	bf00      	nop
 8008840:	0800886d 	.word	0x0800886d
 8008844:	0800885d 	.word	0x0800885d
 8008848:	0800886d 	.word	0x0800886d
 800884c:	08008865 	.word	0x08008865
 8008850:	08008855 	.word	0x08008855
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008854:	4b09      	ldr	r3, [pc, #36]	; (800887c <USBH_UserProcess+0x58>)
 8008856:	2203      	movs	r2, #3
 8008858:	701a      	strb	r2, [r3, #0]
  break;
 800885a:	e008      	b.n	800886e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800885c:	4b07      	ldr	r3, [pc, #28]	; (800887c <USBH_UserProcess+0x58>)
 800885e:	2202      	movs	r2, #2
 8008860:	701a      	strb	r2, [r3, #0]
  break;
 8008862:	e004      	b.n	800886e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008864:	4b05      	ldr	r3, [pc, #20]	; (800887c <USBH_UserProcess+0x58>)
 8008866:	2201      	movs	r2, #1
 8008868:	701a      	strb	r2, [r3, #0]
  break;
 800886a:	e000      	b.n	800886e <USBH_UserProcess+0x4a>

  default:
  break;
 800886c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800886e:	bf00      	nop
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	200000bc 	.word	0x200000bc

08008880 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08a      	sub	sp, #40	; 0x28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008888:	f107 0314 	add.w	r3, r7, #20
 800888c:	2200      	movs	r2, #0
 800888e:	601a      	str	r2, [r3, #0]
 8008890:	605a      	str	r2, [r3, #4]
 8008892:	609a      	str	r2, [r3, #8]
 8008894:	60da      	str	r2, [r3, #12]
 8008896:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088a0:	d147      	bne.n	8008932 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088a2:	2300      	movs	r3, #0
 80088a4:	613b      	str	r3, [r7, #16]
 80088a6:	4b25      	ldr	r3, [pc, #148]	; (800893c <HAL_HCD_MspInit+0xbc>)
 80088a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088aa:	4a24      	ldr	r2, [pc, #144]	; (800893c <HAL_HCD_MspInit+0xbc>)
 80088ac:	f043 0301 	orr.w	r3, r3, #1
 80088b0:	6313      	str	r3, [r2, #48]	; 0x30
 80088b2:	4b22      	ldr	r3, [pc, #136]	; (800893c <HAL_HCD_MspInit+0xbc>)
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	613b      	str	r3, [r7, #16]
 80088bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80088be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088c4:	2300      	movs	r3, #0
 80088c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088c8:	2300      	movs	r3, #0
 80088ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80088cc:	f107 0314 	add.w	r3, r7, #20
 80088d0:	4619      	mov	r1, r3
 80088d2:	481b      	ldr	r0, [pc, #108]	; (8008940 <HAL_HCD_MspInit+0xc0>)
 80088d4:	f7f9 fbd6 	bl	8002084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80088d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80088dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088de:	2302      	movs	r3, #2
 80088e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088e6:	2300      	movs	r3, #0
 80088e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088ea:	230a      	movs	r3, #10
 80088ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088ee:	f107 0314 	add.w	r3, r7, #20
 80088f2:	4619      	mov	r1, r3
 80088f4:	4812      	ldr	r0, [pc, #72]	; (8008940 <HAL_HCD_MspInit+0xc0>)
 80088f6:	f7f9 fbc5 	bl	8002084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088fa:	4b10      	ldr	r3, [pc, #64]	; (800893c <HAL_HCD_MspInit+0xbc>)
 80088fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fe:	4a0f      	ldr	r2, [pc, #60]	; (800893c <HAL_HCD_MspInit+0xbc>)
 8008900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008904:	6353      	str	r3, [r2, #52]	; 0x34
 8008906:	2300      	movs	r3, #0
 8008908:	60fb      	str	r3, [r7, #12]
 800890a:	4b0c      	ldr	r3, [pc, #48]	; (800893c <HAL_HCD_MspInit+0xbc>)
 800890c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800890e:	4a0b      	ldr	r2, [pc, #44]	; (800893c <HAL_HCD_MspInit+0xbc>)
 8008910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008914:	6453      	str	r3, [r2, #68]	; 0x44
 8008916:	4b09      	ldr	r3, [pc, #36]	; (800893c <HAL_HCD_MspInit+0xbc>)
 8008918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800891a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800891e:	60fb      	str	r3, [r7, #12]
 8008920:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008922:	2200      	movs	r2, #0
 8008924:	2100      	movs	r1, #0
 8008926:	2043      	movs	r0, #67	; 0x43
 8008928:	f7f9 fb75 	bl	8002016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800892c:	2043      	movs	r0, #67	; 0x43
 800892e:	f7f9 fb8e 	bl	800204e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008932:	bf00      	nop
 8008934:	3728      	adds	r7, #40	; 0x28
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	40023800 	.word	0x40023800
 8008940:	40020000 	.word	0x40020000

08008944 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff fbb7 	bl	80080c6 <USBH_LL_IncTimer>
}
 8008958:	bf00      	nop
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800896e:	4618      	mov	r0, r3
 8008970:	f7ff fbef 	bl	8008152 <USBH_LL_Connect>
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800898a:	4618      	mov	r0, r3
 800898c:	f7ff fbf8 	bl	8008180 <USBH_LL_Disconnect>
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	70fb      	strb	r3, [r7, #3]
 80089a4:	4613      	mov	r3, r2
 80089a6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff fba9 	bl	800811a <USBH_LL_PortEnabled>
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff fba9 	bl	8008136 <USBH_LL_PortDisabled>
}
 80089e4:	bf00      	nop
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d12a      	bne.n	8008a54 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80089fe:	4a18      	ldr	r2, [pc, #96]	; (8008a60 <USBH_LL_Init+0x74>)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a15      	ldr	r2, [pc, #84]	; (8008a60 <USBH_LL_Init+0x74>)
 8008a0a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a0e:	4b14      	ldr	r3, [pc, #80]	; (8008a60 <USBH_LL_Init+0x74>)
 8008a10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a14:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008a16:	4b12      	ldr	r3, [pc, #72]	; (8008a60 <USBH_LL_Init+0x74>)
 8008a18:	2208      	movs	r2, #8
 8008a1a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008a1c:	4b10      	ldr	r3, [pc, #64]	; (8008a60 <USBH_LL_Init+0x74>)
 8008a1e:	2201      	movs	r2, #1
 8008a20:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a22:	4b0f      	ldr	r3, [pc, #60]	; (8008a60 <USBH_LL_Init+0x74>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008a28:	4b0d      	ldr	r3, [pc, #52]	; (8008a60 <USBH_LL_Init+0x74>)
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a2e:	4b0c      	ldr	r3, [pc, #48]	; (8008a60 <USBH_LL_Init+0x74>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008a34:	480a      	ldr	r0, [pc, #40]	; (8008a60 <USBH_LL_Init+0x74>)
 8008a36:	f7f9 fcf4 	bl	8002422 <HAL_HCD_Init>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d001      	beq.n	8008a44 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008a40:	f7f8 feaa 	bl	8001798 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008a44:	4806      	ldr	r0, [pc, #24]	; (8008a60 <USBH_LL_Init+0x74>)
 8008a46:	f7fa f8c3 	bl	8002bd0 <HAL_HCD_GetCurrentFrame>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7ff fb2a 	bl	80080a8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	20000638 	.word	0x20000638

08008a64 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fa f840 	bl	8002b00 <HAL_HCD_Start>
 8008a80:	4603      	mov	r3, r0
 8008a82:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 f90e 	bl	8008ca8 <USBH_Get_USB_Status>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fa f848 	bl	8002b46 <HAL_HCD_Stop>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 f8f3 	bl	8008ca8 <USBH_Get_USB_Status>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ae2:	78fa      	ldrb	r2, [r7, #3]
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fa f85e 	bl	8002ba8 <HAL_HCD_HC_GetXferCount>
 8008aec:	4603      	mov	r3, r0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008af6:	b590      	push	{r4, r7, lr}
 8008af8:	b089      	sub	sp, #36	; 0x24
 8008afa:	af04      	add	r7, sp, #16
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	4608      	mov	r0, r1
 8008b00:	4611      	mov	r1, r2
 8008b02:	461a      	mov	r2, r3
 8008b04:	4603      	mov	r3, r0
 8008b06:	70fb      	strb	r3, [r7, #3]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70bb      	strb	r3, [r7, #2]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b1e:	787c      	ldrb	r4, [r7, #1]
 8008b20:	78ba      	ldrb	r2, [r7, #2]
 8008b22:	78f9      	ldrb	r1, [r7, #3]
 8008b24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b26:	9302      	str	r3, [sp, #8]
 8008b28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	4623      	mov	r3, r4
 8008b36:	f7f9 fcd6 	bl	80024e6 <HAL_HCD_HC_Init>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 f8b1 	bl	8008ca8 <USBH_Get_USB_Status>
 8008b46:	4603      	mov	r3, r0
 8008b48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd90      	pop	{r4, r7, pc}

08008b54 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b6e:	78fa      	ldrb	r2, [r7, #3]
 8008b70:	4611      	mov	r1, r2
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7f9 fd46 	bl	8002604 <HAL_HCD_HC_Halt>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f892 	bl	8008ca8 <USBH_Get_USB_Status>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008b92:	b590      	push	{r4, r7, lr}
 8008b94:	b089      	sub	sp, #36	; 0x24
 8008b96:	af04      	add	r7, sp, #16
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	4608      	mov	r0, r1
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	70fb      	strb	r3, [r7, #3]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70bb      	strb	r3, [r7, #2]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bba:	787c      	ldrb	r4, [r7, #1]
 8008bbc:	78ba      	ldrb	r2, [r7, #2]
 8008bbe:	78f9      	ldrb	r1, [r7, #3]
 8008bc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bc4:	9303      	str	r3, [sp, #12]
 8008bc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bc8:	9302      	str	r3, [sp, #8]
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	4623      	mov	r3, r4
 8008bd6:	f7f9 fd39 	bl	800264c <HAL_HCD_HC_SubmitRequest>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 f861 	bl	8008ca8 <USBH_Get_USB_Status>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd90      	pop	{r4, r7, pc}

08008bf4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c06:	78fa      	ldrb	r2, [r7, #3]
 8008c08:	4611      	mov	r1, r2
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7f9 ffb8 	bl	8002b80 <HAL_HCD_HC_GetURBState>
 8008c10:	4603      	mov	r3, r0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b082      	sub	sp, #8
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	460b      	mov	r3, r1
 8008c24:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d103      	bne.n	8008c38 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c30:	78fb      	ldrb	r3, [r7, #3]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 f864 	bl	8008d00 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c38:	20c8      	movs	r0, #200	; 0xc8
 8008c3a:	f7f9 f8ed 	bl	8001e18 <HAL_Delay>
  return USBH_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
 8008c54:	4613      	mov	r3, r2
 8008c56:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c5e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c60:	78fb      	ldrb	r3, [r7, #3]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	212c      	movs	r1, #44	; 0x2c
 8008c66:	fb01 f303 	mul.w	r3, r1, r3
 8008c6a:	4413      	add	r3, r2
 8008c6c:	333b      	adds	r3, #59	; 0x3b
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d009      	beq.n	8008c88 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	212c      	movs	r1, #44	; 0x2c
 8008c7a:	fb01 f303 	mul.w	r3, r1, r3
 8008c7e:	4413      	add	r3, r2
 8008c80:	3354      	adds	r3, #84	; 0x54
 8008c82:	78ba      	ldrb	r2, [r7, #2]
 8008c84:	701a      	strb	r2, [r3, #0]
 8008c86:	e008      	b.n	8008c9a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008c88:	78fb      	ldrb	r3, [r7, #3]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	212c      	movs	r1, #44	; 0x2c
 8008c8e:	fb01 f303 	mul.w	r3, r1, r3
 8008c92:	4413      	add	r3, r2
 8008c94:	3355      	adds	r3, #85	; 0x55
 8008c96:	78ba      	ldrb	r2, [r7, #2]
 8008c98:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	4603      	mov	r3, r0
 8008cb0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d817      	bhi.n	8008cec <USBH_Get_USB_Status+0x44>
 8008cbc:	a201      	add	r2, pc, #4	; (adr r2, 8008cc4 <USBH_Get_USB_Status+0x1c>)
 8008cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc2:	bf00      	nop
 8008cc4:	08008cd5 	.word	0x08008cd5
 8008cc8:	08008cdb 	.word	0x08008cdb
 8008ccc:	08008ce1 	.word	0x08008ce1
 8008cd0:	08008ce7 	.word	0x08008ce7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd8:	e00b      	b.n	8008cf2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008cda:	2302      	movs	r3, #2
 8008cdc:	73fb      	strb	r3, [r7, #15]
    break;
 8008cde:	e008      	b.n	8008cf2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce4:	e005      	b.n	8008cf2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cea:	e002      	b.n	8008cf2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008cec:	2302      	movs	r3, #2
 8008cee:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf0:	bf00      	nop
  }
  return usb_status;
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	4603      	mov	r3, r0
 8008d08:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d0a:	79fb      	ldrb	r3, [r7, #7]
 8008d0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d0e:	79fb      	ldrb	r3, [r7, #7]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d102      	bne.n	8008d1a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008d14:	2301      	movs	r3, #1
 8008d16:	73fb      	strb	r3, [r7, #15]
 8008d18:	e001      	b.n	8008d1e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	461a      	mov	r2, r3
 8008d22:	2101      	movs	r1, #1
 8008d24:	4803      	ldr	r0, [pc, #12]	; (8008d34 <MX_DriverVbusFS+0x34>)
 8008d26:	f7f9 fb49 	bl	80023bc <HAL_GPIO_WritePin>
}
 8008d2a:	bf00      	nop
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	40020800 	.word	0x40020800

08008d38 <__errno>:
 8008d38:	4b01      	ldr	r3, [pc, #4]	; (8008d40 <__errno+0x8>)
 8008d3a:	6818      	ldr	r0, [r3, #0]
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	20000034 	.word	0x20000034

08008d44 <__libc_init_array>:
 8008d44:	b570      	push	{r4, r5, r6, lr}
 8008d46:	4d0d      	ldr	r5, [pc, #52]	; (8008d7c <__libc_init_array+0x38>)
 8008d48:	4c0d      	ldr	r4, [pc, #52]	; (8008d80 <__libc_init_array+0x3c>)
 8008d4a:	1b64      	subs	r4, r4, r5
 8008d4c:	10a4      	asrs	r4, r4, #2
 8008d4e:	2600      	movs	r6, #0
 8008d50:	42a6      	cmp	r6, r4
 8008d52:	d109      	bne.n	8008d68 <__libc_init_array+0x24>
 8008d54:	4d0b      	ldr	r5, [pc, #44]	; (8008d84 <__libc_init_array+0x40>)
 8008d56:	4c0c      	ldr	r4, [pc, #48]	; (8008d88 <__libc_init_array+0x44>)
 8008d58:	f000 f8f8 	bl	8008f4c <_init>
 8008d5c:	1b64      	subs	r4, r4, r5
 8008d5e:	10a4      	asrs	r4, r4, #2
 8008d60:	2600      	movs	r6, #0
 8008d62:	42a6      	cmp	r6, r4
 8008d64:	d105      	bne.n	8008d72 <__libc_init_array+0x2e>
 8008d66:	bd70      	pop	{r4, r5, r6, pc}
 8008d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d6c:	4798      	blx	r3
 8008d6e:	3601      	adds	r6, #1
 8008d70:	e7ee      	b.n	8008d50 <__libc_init_array+0xc>
 8008d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d76:	4798      	blx	r3
 8008d78:	3601      	adds	r6, #1
 8008d7a:	e7f2      	b.n	8008d62 <__libc_init_array+0x1e>
 8008d7c:	08009224 	.word	0x08009224
 8008d80:	08009224 	.word	0x08009224
 8008d84:	08009224 	.word	0x08009224
 8008d88:	08009228 	.word	0x08009228

08008d8c <malloc>:
 8008d8c:	4b02      	ldr	r3, [pc, #8]	; (8008d98 <malloc+0xc>)
 8008d8e:	4601      	mov	r1, r0
 8008d90:	6818      	ldr	r0, [r3, #0]
 8008d92:	f000 b863 	b.w	8008e5c <_malloc_r>
 8008d96:	bf00      	nop
 8008d98:	20000034 	.word	0x20000034

08008d9c <free>:
 8008d9c:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <free+0xc>)
 8008d9e:	4601      	mov	r1, r0
 8008da0:	6818      	ldr	r0, [r3, #0]
 8008da2:	f000 b80b 	b.w	8008dbc <_free_r>
 8008da6:	bf00      	nop
 8008da8:	20000034 	.word	0x20000034

08008dac <memset>:
 8008dac:	4402      	add	r2, r0
 8008dae:	4603      	mov	r3, r0
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d100      	bne.n	8008db6 <memset+0xa>
 8008db4:	4770      	bx	lr
 8008db6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dba:	e7f9      	b.n	8008db0 <memset+0x4>

08008dbc <_free_r>:
 8008dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dbe:	2900      	cmp	r1, #0
 8008dc0:	d048      	beq.n	8008e54 <_free_r+0x98>
 8008dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc6:	9001      	str	r0, [sp, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f1a1 0404 	sub.w	r4, r1, #4
 8008dce:	bfb8      	it	lt
 8008dd0:	18e4      	addlt	r4, r4, r3
 8008dd2:	f000 f8ad 	bl	8008f30 <__malloc_lock>
 8008dd6:	4a20      	ldr	r2, [pc, #128]	; (8008e58 <_free_r+0x9c>)
 8008dd8:	9801      	ldr	r0, [sp, #4]
 8008dda:	6813      	ldr	r3, [r2, #0]
 8008ddc:	4615      	mov	r5, r2
 8008dde:	b933      	cbnz	r3, 8008dee <_free_r+0x32>
 8008de0:	6063      	str	r3, [r4, #4]
 8008de2:	6014      	str	r4, [r2, #0]
 8008de4:	b003      	add	sp, #12
 8008de6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dea:	f000 b8a7 	b.w	8008f3c <__malloc_unlock>
 8008dee:	42a3      	cmp	r3, r4
 8008df0:	d90b      	bls.n	8008e0a <_free_r+0x4e>
 8008df2:	6821      	ldr	r1, [r4, #0]
 8008df4:	1862      	adds	r2, r4, r1
 8008df6:	4293      	cmp	r3, r2
 8008df8:	bf04      	itt	eq
 8008dfa:	681a      	ldreq	r2, [r3, #0]
 8008dfc:	685b      	ldreq	r3, [r3, #4]
 8008dfe:	6063      	str	r3, [r4, #4]
 8008e00:	bf04      	itt	eq
 8008e02:	1852      	addeq	r2, r2, r1
 8008e04:	6022      	streq	r2, [r4, #0]
 8008e06:	602c      	str	r4, [r5, #0]
 8008e08:	e7ec      	b.n	8008de4 <_free_r+0x28>
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	b10b      	cbz	r3, 8008e14 <_free_r+0x58>
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	d9fa      	bls.n	8008e0a <_free_r+0x4e>
 8008e14:	6811      	ldr	r1, [r2, #0]
 8008e16:	1855      	adds	r5, r2, r1
 8008e18:	42a5      	cmp	r5, r4
 8008e1a:	d10b      	bne.n	8008e34 <_free_r+0x78>
 8008e1c:	6824      	ldr	r4, [r4, #0]
 8008e1e:	4421      	add	r1, r4
 8008e20:	1854      	adds	r4, r2, r1
 8008e22:	42a3      	cmp	r3, r4
 8008e24:	6011      	str	r1, [r2, #0]
 8008e26:	d1dd      	bne.n	8008de4 <_free_r+0x28>
 8008e28:	681c      	ldr	r4, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	6053      	str	r3, [r2, #4]
 8008e2e:	4421      	add	r1, r4
 8008e30:	6011      	str	r1, [r2, #0]
 8008e32:	e7d7      	b.n	8008de4 <_free_r+0x28>
 8008e34:	d902      	bls.n	8008e3c <_free_r+0x80>
 8008e36:	230c      	movs	r3, #12
 8008e38:	6003      	str	r3, [r0, #0]
 8008e3a:	e7d3      	b.n	8008de4 <_free_r+0x28>
 8008e3c:	6825      	ldr	r5, [r4, #0]
 8008e3e:	1961      	adds	r1, r4, r5
 8008e40:	428b      	cmp	r3, r1
 8008e42:	bf04      	itt	eq
 8008e44:	6819      	ldreq	r1, [r3, #0]
 8008e46:	685b      	ldreq	r3, [r3, #4]
 8008e48:	6063      	str	r3, [r4, #4]
 8008e4a:	bf04      	itt	eq
 8008e4c:	1949      	addeq	r1, r1, r5
 8008e4e:	6021      	streq	r1, [r4, #0]
 8008e50:	6054      	str	r4, [r2, #4]
 8008e52:	e7c7      	b.n	8008de4 <_free_r+0x28>
 8008e54:	b003      	add	sp, #12
 8008e56:	bd30      	pop	{r4, r5, pc}
 8008e58:	200000c0 	.word	0x200000c0

08008e5c <_malloc_r>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	1ccd      	adds	r5, r1, #3
 8008e60:	f025 0503 	bic.w	r5, r5, #3
 8008e64:	3508      	adds	r5, #8
 8008e66:	2d0c      	cmp	r5, #12
 8008e68:	bf38      	it	cc
 8008e6a:	250c      	movcc	r5, #12
 8008e6c:	2d00      	cmp	r5, #0
 8008e6e:	4606      	mov	r6, r0
 8008e70:	db01      	blt.n	8008e76 <_malloc_r+0x1a>
 8008e72:	42a9      	cmp	r1, r5
 8008e74:	d903      	bls.n	8008e7e <_malloc_r+0x22>
 8008e76:	230c      	movs	r3, #12
 8008e78:	6033      	str	r3, [r6, #0]
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e7e:	f000 f857 	bl	8008f30 <__malloc_lock>
 8008e82:	4921      	ldr	r1, [pc, #132]	; (8008f08 <_malloc_r+0xac>)
 8008e84:	680a      	ldr	r2, [r1, #0]
 8008e86:	4614      	mov	r4, r2
 8008e88:	b99c      	cbnz	r4, 8008eb2 <_malloc_r+0x56>
 8008e8a:	4f20      	ldr	r7, [pc, #128]	; (8008f0c <_malloc_r+0xb0>)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	b923      	cbnz	r3, 8008e9a <_malloc_r+0x3e>
 8008e90:	4621      	mov	r1, r4
 8008e92:	4630      	mov	r0, r6
 8008e94:	f000 f83c 	bl	8008f10 <_sbrk_r>
 8008e98:	6038      	str	r0, [r7, #0]
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f000 f837 	bl	8008f10 <_sbrk_r>
 8008ea2:	1c43      	adds	r3, r0, #1
 8008ea4:	d123      	bne.n	8008eee <_malloc_r+0x92>
 8008ea6:	230c      	movs	r3, #12
 8008ea8:	6033      	str	r3, [r6, #0]
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f000 f846 	bl	8008f3c <__malloc_unlock>
 8008eb0:	e7e3      	b.n	8008e7a <_malloc_r+0x1e>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	1b5b      	subs	r3, r3, r5
 8008eb6:	d417      	bmi.n	8008ee8 <_malloc_r+0x8c>
 8008eb8:	2b0b      	cmp	r3, #11
 8008eba:	d903      	bls.n	8008ec4 <_malloc_r+0x68>
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	441c      	add	r4, r3
 8008ec0:	6025      	str	r5, [r4, #0]
 8008ec2:	e004      	b.n	8008ece <_malloc_r+0x72>
 8008ec4:	6863      	ldr	r3, [r4, #4]
 8008ec6:	42a2      	cmp	r2, r4
 8008ec8:	bf0c      	ite	eq
 8008eca:	600b      	streq	r3, [r1, #0]
 8008ecc:	6053      	strne	r3, [r2, #4]
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f000 f834 	bl	8008f3c <__malloc_unlock>
 8008ed4:	f104 000b 	add.w	r0, r4, #11
 8008ed8:	1d23      	adds	r3, r4, #4
 8008eda:	f020 0007 	bic.w	r0, r0, #7
 8008ede:	1ac2      	subs	r2, r0, r3
 8008ee0:	d0cc      	beq.n	8008e7c <_malloc_r+0x20>
 8008ee2:	1a1b      	subs	r3, r3, r0
 8008ee4:	50a3      	str	r3, [r4, r2]
 8008ee6:	e7c9      	b.n	8008e7c <_malloc_r+0x20>
 8008ee8:	4622      	mov	r2, r4
 8008eea:	6864      	ldr	r4, [r4, #4]
 8008eec:	e7cc      	b.n	8008e88 <_malloc_r+0x2c>
 8008eee:	1cc4      	adds	r4, r0, #3
 8008ef0:	f024 0403 	bic.w	r4, r4, #3
 8008ef4:	42a0      	cmp	r0, r4
 8008ef6:	d0e3      	beq.n	8008ec0 <_malloc_r+0x64>
 8008ef8:	1a21      	subs	r1, r4, r0
 8008efa:	4630      	mov	r0, r6
 8008efc:	f000 f808 	bl	8008f10 <_sbrk_r>
 8008f00:	3001      	adds	r0, #1
 8008f02:	d1dd      	bne.n	8008ec0 <_malloc_r+0x64>
 8008f04:	e7cf      	b.n	8008ea6 <_malloc_r+0x4a>
 8008f06:	bf00      	nop
 8008f08:	200000c0 	.word	0x200000c0
 8008f0c:	200000c4 	.word	0x200000c4

08008f10 <_sbrk_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	4d06      	ldr	r5, [pc, #24]	; (8008f2c <_sbrk_r+0x1c>)
 8008f14:	2300      	movs	r3, #0
 8008f16:	4604      	mov	r4, r0
 8008f18:	4608      	mov	r0, r1
 8008f1a:	602b      	str	r3, [r5, #0]
 8008f1c:	f7f8 fe98 	bl	8001c50 <_sbrk>
 8008f20:	1c43      	adds	r3, r0, #1
 8008f22:	d102      	bne.n	8008f2a <_sbrk_r+0x1a>
 8008f24:	682b      	ldr	r3, [r5, #0]
 8008f26:	b103      	cbz	r3, 8008f2a <_sbrk_r+0x1a>
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	bd38      	pop	{r3, r4, r5, pc}
 8008f2c:	2000093c 	.word	0x2000093c

08008f30 <__malloc_lock>:
 8008f30:	4801      	ldr	r0, [pc, #4]	; (8008f38 <__malloc_lock+0x8>)
 8008f32:	f000 b809 	b.w	8008f48 <__retarget_lock_acquire_recursive>
 8008f36:	bf00      	nop
 8008f38:	20000944 	.word	0x20000944

08008f3c <__malloc_unlock>:
 8008f3c:	4801      	ldr	r0, [pc, #4]	; (8008f44 <__malloc_unlock+0x8>)
 8008f3e:	f000 b804 	b.w	8008f4a <__retarget_lock_release_recursive>
 8008f42:	bf00      	nop
 8008f44:	20000944 	.word	0x20000944

08008f48 <__retarget_lock_acquire_recursive>:
 8008f48:	4770      	bx	lr

08008f4a <__retarget_lock_release_recursive>:
 8008f4a:	4770      	bx	lr

08008f4c <_init>:
 8008f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4e:	bf00      	nop
 8008f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f52:	bc08      	pop	{r3}
 8008f54:	469e      	mov	lr, r3
 8008f56:	4770      	bx	lr

08008f58 <_fini>:
 8008f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5a:	bf00      	nop
 8008f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f5e:	bc08      	pop	{r3}
 8008f60:	469e      	mov	lr, r3
 8008f62:	4770      	bx	lr
