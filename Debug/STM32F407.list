
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d294  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002500  0800d420  0800d420  0001d420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f920  0800f920  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  0800f920  0800f920  0001f920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f928  0800f928  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f928  0800f928  0001f928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f92c  0800f92c  0001f92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  0800f930  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c2c  20000130  0800fa60  00020130  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d5c  0800fa60  00020d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   000279c0  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000541c  00000000  00000000  00047b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a20  00000000  00000000  0004cf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001820  00000000  00000000  0004e960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b4e  00000000  00000000  00050180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000257bf  00000000  00000000  00076cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d61f1  00000000  00000000  0009c48d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017267e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071e8  00000000  00000000  001726d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000130 	.word	0x20000130
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d404 	.word	0x0800d404

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000134 	.word	0x20000134
 80001c4:	0800d404 	.word	0x0800d404

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_uldivmod>:
 8000aa0:	b953      	cbnz	r3, 8000ab8 <__aeabi_uldivmod+0x18>
 8000aa2:	b94a      	cbnz	r2, 8000ab8 <__aeabi_uldivmod+0x18>
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	bf08      	it	eq
 8000aa8:	2800      	cmpeq	r0, #0
 8000aaa:	bf1c      	itt	ne
 8000aac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ab0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ab4:	f000 b96e 	b.w	8000d94 <__aeabi_idiv0>
 8000ab8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000abc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac0:	f000 f806 	bl	8000ad0 <__udivmoddi4>
 8000ac4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000acc:	b004      	add	sp, #16
 8000ace:	4770      	bx	lr

08000ad0 <__udivmoddi4>:
 8000ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad4:	9d08      	ldr	r5, [sp, #32]
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	468c      	mov	ip, r1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f040 8083 	bne.w	8000be6 <__udivmoddi4+0x116>
 8000ae0:	428a      	cmp	r2, r1
 8000ae2:	4617      	mov	r7, r2
 8000ae4:	d947      	bls.n	8000b76 <__udivmoddi4+0xa6>
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	b142      	cbz	r2, 8000afe <__udivmoddi4+0x2e>
 8000aec:	f1c2 0020 	rsb	r0, r2, #32
 8000af0:	fa24 f000 	lsr.w	r0, r4, r0
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4097      	lsls	r7, r2
 8000af8:	ea40 0c01 	orr.w	ip, r0, r1
 8000afc:	4094      	lsls	r4, r2
 8000afe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b02:	0c23      	lsrs	r3, r4, #16
 8000b04:	fbbc f6f8 	udiv	r6, ip, r8
 8000b08:	fa1f fe87 	uxth.w	lr, r7
 8000b0c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b14:	fb06 f10e 	mul.w	r1, r6, lr
 8000b18:	4299      	cmp	r1, r3
 8000b1a:	d909      	bls.n	8000b30 <__udivmoddi4+0x60>
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b22:	f080 8119 	bcs.w	8000d58 <__udivmoddi4+0x288>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 8116 	bls.w	8000d58 <__udivmoddi4+0x288>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	443b      	add	r3, r7
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b44:	45a6      	cmp	lr, r4
 8000b46:	d909      	bls.n	8000b5c <__udivmoddi4+0x8c>
 8000b48:	193c      	adds	r4, r7, r4
 8000b4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b4e:	f080 8105 	bcs.w	8000d5c <__udivmoddi4+0x28c>
 8000b52:	45a6      	cmp	lr, r4
 8000b54:	f240 8102 	bls.w	8000d5c <__udivmoddi4+0x28c>
 8000b58:	3802      	subs	r0, #2
 8000b5a:	443c      	add	r4, r7
 8000b5c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b60:	eba4 040e 	sub.w	r4, r4, lr
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa0>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	b902      	cbnz	r2, 8000b7a <__udivmoddi4+0xaa>
 8000b78:	deff      	udf	#255	; 0xff
 8000b7a:	fab2 f282 	clz	r2, r2
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	d150      	bne.n	8000c24 <__udivmoddi4+0x154>
 8000b82:	1bcb      	subs	r3, r1, r7
 8000b84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b88:	fa1f f887 	uxth.w	r8, r7
 8000b8c:	2601      	movs	r6, #1
 8000b8e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b92:	0c21      	lsrs	r1, r4, #16
 8000b94:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b9c:	fb08 f30c 	mul.w	r3, r8, ip
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d907      	bls.n	8000bb4 <__udivmoddi4+0xe4>
 8000ba4:	1879      	adds	r1, r7, r1
 8000ba6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000baa:	d202      	bcs.n	8000bb2 <__udivmoddi4+0xe2>
 8000bac:	428b      	cmp	r3, r1
 8000bae:	f200 80e9 	bhi.w	8000d84 <__udivmoddi4+0x2b4>
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	1ac9      	subs	r1, r1, r3
 8000bb6:	b2a3      	uxth	r3, r4
 8000bb8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bbc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bc0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bc4:	fb08 f800 	mul.w	r8, r8, r0
 8000bc8:	45a0      	cmp	r8, r4
 8000bca:	d907      	bls.n	8000bdc <__udivmoddi4+0x10c>
 8000bcc:	193c      	adds	r4, r7, r4
 8000bce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bd2:	d202      	bcs.n	8000bda <__udivmoddi4+0x10a>
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	f200 80d9 	bhi.w	8000d8c <__udivmoddi4+0x2bc>
 8000bda:	4618      	mov	r0, r3
 8000bdc:	eba4 0408 	sub.w	r4, r4, r8
 8000be0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be4:	e7bf      	b.n	8000b66 <__udivmoddi4+0x96>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x12e>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80b1 	beq.w	8000d52 <__udivmoddi4+0x282>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x1cc>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0x140>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80b8 	bhi.w	8000d80 <__udivmoddi4+0x2b0>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0103 	sbc.w	r1, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	468c      	mov	ip, r1
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0a8      	beq.n	8000b70 <__udivmoddi4+0xa0>
 8000c1e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0xa0>
 8000c24:	f1c2 0320 	rsb	r3, r2, #32
 8000c28:	fa20 f603 	lsr.w	r6, r0, r3
 8000c2c:	4097      	lsls	r7, r2
 8000c2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c32:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c36:	40d9      	lsrs	r1, r3
 8000c38:	4330      	orrs	r0, r6
 8000c3a:	0c03      	lsrs	r3, r0, #16
 8000c3c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c40:	fa1f f887 	uxth.w	r8, r7
 8000c44:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f108 	mul.w	r1, r6, r8
 8000c50:	4299      	cmp	r1, r3
 8000c52:	fa04 f402 	lsl.w	r4, r4, r2
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x19c>
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 808d 	bcs.w	8000d7c <__udivmoddi4+0x2ac>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 808a 	bls.w	8000d7c <__udivmoddi4+0x2ac>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	443b      	add	r3, r7
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b281      	uxth	r1, r0
 8000c70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7c:	fb00 f308 	mul.w	r3, r0, r8
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x1c4>
 8000c84:	1879      	adds	r1, r7, r1
 8000c86:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c8a:	d273      	bcs.n	8000d74 <__udivmoddi4+0x2a4>
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d971      	bls.n	8000d74 <__udivmoddi4+0x2a4>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4439      	add	r1, r7
 8000c94:	1acb      	subs	r3, r1, r3
 8000c96:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c9a:	e778      	b.n	8000b8e <__udivmoddi4+0xbe>
 8000c9c:	f1c6 0c20 	rsb	ip, r6, #32
 8000ca0:	fa03 f406 	lsl.w	r4, r3, r6
 8000ca4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ca8:	431c      	orrs	r4, r3
 8000caa:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cb6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cba:	431f      	orrs	r7, r3
 8000cbc:	0c3b      	lsrs	r3, r7, #16
 8000cbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cc2:	fa1f f884 	uxth.w	r8, r4
 8000cc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cce:	fb09 fa08 	mul.w	sl, r9, r8
 8000cd2:	458a      	cmp	sl, r1
 8000cd4:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd8:	fa00 f306 	lsl.w	r3, r0, r6
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x220>
 8000cde:	1861      	adds	r1, r4, r1
 8000ce0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce4:	d248      	bcs.n	8000d78 <__udivmoddi4+0x2a8>
 8000ce6:	458a      	cmp	sl, r1
 8000ce8:	d946      	bls.n	8000d78 <__udivmoddi4+0x2a8>
 8000cea:	f1a9 0902 	sub.w	r9, r9, #2
 8000cee:	4421      	add	r1, r4
 8000cf0:	eba1 010a 	sub.w	r1, r1, sl
 8000cf4:	b2bf      	uxth	r7, r7
 8000cf6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cfe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d02:	fb00 f808 	mul.w	r8, r0, r8
 8000d06:	45b8      	cmp	r8, r7
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x24a>
 8000d0a:	19e7      	adds	r7, r4, r7
 8000d0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d10:	d22e      	bcs.n	8000d70 <__udivmoddi4+0x2a0>
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d92c      	bls.n	8000d70 <__udivmoddi4+0x2a0>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4427      	add	r7, r4
 8000d1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1e:	eba7 0708 	sub.w	r7, r7, r8
 8000d22:	fba0 8902 	umull	r8, r9, r0, r2
 8000d26:	454f      	cmp	r7, r9
 8000d28:	46c6      	mov	lr, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	d31a      	bcc.n	8000d64 <__udivmoddi4+0x294>
 8000d2e:	d017      	beq.n	8000d60 <__udivmoddi4+0x290>
 8000d30:	b15d      	cbz	r5, 8000d4a <__udivmoddi4+0x27a>
 8000d32:	ebb3 020e 	subs.w	r2, r3, lr
 8000d36:	eb67 0701 	sbc.w	r7, r7, r1
 8000d3a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d3e:	40f2      	lsrs	r2, r6
 8000d40:	ea4c 0202 	orr.w	r2, ip, r2
 8000d44:	40f7      	lsrs	r7, r6
 8000d46:	e9c5 2700 	strd	r2, r7, [r5]
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	462e      	mov	r6, r5
 8000d54:	4628      	mov	r0, r5
 8000d56:	e70b      	b.n	8000b70 <__udivmoddi4+0xa0>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	e6e9      	b.n	8000b30 <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fd      	b.n	8000b5c <__udivmoddi4+0x8c>
 8000d60:	4543      	cmp	r3, r8
 8000d62:	d2e5      	bcs.n	8000d30 <__udivmoddi4+0x260>
 8000d64:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d68:	eb69 0104 	sbc.w	r1, r9, r4
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	e7df      	b.n	8000d30 <__udivmoddi4+0x260>
 8000d70:	4608      	mov	r0, r1
 8000d72:	e7d2      	b.n	8000d1a <__udivmoddi4+0x24a>
 8000d74:	4660      	mov	r0, ip
 8000d76:	e78d      	b.n	8000c94 <__udivmoddi4+0x1c4>
 8000d78:	4681      	mov	r9, r0
 8000d7a:	e7b9      	b.n	8000cf0 <__udivmoddi4+0x220>
 8000d7c:	4666      	mov	r6, ip
 8000d7e:	e775      	b.n	8000c6c <__udivmoddi4+0x19c>
 8000d80:	4630      	mov	r0, r6
 8000d82:	e74a      	b.n	8000c1a <__udivmoddi4+0x14a>
 8000d84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d88:	4439      	add	r1, r7
 8000d8a:	e713      	b.n	8000bb4 <__udivmoddi4+0xe4>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	443c      	add	r4, r7
 8000d90:	e724      	b.n	8000bdc <__udivmoddi4+0x10c>
 8000d92:	bf00      	nop

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
	char digith = 0;;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 8000da2:	f000 f853 	bl	8000e4c <read_one_digit_from_keyboard>
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b23      	cmp	r3, #35	; 0x23
 8000dae:	d10a      	bne.n	8000dc6 <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 8000db0:	221e      	movs	r2, #30
 8000db2:	2100      	movs	r1, #0
 8000db4:	4824      	ldr	r0, [pc, #144]	; (8000e48 <read_digits+0xb0>)
 8000db6:	f00b fef5 	bl	800cba4 <memset>
		keyboard.read_digits_position = 0;
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <read_digits+0xb0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <read_digits+0xb0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8000dca:	d109      	bne.n	8000de0 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <read_digits+0xb0>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <read_digits+0xb0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <read_digits+0xb0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d028      	beq.n	8000e38 <read_digits+0xa0>
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2b23      	cmp	r3, #35	; 0x23
 8000dea:	d025      	beq.n	8000e38 <read_digits+0xa0>
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b2a      	cmp	r3, #42	; 0x2a
 8000df0:	d022      	beq.n	8000e38 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <read_digits+0xb0>)
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <read_digits+0xb0>)
 8000df8:	7f92      	ldrb	r2, [r2, #30]
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	dc11      	bgt.n	8000e22 <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <read_digits+0xb0>)
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	4911      	ldr	r1, [pc, #68]	; (8000e48 <read_digits+0xb0>)
 8000e04:	79fa      	ldrb	r2, [r7, #7]
 8000e06:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <read_digits+0xb0>)
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <read_digits+0xb0>)
 8000e10:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <read_digits+0xb0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <read_digits+0xb0>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000e20:	e00e      	b.n	8000e40 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <read_digits+0xb0>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <read_digits+0xb0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <read_digits+0xb0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000e36:	e003      	b.n	8000e40 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <read_digits+0xb0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	77da      	strb	r2, [r3, #31]
	}
}
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000160 	.word	0x20000160

08000e4c <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
	char digit = '\0';
 8000e52:	2300      	movs	r3, #0
 8000e54:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e5c:	48cf      	ldr	r0, [pc, #828]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000e5e:	f002 ff9f 	bl	8003da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e68:	48cc      	ldr	r0, [pc, #816]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000e6a:	f002 ff99 	bl	8003da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e74:	48c9      	ldr	r0, [pc, #804]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000e76:	f002 ff93 	bl	8003da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e80:	48c6      	ldr	r0, [pc, #792]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000e82:	f002 ff8d 	bl	8003da0 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000e86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e8a:	48c5      	ldr	r0, [pc, #788]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8000e8c:	f002 ff70 	bl	8003d70 <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d169      	bne.n	8000f6a <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e9c:	48bf      	ldr	r0, [pc, #764]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000e9e:	f002 ff7f 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea8:	48bc      	ldr	r0, [pc, #752]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000eaa:	f002 ff79 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb4:	48b9      	ldr	r0, [pc, #740]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000eb6:	f002 ff73 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec0:	48b6      	ldr	r0, [pc, #728]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000ec2:	f002 ff6d 	bl	8003da0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eca:	48b5      	ldr	r0, [pc, #724]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8000ecc:	f002 ff50 	bl	8003d70 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 8000ed6:	2331      	movs	r3, #49	; 0x31
 8000ed8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ee0:	48ae      	ldr	r0, [pc, #696]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000ee2:	f002 ff5d 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eec:	48ab      	ldr	r0, [pc, #684]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000eee:	f002 ff57 	bl	8003da0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000ef2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef6:	48aa      	ldr	r0, [pc, #680]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8000ef8:	f002 ff3a 	bl	8003d70 <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 8000f02:	2334      	movs	r3, #52	; 0x34
 8000f04:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0c:	48a3      	ldr	r0, [pc, #652]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f0e:	f002 ff47 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f18:	48a0      	ldr	r0, [pc, #640]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f1a:	f002 ff41 	bl	8003da0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000f1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f22:	489f      	ldr	r0, [pc, #636]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8000f24:	f002 ff24 	bl	8003d70 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 8000f2e:	2337      	movs	r3, #55	; 0x37
 8000f30:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f38:	4898      	ldr	r0, [pc, #608]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f3a:	f002 ff31 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f44:	4895      	ldr	r0, [pc, #596]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f46:	f002 ff2b 	bl	8003da0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000f4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f4e:	4894      	ldr	r0, [pc, #592]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8000f50:	f002 ff0e 	bl	8003d70 <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 8000f5a:	232a      	movs	r3, #42	; 0x2a
 8000f5c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f64:	488d      	ldr	r0, [pc, #564]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f66:	f002 ff1b 	bl	8003da0 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f70:	488a      	ldr	r0, [pc, #552]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f72:	f002 ff15 	bl	8003da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7c:	4887      	ldr	r0, [pc, #540]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f7e:	f002 ff0f 	bl	8003da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f88:	4884      	ldr	r0, [pc, #528]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f8a:	f002 ff09 	bl	8003da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f94:	4881      	ldr	r0, [pc, #516]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f96:	f002 ff03 	bl	8003da0 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 8000f9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9e:	4880      	ldr	r0, [pc, #512]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8000fa0:	f002 fee6 	bl	8003d70 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d169      	bne.n	800107e <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb0:	487a      	ldr	r0, [pc, #488]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000fb2:	f002 fef5 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbc:	4877      	ldr	r0, [pc, #476]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000fbe:	f002 feef 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc8:	4874      	ldr	r0, [pc, #464]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000fca:	f002 fee9 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd4:	4871      	ldr	r0, [pc, #452]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000fd6:	f002 fee3 	bl	8003da0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000fda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fde:	4870      	ldr	r0, [pc, #448]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8000fe0:	f002 fec6 	bl	8003d70 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 8000fea:	2332      	movs	r3, #50	; 0x32
 8000fec:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff4:	4869      	ldr	r0, [pc, #420]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000ff6:	f002 fed3 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001000:	4866      	ldr	r0, [pc, #408]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8001002:	f002 fecd 	bl	8003da0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001006:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100a:	4865      	ldr	r0, [pc, #404]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 800100c:	f002 feb0 	bl	8003d70 <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 8001016:	2335      	movs	r3, #53	; 0x35
 8001018:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001020:	485e      	ldr	r0, [pc, #376]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8001022:	f002 febd 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102c:	485b      	ldr	r0, [pc, #364]	; (800119c <read_one_digit_from_keyboard+0x350>)
 800102e:	f002 feb7 	bl	8003da0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001032:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001036:	485a      	ldr	r0, [pc, #360]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8001038:	f002 fe9a 	bl	8003d70 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 8001042:	2338      	movs	r3, #56	; 0x38
 8001044:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104c:	4853      	ldr	r0, [pc, #332]	; (800119c <read_one_digit_from_keyboard+0x350>)
 800104e:	f002 fea7 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001058:	4850      	ldr	r0, [pc, #320]	; (800119c <read_one_digit_from_keyboard+0x350>)
 800105a:	f002 fea1 	bl	8003da0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800105e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001062:	484f      	ldr	r0, [pc, #316]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8001064:	f002 fe84 	bl	8003d70 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 800106e:	2330      	movs	r3, #48	; 0x30
 8001070:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001078:	4848      	ldr	r0, [pc, #288]	; (800119c <read_one_digit_from_keyboard+0x350>)
 800107a:	f002 fe91 	bl	8003da0 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001084:	4845      	ldr	r0, [pc, #276]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8001086:	f002 fe8b 	bl	8003da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001090:	4842      	ldr	r0, [pc, #264]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8001092:	f002 fe85 	bl	8003da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109c:	483f      	ldr	r0, [pc, #252]	; (800119c <read_one_digit_from_keyboard+0x350>)
 800109e:	f002 fe7f 	bl	8003da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a8:	483c      	ldr	r0, [pc, #240]	; (800119c <read_one_digit_from_keyboard+0x350>)
 80010aa:	f002 fe79 	bl	8003da0 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 80010ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b2:	483c      	ldr	r0, [pc, #240]	; (80011a4 <read_one_digit_from_keyboard+0x358>)
 80010b4:	f002 fe5c 	bl	8003d70 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d169      	bne.n	8001192 <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c4:	4835      	ldr	r0, [pc, #212]	; (800119c <read_one_digit_from_keyboard+0x350>)
 80010c6:	f002 fe6b 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d0:	4832      	ldr	r0, [pc, #200]	; (800119c <read_one_digit_from_keyboard+0x350>)
 80010d2:	f002 fe65 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010dc:	482f      	ldr	r0, [pc, #188]	; (800119c <read_one_digit_from_keyboard+0x350>)
 80010de:	f002 fe5f 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e8:	482c      	ldr	r0, [pc, #176]	; (800119c <read_one_digit_from_keyboard+0x350>)
 80010ea:	f002 fe59 	bl	8003da0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80010ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010f2:	482c      	ldr	r0, [pc, #176]	; (80011a4 <read_one_digit_from_keyboard+0x358>)
 80010f4:	f002 fe3c 	bl	8003d70 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 80010fe:	2333      	movs	r3, #51	; 0x33
 8001100:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001108:	4824      	ldr	r0, [pc, #144]	; (800119c <read_one_digit_from_keyboard+0x350>)
 800110a:	f002 fe49 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001114:	4821      	ldr	r0, [pc, #132]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8001116:	f002 fe43 	bl	8003da0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800111a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111e:	4821      	ldr	r0, [pc, #132]	; (80011a4 <read_one_digit_from_keyboard+0x358>)
 8001120:	f002 fe26 	bl	8003d70 <HAL_GPIO_ReadPin>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 800112a:	2336      	movs	r3, #54	; 0x36
 800112c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001134:	4819      	ldr	r0, [pc, #100]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8001136:	f002 fe33 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001140:	4816      	ldr	r0, [pc, #88]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8001142:	f002 fe2d 	bl	8003da0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001146:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114a:	4816      	ldr	r0, [pc, #88]	; (80011a4 <read_one_digit_from_keyboard+0x358>)
 800114c:	f002 fe10 	bl	8003d70 <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 8001156:	2339      	movs	r3, #57	; 0x39
 8001158:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001160:	480e      	ldr	r0, [pc, #56]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8001162:	f002 fe1d 	bl	8003da0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	480b      	ldr	r0, [pc, #44]	; (800119c <read_one_digit_from_keyboard+0x350>)
 800116e:	f002 fe17 	bl	8003da0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001172:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001176:	480b      	ldr	r0, [pc, #44]	; (80011a4 <read_one_digit_from_keyboard+0x358>)
 8001178:	f002 fdfa 	bl	8003d70 <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 8001182:	2323      	movs	r3, #35	; 0x23
 8001184:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <read_one_digit_from_keyboard+0x350>)
 800118e:	f002 fe07 	bl	8003da0 <HAL_GPIO_WritePin>
	}
	return digit;
 8001192:	79fb      	ldrb	r3, [r7, #7]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40021000 	.word	0x40021000

080011a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ae:	f002 fa9b 	bl	80036e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b2:	f000 f89d 	bl	80012f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b6:	f000 fb4f 	bl	8001858 <MX_GPIO_Init>
  MX_I2S3_Init();
 80011ba:	f000 f983 	bl	80014c4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80011be:	f000 f9c5 	bl	800154c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80011c2:	f00b f9ad 	bl	800c520 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80011c6:	f000 fa85 	bl	80016d4 <MX_TIM2_Init>
  MX_SPI2_Init();
 80011ca:	f000 f9f5 	bl	80015b8 <MX_SPI2_Init>
  MX_RNG_Init();
 80011ce:	f000 f9a9 	bl	8001524 <MX_RNG_Init>
  MX_TIM3_Init();
 80011d2:	f000 facd 	bl	8001770 <MX_TIM3_Init>
  MX_TIM1_Init();
 80011d6:	f000 fa25 	bl	8001624 <MX_TIM1_Init>
  MX_I2C3_Init();
 80011da:	f000 f945 	bl	8001468 <MX_I2C3_Init>
  MX_I2C2_Init();
 80011de:	f000 f915 	bl	800140c <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80011e2:	f000 f907 	bl	80013f4 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80011e6:	f001 f9a3 	bl	8002530 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f001 fb46 	bl	800287c <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 80011f0:	2003      	movs	r0, #3
 80011f2:	f001 f93f 	bl	8002474 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f001 fb40 	bl	800287c <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 80011fc:	2364      	movs	r3, #100	; 0x64
 80011fe:	60fb      	str	r3, [r7, #12]
  speed_test_LCD(number_of_tests);
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f001 fc29 	bl	8002a58 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 8001206:	2000      	movs	r0, #0
 8001208:	f001 fb38 	bl	800287c <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 800120c:	4832      	ldr	r0, [pc, #200]	; (80012d8 <main+0x130>)
 800120e:	f007 fa4d 	bl	80086ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001212:	2100      	movs	r1, #0
 8001214:	4830      	ldr	r0, [pc, #192]	; (80012d8 <main+0x130>)
 8001216:	f007 fab9 	bl	800878c <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 800121a:	4b30      	ldr	r3, [pc, #192]	; (80012dc <main+0x134>)
 800121c:	220a      	movs	r2, #10
 800121e:	779a      	strb	r2, [r3, #30]
    // 0x246				//  ????
    // 0x247				// MEMS
    // 0x255              //  ????

    // Read ID from BME280 ////////////////////////////////////////////////////////////////
    uint16_t STATUS=0;
 8001220:	2300      	movs	r3, #0
 8001222:	817b      	strh	r3, [r7, #10]
    uint16_t addres_devise = 0x76;   // BME280
 8001224:	2376      	movs	r3, #118	; 0x76
 8001226:	813b      	strh	r3, [r7, #8]
    uint16_t addr = 0xD0;
 8001228:	23d0      	movs	r3, #208	; 0xd0
 800122a:	80fb      	strh	r3, [r7, #6]
    uint8_t buff=0;         // Return 0x96 -> Dec 60
 800122c:	2300      	movs	r3, #0
 800122e:	717b      	strb	r3, [r7, #5]
    STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, 1, &buff, 1, 1000);
 8001230:	893b      	ldrh	r3, [r7, #8]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	b299      	uxth	r1, r3
 8001236:	88fa      	ldrh	r2, [r7, #6]
 8001238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	2301      	movs	r3, #1
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	1d7b      	adds	r3, r7, #5
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	4825      	ldr	r0, [pc, #148]	; (80012e0 <main+0x138>)
 800124a:	f004 fe7d 	bl	8005f48 <HAL_I2C_Mem_Read>
 800124e:	4603      	mov	r3, r0
 8001250:	817b      	strh	r3, [r7, #10]
    /////////////////////////////////////////////////////////////////////////////////////////

    // Read ID from DS3231 ////////////////////////////////////////////////////////////////
    addres_devise = 0x68;            // DS3231
 8001252:	2368      	movs	r3, #104	; 0x68
 8001254:	813b      	strh	r3, [r7, #8]
    addr = 0x00;						// Read seconds register
 8001256:	2300      	movs	r3, #0
 8001258:	80fb      	strh	r3, [r7, #6]
    buff=0;
 800125a:	2300      	movs	r3, #0
 800125c:	717b      	strb	r3, [r7, #5]
    STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, 1, &buff, 1, 1000);
 800125e:	893b      	ldrh	r3, [r7, #8]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	b299      	uxth	r1, r3
 8001264:	88fa      	ldrh	r2, [r7, #6]
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	2301      	movs	r3, #1
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	1d7b      	adds	r3, r7, #5
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	481a      	ldr	r0, [pc, #104]	; (80012e0 <main+0x138>)
 8001278:	f004 fe66 	bl	8005f48 <HAL_I2C_Mem_Read>
 800127c:	4603      	mov	r3, r0
 800127e:	817b      	strh	r3, [r7, #10]
    /////////////////////////////////////////////////////////////////////////////////////////

    // Test OLED  ////////////////////////////////////////////////////////////////
    oled_init();
 8001280:	f001 fdfa 	bl	8002e78 <oled_init>
    char oled_buff[] = "TEST";
 8001284:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <main+0x13c>)
 8001286:	463b      	mov	r3, r7
 8001288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800128c:	6018      	str	r0, [r3, #0]
 800128e:	3304      	adds	r3, #4
 8001290:	7019      	strb	r1, [r3, #0]
    // draw_pixel(10, 10, WHITE);
    graphics_text(1, 1, 1, oled_buff);
 8001292:	463b      	mov	r3, r7
 8001294:	2201      	movs	r2, #1
 8001296:	2101      	movs	r1, #1
 8001298:	2001      	movs	r0, #1
 800129a:	f001 fce5 	bl	8002c68 <graphics_text>
    graphics_text(1, 20, 2, oled_buff);
 800129e:	463b      	mov	r3, r7
 80012a0:	2202      	movs	r2, #2
 80012a2:	2114      	movs	r1, #20
 80012a4:	2001      	movs	r0, #1
 80012a6:	f001 fcdf 	bl	8002c68 <graphics_text>
    graphics_text(50, 1, 3, oled_buff);
 80012aa:	463b      	mov	r3, r7
 80012ac:	2203      	movs	r2, #3
 80012ae:	2101      	movs	r1, #1
 80012b0:	2032      	movs	r0, #50	; 0x32
 80012b2:	f001 fcd9 	bl	8002c68 <graphics_text>
    oled_update();
 80012b6:	f001 fd8b 	bl	8002dd0 <oled_update>
    /////////////////////////////////////////////////////////////////////////////////////////

    // Test MPU6050  //////////////////////////////////////////////////////////////////////
    while (MPU6050_Init(&hi2c2) == 1);
 80012ba:	bf00      	nop
 80012bc:	480a      	ldr	r0, [pc, #40]	; (80012e8 <main+0x140>)
 80012be:	f001 fe4d 	bl	8002f5c <MPU6050_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d0f9      	beq.n	80012bc <main+0x114>
    MPU6050_Read_All(&hi2c2, &MPU6050);
 80012c8:	4908      	ldr	r1, [pc, #32]	; (80012ec <main+0x144>)
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <main+0x140>)
 80012cc:	f001 fea0 	bl	8003010 <MPU6050_Read_All>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80012d0:	f00b f94c 	bl	800c56c <MX_USB_HOST_Process>
 80012d4:	e7fc      	b.n	80012d0 <main+0x128>
 80012d6:	bf00      	nop
 80012d8:	200002e0 	.word	0x200002e0
 80012dc:	20000160 	.word	0x20000160
 80012e0:	20000188 	.word	0x20000188
 80012e4:	0800d420 	.word	0x0800d420
 80012e8:	20000234 	.word	0x20000234
 80012ec:	20000288 	.word	0x20000288

080012f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b098      	sub	sp, #96	; 0x60
 80012f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012fa:	2230      	movs	r2, #48	; 0x30
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f00b fc50 	bl	800cba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b31      	ldr	r3, [pc, #196]	; (80013ec <SystemClock_Config+0xfc>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a30      	ldr	r2, [pc, #192]	; (80013ec <SystemClock_Config+0xfc>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b2e      	ldr	r3, [pc, #184]	; (80013ec <SystemClock_Config+0xfc>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <SystemClock_Config+0x100>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a2a      	ldr	r2, [pc, #168]	; (80013f0 <SystemClock_Config+0x100>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <SystemClock_Config+0x100>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800135a:	2301      	movs	r3, #1
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001364:	2302      	movs	r3, #2
 8001366:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001368:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800136c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800136e:	2308      	movs	r3, #8
 8001370:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001372:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001376:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001378:	2302      	movs	r3, #2
 800137a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800137c:	2307      	movs	r3, #7
 800137e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001380:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001384:	4618      	mov	r0, r3
 8001386:	f006 f883 	bl	8007490 <HAL_RCC_OscConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001390:	f000 fbca 	bl	8001b28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001394:	230f      	movs	r3, #15
 8001396:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001398:	2302      	movs	r3, #2
 800139a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	2105      	movs	r1, #5
 80013b2:	4618      	mov	r0, r3
 80013b4:	f006 fae4 	bl	8007980 <HAL_RCC_ClockConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013be:	f000 fbb3 	bl	8001b28 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013c2:	2301      	movs	r3, #1
 80013c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80013c6:	23c0      	movs	r3, #192	; 0xc0
 80013c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	4618      	mov	r0, r3
 80013d4:	f006 fcbc 	bl	8007d50 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80013de:	f000 fba3 	bl	8001b28 <Error_Handler>
  }
}
 80013e2:	bf00      	nop
 80013e4:	3760      	adds	r7, #96	; 0x60
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40007000 	.word	0x40007000

080013f4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	201c      	movs	r0, #28
 80013fe:	f002 fae4 	bl	80039ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001402:	201c      	movs	r0, #28
 8001404:	f002 fafd 	bl	8003a02 <HAL_NVIC_EnableIRQ>
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_I2C2_Init+0x50>)
 8001412:	4a13      	ldr	r2, [pc, #76]	; (8001460 <MX_I2C2_Init+0x54>)
 8001414:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_I2C2_Init+0x50>)
 8001418:	4a12      	ldr	r2, [pc, #72]	; (8001464 <MX_I2C2_Init+0x58>)
 800141a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_I2C2_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_I2C2_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_I2C2_Init+0x50>)
 800142a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800142e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <MX_I2C2_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_I2C2_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <MX_I2C2_Init+0x50>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_I2C2_Init+0x50>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001448:	4804      	ldr	r0, [pc, #16]	; (800145c <MX_I2C2_Init+0x50>)
 800144a:	f004 fa41 	bl	80058d0 <HAL_I2C_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001454:	f000 fb68 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000234 	.word	0x20000234
 8001460:	40005800 	.word	0x40005800
 8001464:	000186a0 	.word	0x000186a0

08001468 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_I2C3_Init+0x50>)
 800146e:	4a13      	ldr	r2, [pc, #76]	; (80014bc <MX_I2C3_Init+0x54>)
 8001470:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_I2C3_Init+0x50>)
 8001474:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <MX_I2C3_Init+0x58>)
 8001476:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_I2C3_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_I2C3_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_I2C3_Init+0x50>)
 8001486:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800148a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MX_I2C3_Init+0x50>)
 800148e:	2200      	movs	r2, #0
 8001490:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_I2C3_Init+0x50>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <MX_I2C3_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_I2C3_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <MX_I2C3_Init+0x50>)
 80014a6:	f004 fa13 	bl	80058d0 <HAL_I2C_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014b0:	f000 fb3a 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000188 	.word	0x20000188
 80014bc:	40005c00 	.word	0x40005c00
 80014c0:	000186a0 	.word	0x000186a0

080014c4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <MX_I2S3_Init+0x54>)
 80014ca:	4a14      	ldr	r2, [pc, #80]	; (800151c <MX_I2S3_Init+0x58>)
 80014cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_I2S3_Init+0x54>)
 80014d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <MX_I2S3_Init+0x54>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_I2S3_Init+0x54>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <MX_I2S3_Init+0x54>)
 80014e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_I2S3_Init+0x54>)
 80014ec:	4a0c      	ldr	r2, [pc, #48]	; (8001520 <MX_I2S3_Init+0x5c>)
 80014ee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_I2S3_Init+0x54>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_I2S3_Init+0x54>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_I2S3_Init+0x54>)
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_I2S3_Init+0x54>)
 8001504:	f005 fb24 	bl	8006b50 <HAL_I2S_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800150e:	f000 fb0b 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000420 	.word	0x20000420
 800151c:	40003c00 	.word	0x40003c00
 8001520:	00017700 	.word	0x00017700

08001524 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_RNG_Init+0x20>)
 800152a:	4a07      	ldr	r2, [pc, #28]	; (8001548 <MX_RNG_Init+0x24>)
 800152c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_RNG_Init+0x20>)
 8001530:	f006 fd4e 	bl	8007fd0 <HAL_RNG_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800153a:	f000 faf5 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000370 	.word	0x20000370
 8001548:	50060800 	.word	0x50060800

0800154c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001552:	4a18      	ldr	r2, [pc, #96]	; (80015b4 <MX_SPI1_Init+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001558:	f44f 7282 	mov.w	r2, #260	; 0x104
 800155c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_SPI1_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001580:	2200      	movs	r2, #0
 8001582:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_SPI1_Init+0x64>)
 800158c:	2200      	movs	r2, #0
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_SPI1_Init+0x64>)
 8001598:	220a      	movs	r2, #10
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <MX_SPI1_Init+0x64>)
 800159e:	f006 fda5 	bl	80080ec <HAL_SPI_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015a8:	f000 fabe 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000380 	.word	0x20000380
 80015b4:	40013000 	.word	0x40013000

080015b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_SPI2_Init+0x64>)
 80015be:	4a18      	ldr	r2, [pc, #96]	; (8001620 <MX_SPI2_Init+0x68>)
 80015c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <MX_SPI2_Init+0x64>)
 80015c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_SPI2_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <MX_SPI2_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_SPI2_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_SPI2_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_SPI2_Init+0x64>)
 80015e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_SPI2_Init+0x64>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <MX_SPI2_Init+0x64>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_SPI2_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <MX_SPI2_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_SPI2_Init+0x64>)
 8001604:	220a      	movs	r2, #10
 8001606:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_SPI2_Init+0x64>)
 800160a:	f006 fd6f 	bl	80080ec <HAL_SPI_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001614:	f000 fa88 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200001dc 	.word	0x200001dc
 8001620:	40003800 	.word	0x40003800

08001624 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	; 0x30
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	2224      	movs	r2, #36	; 0x24
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f00b fab6 	bl	800cba4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <MX_TIM1_Init+0xa8>)
 8001642:	4a23      	ldr	r2, [pc, #140]	; (80016d0 <MX_TIM1_Init+0xac>)
 8001644:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <MX_TIM1_Init+0xa8>)
 8001648:	2200      	movs	r2, #0
 800164a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <MX_TIM1_Init+0xa8>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <MX_TIM1_Init+0xa8>)
 8001654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001658:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <MX_TIM1_Init+0xa8>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_TIM1_Init+0xa8>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <MX_TIM1_Init+0xa8>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800166c:	2301      	movs	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001674:	2301      	movs	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001684:	2301      	movs	r3, #1
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4619      	mov	r1, r3
 8001696:	480d      	ldr	r0, [pc, #52]	; (80016cc <MX_TIM1_Init+0xa8>)
 8001698:	f007 f9df 	bl	8008a5a <HAL_TIM_Encoder_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80016a2:	f000 fa41 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <MX_TIM1_Init+0xa8>)
 80016b4:	f008 f844 	bl	8009740 <HAL_TIMEx_MasterConfigSynchronization>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80016be:	f000 fa33 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	3730      	adds	r7, #48	; 0x30
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000328 	.word	0x20000328
 80016d0:	40010000 	.word	0x40010000

080016d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016da:	f107 0308 	add.w	r3, r7, #8
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e8:	463b      	mov	r3, r7
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <MX_TIM2_Init+0x98>)
 80016f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_TIM2_Init+0x98>)
 80016fa:	f240 3247 	movw	r2, #839	; 0x347
 80016fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <MX_TIM2_Init+0x98>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <MX_TIM2_Init+0x98>)
 8001708:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800170c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <MX_TIM2_Init+0x98>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_TIM2_Init+0x98>)
 8001716:	2280      	movs	r2, #128	; 0x80
 8001718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800171a:	4814      	ldr	r0, [pc, #80]	; (800176c <MX_TIM2_Init+0x98>)
 800171c:	f006 ff76 	bl	800860c <HAL_TIM_Base_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001726:	f000 f9ff 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	4619      	mov	r1, r3
 8001736:	480d      	ldr	r0, [pc, #52]	; (800176c <MX_TIM2_Init+0x98>)
 8001738:	f007 fbfc 	bl	8008f34 <HAL_TIM_ConfigClockSource>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001742:	f000 f9f1 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001746:	2310      	movs	r3, #16
 8001748:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800174e:	463b      	mov	r3, r7
 8001750:	4619      	mov	r1, r3
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <MX_TIM2_Init+0x98>)
 8001754:	f007 fff4 	bl	8009740 <HAL_TIMEx_MasterConfigSynchronization>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800175e:	f000 f9e3 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200003d8 	.word	0x200003d8

08001770 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08e      	sub	sp, #56	; 0x38
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001784:	f107 0320 	add.w	r3, r7, #32
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	615a      	str	r2, [r3, #20]
 800179e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017a0:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <MX_TIM3_Init+0xe0>)
 80017a2:	4a2c      	ldr	r2, [pc, #176]	; (8001854 <MX_TIM3_Init+0xe4>)
 80017a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <MX_TIM3_Init+0xe0>)
 80017a8:	f640 0233 	movw	r2, #2099	; 0x833
 80017ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b28      	ldr	r3, [pc, #160]	; (8001850 <MX_TIM3_Init+0xe0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <MX_TIM3_Init+0xe0>)
 80017b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80017ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <MX_TIM3_Init+0xe0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <MX_TIM3_Init+0xe0>)
 80017c4:	2280      	movs	r2, #128	; 0x80
 80017c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017c8:	4821      	ldr	r0, [pc, #132]	; (8001850 <MX_TIM3_Init+0xe0>)
 80017ca:	f006 ff1f 	bl	800860c <HAL_TIM_Base_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80017d4:	f000 f9a8 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e2:	4619      	mov	r1, r3
 80017e4:	481a      	ldr	r0, [pc, #104]	; (8001850 <MX_TIM3_Init+0xe0>)
 80017e6:	f007 fba5 	bl	8008f34 <HAL_TIM_ConfigClockSource>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80017f0:	f000 f99a 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017f4:	4816      	ldr	r0, [pc, #88]	; (8001850 <MX_TIM3_Init+0xe0>)
 80017f6:	f007 f8d7 	bl	80089a8 <HAL_TIM_PWM_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001800:	f000 f992 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800180c:	f107 0320 	add.w	r3, r7, #32
 8001810:	4619      	mov	r1, r3
 8001812:	480f      	ldr	r0, [pc, #60]	; (8001850 <MX_TIM3_Init+0xe0>)
 8001814:	f007 ff94 	bl	8009740 <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800181e:	f000 f983 	bl	8001b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001822:	2360      	movs	r3, #96	; 0x60
 8001824:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	4805      	ldr	r0, [pc, #20]	; (8001850 <MX_TIM3_Init+0xe0>)
 800183a:	f007 fabd 	bl	8008db8 <HAL_TIM_PWM_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001844:	f000 f970 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	3738      	adds	r7, #56	; 0x38
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200002e0 	.word	0x200002e0
 8001854:	40000400 	.word	0x40000400

08001858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	; 0x30
 800185c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	4ba6      	ldr	r3, [pc, #664]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4aa5      	ldr	r2, [pc, #660]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 8001878:	f043 0310 	orr.w	r3, r3, #16
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4ba3      	ldr	r3, [pc, #652]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	4b9f      	ldr	r3, [pc, #636]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a9e      	ldr	r2, [pc, #632]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b9c      	ldr	r3, [pc, #624]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	4b98      	ldr	r3, [pc, #608]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a97      	ldr	r2, [pc, #604]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 80018b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b95      	ldr	r3, [pc, #596]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b91      	ldr	r3, [pc, #580]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a90      	ldr	r2, [pc, #576]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b8e      	ldr	r3, [pc, #568]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	4b8a      	ldr	r3, [pc, #552]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a89      	ldr	r2, [pc, #548]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b87      	ldr	r3, [pc, #540]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	4b83      	ldr	r3, [pc, #524]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a82      	ldr	r2, [pc, #520]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 8001904:	f043 0308 	orr.w	r3, r3, #8
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b80      	ldr	r3, [pc, #512]	; (8001b0c <MX_GPIO_Init+0x2b4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001916:	2200      	movs	r2, #0
 8001918:	217c      	movs	r1, #124	; 0x7c
 800191a:	487d      	ldr	r0, [pc, #500]	; (8001b10 <MX_GPIO_Init+0x2b8>)
 800191c:	f002 fa40 	bl	8003da0 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	2101      	movs	r1, #1
 8001924:	487b      	ldr	r0, [pc, #492]	; (8001b14 <MX_GPIO_Init+0x2bc>)
 8001926:	f002 fa3b 	bl	8003da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 800192a:	2200      	movs	r2, #0
 800192c:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001930:	4879      	ldr	r0, [pc, #484]	; (8001b18 <MX_GPIO_Init+0x2c0>)
 8001932:	f002 fa35 	bl	8003da0 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 6104 	mov.w	r1, #2112	; 0x840
 800193c:	4875      	ldr	r0, [pc, #468]	; (8001b14 <MX_GPIO_Init+0x2bc>)
 800193e:	f002 fa2f 	bl	8003da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001948:	4874      	ldr	r0, [pc, #464]	; (8001b1c <MX_GPIO_Init+0x2c4>)
 800194a:	f002 fa29 	bl	8003da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 800194e:	2374      	movs	r3, #116	; 0x74
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4619      	mov	r1, r3
 8001964:	486a      	ldr	r0, [pc, #424]	; (8001b10 <MX_GPIO_Init+0x2b8>)
 8001966:	f002 f867 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800196a:	2308      	movs	r3, #8
 800196c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	4863      	ldr	r0, [pc, #396]	; (8001b10 <MX_GPIO_Init+0x2b8>)
 8001982:	f002 f859 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800198a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4619      	mov	r1, r3
 800199a:	485e      	ldr	r0, [pc, #376]	; (8001b14 <MX_GPIO_Init+0x2bc>)
 800199c:	f002 f84c 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 80019a0:	f640 0341 	movw	r3, #2113	; 0x841
 80019a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	4619      	mov	r1, r3
 80019b8:	4856      	ldr	r0, [pc, #344]	; (8001b14 <MX_GPIO_Init+0x2bc>)
 80019ba:	f002 f83d 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80019be:	2308      	movs	r3, #8
 80019c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ce:	2305      	movs	r3, #5
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	484e      	ldr	r0, [pc, #312]	; (8001b14 <MX_GPIO_Init+0x2bc>)
 80019da:	f002 f82d 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019de:	2301      	movs	r3, #1
 80019e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019e2:	4b4f      	ldr	r3, [pc, #316]	; (8001b20 <MX_GPIO_Init+0x2c8>)
 80019e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	484c      	ldr	r0, [pc, #304]	; (8001b24 <MX_GPIO_Init+0x2cc>)
 80019f2:	f002 f821 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80019f6:	2304      	movs	r3, #4
 80019f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	4619      	mov	r1, r3
 8001a08:	4844      	ldr	r0, [pc, #272]	; (8001b1c <MX_GPIO_Init+0x2c4>)
 8001a0a:	f002 f815 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTION_SENSOR_9960_Pin KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin|KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 8001a0e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	4619      	mov	r1, r3
 8001a22:	483b      	ldr	r0, [pc, #236]	; (8001b10 <MX_GPIO_Init+0x2b8>)
 8001a24:	f002 f808 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001a28:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4837      	ldr	r0, [pc, #220]	; (8001b1c <MX_GPIO_Init+0x2c4>)
 8001a3e:	f001 fffb 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001a42:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001a46:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	4619      	mov	r1, r3
 8001a5a:	482f      	ldr	r0, [pc, #188]	; (8001b18 <MX_GPIO_Init+0x2c0>)
 8001a5c:	f001 ffec 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a60:	2320      	movs	r3, #32
 8001a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	4619      	mov	r1, r3
 8001a72:	4829      	ldr	r0, [pc, #164]	; (8001b18 <MX_GPIO_Init+0x2c0>)
 8001a74:	f001 ffe0 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a78:	2340      	movs	r3, #64	; 0x40
 8001a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4823      	ldr	r0, [pc, #140]	; (8001b1c <MX_GPIO_Init+0x2c4>)
 8001a90:	f001 ffd2 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001a94:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa6:	f107 031c 	add.w	r3, r7, #28
 8001aaa:	4619      	mov	r1, r3
 8001aac:	481b      	ldr	r0, [pc, #108]	; (8001b1c <MX_GPIO_Init+0x2c4>)
 8001aae:	f001 ffc3 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab8:	2312      	movs	r3, #18
 8001aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	4619      	mov	r1, r3
 8001ace:	4813      	ldr	r0, [pc, #76]	; (8001b1c <MX_GPIO_Init+0x2c4>)
 8001ad0:	f001 ffb2 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480a      	ldr	r0, [pc, #40]	; (8001b10 <MX_GPIO_Init+0x2b8>)
 8001ae8:	f001 ffa6 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <MX_GPIO_Init+0x2c8>)
 8001af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4619      	mov	r1, r3
 8001afe:	4804      	ldr	r0, [pc, #16]	; (8001b10 <MX_GPIO_Init+0x2b8>)
 8001b00:	f001 ff9a 	bl	8003a38 <HAL_GPIO_Init>

}
 8001b04:	bf00      	nop
 8001b06:	3730      	adds	r7, #48	; 0x30
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40020800 	.word	0x40020800
 8001b18:	40020c00 	.word	0x40020c00
 8001b1c:	40020400 	.word	0x40020400
 8001b20:	10120000 	.word	0x10120000
 8001b24:	40020000 	.word	0x40020000

08001b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <Error_Handler+0x8>
	...

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_MspInit+0x5c>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b72:	2007      	movs	r0, #7
 8001b74:	f001 ff1e 	bl	80039b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2005      	movs	r0, #5
 8001b7e:	f001 ff24 	bl	80039ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b82:	2005      	movs	r0, #5
 8001b84:	f001 ff3d 	bl	8003a02 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800

08001b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08c      	sub	sp, #48	; 0x30
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a42      	ldr	r2, [pc, #264]	; (8001cbc <HAL_I2C_MspInit+0x128>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d12d      	bne.n	8001c12 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <HAL_I2C_MspInit+0x12c>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a40      	ldr	r2, [pc, #256]	; (8001cc0 <HAL_I2C_MspInit+0x12c>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <HAL_I2C_MspInit+0x12c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd8:	2312      	movs	r3, #18
 8001bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001be4:	2304      	movs	r3, #4
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	4619      	mov	r1, r3
 8001bee:	4835      	ldr	r0, [pc, #212]	; (8001cc4 <HAL_I2C_MspInit+0x130>)
 8001bf0:	f001 ff22 	bl	8003a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <HAL_I2C_MspInit+0x12c>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	4a30      	ldr	r2, [pc, #192]	; (8001cc0 <HAL_I2C_MspInit+0x12c>)
 8001bfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c02:	6413      	str	r3, [r2, #64]	; 0x40
 8001c04:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <HAL_I2C_MspInit+0x12c>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c10:	e050      	b.n	8001cb4 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a2c      	ldr	r2, [pc, #176]	; (8001cc8 <HAL_I2C_MspInit+0x134>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d14b      	bne.n	8001cb4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <HAL_I2C_MspInit+0x12c>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <HAL_I2C_MspInit+0x12c>)
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <HAL_I2C_MspInit+0x12c>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_I2C_MspInit+0x12c>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <HAL_I2C_MspInit+0x12c>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6313      	str	r3, [r2, #48]	; 0x30
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_I2C_MspInit+0x12c>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5a:	2312      	movs	r3, #18
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c66:	2304      	movs	r3, #4
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6a:	f107 031c 	add.w	r3, r7, #28
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4816      	ldr	r0, [pc, #88]	; (8001ccc <HAL_I2C_MspInit+0x138>)
 8001c72:	f001 fee1 	bl	8003a38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c7c:	2312      	movs	r3, #18
 8001c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c80:	2301      	movs	r3, #1
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c88:	2304      	movs	r3, #4
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	4619      	mov	r1, r3
 8001c92:	480f      	ldr	r0, [pc, #60]	; (8001cd0 <HAL_I2C_MspInit+0x13c>)
 8001c94:	f001 fed0 	bl	8003a38 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_I2C_MspInit+0x12c>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <HAL_I2C_MspInit+0x12c>)
 8001ca2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_I2C_MspInit+0x12c>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
}
 8001cb4:	bf00      	nop
 8001cb6:	3730      	adds	r7, #48	; 0x30
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40005800 	.word	0x40005800
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	40005c00 	.word	0x40005c00
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a28      	ldr	r2, [pc, #160]	; (8001d94 <HAL_I2S_MspInit+0xc0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d14a      	bne.n	8001d8c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <HAL_I2S_MspInit+0xc4>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	4a26      	ldr	r2, [pc, #152]	; (8001d98 <HAL_I2S_MspInit+0xc4>)
 8001d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d04:	6413      	str	r3, [r2, #64]	; 0x40
 8001d06:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <HAL_I2S_MspInit+0xc4>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_I2S_MspInit+0xc4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a1f      	ldr	r2, [pc, #124]	; (8001d98 <HAL_I2S_MspInit+0xc4>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <HAL_I2S_MspInit+0xc4>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_I2S_MspInit+0xc4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a18      	ldr	r2, [pc, #96]	; (8001d98 <HAL_I2S_MspInit+0xc4>)
 8001d38:	f043 0304 	orr.w	r3, r3, #4
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <HAL_I2S_MspInit+0xc4>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d4a:	2310      	movs	r3, #16
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <HAL_I2S_MspInit+0xc8>)
 8001d66:	f001 fe67 	bl	8003a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d6a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d7c:	2306      	movs	r3, #6
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	4619      	mov	r1, r3
 8001d86:	4806      	ldr	r0, [pc, #24]	; (8001da0 <HAL_I2S_MspInit+0xcc>)
 8001d88:	f001 fe56 	bl	8003a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d8c:	bf00      	nop
 8001d8e:	3728      	adds	r7, #40	; 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40003c00 	.word	0x40003c00
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	40020800 	.word	0x40020800

08001da4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <HAL_RNG_MspInit+0x3c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d10d      	bne.n	8001dd2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_RNG_MspInit+0x40>)
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_RNG_MspInit+0x40>)
 8001dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dc4:	6353      	str	r3, [r2, #52]	; 0x34
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <HAL_RNG_MspInit+0x40>)
 8001dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	50060800 	.word	0x50060800
 8001de4:	40023800 	.word	0x40023800

08001de8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08c      	sub	sp, #48	; 0x30
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 031c 	add.w	r3, r7, #28
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a41      	ldr	r2, [pc, #260]	; (8001f0c <HAL_SPI_MspInit+0x124>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d12c      	bne.n	8001e64 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
 8001e0e:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <HAL_SPI_MspInit+0x128>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	4a3f      	ldr	r2, [pc, #252]	; (8001f10 <HAL_SPI_MspInit+0x128>)
 8001e14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e18:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <HAL_SPI_MspInit+0x128>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e22:	61bb      	str	r3, [r7, #24]
 8001e24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	4b39      	ldr	r3, [pc, #228]	; (8001f10 <HAL_SPI_MspInit+0x128>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a38      	ldr	r2, [pc, #224]	; (8001f10 <HAL_SPI_MspInit+0x128>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HAL_SPI_MspInit+0x128>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001e42:	23e0      	movs	r3, #224	; 0xe0
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e52:	2305      	movs	r3, #5
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	482d      	ldr	r0, [pc, #180]	; (8001f14 <HAL_SPI_MspInit+0x12c>)
 8001e5e:	f001 fdeb 	bl	8003a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e62:	e04f      	b.n	8001f04 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a2b      	ldr	r2, [pc, #172]	; (8001f18 <HAL_SPI_MspInit+0x130>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d14a      	bne.n	8001f04 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HAL_SPI_MspInit+0x128>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <HAL_SPI_MspInit+0x128>)
 8001e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <HAL_SPI_MspInit+0x128>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_SPI_MspInit+0x128>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <HAL_SPI_MspInit+0x128>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_SPI_MspInit+0x128>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_SPI_MspInit+0x128>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <HAL_SPI_MspInit+0x128>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <HAL_SPI_MspInit+0x128>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ed2:	2305      	movs	r3, #5
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	480f      	ldr	r0, [pc, #60]	; (8001f1c <HAL_SPI_MspInit+0x134>)
 8001ede:	f001 fdab 	bl	8003a38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001ee2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ef4:	2305      	movs	r3, #5
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	4619      	mov	r1, r3
 8001efe:	4808      	ldr	r0, [pc, #32]	; (8001f20 <HAL_SPI_MspInit+0x138>)
 8001f00:	f001 fd9a 	bl	8003a38 <HAL_GPIO_Init>
}
 8001f04:	bf00      	nop
 8001f06:	3730      	adds	r7, #48	; 0x30
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40013000 	.word	0x40013000
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40003800 	.word	0x40003800
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020400 	.word	0x40020400

08001f24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d12c      	bne.n	8001fa0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_TIM_Encoder_MspInit+0x88>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a17      	ldr	r2, [pc, #92]	; (8001fac <HAL_TIM_Encoder_MspInit+0x88>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_TIM_Encoder_MspInit+0x88>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_TIM_Encoder_MspInit+0x88>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a10      	ldr	r2, [pc, #64]	; (8001fac <HAL_TIM_Encoder_MspInit+0x88>)
 8001f6c:	f043 0310 	orr.w	r3, r3, #16
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <HAL_TIM_Encoder_MspInit+0x88>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001f7e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f90:	2301      	movs	r3, #1
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001f9c:	f001 fd4c 	bl	8003a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fa0:	bf00      	nop
 8001fa2:	3728      	adds	r7, #40	; 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <HAL_TIM_Base_MspInit+0x70>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a15      	ldr	r2, [pc, #84]	; (8002024 <HAL_TIM_Base_MspInit+0x70>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b13      	ldr	r3, [pc, #76]	; (8002024 <HAL_TIM_Base_MspInit+0x70>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fe2:	e01a      	b.n	800201a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0f      	ldr	r2, [pc, #60]	; (8002028 <HAL_TIM_Base_MspInit+0x74>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d115      	bne.n	800201a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <HAL_TIM_Base_MspInit+0x70>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <HAL_TIM_Base_MspInit+0x70>)
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_TIM_Base_MspInit+0x70>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	201d      	movs	r0, #29
 8002010:	f001 fcdb 	bl	80039ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002014:	201d      	movs	r0, #29
 8002016:	f001 fcf4 	bl	8003a02 <HAL_NVIC_EnableIRQ>
}
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	40000400 	.word	0x40000400

0800202c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <NMI_Handler+0x4>

08002032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <HardFault_Handler+0x4>

08002038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <MemManage_Handler+0x4>

0800203e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <BusFault_Handler+0x4>

08002044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <UsageFault_Handler+0x4>

0800204a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002078:	f001 fb88 	bl	800378c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}

08002080 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 8002094:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002098:	481b      	ldr	r0, [pc, #108]	; (8002108 <TIM2_IRQHandler+0x78>)
 800209a:	f001 fe9a 	bl	8003dd2 <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <TIM2_IRQHandler+0x7c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d111      	bne.n	80020ca <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <TIM2_IRQHandler+0x80>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2bc8      	cmp	r3, #200	; 0xc8
 80020ac:	dc0a      	bgt.n	80020c4 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <TIM2_IRQHandler+0x80>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <TIM2_IRQHandler+0x84>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 80020b8:	4b15      	ldr	r3, [pc, #84]	; (8002110 <TIM2_IRQHandler+0x80>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	3301      	adds	r3, #1
 80020be:	4a14      	ldr	r2, [pc, #80]	; (8002110 <TIM2_IRQHandler+0x80>)
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e002      	b.n	80020ca <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <TIM2_IRQHandler+0x7c>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <TIM2_IRQHandler+0x7c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d114      	bne.n	80020fc <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <TIM2_IRQHandler+0x80>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b63      	cmp	r3, #99	; 0x63
 80020d8:	dd0a      	ble.n	80020f0 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <TIM2_IRQHandler+0x80>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <TIM2_IRQHandler+0x84>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 80020e4:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <TIM2_IRQHandler+0x80>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	4a09      	ldr	r2, [pc, #36]	; (8002110 <TIM2_IRQHandler+0x80>)
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	e005      	b.n	80020fc <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <TIM2_IRQHandler+0x7c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
		  i = 100;
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <TIM2_IRQHandler+0x80>)
 80020f8:	2264      	movs	r2, #100	; 0x64
 80020fa:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020fc:	4805      	ldr	r0, [pc, #20]	; (8002114 <TIM2_IRQHandler+0x84>)
 80020fe:	f006 fd52 	bl	8008ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40020c00 	.word	0x40020c00
 800210c:	2000014c 	.word	0x2000014c
 8002110:	20000000 	.word	0x20000000
 8002114:	200003d8 	.word	0x200003d8

08002118 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800211c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002120:	4804      	ldr	r0, [pc, #16]	; (8002134 <TIM3_IRQHandler+0x1c>)
 8002122:	f001 fe56 	bl	8003dd2 <HAL_GPIO_TogglePin>
  read_digits();
 8002126:	f7fe fe37 	bl	8000d98 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800212a:	4803      	ldr	r0, [pc, #12]	; (8002138 <TIM3_IRQHandler+0x20>)
 800212c:	f006 fd3b 	bl	8008ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40020c00 	.word	0x40020c00
 8002138:	200002e0 	.word	0x200002e0

0800213c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <OTG_FS_IRQHandler+0x10>)
 8002142:	f002 f8cb 	bl	80042dc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000a48 	.word	0x20000a48

08002150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <_sbrk+0x5c>)
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <_sbrk+0x60>)
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <_sbrk+0x64>)
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <_sbrk+0x68>)
 8002170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	429a      	cmp	r2, r3
 800217e:	d207      	bcs.n	8002190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002180:	f00a fcd6 	bl	800cb30 <__errno>
 8002184:	4603      	mov	r3, r0
 8002186:	220c      	movs	r2, #12
 8002188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800218e:	e009      	b.n	80021a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	4a05      	ldr	r2, [pc, #20]	; (80021b4 <_sbrk+0x64>)
 80021a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20020000 	.word	0x20020000
 80021b0:	00000400 	.word	0x00000400
 80021b4:	20000150 	.word	0x20000150
 80021b8:	20000d60 	.word	0x20000d60

080021bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <SystemInit+0x20>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <SystemInit+0x20>)
 80021c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b08b      	sub	sp, #44	; 0x2c
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4604      	mov	r4, r0
 80021e8:	4608      	mov	r0, r1
 80021ea:	4611      	mov	r1, r2
 80021ec:	461a      	mov	r2, r3
 80021ee:	4623      	mov	r3, r4
 80021f0:	80fb      	strh	r3, [r7, #6]
 80021f2:	4603      	mov	r3, r0
 80021f4:	80bb      	strh	r3, [r7, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	807b      	strh	r3, [r7, #2]
 80021fa:	4613      	mov	r3, r2
 80021fc:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80021fe:	887b      	ldrh	r3, [r7, #2]
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8002206:	887b      	ldrh	r3, [r7, #2]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	f1c3 0301 	rsb	r3, r3, #1
 800220e:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8002218:	e061      	b.n	80022de <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 800221a:	88fa      	ldrh	r2, [r7, #6]
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	e018      	b.n	8002256 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	b298      	uxth	r0, r3
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	b29a      	uxth	r2, r3
 800222c:	88bb      	ldrh	r3, [r7, #4]
 800222e:	4413      	add	r3, r2
 8002230:	b29b      	uxth	r3, r3
 8002232:	883a      	ldrh	r2, [r7, #0]
 8002234:	4619      	mov	r1, r3
 8002236:	f000 fb47 	bl	80028c8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	b298      	uxth	r0, r3
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	b29b      	uxth	r3, r3
 8002242:	88ba      	ldrh	r2, [r7, #4]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	b29b      	uxth	r3, r3
 8002248:	883a      	ldrh	r2, [r7, #0]
 800224a:	4619      	mov	r1, r3
 800224c:	f000 fb3c 	bl	80028c8 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	3301      	adds	r3, #1
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	88fa      	ldrh	r2, [r7, #6]
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	4413      	add	r3, r2
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	429a      	cmp	r2, r3
 8002260:	dde0      	ble.n	8002224 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	e018      	b.n	800229e <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	b298      	uxth	r0, r3
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	b29a      	uxth	r2, r3
 8002274:	88bb      	ldrh	r3, [r7, #4]
 8002276:	4413      	add	r3, r2
 8002278:	b29b      	uxth	r3, r3
 800227a:	883a      	ldrh	r2, [r7, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	f000 fb23 	bl	80028c8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	b298      	uxth	r0, r3
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	b29b      	uxth	r3, r3
 800228a:	88ba      	ldrh	r2, [r7, #4]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	b29b      	uxth	r3, r3
 8002290:	883a      	ldrh	r2, [r7, #0]
 8002292:	4619      	mov	r1, r3
 8002294:	f000 fb18 	bl	80028c8 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3301      	adds	r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	88fa      	ldrh	r2, [r7, #6]
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	4413      	add	r3, r2
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	dde0      	ble.n	800226c <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	3301      	adds	r3, #1
 80022ae:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	4413      	add	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	3302      	adds	r3, #2
 80022bc:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	005a      	lsls	r2, r3, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	4413      	add	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	dd09      	ble.n	80022de <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	3b01      	subs	r3, #1
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	4413      	add	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3302      	adds	r3, #2
 80022dc:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80022de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	da99      	bge.n	800221a <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	372c      	adds	r7, #44	; 0x2c
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd90      	pop	{r4, r7, pc}

080022f0 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80022f4:	2200      	movs	r2, #0
 80022f6:	2110      	movs	r1, #16
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <ILI9341_SPI_Init+0x14>)
 80022fa:	f001 fd51 	bl	8003da0 <HAL_GPIO_WritePin>
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000

08002308 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002312:	1df9      	adds	r1, r7, #7
 8002314:	2301      	movs	r3, #1
 8002316:	2201      	movs	r2, #1
 8002318:	4803      	ldr	r0, [pc, #12]	; (8002328 <ILI9341_SPI_Send+0x20>)
 800231a:	f005 ff70 	bl	80081fe <HAL_SPI_Transmit>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200001dc 	.word	0x200001dc

0800232c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	2110      	movs	r1, #16
 800233a:	480a      	ldr	r0, [pc, #40]	; (8002364 <ILI9341_Write_Command+0x38>)
 800233c:	f001 fd30 	bl	8003da0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002340:	2200      	movs	r2, #0
 8002342:	2140      	movs	r1, #64	; 0x40
 8002344:	4807      	ldr	r0, [pc, #28]	; (8002364 <ILI9341_Write_Command+0x38>)
 8002346:	f001 fd2b 	bl	8003da0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ffdb 	bl	8002308 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002352:	2201      	movs	r2, #1
 8002354:	2110      	movs	r1, #16
 8002356:	4803      	ldr	r0, [pc, #12]	; (8002364 <ILI9341_Write_Command+0x38>)
 8002358:	f001 fd22 	bl	8003da0 <HAL_GPIO_WritePin>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000

08002368 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002372:	2201      	movs	r2, #1
 8002374:	2140      	movs	r1, #64	; 0x40
 8002376:	480a      	ldr	r0, [pc, #40]	; (80023a0 <ILI9341_Write_Data+0x38>)
 8002378:	f001 fd12 	bl	8003da0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800237c:	2200      	movs	r2, #0
 800237e:	2110      	movs	r1, #16
 8002380:	4807      	ldr	r0, [pc, #28]	; (80023a0 <ILI9341_Write_Data+0x38>)
 8002382:	f001 fd0d 	bl	8003da0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ffbd 	bl	8002308 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800238e:	2201      	movs	r2, #1
 8002390:	2110      	movs	r1, #16
 8002392:	4803      	ldr	r0, [pc, #12]	; (80023a0 <ILI9341_Write_Data+0x38>)
 8002394:	f001 fd04 	bl	8003da0 <HAL_GPIO_WritePin>
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000

080023a4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4604      	mov	r4, r0
 80023ac:	4608      	mov	r0, r1
 80023ae:	4611      	mov	r1, r2
 80023b0:	461a      	mov	r2, r3
 80023b2:	4623      	mov	r3, r4
 80023b4:	80fb      	strh	r3, [r7, #6]
 80023b6:	4603      	mov	r3, r0
 80023b8:	80bb      	strh	r3, [r7, #4]
 80023ba:	460b      	mov	r3, r1
 80023bc:	807b      	strh	r3, [r7, #2]
 80023be:	4613      	mov	r3, r2
 80023c0:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80023c2:	202a      	movs	r0, #42	; 0x2a
 80023c4:	f7ff ffb2 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ffc9 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ffc4 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80023e0:	887b      	ldrh	r3, [r7, #2]
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ffbd 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80023ee:	887b      	ldrh	r3, [r7, #2]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ffb8 	bl	8002368 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80023f8:	202b      	movs	r0, #43	; 0x2b
 80023fa:	f7ff ff97 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80023fe:	88bb      	ldrh	r3, [r7, #4]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	b29b      	uxth	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ffae 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 800240c:	88bb      	ldrh	r3, [r7, #4]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ffa9 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8002416:	883b      	ldrh	r3, [r7, #0]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	b29b      	uxth	r3, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ffa2 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002424:	883b      	ldrh	r3, [r7, #0]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff9d 	bl	8002368 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800242e:	202c      	movs	r0, #44	; 0x2c
 8002430:	f7ff ff7c 	bl	800232c <ILI9341_Write_Command>
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bd90      	pop	{r4, r7, pc}

0800243c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8002440:	2200      	movs	r2, #0
 8002442:	2120      	movs	r1, #32
 8002444:	480a      	ldr	r0, [pc, #40]	; (8002470 <ILI9341_Reset+0x34>)
 8002446:	f001 fcab 	bl	8003da0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800244a:	20c8      	movs	r0, #200	; 0xc8
 800244c:	f001 f9be 	bl	80037cc <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002450:	2200      	movs	r2, #0
 8002452:	2110      	movs	r1, #16
 8002454:	4806      	ldr	r0, [pc, #24]	; (8002470 <ILI9341_Reset+0x34>)
 8002456:	f001 fca3 	bl	8003da0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800245a:	20c8      	movs	r0, #200	; 0xc8
 800245c:	f001 f9b6 	bl	80037cc <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002460:	2201      	movs	r2, #1
 8002462:	2120      	movs	r1, #32
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <ILI9341_Reset+0x34>)
 8002466:	f001 fc9b 	bl	8003da0 <HAL_GPIO_WritePin>
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000

08002474 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8002482:	2036      	movs	r0, #54	; 0x36
 8002484:	f7ff ff52 	bl	800232c <ILI9341_Write_Command>
HAL_Delay(1);
 8002488:	2001      	movs	r0, #1
 800248a:	f001 f99f 	bl	80037cc <HAL_Delay>
	
switch(screen_rotation) 
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d837      	bhi.n	8002504 <ILI9341_Set_Rotation+0x90>
 8002494:	a201      	add	r2, pc, #4	; (adr r2, 800249c <ILI9341_Set_Rotation+0x28>)
 8002496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249a:	bf00      	nop
 800249c:	080024ad 	.word	0x080024ad
 80024a0:	080024c3 	.word	0x080024c3
 80024a4:	080024d9 	.word	0x080024d9
 80024a8:	080024ef 	.word	0x080024ef
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80024ac:	2048      	movs	r0, #72	; 0x48
 80024ae:	f7ff ff5b 	bl	8002368 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <ILI9341_Set_Rotation+0x9c>)
 80024b4:	22f0      	movs	r2, #240	; 0xf0
 80024b6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <ILI9341_Set_Rotation+0xa0>)
 80024ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024be:	801a      	strh	r2, [r3, #0]
			break;
 80024c0:	e021      	b.n	8002506 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80024c2:	2028      	movs	r0, #40	; 0x28
 80024c4:	f7ff ff50 	bl	8002368 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <ILI9341_Set_Rotation+0x9c>)
 80024ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024ce:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <ILI9341_Set_Rotation+0xa0>)
 80024d2:	22f0      	movs	r2, #240	; 0xf0
 80024d4:	801a      	strh	r2, [r3, #0]
			break;
 80024d6:	e016      	b.n	8002506 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80024d8:	2088      	movs	r0, #136	; 0x88
 80024da:	f7ff ff45 	bl	8002368 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <ILI9341_Set_Rotation+0x9c>)
 80024e0:	22f0      	movs	r2, #240	; 0xf0
 80024e2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <ILI9341_Set_Rotation+0xa0>)
 80024e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024ea:	801a      	strh	r2, [r3, #0]
			break;
 80024ec:	e00b      	b.n	8002506 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80024ee:	20e8      	movs	r0, #232	; 0xe8
 80024f0:	f7ff ff3a 	bl	8002368 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <ILI9341_Set_Rotation+0x9c>)
 80024f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024fa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <ILI9341_Set_Rotation+0xa0>)
 80024fe:	22f0      	movs	r2, #240	; 0xf0
 8002500:	801a      	strh	r2, [r3, #0]
			break;
 8002502:	e000      	b.n	8002506 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002504:	bf00      	nop
	}
}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	2000000a 	.word	0x2000000a
 8002514:	20000008 	.word	0x20000008

08002518 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800251c:	2201      	movs	r2, #1
 800251e:	2120      	movs	r1, #32
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <ILI9341_Enable+0x14>)
 8002522:	f001 fc3d 	bl	8003da0 <HAL_GPIO_WritePin>
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000

08002530 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002534:	f7ff fff0 	bl	8002518 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002538:	f7ff feda 	bl	80022f0 <ILI9341_SPI_Init>
ILI9341_Reset();
 800253c:	f7ff ff7e 	bl	800243c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002540:	2001      	movs	r0, #1
 8002542:	f7ff fef3 	bl	800232c <ILI9341_Write_Command>
HAL_Delay(1000);
 8002546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800254a:	f001 f93f 	bl	80037cc <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800254e:	20cb      	movs	r0, #203	; 0xcb
 8002550:	f7ff feec 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002554:	2039      	movs	r0, #57	; 0x39
 8002556:	f7ff ff07 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800255a:	202c      	movs	r0, #44	; 0x2c
 800255c:	f7ff ff04 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002560:	2000      	movs	r0, #0
 8002562:	f7ff ff01 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002566:	2034      	movs	r0, #52	; 0x34
 8002568:	f7ff fefe 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800256c:	2002      	movs	r0, #2
 800256e:	f7ff fefb 	bl	8002368 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8002572:	20cf      	movs	r0, #207	; 0xcf
 8002574:	f7ff feda 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002578:	2000      	movs	r0, #0
 800257a:	f7ff fef5 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800257e:	20c1      	movs	r0, #193	; 0xc1
 8002580:	f7ff fef2 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002584:	2030      	movs	r0, #48	; 0x30
 8002586:	f7ff feef 	bl	8002368 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800258a:	20e8      	movs	r0, #232	; 0xe8
 800258c:	f7ff fece 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002590:	2085      	movs	r0, #133	; 0x85
 8002592:	f7ff fee9 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002596:	2000      	movs	r0, #0
 8002598:	f7ff fee6 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 800259c:	2078      	movs	r0, #120	; 0x78
 800259e:	f7ff fee3 	bl	8002368 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80025a2:	20ea      	movs	r0, #234	; 0xea
 80025a4:	f7ff fec2 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7ff fedd 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f7ff feda 	bl	8002368 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80025b4:	20ed      	movs	r0, #237	; 0xed
 80025b6:	f7ff feb9 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80025ba:	2064      	movs	r0, #100	; 0x64
 80025bc:	f7ff fed4 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f7ff fed1 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80025c6:	2012      	movs	r0, #18
 80025c8:	f7ff fece 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80025cc:	2081      	movs	r0, #129	; 0x81
 80025ce:	f7ff fecb 	bl	8002368 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80025d2:	20f7      	movs	r0, #247	; 0xf7
 80025d4:	f7ff feaa 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80025d8:	2020      	movs	r0, #32
 80025da:	f7ff fec5 	bl	8002368 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80025de:	20c0      	movs	r0, #192	; 0xc0
 80025e0:	f7ff fea4 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80025e4:	2023      	movs	r0, #35	; 0x23
 80025e6:	f7ff febf 	bl	8002368 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80025ea:	20c1      	movs	r0, #193	; 0xc1
 80025ec:	f7ff fe9e 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80025f0:	2010      	movs	r0, #16
 80025f2:	f7ff feb9 	bl	8002368 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80025f6:	20c5      	movs	r0, #197	; 0xc5
 80025f8:	f7ff fe98 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80025fc:	203e      	movs	r0, #62	; 0x3e
 80025fe:	f7ff feb3 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002602:	2028      	movs	r0, #40	; 0x28
 8002604:	f7ff feb0 	bl	8002368 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002608:	20c7      	movs	r0, #199	; 0xc7
 800260a:	f7ff fe8f 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800260e:	2086      	movs	r0, #134	; 0x86
 8002610:	f7ff feaa 	bl	8002368 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002614:	2036      	movs	r0, #54	; 0x36
 8002616:	f7ff fe89 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800261a:	2048      	movs	r0, #72	; 0x48
 800261c:	f7ff fea4 	bl	8002368 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002620:	203a      	movs	r0, #58	; 0x3a
 8002622:	f7ff fe83 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002626:	2055      	movs	r0, #85	; 0x55
 8002628:	f7ff fe9e 	bl	8002368 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800262c:	20b1      	movs	r0, #177	; 0xb1
 800262e:	f7ff fe7d 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002632:	2000      	movs	r0, #0
 8002634:	f7ff fe98 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002638:	2018      	movs	r0, #24
 800263a:	f7ff fe95 	bl	8002368 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800263e:	20b6      	movs	r0, #182	; 0xb6
 8002640:	f7ff fe74 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002644:	2008      	movs	r0, #8
 8002646:	f7ff fe8f 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800264a:	2082      	movs	r0, #130	; 0x82
 800264c:	f7ff fe8c 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002650:	2027      	movs	r0, #39	; 0x27
 8002652:	f7ff fe89 	bl	8002368 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002656:	20f2      	movs	r0, #242	; 0xf2
 8002658:	f7ff fe68 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800265c:	2000      	movs	r0, #0
 800265e:	f7ff fe83 	bl	8002368 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002662:	2026      	movs	r0, #38	; 0x26
 8002664:	f7ff fe62 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002668:	2001      	movs	r0, #1
 800266a:	f7ff fe7d 	bl	8002368 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800266e:	20e0      	movs	r0, #224	; 0xe0
 8002670:	f7ff fe5c 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002674:	200f      	movs	r0, #15
 8002676:	f7ff fe77 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800267a:	2031      	movs	r0, #49	; 0x31
 800267c:	f7ff fe74 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002680:	202b      	movs	r0, #43	; 0x2b
 8002682:	f7ff fe71 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002686:	200c      	movs	r0, #12
 8002688:	f7ff fe6e 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800268c:	200e      	movs	r0, #14
 800268e:	f7ff fe6b 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002692:	2008      	movs	r0, #8
 8002694:	f7ff fe68 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002698:	204e      	movs	r0, #78	; 0x4e
 800269a:	f7ff fe65 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 800269e:	20f1      	movs	r0, #241	; 0xf1
 80026a0:	f7ff fe62 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80026a4:	2037      	movs	r0, #55	; 0x37
 80026a6:	f7ff fe5f 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80026aa:	2007      	movs	r0, #7
 80026ac:	f7ff fe5c 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80026b0:	2010      	movs	r0, #16
 80026b2:	f7ff fe59 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80026b6:	2003      	movs	r0, #3
 80026b8:	f7ff fe56 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80026bc:	200e      	movs	r0, #14
 80026be:	f7ff fe53 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80026c2:	2009      	movs	r0, #9
 80026c4:	f7ff fe50 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7ff fe4d 	bl	8002368 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80026ce:	20e1      	movs	r0, #225	; 0xe1
 80026d0:	f7ff fe2c 	bl	800232c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7ff fe47 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80026da:	200e      	movs	r0, #14
 80026dc:	f7ff fe44 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80026e0:	2014      	movs	r0, #20
 80026e2:	f7ff fe41 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80026e6:	2003      	movs	r0, #3
 80026e8:	f7ff fe3e 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80026ec:	2011      	movs	r0, #17
 80026ee:	f7ff fe3b 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80026f2:	2007      	movs	r0, #7
 80026f4:	f7ff fe38 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80026f8:	2031      	movs	r0, #49	; 0x31
 80026fa:	f7ff fe35 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80026fe:	20c1      	movs	r0, #193	; 0xc1
 8002700:	f7ff fe32 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002704:	2048      	movs	r0, #72	; 0x48
 8002706:	f7ff fe2f 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800270a:	2008      	movs	r0, #8
 800270c:	f7ff fe2c 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002710:	200f      	movs	r0, #15
 8002712:	f7ff fe29 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002716:	200c      	movs	r0, #12
 8002718:	f7ff fe26 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800271c:	2031      	movs	r0, #49	; 0x31
 800271e:	f7ff fe23 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002722:	2036      	movs	r0, #54	; 0x36
 8002724:	f7ff fe20 	bl	8002368 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002728:	200f      	movs	r0, #15
 800272a:	f7ff fe1d 	bl	8002368 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800272e:	2011      	movs	r0, #17
 8002730:	f7ff fdfc 	bl	800232c <ILI9341_Write_Command>
HAL_Delay(120);
 8002734:	2078      	movs	r0, #120	; 0x78
 8002736:	f001 f849 	bl	80037cc <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800273a:	2029      	movs	r0, #41	; 0x29
 800273c:	f7ff fdf6 	bl	800232c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8002740:	2003      	movs	r0, #3
 8002742:	f7ff fe97 	bl	8002474 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8002746:	200a      	movs	r0, #10
 8002748:	f001 f840 	bl	80037cc <HAL_Delay>
//
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}

08002750 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002750:	b5b0      	push	{r4, r5, r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	80fb      	strh	r3, [r7, #6]
 800275c:	466b      	mov	r3, sp
 800275e:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800276c:	d202      	bcs.n	8002774 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
 8002772:	e002      	b.n	800277a <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002774:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800277a:	2201      	movs	r2, #1
 800277c:	2140      	movs	r1, #64	; 0x40
 800277e:	483d      	ldr	r0, [pc, #244]	; (8002874 <ILI9341_Draw_Colour_Burst+0x124>)
 8002780:	f001 fb0e 	bl	8003da0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002784:	2200      	movs	r2, #0
 8002786:	2110      	movs	r1, #16
 8002788:	483a      	ldr	r0, [pc, #232]	; (8002874 <ILI9341_Draw_Colour_Burst+0x124>)
 800278a:	f001 fb09 	bl	8003da0 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	0a1b      	lsrs	r3, r3, #8
 8002792:	b29b      	uxth	r3, r3
 8002794:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002798:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800279a:	4623      	mov	r3, r4
 800279c:	3b01      	subs	r3, #1
 800279e:	61fb      	str	r3, [r7, #28]
 80027a0:	4620      	mov	r0, r4
 80027a2:	f04f 0100 	mov.w	r1, #0
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	00cb      	lsls	r3, r1, #3
 80027b0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80027b4:	00c2      	lsls	r2, r0, #3
 80027b6:	4620      	mov	r0, r4
 80027b8:	f04f 0100 	mov.w	r1, #0
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	00cb      	lsls	r3, r1, #3
 80027c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80027ca:	00c2      	lsls	r2, r0, #3
 80027cc:	1de3      	adds	r3, r4, #7
 80027ce:	08db      	lsrs	r3, r3, #3
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	ebad 0d03 	sub.w	sp, sp, r3
 80027d6:	466b      	mov	r3, sp
 80027d8:	3300      	adds	r3, #0
 80027da:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80027dc:	2300      	movs	r3, #0
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e0:	e00e      	b.n	8002800 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	4413      	add	r3, r2
 80027e8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80027ec:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f0:	3301      	adds	r3, #1
 80027f2:	88fa      	ldrh	r2, [r7, #6]
 80027f4:	b2d1      	uxtb	r1, r2
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	3302      	adds	r3, #2
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	429a      	cmp	r2, r3
 8002806:	d3ec      	bcc.n	80027e2 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	fbb2 f3f3 	udiv	r3, r2, r3
 8002816:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002822:	fb01 f202 	mul.w	r2, r1, r2
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d010      	beq.n	8002852 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002834:	e009      	b.n	800284a <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002836:	69b9      	ldr	r1, [r7, #24]
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	b29a      	uxth	r2, r3
 800283c:	230a      	movs	r3, #10
 800283e:	480e      	ldr	r0, [pc, #56]	; (8002878 <ILI9341_Draw_Colour_Burst+0x128>)
 8002840:	f005 fcdd 	bl	80081fe <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	3301      	adds	r3, #1
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	429a      	cmp	r2, r3
 8002850:	d3f1      	bcc.n	8002836 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002852:	69b9      	ldr	r1, [r7, #24]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	b29a      	uxth	r2, r3
 8002858:	230a      	movs	r3, #10
 800285a:	4807      	ldr	r0, [pc, #28]	; (8002878 <ILI9341_Draw_Colour_Burst+0x128>)
 800285c:	f005 fccf 	bl	80081fe <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002860:	2201      	movs	r2, #1
 8002862:	2110      	movs	r1, #16
 8002864:	4803      	ldr	r0, [pc, #12]	; (8002874 <ILI9341_Draw_Colour_Burst+0x124>)
 8002866:	f001 fa9b 	bl	8003da0 <HAL_GPIO_WritePin>
 800286a:	46ad      	mov	sp, r5
}
 800286c:	bf00      	nop
 800286e:	3730      	adds	r7, #48	; 0x30
 8002870:	46bd      	mov	sp, r7
 8002872:	bdb0      	pop	{r4, r5, r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	200001dc 	.word	0x200001dc

0800287c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <ILI9341_Fill_Screen+0x44>)
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29a      	uxth	r2, r3
 800288c:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <ILI9341_Fill_Screen+0x48>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	b29b      	uxth	r3, r3
 8002892:	2100      	movs	r1, #0
 8002894:	2000      	movs	r0, #0
 8002896:	f7ff fd85 	bl	80023a4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <ILI9341_Fill_Screen+0x44>)
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <ILI9341_Fill_Screen+0x48>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	fb03 f302 	mul.w	r3, r3, r2
 80028ac:	461a      	mov	r2, r3
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff4c 	bl	8002750 <ILI9341_Draw_Colour_Burst>
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	2000000a 	.word	0x2000000a
 80028c4:	20000008 	.word	0x20000008

080028c8 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	80fb      	strh	r3, [r7, #6]
 80028d2:	460b      	mov	r3, r1
 80028d4:	80bb      	strh	r3, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80028da:	4b5b      	ldr	r3, [pc, #364]	; (8002a48 <ILI9341_Draw_Pixel+0x180>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	88fa      	ldrh	r2, [r7, #6]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	f080 80ac 	bcs.w	8002a40 <ILI9341_Draw_Pixel+0x178>
 80028e8:	4b58      	ldr	r3, [pc, #352]	; (8002a4c <ILI9341_Draw_Pixel+0x184>)
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	88ba      	ldrh	r2, [r7, #4]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	f080 80a5 	bcs.w	8002a40 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80028f6:	2200      	movs	r2, #0
 80028f8:	2140      	movs	r1, #64	; 0x40
 80028fa:	4855      	ldr	r0, [pc, #340]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 80028fc:	f001 fa50 	bl	8003da0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002900:	2200      	movs	r2, #0
 8002902:	2110      	movs	r1, #16
 8002904:	4852      	ldr	r0, [pc, #328]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 8002906:	f001 fa4b 	bl	8003da0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800290a:	202a      	movs	r0, #42	; 0x2a
 800290c:	f7ff fcfc 	bl	8002308 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002910:	2201      	movs	r2, #1
 8002912:	2140      	movs	r1, #64	; 0x40
 8002914:	484e      	ldr	r0, [pc, #312]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 8002916:	f001 fa43 	bl	8003da0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800291a:	2201      	movs	r2, #1
 800291c:	2110      	movs	r1, #16
 800291e:	484c      	ldr	r0, [pc, #304]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 8002920:	f001 fa3e 	bl	8003da0 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002924:	2200      	movs	r2, #0
 8002926:	2110      	movs	r1, #16
 8002928:	4849      	ldr	r0, [pc, #292]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 800292a:	f001 fa39 	bl	8003da0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	b29b      	uxth	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	753b      	strb	r3, [r7, #20]
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	757b      	strb	r3, [r7, #21]
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	3301      	adds	r3, #1
 8002942:	121b      	asrs	r3, r3, #8
 8002944:	b2db      	uxtb	r3, r3
 8002946:	75bb      	strb	r3, [r7, #22]
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3301      	adds	r3, #1
 800294e:	b2db      	uxtb	r3, r3
 8002950:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002952:	f107 0114 	add.w	r1, r7, #20
 8002956:	2301      	movs	r3, #1
 8002958:	2204      	movs	r2, #4
 800295a:	483e      	ldr	r0, [pc, #248]	; (8002a54 <ILI9341_Draw_Pixel+0x18c>)
 800295c:	f005 fc4f 	bl	80081fe <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002960:	2201      	movs	r2, #1
 8002962:	2110      	movs	r1, #16
 8002964:	483a      	ldr	r0, [pc, #232]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 8002966:	f001 fa1b 	bl	8003da0 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800296a:	2200      	movs	r2, #0
 800296c:	2140      	movs	r1, #64	; 0x40
 800296e:	4838      	ldr	r0, [pc, #224]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 8002970:	f001 fa16 	bl	8003da0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002974:	2200      	movs	r2, #0
 8002976:	2110      	movs	r1, #16
 8002978:	4835      	ldr	r0, [pc, #212]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 800297a:	f001 fa11 	bl	8003da0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800297e:	202b      	movs	r0, #43	; 0x2b
 8002980:	f7ff fcc2 	bl	8002308 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002984:	2201      	movs	r2, #1
 8002986:	2140      	movs	r1, #64	; 0x40
 8002988:	4831      	ldr	r0, [pc, #196]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 800298a:	f001 fa09 	bl	8003da0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800298e:	2201      	movs	r2, #1
 8002990:	2110      	movs	r1, #16
 8002992:	482f      	ldr	r0, [pc, #188]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 8002994:	f001 fa04 	bl	8003da0 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002998:	2200      	movs	r2, #0
 800299a:	2110      	movs	r1, #16
 800299c:	482c      	ldr	r0, [pc, #176]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 800299e:	f001 f9ff 	bl	8003da0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80029a2:	88bb      	ldrh	r3, [r7, #4]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	743b      	strb	r3, [r7, #16]
 80029ac:	88bb      	ldrh	r3, [r7, #4]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	747b      	strb	r3, [r7, #17]
 80029b2:	88bb      	ldrh	r3, [r7, #4]
 80029b4:	3301      	adds	r3, #1
 80029b6:	121b      	asrs	r3, r3, #8
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	74bb      	strb	r3, [r7, #18]
 80029bc:	88bb      	ldrh	r3, [r7, #4]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	3301      	adds	r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80029c6:	f107 0110 	add.w	r1, r7, #16
 80029ca:	2301      	movs	r3, #1
 80029cc:	2204      	movs	r2, #4
 80029ce:	4821      	ldr	r0, [pc, #132]	; (8002a54 <ILI9341_Draw_Pixel+0x18c>)
 80029d0:	f005 fc15 	bl	80081fe <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80029d4:	2201      	movs	r2, #1
 80029d6:	2110      	movs	r1, #16
 80029d8:	481d      	ldr	r0, [pc, #116]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 80029da:	f001 f9e1 	bl	8003da0 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80029de:	2200      	movs	r2, #0
 80029e0:	2140      	movs	r1, #64	; 0x40
 80029e2:	481b      	ldr	r0, [pc, #108]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 80029e4:	f001 f9dc 	bl	8003da0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80029e8:	2200      	movs	r2, #0
 80029ea:	2110      	movs	r1, #16
 80029ec:	4818      	ldr	r0, [pc, #96]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 80029ee:	f001 f9d7 	bl	8003da0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80029f2:	202c      	movs	r0, #44	; 0x2c
 80029f4:	f7ff fc88 	bl	8002308 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80029f8:	2201      	movs	r2, #1
 80029fa:	2140      	movs	r1, #64	; 0x40
 80029fc:	4814      	ldr	r0, [pc, #80]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 80029fe:	f001 f9cf 	bl	8003da0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002a02:	2201      	movs	r2, #1
 8002a04:	2110      	movs	r1, #16
 8002a06:	4812      	ldr	r0, [pc, #72]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 8002a08:	f001 f9ca 	bl	8003da0 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2110      	movs	r1, #16
 8002a10:	480f      	ldr	r0, [pc, #60]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 8002a12:	f001 f9c5 	bl	8003da0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002a16:	887b      	ldrh	r3, [r7, #2]
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	733b      	strb	r3, [r7, #12]
 8002a20:	887b      	ldrh	r3, [r7, #2]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002a26:	f107 010c 	add.w	r1, r7, #12
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	4809      	ldr	r0, [pc, #36]	; (8002a54 <ILI9341_Draw_Pixel+0x18c>)
 8002a30:	f005 fbe5 	bl	80081fe <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002a34:	2201      	movs	r2, #1
 8002a36:	2110      	movs	r1, #16
 8002a38:	4805      	ldr	r0, [pc, #20]	; (8002a50 <ILI9341_Draw_Pixel+0x188>)
 8002a3a:	f001 f9b1 	bl	8003da0 <HAL_GPIO_WritePin>
 8002a3e:	e000      	b.n	8002a42 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002a40:	bf00      	nop
	
}
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	2000000a 	.word	0x2000000a
 8002a4c:	20000008 	.word	0x20000008
 8002a50:	40021000 	.word	0x40021000
 8002a54:	200001dc 	.word	0x200001dc

08002a58 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	int i =0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8002a64:	e036      	b.n	8002ad4 <speed_test_LCD+0x7c>
	{
		i ++;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002a80:	4819      	ldr	r0, [pc, #100]	; (8002ae8 <speed_test_LCD+0x90>)
 8002a82:	f005 fb1e 	bl	80080c2 <HAL_RNG_GetRandomNumber>
 8002a86:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002a8c:	4816      	ldr	r0, [pc, #88]	; (8002ae8 <speed_test_LCD+0x90>)
 8002a8e:	f005 fb18 	bl	80080c2 <HAL_RNG_GetRandomNumber>
 8002a92:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002a98:	4813      	ldr	r0, [pc, #76]	; (8002ae8 <speed_test_LCD+0x90>)
 8002a9a:	f005 fb12 	bl	80080c2 <HAL_RNG_GetRandomNumber>
 8002a9e:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002aa4:	4810      	ldr	r0, [pc, #64]	; (8002ae8 <speed_test_LCD+0x90>)
 8002aa6:	f005 fb0c 	bl	80080c2 <HAL_RNG_GetRandomNumber>
 8002aaa:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8002ab0:	89fb      	ldrh	r3, [r7, #14]
 8002ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab6:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8002ab8:	89bb      	ldrh	r3, [r7, #12]
 8002aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002abe:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8002ac0:	897b      	ldrh	r3, [r7, #10]
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8002ac8:	893b      	ldrh	r3, [r7, #8]
 8002aca:	897a      	ldrh	r2, [r7, #10]
 8002acc:	89b9      	ldrh	r1, [r7, #12]
 8002ace:	89f8      	ldrh	r0, [r7, #14]
 8002ad0:	f7ff fb86 	bl	80021e0 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	ddc4      	ble.n	8002a66 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000370 	.word	0x20000370

08002aec <draw_pixel>:

uint8_t gddram[4][128];


void draw_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
 8002af6:	460b      	mov	r3, r1
 8002af8:	71bb      	strb	r3, [r7, #6]
 8002afa:	4613      	mov	r3, r2
 8002afc:	717b      	strb	r3, [r7, #5]
	if(x<128 && y<32)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	db3b      	blt.n	8002b7e <draw_pixel+0x92>
 8002b06:	79bb      	ldrb	r3, [r7, #6]
 8002b08:	2b1f      	cmp	r3, #31
 8002b0a:	d838      	bhi.n	8002b7e <draw_pixel+0x92>
	{
		uint8_t pixel = 0x01;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
		uint8_t line = y>>3;
 8002b10:	79bb      	ldrb	r3, [r7, #6]
 8002b12:	08db      	lsrs	r3, r3, #3
 8002b14:	73bb      	strb	r3, [r7, #14]
		uint8_t byte = pixel<<(y%8);
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	79bb      	ldrb	r3, [r7, #6]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	737b      	strb	r3, [r7, #13]
		if(color)
 8002b24:	797b      	ldrb	r3, [r7, #5]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d012      	beq.n	8002b50 <draw_pixel+0x64>
			gddram[line][x] |= byte;
 8002b2a:	7bba      	ldrb	r2, [r7, #14]
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	4917      	ldr	r1, [pc, #92]	; (8002b8c <draw_pixel+0xa0>)
 8002b30:	01d2      	lsls	r2, r2, #7
 8002b32:	440a      	add	r2, r1
 8002b34:	4413      	add	r3, r2
 8002b36:	7818      	ldrb	r0, [r3, #0]
 8002b38:	7bba      	ldrb	r2, [r7, #14]
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	7b79      	ldrb	r1, [r7, #13]
 8002b3e:	4301      	orrs	r1, r0
 8002b40:	b2c8      	uxtb	r0, r1
 8002b42:	4912      	ldr	r1, [pc, #72]	; (8002b8c <draw_pixel+0xa0>)
 8002b44:	01d2      	lsls	r2, r2, #7
 8002b46:	440a      	add	r2, r1
 8002b48:	4413      	add	r3, r2
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	701a      	strb	r2, [r3, #0]
		else
			gddram[line][x] &= ~byte;
	}
}
 8002b4e:	e016      	b.n	8002b7e <draw_pixel+0x92>
			gddram[line][x] &= ~byte;
 8002b50:	7bba      	ldrb	r2, [r7, #14]
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	490d      	ldr	r1, [pc, #52]	; (8002b8c <draw_pixel+0xa0>)
 8002b56:	01d2      	lsls	r2, r2, #7
 8002b58:	440a      	add	r2, r1
 8002b5a:	4413      	add	r3, r2
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b25a      	sxtb	r2, r3
 8002b60:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	b25b      	sxtb	r3, r3
 8002b68:	4013      	ands	r3, r2
 8002b6a:	b259      	sxtb	r1, r3
 8002b6c:	7bba      	ldrb	r2, [r7, #14]
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	b2c8      	uxtb	r0, r1
 8002b72:	4906      	ldr	r1, [pc, #24]	; (8002b8c <draw_pixel+0xa0>)
 8002b74:	01d2      	lsls	r2, r2, #7
 8002b76:	440a      	add	r2, r1
 8002b78:	4413      	add	r3, r2
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	701a      	strb	r2, [r3, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000468 	.word	0x20000468

08002b90 <graphics_Glyph>:


void graphics_Glyph(unsigned char left, unsigned char top,
			   unsigned char width, unsigned char height,
			   const unsigned char *glyph, unsigned char store_width)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4604      	mov	r4, r0
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4623      	mov	r3, r4
 8002ba0:	71fb      	strb	r3, [r7, #7]
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71bb      	strb	r3, [r7, #6]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	717b      	strb	r3, [r7, #5]
 8002baa:	4613      	mov	r3, r2
 8002bac:	713b      	strb	r3, [r7, #4]
	unsigned char x,b,glyph_idx, bitmask;
	int8_t y;
	const unsigned char *glyph_scan = glyph;
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	613b      	str	r3, [r7, #16]

	for (x=0; x<width; x++)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	75fb      	strb	r3, [r7, #23]
 8002bb6:	e04d      	b.n	8002c54 <graphics_Glyph+0xc4>
	{
		for (y=0; y<height; y++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	75bb      	strb	r3, [r7, #22]
 8002bbc:	e042      	b.n	8002c44 <graphics_Glyph+0xb4>
		{
			glyph_idx = (x / 8) + y*store_width;
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
 8002bc0:	08db      	lsrs	r3, r3, #3
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	7dbb      	ldrb	r3, [r7, #22]
 8002bc6:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002bca:	fb11 f303 	smulbb	r3, r1, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	73fb      	strb	r3, [r7, #15]
			b = glyph_scan[glyph_idx];
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4413      	add	r3, r2
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	73bb      	strb	r3, [r7, #14]
			bitmask = 1<<(7-(x % 8));
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	2201      	movs	r2, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	737b      	strb	r3, [r7, #13]
			if (b & bitmask)
 8002bee:	7bba      	ldrb	r2, [r7, #14]
 8002bf0:	7b7b      	ldrb	r3, [r7, #13]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00f      	beq.n	8002c1a <graphics_Glyph+0x8a>
				draw_pixel(left-width+x,top+y,1);
 8002bfa:	79fa      	ldrb	r2, [r7, #7]
 8002bfc:	797b      	ldrb	r3, [r7, #5]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	4413      	add	r3, r2
 8002c06:	b2d8      	uxtb	r0, r3
 8002c08:	7dba      	ldrb	r2, [r7, #22]
 8002c0a:	79bb      	ldrb	r3, [r7, #6]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2201      	movs	r2, #1
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7ff ff6a 	bl	8002aec <draw_pixel>
 8002c18:	e00e      	b.n	8002c38 <graphics_Glyph+0xa8>
			else
				draw_pixel(left-width+x,top+y,0);
 8002c1a:	79fa      	ldrb	r2, [r7, #7]
 8002c1c:	797b      	ldrb	r3, [r7, #5]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	4413      	add	r3, r2
 8002c26:	b2d8      	uxtb	r0, r3
 8002c28:	7dba      	ldrb	r2, [r7, #22]
 8002c2a:	79bb      	ldrb	r3, [r7, #6]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2200      	movs	r2, #0
 8002c32:	4619      	mov	r1, r3
 8002c34:	f7ff ff5a 	bl	8002aec <draw_pixel>
		for (y=0; y<height; y++)
 8002c38:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	3301      	adds	r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	75bb      	strb	r3, [r7, #22]
 8002c44:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002c48:	793b      	ldrb	r3, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	dbb7      	blt.n	8002bbe <graphics_Glyph+0x2e>
	for (x=0; x<width; x++)
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
 8002c50:	3301      	adds	r3, #1
 8002c52:	75fb      	strb	r3, [r7, #23]
 8002c54:	7dfa      	ldrb	r2, [r7, #23]
 8002c56:	797b      	ldrb	r3, [r7, #5]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d3ad      	bcc.n	8002bb8 <graphics_Glyph+0x28>
		}
	}
}
 8002c5c:	bf00      	nop
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd90      	pop	{r4, r7, pc}
	...

08002c68 <graphics_text>:

void graphics_text(unsigned char left, unsigned char top, unsigned char font, char *str)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b089      	sub	sp, #36	; 0x24
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	4603      	mov	r3, r0
 8002c72:	71fb      	strb	r3, [r7, #7]
 8002c74:	460b      	mov	r3, r1
 8002c76:	71bb      	strb	r3, [r7, #6]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	717b      	strb	r3, [r7, #5]
	unsigned char x = left;
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	75fb      	strb	r3, [r7, #23]
 	unsigned char width;
	unsigned char height;
	unsigned char store_width;
	const unsigned char *glyph_ptr;

  while(*str != 0x00)
 8002c80:	e081      	b.n	8002d86 <graphics_text+0x11e>
  {

		glyph = (unsigned char)*str;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	75bb      	strb	r3, [r7, #22]

		/* check to make sure the symbol is a legal one */
		/* if not then just replace it with the default character */
		if((glyph < fonts[font].glyph_beg) || (glyph > fonts[font].glyph_end))
 8002c88:	797a      	ldrb	r2, [r7, #5]
 8002c8a:	4944      	ldr	r1, [pc, #272]	; (8002d9c <graphics_text+0x134>)
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	3310      	adds	r3, #16
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	7dba      	ldrb	r2, [r7, #22]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d30b      	bcc.n	8002cb8 <graphics_text+0x50>
 8002ca0:	797a      	ldrb	r2, [r7, #5]
 8002ca2:	493e      	ldr	r1, [pc, #248]	; (8002d9c <graphics_text+0x134>)
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	3311      	adds	r3, #17
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	7dba      	ldrb	r2, [r7, #22]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d909      	bls.n	8002ccc <graphics_text+0x64>
		{
			glyph = fonts[font].glyph_def;
 8002cb8:	797a      	ldrb	r2, [r7, #5]
 8002cba:	4938      	ldr	r1, [pc, #224]	; (8002d9c <graphics_text+0x134>)
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3312      	adds	r3, #18
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	75bb      	strb	r3, [r7, #22]
		}


		/* make zero based index into the font data arrays */
		glyph -= fonts[font].glyph_beg;
 8002ccc:	797a      	ldrb	r2, [r7, #5]
 8002cce:	4933      	ldr	r1, [pc, #204]	; (8002d9c <graphics_text+0x134>)
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	3310      	adds	r3, #16
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	7dba      	ldrb	r2, [r7, #22]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	75bb      	strb	r3, [r7, #22]
		width = fonts[font].fixed_width;	/* check if it is a fixed width */
 8002ce4:	797a      	ldrb	r2, [r7, #5]
 8002ce6:	492d      	ldr	r1, [pc, #180]	; (8002d9c <graphics_text+0x134>)
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3308      	adds	r3, #8
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	757b      	strb	r3, [r7, #21]
		if(width == 0)
 8002cf8:	7d7b      	ldrb	r3, [r7, #21]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10c      	bne.n	8002d18 <graphics_text+0xb0>
		{
			width=fonts[font].width_table[glyph];	/* get the variable width instead */
 8002cfe:	797a      	ldrb	r2, [r7, #5]
 8002d00:	4926      	ldr	r1, [pc, #152]	; (8002d9c <graphics_text+0x134>)
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	330c      	adds	r3, #12
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	7dbb      	ldrb	r3, [r7, #22]
 8002d12:	4413      	add	r3, r2
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	757b      	strb	r3, [r7, #21]
		}

		height = fonts[font].glyph_height;
 8002d18:	797a      	ldrb	r2, [r7, #5]
 8002d1a:	4920      	ldr	r1, [pc, #128]	; (8002d9c <graphics_text+0x134>)
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	3301      	adds	r3, #1
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	753b      	strb	r3, [r7, #20]
		store_width = fonts[font].store_width;
 8002d2c:	797a      	ldrb	r2, [r7, #5]
 8002d2e:	491b      	ldr	r1, [pc, #108]	; (8002d9c <graphics_text+0x134>)
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	74fb      	strb	r3, [r7, #19]

		glyph_ptr = fonts[font].glyph_table + ((unsigned int)glyph * (unsigned int)store_width * (unsigned int)height);
 8002d3e:	797a      	ldrb	r2, [r7, #5]
 8002d40:	4916      	ldr	r1, [pc, #88]	; (8002d9c <graphics_text+0x134>)
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	7dbb      	ldrb	r3, [r7, #22]
 8002d52:	7cf9      	ldrb	r1, [r7, #19]
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	7d39      	ldrb	r1, [r7, #20]
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]


		x+=width;
 8002d62:	7dfa      	ldrb	r2, [r7, #23]
 8002d64:	7d7b      	ldrb	r3, [r7, #21]
 8002d66:	4413      	add	r3, r2
 8002d68:	75fb      	strb	r3, [r7, #23]
		graphics_Glyph(x,top,width,height,glyph_ptr,store_width);  /* plug symbol into buffer */
 8002d6a:	7d3c      	ldrb	r4, [r7, #20]
 8002d6c:	7d7a      	ldrb	r2, [r7, #21]
 8002d6e:	79b9      	ldrb	r1, [r7, #6]
 8002d70:	7df8      	ldrb	r0, [r7, #23]
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	4623      	mov	r3, r4
 8002d7c:	f7ff ff08 	bl	8002b90 <graphics_Glyph>
		str++;								/* point to next character in string */
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	3301      	adds	r3, #1
 8002d84:	603b      	str	r3, [r7, #0]
  while(*str != 0x00)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f47f af79 	bne.w	8002c82 <graphics_text+0x1a>
	}

}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd90      	pop	{r4, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	0800d444 	.word	0x0800d444

08002da0 <ssd1306_command>:
extern I2C_HandleTypeDef hi2c3;

extern uint8_t gddram[4][128];

void ssd1306_command(uint8_t byte)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
   uint8_t buffer[2];
	buffer[0] = 0x00;
 8002daa:	2300      	movs	r3, #0
 8002dac:	733b      	strb	r3, [r7, #12]
	buffer[1] = byte;
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,2,50);
 8002db2:	f107 020c 	add.w	r2, r7, #12
 8002db6:	2332      	movs	r3, #50	; 0x32
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2302      	movs	r3, #2
 8002dbc:	2178      	movs	r1, #120	; 0x78
 8002dbe:	4803      	ldr	r0, [pc, #12]	; (8002dcc <ssd1306_command+0x2c>)
 8002dc0:	f002 feca 	bl	8005b58 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1,0x78,&buffer[1],1,50);

}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000188 	.word	0x20000188

08002dd0 <oled_update>:

void oled_update(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
 8002dd6:	2021      	movs	r0, #33	; 0x21
 8002dd8:	f7ff ffe2 	bl	8002da0 <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7ff ffdf 	bl	8002da0 <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 8002de2:	207f      	movs	r0, #127	; 0x7f
 8002de4:	f7ff ffdc 	bl	8002da0 <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
 8002de8:	2022      	movs	r0, #34	; 0x22
 8002dea:	f7ff ffd9 	bl	8002da0 <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
 8002dee:	2000      	movs	r0, #0
 8002df0:	f7ff ffd6 	bl	8002da0 <ssd1306_command>
  ssd1306_command(3); // Page end address
 8002df4:	2003      	movs	r0, #3
 8002df6:	f7ff ffd3 	bl	8002da0 <ssd1306_command>



	//SEND data in 16byte packs
	uint8_t buffer[17];
	buffer[0] = 0x40;
 8002dfa:	2340      	movs	r3, #64	; 0x40
 8002dfc:	703b      	strb	r3, [r7, #0]
	for(uint16_t line=0; line<4; line++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	82fb      	strh	r3, [r7, #22]
 8002e02:	e02d      	b.n	8002e60 <oled_update+0x90>
	{
		for(uint8_t x=0;x<127;x+=16)
 8002e04:	2300      	movs	r3, #0
 8002e06:	757b      	strb	r3, [r7, #21]
 8002e08:	e024      	b.n	8002e54 <oled_update+0x84>
		{
			for(uint8_t i=1;i<17;i++)
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	753b      	strb	r3, [r7, #20]
 8002e0e:	e012      	b.n	8002e36 <oled_update+0x66>
			{
				buffer[i] = gddram[line][x+i-1];
 8002e10:	8af9      	ldrh	r1, [r7, #22]
 8002e12:	7d7a      	ldrb	r2, [r7, #21]
 8002e14:	7d3b      	ldrb	r3, [r7, #20]
 8002e16:	4413      	add	r3, r2
 8002e18:	1e5a      	subs	r2, r3, #1
 8002e1a:	7d3b      	ldrb	r3, [r7, #20]
 8002e1c:	4814      	ldr	r0, [pc, #80]	; (8002e70 <oled_update+0xa0>)
 8002e1e:	01c9      	lsls	r1, r1, #7
 8002e20:	4401      	add	r1, r0
 8002e22:	440a      	add	r2, r1
 8002e24:	7812      	ldrb	r2, [r2, #0]
 8002e26:	f107 0118 	add.w	r1, r7, #24
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(uint8_t i=1;i<17;i++)
 8002e30:	7d3b      	ldrb	r3, [r7, #20]
 8002e32:	3301      	adds	r3, #1
 8002e34:	753b      	strb	r3, [r7, #20]
 8002e36:	7d3b      	ldrb	r3, [r7, #20]
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d9e9      	bls.n	8002e10 <oled_update+0x40>
			}
			HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,17,1000);
 8002e3c:	463a      	mov	r2, r7
 8002e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2311      	movs	r3, #17
 8002e46:	2178      	movs	r1, #120	; 0x78
 8002e48:	480a      	ldr	r0, [pc, #40]	; (8002e74 <oled_update+0xa4>)
 8002e4a:	f002 fe85 	bl	8005b58 <HAL_I2C_Master_Transmit>
		for(uint8_t x=0;x<127;x+=16)
 8002e4e:	7d7b      	ldrb	r3, [r7, #21]
 8002e50:	3310      	adds	r3, #16
 8002e52:	757b      	strb	r3, [r7, #21]
 8002e54:	7d7b      	ldrb	r3, [r7, #21]
 8002e56:	2b7e      	cmp	r3, #126	; 0x7e
 8002e58:	d9d7      	bls.n	8002e0a <oled_update+0x3a>
	for(uint16_t line=0; line<4; line++)
 8002e5a:	8afb      	ldrh	r3, [r7, #22]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	82fb      	strh	r3, [r7, #22]
 8002e60:	8afb      	ldrh	r3, [r7, #22]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d9ce      	bls.n	8002e04 <oled_update+0x34>
		}
	}

}
 8002e66:	bf00      	nop
 8002e68:	bf00      	nop
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000468 	.word	0x20000468
 8002e74:	20000188 	.word	0x20000188

08002e78 <oled_init>:

void oled_init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
	// Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 8002e7e:	20ae      	movs	r0, #174	; 0xae
 8002e80:	f7ff ff8e 	bl	8002da0 <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 8002e84:	20d5      	movs	r0, #213	; 0xd5
 8002e86:	f7ff ff8b 	bl	8002da0 <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 8002e8a:	2080      	movs	r0, #128	; 0x80
 8002e8c:	f7ff ff88 	bl	8002da0 <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 8002e90:	20a8      	movs	r0, #168	; 0xa8
 8002e92:	f7ff ff85 	bl	8002da0 <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 8002e96:	201f      	movs	r0, #31
 8002e98:	f7ff ff82 	bl	8002da0 <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 8002e9c:	20d3      	movs	r0, #211	; 0xd3
 8002e9e:	f7ff ff7f 	bl	8002da0 <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7ff ff7c 	bl	8002da0 <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 8002ea8:	2040      	movs	r0, #64	; 0x40
 8002eaa:	f7ff ff79 	bl	8002da0 <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 8002eae:	208d      	movs	r0, #141	; 0x8d
 8002eb0:	f7ff ff76 	bl	8002da0 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x10); }
  else
    { ssd1306_command(0x14); }
 8002eb4:	2014      	movs	r0, #20
 8002eb6:	f7ff ff73 	bl	8002da0 <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 8002eba:	2020      	movs	r0, #32
 8002ebc:	f7ff ff70 	bl	8002da0 <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f7ff ff6d 	bl	8002da0 <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 8002ec6:	20a1      	movs	r0, #161	; 0xa1
 8002ec8:	f7ff ff6a 	bl	8002da0 <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
 8002ecc:	20c8      	movs	r0, #200	; 0xc8
 8002ece:	f7ff ff67 	bl	8002da0 <ssd1306_command>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 8002ed2:	20da      	movs	r0, #218	; 0xda
 8002ed4:	f7ff ff64 	bl	8002da0 <ssd1306_command>
  ssd1306_command(0x02);
 8002ed8:	2002      	movs	r0, #2
 8002eda:	f7ff ff61 	bl	8002da0 <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 8002ede:	2081      	movs	r0, #129	; 0x81
 8002ee0:	f7ff ff5e 	bl	8002da0 <ssd1306_command>
  ssd1306_command(0x8F);
 8002ee4:	208f      	movs	r0, #143	; 0x8f
 8002ee6:	f7ff ff5b 	bl	8002da0 <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 8002eea:	20d9      	movs	r0, #217	; 0xd9
 8002eec:	f7ff ff58 	bl	8002da0 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x22); }
  else
    { ssd1306_command(0xF1); }
 8002ef0:	20f1      	movs	r0, #241	; 0xf1
 8002ef2:	f7ff ff55 	bl	8002da0 <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 8002ef6:	20db      	movs	r0, #219	; 0xdb
 8002ef8:	f7ff ff52 	bl	8002da0 <ssd1306_command>
  ssd1306_command(0x40);
 8002efc:	2040      	movs	r0, #64	; 0x40
 8002efe:	f7ff ff4f 	bl	8002da0 <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 8002f02:	20a4      	movs	r0, #164	; 0xa4
 8002f04:	f7ff ff4c 	bl	8002da0 <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 8002f08:	20a6      	movs	r0, #166	; 0xa6
 8002f0a:	f7ff ff49 	bl	8002da0 <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 8002f0e:	202e      	movs	r0, #46	; 0x2e
 8002f10:	f7ff ff46 	bl	8002da0 <ssd1306_command>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 8002f14:	20af      	movs	r0, #175	; 0xaf
 8002f16:	f7ff ff43 	bl	8002da0 <ssd1306_command>

	//init buffer
	 for(int i = 0; i<4; i++)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	607b      	str	r3, [r7, #4]
 8002f1e:	e013      	b.n	8002f48 <oled_init+0xd0>
		for(int j = 0; j<128; j++)
 8002f20:	2300      	movs	r3, #0
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	e00a      	b.n	8002f3c <oled_init+0xc4>
			gddram[i][j] = 0x00;
 8002f26:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <oled_init+0xe0>)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	01db      	lsls	r3, r3, #7
 8002f2c:	441a      	add	r2, r3
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	4413      	add	r3, r2
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<128; j++)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8002f40:	ddf1      	ble.n	8002f26 <oled_init+0xae>
	 for(int i = 0; i<4; i++)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3301      	adds	r3, #1
 8002f46:	607b      	str	r3, [r7, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	dde8      	ble.n	8002f20 <oled_init+0xa8>
}
 8002f4e:	bf00      	nop
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000468 	.word	0x20000468

08002f5c <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af04      	add	r7, sp, #16
 8002f62:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002f64:	2364      	movs	r3, #100	; 0x64
 8002f66:	9302      	str	r3, [sp, #8]
 8002f68:	2301      	movs	r3, #1
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	f107 030f 	add.w	r3, r7, #15
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2301      	movs	r3, #1
 8002f74:	2275      	movs	r2, #117	; 0x75
 8002f76:	21d0      	movs	r1, #208	; 0xd0
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f002 ffe5 	bl	8005f48 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	2b68      	cmp	r3, #104	; 0x68
 8002f82:	d13d      	bne.n	8003000 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002f88:	2364      	movs	r3, #100	; 0x64
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	f107 030e 	add.w	r3, r7, #14
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	2301      	movs	r3, #1
 8002f98:	226b      	movs	r2, #107	; 0x6b
 8002f9a:	21d0      	movs	r1, #208	; 0xd0
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f002 fed9 	bl	8005d54 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002fa2:	2307      	movs	r3, #7
 8002fa4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002fa6:	2364      	movs	r3, #100	; 0x64
 8002fa8:	9302      	str	r3, [sp, #8]
 8002faa:	2301      	movs	r3, #1
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	f107 030e 	add.w	r3, r7, #14
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	2219      	movs	r2, #25
 8002fb8:	21d0      	movs	r1, #208	; 0xd0
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f002 feca 	bl	8005d54 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002fc4:	2364      	movs	r3, #100	; 0x64
 8002fc6:	9302      	str	r3, [sp, #8]
 8002fc8:	2301      	movs	r3, #1
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	f107 030e 	add.w	r3, r7, #14
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	221c      	movs	r2, #28
 8002fd6:	21d0      	movs	r1, #208	; 0xd0
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f002 febb 	bl	8005d54 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002fe2:	2364      	movs	r3, #100	; 0x64
 8002fe4:	9302      	str	r3, [sp, #8]
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	f107 030e 	add.w	r3, r7, #14
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	221b      	movs	r2, #27
 8002ff4:	21d0      	movs	r1, #208	; 0xd0
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f002 feac 	bl	8005d54 <HAL_I2C_Mem_Write>
        return 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <MPU6050_Init+0xa6>
    }
    return 1;
 8003000:	2301      	movs	r3, #1
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	0000      	movs	r0, r0
 800300c:	0000      	movs	r0, r0
	...

08003010 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8003010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003014:	b094      	sub	sp, #80	; 0x50
 8003016:	af04      	add	r7, sp, #16
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800301c:	2364      	movs	r3, #100	; 0x64
 800301e:	9302      	str	r3, [sp, #8]
 8003020:	230e      	movs	r3, #14
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	f107 0308 	add.w	r3, r7, #8
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	2301      	movs	r3, #1
 800302c:	223b      	movs	r2, #59	; 0x3b
 800302e:	21d0      	movs	r1, #208	; 0xd0
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f002 ff89 	bl	8005f48 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8003036:	7a3b      	ldrb	r3, [r7, #8]
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	b21a      	sxth	r2, r3
 800303c:	7a7b      	ldrb	r3, [r7, #9]
 800303e:	b21b      	sxth	r3, r3
 8003040:	4313      	orrs	r3, r2
 8003042:	b21a      	sxth	r2, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8003048:	7abb      	ldrb	r3, [r7, #10]
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	b21a      	sxth	r2, r3
 800304e:	7afb      	ldrb	r3, [r7, #11]
 8003050:	b21b      	sxth	r3, r3
 8003052:	4313      	orrs	r3, r2
 8003054:	b21a      	sxth	r2, r3
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800305a:	7b3b      	ldrb	r3, [r7, #12]
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	b21a      	sxth	r2, r3
 8003060:	7b7b      	ldrb	r3, [r7, #13]
 8003062:	b21b      	sxth	r3, r3
 8003064:	4313      	orrs	r3, r2
 8003066:	b21a      	sxth	r2, r3
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800306c:	7bbb      	ldrb	r3, [r7, #14]
 800306e:	021b      	lsls	r3, r3, #8
 8003070:	b21a      	sxth	r2, r3
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	b21b      	sxth	r3, r3
 8003076:	4313      	orrs	r3, r2
 8003078:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800307a:	7c3b      	ldrb	r3, [r7, #16]
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	b21a      	sxth	r2, r3
 8003080:	7c7b      	ldrb	r3, [r7, #17]
 8003082:	b21b      	sxth	r3, r3
 8003084:	4313      	orrs	r3, r2
 8003086:	b21a      	sxth	r2, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800308c:	7cbb      	ldrb	r3, [r7, #18]
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	b21a      	sxth	r2, r3
 8003092:	7cfb      	ldrb	r3, [r7, #19]
 8003094:	b21b      	sxth	r3, r3
 8003096:	4313      	orrs	r3, r2
 8003098:	b21a      	sxth	r2, r3
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800309e:	7d3b      	ldrb	r3, [r7, #20]
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	b21a      	sxth	r2, r3
 80030a4:	7d7b      	ldrb	r3, [r7, #21]
 80030a6:	b21b      	sxth	r3, r3
 80030a8:	4313      	orrs	r3, r2
 80030aa:	b21a      	sxth	r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fd f9d8 	bl	800046c <__aeabi_i2d>
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	4bbd      	ldr	r3, [pc, #756]	; (80033b8 <MPU6050_Read_All+0x3a8>)
 80030c2:	f7fd fb67 	bl	8000794 <__aeabi_ddiv>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	6839      	ldr	r1, [r7, #0]
 80030cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd f9c8 	bl	800046c <__aeabi_i2d>
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	4bb5      	ldr	r3, [pc, #724]	; (80033b8 <MPU6050_Read_All+0x3a8>)
 80030e2:	f7fd fb57 	bl	8000794 <__aeabi_ddiv>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	6839      	ldr	r1, [r7, #0]
 80030ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fd f9b8 	bl	800046c <__aeabi_i2d>
 80030fc:	a3a8      	add	r3, pc, #672	; (adr r3, 80033a0 <MPU6050_Read_All+0x390>)
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	f7fd fb47 	bl	8000794 <__aeabi_ddiv>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	6839      	ldr	r1, [r7, #0]
 800310c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8003110:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003114:	ee07 3a90 	vmov	s15, r3
 8003118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800311c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80033bc <MPU6050_Read_All+0x3ac>
 8003120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003124:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80033c0 <MPU6050_Read_All+0x3b0>
 8003128:	ee77 7a87 	vadd.f32	s15, s15, s14
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd f997 	bl	800046c <__aeabi_i2d>
 800313e:	a39a      	add	r3, pc, #616	; (adr r3, 80033a8 <MPU6050_Read_All+0x398>)
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	f7fd fb26 	bl	8000794 <__aeabi_ddiv>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	6839      	ldr	r1, [r7, #0]
 800314e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd f987 	bl	800046c <__aeabi_i2d>
 800315e:	a392      	add	r3, pc, #584	; (adr r3, 80033a8 <MPU6050_Read_All+0x398>)
 8003160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003164:	f7fd fb16 	bl	8000794 <__aeabi_ddiv>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	6839      	ldr	r1, [r7, #0]
 800316e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd f977 	bl	800046c <__aeabi_i2d>
 800317e:	a38a      	add	r3, pc, #552	; (adr r3, 80033a8 <MPU6050_Read_All+0x398>)
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f7fd fb06 	bl	8000794 <__aeabi_ddiv>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	6839      	ldr	r1, [r7, #0]
 800318e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8003192:	f000 fb0f 	bl	80037b4 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	4b8a      	ldr	r3, [pc, #552]	; (80033c4 <MPU6050_Read_All+0x3b4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd f954 	bl	800044c <__aeabi_ui2d>
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	4b87      	ldr	r3, [pc, #540]	; (80033c8 <MPU6050_Read_All+0x3b8>)
 80031aa:	f7fd faf3 	bl	8000794 <__aeabi_ddiv>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80031b6:	f000 fafd 	bl	80037b4 <HAL_GetTick>
 80031ba:	4603      	mov	r3, r0
 80031bc:	4a81      	ldr	r2, [pc, #516]	; (80033c4 <MPU6050_Read_All+0x3b4>)
 80031be:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c6:	461a      	mov	r2, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ce:	fb03 f202 	mul.w	r2, r3, r2
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80031d8:	4619      	mov	r1, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80031e0:	fb03 f301 	mul.w	r3, r3, r1
 80031e4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd f940 	bl	800046c <__aeabi_i2d>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	ec43 2b10 	vmov	d0, r2, r3
 80031f4:	f009 ff54 	bl	800d0a0 <sqrt>
 80031f8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003208:	f7fd fc02 	bl	8000a10 <__aeabi_dcmpeq>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d11f      	bne.n	8003252 <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd f927 	bl	800046c <__aeabi_i2d>
 800321e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003222:	f7fd fab7 	bl	8000794 <__aeabi_ddiv>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	ec43 2b17 	vmov	d7, r2, r3
 800322e:	eeb0 0a47 	vmov.f32	s0, s14
 8003232:	eef0 0a67 	vmov.f32	s1, s15
 8003236:	f009 fd87 	bl	800cd48 <atan>
 800323a:	ec51 0b10 	vmov	r0, r1, d0
 800323e:	a35c      	add	r3, pc, #368	; (adr r3, 80033b0 <MPU6050_Read_All+0x3a0>)
 8003240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003244:	f7fd f97c 	bl	8000540 <__aeabi_dmul>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003250:	e005      	b.n	800325e <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003264:	425b      	negs	r3, r3
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd f900 	bl	800046c <__aeabi_i2d>
 800326c:	4682      	mov	sl, r0
 800326e:	468b      	mov	fp, r1
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fd f8f8 	bl	800046c <__aeabi_i2d>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	ec43 2b11 	vmov	d1, r2, r3
 8003284:	ec4b ab10 	vmov	d0, sl, fp
 8003288:	f009 ff07 	bl	800d09a <atan2>
 800328c:	ec51 0b10 	vmov	r0, r1, d0
 8003290:	a347      	add	r3, pc, #284	; (adr r3, 80033b0 <MPU6050_Read_All+0x3a0>)
 8003292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003296:	f7fd f953 	bl	8000540 <__aeabi_dmul>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	4b49      	ldr	r3, [pc, #292]	; (80033cc <MPU6050_Read_All+0x3bc>)
 80032a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032ac:	f7fd fbba 	bl	8000a24 <__aeabi_dcmplt>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <MPU6050_Read_All+0x2bc>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	4b43      	ldr	r3, [pc, #268]	; (80033d0 <MPU6050_Read_All+0x3c0>)
 80032c2:	f7fd fbcd 	bl	8000a60 <__aeabi_dcmpgt>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d114      	bne.n	80032f6 <MPU6050_Read_All+0x2e6>
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <MPU6050_Read_All+0x3c0>)
 80032d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032d6:	f7fd fbc3 	bl	8000a60 <__aeabi_dcmpgt>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d015      	beq.n	800330c <MPU6050_Read_All+0x2fc>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	4b38      	ldr	r3, [pc, #224]	; (80033cc <MPU6050_Read_All+0x3bc>)
 80032ec:	f7fd fb9a 	bl	8000a24 <__aeabi_dcmplt>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 80032f6:	4937      	ldr	r1, [pc, #220]	; (80033d4 <MPU6050_Read_All+0x3c4>)
 80032f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8003300:	6839      	ldr	r1, [r7, #0]
 8003302:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003306:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800330a:	e014      	b.n	8003336 <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003312:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003316:	eeb0 1a47 	vmov.f32	s2, s14
 800331a:	eef0 1a67 	vmov.f32	s3, s15
 800331e:	ed97 0b06 	vldr	d0, [r7, #24]
 8003322:	482c      	ldr	r0, [pc, #176]	; (80033d4 <MPU6050_Read_All+0x3c4>)
 8003324:	f000 f85a 	bl	80033dc <Kalman_getAngle>
 8003328:	eeb0 7a40 	vmov.f32	s14, s0
 800332c:	eef0 7a60 	vmov.f32	s15, s1
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800333c:	4690      	mov	r8, r2
 800333e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <MPU6050_Read_All+0x3c0>)
 8003348:	4640      	mov	r0, r8
 800334a:	4649      	mov	r1, r9
 800334c:	f7fd fb88 	bl	8000a60 <__aeabi_dcmpgt>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800335c:	4614      	mov	r4, r2
 800335e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800336e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003372:	eeb0 1a47 	vmov.f32	s2, s14
 8003376:	eef0 1a67 	vmov.f32	s3, s15
 800337a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800337e:	4816      	ldr	r0, [pc, #88]	; (80033d8 <MPU6050_Read_All+0x3c8>)
 8003380:	f000 f82c 	bl	80033dc <Kalman_getAngle>
 8003384:	eeb0 7a40 	vmov.f32	s14, s0
 8003388:	eef0 7a60 	vmov.f32	s15, s1
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8003392:	bf00      	nop
 8003394:	3740      	adds	r7, #64	; 0x40
 8003396:	46bd      	mov	sp, r7
 8003398:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800339c:	f3af 8000 	nop.w
 80033a0:	00000000 	.word	0x00000000
 80033a4:	40cc2900 	.word	0x40cc2900
 80033a8:	00000000 	.word	0x00000000
 80033ac:	40606000 	.word	0x40606000
 80033b0:	1a63c1f8 	.word	0x1a63c1f8
 80033b4:	404ca5dc 	.word	0x404ca5dc
 80033b8:	40d00000 	.word	0x40d00000
 80033bc:	43aa0000 	.word	0x43aa0000
 80033c0:	42121eb8 	.word	0x42121eb8
 80033c4:	20000668 	.word	0x20000668
 80033c8:	408f4000 	.word	0x408f4000
 80033cc:	c0568000 	.word	0xc0568000
 80033d0:	40568000 	.word	0x40568000
 80033d4:	20000058 	.word	0x20000058
 80033d8:	20000010 	.word	0x20000010

080033dc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80033dc:	b5b0      	push	{r4, r5, r7, lr}
 80033de:	b096      	sub	sp, #88	; 0x58
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	61f8      	str	r0, [r7, #28]
 80033e4:	ed87 0b04 	vstr	d0, [r7, #16]
 80033e8:	ed87 1b02 	vstr	d1, [r7, #8]
 80033ec:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80033f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033fa:	f7fc fee9 	bl	80001d0 <__aeabi_dsub>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800340c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003410:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003414:	f7fd f894 	bl	8000540 <__aeabi_dmul>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4620      	mov	r0, r4
 800341e:	4629      	mov	r1, r5
 8003420:	f7fc fed8 	bl	80001d4 <__adddf3>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	69f9      	ldr	r1, [r7, #28]
 800342a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800343a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800343e:	f7fd f87f 	bl	8000540 <__aeabi_dmul>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4610      	mov	r0, r2
 8003448:	4619      	mov	r1, r3
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003450:	f7fc febe 	bl	80001d0 <__aeabi_dsub>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003462:	f7fc feb5 	bl	80001d0 <__aeabi_dsub>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f7fc feae 	bl	80001d4 <__adddf3>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003484:	f7fd f85c 	bl	8000540 <__aeabi_dmul>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4620      	mov	r0, r4
 800348e:	4629      	mov	r1, r5
 8003490:	f7fc fea0 	bl	80001d4 <__adddf3>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	69f9      	ldr	r1, [r7, #28]
 800349a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80034aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034ae:	f7fd f847 	bl	8000540 <__aeabi_dmul>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4620      	mov	r0, r4
 80034b8:	4629      	mov	r1, r5
 80034ba:	f7fc fe89 	bl	80001d0 <__aeabi_dsub>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	69f9      	ldr	r1, [r7, #28]
 80034c4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80034d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034d8:	f7fd f832 	bl	8000540 <__aeabi_dmul>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4620      	mov	r0, r4
 80034e2:	4629      	mov	r1, r5
 80034e4:	f7fc fe74 	bl	80001d0 <__aeabi_dsub>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	69f9      	ldr	r1, [r7, #28]
 80034ee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80034fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003502:	f7fd f81d 	bl	8000540 <__aeabi_dmul>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4620      	mov	r0, r4
 800350c:	4629      	mov	r1, r5
 800350e:	f7fc fe61 	bl	80001d4 <__adddf3>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	69f9      	ldr	r1, [r7, #28]
 8003518:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003528:	f7fc fe54 	bl	80001d4 <__adddf3>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800353a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800353e:	f7fd f929 	bl	8000794 <__aeabi_ddiv>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003550:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003554:	f7fd f91e 	bl	8000794 <__aeabi_ddiv>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003566:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800356a:	f7fc fe31 	bl	80001d0 <__aeabi_dsub>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800357c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003580:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003584:	f7fc ffdc 	bl	8000540 <__aeabi_dmul>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4620      	mov	r0, r4
 800358e:	4629      	mov	r1, r5
 8003590:	f7fc fe20 	bl	80001d4 <__adddf3>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	69f9      	ldr	r1, [r7, #28]
 800359a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80035a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035ac:	f7fc ffc8 	bl	8000540 <__aeabi_dmul>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4620      	mov	r0, r4
 80035b6:	4629      	mov	r1, r5
 80035b8:	f7fc fe0c 	bl	80001d4 <__adddf3>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	69f9      	ldr	r1, [r7, #28]
 80035c2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80035cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80035d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80035e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035e8:	f7fc ffaa 	bl	8000540 <__aeabi_dmul>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4620      	mov	r0, r4
 80035f2:	4629      	mov	r1, r5
 80035f4:	f7fc fdec 	bl	80001d0 <__aeabi_dsub>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	69f9      	ldr	r1, [r7, #28]
 80035fe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003608:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800360c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003610:	f7fc ff96 	bl	8000540 <__aeabi_dmul>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4620      	mov	r0, r4
 800361a:	4629      	mov	r1, r5
 800361c:	f7fc fdd8 	bl	80001d0 <__aeabi_dsub>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	69f9      	ldr	r1, [r7, #28]
 8003626:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003630:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003634:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003638:	f7fc ff82 	bl	8000540 <__aeabi_dmul>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4620      	mov	r0, r4
 8003642:	4629      	mov	r1, r5
 8003644:	f7fc fdc4 	bl	80001d0 <__aeabi_dsub>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	69f9      	ldr	r1, [r7, #28]
 800364e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003658:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800365c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003660:	f7fc ff6e 	bl	8000540 <__aeabi_dmul>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4620      	mov	r0, r4
 800366a:	4629      	mov	r1, r5
 800366c:	f7fc fdb0 	bl	80001d0 <__aeabi_dsub>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	69f9      	ldr	r1, [r7, #28]
 8003676:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003680:	ec43 2b17 	vmov	d7, r2, r3
};
 8003684:	eeb0 0a47 	vmov.f32	s0, s14
 8003688:	eef0 0a67 	vmov.f32	s1, s15
 800368c:	3758      	adds	r7, #88	; 0x58
 800368e:	46bd      	mov	sp, r7
 8003690:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003698:	480d      	ldr	r0, [pc, #52]	; (80036d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800369a:	490e      	ldr	r1, [pc, #56]	; (80036d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800369c:	4a0e      	ldr	r2, [pc, #56]	; (80036d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800369e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036a0:	e002      	b.n	80036a8 <LoopCopyDataInit>

080036a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036a6:	3304      	adds	r3, #4

080036a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036ac:	d3f9      	bcc.n	80036a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ae:	4a0b      	ldr	r2, [pc, #44]	; (80036dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036b0:	4c0b      	ldr	r4, [pc, #44]	; (80036e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80036b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036b4:	e001      	b.n	80036ba <LoopFillZerobss>

080036b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036b8:	3204      	adds	r2, #4

080036ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036bc:	d3fb      	bcc.n	80036b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036be:	f7fe fd7d 	bl	80021bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036c2:	f009 fa3b 	bl	800cb3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036c6:	f7fd fd6f 	bl	80011a8 <main>
  bx  lr    
 80036ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80036cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036d4:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 80036d8:	0800f930 	.word	0x0800f930
  ldr r2, =_sbss
 80036dc:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 80036e0:	20000d5c 	.word	0x20000d5c

080036e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036e4:	e7fe      	b.n	80036e4 <ADC_IRQHandler>
	...

080036e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036ec:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <HAL_Init+0x40>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a0d      	ldr	r2, [pc, #52]	; (8003728 <HAL_Init+0x40>)
 80036f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_Init+0x40>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <HAL_Init+0x40>)
 80036fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003702:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003704:	4b08      	ldr	r3, [pc, #32]	; (8003728 <HAL_Init+0x40>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a07      	ldr	r2, [pc, #28]	; (8003728 <HAL_Init+0x40>)
 800370a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003710:	2003      	movs	r0, #3
 8003712:	f000 f94f 	bl	80039b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003716:	2000      	movs	r0, #0
 8003718:	f000 f808 	bl	800372c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800371c:	f7fe fa0a 	bl	8001b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40023c00 	.word	0x40023c00

0800372c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003734:	4b12      	ldr	r3, [pc, #72]	; (8003780 <HAL_InitTick+0x54>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4b12      	ldr	r3, [pc, #72]	; (8003784 <HAL_InitTick+0x58>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	4619      	mov	r1, r3
 800373e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003742:	fbb3 f3f1 	udiv	r3, r3, r1
 8003746:	fbb2 f3f3 	udiv	r3, r2, r3
 800374a:	4618      	mov	r0, r3
 800374c:	f000 f967 	bl	8003a1e <HAL_SYSTICK_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e00e      	b.n	8003778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b0f      	cmp	r3, #15
 800375e:	d80a      	bhi.n	8003776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003760:	2200      	movs	r2, #0
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003768:	f000 f92f 	bl	80039ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800376c:	4a06      	ldr	r2, [pc, #24]	; (8003788 <HAL_InitTick+0x5c>)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	e000      	b.n	8003778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
}
 8003778:	4618      	mov	r0, r3
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20000004 	.word	0x20000004
 8003784:	200000a4 	.word	0x200000a4
 8003788:	200000a0 	.word	0x200000a0

0800378c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_IncTick+0x20>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_IncTick+0x24>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4413      	add	r3, r2
 800379c:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <HAL_IncTick+0x24>)
 800379e:	6013      	str	r3, [r2, #0]
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	200000a4 	.word	0x200000a4
 80037b0:	2000066c 	.word	0x2000066c

080037b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return uwTick;
 80037b8:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <HAL_GetTick+0x14>)
 80037ba:	681b      	ldr	r3, [r3, #0]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	2000066c 	.word	0x2000066c

080037cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037d4:	f7ff ffee 	bl	80037b4 <HAL_GetTick>
 80037d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037e4:	d005      	beq.n	80037f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <HAL_Delay+0x44>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037f2:	bf00      	nop
 80037f4:	f7ff ffde 	bl	80037b4 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	429a      	cmp	r2, r3
 8003802:	d8f7      	bhi.n	80037f4 <HAL_Delay+0x28>
  {
  }
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	200000a4 	.word	0x200000a4

08003814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <__NVIC_SetPriorityGrouping+0x44>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003830:	4013      	ands	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800383c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003846:	4a04      	ldr	r2, [pc, #16]	; (8003858 <__NVIC_SetPriorityGrouping+0x44>)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	60d3      	str	r3, [r2, #12]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <__NVIC_GetPriorityGrouping+0x18>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	f003 0307 	and.w	r3, r3, #7
}
 800386a:	4618      	mov	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	2b00      	cmp	r3, #0
 8003888:	db0b      	blt.n	80038a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	f003 021f 	and.w	r2, r3, #31
 8003890:	4907      	ldr	r1, [pc, #28]	; (80038b0 <__NVIC_EnableIRQ+0x38>)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	2001      	movs	r0, #1
 800389a:	fa00 f202 	lsl.w	r2, r0, r2
 800389e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	e000e100 	.word	0xe000e100

080038b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	6039      	str	r1, [r7, #0]
 80038be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	db0a      	blt.n	80038de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	490c      	ldr	r1, [pc, #48]	; (8003900 <__NVIC_SetPriority+0x4c>)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	0112      	lsls	r2, r2, #4
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	440b      	add	r3, r1
 80038d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038dc:	e00a      	b.n	80038f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <__NVIC_SetPriority+0x50>)
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	3b04      	subs	r3, #4
 80038ec:	0112      	lsls	r2, r2, #4
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	440b      	add	r3, r1
 80038f2:	761a      	strb	r2, [r3, #24]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000e100 	.word	0xe000e100
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	; 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f1c3 0307 	rsb	r3, r3, #7
 8003922:	2b04      	cmp	r3, #4
 8003924:	bf28      	it	cs
 8003926:	2304      	movcs	r3, #4
 8003928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3304      	adds	r3, #4
 800392e:	2b06      	cmp	r3, #6
 8003930:	d902      	bls.n	8003938 <NVIC_EncodePriority+0x30>
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3b03      	subs	r3, #3
 8003936:	e000      	b.n	800393a <NVIC_EncodePriority+0x32>
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43da      	mvns	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	401a      	ands	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003950:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	43d9      	mvns	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003960:	4313      	orrs	r3, r2
         );
}
 8003962:	4618      	mov	r0, r3
 8003964:	3724      	adds	r7, #36	; 0x24
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003980:	d301      	bcc.n	8003986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003982:	2301      	movs	r3, #1
 8003984:	e00f      	b.n	80039a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <SysTick_Config+0x40>)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800398e:	210f      	movs	r1, #15
 8003990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003994:	f7ff ff8e 	bl	80038b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003998:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <SysTick_Config+0x40>)
 800399a:	2200      	movs	r2, #0
 800399c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800399e:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <SysTick_Config+0x40>)
 80039a0:	2207      	movs	r2, #7
 80039a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	e000e010 	.word	0xe000e010

080039b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ff29 	bl	8003814 <__NVIC_SetPriorityGrouping>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b086      	sub	sp, #24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	4603      	mov	r3, r0
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039dc:	f7ff ff3e 	bl	800385c <__NVIC_GetPriorityGrouping>
 80039e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	6978      	ldr	r0, [r7, #20]
 80039e8:	f7ff ff8e 	bl	8003908 <NVIC_EncodePriority>
 80039ec:	4602      	mov	r2, r0
 80039ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f2:	4611      	mov	r1, r2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff5d 	bl	80038b4 <__NVIC_SetPriority>
}
 80039fa:	bf00      	nop
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	4603      	mov	r3, r0
 8003a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff31 	bl	8003878 <__NVIC_EnableIRQ>
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff ffa2 	bl	8003970 <SysTick_Config>
 8003a2c:	4603      	mov	r3, r0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	e16b      	b.n	8003d2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a54:	2201      	movs	r2, #1
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	f040 815a 	bne.w	8003d26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d005      	beq.n	8003a8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d130      	bne.n	8003aec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	2203      	movs	r2, #3
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	f003 0201 	and.w	r2, r3, #1
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d017      	beq.n	8003b28 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	2203      	movs	r2, #3
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d123      	bne.n	8003b7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	08da      	lsrs	r2, r3, #3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3208      	adds	r2, #8
 8003b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	220f      	movs	r2, #15
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	08da      	lsrs	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3208      	adds	r2, #8
 8003b76:	69b9      	ldr	r1, [r7, #24]
 8003b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	2203      	movs	r2, #3
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 0203 	and.w	r2, r3, #3
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80b4 	beq.w	8003d26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	4b60      	ldr	r3, [pc, #384]	; (8003d44 <HAL_GPIO_Init+0x30c>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	4a5f      	ldr	r2, [pc, #380]	; (8003d44 <HAL_GPIO_Init+0x30c>)
 8003bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bce:	4b5d      	ldr	r3, [pc, #372]	; (8003d44 <HAL_GPIO_Init+0x30c>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bda:	4a5b      	ldr	r2, [pc, #364]	; (8003d48 <HAL_GPIO_Init+0x310>)
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	089b      	lsrs	r3, r3, #2
 8003be0:	3302      	adds	r3, #2
 8003be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	220f      	movs	r2, #15
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a52      	ldr	r2, [pc, #328]	; (8003d4c <HAL_GPIO_Init+0x314>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d02b      	beq.n	8003c5e <HAL_GPIO_Init+0x226>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a51      	ldr	r2, [pc, #324]	; (8003d50 <HAL_GPIO_Init+0x318>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d025      	beq.n	8003c5a <HAL_GPIO_Init+0x222>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a50      	ldr	r2, [pc, #320]	; (8003d54 <HAL_GPIO_Init+0x31c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01f      	beq.n	8003c56 <HAL_GPIO_Init+0x21e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a4f      	ldr	r2, [pc, #316]	; (8003d58 <HAL_GPIO_Init+0x320>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d019      	beq.n	8003c52 <HAL_GPIO_Init+0x21a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4e      	ldr	r2, [pc, #312]	; (8003d5c <HAL_GPIO_Init+0x324>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <HAL_GPIO_Init+0x216>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a4d      	ldr	r2, [pc, #308]	; (8003d60 <HAL_GPIO_Init+0x328>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00d      	beq.n	8003c4a <HAL_GPIO_Init+0x212>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a4c      	ldr	r2, [pc, #304]	; (8003d64 <HAL_GPIO_Init+0x32c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <HAL_GPIO_Init+0x20e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a4b      	ldr	r2, [pc, #300]	; (8003d68 <HAL_GPIO_Init+0x330>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d101      	bne.n	8003c42 <HAL_GPIO_Init+0x20a>
 8003c3e:	2307      	movs	r3, #7
 8003c40:	e00e      	b.n	8003c60 <HAL_GPIO_Init+0x228>
 8003c42:	2308      	movs	r3, #8
 8003c44:	e00c      	b.n	8003c60 <HAL_GPIO_Init+0x228>
 8003c46:	2306      	movs	r3, #6
 8003c48:	e00a      	b.n	8003c60 <HAL_GPIO_Init+0x228>
 8003c4a:	2305      	movs	r3, #5
 8003c4c:	e008      	b.n	8003c60 <HAL_GPIO_Init+0x228>
 8003c4e:	2304      	movs	r3, #4
 8003c50:	e006      	b.n	8003c60 <HAL_GPIO_Init+0x228>
 8003c52:	2303      	movs	r3, #3
 8003c54:	e004      	b.n	8003c60 <HAL_GPIO_Init+0x228>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e002      	b.n	8003c60 <HAL_GPIO_Init+0x228>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <HAL_GPIO_Init+0x228>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	69fa      	ldr	r2, [r7, #28]
 8003c62:	f002 0203 	and.w	r2, r2, #3
 8003c66:	0092      	lsls	r2, r2, #2
 8003c68:	4093      	lsls	r3, r2
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c70:	4935      	ldr	r1, [pc, #212]	; (8003d48 <HAL_GPIO_Init+0x310>)
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	089b      	lsrs	r3, r3, #2
 8003c76:	3302      	adds	r3, #2
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c7e:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <HAL_GPIO_Init+0x334>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ca2:	4a32      	ldr	r2, [pc, #200]	; (8003d6c <HAL_GPIO_Init+0x334>)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ca8:	4b30      	ldr	r3, [pc, #192]	; (8003d6c <HAL_GPIO_Init+0x334>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ccc:	4a27      	ldr	r2, [pc, #156]	; (8003d6c <HAL_GPIO_Init+0x334>)
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cd2:	4b26      	ldr	r3, [pc, #152]	; (8003d6c <HAL_GPIO_Init+0x334>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cf6:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <HAL_GPIO_Init+0x334>)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_GPIO_Init+0x334>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	43db      	mvns	r3, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d20:	4a12      	ldr	r2, [pc, #72]	; (8003d6c <HAL_GPIO_Init+0x334>)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	61fb      	str	r3, [r7, #28]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2b0f      	cmp	r3, #15
 8003d30:	f67f ae90 	bls.w	8003a54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	3724      	adds	r7, #36	; 0x24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800
 8003d48:	40013800 	.word	0x40013800
 8003d4c:	40020000 	.word	0x40020000
 8003d50:	40020400 	.word	0x40020400
 8003d54:	40020800 	.word	0x40020800
 8003d58:	40020c00 	.word	0x40020c00
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	40021400 	.word	0x40021400
 8003d64:	40021800 	.word	0x40021800
 8003d68:	40021c00 	.word	0x40021c00
 8003d6c:	40013c00 	.word	0x40013c00

08003d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	887b      	ldrh	r3, [r7, #2]
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
 8003d8c:	e001      	b.n	8003d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	807b      	strh	r3, [r7, #2]
 8003dac:	4613      	mov	r3, r2
 8003dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003db0:	787b      	ldrb	r3, [r7, #1]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003db6:	887a      	ldrh	r2, [r7, #2]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dbc:	e003      	b.n	8003dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dbe:	887b      	ldrh	r3, [r7, #2]
 8003dc0:	041a      	lsls	r2, r3, #16
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	619a      	str	r2, [r3, #24]
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003de4:	887a      	ldrh	r2, [r7, #2]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4013      	ands	r3, r2
 8003dea:	041a      	lsls	r2, r3, #16
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	43d9      	mvns	r1, r3
 8003df0:	887b      	ldrh	r3, [r7, #2]
 8003df2:	400b      	ands	r3, r1
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	619a      	str	r2, [r3, #24]
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e08:	b08f      	sub	sp, #60	; 0x3c
 8003e0a:	af0a      	add	r7, sp, #40	; 0x28
 8003e0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e054      	b.n	8003ec2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f008 fbd2 	bl	800c5dc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d102      	bne.n	8003e52 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f005 fd74 	bl	8009944 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	687e      	ldr	r6, [r7, #4]
 8003e64:	466d      	mov	r5, sp
 8003e66:	f106 0410 	add.w	r4, r6, #16
 8003e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e76:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e7a:	1d33      	adds	r3, r6, #4
 8003e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e7e:	6838      	ldr	r0, [r7, #0]
 8003e80:	f005 fcee 	bl	8009860 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f005 fd6b 	bl	8009966 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	687e      	ldr	r6, [r7, #4]
 8003e98:	466d      	mov	r5, sp
 8003e9a:	f106 0410 	add.w	r4, r6, #16
 8003e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ea6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003eaa:	e885 0003 	stmia.w	r5, {r0, r1}
 8003eae:	1d33      	adds	r3, r6, #4
 8003eb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eb2:	6838      	ldr	r0, [r7, #0]
 8003eb4:	f005 fe7e 	bl	8009bb4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003eca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003eca:	b590      	push	{r4, r7, lr}
 8003ecc:	b089      	sub	sp, #36	; 0x24
 8003ece:	af04      	add	r7, sp, #16
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	4608      	mov	r0, r1
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4603      	mov	r3, r0
 8003eda:	70fb      	strb	r3, [r7, #3]
 8003edc:	460b      	mov	r3, r1
 8003ede:	70bb      	strb	r3, [r7, #2]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_HCD_HC_Init+0x28>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e076      	b.n	8003fe0 <HAL_HCD_HC_Init+0x116>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	212c      	movs	r1, #44	; 0x2c
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	4413      	add	r3, r2
 8003f06:	333d      	adds	r3, #61	; 0x3d
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	212c      	movs	r1, #44	; 0x2c
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	3338      	adds	r3, #56	; 0x38
 8003f1a:	787a      	ldrb	r2, [r7, #1]
 8003f1c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	212c      	movs	r1, #44	; 0x2c
 8003f24:	fb01 f303 	mul.w	r3, r1, r3
 8003f28:	4413      	add	r3, r2
 8003f2a:	3340      	adds	r3, #64	; 0x40
 8003f2c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003f2e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	212c      	movs	r1, #44	; 0x2c
 8003f36:	fb01 f303 	mul.w	r3, r1, r3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3339      	adds	r3, #57	; 0x39
 8003f3e:	78fa      	ldrb	r2, [r7, #3]
 8003f40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003f42:	78fb      	ldrb	r3, [r7, #3]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	212c      	movs	r1, #44	; 0x2c
 8003f48:	fb01 f303 	mul.w	r3, r1, r3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	333f      	adds	r3, #63	; 0x3f
 8003f50:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003f54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	78ba      	ldrb	r2, [r7, #2]
 8003f5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f5e:	b2d0      	uxtb	r0, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	212c      	movs	r1, #44	; 0x2c
 8003f64:	fb01 f303 	mul.w	r3, r1, r3
 8003f68:	4413      	add	r3, r2
 8003f6a:	333a      	adds	r3, #58	; 0x3a
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003f70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	da09      	bge.n	8003f8c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	212c      	movs	r1, #44	; 0x2c
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	4413      	add	r3, r2
 8003f84:	333b      	adds	r3, #59	; 0x3b
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e008      	b.n	8003f9e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	212c      	movs	r1, #44	; 0x2c
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	4413      	add	r3, r2
 8003f98:	333b      	adds	r3, #59	; 0x3b
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	212c      	movs	r1, #44	; 0x2c
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	4413      	add	r3, r2
 8003faa:	333c      	adds	r3, #60	; 0x3c
 8003fac:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003fb0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	787c      	ldrb	r4, [r7, #1]
 8003fb8:	78ba      	ldrb	r2, [r7, #2]
 8003fba:	78f9      	ldrb	r1, [r7, #3]
 8003fbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003fbe:	9302      	str	r3, [sp, #8]
 8003fc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	4623      	mov	r3, r4
 8003fce:	f005 ff73 	bl	8009eb8 <USB_HC_Init>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd90      	pop	{r4, r7, pc}

08003fe8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_HCD_HC_Halt+0x1e>
 8004002:	2302      	movs	r3, #2
 8004004:	e00f      	b.n	8004026 <HAL_HCD_HC_Halt+0x3e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	4611      	mov	r1, r2
 8004016:	4618      	mov	r0, r3
 8004018:	f006 f9af 	bl	800a37a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004024:	7bfb      	ldrb	r3, [r7, #15]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	4608      	mov	r0, r1
 800403a:	4611      	mov	r1, r2
 800403c:	461a      	mov	r2, r3
 800403e:	4603      	mov	r3, r0
 8004040:	70fb      	strb	r3, [r7, #3]
 8004042:	460b      	mov	r3, r1
 8004044:	70bb      	strb	r3, [r7, #2]
 8004046:	4613      	mov	r3, r2
 8004048:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800404a:	78fb      	ldrb	r3, [r7, #3]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	212c      	movs	r1, #44	; 0x2c
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	4413      	add	r3, r2
 8004056:	333b      	adds	r3, #59	; 0x3b
 8004058:	78ba      	ldrb	r2, [r7, #2]
 800405a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	212c      	movs	r1, #44	; 0x2c
 8004062:	fb01 f303 	mul.w	r3, r1, r3
 8004066:	4413      	add	r3, r2
 8004068:	333f      	adds	r3, #63	; 0x3f
 800406a:	787a      	ldrb	r2, [r7, #1]
 800406c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800406e:	7c3b      	ldrb	r3, [r7, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d112      	bne.n	800409a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	212c      	movs	r1, #44	; 0x2c
 800407a:	fb01 f303 	mul.w	r3, r1, r3
 800407e:	4413      	add	r3, r2
 8004080:	3342      	adds	r3, #66	; 0x42
 8004082:	2203      	movs	r2, #3
 8004084:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004086:	78fb      	ldrb	r3, [r7, #3]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	212c      	movs	r1, #44	; 0x2c
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	4413      	add	r3, r2
 8004092:	333d      	adds	r3, #61	; 0x3d
 8004094:	7f3a      	ldrb	r2, [r7, #28]
 8004096:	701a      	strb	r2, [r3, #0]
 8004098:	e008      	b.n	80040ac <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	212c      	movs	r1, #44	; 0x2c
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	4413      	add	r3, r2
 80040a6:	3342      	adds	r3, #66	; 0x42
 80040a8:	2202      	movs	r2, #2
 80040aa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80040ac:	787b      	ldrb	r3, [r7, #1]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	f200 80c6 	bhi.w	8004240 <HAL_HCD_HC_SubmitRequest+0x210>
 80040b4:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80040b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ba:	bf00      	nop
 80040bc:	080040cd 	.word	0x080040cd
 80040c0:	0800422d 	.word	0x0800422d
 80040c4:	08004131 	.word	0x08004131
 80040c8:	080041af 	.word	0x080041af
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80040cc:	7c3b      	ldrb	r3, [r7, #16]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	f040 80b8 	bne.w	8004244 <HAL_HCD_HC_SubmitRequest+0x214>
 80040d4:	78bb      	ldrb	r3, [r7, #2]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f040 80b4 	bne.w	8004244 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80040dc:	8b3b      	ldrh	r3, [r7, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d108      	bne.n	80040f4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	212c      	movs	r1, #44	; 0x2c
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	4413      	add	r3, r2
 80040ee:	3355      	adds	r3, #85	; 0x55
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	212c      	movs	r1, #44	; 0x2c
 80040fa:	fb01 f303 	mul.w	r3, r1, r3
 80040fe:	4413      	add	r3, r2
 8004100:	3355      	adds	r3, #85	; 0x55
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d109      	bne.n	800411c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	212c      	movs	r1, #44	; 0x2c
 800410e:	fb01 f303 	mul.w	r3, r1, r3
 8004112:	4413      	add	r3, r2
 8004114:	3342      	adds	r3, #66	; 0x42
 8004116:	2200      	movs	r2, #0
 8004118:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800411a:	e093      	b.n	8004244 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	212c      	movs	r1, #44	; 0x2c
 8004122:	fb01 f303 	mul.w	r3, r1, r3
 8004126:	4413      	add	r3, r2
 8004128:	3342      	adds	r3, #66	; 0x42
 800412a:	2202      	movs	r2, #2
 800412c:	701a      	strb	r2, [r3, #0]
      break;
 800412e:	e089      	b.n	8004244 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004130:	78bb      	ldrb	r3, [r7, #2]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d11d      	bne.n	8004172 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004136:	78fb      	ldrb	r3, [r7, #3]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	212c      	movs	r1, #44	; 0x2c
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	4413      	add	r3, r2
 8004142:	3355      	adds	r3, #85	; 0x55
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	212c      	movs	r1, #44	; 0x2c
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	4413      	add	r3, r2
 8004156:	3342      	adds	r3, #66	; 0x42
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800415c:	e073      	b.n	8004246 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800415e:	78fb      	ldrb	r3, [r7, #3]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	212c      	movs	r1, #44	; 0x2c
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	4413      	add	r3, r2
 800416a:	3342      	adds	r3, #66	; 0x42
 800416c:	2202      	movs	r2, #2
 800416e:	701a      	strb	r2, [r3, #0]
      break;
 8004170:	e069      	b.n	8004246 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	212c      	movs	r1, #44	; 0x2c
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	4413      	add	r3, r2
 800417e:	3354      	adds	r3, #84	; 0x54
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	212c      	movs	r1, #44	; 0x2c
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	4413      	add	r3, r2
 8004192:	3342      	adds	r3, #66	; 0x42
 8004194:	2200      	movs	r2, #0
 8004196:	701a      	strb	r2, [r3, #0]
      break;
 8004198:	e055      	b.n	8004246 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	212c      	movs	r1, #44	; 0x2c
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	4413      	add	r3, r2
 80041a6:	3342      	adds	r3, #66	; 0x42
 80041a8:	2202      	movs	r2, #2
 80041aa:	701a      	strb	r2, [r3, #0]
      break;
 80041ac:	e04b      	b.n	8004246 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80041ae:	78bb      	ldrb	r3, [r7, #2]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d11d      	bne.n	80041f0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	212c      	movs	r1, #44	; 0x2c
 80041ba:	fb01 f303 	mul.w	r3, r1, r3
 80041be:	4413      	add	r3, r2
 80041c0:	3355      	adds	r3, #85	; 0x55
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d109      	bne.n	80041dc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	212c      	movs	r1, #44	; 0x2c
 80041ce:	fb01 f303 	mul.w	r3, r1, r3
 80041d2:	4413      	add	r3, r2
 80041d4:	3342      	adds	r3, #66	; 0x42
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80041da:	e034      	b.n	8004246 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	212c      	movs	r1, #44	; 0x2c
 80041e2:	fb01 f303 	mul.w	r3, r1, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	3342      	adds	r3, #66	; 0x42
 80041ea:	2202      	movs	r2, #2
 80041ec:	701a      	strb	r2, [r3, #0]
      break;
 80041ee:	e02a      	b.n	8004246 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	212c      	movs	r1, #44	; 0x2c
 80041f6:	fb01 f303 	mul.w	r3, r1, r3
 80041fa:	4413      	add	r3, r2
 80041fc:	3354      	adds	r3, #84	; 0x54
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d109      	bne.n	8004218 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	212c      	movs	r1, #44	; 0x2c
 800420a:	fb01 f303 	mul.w	r3, r1, r3
 800420e:	4413      	add	r3, r2
 8004210:	3342      	adds	r3, #66	; 0x42
 8004212:	2200      	movs	r2, #0
 8004214:	701a      	strb	r2, [r3, #0]
      break;
 8004216:	e016      	b.n	8004246 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	212c      	movs	r1, #44	; 0x2c
 800421e:	fb01 f303 	mul.w	r3, r1, r3
 8004222:	4413      	add	r3, r2
 8004224:	3342      	adds	r3, #66	; 0x42
 8004226:	2202      	movs	r2, #2
 8004228:	701a      	strb	r2, [r3, #0]
      break;
 800422a:	e00c      	b.n	8004246 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	212c      	movs	r1, #44	; 0x2c
 8004232:	fb01 f303 	mul.w	r3, r1, r3
 8004236:	4413      	add	r3, r2
 8004238:	3342      	adds	r3, #66	; 0x42
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]
      break;
 800423e:	e002      	b.n	8004246 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004240:	bf00      	nop
 8004242:	e000      	b.n	8004246 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004244:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	212c      	movs	r1, #44	; 0x2c
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	3344      	adds	r3, #68	; 0x44
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	8b3a      	ldrh	r2, [r7, #24]
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	202c      	movs	r0, #44	; 0x2c
 8004260:	fb00 f303 	mul.w	r3, r0, r3
 8004264:	440b      	add	r3, r1
 8004266:	334c      	adds	r3, #76	; 0x4c
 8004268:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	212c      	movs	r1, #44	; 0x2c
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	4413      	add	r3, r2
 8004276:	3360      	adds	r3, #96	; 0x60
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	212c      	movs	r1, #44	; 0x2c
 8004282:	fb01 f303 	mul.w	r3, r1, r3
 8004286:	4413      	add	r3, r2
 8004288:	3350      	adds	r3, #80	; 0x50
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	212c      	movs	r1, #44	; 0x2c
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	4413      	add	r3, r2
 800429a:	3339      	adds	r3, #57	; 0x39
 800429c:	78fa      	ldrb	r2, [r7, #3]
 800429e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	212c      	movs	r1, #44	; 0x2c
 80042a6:	fb01 f303 	mul.w	r3, r1, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	3361      	adds	r3, #97	; 0x61
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	222c      	movs	r2, #44	; 0x2c
 80042ba:	fb02 f303 	mul.w	r3, r2, r3
 80042be:	3338      	adds	r3, #56	; 0x38
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	18d1      	adds	r1, r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	f005 ff02 	bl	800a0d4 <USB_HC_StartXfer>
 80042d0:	4603      	mov	r3, r0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop

080042dc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f005 fc1b 	bl	8009b2e <USB_GetMode>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	f040 80ef 	bne.w	80044de <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f005 fbff 	bl	8009b08 <USB_ReadInterrupts>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80e5 	beq.w	80044dc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f005 fbf6 	bl	8009b08 <USB_ReadInterrupts>
 800431c:	4603      	mov	r3, r0
 800431e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004322:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004326:	d104      	bne.n	8004332 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004330:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f005 fbe6 	bl	8009b08 <USB_ReadInterrupts>
 800433c:	4603      	mov	r3, r0
 800433e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004346:	d104      	bne.n	8004352 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004350:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f005 fbd6 	bl	8009b08 <USB_ReadInterrupts>
 800435c:	4603      	mov	r3, r0
 800435e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004362:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004366:	d104      	bne.n	8004372 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004370:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f005 fbc6 	bl	8009b08 <USB_ReadInterrupts>
 800437c:	4603      	mov	r3, r0
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	d103      	bne.n	800438e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2202      	movs	r2, #2
 800438c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f005 fbb8 	bl	8009b08 <USB_ReadInterrupts>
 8004398:	4603      	mov	r3, r0
 800439a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800439e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043a2:	d115      	bne.n	80043d0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80043ac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d108      	bne.n	80043d0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f008 f98a 	bl	800c6d8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2101      	movs	r1, #1
 80043ca:	4618      	mov	r0, r3
 80043cc:	f005 fcae 	bl	8009d2c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f005 fb97 	bl	8009b08 <USB_ReadInterrupts>
 80043da:	4603      	mov	r3, r0
 80043dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043e4:	d102      	bne.n	80043ec <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f001 f9ff 	bl	80057ea <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f005 fb89 	bl	8009b08 <USB_ReadInterrupts>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d106      	bne.n	800440e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f008 f94d 	bl	800c6a0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2208      	movs	r2, #8
 800440c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f005 fb78 	bl	8009b08 <USB_ReadInterrupts>
 8004418:	4603      	mov	r3, r0
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	2b10      	cmp	r3, #16
 8004420:	d101      	bne.n	8004426 <HAL_HCD_IRQHandler+0x14a>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <HAL_HCD_IRQHandler+0x14c>
 8004426:	2300      	movs	r3, #0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d012      	beq.n	8004452 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0210 	bic.w	r2, r2, #16
 800443a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f001 f902 	bl	8005646 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 0210 	orr.w	r2, r2, #16
 8004450:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f005 fb56 	bl	8009b08 <USB_ReadInterrupts>
 800445c:	4603      	mov	r3, r0
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004466:	d13a      	bne.n	80044de <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f005 ff73 	bl	800a358 <USB_HC_ReadInterrupt>
 8004472:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	e025      	b.n	80044c6 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	fa22 f303 	lsr.w	r3, r2, r3
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d018      	beq.n	80044c0 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4413      	add	r3, r2
 8004496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a4:	d106      	bne.n	80044b4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f8ab 	bl	8004608 <HCD_HC_IN_IRQHandler>
 80044b2:	e005      	b.n	80044c0 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	4619      	mov	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fcc6 	bl	8004e4c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	3301      	adds	r3, #1
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d3d4      	bcc.n	800447a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044d8:	615a      	str	r2, [r3, #20]
 80044da:	e000      	b.n	80044de <HAL_HCD_IRQHandler+0x202>
      return;
 80044dc:	bf00      	nop
    }
  }
}
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_HCD_Start+0x16>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e013      	b.n	8004522 <HAL_HCD_Start+0x3e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f005 fa0b 	bl	8009922 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2101      	movs	r1, #1
 8004512:	4618      	mov	r0, r3
 8004514:	f005 fc6e 	bl	8009df4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_HCD_Stop+0x16>
 800453c:	2302      	movs	r3, #2
 800453e:	e00d      	b.n	800455c <HAL_HCD_Stop+0x32>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f006 f86d 	bl	800a62c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f005 fc15 	bl	8009da0 <USB_ResetPort>
 8004576:	4603      	mov	r3, r0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	212c      	movs	r1, #44	; 0x2c
 8004592:	fb01 f303 	mul.w	r3, r1, r3
 8004596:	4413      	add	r3, r2
 8004598:	3360      	adds	r3, #96	; 0x60
 800459a:	781b      	ldrb	r3, [r3, #0]
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	212c      	movs	r1, #44	; 0x2c
 80045ba:	fb01 f303 	mul.w	r3, r1, r3
 80045be:	4413      	add	r3, r2
 80045c0:	3350      	adds	r3, #80	; 0x50
 80045c2:	681b      	ldr	r3, [r3, #0]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f005 fc59 	bl	8009e94 <USB_GetCurrentFrame>
 80045e2:	4603      	mov	r3, r0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f005 fc34 	bl	8009e66 <USB_GetHostSpeed>
 80045fe:	4603      	mov	r3, r0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4413      	add	r3, r2
 800462a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b04      	cmp	r3, #4
 8004636:	d119      	bne.n	800466c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	4413      	add	r3, r2
 8004640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004644:	461a      	mov	r2, r3
 8004646:	2304      	movs	r3, #4
 8004648:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4413      	add	r3, r2
 8004652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	0151      	lsls	r1, r2, #5
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	440a      	add	r2, r1
 8004660:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004664:	f043 0302 	orr.w	r3, r3, #2
 8004668:	60d3      	str	r3, [r2, #12]
 800466a:	e101      	b.n	8004870 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4413      	add	r3, r2
 8004674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004682:	d12b      	bne.n	80046dc <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	4413      	add	r3, r2
 800468c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004690:	461a      	mov	r2, r3
 8004692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004696:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	212c      	movs	r1, #44	; 0x2c
 800469e:	fb01 f303 	mul.w	r3, r1, r3
 80046a2:	4413      	add	r3, r2
 80046a4:	3361      	adds	r3, #97	; 0x61
 80046a6:	2207      	movs	r2, #7
 80046a8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	0151      	lsls	r1, r2, #5
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	440a      	add	r2, r1
 80046c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046c4:	f043 0302 	orr.w	r3, r3, #2
 80046c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f005 fe50 	bl	800a37a <USB_HC_Halt>
 80046da:	e0c9      	b.n	8004870 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	d109      	bne.n	8004706 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fe:	461a      	mov	r2, r3
 8004700:	2320      	movs	r3, #32
 8004702:	6093      	str	r3, [r2, #8]
 8004704:	e0b4      	b.n	8004870 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4413      	add	r3, r2
 800470e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b08      	cmp	r3, #8
 800471a:	d133      	bne.n	8004784 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4413      	add	r3, r2
 8004724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	0151      	lsls	r1, r2, #5
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	440a      	add	r2, r1
 8004732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004736:	f043 0302 	orr.w	r3, r3, #2
 800473a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	212c      	movs	r1, #44	; 0x2c
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	4413      	add	r3, r2
 8004748:	3361      	adds	r3, #97	; 0x61
 800474a:	2205      	movs	r2, #5
 800474c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4413      	add	r3, r2
 8004756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475a:	461a      	mov	r2, r3
 800475c:	2310      	movs	r3, #16
 800475e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4413      	add	r3, r2
 8004768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476c:	461a      	mov	r2, r3
 800476e:	2308      	movs	r3, #8
 8004770:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	4611      	mov	r1, r2
 800477c:	4618      	mov	r0, r3
 800477e:	f005 fdfc 	bl	800a37a <USB_HC_Halt>
 8004782:	e075      	b.n	8004870 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4413      	add	r3, r2
 800478c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479a:	d134      	bne.n	8004806 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	0151      	lsls	r1, r2, #5
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	440a      	add	r2, r1
 80047b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047b6:	f043 0302 	orr.w	r3, r3, #2
 80047ba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	212c      	movs	r1, #44	; 0x2c
 80047c2:	fb01 f303 	mul.w	r3, r1, r3
 80047c6:	4413      	add	r3, r2
 80047c8:	3361      	adds	r3, #97	; 0x61
 80047ca:	2208      	movs	r2, #8
 80047cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047da:	461a      	mov	r2, r3
 80047dc:	2310      	movs	r3, #16
 80047de:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ec:	461a      	mov	r2, r3
 80047ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047f2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	4611      	mov	r1, r2
 80047fe:	4618      	mov	r0, r3
 8004800:	f005 fdbb 	bl	800a37a <USB_HC_Halt>
 8004804:	e034      	b.n	8004870 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4413      	add	r3, r2
 800480e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004818:	2b80      	cmp	r3, #128	; 0x80
 800481a:	d129      	bne.n	8004870 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4413      	add	r3, r2
 8004824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	0151      	lsls	r1, r2, #5
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	440a      	add	r2, r1
 8004832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004836:	f043 0302 	orr.w	r3, r3, #2
 800483a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	212c      	movs	r1, #44	; 0x2c
 8004842:	fb01 f303 	mul.w	r3, r1, r3
 8004846:	4413      	add	r3, r2
 8004848:	3361      	adds	r3, #97	; 0x61
 800484a:	2206      	movs	r2, #6
 800484c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	4611      	mov	r1, r2
 8004858:	4618      	mov	r0, r3
 800485a:	f005 fd8e 	bl	800a37a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4413      	add	r3, r2
 8004866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486a:	461a      	mov	r2, r3
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4413      	add	r3, r2
 8004878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004886:	d122      	bne.n	80048ce <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4413      	add	r3, r2
 8004890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	440a      	add	r2, r1
 800489e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048a2:	f043 0302 	orr.w	r3, r3, #2
 80048a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	4611      	mov	r1, r2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f005 fd61 	bl	800a37a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c4:	461a      	mov	r2, r3
 80048c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048ca:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80048cc:	e2ba      	b.n	8004e44 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	f040 811b 	bne.w	8004b1c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d019      	beq.n	8004922 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	212c      	movs	r1, #44	; 0x2c
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	4413      	add	r3, r2
 80048fa:	3348      	adds	r3, #72	; 0x48
 80048fc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	0159      	lsls	r1, r3, #5
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	440b      	add	r3, r1
 8004906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004910:	1ad2      	subs	r2, r2, r3
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	202c      	movs	r0, #44	; 0x2c
 8004918:	fb00 f303 	mul.w	r3, r0, r3
 800491c:	440b      	add	r3, r1
 800491e:	3350      	adds	r3, #80	; 0x50
 8004920:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	212c      	movs	r1, #44	; 0x2c
 8004928:	fb01 f303 	mul.w	r3, r1, r3
 800492c:	4413      	add	r3, r2
 800492e:	3361      	adds	r3, #97	; 0x61
 8004930:	2201      	movs	r2, #1
 8004932:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	212c      	movs	r1, #44	; 0x2c
 800493a:	fb01 f303 	mul.w	r3, r1, r3
 800493e:	4413      	add	r3, r2
 8004940:	335c      	adds	r3, #92	; 0x5c
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4413      	add	r3, r2
 800494e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004952:	461a      	mov	r2, r3
 8004954:	2301      	movs	r3, #1
 8004956:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	212c      	movs	r1, #44	; 0x2c
 800495e:	fb01 f303 	mul.w	r3, r1, r3
 8004962:	4413      	add	r3, r2
 8004964:	333f      	adds	r3, #63	; 0x3f
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d009      	beq.n	8004980 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	212c      	movs	r1, #44	; 0x2c
 8004972:	fb01 f303 	mul.w	r3, r1, r3
 8004976:	4413      	add	r3, r2
 8004978:	333f      	adds	r3, #63	; 0x3f
 800497a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800497c:	2b02      	cmp	r3, #2
 800497e:	d121      	bne.n	80049c4 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	4413      	add	r3, r2
 8004988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	0151      	lsls	r1, r2, #5
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	440a      	add	r2, r1
 8004996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800499a:	f043 0302 	orr.w	r3, r3, #2
 800499e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	4611      	mov	r1, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f005 fce5 	bl	800a37a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049bc:	461a      	mov	r2, r3
 80049be:	2310      	movs	r3, #16
 80049c0:	6093      	str	r3, [r2, #8]
 80049c2:	e066      	b.n	8004a92 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	212c      	movs	r1, #44	; 0x2c
 80049ca:	fb01 f303 	mul.w	r3, r1, r3
 80049ce:	4413      	add	r3, r2
 80049d0:	333f      	adds	r3, #63	; 0x3f
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d127      	bne.n	8004a28 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	0151      	lsls	r1, r2, #5
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	440a      	add	r2, r1
 80049ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049f6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	212c      	movs	r1, #44	; 0x2c
 80049fe:	fb01 f303 	mul.w	r3, r1, r3
 8004a02:	4413      	add	r3, r2
 8004a04:	3360      	adds	r3, #96	; 0x60
 8004a06:	2201      	movs	r2, #1
 8004a08:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	b2d9      	uxtb	r1, r3
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	202c      	movs	r0, #44	; 0x2c
 8004a14:	fb00 f303 	mul.w	r3, r0, r3
 8004a18:	4413      	add	r3, r2
 8004a1a:	3360      	adds	r3, #96	; 0x60
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f007 fe67 	bl	800c6f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a26:	e034      	b.n	8004a92 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	212c      	movs	r1, #44	; 0x2c
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	333f      	adds	r3, #63	; 0x3f
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d12a      	bne.n	8004a92 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	212c      	movs	r1, #44	; 0x2c
 8004a42:	fb01 f303 	mul.w	r3, r1, r3
 8004a46:	4413      	add	r3, r2
 8004a48:	3360      	adds	r3, #96	; 0x60
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	212c      	movs	r1, #44	; 0x2c
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	4413      	add	r3, r2
 8004a5a:	3354      	adds	r3, #84	; 0x54
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	f083 0301 	eor.w	r3, r3, #1
 8004a62:	b2d8      	uxtb	r0, r3
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	212c      	movs	r1, #44	; 0x2c
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	3354      	adds	r3, #84	; 0x54
 8004a72:	4602      	mov	r2, r0
 8004a74:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	b2d9      	uxtb	r1, r3
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	202c      	movs	r0, #44	; 0x2c
 8004a80:	fb00 f303 	mul.w	r3, r0, r3
 8004a84:	4413      	add	r3, r2
 8004a86:	3360      	adds	r3, #96	; 0x60
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f007 fe31 	bl	800c6f4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d12b      	bne.n	8004af2 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	212c      	movs	r1, #44	; 0x2c
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3348      	adds	r3, #72	; 0x48
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	202c      	movs	r0, #44	; 0x2c
 8004ab0:	fb00 f202 	mul.w	r2, r0, r2
 8004ab4:	440a      	add	r2, r1
 8004ab6:	3240      	adds	r2, #64	; 0x40
 8004ab8:	8812      	ldrh	r2, [r2, #0]
 8004aba:	fbb3 f3f2 	udiv	r3, r3, r2
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 81be 	beq.w	8004e44 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	212c      	movs	r1, #44	; 0x2c
 8004ace:	fb01 f303 	mul.w	r3, r1, r3
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3354      	adds	r3, #84	; 0x54
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	f083 0301 	eor.w	r3, r3, #1
 8004adc:	b2d8      	uxtb	r0, r3
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	212c      	movs	r1, #44	; 0x2c
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	4413      	add	r3, r2
 8004aea:	3354      	adds	r3, #84	; 0x54
 8004aec:	4602      	mov	r2, r0
 8004aee:	701a      	strb	r2, [r3, #0]
}
 8004af0:	e1a8      	b.n	8004e44 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	212c      	movs	r1, #44	; 0x2c
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	3354      	adds	r3, #84	; 0x54
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	f083 0301 	eor.w	r3, r3, #1
 8004b06:	b2d8      	uxtb	r0, r3
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	212c      	movs	r1, #44	; 0x2c
 8004b0e:	fb01 f303 	mul.w	r3, r1, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	3354      	adds	r3, #84	; 0x54
 8004b16:	4602      	mov	r2, r0
 8004b18:	701a      	strb	r2, [r3, #0]
}
 8004b1a:	e193      	b.n	8004e44 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	f040 8106 	bne.w	8004d40 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	0151      	lsls	r1, r2, #5
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	440a      	add	r2, r1
 8004b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b4e:	f023 0302 	bic.w	r3, r3, #2
 8004b52:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	212c      	movs	r1, #44	; 0x2c
 8004b5a:	fb01 f303 	mul.w	r3, r1, r3
 8004b5e:	4413      	add	r3, r2
 8004b60:	3361      	adds	r3, #97	; 0x61
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d109      	bne.n	8004b7c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	212c      	movs	r1, #44	; 0x2c
 8004b6e:	fb01 f303 	mul.w	r3, r1, r3
 8004b72:	4413      	add	r3, r2
 8004b74:	3360      	adds	r3, #96	; 0x60
 8004b76:	2201      	movs	r2, #1
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	e0c9      	b.n	8004d10 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	212c      	movs	r1, #44	; 0x2c
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	4413      	add	r3, r2
 8004b88:	3361      	adds	r3, #97	; 0x61
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b05      	cmp	r3, #5
 8004b8e:	d109      	bne.n	8004ba4 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	212c      	movs	r1, #44	; 0x2c
 8004b96:	fb01 f303 	mul.w	r3, r1, r3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3360      	adds	r3, #96	; 0x60
 8004b9e:	2205      	movs	r2, #5
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	e0b5      	b.n	8004d10 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	212c      	movs	r1, #44	; 0x2c
 8004baa:	fb01 f303 	mul.w	r3, r1, r3
 8004bae:	4413      	add	r3, r2
 8004bb0:	3361      	adds	r3, #97	; 0x61
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b06      	cmp	r3, #6
 8004bb6:	d009      	beq.n	8004bcc <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	212c      	movs	r1, #44	; 0x2c
 8004bbe:	fb01 f303 	mul.w	r3, r1, r3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3361      	adds	r3, #97	; 0x61
 8004bc6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d150      	bne.n	8004c6e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	212c      	movs	r1, #44	; 0x2c
 8004bd2:	fb01 f303 	mul.w	r3, r1, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	335c      	adds	r3, #92	; 0x5c
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	202c      	movs	r0, #44	; 0x2c
 8004be4:	fb00 f303 	mul.w	r3, r0, r3
 8004be8:	440b      	add	r3, r1
 8004bea:	335c      	adds	r3, #92	; 0x5c
 8004bec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	212c      	movs	r1, #44	; 0x2c
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	335c      	adds	r3, #92	; 0x5c
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d912      	bls.n	8004c28 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	212c      	movs	r1, #44	; 0x2c
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	335c      	adds	r3, #92	; 0x5c
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	212c      	movs	r1, #44	; 0x2c
 8004c1a:	fb01 f303 	mul.w	r3, r1, r3
 8004c1e:	4413      	add	r3, r2
 8004c20:	3360      	adds	r3, #96	; 0x60
 8004c22:	2204      	movs	r2, #4
 8004c24:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c26:	e073      	b.n	8004d10 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	212c      	movs	r1, #44	; 0x2c
 8004c2e:	fb01 f303 	mul.w	r3, r1, r3
 8004c32:	4413      	add	r3, r2
 8004c34:	3360      	adds	r3, #96	; 0x60
 8004c36:	2202      	movs	r2, #2
 8004c38:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c50:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c58:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c66:	461a      	mov	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c6c:	e050      	b.n	8004d10 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	212c      	movs	r1, #44	; 0x2c
 8004c74:	fb01 f303 	mul.w	r3, r1, r3
 8004c78:	4413      	add	r3, r2
 8004c7a:	3361      	adds	r3, #97	; 0x61
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d122      	bne.n	8004cc8 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	212c      	movs	r1, #44	; 0x2c
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	3360      	adds	r3, #96	; 0x60
 8004c90:	2202      	movs	r2, #2
 8004c92:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004caa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cb2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e023      	b.n	8004d10 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	212c      	movs	r1, #44	; 0x2c
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3361      	adds	r3, #97	; 0x61
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b07      	cmp	r3, #7
 8004cda:	d119      	bne.n	8004d10 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	212c      	movs	r1, #44	; 0x2c
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	335c      	adds	r3, #92	; 0x5c
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	202c      	movs	r0, #44	; 0x2c
 8004cf4:	fb00 f303 	mul.w	r3, r0, r3
 8004cf8:	440b      	add	r3, r1
 8004cfa:	335c      	adds	r3, #92	; 0x5c
 8004cfc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	212c      	movs	r1, #44	; 0x2c
 8004d04:	fb01 f303 	mul.w	r3, r1, r3
 8004d08:	4413      	add	r3, r2
 8004d0a:	3360      	adds	r3, #96	; 0x60
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2302      	movs	r3, #2
 8004d20:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	b2d9      	uxtb	r1, r3
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	202c      	movs	r0, #44	; 0x2c
 8004d2c:	fb00 f303 	mul.w	r3, r0, r3
 8004d30:	4413      	add	r3, r2
 8004d32:	3360      	adds	r3, #96	; 0x60
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f007 fcdb 	bl	800c6f4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004d3e:	e081      	b.n	8004e44 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b10      	cmp	r3, #16
 8004d54:	d176      	bne.n	8004e44 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	212c      	movs	r1, #44	; 0x2c
 8004d5c:	fb01 f303 	mul.w	r3, r1, r3
 8004d60:	4413      	add	r3, r2
 8004d62:	333f      	adds	r3, #63	; 0x3f
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d121      	bne.n	8004dae <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	212c      	movs	r1, #44	; 0x2c
 8004d70:	fb01 f303 	mul.w	r3, r1, r3
 8004d74:	4413      	add	r3, r2
 8004d76:	335c      	adds	r3, #92	; 0x5c
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	0151      	lsls	r1, r2, #5
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	440a      	add	r2, r1
 8004d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d96:	f043 0302 	orr.w	r3, r3, #2
 8004d9a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	4611      	mov	r1, r2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f005 fae7 	bl	800a37a <USB_HC_Halt>
 8004dac:	e041      	b.n	8004e32 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	212c      	movs	r1, #44	; 0x2c
 8004db4:	fb01 f303 	mul.w	r3, r1, r3
 8004db8:	4413      	add	r3, r2
 8004dba:	333f      	adds	r3, #63	; 0x3f
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d009      	beq.n	8004dd6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	212c      	movs	r1, #44	; 0x2c
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	4413      	add	r3, r2
 8004dce:	333f      	adds	r3, #63	; 0x3f
 8004dd0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d12d      	bne.n	8004e32 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	212c      	movs	r1, #44	; 0x2c
 8004ddc:	fb01 f303 	mul.w	r3, r1, r3
 8004de0:	4413      	add	r3, r2
 8004de2:	335c      	adds	r3, #92	; 0x5c
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d120      	bne.n	8004e32 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	212c      	movs	r1, #44	; 0x2c
 8004df6:	fb01 f303 	mul.w	r3, r1, r3
 8004dfa:	4413      	add	r3, r2
 8004dfc:	3361      	adds	r3, #97	; 0x61
 8004dfe:	2203      	movs	r2, #3
 8004e00:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	0151      	lsls	r1, r2, #5
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	440a      	add	r2, r1
 8004e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e1c:	f043 0302 	orr.w	r3, r3, #2
 8004e20:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f005 faa4 	bl	800a37a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3e:	461a      	mov	r2, r3
 8004e40:	2310      	movs	r3, #16
 8004e42:	6093      	str	r3, [r2, #8]
}
 8004e44:	bf00      	nop
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d119      	bne.n	8004eb0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e88:	461a      	mov	r2, r3
 8004e8a:	2304      	movs	r3, #4
 8004e8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	0151      	lsls	r1, r2, #5
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	440a      	add	r2, r1
 8004ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ea8:	f043 0302 	orr.w	r3, r3, #2
 8004eac:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004eae:	e3c6      	b.n	800563e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d13e      	bne.n	8004f44 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2320      	movs	r3, #32
 8004ed6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	212c      	movs	r1, #44	; 0x2c
 8004ede:	fb01 f303 	mul.w	r3, r1, r3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	333d      	adds	r3, #61	; 0x3d
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	f040 83a8 	bne.w	800563e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	212c      	movs	r1, #44	; 0x2c
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	4413      	add	r3, r2
 8004efa:	333d      	adds	r3, #61	; 0x3d
 8004efc:	2200      	movs	r2, #0
 8004efe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	212c      	movs	r1, #44	; 0x2c
 8004f06:	fb01 f303 	mul.w	r3, r1, r3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3360      	adds	r3, #96	; 0x60
 8004f0e:	2202      	movs	r2, #2
 8004f10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	0151      	lsls	r1, r2, #5
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	440a      	add	r2, r1
 8004f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f2c:	f043 0302 	orr.w	r3, r3, #2
 8004f30:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f005 fa1c 	bl	800a37a <USB_HC_Halt>
}
 8004f42:	e37c      	b.n	800563e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f5a:	d122      	bne.n	8004fa2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	0151      	lsls	r1, r2, #5
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	440a      	add	r2, r1
 8004f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f76:	f043 0302 	orr.w	r3, r3, #2
 8004f7a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	4611      	mov	r1, r2
 8004f86:	4618      	mov	r0, r3
 8004f88:	f005 f9f7 	bl	800a37a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f98:	461a      	mov	r2, r3
 8004f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f9e:	6093      	str	r3, [r2, #8]
}
 8004fa0:	e34d      	b.n	800563e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d150      	bne.n	800505a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	212c      	movs	r1, #44	; 0x2c
 8004fbe:	fb01 f303 	mul.w	r3, r1, r3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	335c      	adds	r3, #92	; 0x5c
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fdc:	2b40      	cmp	r3, #64	; 0x40
 8004fde:	d111      	bne.n	8005004 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	212c      	movs	r1, #44	; 0x2c
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	4413      	add	r3, r2
 8004fec:	333d      	adds	r3, #61	; 0x3d
 8004fee:	2201      	movs	r2, #1
 8004ff0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ffe:	461a      	mov	r2, r3
 8005000:	2340      	movs	r3, #64	; 0x40
 8005002:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	4413      	add	r3, r2
 800500c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	0151      	lsls	r1, r2, #5
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	440a      	add	r2, r1
 800501a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800501e:	f043 0302 	orr.w	r3, r3, #2
 8005022:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f005 f9a3 	bl	800a37a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	4413      	add	r3, r2
 800503c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005040:	461a      	mov	r2, r3
 8005042:	2301      	movs	r3, #1
 8005044:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	212c      	movs	r1, #44	; 0x2c
 800504c:	fb01 f303 	mul.w	r3, r1, r3
 8005050:	4413      	add	r3, r2
 8005052:	3361      	adds	r3, #97	; 0x61
 8005054:	2201      	movs	r2, #1
 8005056:	701a      	strb	r2, [r3, #0]
}
 8005058:	e2f1      	b.n	800563e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	4413      	add	r3, r2
 8005062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b40      	cmp	r3, #64	; 0x40
 800506e:	d13c      	bne.n	80050ea <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	212c      	movs	r1, #44	; 0x2c
 8005076:	fb01 f303 	mul.w	r3, r1, r3
 800507a:	4413      	add	r3, r2
 800507c:	3361      	adds	r3, #97	; 0x61
 800507e:	2204      	movs	r2, #4
 8005080:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	212c      	movs	r1, #44	; 0x2c
 8005088:	fb01 f303 	mul.w	r3, r1, r3
 800508c:	4413      	add	r3, r2
 800508e:	333d      	adds	r3, #61	; 0x3d
 8005090:	2201      	movs	r2, #1
 8005092:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	212c      	movs	r1, #44	; 0x2c
 800509a:	fb01 f303 	mul.w	r3, r1, r3
 800509e:	4413      	add	r3, r2
 80050a0:	335c      	adds	r3, #92	; 0x5c
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050c0:	f043 0302 	orr.w	r3, r3, #2
 80050c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	4611      	mov	r1, r2
 80050d0:	4618      	mov	r0, r3
 80050d2:	f005 f952 	bl	800a37a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e2:	461a      	mov	r2, r3
 80050e4:	2340      	movs	r3, #64	; 0x40
 80050e6:	6093      	str	r3, [r2, #8]
}
 80050e8:	e2a9      	b.n	800563e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d12a      	bne.n	8005156 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	4413      	add	r3, r2
 8005108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510c:	461a      	mov	r2, r3
 800510e:	2308      	movs	r3, #8
 8005110:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	4413      	add	r3, r2
 800511a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	440a      	add	r2, r1
 8005128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800512c:	f043 0302 	orr.w	r3, r3, #2
 8005130:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	4611      	mov	r1, r2
 800513c:	4618      	mov	r0, r3
 800513e:	f005 f91c 	bl	800a37a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	212c      	movs	r1, #44	; 0x2c
 8005148:	fb01 f303 	mul.w	r3, r1, r3
 800514c:	4413      	add	r3, r2
 800514e:	3361      	adds	r3, #97	; 0x61
 8005150:	2205      	movs	r2, #5
 8005152:	701a      	strb	r2, [r3, #0]
}
 8005154:	e273      	b.n	800563e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	4413      	add	r3, r2
 800515e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b10      	cmp	r3, #16
 800516a:	d150      	bne.n	800520e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	212c      	movs	r1, #44	; 0x2c
 8005172:	fb01 f303 	mul.w	r3, r1, r3
 8005176:	4413      	add	r3, r2
 8005178:	335c      	adds	r3, #92	; 0x5c
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	212c      	movs	r1, #44	; 0x2c
 8005184:	fb01 f303 	mul.w	r3, r1, r3
 8005188:	4413      	add	r3, r2
 800518a:	3361      	adds	r3, #97	; 0x61
 800518c:	2203      	movs	r2, #3
 800518e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	212c      	movs	r1, #44	; 0x2c
 8005196:	fb01 f303 	mul.w	r3, r1, r3
 800519a:	4413      	add	r3, r2
 800519c:	333d      	adds	r3, #61	; 0x3d
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d112      	bne.n	80051ca <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	212c      	movs	r1, #44	; 0x2c
 80051aa:	fb01 f303 	mul.w	r3, r1, r3
 80051ae:	4413      	add	r3, r2
 80051b0:	333c      	adds	r3, #60	; 0x3c
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d108      	bne.n	80051ca <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	212c      	movs	r1, #44	; 0x2c
 80051be:	fb01 f303 	mul.w	r3, r1, r3
 80051c2:	4413      	add	r3, r2
 80051c4:	333d      	adds	r3, #61	; 0x3d
 80051c6:	2201      	movs	r2, #1
 80051c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	0151      	lsls	r1, r2, #5
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	440a      	add	r2, r1
 80051e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e4:	f043 0302 	orr.w	r3, r3, #2
 80051e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	4611      	mov	r1, r2
 80051f4:	4618      	mov	r0, r3
 80051f6:	f005 f8c0 	bl	800a37a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	4413      	add	r3, r2
 8005202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005206:	461a      	mov	r2, r3
 8005208:	2310      	movs	r3, #16
 800520a:	6093      	str	r3, [r2, #8]
}
 800520c:	e217      	b.n	800563e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	4413      	add	r3, r2
 8005216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005220:	2b80      	cmp	r3, #128	; 0x80
 8005222:	d174      	bne.n	800530e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d121      	bne.n	8005270 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	212c      	movs	r1, #44	; 0x2c
 8005232:	fb01 f303 	mul.w	r3, r1, r3
 8005236:	4413      	add	r3, r2
 8005238:	3361      	adds	r3, #97	; 0x61
 800523a:	2206      	movs	r2, #6
 800523c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	4413      	add	r3, r2
 8005246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	0151      	lsls	r1, r2, #5
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	440a      	add	r2, r1
 8005254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005258:	f043 0302 	orr.w	r3, r3, #2
 800525c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	4611      	mov	r1, r2
 8005268:	4618      	mov	r0, r3
 800526a:	f005 f886 	bl	800a37a <USB_HC_Halt>
 800526e:	e044      	b.n	80052fa <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	212c      	movs	r1, #44	; 0x2c
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	4413      	add	r3, r2
 800527c:	335c      	adds	r3, #92	; 0x5c
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	202c      	movs	r0, #44	; 0x2c
 8005288:	fb00 f303 	mul.w	r3, r0, r3
 800528c:	440b      	add	r3, r1
 800528e:	335c      	adds	r3, #92	; 0x5c
 8005290:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	212c      	movs	r1, #44	; 0x2c
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	4413      	add	r3, r2
 800529e:	335c      	adds	r3, #92	; 0x5c
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d920      	bls.n	80052e8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	212c      	movs	r1, #44	; 0x2c
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	4413      	add	r3, r2
 80052b2:	335c      	adds	r3, #92	; 0x5c
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	212c      	movs	r1, #44	; 0x2c
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	4413      	add	r3, r2
 80052c4:	3360      	adds	r3, #96	; 0x60
 80052c6:	2204      	movs	r2, #4
 80052c8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	b2d9      	uxtb	r1, r3
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	202c      	movs	r0, #44	; 0x2c
 80052d4:	fb00 f303 	mul.w	r3, r0, r3
 80052d8:	4413      	add	r3, r2
 80052da:	3360      	adds	r3, #96	; 0x60
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f007 fa07 	bl	800c6f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80052e6:	e008      	b.n	80052fa <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	212c      	movs	r1, #44	; 0x2c
 80052ee:	fb01 f303 	mul.w	r3, r1, r3
 80052f2:	4413      	add	r3, r2
 80052f4:	3360      	adds	r3, #96	; 0x60
 80052f6:	2202      	movs	r2, #2
 80052f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	4413      	add	r3, r2
 8005302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005306:	461a      	mov	r2, r3
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	6093      	str	r3, [r2, #8]
}
 800530c:	e197      	b.n	800563e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	4413      	add	r3, r2
 8005316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005324:	d134      	bne.n	8005390 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	4413      	add	r3, r2
 800532e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	440a      	add	r2, r1
 800533c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005340:	f043 0302 	orr.w	r3, r3, #2
 8005344:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	4611      	mov	r1, r2
 8005350:	4618      	mov	r0, r3
 8005352:	f005 f812 	bl	800a37a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	4413      	add	r3, r2
 800535e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005362:	461a      	mov	r2, r3
 8005364:	2310      	movs	r3, #16
 8005366:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	4413      	add	r3, r2
 8005370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005374:	461a      	mov	r2, r3
 8005376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800537a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	212c      	movs	r1, #44	; 0x2c
 8005382:	fb01 f303 	mul.w	r3, r1, r3
 8005386:	4413      	add	r3, r2
 8005388:	3361      	adds	r3, #97	; 0x61
 800538a:	2208      	movs	r2, #8
 800538c:	701a      	strb	r2, [r3, #0]
}
 800538e:	e156      	b.n	800563e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	4413      	add	r3, r2
 8005398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	f040 814b 	bne.w	800563e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	0151      	lsls	r1, r2, #5
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	440a      	add	r2, r1
 80053be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c2:	f023 0302 	bic.w	r3, r3, #2
 80053c6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	212c      	movs	r1, #44	; 0x2c
 80053ce:	fb01 f303 	mul.w	r3, r1, r3
 80053d2:	4413      	add	r3, r2
 80053d4:	3361      	adds	r3, #97	; 0x61
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d179      	bne.n	80054d0 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	212c      	movs	r1, #44	; 0x2c
 80053e2:	fb01 f303 	mul.w	r3, r1, r3
 80053e6:	4413      	add	r3, r2
 80053e8:	3360      	adds	r3, #96	; 0x60
 80053ea:	2201      	movs	r2, #1
 80053ec:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	212c      	movs	r1, #44	; 0x2c
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	4413      	add	r3, r2
 80053fa:	333f      	adds	r3, #63	; 0x3f
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d00a      	beq.n	8005418 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	212c      	movs	r1, #44	; 0x2c
 8005408:	fb01 f303 	mul.w	r3, r1, r3
 800540c:	4413      	add	r3, r2
 800540e:	333f      	adds	r3, #63	; 0x3f
 8005410:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005412:	2b03      	cmp	r3, #3
 8005414:	f040 80fc 	bne.w	8005610 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d142      	bne.n	80054a6 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	212c      	movs	r1, #44	; 0x2c
 8005426:	fb01 f303 	mul.w	r3, r1, r3
 800542a:	4413      	add	r3, r2
 800542c:	334c      	adds	r3, #76	; 0x4c
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 80ed 	beq.w	8005610 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	212c      	movs	r1, #44	; 0x2c
 800543c:	fb01 f303 	mul.w	r3, r1, r3
 8005440:	4413      	add	r3, r2
 8005442:	334c      	adds	r3, #76	; 0x4c
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	202c      	movs	r0, #44	; 0x2c
 800544c:	fb00 f202 	mul.w	r2, r0, r2
 8005450:	440a      	add	r2, r1
 8005452:	3240      	adds	r2, #64	; 0x40
 8005454:	8812      	ldrh	r2, [r2, #0]
 8005456:	4413      	add	r3, r2
 8005458:	3b01      	subs	r3, #1
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	202c      	movs	r0, #44	; 0x2c
 8005460:	fb00 f202 	mul.w	r2, r0, r2
 8005464:	440a      	add	r2, r1
 8005466:	3240      	adds	r2, #64	; 0x40
 8005468:	8812      	ldrh	r2, [r2, #0]
 800546a:	fbb3 f3f2 	udiv	r3, r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 80ca 	beq.w	8005610 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	212c      	movs	r1, #44	; 0x2c
 8005482:	fb01 f303 	mul.w	r3, r1, r3
 8005486:	4413      	add	r3, r2
 8005488:	3355      	adds	r3, #85	; 0x55
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	f083 0301 	eor.w	r3, r3, #1
 8005490:	b2d8      	uxtb	r0, r3
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	212c      	movs	r1, #44	; 0x2c
 8005498:	fb01 f303 	mul.w	r3, r1, r3
 800549c:	4413      	add	r3, r2
 800549e:	3355      	adds	r3, #85	; 0x55
 80054a0:	4602      	mov	r2, r0
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	e0b4      	b.n	8005610 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	212c      	movs	r1, #44	; 0x2c
 80054ac:	fb01 f303 	mul.w	r3, r1, r3
 80054b0:	4413      	add	r3, r2
 80054b2:	3355      	adds	r3, #85	; 0x55
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	f083 0301 	eor.w	r3, r3, #1
 80054ba:	b2d8      	uxtb	r0, r3
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	212c      	movs	r1, #44	; 0x2c
 80054c2:	fb01 f303 	mul.w	r3, r1, r3
 80054c6:	4413      	add	r3, r2
 80054c8:	3355      	adds	r3, #85	; 0x55
 80054ca:	4602      	mov	r2, r0
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	e09f      	b.n	8005610 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	212c      	movs	r1, #44	; 0x2c
 80054d6:	fb01 f303 	mul.w	r3, r1, r3
 80054da:	4413      	add	r3, r2
 80054dc:	3361      	adds	r3, #97	; 0x61
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d109      	bne.n	80054f8 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	212c      	movs	r1, #44	; 0x2c
 80054ea:	fb01 f303 	mul.w	r3, r1, r3
 80054ee:	4413      	add	r3, r2
 80054f0:	3360      	adds	r3, #96	; 0x60
 80054f2:	2202      	movs	r2, #2
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	e08b      	b.n	8005610 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	212c      	movs	r1, #44	; 0x2c
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	4413      	add	r3, r2
 8005504:	3361      	adds	r3, #97	; 0x61
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b04      	cmp	r3, #4
 800550a:	d109      	bne.n	8005520 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	212c      	movs	r1, #44	; 0x2c
 8005512:	fb01 f303 	mul.w	r3, r1, r3
 8005516:	4413      	add	r3, r2
 8005518:	3360      	adds	r3, #96	; 0x60
 800551a:	2202      	movs	r2, #2
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	e077      	b.n	8005610 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	212c      	movs	r1, #44	; 0x2c
 8005526:	fb01 f303 	mul.w	r3, r1, r3
 800552a:	4413      	add	r3, r2
 800552c:	3361      	adds	r3, #97	; 0x61
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b05      	cmp	r3, #5
 8005532:	d109      	bne.n	8005548 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	212c      	movs	r1, #44	; 0x2c
 800553a:	fb01 f303 	mul.w	r3, r1, r3
 800553e:	4413      	add	r3, r2
 8005540:	3360      	adds	r3, #96	; 0x60
 8005542:	2205      	movs	r2, #5
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	e063      	b.n	8005610 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	212c      	movs	r1, #44	; 0x2c
 800554e:	fb01 f303 	mul.w	r3, r1, r3
 8005552:	4413      	add	r3, r2
 8005554:	3361      	adds	r3, #97	; 0x61
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b06      	cmp	r3, #6
 800555a:	d009      	beq.n	8005570 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	212c      	movs	r1, #44	; 0x2c
 8005562:	fb01 f303 	mul.w	r3, r1, r3
 8005566:	4413      	add	r3, r2
 8005568:	3361      	adds	r3, #97	; 0x61
 800556a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800556c:	2b08      	cmp	r3, #8
 800556e:	d14f      	bne.n	8005610 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	212c      	movs	r1, #44	; 0x2c
 8005576:	fb01 f303 	mul.w	r3, r1, r3
 800557a:	4413      	add	r3, r2
 800557c:	335c      	adds	r3, #92	; 0x5c
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	202c      	movs	r0, #44	; 0x2c
 8005588:	fb00 f303 	mul.w	r3, r0, r3
 800558c:	440b      	add	r3, r1
 800558e:	335c      	adds	r3, #92	; 0x5c
 8005590:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	212c      	movs	r1, #44	; 0x2c
 8005598:	fb01 f303 	mul.w	r3, r1, r3
 800559c:	4413      	add	r3, r2
 800559e:	335c      	adds	r3, #92	; 0x5c
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d912      	bls.n	80055cc <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	212c      	movs	r1, #44	; 0x2c
 80055ac:	fb01 f303 	mul.w	r3, r1, r3
 80055b0:	4413      	add	r3, r2
 80055b2:	335c      	adds	r3, #92	; 0x5c
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	212c      	movs	r1, #44	; 0x2c
 80055be:	fb01 f303 	mul.w	r3, r1, r3
 80055c2:	4413      	add	r3, r2
 80055c4:	3360      	adds	r3, #96	; 0x60
 80055c6:	2204      	movs	r2, #4
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	e021      	b.n	8005610 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	212c      	movs	r1, #44	; 0x2c
 80055d2:	fb01 f303 	mul.w	r3, r1, r3
 80055d6:	4413      	add	r3, r2
 80055d8:	3360      	adds	r3, #96	; 0x60
 80055da:	2202      	movs	r2, #2
 80055dc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055f4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055fc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	4413      	add	r3, r2
 8005606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560a:	461a      	mov	r2, r3
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	4413      	add	r3, r2
 8005618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561c:	461a      	mov	r2, r3
 800561e:	2302      	movs	r3, #2
 8005620:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	b2d9      	uxtb	r1, r3
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	202c      	movs	r0, #44	; 0x2c
 800562c:	fb00 f303 	mul.w	r3, r0, r3
 8005630:	4413      	add	r3, r2
 8005632:	3360      	adds	r3, #96	; 0x60
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f007 f85b 	bl	800c6f4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800563e:	bf00      	nop
 8005640:	3720      	adds	r7, #32
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b08a      	sub	sp, #40	; 0x28
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	0c5b      	lsrs	r3, r3, #17
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	091b      	lsrs	r3, r3, #4
 8005676:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800567a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d004      	beq.n	800568c <HCD_RXQLVL_IRQHandler+0x46>
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2b05      	cmp	r3, #5
 8005686:	f000 80a9 	beq.w	80057dc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800568a:	e0aa      	b.n	80057e2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 80a6 	beq.w	80057e0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	212c      	movs	r1, #44	; 0x2c
 800569a:	fb01 f303 	mul.w	r3, r1, r3
 800569e:	4413      	add	r3, r2
 80056a0:	3344      	adds	r3, #68	; 0x44
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 809b 	beq.w	80057e0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	212c      	movs	r1, #44	; 0x2c
 80056b0:	fb01 f303 	mul.w	r3, r1, r3
 80056b4:	4413      	add	r3, r2
 80056b6:	3350      	adds	r3, #80	; 0x50
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	441a      	add	r2, r3
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	202c      	movs	r0, #44	; 0x2c
 80056c4:	fb00 f303 	mul.w	r3, r0, r3
 80056c8:	440b      	add	r3, r1
 80056ca:	334c      	adds	r3, #76	; 0x4c
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d87a      	bhi.n	80057c8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	212c      	movs	r1, #44	; 0x2c
 80056dc:	fb01 f303 	mul.w	r3, r1, r3
 80056e0:	4413      	add	r3, r2
 80056e2:	3344      	adds	r3, #68	; 0x44
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	b292      	uxth	r2, r2
 80056ea:	4619      	mov	r1, r3
 80056ec:	f004 f9e3 	bl	8009ab6 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	212c      	movs	r1, #44	; 0x2c
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	4413      	add	r3, r2
 80056fc:	3344      	adds	r3, #68	; 0x44
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	441a      	add	r2, r3
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	202c      	movs	r0, #44	; 0x2c
 800570a:	fb00 f303 	mul.w	r3, r0, r3
 800570e:	440b      	add	r3, r1
 8005710:	3344      	adds	r3, #68	; 0x44
 8005712:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	212c      	movs	r1, #44	; 0x2c
 800571a:	fb01 f303 	mul.w	r3, r1, r3
 800571e:	4413      	add	r3, r2
 8005720:	3350      	adds	r3, #80	; 0x50
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	441a      	add	r2, r3
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	202c      	movs	r0, #44	; 0x2c
 800572e:	fb00 f303 	mul.w	r3, r0, r3
 8005732:	440b      	add	r3, r1
 8005734:	3350      	adds	r3, #80	; 0x50
 8005736:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	4413      	add	r3, r2
 8005740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	0cdb      	lsrs	r3, r3, #19
 8005748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800574c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	212c      	movs	r1, #44	; 0x2c
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	4413      	add	r3, r2
 800575a:	3340      	adds	r3, #64	; 0x40
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4293      	cmp	r3, r2
 8005764:	d13c      	bne.n	80057e0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d039      	beq.n	80057e0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	4413      	add	r3, r2
 8005774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005782:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800578a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	4413      	add	r3, r2
 8005794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005798:	461a      	mov	r2, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	212c      	movs	r1, #44	; 0x2c
 80057a4:	fb01 f303 	mul.w	r3, r1, r3
 80057a8:	4413      	add	r3, r2
 80057aa:	3354      	adds	r3, #84	; 0x54
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	f083 0301 	eor.w	r3, r3, #1
 80057b2:	b2d8      	uxtb	r0, r3
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	212c      	movs	r1, #44	; 0x2c
 80057ba:	fb01 f303 	mul.w	r3, r1, r3
 80057be:	4413      	add	r3, r2
 80057c0:	3354      	adds	r3, #84	; 0x54
 80057c2:	4602      	mov	r2, r0
 80057c4:	701a      	strb	r2, [r3, #0]
      break;
 80057c6:	e00b      	b.n	80057e0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	212c      	movs	r1, #44	; 0x2c
 80057ce:	fb01 f303 	mul.w	r3, r1, r3
 80057d2:	4413      	add	r3, r2
 80057d4:	3360      	adds	r3, #96	; 0x60
 80057d6:	2204      	movs	r2, #4
 80057d8:	701a      	strb	r2, [r3, #0]
      break;
 80057da:	e001      	b.n	80057e0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80057dc:	bf00      	nop
 80057de:	e000      	b.n	80057e2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80057e0:	bf00      	nop
  }
}
 80057e2:	bf00      	nop
 80057e4:	3728      	adds	r7, #40	; 0x28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b086      	sub	sp, #24
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005816:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b02      	cmp	r3, #2
 8005820:	d10b      	bne.n	800583a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b01      	cmp	r3, #1
 800582a:	d102      	bne.n	8005832 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f006 ff45 	bl	800c6bc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f043 0302 	orr.w	r3, r3, #2
 8005838:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b08      	cmp	r3, #8
 8005842:	d132      	bne.n	80058aa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f043 0308 	orr.w	r3, r3, #8
 800584a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	2b04      	cmp	r3, #4
 8005854:	d126      	bne.n	80058a4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d113      	bne.n	8005886 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005864:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005868:	d106      	bne.n	8005878 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2102      	movs	r1, #2
 8005870:	4618      	mov	r0, r3
 8005872:	f004 fa5b 	bl	8009d2c <USB_InitFSLSPClkSel>
 8005876:	e011      	b.n	800589c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2101      	movs	r1, #1
 800587e:	4618      	mov	r0, r3
 8005880:	f004 fa54 	bl	8009d2c <USB_InitFSLSPClkSel>
 8005884:	e00a      	b.n	800589c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d106      	bne.n	800589c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005894:	461a      	mov	r2, r3
 8005896:	f64e 2360 	movw	r3, #60000	; 0xea60
 800589a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f006 ff37 	bl	800c710 <HAL_HCD_PortEnabled_Callback>
 80058a2:	e002      	b.n	80058aa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f006 ff41 	bl	800c72c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d103      	bne.n	80058bc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f043 0320 	orr.w	r3, r3, #32
 80058ba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058c2:	461a      	mov	r2, r3
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	6013      	str	r3, [r2, #0]
}
 80058c8:	bf00      	nop
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e12b      	b.n	8005b3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fc f94c 	bl	8001b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2224      	movs	r2, #36	; 0x24
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0201 	bic.w	r2, r2, #1
 8005912:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005922:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005932:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005934:	f002 f9f8 	bl	8007d28 <HAL_RCC_GetPCLK1Freq>
 8005938:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	4a81      	ldr	r2, [pc, #516]	; (8005b44 <HAL_I2C_Init+0x274>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d807      	bhi.n	8005954 <HAL_I2C_Init+0x84>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4a80      	ldr	r2, [pc, #512]	; (8005b48 <HAL_I2C_Init+0x278>)
 8005948:	4293      	cmp	r3, r2
 800594a:	bf94      	ite	ls
 800594c:	2301      	movls	r3, #1
 800594e:	2300      	movhi	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	e006      	b.n	8005962 <HAL_I2C_Init+0x92>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4a7d      	ldr	r2, [pc, #500]	; (8005b4c <HAL_I2C_Init+0x27c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	bf94      	ite	ls
 800595c:	2301      	movls	r3, #1
 800595e:	2300      	movhi	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e0e7      	b.n	8005b3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4a78      	ldr	r2, [pc, #480]	; (8005b50 <HAL_I2C_Init+0x280>)
 800596e:	fba2 2303 	umull	r2, r3, r2, r3
 8005972:	0c9b      	lsrs	r3, r3, #18
 8005974:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	430a      	orrs	r2, r1
 8005988:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	4a6a      	ldr	r2, [pc, #424]	; (8005b44 <HAL_I2C_Init+0x274>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d802      	bhi.n	80059a4 <HAL_I2C_Init+0xd4>
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	3301      	adds	r3, #1
 80059a2:	e009      	b.n	80059b8 <HAL_I2C_Init+0xe8>
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	4a69      	ldr	r2, [pc, #420]	; (8005b54 <HAL_I2C_Init+0x284>)
 80059b0:	fba2 2303 	umull	r2, r3, r2, r3
 80059b4:	099b      	lsrs	r3, r3, #6
 80059b6:	3301      	adds	r3, #1
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6812      	ldr	r2, [r2, #0]
 80059bc:	430b      	orrs	r3, r1
 80059be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	495c      	ldr	r1, [pc, #368]	; (8005b44 <HAL_I2C_Init+0x274>)
 80059d4:	428b      	cmp	r3, r1
 80059d6:	d819      	bhi.n	8005a0c <HAL_I2C_Init+0x13c>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	1e59      	subs	r1, r3, #1
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80059e6:	1c59      	adds	r1, r3, #1
 80059e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059ec:	400b      	ands	r3, r1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <HAL_I2C_Init+0x138>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1e59      	subs	r1, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a00:	3301      	adds	r3, #1
 8005a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a06:	e051      	b.n	8005aac <HAL_I2C_Init+0x1dc>
 8005a08:	2304      	movs	r3, #4
 8005a0a:	e04f      	b.n	8005aac <HAL_I2C_Init+0x1dc>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d111      	bne.n	8005a38 <HAL_I2C_Init+0x168>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	1e58      	subs	r0, r3, #1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6859      	ldr	r1, [r3, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	440b      	add	r3, r1
 8005a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a26:	3301      	adds	r3, #1
 8005a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	bf0c      	ite	eq
 8005a30:	2301      	moveq	r3, #1
 8005a32:	2300      	movne	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	e012      	b.n	8005a5e <HAL_I2C_Init+0x18e>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	1e58      	subs	r0, r3, #1
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6859      	ldr	r1, [r3, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	0099      	lsls	r1, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a4e:	3301      	adds	r3, #1
 8005a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	bf0c      	ite	eq
 8005a58:	2301      	moveq	r3, #1
 8005a5a:	2300      	movne	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <HAL_I2C_Init+0x196>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e022      	b.n	8005aac <HAL_I2C_Init+0x1dc>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10e      	bne.n	8005a8c <HAL_I2C_Init+0x1bc>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	1e58      	subs	r0, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6859      	ldr	r1, [r3, #4]
 8005a76:	460b      	mov	r3, r1
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	440b      	add	r3, r1
 8005a7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a80:	3301      	adds	r3, #1
 8005a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8a:	e00f      	b.n	8005aac <HAL_I2C_Init+0x1dc>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	1e58      	subs	r0, r3, #1
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6859      	ldr	r1, [r3, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	0099      	lsls	r1, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aac:	6879      	ldr	r1, [r7, #4]
 8005aae:	6809      	ldr	r1, [r1, #0]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	69da      	ldr	r2, [r3, #28]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ada:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6911      	ldr	r1, [r2, #16]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	68d2      	ldr	r2, [r2, #12]
 8005ae6:	4311      	orrs	r1, r2
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6812      	ldr	r2, [r2, #0]
 8005aec:	430b      	orrs	r3, r1
 8005aee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695a      	ldr	r2, [r3, #20]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	000186a0 	.word	0x000186a0
 8005b48:	001e847f 	.word	0x001e847f
 8005b4c:	003d08ff 	.word	0x003d08ff
 8005b50:	431bde83 	.word	0x431bde83
 8005b54:	10624dd3 	.word	0x10624dd3

08005b58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	607a      	str	r2, [r7, #4]
 8005b62:	461a      	mov	r2, r3
 8005b64:	460b      	mov	r3, r1
 8005b66:	817b      	strh	r3, [r7, #10]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b6c:	f7fd fe22 	bl	80037b4 <HAL_GetTick>
 8005b70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b20      	cmp	r3, #32
 8005b7c:	f040 80e0 	bne.w	8005d40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	2319      	movs	r3, #25
 8005b86:	2201      	movs	r2, #1
 8005b88:	4970      	ldr	r1, [pc, #448]	; (8005d4c <HAL_I2C_Master_Transmit+0x1f4>)
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 fe02 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b96:	2302      	movs	r3, #2
 8005b98:	e0d3      	b.n	8005d42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_I2C_Master_Transmit+0x50>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e0cc      	b.n	8005d42 <HAL_I2C_Master_Transmit+0x1ea>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d007      	beq.n	8005bce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0201 	orr.w	r2, r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2221      	movs	r2, #33	; 0x21
 8005be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2210      	movs	r2, #16
 8005bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	893a      	ldrh	r2, [r7, #8]
 8005bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4a50      	ldr	r2, [pc, #320]	; (8005d50 <HAL_I2C_Master_Transmit+0x1f8>)
 8005c0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c10:	8979      	ldrh	r1, [r7, #10]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	6a3a      	ldr	r2, [r7, #32]
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 fbbc 	bl	8006394 <I2C_MasterRequestWrite>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e08d      	b.n	8005d42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005c3c:	e066      	b.n	8005d0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	6a39      	ldr	r1, [r7, #32]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 fe7c 	bl	8006940 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00d      	beq.n	8005c6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d107      	bne.n	8005c66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e06b      	b.n	8005d42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	781a      	ldrb	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d11b      	bne.n	8005ce0 <HAL_I2C_Master_Transmit+0x188>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d017      	beq.n	8005ce0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	781a      	ldrb	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	6a39      	ldr	r1, [r7, #32]
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fe6c 	bl	80069c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00d      	beq.n	8005d0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d107      	bne.n	8005d08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e01a      	b.n	8005d42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d194      	bne.n	8005c3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e000      	b.n	8005d42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005d40:	2302      	movs	r3, #2
  }
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	00100002 	.word	0x00100002
 8005d50:	ffff0000 	.word	0xffff0000

08005d54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	4611      	mov	r1, r2
 8005d60:	461a      	mov	r2, r3
 8005d62:	4603      	mov	r3, r0
 8005d64:	817b      	strh	r3, [r7, #10]
 8005d66:	460b      	mov	r3, r1
 8005d68:	813b      	strh	r3, [r7, #8]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d6e:	f7fd fd21 	bl	80037b4 <HAL_GetTick>
 8005d72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	f040 80d9 	bne.w	8005f34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	2319      	movs	r3, #25
 8005d88:	2201      	movs	r2, #1
 8005d8a:	496d      	ldr	r1, [pc, #436]	; (8005f40 <HAL_I2C_Mem_Write+0x1ec>)
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 fd01 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e0cc      	b.n	8005f36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_I2C_Mem_Write+0x56>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e0c5      	b.n	8005f36 <HAL_I2C_Mem_Write+0x1e2>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d007      	beq.n	8005dd0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2221      	movs	r2, #33	; 0x21
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2240      	movs	r2, #64	; 0x40
 8005dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a3a      	ldr	r2, [r7, #32]
 8005dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4a4d      	ldr	r2, [pc, #308]	; (8005f44 <HAL_I2C_Mem_Write+0x1f0>)
 8005e10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e12:	88f8      	ldrh	r0, [r7, #6]
 8005e14:	893a      	ldrh	r2, [r7, #8]
 8005e16:	8979      	ldrh	r1, [r7, #10]
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	9301      	str	r3, [sp, #4]
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	4603      	mov	r3, r0
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 fb38 	bl	8006498 <I2C_RequestMemoryWrite>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d052      	beq.n	8005ed4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e081      	b.n	8005f36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 fd82 	bl	8006940 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00d      	beq.n	8005e5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d107      	bne.n	8005e5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e06b      	b.n	8005f36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	781a      	ldrb	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d11b      	bne.n	8005ed4 <HAL_I2C_Mem_Write+0x180>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d017      	beq.n	8005ed4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	781a      	ldrb	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1aa      	bne.n	8005e32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 fd6e 	bl	80069c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00d      	beq.n	8005f08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d107      	bne.n	8005f04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e016      	b.n	8005f36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	e000      	b.n	8005f36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005f34:	2302      	movs	r3, #2
  }
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	00100002 	.word	0x00100002
 8005f44:	ffff0000 	.word	0xffff0000

08005f48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08c      	sub	sp, #48	; 0x30
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	4608      	mov	r0, r1
 8005f52:	4611      	mov	r1, r2
 8005f54:	461a      	mov	r2, r3
 8005f56:	4603      	mov	r3, r0
 8005f58:	817b      	strh	r3, [r7, #10]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	813b      	strh	r3, [r7, #8]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f62:	f7fd fc27 	bl	80037b4 <HAL_GetTick>
 8005f66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	f040 8208 	bne.w	8006386 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	2319      	movs	r3, #25
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	497b      	ldr	r1, [pc, #492]	; (800616c <HAL_I2C_Mem_Read+0x224>)
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 fc07 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e1fb      	b.n	8006388 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <HAL_I2C_Mem_Read+0x56>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e1f4      	b.n	8006388 <HAL_I2C_Mem_Read+0x440>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d007      	beq.n	8005fc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2222      	movs	r2, #34	; 0x22
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2240      	movs	r2, #64	; 0x40
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4a5b      	ldr	r2, [pc, #364]	; (8006170 <HAL_I2C_Mem_Read+0x228>)
 8006004:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006006:	88f8      	ldrh	r0, [r7, #6]
 8006008:	893a      	ldrh	r2, [r7, #8]
 800600a:	8979      	ldrh	r1, [r7, #10]
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	9301      	str	r3, [sp, #4]
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	4603      	mov	r3, r0
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 fad4 	bl	80065c4 <I2C_RequestMemoryRead>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e1b0      	b.n	8006388 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602a:	2b00      	cmp	r3, #0
 800602c:	d113      	bne.n	8006056 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800602e:	2300      	movs	r3, #0
 8006030:	623b      	str	r3, [r7, #32]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	623b      	str	r3, [r7, #32]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	623b      	str	r3, [r7, #32]
 8006042:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	e184      	b.n	8006360 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605a:	2b01      	cmp	r3, #1
 800605c:	d11b      	bne.n	8006096 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800606c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800606e:	2300      	movs	r3, #0
 8006070:	61fb      	str	r3, [r7, #28]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	61fb      	str	r3, [r7, #28]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	61fb      	str	r3, [r7, #28]
 8006082:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	e164      	b.n	8006360 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800609a:	2b02      	cmp	r3, #2
 800609c:	d11b      	bne.n	80060d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060be:	2300      	movs	r3, #0
 80060c0:	61bb      	str	r3, [r7, #24]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	e144      	b.n	8006360 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060ec:	e138      	b.n	8006360 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	f200 80f1 	bhi.w	80062da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d123      	bne.n	8006148 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006102:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 fc9d 	bl	8006a44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e139      	b.n	8006388 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006146:	e10b      	b.n	8006360 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614c:	2b02      	cmp	r3, #2
 800614e:	d14e      	bne.n	80061ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006156:	2200      	movs	r2, #0
 8006158:	4906      	ldr	r1, [pc, #24]	; (8006174 <HAL_I2C_Mem_Read+0x22c>)
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 fb1a 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d008      	beq.n	8006178 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e10e      	b.n	8006388 <HAL_I2C_Mem_Read+0x440>
 800616a:	bf00      	nop
 800616c:	00100002 	.word	0x00100002
 8006170:	ffff0000 	.word	0xffff0000
 8006174:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691a      	ldr	r2, [r3, #16]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	b2d2      	uxtb	r2, r2
 8006194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a4:	3b01      	subs	r3, #1
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691a      	ldr	r2, [r3, #16]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061ec:	e0b8      	b.n	8006360 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f4:	2200      	movs	r2, #0
 80061f6:	4966      	ldr	r1, [pc, #408]	; (8006390 <HAL_I2C_Mem_Read+0x448>)
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 facb 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e0bf      	b.n	8006388 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691a      	ldr	r2, [r3, #16]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006234:	3b01      	subs	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006240:	b29b      	uxth	r3, r3
 8006242:	3b01      	subs	r3, #1
 8006244:	b29a      	uxth	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	2200      	movs	r2, #0
 8006252:	494f      	ldr	r1, [pc, #316]	; (8006390 <HAL_I2C_Mem_Read+0x448>)
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fa9d 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e091      	b.n	8006388 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691a      	ldr	r2, [r3, #16]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006290:	3b01      	subs	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c2:	3b01      	subs	r3, #1
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	3b01      	subs	r3, #1
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062d8:	e042      	b.n	8006360 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 fbb0 	bl	8006a44 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e04c      	b.n	8006388 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630a:	3b01      	subs	r3, #1
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	f003 0304 	and.w	r3, r3, #4
 800632a:	2b04      	cmp	r3, #4
 800632c:	d118      	bne.n	8006360 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	691a      	ldr	r2, [r3, #16]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006356:	b29b      	uxth	r3, r3
 8006358:	3b01      	subs	r3, #1
 800635a:	b29a      	uxth	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006364:	2b00      	cmp	r3, #0
 8006366:	f47f aec2 	bne.w	80060ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2220      	movs	r2, #32
 800636e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	e000      	b.n	8006388 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006386:	2302      	movs	r3, #2
  }
}
 8006388:	4618      	mov	r0, r3
 800638a:	3728      	adds	r7, #40	; 0x28
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	00010004 	.word	0x00010004

08006394 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	607a      	str	r2, [r7, #4]
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	460b      	mov	r3, r1
 80063a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d006      	beq.n	80063be <I2C_MasterRequestWrite+0x2a>
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d003      	beq.n	80063be <I2C_MasterRequestWrite+0x2a>
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063bc:	d108      	bne.n	80063d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	e00b      	b.n	80063e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	2b12      	cmp	r3, #18
 80063d6:	d107      	bne.n	80063e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 f9cd 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00d      	beq.n	800641c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640e:	d103      	bne.n	8006418 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006416:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e035      	b.n	8006488 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006424:	d108      	bne.n	8006438 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006426:	897b      	ldrh	r3, [r7, #10]
 8006428:	b2db      	uxtb	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006434:	611a      	str	r2, [r3, #16]
 8006436:	e01b      	b.n	8006470 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006438:	897b      	ldrh	r3, [r7, #10]
 800643a:	11db      	asrs	r3, r3, #7
 800643c:	b2db      	uxtb	r3, r3
 800643e:	f003 0306 	and.w	r3, r3, #6
 8006442:	b2db      	uxtb	r3, r3
 8006444:	f063 030f 	orn	r3, r3, #15
 8006448:	b2da      	uxtb	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	490e      	ldr	r1, [pc, #56]	; (8006490 <I2C_MasterRequestWrite+0xfc>)
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 f9f3 	bl	8006842 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e010      	b.n	8006488 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006466:	897b      	ldrh	r3, [r7, #10]
 8006468:	b2da      	uxtb	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	4907      	ldr	r1, [pc, #28]	; (8006494 <I2C_MasterRequestWrite+0x100>)
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 f9e3 	bl	8006842 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	00010008 	.word	0x00010008
 8006494:	00010002 	.word	0x00010002

08006498 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af02      	add	r7, sp, #8
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	4608      	mov	r0, r1
 80064a2:	4611      	mov	r1, r2
 80064a4:	461a      	mov	r2, r3
 80064a6:	4603      	mov	r3, r0
 80064a8:	817b      	strh	r3, [r7, #10]
 80064aa:	460b      	mov	r3, r1
 80064ac:	813b      	strh	r3, [r7, #8]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f960 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00d      	beq.n	80064f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e8:	d103      	bne.n	80064f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e05f      	b.n	80065b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064f6:	897b      	ldrh	r3, [r7, #10]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006504:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	6a3a      	ldr	r2, [r7, #32]
 800650a:	492d      	ldr	r1, [pc, #180]	; (80065c0 <I2C_RequestMemoryWrite+0x128>)
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f998 	bl	8006842 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e04c      	b.n	80065b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800651c:	2300      	movs	r3, #0
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006534:	6a39      	ldr	r1, [r7, #32]
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 fa02 	bl	8006940 <I2C_WaitOnTXEFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00d      	beq.n	800655e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	2b04      	cmp	r3, #4
 8006548:	d107      	bne.n	800655a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006558:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e02b      	b.n	80065b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d105      	bne.n	8006570 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006564:	893b      	ldrh	r3, [r7, #8]
 8006566:	b2da      	uxtb	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	611a      	str	r2, [r3, #16]
 800656e:	e021      	b.n	80065b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006570:	893b      	ldrh	r3, [r7, #8]
 8006572:	0a1b      	lsrs	r3, r3, #8
 8006574:	b29b      	uxth	r3, r3
 8006576:	b2da      	uxtb	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800657e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006580:	6a39      	ldr	r1, [r7, #32]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f9dc 	bl	8006940 <I2C_WaitOnTXEFlagUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00d      	beq.n	80065aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	2b04      	cmp	r3, #4
 8006594:	d107      	bne.n	80065a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e005      	b.n	80065b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065aa:	893b      	ldrh	r3, [r7, #8]
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	00010002 	.word	0x00010002

080065c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af02      	add	r7, sp, #8
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	4608      	mov	r0, r1
 80065ce:	4611      	mov	r1, r2
 80065d0:	461a      	mov	r2, r3
 80065d2:	4603      	mov	r3, r0
 80065d4:	817b      	strh	r3, [r7, #10]
 80065d6:	460b      	mov	r3, r1
 80065d8:	813b      	strh	r3, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	2200      	movs	r2, #0
 8006606:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 f8c2 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00d      	beq.n	8006632 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006624:	d103      	bne.n	800662e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800662c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e0aa      	b.n	8006788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006632:	897b      	ldrh	r3, [r7, #10]
 8006634:	b2db      	uxtb	r3, r3
 8006636:	461a      	mov	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006640:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	6a3a      	ldr	r2, [r7, #32]
 8006646:	4952      	ldr	r1, [pc, #328]	; (8006790 <I2C_RequestMemoryRead+0x1cc>)
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f8fa 	bl	8006842 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e097      	b.n	8006788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006658:	2300      	movs	r3, #0
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	617b      	str	r3, [r7, #20]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800666e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006670:	6a39      	ldr	r1, [r7, #32]
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 f964 	bl	8006940 <I2C_WaitOnTXEFlagUntilTimeout>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00d      	beq.n	800669a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	2b04      	cmp	r3, #4
 8006684:	d107      	bne.n	8006696 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006694:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e076      	b.n	8006788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d105      	bne.n	80066ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066a0:	893b      	ldrh	r3, [r7, #8]
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	611a      	str	r2, [r3, #16]
 80066aa:	e021      	b.n	80066f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066ac:	893b      	ldrh	r3, [r7, #8]
 80066ae:	0a1b      	lsrs	r3, r3, #8
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066bc:	6a39      	ldr	r1, [r7, #32]
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 f93e 	bl	8006940 <I2C_WaitOnTXEFlagUntilTimeout>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00d      	beq.n	80066e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d107      	bne.n	80066e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e050      	b.n	8006788 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066e6:	893b      	ldrh	r3, [r7, #8]
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f2:	6a39      	ldr	r1, [r7, #32]
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f923 	bl	8006940 <I2C_WaitOnTXEFlagUntilTimeout>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00d      	beq.n	800671c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	2b04      	cmp	r3, #4
 8006706:	d107      	bne.n	8006718 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006716:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e035      	b.n	8006788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800672a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	2200      	movs	r2, #0
 8006734:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 f82b 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00d      	beq.n	8006760 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006752:	d103      	bne.n	800675c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800675a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e013      	b.n	8006788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006760:	897b      	ldrh	r3, [r7, #10]
 8006762:	b2db      	uxtb	r3, r3
 8006764:	f043 0301 	orr.w	r3, r3, #1
 8006768:	b2da      	uxtb	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	6a3a      	ldr	r2, [r7, #32]
 8006774:	4906      	ldr	r1, [pc, #24]	; (8006790 <I2C_RequestMemoryRead+0x1cc>)
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f863 	bl	8006842 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e000      	b.n	8006788 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	00010002 	.word	0x00010002

08006794 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	603b      	str	r3, [r7, #0]
 80067a0:	4613      	mov	r3, r2
 80067a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067a4:	e025      	b.n	80067f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ac:	d021      	beq.n	80067f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ae:	f7fd f801 	bl	80037b4 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d302      	bcc.n	80067c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d116      	bne.n	80067f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	f043 0220 	orr.w	r2, r3, #32
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e023      	b.n	800683a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	0c1b      	lsrs	r3, r3, #16
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d10d      	bne.n	8006818 <I2C_WaitOnFlagUntilTimeout+0x84>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	43da      	mvns	r2, r3
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4013      	ands	r3, r2
 8006808:	b29b      	uxth	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	bf0c      	ite	eq
 800680e:	2301      	moveq	r3, #1
 8006810:	2300      	movne	r3, #0
 8006812:	b2db      	uxtb	r3, r3
 8006814:	461a      	mov	r2, r3
 8006816:	e00c      	b.n	8006832 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	43da      	mvns	r2, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4013      	ands	r3, r2
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	bf0c      	ite	eq
 800682a:	2301      	moveq	r3, #1
 800682c:	2300      	movne	r3, #0
 800682e:	b2db      	uxtb	r3, r3
 8006830:	461a      	mov	r2, r3
 8006832:	79fb      	ldrb	r3, [r7, #7]
 8006834:	429a      	cmp	r2, r3
 8006836:	d0b6      	beq.n	80067a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b084      	sub	sp, #16
 8006846:	af00      	add	r7, sp, #0
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	607a      	str	r2, [r7, #4]
 800684e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006850:	e051      	b.n	80068f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800685c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006860:	d123      	bne.n	80068aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006870:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800687a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2220      	movs	r2, #32
 8006886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	f043 0204 	orr.w	r2, r3, #4
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e046      	b.n	8006938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068b0:	d021      	beq.n	80068f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b2:	f7fc ff7f 	bl	80037b4 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d302      	bcc.n	80068c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d116      	bne.n	80068f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	f043 0220 	orr.w	r2, r3, #32
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e020      	b.n	8006938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	0c1b      	lsrs	r3, r3, #16
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d10c      	bne.n	800691a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	43da      	mvns	r2, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4013      	ands	r3, r2
 800690c:	b29b      	uxth	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	bf14      	ite	ne
 8006912:	2301      	movne	r3, #1
 8006914:	2300      	moveq	r3, #0
 8006916:	b2db      	uxtb	r3, r3
 8006918:	e00b      	b.n	8006932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	43da      	mvns	r2, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	4013      	ands	r3, r2
 8006926:	b29b      	uxth	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	bf14      	ite	ne
 800692c:	2301      	movne	r3, #1
 800692e:	2300      	moveq	r3, #0
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d18d      	bne.n	8006852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800694c:	e02d      	b.n	80069aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 f8ce 	bl	8006af0 <I2C_IsAcknowledgeFailed>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e02d      	b.n	80069ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006964:	d021      	beq.n	80069aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006966:	f7fc ff25 	bl	80037b4 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	429a      	cmp	r2, r3
 8006974:	d302      	bcc.n	800697c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d116      	bne.n	80069aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2220      	movs	r2, #32
 8006986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	f043 0220 	orr.w	r2, r3, #32
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e007      	b.n	80069ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b4:	2b80      	cmp	r3, #128	; 0x80
 80069b6:	d1ca      	bne.n	800694e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	60b9      	str	r1, [r7, #8]
 80069cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069ce:	e02d      	b.n	8006a2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 f88d 	bl	8006af0 <I2C_IsAcknowledgeFailed>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e02d      	b.n	8006a3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069e6:	d021      	beq.n	8006a2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e8:	f7fc fee4 	bl	80037b4 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d302      	bcc.n	80069fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d116      	bne.n	8006a2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	f043 0220 	orr.w	r2, r3, #32
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e007      	b.n	8006a3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	f003 0304 	and.w	r3, r3, #4
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d1ca      	bne.n	80069d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a50:	e042      	b.n	8006ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	2b10      	cmp	r3, #16
 8006a5e:	d119      	bne.n	8006a94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f06f 0210 	mvn.w	r2, #16
 8006a68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e029      	b.n	8006ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a94:	f7fc fe8e 	bl	80037b4 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d302      	bcc.n	8006aaa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d116      	bne.n	8006ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	f043 0220 	orr.w	r2, r3, #32
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e007      	b.n	8006ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae2:	2b40      	cmp	r3, #64	; 0x40
 8006ae4:	d1b5      	bne.n	8006a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b06:	d11b      	bne.n	8006b40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	f043 0204 	orr.w	r2, r3, #4
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e000      	b.n	8006b42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
	...

08006b50 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b088      	sub	sp, #32
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e128      	b.n	8006db4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a90      	ldr	r2, [pc, #576]	; (8006dbc <HAL_I2S_Init+0x26c>)
 8006b7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7fb f8a9 	bl	8001cd4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2202      	movs	r2, #2
 8006b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6812      	ldr	r2, [r2, #0]
 8006b94:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006b98:	f023 030f 	bic.w	r3, r3, #15
 8006b9c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d060      	beq.n	8006c70 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d102      	bne.n	8006bbc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006bb6:	2310      	movs	r3, #16
 8006bb8:	617b      	str	r3, [r7, #20]
 8006bba:	e001      	b.n	8006bc0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006bbc:	2320      	movs	r3, #32
 8006bbe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d802      	bhi.n	8006bce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006bce:	2001      	movs	r0, #1
 8006bd0:	f001 f9a0 	bl	8007f14 <HAL_RCCEx_GetPeriphCLKFreq>
 8006bd4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bde:	d125      	bne.n	8006c2c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d010      	beq.n	8006c0a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c04:	3305      	adds	r3, #5
 8006c06:	613b      	str	r3, [r7, #16]
 8006c08:	e01f      	b.n	8006c4a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c26:	3305      	adds	r3, #5
 8006c28:	613b      	str	r3, [r7, #16]
 8006c2a:	e00e      	b.n	8006c4a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c46:	3305      	adds	r3, #5
 8006c48:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	4a5c      	ldr	r2, [pc, #368]	; (8006dc0 <HAL_I2S_Init+0x270>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	08db      	lsrs	r3, r3, #3
 8006c54:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	085b      	lsrs	r3, r3, #1
 8006c66:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	e003      	b.n	8006c78 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006c70:	2302      	movs	r3, #2
 8006c72:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d902      	bls.n	8006c84 <HAL_I2S_Init+0x134>
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	2bff      	cmp	r3, #255	; 0xff
 8006c82:	d907      	bls.n	8006c94 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c88:	f043 0210 	orr.w	r2, r3, #16
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e08f      	b.n	8006db4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	691a      	ldr	r2, [r3, #16]
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	ea42 0103 	orr.w	r1, r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69fa      	ldr	r2, [r7, #28]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006cb2:	f023 030f 	bic.w	r3, r3, #15
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	6851      	ldr	r1, [r2, #4]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	6892      	ldr	r2, [r2, #8]
 8006cbe:	4311      	orrs	r1, r2
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	68d2      	ldr	r2, [r2, #12]
 8006cc4:	4311      	orrs	r1, r2
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	6992      	ldr	r2, [r2, #24]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cd6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d161      	bne.n	8006da4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a38      	ldr	r2, [pc, #224]	; (8006dc4 <HAL_I2S_Init+0x274>)
 8006ce4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a37      	ldr	r2, [pc, #220]	; (8006dc8 <HAL_I2S_Init+0x278>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d101      	bne.n	8006cf4 <HAL_I2S_Init+0x1a4>
 8006cf0:	4b36      	ldr	r3, [pc, #216]	; (8006dcc <HAL_I2S_Init+0x27c>)
 8006cf2:	e001      	b.n	8006cf8 <HAL_I2S_Init+0x1a8>
 8006cf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	6812      	ldr	r2, [r2, #0]
 8006cfe:	4932      	ldr	r1, [pc, #200]	; (8006dc8 <HAL_I2S_Init+0x278>)
 8006d00:	428a      	cmp	r2, r1
 8006d02:	d101      	bne.n	8006d08 <HAL_I2S_Init+0x1b8>
 8006d04:	4a31      	ldr	r2, [pc, #196]	; (8006dcc <HAL_I2S_Init+0x27c>)
 8006d06:	e001      	b.n	8006d0c <HAL_I2S_Init+0x1bc>
 8006d08:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006d0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006d10:	f023 030f 	bic.w	r3, r3, #15
 8006d14:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2b      	ldr	r2, [pc, #172]	; (8006dc8 <HAL_I2S_Init+0x278>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d101      	bne.n	8006d24 <HAL_I2S_Init+0x1d4>
 8006d20:	4b2a      	ldr	r3, [pc, #168]	; (8006dcc <HAL_I2S_Init+0x27c>)
 8006d22:	e001      	b.n	8006d28 <HAL_I2S_Init+0x1d8>
 8006d24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d28:	2202      	movs	r2, #2
 8006d2a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a25      	ldr	r2, [pc, #148]	; (8006dc8 <HAL_I2S_Init+0x278>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d101      	bne.n	8006d3a <HAL_I2S_Init+0x1ea>
 8006d36:	4b25      	ldr	r3, [pc, #148]	; (8006dcc <HAL_I2S_Init+0x27c>)
 8006d38:	e001      	b.n	8006d3e <HAL_I2S_Init+0x1ee>
 8006d3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d4a:	d003      	beq.n	8006d54 <HAL_I2S_Init+0x204>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d103      	bne.n	8006d5c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d58:	613b      	str	r3, [r7, #16]
 8006d5a:	e001      	b.n	8006d60 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006d74:	4313      	orrs	r3, r2
 8006d76:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	897b      	ldrh	r3, [r7, #10]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d8c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a0d      	ldr	r2, [pc, #52]	; (8006dc8 <HAL_I2S_Init+0x278>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d101      	bne.n	8006d9c <HAL_I2S_Init+0x24c>
 8006d98:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <HAL_I2S_Init+0x27c>)
 8006d9a:	e001      	b.n	8006da0 <HAL_I2S_Init+0x250>
 8006d9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006da0:	897a      	ldrh	r2, [r7, #10]
 8006da2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3720      	adds	r7, #32
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	08006ec7 	.word	0x08006ec7
 8006dc0:	cccccccd 	.word	0xcccccccd
 8006dc4:	08006fdd 	.word	0x08006fdd
 8006dc8:	40003800 	.word	0x40003800
 8006dcc:	40003400 	.word	0x40003400

08006dd0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	881a      	ldrh	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	1c9a      	adds	r2, r3, #2
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	3b01      	subs	r3, #1
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10e      	bne.n	8006e60 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e50:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7ff ffb8 	bl	8006dd0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006e60:	bf00      	nop
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	b292      	uxth	r2, r2
 8006e7c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	1c9a      	adds	r2, r3, #2
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10e      	bne.n	8006ebe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006eae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff ff93 	bl	8006de4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006ebe:	bf00      	nop
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b086      	sub	sp, #24
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d13a      	bne.n	8006f58 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d109      	bne.n	8006f00 <I2S_IRQHandler+0x3a>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	d102      	bne.n	8006f00 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff ffb4 	bl	8006e68 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f06:	2b40      	cmp	r3, #64	; 0x40
 8006f08:	d126      	bne.n	8006f58 <I2S_IRQHandler+0x92>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f003 0320 	and.w	r3, r3, #32
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	d11f      	bne.n	8006f58 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f26:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006f28:	2300      	movs	r3, #0
 8006f2a:	613b      	str	r3, [r7, #16]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4a:	f043 0202 	orr.w	r2, r3, #2
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff ff50 	bl	8006df8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d136      	bne.n	8006fd2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d109      	bne.n	8006f82 <I2S_IRQHandler+0xbc>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f78:	2b80      	cmp	r3, #128	; 0x80
 8006f7a:	d102      	bne.n	8006f82 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff ff45 	bl	8006e0c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f003 0308 	and.w	r3, r3, #8
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d122      	bne.n	8006fd2 <I2S_IRQHandler+0x10c>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f003 0320 	and.w	r3, r3, #32
 8006f96:	2b20      	cmp	r3, #32
 8006f98:	d11b      	bne.n	8006fd2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006fa8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc4:	f043 0204 	orr.w	r2, r3, #4
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff ff13 	bl	8006df8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fd2:	bf00      	nop
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4aa2      	ldr	r2, [pc, #648]	; (800727c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d101      	bne.n	8006ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006ff6:	4ba2      	ldr	r3, [pc, #648]	; (8007280 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ff8:	e001      	b.n	8006ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006ffa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a9b      	ldr	r2, [pc, #620]	; (800727c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d101      	bne.n	8007018 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007014:	4b9a      	ldr	r3, [pc, #616]	; (8007280 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007016:	e001      	b.n	800701c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007018:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007028:	d004      	beq.n	8007034 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	f040 8099 	bne.w	8007166 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b02      	cmp	r3, #2
 800703c:	d107      	bne.n	800704e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007044:	2b00      	cmp	r3, #0
 8007046:	d002      	beq.n	800704e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f925 	bl	8007298 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b01      	cmp	r3, #1
 8007056:	d107      	bne.n	8007068 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f9c8 	bl	80073f8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706e:	2b40      	cmp	r3, #64	; 0x40
 8007070:	d13a      	bne.n	80070e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	f003 0320 	and.w	r3, r3, #32
 8007078:	2b00      	cmp	r3, #0
 800707a:	d035      	beq.n	80070e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a7e      	ldr	r2, [pc, #504]	; (800727c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d101      	bne.n	800708a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007086:	4b7e      	ldr	r3, [pc, #504]	; (8007280 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007088:	e001      	b.n	800708e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800708a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4979      	ldr	r1, [pc, #484]	; (800727c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007096:	428b      	cmp	r3, r1
 8007098:	d101      	bne.n	800709e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800709a:	4b79      	ldr	r3, [pc, #484]	; (8007280 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800709c:	e001      	b.n	80070a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800709e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80070a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80070b8:	2300      	movs	r3, #0
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070da:	f043 0202 	orr.w	r2, r3, #2
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7ff fe88 	bl	8006df8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b08      	cmp	r3, #8
 80070f0:	f040 80be 	bne.w	8007270 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f003 0320 	and.w	r3, r3, #32
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 80b8 	beq.w	8007270 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800710e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a59      	ldr	r2, [pc, #356]	; (800727c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d101      	bne.n	800711e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800711a:	4b59      	ldr	r3, [pc, #356]	; (8007280 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800711c:	e001      	b.n	8007122 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800711e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4954      	ldr	r1, [pc, #336]	; (800727c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800712a:	428b      	cmp	r3, r1
 800712c:	d101      	bne.n	8007132 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800712e:	4b54      	ldr	r3, [pc, #336]	; (8007280 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007130:	e001      	b.n	8007136 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007132:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007136:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800713a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800713c:	2300      	movs	r3, #0
 800713e:	60bb      	str	r3, [r7, #8]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	60bb      	str	r3, [r7, #8]
 8007148:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007156:	f043 0204 	orr.w	r2, r3, #4
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7ff fe4a 	bl	8006df8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007164:	e084      	b.n	8007270 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b02      	cmp	r3, #2
 800716e:	d107      	bne.n	8007180 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f8be 	bl	80072fc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b01      	cmp	r3, #1
 8007188:	d107      	bne.n	800719a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f8fd 	bl	8007394 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a0:	2b40      	cmp	r3, #64	; 0x40
 80071a2:	d12f      	bne.n	8007204 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f003 0320 	and.w	r3, r3, #32
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d02a      	beq.n	8007204 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80071bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a2e      	ldr	r2, [pc, #184]	; (800727c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d101      	bne.n	80071cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80071c8:	4b2d      	ldr	r3, [pc, #180]	; (8007280 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80071ca:	e001      	b.n	80071d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80071cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4929      	ldr	r1, [pc, #164]	; (800727c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80071d8:	428b      	cmp	r3, r1
 80071da:	d101      	bne.n	80071e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80071dc:	4b28      	ldr	r3, [pc, #160]	; (8007280 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80071de:	e001      	b.n	80071e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80071e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80071e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f6:	f043 0202 	orr.w	r2, r3, #2
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7ff fdfa 	bl	8006df8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	f003 0308 	and.w	r3, r3, #8
 800720a:	2b08      	cmp	r3, #8
 800720c:	d131      	bne.n	8007272 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b00      	cmp	r3, #0
 8007216:	d02c      	beq.n	8007272 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a17      	ldr	r2, [pc, #92]	; (800727c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d101      	bne.n	8007226 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007222:	4b17      	ldr	r3, [pc, #92]	; (8007280 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007224:	e001      	b.n	800722a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007226:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4912      	ldr	r1, [pc, #72]	; (800727c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007232:	428b      	cmp	r3, r1
 8007234:	d101      	bne.n	800723a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007236:	4b12      	ldr	r3, [pc, #72]	; (8007280 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007238:	e001      	b.n	800723e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800723a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800723e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007242:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007252:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007260:	f043 0204 	orr.w	r2, r3, #4
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7ff fdc5 	bl	8006df8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800726e:	e000      	b.n	8007272 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007270:	bf00      	nop
}
 8007272:	bf00      	nop
 8007274:	3720      	adds	r7, #32
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	40003800 	.word	0x40003800
 8007280:	40003400 	.word	0x40003400

08007284 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	1c99      	adds	r1, r3, #2
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	6251      	str	r1, [r2, #36]	; 0x24
 80072aa:	881a      	ldrh	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d113      	bne.n	80072f2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d106      	bne.n	80072f2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7ff ffc9 	bl	8007284 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	1c99      	adds	r1, r3, #2
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	6251      	str	r1, [r2, #36]	; 0x24
 800730e:	8819      	ldrh	r1, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a1d      	ldr	r2, [pc, #116]	; (800738c <I2SEx_TxISR_I2SExt+0x90>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d101      	bne.n	800731e <I2SEx_TxISR_I2SExt+0x22>
 800731a:	4b1d      	ldr	r3, [pc, #116]	; (8007390 <I2SEx_TxISR_I2SExt+0x94>)
 800731c:	e001      	b.n	8007322 <I2SEx_TxISR_I2SExt+0x26>
 800731e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007322:	460a      	mov	r2, r1
 8007324:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732a:	b29b      	uxth	r3, r3
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d121      	bne.n	8007382 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a12      	ldr	r2, [pc, #72]	; (800738c <I2SEx_TxISR_I2SExt+0x90>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d101      	bne.n	800734c <I2SEx_TxISR_I2SExt+0x50>
 8007348:	4b11      	ldr	r3, [pc, #68]	; (8007390 <I2SEx_TxISR_I2SExt+0x94>)
 800734a:	e001      	b.n	8007350 <I2SEx_TxISR_I2SExt+0x54>
 800734c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	490d      	ldr	r1, [pc, #52]	; (800738c <I2SEx_TxISR_I2SExt+0x90>)
 8007358:	428b      	cmp	r3, r1
 800735a:	d101      	bne.n	8007360 <I2SEx_TxISR_I2SExt+0x64>
 800735c:	4b0c      	ldr	r3, [pc, #48]	; (8007390 <I2SEx_TxISR_I2SExt+0x94>)
 800735e:	e001      	b.n	8007364 <I2SEx_TxISR_I2SExt+0x68>
 8007360:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007364:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007368:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d106      	bne.n	8007382 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff ff81 	bl	8007284 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	40003800 	.word	0x40003800
 8007390:	40003400 	.word	0x40003400

08007394 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68d8      	ldr	r0, [r3, #12]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a6:	1c99      	adds	r1, r3, #2
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80073ac:	b282      	uxth	r2, r0
 80073ae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	3b01      	subs	r3, #1
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d113      	bne.n	80073f0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80073d6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d106      	bne.n	80073f0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff ff4a 	bl	8007284 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80073f0:	bf00      	nop
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a20      	ldr	r2, [pc, #128]	; (8007488 <I2SEx_RxISR_I2SExt+0x90>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d101      	bne.n	800740e <I2SEx_RxISR_I2SExt+0x16>
 800740a:	4b20      	ldr	r3, [pc, #128]	; (800748c <I2SEx_RxISR_I2SExt+0x94>)
 800740c:	e001      	b.n	8007412 <I2SEx_RxISR_I2SExt+0x1a>
 800740e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007412:	68d8      	ldr	r0, [r3, #12]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	1c99      	adds	r1, r3, #2
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800741e:	b282      	uxth	r2, r0
 8007420:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007426:	b29b      	uxth	r3, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	b29a      	uxth	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007434:	b29b      	uxth	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d121      	bne.n	800747e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a12      	ldr	r2, [pc, #72]	; (8007488 <I2SEx_RxISR_I2SExt+0x90>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d101      	bne.n	8007448 <I2SEx_RxISR_I2SExt+0x50>
 8007444:	4b11      	ldr	r3, [pc, #68]	; (800748c <I2SEx_RxISR_I2SExt+0x94>)
 8007446:	e001      	b.n	800744c <I2SEx_RxISR_I2SExt+0x54>
 8007448:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	490d      	ldr	r1, [pc, #52]	; (8007488 <I2SEx_RxISR_I2SExt+0x90>)
 8007454:	428b      	cmp	r3, r1
 8007456:	d101      	bne.n	800745c <I2SEx_RxISR_I2SExt+0x64>
 8007458:	4b0c      	ldr	r3, [pc, #48]	; (800748c <I2SEx_RxISR_I2SExt+0x94>)
 800745a:	e001      	b.n	8007460 <I2SEx_RxISR_I2SExt+0x68>
 800745c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007460:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007464:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800746a:	b29b      	uxth	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d106      	bne.n	800747e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff ff03 	bl	8007284 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800747e:	bf00      	nop
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	40003800 	.word	0x40003800
 800748c:	40003400 	.word	0x40003400

08007490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e264      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d075      	beq.n	800759a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074ae:	4ba3      	ldr	r3, [pc, #652]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f003 030c 	and.w	r3, r3, #12
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d00c      	beq.n	80074d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074ba:	4ba0      	ldr	r3, [pc, #640]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074c2:	2b08      	cmp	r3, #8
 80074c4:	d112      	bne.n	80074ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074c6:	4b9d      	ldr	r3, [pc, #628]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074d2:	d10b      	bne.n	80074ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074d4:	4b99      	ldr	r3, [pc, #612]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d05b      	beq.n	8007598 <HAL_RCC_OscConfig+0x108>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d157      	bne.n	8007598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e23f      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074f4:	d106      	bne.n	8007504 <HAL_RCC_OscConfig+0x74>
 80074f6:	4b91      	ldr	r3, [pc, #580]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a90      	ldr	r2, [pc, #576]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 80074fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	e01d      	b.n	8007540 <HAL_RCC_OscConfig+0xb0>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800750c:	d10c      	bne.n	8007528 <HAL_RCC_OscConfig+0x98>
 800750e:	4b8b      	ldr	r3, [pc, #556]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a8a      	ldr	r2, [pc, #552]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 8007514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	4b88      	ldr	r3, [pc, #544]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a87      	ldr	r2, [pc, #540]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 8007520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	e00b      	b.n	8007540 <HAL_RCC_OscConfig+0xb0>
 8007528:	4b84      	ldr	r3, [pc, #528]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a83      	ldr	r2, [pc, #524]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 800752e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	4b81      	ldr	r3, [pc, #516]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a80      	ldr	r2, [pc, #512]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 800753a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800753e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d013      	beq.n	8007570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007548:	f7fc f934 	bl	80037b4 <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007550:	f7fc f930 	bl	80037b4 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b64      	cmp	r3, #100	; 0x64
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e204      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007562:	4b76      	ldr	r3, [pc, #472]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0f0      	beq.n	8007550 <HAL_RCC_OscConfig+0xc0>
 800756e:	e014      	b.n	800759a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007570:	f7fc f920 	bl	80037b4 <HAL_GetTick>
 8007574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007576:	e008      	b.n	800758a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007578:	f7fc f91c 	bl	80037b4 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	2b64      	cmp	r3, #100	; 0x64
 8007584:	d901      	bls.n	800758a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e1f0      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800758a:	4b6c      	ldr	r3, [pc, #432]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1f0      	bne.n	8007578 <HAL_RCC_OscConfig+0xe8>
 8007596:	e000      	b.n	800759a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d063      	beq.n	800766e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075a6:	4b65      	ldr	r3, [pc, #404]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 030c 	and.w	r3, r3, #12
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00b      	beq.n	80075ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075b2:	4b62      	ldr	r3, [pc, #392]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075ba:	2b08      	cmp	r3, #8
 80075bc:	d11c      	bne.n	80075f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075be:	4b5f      	ldr	r3, [pc, #380]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d116      	bne.n	80075f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075ca:	4b5c      	ldr	r3, [pc, #368]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d005      	beq.n	80075e2 <HAL_RCC_OscConfig+0x152>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d001      	beq.n	80075e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e1c4      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075e2:	4b56      	ldr	r3, [pc, #344]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	4952      	ldr	r1, [pc, #328]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075f6:	e03a      	b.n	800766e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d020      	beq.n	8007642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007600:	4b4f      	ldr	r3, [pc, #316]	; (8007740 <HAL_RCC_OscConfig+0x2b0>)
 8007602:	2201      	movs	r2, #1
 8007604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007606:	f7fc f8d5 	bl	80037b4 <HAL_GetTick>
 800760a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800760c:	e008      	b.n	8007620 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800760e:	f7fc f8d1 	bl	80037b4 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d901      	bls.n	8007620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e1a5      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007620:	4b46      	ldr	r3, [pc, #280]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0f0      	beq.n	800760e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800762c:	4b43      	ldr	r3, [pc, #268]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	00db      	lsls	r3, r3, #3
 800763a:	4940      	ldr	r1, [pc, #256]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 800763c:	4313      	orrs	r3, r2
 800763e:	600b      	str	r3, [r1, #0]
 8007640:	e015      	b.n	800766e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007642:	4b3f      	ldr	r3, [pc, #252]	; (8007740 <HAL_RCC_OscConfig+0x2b0>)
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007648:	f7fc f8b4 	bl	80037b4 <HAL_GetTick>
 800764c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800764e:	e008      	b.n	8007662 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007650:	f7fc f8b0 	bl	80037b4 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b02      	cmp	r3, #2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e184      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007662:	4b36      	ldr	r3, [pc, #216]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1f0      	bne.n	8007650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0308 	and.w	r3, r3, #8
 8007676:	2b00      	cmp	r3, #0
 8007678:	d030      	beq.n	80076dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d016      	beq.n	80076b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007682:	4b30      	ldr	r3, [pc, #192]	; (8007744 <HAL_RCC_OscConfig+0x2b4>)
 8007684:	2201      	movs	r2, #1
 8007686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007688:	f7fc f894 	bl	80037b4 <HAL_GetTick>
 800768c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800768e:	e008      	b.n	80076a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007690:	f7fc f890 	bl	80037b4 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	2b02      	cmp	r3, #2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e164      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076a2:	4b26      	ldr	r3, [pc, #152]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 80076a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0f0      	beq.n	8007690 <HAL_RCC_OscConfig+0x200>
 80076ae:	e015      	b.n	80076dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076b0:	4b24      	ldr	r3, [pc, #144]	; (8007744 <HAL_RCC_OscConfig+0x2b4>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076b6:	f7fc f87d 	bl	80037b4 <HAL_GetTick>
 80076ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076bc:	e008      	b.n	80076d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076be:	f7fc f879 	bl	80037b4 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d901      	bls.n	80076d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e14d      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076d0:	4b1a      	ldr	r3, [pc, #104]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 80076d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1f0      	bne.n	80076be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 80a0 	beq.w	800782a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076ea:	2300      	movs	r3, #0
 80076ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076ee:	4b13      	ldr	r3, [pc, #76]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10f      	bne.n	800771a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076fa:	2300      	movs	r3, #0
 80076fc:	60bb      	str	r3, [r7, #8]
 80076fe:	4b0f      	ldr	r3, [pc, #60]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	4a0e      	ldr	r2, [pc, #56]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 8007704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007708:	6413      	str	r3, [r2, #64]	; 0x40
 800770a:	4b0c      	ldr	r3, [pc, #48]	; (800773c <HAL_RCC_OscConfig+0x2ac>)
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007712:	60bb      	str	r3, [r7, #8]
 8007714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007716:	2301      	movs	r3, #1
 8007718:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800771a:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <HAL_RCC_OscConfig+0x2b8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007722:	2b00      	cmp	r3, #0
 8007724:	d121      	bne.n	800776a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007726:	4b08      	ldr	r3, [pc, #32]	; (8007748 <HAL_RCC_OscConfig+0x2b8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a07      	ldr	r2, [pc, #28]	; (8007748 <HAL_RCC_OscConfig+0x2b8>)
 800772c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007732:	f7fc f83f 	bl	80037b4 <HAL_GetTick>
 8007736:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007738:	e011      	b.n	800775e <HAL_RCC_OscConfig+0x2ce>
 800773a:	bf00      	nop
 800773c:	40023800 	.word	0x40023800
 8007740:	42470000 	.word	0x42470000
 8007744:	42470e80 	.word	0x42470e80
 8007748:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800774c:	f7fc f832 	bl	80037b4 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d901      	bls.n	800775e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e106      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800775e:	4b85      	ldr	r3, [pc, #532]	; (8007974 <HAL_RCC_OscConfig+0x4e4>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007766:	2b00      	cmp	r3, #0
 8007768:	d0f0      	beq.n	800774c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d106      	bne.n	8007780 <HAL_RCC_OscConfig+0x2f0>
 8007772:	4b81      	ldr	r3, [pc, #516]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 8007774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007776:	4a80      	ldr	r2, [pc, #512]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 8007778:	f043 0301 	orr.w	r3, r3, #1
 800777c:	6713      	str	r3, [r2, #112]	; 0x70
 800777e:	e01c      	b.n	80077ba <HAL_RCC_OscConfig+0x32a>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	2b05      	cmp	r3, #5
 8007786:	d10c      	bne.n	80077a2 <HAL_RCC_OscConfig+0x312>
 8007788:	4b7b      	ldr	r3, [pc, #492]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 800778a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800778c:	4a7a      	ldr	r2, [pc, #488]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 800778e:	f043 0304 	orr.w	r3, r3, #4
 8007792:	6713      	str	r3, [r2, #112]	; 0x70
 8007794:	4b78      	ldr	r3, [pc, #480]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 8007796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007798:	4a77      	ldr	r2, [pc, #476]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 800779a:	f043 0301 	orr.w	r3, r3, #1
 800779e:	6713      	str	r3, [r2, #112]	; 0x70
 80077a0:	e00b      	b.n	80077ba <HAL_RCC_OscConfig+0x32a>
 80077a2:	4b75      	ldr	r3, [pc, #468]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 80077a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a6:	4a74      	ldr	r2, [pc, #464]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 80077a8:	f023 0301 	bic.w	r3, r3, #1
 80077ac:	6713      	str	r3, [r2, #112]	; 0x70
 80077ae:	4b72      	ldr	r3, [pc, #456]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 80077b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b2:	4a71      	ldr	r2, [pc, #452]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 80077b4:	f023 0304 	bic.w	r3, r3, #4
 80077b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d015      	beq.n	80077ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077c2:	f7fb fff7 	bl	80037b4 <HAL_GetTick>
 80077c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077c8:	e00a      	b.n	80077e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077ca:	f7fb fff3 	bl	80037b4 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d8:	4293      	cmp	r3, r2
 80077da:	d901      	bls.n	80077e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e0c5      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077e0:	4b65      	ldr	r3, [pc, #404]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 80077e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d0ee      	beq.n	80077ca <HAL_RCC_OscConfig+0x33a>
 80077ec:	e014      	b.n	8007818 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077ee:	f7fb ffe1 	bl	80037b4 <HAL_GetTick>
 80077f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077f4:	e00a      	b.n	800780c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077f6:	f7fb ffdd 	bl	80037b4 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	f241 3288 	movw	r2, #5000	; 0x1388
 8007804:	4293      	cmp	r3, r2
 8007806:	d901      	bls.n	800780c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e0af      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800780c:	4b5a      	ldr	r3, [pc, #360]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 800780e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1ee      	bne.n	80077f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d105      	bne.n	800782a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800781e:	4b56      	ldr	r3, [pc, #344]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 8007820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007822:	4a55      	ldr	r2, [pc, #340]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 8007824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007828:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 809b 	beq.w	800796a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007834:	4b50      	ldr	r3, [pc, #320]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f003 030c 	and.w	r3, r3, #12
 800783c:	2b08      	cmp	r3, #8
 800783e:	d05c      	beq.n	80078fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	2b02      	cmp	r3, #2
 8007846:	d141      	bne.n	80078cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007848:	4b4c      	ldr	r3, [pc, #304]	; (800797c <HAL_RCC_OscConfig+0x4ec>)
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800784e:	f7fb ffb1 	bl	80037b4 <HAL_GetTick>
 8007852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007854:	e008      	b.n	8007868 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007856:	f7fb ffad 	bl	80037b4 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	2b02      	cmp	r3, #2
 8007862:	d901      	bls.n	8007868 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e081      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007868:	4b43      	ldr	r3, [pc, #268]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1f0      	bne.n	8007856 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	69da      	ldr	r2, [r3, #28]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	431a      	orrs	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	019b      	lsls	r3, r3, #6
 8007884:	431a      	orrs	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788a:	085b      	lsrs	r3, r3, #1
 800788c:	3b01      	subs	r3, #1
 800788e:	041b      	lsls	r3, r3, #16
 8007890:	431a      	orrs	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007896:	061b      	lsls	r3, r3, #24
 8007898:	4937      	ldr	r1, [pc, #220]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 800789a:	4313      	orrs	r3, r2
 800789c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800789e:	4b37      	ldr	r3, [pc, #220]	; (800797c <HAL_RCC_OscConfig+0x4ec>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078a4:	f7fb ff86 	bl	80037b4 <HAL_GetTick>
 80078a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078aa:	e008      	b.n	80078be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078ac:	f7fb ff82 	bl	80037b4 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d901      	bls.n	80078be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e056      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078be:	4b2e      	ldr	r3, [pc, #184]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0f0      	beq.n	80078ac <HAL_RCC_OscConfig+0x41c>
 80078ca:	e04e      	b.n	800796a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078cc:	4b2b      	ldr	r3, [pc, #172]	; (800797c <HAL_RCC_OscConfig+0x4ec>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078d2:	f7fb ff6f 	bl	80037b4 <HAL_GetTick>
 80078d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078d8:	e008      	b.n	80078ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078da:	f7fb ff6b 	bl	80037b4 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d901      	bls.n	80078ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e03f      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ec:	4b22      	ldr	r3, [pc, #136]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1f0      	bne.n	80078da <HAL_RCC_OscConfig+0x44a>
 80078f8:	e037      	b.n	800796a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d101      	bne.n	8007906 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e032      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007906:	4b1c      	ldr	r3, [pc, #112]	; (8007978 <HAL_RCC_OscConfig+0x4e8>)
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d028      	beq.n	8007966 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800791e:	429a      	cmp	r2, r3
 8007920:	d121      	bne.n	8007966 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800792c:	429a      	cmp	r2, r3
 800792e:	d11a      	bne.n	8007966 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007936:	4013      	ands	r3, r2
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800793c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800793e:	4293      	cmp	r3, r2
 8007940:	d111      	bne.n	8007966 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794c:	085b      	lsrs	r3, r3, #1
 800794e:	3b01      	subs	r3, #1
 8007950:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007952:	429a      	cmp	r2, r3
 8007954:	d107      	bne.n	8007966 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007960:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007962:	429a      	cmp	r2, r3
 8007964:	d001      	beq.n	800796a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e000      	b.n	800796c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3718      	adds	r7, #24
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	40007000 	.word	0x40007000
 8007978:	40023800 	.word	0x40023800
 800797c:	42470060 	.word	0x42470060

08007980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d101      	bne.n	8007994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e0cc      	b.n	8007b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007994:	4b68      	ldr	r3, [pc, #416]	; (8007b38 <HAL_RCC_ClockConfig+0x1b8>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0307 	and.w	r3, r3, #7
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d90c      	bls.n	80079bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079a2:	4b65      	ldr	r3, [pc, #404]	; (8007b38 <HAL_RCC_ClockConfig+0x1b8>)
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	b2d2      	uxtb	r2, r2
 80079a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079aa:	4b63      	ldr	r3, [pc, #396]	; (8007b38 <HAL_RCC_ClockConfig+0x1b8>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0307 	and.w	r3, r3, #7
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d001      	beq.n	80079bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e0b8      	b.n	8007b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d020      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d005      	beq.n	80079e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079d4:	4b59      	ldr	r3, [pc, #356]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	4a58      	ldr	r2, [pc, #352]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 80079da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80079de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0308 	and.w	r3, r3, #8
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d005      	beq.n	80079f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079ec:	4b53      	ldr	r3, [pc, #332]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	4a52      	ldr	r2, [pc, #328]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 80079f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80079f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079f8:	4b50      	ldr	r3, [pc, #320]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	494d      	ldr	r1, [pc, #308]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d044      	beq.n	8007aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d107      	bne.n	8007a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a1e:	4b47      	ldr	r3, [pc, #284]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d119      	bne.n	8007a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e07f      	b.n	8007b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d003      	beq.n	8007a3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d107      	bne.n	8007a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a3e:	4b3f      	ldr	r3, [pc, #252]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d109      	bne.n	8007a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e06f      	b.n	8007b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a4e:	4b3b      	ldr	r3, [pc, #236]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e067      	b.n	8007b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a5e:	4b37      	ldr	r3, [pc, #220]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f023 0203 	bic.w	r2, r3, #3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	4934      	ldr	r1, [pc, #208]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a70:	f7fb fea0 	bl	80037b4 <HAL_GetTick>
 8007a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a76:	e00a      	b.n	8007a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a78:	f7fb fe9c 	bl	80037b4 <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d901      	bls.n	8007a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e04f      	b.n	8007b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a8e:	4b2b      	ldr	r3, [pc, #172]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f003 020c 	and.w	r2, r3, #12
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d1eb      	bne.n	8007a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007aa0:	4b25      	ldr	r3, [pc, #148]	; (8007b38 <HAL_RCC_ClockConfig+0x1b8>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0307 	and.w	r3, r3, #7
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d20c      	bcs.n	8007ac8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aae:	4b22      	ldr	r3, [pc, #136]	; (8007b38 <HAL_RCC_ClockConfig+0x1b8>)
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ab6:	4b20      	ldr	r3, [pc, #128]	; (8007b38 <HAL_RCC_ClockConfig+0x1b8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d001      	beq.n	8007ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e032      	b.n	8007b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d008      	beq.n	8007ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ad4:	4b19      	ldr	r3, [pc, #100]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	4916      	ldr	r1, [pc, #88]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0308 	and.w	r3, r3, #8
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d009      	beq.n	8007b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007af2:	4b12      	ldr	r3, [pc, #72]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	00db      	lsls	r3, r3, #3
 8007b00:	490e      	ldr	r1, [pc, #56]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b06:	f000 f821 	bl	8007b4c <HAL_RCC_GetSysClockFreq>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <HAL_RCC_ClockConfig+0x1bc>)
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	091b      	lsrs	r3, r3, #4
 8007b12:	f003 030f 	and.w	r3, r3, #15
 8007b16:	490a      	ldr	r1, [pc, #40]	; (8007b40 <HAL_RCC_ClockConfig+0x1c0>)
 8007b18:	5ccb      	ldrb	r3, [r1, r3]
 8007b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b1e:	4a09      	ldr	r2, [pc, #36]	; (8007b44 <HAL_RCC_ClockConfig+0x1c4>)
 8007b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b22:	4b09      	ldr	r3, [pc, #36]	; (8007b48 <HAL_RCC_ClockConfig+0x1c8>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fb fe00 	bl	800372c <HAL_InitTick>

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	40023c00 	.word	0x40023c00
 8007b3c:	40023800 	.word	0x40023800
 8007b40:	0800d42c 	.word	0x0800d42c
 8007b44:	20000004 	.word	0x20000004
 8007b48:	200000a0 	.word	0x200000a0

08007b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007b50:	b084      	sub	sp, #16
 8007b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	607b      	str	r3, [r7, #4]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b64:	4b67      	ldr	r3, [pc, #412]	; (8007d04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f003 030c 	and.w	r3, r3, #12
 8007b6c:	2b08      	cmp	r3, #8
 8007b6e:	d00d      	beq.n	8007b8c <HAL_RCC_GetSysClockFreq+0x40>
 8007b70:	2b08      	cmp	r3, #8
 8007b72:	f200 80bd 	bhi.w	8007cf0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <HAL_RCC_GetSysClockFreq+0x34>
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d003      	beq.n	8007b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8007b7e:	e0b7      	b.n	8007cf0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b80:	4b61      	ldr	r3, [pc, #388]	; (8007d08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007b82:	60bb      	str	r3, [r7, #8]
       break;
 8007b84:	e0b7      	b.n	8007cf6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b86:	4b61      	ldr	r3, [pc, #388]	; (8007d0c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007b88:	60bb      	str	r3, [r7, #8]
      break;
 8007b8a:	e0b4      	b.n	8007cf6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b8c:	4b5d      	ldr	r3, [pc, #372]	; (8007d04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b96:	4b5b      	ldr	r3, [pc, #364]	; (8007d04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d04d      	beq.n	8007c3e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ba2:	4b58      	ldr	r3, [pc, #352]	; (8007d04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	099b      	lsrs	r3, r3, #6
 8007ba8:	461a      	mov	r2, r3
 8007baa:	f04f 0300 	mov.w	r3, #0
 8007bae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007bb2:	f04f 0100 	mov.w	r1, #0
 8007bb6:	ea02 0800 	and.w	r8, r2, r0
 8007bba:	ea03 0901 	and.w	r9, r3, r1
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	4649      	mov	r1, r9
 8007bc2:	f04f 0200 	mov.w	r2, #0
 8007bc6:	f04f 0300 	mov.w	r3, #0
 8007bca:	014b      	lsls	r3, r1, #5
 8007bcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007bd0:	0142      	lsls	r2, r0, #5
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	ebb0 0008 	subs.w	r0, r0, r8
 8007bda:	eb61 0109 	sbc.w	r1, r1, r9
 8007bde:	f04f 0200 	mov.w	r2, #0
 8007be2:	f04f 0300 	mov.w	r3, #0
 8007be6:	018b      	lsls	r3, r1, #6
 8007be8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007bec:	0182      	lsls	r2, r0, #6
 8007bee:	1a12      	subs	r2, r2, r0
 8007bf0:	eb63 0301 	sbc.w	r3, r3, r1
 8007bf4:	f04f 0000 	mov.w	r0, #0
 8007bf8:	f04f 0100 	mov.w	r1, #0
 8007bfc:	00d9      	lsls	r1, r3, #3
 8007bfe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c02:	00d0      	lsls	r0, r2, #3
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	eb12 0208 	adds.w	r2, r2, r8
 8007c0c:	eb43 0309 	adc.w	r3, r3, r9
 8007c10:	f04f 0000 	mov.w	r0, #0
 8007c14:	f04f 0100 	mov.w	r1, #0
 8007c18:	0259      	lsls	r1, r3, #9
 8007c1a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007c1e:	0250      	lsls	r0, r2, #9
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4610      	mov	r0, r2
 8007c26:	4619      	mov	r1, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f04f 0300 	mov.w	r3, #0
 8007c30:	f7f8 ff36 	bl	8000aa0 <__aeabi_uldivmod>
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	4613      	mov	r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	e04a      	b.n	8007cd4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c3e:	4b31      	ldr	r3, [pc, #196]	; (8007d04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	099b      	lsrs	r3, r3, #6
 8007c44:	461a      	mov	r2, r3
 8007c46:	f04f 0300 	mov.w	r3, #0
 8007c4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007c4e:	f04f 0100 	mov.w	r1, #0
 8007c52:	ea02 0400 	and.w	r4, r2, r0
 8007c56:	ea03 0501 	and.w	r5, r3, r1
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	f04f 0300 	mov.w	r3, #0
 8007c66:	014b      	lsls	r3, r1, #5
 8007c68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007c6c:	0142      	lsls	r2, r0, #5
 8007c6e:	4610      	mov	r0, r2
 8007c70:	4619      	mov	r1, r3
 8007c72:	1b00      	subs	r0, r0, r4
 8007c74:	eb61 0105 	sbc.w	r1, r1, r5
 8007c78:	f04f 0200 	mov.w	r2, #0
 8007c7c:	f04f 0300 	mov.w	r3, #0
 8007c80:	018b      	lsls	r3, r1, #6
 8007c82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007c86:	0182      	lsls	r2, r0, #6
 8007c88:	1a12      	subs	r2, r2, r0
 8007c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8007c8e:	f04f 0000 	mov.w	r0, #0
 8007c92:	f04f 0100 	mov.w	r1, #0
 8007c96:	00d9      	lsls	r1, r3, #3
 8007c98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c9c:	00d0      	lsls	r0, r2, #3
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	1912      	adds	r2, r2, r4
 8007ca4:	eb45 0303 	adc.w	r3, r5, r3
 8007ca8:	f04f 0000 	mov.w	r0, #0
 8007cac:	f04f 0100 	mov.w	r1, #0
 8007cb0:	0299      	lsls	r1, r3, #10
 8007cb2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007cb6:	0290      	lsls	r0, r2, #10
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	f04f 0300 	mov.w	r3, #0
 8007cc8:	f7f8 feea 	bl	8000aa0 <__aeabi_uldivmod>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007cd4:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	0c1b      	lsrs	r3, r3, #16
 8007cda:	f003 0303 	and.w	r3, r3, #3
 8007cde:	3301      	adds	r3, #1
 8007ce0:	005b      	lsls	r3, r3, #1
 8007ce2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cec:	60bb      	str	r3, [r7, #8]
      break;
 8007cee:	e002      	b.n	8007cf6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007cf0:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007cf2:	60bb      	str	r3, [r7, #8]
      break;
 8007cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007d02:	bf00      	nop
 8007d04:	40023800 	.word	0x40023800
 8007d08:	00f42400 	.word	0x00f42400
 8007d0c:	007a1200 	.word	0x007a1200

08007d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d10:	b480      	push	{r7}
 8007d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d14:	4b03      	ldr	r3, [pc, #12]	; (8007d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d16:	681b      	ldr	r3, [r3, #0]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	20000004 	.word	0x20000004

08007d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007d2c:	f7ff fff0 	bl	8007d10 <HAL_RCC_GetHCLKFreq>
 8007d30:	4602      	mov	r2, r0
 8007d32:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	0a9b      	lsrs	r3, r3, #10
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	4903      	ldr	r1, [pc, #12]	; (8007d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d3e:	5ccb      	ldrb	r3, [r1, r3]
 8007d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	40023800 	.word	0x40023800
 8007d4c:	0800d43c 	.word	0x0800d43c

08007d50 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d105      	bne.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d035      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d78:	4b62      	ldr	r3, [pc, #392]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d7e:	f7fb fd19 	bl	80037b4 <HAL_GetTick>
 8007d82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d84:	e008      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007d86:	f7fb fd15 	bl	80037b4 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d901      	bls.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e0b0      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d98:	4b5b      	ldr	r3, [pc, #364]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1f0      	bne.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	019a      	lsls	r2, r3, #6
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	071b      	lsls	r3, r3, #28
 8007db0:	4955      	ldr	r1, [pc, #340]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007db2:	4313      	orrs	r3, r2
 8007db4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007db8:	4b52      	ldr	r3, [pc, #328]	; (8007f04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007dba:	2201      	movs	r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007dbe:	f7fb fcf9 	bl	80037b4 <HAL_GetTick>
 8007dc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007dc4:	e008      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007dc6:	f7fb fcf5 	bl	80037b4 <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d901      	bls.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e090      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007dd8:	4b4b      	ldr	r3, [pc, #300]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d0f0      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 8083 	beq.w	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007df2:	2300      	movs	r3, #0
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	4b44      	ldr	r3, [pc, #272]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfa:	4a43      	ldr	r2, [pc, #268]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e00:	6413      	str	r3, [r2, #64]	; 0x40
 8007e02:	4b41      	ldr	r3, [pc, #260]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007e0e:	4b3f      	ldr	r3, [pc, #252]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a3e      	ldr	r2, [pc, #248]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e1a:	f7fb fccb 	bl	80037b4 <HAL_GetTick>
 8007e1e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007e20:	e008      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007e22:	f7fb fcc7 	bl	80037b4 <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d901      	bls.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e062      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007e34:	4b35      	ldr	r3, [pc, #212]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d0f0      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007e40:	4b31      	ldr	r3, [pc, #196]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e48:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d02f      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d028      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e5e:	4b2a      	ldr	r3, [pc, #168]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e66:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e68:	4b29      	ldr	r3, [pc, #164]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e6e:	4b28      	ldr	r3, [pc, #160]	; (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007e74:	4a24      	ldr	r2, [pc, #144]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007e7a:	4b23      	ldr	r3, [pc, #140]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d114      	bne.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007e86:	f7fb fc95 	bl	80037b4 <HAL_GetTick>
 8007e8a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e8c:	e00a      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e8e:	f7fb fc91 	bl	80037b4 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d901      	bls.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e02a      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ea4:	4b18      	ldr	r3, [pc, #96]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0ee      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ebc:	d10d      	bne.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007ebe:	4b12      	ldr	r3, [pc, #72]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed2:	490d      	ldr	r1, [pc, #52]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	608b      	str	r3, [r1, #8]
 8007ed8:	e005      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007eda:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	4a0a      	ldr	r2, [pc, #40]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ee0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007ee4:	6093      	str	r3, [r2, #8]
 8007ee6:	4b08      	ldr	r3, [pc, #32]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ee8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ef2:	4905      	ldr	r1, [pc, #20]	; (8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	42470068 	.word	0x42470068
 8007f08:	40023800 	.word	0x40023800
 8007f0c:	40007000 	.word	0x40007000
 8007f10:	42470e40 	.word	0x42470e40

08007f14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d13e      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007f32:	4b23      	ldr	r3, [pc, #140]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d005      	beq.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d12f      	bne.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f48:	4b1e      	ldr	r3, [pc, #120]	; (8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007f4a:	617b      	str	r3, [r7, #20]
          break;
 8007f4c:	e02f      	b.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007f4e:	4b1c      	ldr	r3, [pc, #112]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f5a:	d108      	bne.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f5c:	4b18      	ldr	r3, [pc, #96]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f64:	4a18      	ldr	r2, [pc, #96]	; (8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6a:	613b      	str	r3, [r7, #16]
 8007f6c:	e007      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f6e:	4b14      	ldr	r3, [pc, #80]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f76:	4a15      	ldr	r2, [pc, #84]	; (8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f7c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007f7e:	4b10      	ldr	r3, [pc, #64]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f84:	099b      	lsrs	r3, r3, #6
 8007f86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	fb02 f303 	mul.w	r3, r2, r3
 8007f90:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007f92:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f98:	0f1b      	lsrs	r3, r3, #28
 8007f9a:	f003 0307 	and.w	r3, r3, #7
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa4:	617b      	str	r3, [r7, #20]
          break;
 8007fa6:	e002      	b.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	617b      	str	r3, [r7, #20]
          break;
 8007fac:	bf00      	nop
        }
      }
      break;
 8007fae:	bf00      	nop
    }
  }
  return frequency;
 8007fb0:	697b      	ldr	r3, [r7, #20]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	371c      	adds	r7, #28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	40023800 	.word	0x40023800
 8007fc4:	00bb8000 	.word	0x00bb8000
 8007fc8:	007a1200 	.word	0x007a1200
 8007fcc:	00f42400 	.word	0x00f42400

08007fd0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e01c      	b.n	800801c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	795b      	ldrb	r3, [r3, #5]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d105      	bne.n	8007ff8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7f9 fed6 	bl	8001da4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f042 0204 	orr.w	r2, r2, #4
 800800c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	791b      	ldrb	r3, [r3, #4]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d101      	bne.n	800803e <HAL_RNG_GenerateRandomNumber+0x1a>
 800803a:	2302      	movs	r3, #2
 800803c:	e03d      	b.n	80080ba <HAL_RNG_GenerateRandomNumber+0x96>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	795b      	ldrb	r3, [r3, #5]
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b01      	cmp	r3, #1
 800804c:	d12c      	bne.n	80080a8 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2202      	movs	r2, #2
 8008052:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008054:	f7fb fbae 	bl	80037b4 <HAL_GetTick>
 8008058:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800805a:	e011      	b.n	8008080 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800805c:	f7fb fbaa 	bl	80037b4 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	2b02      	cmp	r3, #2
 8008068:	d90a      	bls.n	8008080 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2202      	movs	r2, #2
 8008074:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e01c      	b.n	80080ba <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b01      	cmp	r3, #1
 800808c:	d1e6      	bne.n	800805c <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689a      	ldr	r2, [r3, #8]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	715a      	strb	r2, [r3, #5]
 80080a6:	e004      	b.n	80080b2 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2204      	movs	r2, #4
 80080ac:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	711a      	strb	r2, [r3, #4]

  return status;
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b082      	sub	sp, #8
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	330c      	adds	r3, #12
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7ff ffa7 	bl	8008024 <HAL_RNG_GenerateRandomNumber>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d102      	bne.n	80080e2 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	e000      	b.n	80080e4 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 80080e2:	2300      	movs	r3, #0
  }
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e07b      	b.n	80081f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	2b00      	cmp	r3, #0
 8008104:	d108      	bne.n	8008118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800810e:	d009      	beq.n	8008124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	61da      	str	r2, [r3, #28]
 8008116:	e005      	b.n	8008124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7f9 fe52 	bl	8001de8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800815a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800816c:	431a      	orrs	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008176:	431a      	orrs	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	f003 0302 	and.w	r3, r3, #2
 8008180:	431a      	orrs	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	431a      	orrs	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008194:	431a      	orrs	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800819e:	431a      	orrs	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a1b      	ldr	r3, [r3, #32]
 80081a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a8:	ea42 0103 	orr.w	r1, r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	0c1b      	lsrs	r3, r3, #16
 80081c2:	f003 0104 	and.w	r1, r3, #4
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	f003 0210 	and.w	r2, r3, #16
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	69da      	ldr	r2, [r3, #28]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b088      	sub	sp, #32
 8008202:	af00      	add	r7, sp, #0
 8008204:	60f8      	str	r0, [r7, #12]
 8008206:	60b9      	str	r1, [r7, #8]
 8008208:	603b      	str	r3, [r7, #0]
 800820a:	4613      	mov	r3, r2
 800820c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008218:	2b01      	cmp	r3, #1
 800821a:	d101      	bne.n	8008220 <HAL_SPI_Transmit+0x22>
 800821c:	2302      	movs	r3, #2
 800821e:	e126      	b.n	800846e <HAL_SPI_Transmit+0x270>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008228:	f7fb fac4 	bl	80037b4 <HAL_GetTick>
 800822c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800822e:	88fb      	ldrh	r3, [r7, #6]
 8008230:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b01      	cmp	r3, #1
 800823c:	d002      	beq.n	8008244 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800823e:	2302      	movs	r3, #2
 8008240:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008242:	e10b      	b.n	800845c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <HAL_SPI_Transmit+0x52>
 800824a:	88fb      	ldrh	r3, [r7, #6]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d102      	bne.n	8008256 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008254:	e102      	b.n	800845c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2203      	movs	r2, #3
 800825a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	88fa      	ldrh	r2, [r7, #6]
 800826e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	88fa      	ldrh	r2, [r7, #6]
 8008274:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800829c:	d10f      	bne.n	80082be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c8:	2b40      	cmp	r3, #64	; 0x40
 80082ca:	d007      	beq.n	80082dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082e4:	d14b      	bne.n	800837e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d002      	beq.n	80082f4 <HAL_SPI_Transmit+0xf6>
 80082ee:	8afb      	ldrh	r3, [r7, #22]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d13e      	bne.n	8008372 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f8:	881a      	ldrh	r2, [r3, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008304:	1c9a      	adds	r2, r3, #2
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800830e:	b29b      	uxth	r3, r3
 8008310:	3b01      	subs	r3, #1
 8008312:	b29a      	uxth	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008318:	e02b      	b.n	8008372 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f003 0302 	and.w	r3, r3, #2
 8008324:	2b02      	cmp	r3, #2
 8008326:	d112      	bne.n	800834e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832c:	881a      	ldrh	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008338:	1c9a      	adds	r2, r3, #2
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008342:	b29b      	uxth	r3, r3
 8008344:	3b01      	subs	r3, #1
 8008346:	b29a      	uxth	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	86da      	strh	r2, [r3, #54]	; 0x36
 800834c:	e011      	b.n	8008372 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800834e:	f7fb fa31 	bl	80037b4 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	d803      	bhi.n	8008366 <HAL_SPI_Transmit+0x168>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008364:	d102      	bne.n	800836c <HAL_SPI_Transmit+0x16e>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d102      	bne.n	8008372 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008370:	e074      	b.n	800845c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008376:	b29b      	uxth	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1ce      	bne.n	800831a <HAL_SPI_Transmit+0x11c>
 800837c:	e04c      	b.n	8008418 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d002      	beq.n	800838c <HAL_SPI_Transmit+0x18e>
 8008386:	8afb      	ldrh	r3, [r7, #22]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d140      	bne.n	800840e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	330c      	adds	r3, #12
 8008396:	7812      	ldrb	r2, [r2, #0]
 8008398:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	3b01      	subs	r3, #1
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80083b2:	e02c      	b.n	800840e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d113      	bne.n	80083ea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	330c      	adds	r3, #12
 80083cc:	7812      	ldrb	r2, [r2, #0]
 80083ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d4:	1c5a      	adds	r2, r3, #1
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083de:	b29b      	uxth	r3, r3
 80083e0:	3b01      	subs	r3, #1
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80083e8:	e011      	b.n	800840e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083ea:	f7fb f9e3 	bl	80037b4 <HAL_GetTick>
 80083ee:	4602      	mov	r2, r0
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d803      	bhi.n	8008402 <HAL_SPI_Transmit+0x204>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008400:	d102      	bne.n	8008408 <HAL_SPI_Transmit+0x20a>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d102      	bne.n	800840e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800840c:	e026      	b.n	800845c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008412:	b29b      	uxth	r3, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1cd      	bne.n	80083b4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008418:	69ba      	ldr	r2, [r7, #24]
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f000 f8b3 	bl	8008588 <SPI_EndRxTxTransaction>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d002      	beq.n	800842e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2220      	movs	r2, #32
 800842c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10a      	bne.n	800844c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008436:	2300      	movs	r3, #0
 8008438:	613b      	str	r3, [r7, #16]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	613b      	str	r3, [r7, #16]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	613b      	str	r3, [r7, #16]
 800844a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	77fb      	strb	r3, [r7, #31]
 8008458:	e000      	b.n	800845c <HAL_SPI_Transmit+0x25e>
  }

error:
 800845a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800846c:	7ffb      	ldrb	r3, [r7, #31]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3720      	adds	r7, #32
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	4613      	mov	r3, r2
 8008486:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008488:	f7fb f994 	bl	80037b4 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008490:	1a9b      	subs	r3, r3, r2
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	4413      	add	r3, r2
 8008496:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008498:	f7fb f98c 	bl	80037b4 <HAL_GetTick>
 800849c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800849e:	4b39      	ldr	r3, [pc, #228]	; (8008584 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	015b      	lsls	r3, r3, #5
 80084a4:	0d1b      	lsrs	r3, r3, #20
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	fb02 f303 	mul.w	r3, r2, r3
 80084ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084ae:	e054      	b.n	800855a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084b6:	d050      	beq.n	800855a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084b8:	f7fb f97c 	bl	80037b4 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	69fa      	ldr	r2, [r7, #28]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d902      	bls.n	80084ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d13d      	bne.n	800854a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80084dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084e6:	d111      	bne.n	800850c <SPI_WaitFlagStateUntilTimeout+0x94>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084f0:	d004      	beq.n	80084fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084fa:	d107      	bne.n	800850c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800850a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008514:	d10f      	bne.n	8008536 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008534:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e017      	b.n	800857a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	3b01      	subs	r3, #1
 8008558:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	4013      	ands	r3, r2
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	429a      	cmp	r2, r3
 8008568:	bf0c      	ite	eq
 800856a:	2301      	moveq	r3, #1
 800856c:	2300      	movne	r3, #0
 800856e:	b2db      	uxtb	r3, r3
 8008570:	461a      	mov	r2, r3
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	429a      	cmp	r2, r3
 8008576:	d19b      	bne.n	80084b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3720      	adds	r7, #32
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20000004 	.word	0x20000004

08008588 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af02      	add	r7, sp, #8
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008594:	4b1b      	ldr	r3, [pc, #108]	; (8008604 <SPI_EndRxTxTransaction+0x7c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a1b      	ldr	r2, [pc, #108]	; (8008608 <SPI_EndRxTxTransaction+0x80>)
 800859a:	fba2 2303 	umull	r2, r3, r2, r3
 800859e:	0d5b      	lsrs	r3, r3, #21
 80085a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085a4:	fb02 f303 	mul.w	r3, r2, r3
 80085a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085b2:	d112      	bne.n	80085da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2200      	movs	r2, #0
 80085bc:	2180      	movs	r1, #128	; 0x80
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7ff ff5a 	bl	8008478 <SPI_WaitFlagStateUntilTimeout>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d016      	beq.n	80085f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ce:	f043 0220 	orr.w	r2, r3, #32
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e00f      	b.n	80085fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	3b01      	subs	r3, #1
 80085e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f0:	2b80      	cmp	r3, #128	; 0x80
 80085f2:	d0f2      	beq.n	80085da <SPI_EndRxTxTransaction+0x52>
 80085f4:	e000      	b.n	80085f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80085f6:	bf00      	nop
  }

  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3718      	adds	r7, #24
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	20000004 	.word	0x20000004
 8008608:	165e9f81 	.word	0x165e9f81

0800860c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e041      	b.n	80086a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d106      	bne.n	8008638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7f9 fcbe 	bl	8001fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2202      	movs	r2, #2
 800863c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3304      	adds	r3, #4
 8008648:	4619      	mov	r1, r3
 800864a:	4610      	mov	r0, r2
 800864c:	f000 fd68 	bl	8009120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d001      	beq.n	80086c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e04e      	b.n	8008762 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2202      	movs	r2, #2
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f042 0201 	orr.w	r2, r2, #1
 80086da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a23      	ldr	r2, [pc, #140]	; (8008770 <HAL_TIM_Base_Start_IT+0xc4>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d022      	beq.n	800872c <HAL_TIM_Base_Start_IT+0x80>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ee:	d01d      	beq.n	800872c <HAL_TIM_Base_Start_IT+0x80>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a1f      	ldr	r2, [pc, #124]	; (8008774 <HAL_TIM_Base_Start_IT+0xc8>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d018      	beq.n	800872c <HAL_TIM_Base_Start_IT+0x80>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a1e      	ldr	r2, [pc, #120]	; (8008778 <HAL_TIM_Base_Start_IT+0xcc>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d013      	beq.n	800872c <HAL_TIM_Base_Start_IT+0x80>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a1c      	ldr	r2, [pc, #112]	; (800877c <HAL_TIM_Base_Start_IT+0xd0>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d00e      	beq.n	800872c <HAL_TIM_Base_Start_IT+0x80>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a1b      	ldr	r2, [pc, #108]	; (8008780 <HAL_TIM_Base_Start_IT+0xd4>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d009      	beq.n	800872c <HAL_TIM_Base_Start_IT+0x80>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a19      	ldr	r2, [pc, #100]	; (8008784 <HAL_TIM_Base_Start_IT+0xd8>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d004      	beq.n	800872c <HAL_TIM_Base_Start_IT+0x80>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a18      	ldr	r2, [pc, #96]	; (8008788 <HAL_TIM_Base_Start_IT+0xdc>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d111      	bne.n	8008750 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b06      	cmp	r3, #6
 800873c:	d010      	beq.n	8008760 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f042 0201 	orr.w	r2, r2, #1
 800874c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800874e:	e007      	b.n	8008760 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f042 0201 	orr.w	r2, r2, #1
 800875e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	40010000 	.word	0x40010000
 8008774:	40000400 	.word	0x40000400
 8008778:	40000800 	.word	0x40000800
 800877c:	40000c00 	.word	0x40000c00
 8008780:	40010400 	.word	0x40010400
 8008784:	40014000 	.word	0x40014000
 8008788:	40001800 	.word	0x40001800

0800878c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d109      	bne.n	80087b0 <HAL_TIM_OC_Start_IT+0x24>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	bf14      	ite	ne
 80087a8:	2301      	movne	r3, #1
 80087aa:	2300      	moveq	r3, #0
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	e022      	b.n	80087f6 <HAL_TIM_OC_Start_IT+0x6a>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d109      	bne.n	80087ca <HAL_TIM_OC_Start_IT+0x3e>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b01      	cmp	r3, #1
 80087c0:	bf14      	ite	ne
 80087c2:	2301      	movne	r3, #1
 80087c4:	2300      	moveq	r3, #0
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	e015      	b.n	80087f6 <HAL_TIM_OC_Start_IT+0x6a>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b08      	cmp	r3, #8
 80087ce:	d109      	bne.n	80087e4 <HAL_TIM_OC_Start_IT+0x58>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b01      	cmp	r3, #1
 80087da:	bf14      	ite	ne
 80087dc:	2301      	movne	r3, #1
 80087de:	2300      	moveq	r3, #0
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	e008      	b.n	80087f6 <HAL_TIM_OC_Start_IT+0x6a>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	bf14      	ite	ne
 80087f0:	2301      	movne	r3, #1
 80087f2:	2300      	moveq	r3, #0
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e0c2      	b.n	8008984 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d104      	bne.n	800880e <HAL_TIM_OC_Start_IT+0x82>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2202      	movs	r2, #2
 8008808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800880c:	e013      	b.n	8008836 <HAL_TIM_OC_Start_IT+0xaa>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b04      	cmp	r3, #4
 8008812:	d104      	bne.n	800881e <HAL_TIM_OC_Start_IT+0x92>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800881c:	e00b      	b.n	8008836 <HAL_TIM_OC_Start_IT+0xaa>
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b08      	cmp	r3, #8
 8008822:	d104      	bne.n	800882e <HAL_TIM_OC_Start_IT+0xa2>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800882c:	e003      	b.n	8008836 <HAL_TIM_OC_Start_IT+0xaa>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2202      	movs	r2, #2
 8008832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b0c      	cmp	r3, #12
 800883a:	d841      	bhi.n	80088c0 <HAL_TIM_OC_Start_IT+0x134>
 800883c:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <HAL_TIM_OC_Start_IT+0xb8>)
 800883e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008842:	bf00      	nop
 8008844:	08008879 	.word	0x08008879
 8008848:	080088c1 	.word	0x080088c1
 800884c:	080088c1 	.word	0x080088c1
 8008850:	080088c1 	.word	0x080088c1
 8008854:	0800888b 	.word	0x0800888b
 8008858:	080088c1 	.word	0x080088c1
 800885c:	080088c1 	.word	0x080088c1
 8008860:	080088c1 	.word	0x080088c1
 8008864:	0800889d 	.word	0x0800889d
 8008868:	080088c1 	.word	0x080088c1
 800886c:	080088c1 	.word	0x080088c1
 8008870:	080088c1 	.word	0x080088c1
 8008874:	080088af 	.word	0x080088af
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68da      	ldr	r2, [r3, #12]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f042 0202 	orr.w	r2, r2, #2
 8008886:	60da      	str	r2, [r3, #12]
      break;
 8008888:	e01b      	b.n	80088c2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68da      	ldr	r2, [r3, #12]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f042 0204 	orr.w	r2, r2, #4
 8008898:	60da      	str	r2, [r3, #12]
      break;
 800889a:	e012      	b.n	80088c2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0208 	orr.w	r2, r2, #8
 80088aa:	60da      	str	r2, [r3, #12]
      break;
 80088ac:	e009      	b.n	80088c2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68da      	ldr	r2, [r3, #12]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f042 0210 	orr.w	r2, r2, #16
 80088bc:	60da      	str	r2, [r3, #12]
      break;
 80088be:	e000      	b.n	80088c2 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 80088c0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2201      	movs	r2, #1
 80088c8:	6839      	ldr	r1, [r7, #0]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 ff12 	bl	80096f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a2d      	ldr	r2, [pc, #180]	; (800898c <HAL_TIM_OC_Start_IT+0x200>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d004      	beq.n	80088e4 <HAL_TIM_OC_Start_IT+0x158>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a2c      	ldr	r2, [pc, #176]	; (8008990 <HAL_TIM_OC_Start_IT+0x204>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d101      	bne.n	80088e8 <HAL_TIM_OC_Start_IT+0x15c>
 80088e4:	2301      	movs	r3, #1
 80088e6:	e000      	b.n	80088ea <HAL_TIM_OC_Start_IT+0x15e>
 80088e8:	2300      	movs	r3, #0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d007      	beq.n	80088fe <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a22      	ldr	r2, [pc, #136]	; (800898c <HAL_TIM_OC_Start_IT+0x200>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d022      	beq.n	800894e <HAL_TIM_OC_Start_IT+0x1c2>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008910:	d01d      	beq.n	800894e <HAL_TIM_OC_Start_IT+0x1c2>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a1f      	ldr	r2, [pc, #124]	; (8008994 <HAL_TIM_OC_Start_IT+0x208>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d018      	beq.n	800894e <HAL_TIM_OC_Start_IT+0x1c2>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a1d      	ldr	r2, [pc, #116]	; (8008998 <HAL_TIM_OC_Start_IT+0x20c>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d013      	beq.n	800894e <HAL_TIM_OC_Start_IT+0x1c2>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a1c      	ldr	r2, [pc, #112]	; (800899c <HAL_TIM_OC_Start_IT+0x210>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d00e      	beq.n	800894e <HAL_TIM_OC_Start_IT+0x1c2>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a16      	ldr	r2, [pc, #88]	; (8008990 <HAL_TIM_OC_Start_IT+0x204>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d009      	beq.n	800894e <HAL_TIM_OC_Start_IT+0x1c2>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a18      	ldr	r2, [pc, #96]	; (80089a0 <HAL_TIM_OC_Start_IT+0x214>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d004      	beq.n	800894e <HAL_TIM_OC_Start_IT+0x1c2>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a16      	ldr	r2, [pc, #88]	; (80089a4 <HAL_TIM_OC_Start_IT+0x218>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d111      	bne.n	8008972 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f003 0307 	and.w	r3, r3, #7
 8008958:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b06      	cmp	r3, #6
 800895e:	d010      	beq.n	8008982 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0201 	orr.w	r2, r2, #1
 800896e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008970:	e007      	b.n	8008982 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f042 0201 	orr.w	r2, r2, #1
 8008980:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	40010000 	.word	0x40010000
 8008990:	40010400 	.word	0x40010400
 8008994:	40000400 	.word	0x40000400
 8008998:	40000800 	.word	0x40000800
 800899c:	40000c00 	.word	0x40000c00
 80089a0:	40014000 	.word	0x40014000
 80089a4:	40001800 	.word	0x40001800

080089a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e041      	b.n	8008a3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d106      	bne.n	80089d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f839 	bl	8008a46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2202      	movs	r2, #2
 80089d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3304      	adds	r3, #4
 80089e4:	4619      	mov	r1, r3
 80089e6:	4610      	mov	r0, r2
 80089e8:	f000 fb9a 	bl	8009120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008a4e:	bf00      	nop
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b086      	sub	sp, #24
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e097      	b.n	8008b9e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d106      	bne.n	8008a88 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f7f9 fa4e 	bl	8001f24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	6812      	ldr	r2, [r2, #0]
 8008a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a9e:	f023 0307 	bic.w	r3, r3, #7
 8008aa2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	3304      	adds	r3, #4
 8008aac:	4619      	mov	r1, r3
 8008aae:	4610      	mov	r0, r2
 8008ab0:	f000 fb36 	bl	8009120 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008adc:	f023 0303 	bic.w	r3, r3, #3
 8008ae0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	689a      	ldr	r2, [r3, #8]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	021b      	lsls	r3, r3, #8
 8008aec:	4313      	orrs	r3, r2
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008afa:	f023 030c 	bic.w	r3, r3, #12
 8008afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	68da      	ldr	r2, [r3, #12]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	021b      	lsls	r3, r3, #8
 8008b16:	4313      	orrs	r3, r2
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	011a      	lsls	r2, r3, #4
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	6a1b      	ldr	r3, [r3, #32]
 8008b28:	031b      	lsls	r3, r3, #12
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008b38:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008b40:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	011b      	lsls	r3, r3, #4
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d122      	bne.n	8008c02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	f003 0302 	and.w	r3, r3, #2
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d11b      	bne.n	8008c02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f06f 0202 	mvn.w	r2, #2
 8008bd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	f003 0303 	and.w	r3, r3, #3
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fa7b 	bl	80090e4 <HAL_TIM_IC_CaptureCallback>
 8008bee:	e005      	b.n	8008bfc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fa6d 	bl	80090d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fa7e 	bl	80090f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	f003 0304 	and.w	r3, r3, #4
 8008c0c:	2b04      	cmp	r3, #4
 8008c0e:	d122      	bne.n	8008c56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	f003 0304 	and.w	r3, r3, #4
 8008c1a:	2b04      	cmp	r3, #4
 8008c1c:	d11b      	bne.n	8008c56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f06f 0204 	mvn.w	r2, #4
 8008c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d003      	beq.n	8008c44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fa51 	bl	80090e4 <HAL_TIM_IC_CaptureCallback>
 8008c42:	e005      	b.n	8008c50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fa43 	bl	80090d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fa54 	bl	80090f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	f003 0308 	and.w	r3, r3, #8
 8008c60:	2b08      	cmp	r3, #8
 8008c62:	d122      	bne.n	8008caa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	f003 0308 	and.w	r3, r3, #8
 8008c6e:	2b08      	cmp	r3, #8
 8008c70:	d11b      	bne.n	8008caa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f06f 0208 	mvn.w	r2, #8
 8008c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2204      	movs	r2, #4
 8008c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	f003 0303 	and.w	r3, r3, #3
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fa27 	bl	80090e4 <HAL_TIM_IC_CaptureCallback>
 8008c96:	e005      	b.n	8008ca4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fa19 	bl	80090d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fa2a 	bl	80090f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	f003 0310 	and.w	r3, r3, #16
 8008cb4:	2b10      	cmp	r3, #16
 8008cb6:	d122      	bne.n	8008cfe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f003 0310 	and.w	r3, r3, #16
 8008cc2:	2b10      	cmp	r3, #16
 8008cc4:	d11b      	bne.n	8008cfe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f06f 0210 	mvn.w	r2, #16
 8008cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2208      	movs	r2, #8
 8008cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	69db      	ldr	r3, [r3, #28]
 8008cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f9fd 	bl	80090e4 <HAL_TIM_IC_CaptureCallback>
 8008cea:	e005      	b.n	8008cf8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f9ef 	bl	80090d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fa00 	bl	80090f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d10e      	bne.n	8008d2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	f003 0301 	and.w	r3, r3, #1
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d107      	bne.n	8008d2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f06f 0201 	mvn.w	r2, #1
 8008d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f9c9 	bl	80090bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d34:	2b80      	cmp	r3, #128	; 0x80
 8008d36:	d10e      	bne.n	8008d56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d42:	2b80      	cmp	r3, #128	; 0x80
 8008d44:	d107      	bne.n	8008d56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fd7b 	bl	800984c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d60:	2b40      	cmp	r3, #64	; 0x40
 8008d62:	d10e      	bne.n	8008d82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d6e:	2b40      	cmp	r3, #64	; 0x40
 8008d70:	d107      	bne.n	8008d82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f9c5 	bl	800910c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	f003 0320 	and.w	r3, r3, #32
 8008d8c:	2b20      	cmp	r3, #32
 8008d8e:	d10e      	bne.n	8008dae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	f003 0320 	and.w	r3, r3, #32
 8008d9a:	2b20      	cmp	r3, #32
 8008d9c:	d107      	bne.n	8008dae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f06f 0220 	mvn.w	r2, #32
 8008da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fd45 	bl	8009838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dae:	bf00      	nop
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d101      	bne.n	8008dd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008dce:	2302      	movs	r3, #2
 8008dd0:	e0ac      	b.n	8008f2c <HAL_TIM_PWM_ConfigChannel+0x174>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b0c      	cmp	r3, #12
 8008dde:	f200 809f 	bhi.w	8008f20 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008de2:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de8:	08008e1d 	.word	0x08008e1d
 8008dec:	08008f21 	.word	0x08008f21
 8008df0:	08008f21 	.word	0x08008f21
 8008df4:	08008f21 	.word	0x08008f21
 8008df8:	08008e5d 	.word	0x08008e5d
 8008dfc:	08008f21 	.word	0x08008f21
 8008e00:	08008f21 	.word	0x08008f21
 8008e04:	08008f21 	.word	0x08008f21
 8008e08:	08008e9f 	.word	0x08008e9f
 8008e0c:	08008f21 	.word	0x08008f21
 8008e10:	08008f21 	.word	0x08008f21
 8008e14:	08008f21 	.word	0x08008f21
 8008e18:	08008edf 	.word	0x08008edf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68b9      	ldr	r1, [r7, #8]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 fa1c 	bl	8009260 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	699a      	ldr	r2, [r3, #24]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f042 0208 	orr.w	r2, r2, #8
 8008e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	699a      	ldr	r2, [r3, #24]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f022 0204 	bic.w	r2, r2, #4
 8008e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6999      	ldr	r1, [r3, #24]
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	691a      	ldr	r2, [r3, #16]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	430a      	orrs	r2, r1
 8008e58:	619a      	str	r2, [r3, #24]
      break;
 8008e5a:	e062      	b.n	8008f22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68b9      	ldr	r1, [r7, #8]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 fa6c 	bl	8009340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	699a      	ldr	r2, [r3, #24]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	699a      	ldr	r2, [r3, #24]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6999      	ldr	r1, [r3, #24]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	021a      	lsls	r2, r3, #8
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	619a      	str	r2, [r3, #24]
      break;
 8008e9c:	e041      	b.n	8008f22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68b9      	ldr	r1, [r7, #8]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 fac1 	bl	800942c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	69da      	ldr	r2, [r3, #28]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f042 0208 	orr.w	r2, r2, #8
 8008eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	69da      	ldr	r2, [r3, #28]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f022 0204 	bic.w	r2, r2, #4
 8008ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	69d9      	ldr	r1, [r3, #28]
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	691a      	ldr	r2, [r3, #16]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	430a      	orrs	r2, r1
 8008eda:	61da      	str	r2, [r3, #28]
      break;
 8008edc:	e021      	b.n	8008f22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68b9      	ldr	r1, [r7, #8]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 fb15 	bl	8009514 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69da      	ldr	r2, [r3, #28]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	69da      	ldr	r2, [r3, #28]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	69d9      	ldr	r1, [r3, #28]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	021a      	lsls	r2, r3, #8
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	61da      	str	r2, [r3, #28]
      break;
 8008f1e:	e000      	b.n	8008f22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008f20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d101      	bne.n	8008f4c <HAL_TIM_ConfigClockSource+0x18>
 8008f48:	2302      	movs	r3, #2
 8008f4a:	e0b3      	b.n	80090b4 <HAL_TIM_ConfigClockSource+0x180>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2202      	movs	r2, #2
 8008f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008f6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f84:	d03e      	beq.n	8009004 <HAL_TIM_ConfigClockSource+0xd0>
 8008f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f8a:	f200 8087 	bhi.w	800909c <HAL_TIM_ConfigClockSource+0x168>
 8008f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f92:	f000 8085 	beq.w	80090a0 <HAL_TIM_ConfigClockSource+0x16c>
 8008f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f9a:	d87f      	bhi.n	800909c <HAL_TIM_ConfigClockSource+0x168>
 8008f9c:	2b70      	cmp	r3, #112	; 0x70
 8008f9e:	d01a      	beq.n	8008fd6 <HAL_TIM_ConfigClockSource+0xa2>
 8008fa0:	2b70      	cmp	r3, #112	; 0x70
 8008fa2:	d87b      	bhi.n	800909c <HAL_TIM_ConfigClockSource+0x168>
 8008fa4:	2b60      	cmp	r3, #96	; 0x60
 8008fa6:	d050      	beq.n	800904a <HAL_TIM_ConfigClockSource+0x116>
 8008fa8:	2b60      	cmp	r3, #96	; 0x60
 8008faa:	d877      	bhi.n	800909c <HAL_TIM_ConfigClockSource+0x168>
 8008fac:	2b50      	cmp	r3, #80	; 0x50
 8008fae:	d03c      	beq.n	800902a <HAL_TIM_ConfigClockSource+0xf6>
 8008fb0:	2b50      	cmp	r3, #80	; 0x50
 8008fb2:	d873      	bhi.n	800909c <HAL_TIM_ConfigClockSource+0x168>
 8008fb4:	2b40      	cmp	r3, #64	; 0x40
 8008fb6:	d058      	beq.n	800906a <HAL_TIM_ConfigClockSource+0x136>
 8008fb8:	2b40      	cmp	r3, #64	; 0x40
 8008fba:	d86f      	bhi.n	800909c <HAL_TIM_ConfigClockSource+0x168>
 8008fbc:	2b30      	cmp	r3, #48	; 0x30
 8008fbe:	d064      	beq.n	800908a <HAL_TIM_ConfigClockSource+0x156>
 8008fc0:	2b30      	cmp	r3, #48	; 0x30
 8008fc2:	d86b      	bhi.n	800909c <HAL_TIM_ConfigClockSource+0x168>
 8008fc4:	2b20      	cmp	r3, #32
 8008fc6:	d060      	beq.n	800908a <HAL_TIM_ConfigClockSource+0x156>
 8008fc8:	2b20      	cmp	r3, #32
 8008fca:	d867      	bhi.n	800909c <HAL_TIM_ConfigClockSource+0x168>
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d05c      	beq.n	800908a <HAL_TIM_ConfigClockSource+0x156>
 8008fd0:	2b10      	cmp	r3, #16
 8008fd2:	d05a      	beq.n	800908a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008fd4:	e062      	b.n	800909c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6818      	ldr	r0, [r3, #0]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	6899      	ldr	r1, [r3, #8]
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	f000 fb65 	bl	80096b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ff8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	609a      	str	r2, [r3, #8]
      break;
 8009002:	e04e      	b.n	80090a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6818      	ldr	r0, [r3, #0]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	6899      	ldr	r1, [r3, #8]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f000 fb4e 	bl	80096b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689a      	ldr	r2, [r3, #8]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009026:	609a      	str	r2, [r3, #8]
      break;
 8009028:	e03b      	b.n	80090a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6818      	ldr	r0, [r3, #0]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	6859      	ldr	r1, [r3, #4]
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	461a      	mov	r2, r3
 8009038:	f000 fac2 	bl	80095c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2150      	movs	r1, #80	; 0x50
 8009042:	4618      	mov	r0, r3
 8009044:	f000 fb1b 	bl	800967e <TIM_ITRx_SetConfig>
      break;
 8009048:	e02b      	b.n	80090a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6818      	ldr	r0, [r3, #0]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	6859      	ldr	r1, [r3, #4]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	461a      	mov	r2, r3
 8009058:	f000 fae1 	bl	800961e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2160      	movs	r1, #96	; 0x60
 8009062:	4618      	mov	r0, r3
 8009064:	f000 fb0b 	bl	800967e <TIM_ITRx_SetConfig>
      break;
 8009068:	e01b      	b.n	80090a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6818      	ldr	r0, [r3, #0]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	6859      	ldr	r1, [r3, #4]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	461a      	mov	r2, r3
 8009078:	f000 faa2 	bl	80095c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2140      	movs	r1, #64	; 0x40
 8009082:	4618      	mov	r0, r3
 8009084:	f000 fafb 	bl	800967e <TIM_ITRx_SetConfig>
      break;
 8009088:	e00b      	b.n	80090a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4619      	mov	r1, r3
 8009094:	4610      	mov	r0, r2
 8009096:	f000 faf2 	bl	800967e <TIM_ITRx_SetConfig>
        break;
 800909a:	e002      	b.n	80090a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800909c:	bf00      	nop
 800909e:	e000      	b.n	80090a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80090a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a40      	ldr	r2, [pc, #256]	; (8009234 <TIM_Base_SetConfig+0x114>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d013      	beq.n	8009160 <TIM_Base_SetConfig+0x40>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800913e:	d00f      	beq.n	8009160 <TIM_Base_SetConfig+0x40>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a3d      	ldr	r2, [pc, #244]	; (8009238 <TIM_Base_SetConfig+0x118>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d00b      	beq.n	8009160 <TIM_Base_SetConfig+0x40>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a3c      	ldr	r2, [pc, #240]	; (800923c <TIM_Base_SetConfig+0x11c>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d007      	beq.n	8009160 <TIM_Base_SetConfig+0x40>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a3b      	ldr	r2, [pc, #236]	; (8009240 <TIM_Base_SetConfig+0x120>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d003      	beq.n	8009160 <TIM_Base_SetConfig+0x40>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a3a      	ldr	r2, [pc, #232]	; (8009244 <TIM_Base_SetConfig+0x124>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d108      	bne.n	8009172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	4313      	orrs	r3, r2
 8009170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a2f      	ldr	r2, [pc, #188]	; (8009234 <TIM_Base_SetConfig+0x114>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d02b      	beq.n	80091d2 <TIM_Base_SetConfig+0xb2>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009180:	d027      	beq.n	80091d2 <TIM_Base_SetConfig+0xb2>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a2c      	ldr	r2, [pc, #176]	; (8009238 <TIM_Base_SetConfig+0x118>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d023      	beq.n	80091d2 <TIM_Base_SetConfig+0xb2>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a2b      	ldr	r2, [pc, #172]	; (800923c <TIM_Base_SetConfig+0x11c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d01f      	beq.n	80091d2 <TIM_Base_SetConfig+0xb2>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a2a      	ldr	r2, [pc, #168]	; (8009240 <TIM_Base_SetConfig+0x120>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d01b      	beq.n	80091d2 <TIM_Base_SetConfig+0xb2>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a29      	ldr	r2, [pc, #164]	; (8009244 <TIM_Base_SetConfig+0x124>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d017      	beq.n	80091d2 <TIM_Base_SetConfig+0xb2>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a28      	ldr	r2, [pc, #160]	; (8009248 <TIM_Base_SetConfig+0x128>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d013      	beq.n	80091d2 <TIM_Base_SetConfig+0xb2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a27      	ldr	r2, [pc, #156]	; (800924c <TIM_Base_SetConfig+0x12c>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d00f      	beq.n	80091d2 <TIM_Base_SetConfig+0xb2>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a26      	ldr	r2, [pc, #152]	; (8009250 <TIM_Base_SetConfig+0x130>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d00b      	beq.n	80091d2 <TIM_Base_SetConfig+0xb2>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a25      	ldr	r2, [pc, #148]	; (8009254 <TIM_Base_SetConfig+0x134>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d007      	beq.n	80091d2 <TIM_Base_SetConfig+0xb2>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a24      	ldr	r2, [pc, #144]	; (8009258 <TIM_Base_SetConfig+0x138>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d003      	beq.n	80091d2 <TIM_Base_SetConfig+0xb2>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a23      	ldr	r2, [pc, #140]	; (800925c <TIM_Base_SetConfig+0x13c>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d108      	bne.n	80091e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	689a      	ldr	r2, [r3, #8]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a0a      	ldr	r2, [pc, #40]	; (8009234 <TIM_Base_SetConfig+0x114>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d003      	beq.n	8009218 <TIM_Base_SetConfig+0xf8>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a0c      	ldr	r2, [pc, #48]	; (8009244 <TIM_Base_SetConfig+0x124>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d103      	bne.n	8009220 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	691a      	ldr	r2, [r3, #16]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	615a      	str	r2, [r3, #20]
}
 8009226:	bf00      	nop
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	40010000 	.word	0x40010000
 8009238:	40000400 	.word	0x40000400
 800923c:	40000800 	.word	0x40000800
 8009240:	40000c00 	.word	0x40000c00
 8009244:	40010400 	.word	0x40010400
 8009248:	40014000 	.word	0x40014000
 800924c:	40014400 	.word	0x40014400
 8009250:	40014800 	.word	0x40014800
 8009254:	40001800 	.word	0x40001800
 8009258:	40001c00 	.word	0x40001c00
 800925c:	40002000 	.word	0x40002000

08009260 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009260:	b480      	push	{r7}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a1b      	ldr	r3, [r3, #32]
 800926e:	f023 0201 	bic.w	r2, r3, #1
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800928e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f023 0303 	bic.w	r3, r3, #3
 8009296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	4313      	orrs	r3, r2
 80092a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	f023 0302 	bic.w	r3, r3, #2
 80092a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a20      	ldr	r2, [pc, #128]	; (8009338 <TIM_OC1_SetConfig+0xd8>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d003      	beq.n	80092c4 <TIM_OC1_SetConfig+0x64>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a1f      	ldr	r2, [pc, #124]	; (800933c <TIM_OC1_SetConfig+0xdc>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d10c      	bne.n	80092de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	f023 0308 	bic.w	r3, r3, #8
 80092ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f023 0304 	bic.w	r3, r3, #4
 80092dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a15      	ldr	r2, [pc, #84]	; (8009338 <TIM_OC1_SetConfig+0xd8>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d003      	beq.n	80092ee <TIM_OC1_SetConfig+0x8e>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a14      	ldr	r2, [pc, #80]	; (800933c <TIM_OC1_SetConfig+0xdc>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d111      	bne.n	8009312 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	4313      	orrs	r3, r2
 8009306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	4313      	orrs	r3, r2
 8009310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	621a      	str	r2, [r3, #32]
}
 800932c:	bf00      	nop
 800932e:	371c      	adds	r7, #28
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr
 8009338:	40010000 	.word	0x40010000
 800933c:	40010400 	.word	0x40010400

08009340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009340:	b480      	push	{r7}
 8009342:	b087      	sub	sp, #28
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a1b      	ldr	r3, [r3, #32]
 800934e:	f023 0210 	bic.w	r2, r3, #16
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800936e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	021b      	lsls	r3, r3, #8
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	4313      	orrs	r3, r2
 8009382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f023 0320 	bic.w	r3, r3, #32
 800938a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	011b      	lsls	r3, r3, #4
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	4313      	orrs	r3, r2
 8009396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	4a22      	ldr	r2, [pc, #136]	; (8009424 <TIM_OC2_SetConfig+0xe4>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d003      	beq.n	80093a8 <TIM_OC2_SetConfig+0x68>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a21      	ldr	r2, [pc, #132]	; (8009428 <TIM_OC2_SetConfig+0xe8>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d10d      	bne.n	80093c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	011b      	lsls	r3, r3, #4
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a17      	ldr	r2, [pc, #92]	; (8009424 <TIM_OC2_SetConfig+0xe4>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d003      	beq.n	80093d4 <TIM_OC2_SetConfig+0x94>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a16      	ldr	r2, [pc, #88]	; (8009428 <TIM_OC2_SetConfig+0xe8>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d113      	bne.n	80093fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	695b      	ldr	r3, [r3, #20]
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	693a      	ldr	r2, [r7, #16]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	621a      	str	r2, [r3, #32]
}
 8009416:	bf00      	nop
 8009418:	371c      	adds	r7, #28
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	40010000 	.word	0x40010000
 8009428:	40010400 	.word	0x40010400

0800942c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800942c:	b480      	push	{r7}
 800942e:	b087      	sub	sp, #28
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a1b      	ldr	r3, [r3, #32]
 800943a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	69db      	ldr	r3, [r3, #28]
 8009452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800945a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f023 0303 	bic.w	r3, r3, #3
 8009462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	4313      	orrs	r3, r2
 800946c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	021b      	lsls	r3, r3, #8
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	4313      	orrs	r3, r2
 8009480:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a21      	ldr	r2, [pc, #132]	; (800950c <TIM_OC3_SetConfig+0xe0>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d003      	beq.n	8009492 <TIM_OC3_SetConfig+0x66>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a20      	ldr	r2, [pc, #128]	; (8009510 <TIM_OC3_SetConfig+0xe4>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d10d      	bne.n	80094ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	021b      	lsls	r3, r3, #8
 80094a0:	697a      	ldr	r2, [r7, #20]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a16      	ldr	r2, [pc, #88]	; (800950c <TIM_OC3_SetConfig+0xe0>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d003      	beq.n	80094be <TIM_OC3_SetConfig+0x92>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a15      	ldr	r2, [pc, #84]	; (8009510 <TIM_OC3_SetConfig+0xe4>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d113      	bne.n	80094e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	695b      	ldr	r3, [r3, #20]
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	011b      	lsls	r3, r3, #4
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	621a      	str	r2, [r3, #32]
}
 8009500:	bf00      	nop
 8009502:	371c      	adds	r7, #28
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	40010000 	.word	0x40010000
 8009510:	40010400 	.word	0x40010400

08009514 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	69db      	ldr	r3, [r3, #28]
 800953a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800954a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	021b      	lsls	r3, r3, #8
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	4313      	orrs	r3, r2
 8009556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800955e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	031b      	lsls	r3, r3, #12
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	4313      	orrs	r3, r2
 800956a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a12      	ldr	r2, [pc, #72]	; (80095b8 <TIM_OC4_SetConfig+0xa4>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d003      	beq.n	800957c <TIM_OC4_SetConfig+0x68>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a11      	ldr	r2, [pc, #68]	; (80095bc <TIM_OC4_SetConfig+0xa8>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d109      	bne.n	8009590 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009582:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	695b      	ldr	r3, [r3, #20]
 8009588:	019b      	lsls	r3, r3, #6
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	4313      	orrs	r3, r2
 800958e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	621a      	str	r2, [r3, #32]
}
 80095aa:	bf00      	nop
 80095ac:	371c      	adds	r7, #28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	40010000 	.word	0x40010000
 80095bc:	40010400 	.word	0x40010400

080095c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6a1b      	ldr	r3, [r3, #32]
 80095d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6a1b      	ldr	r3, [r3, #32]
 80095d6:	f023 0201 	bic.w	r2, r3, #1
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	011b      	lsls	r3, r3, #4
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f023 030a 	bic.w	r3, r3, #10
 80095fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095fe:	697a      	ldr	r2, [r7, #20]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	4313      	orrs	r3, r2
 8009604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	621a      	str	r2, [r3, #32]
}
 8009612:	bf00      	nop
 8009614:	371c      	adds	r7, #28
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800961e:	b480      	push	{r7}
 8009620:	b087      	sub	sp, #28
 8009622:	af00      	add	r7, sp, #0
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	60b9      	str	r1, [r7, #8]
 8009628:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	f023 0210 	bic.w	r2, r3, #16
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	699b      	ldr	r3, [r3, #24]
 800963a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6a1b      	ldr	r3, [r3, #32]
 8009640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009648:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	031b      	lsls	r3, r3, #12
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	4313      	orrs	r3, r2
 8009652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800965a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	4313      	orrs	r3, r2
 8009664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	621a      	str	r2, [r3, #32]
}
 8009672:	bf00      	nop
 8009674:	371c      	adds	r7, #28
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800967e:	b480      	push	{r7}
 8009680:	b085      	sub	sp, #20
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009694:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009696:	683a      	ldr	r2, [r7, #0]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	4313      	orrs	r3, r2
 800969c:	f043 0307 	orr.w	r3, r3, #7
 80096a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	609a      	str	r2, [r3, #8]
}
 80096a8:	bf00      	nop
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b087      	sub	sp, #28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	021a      	lsls	r2, r3, #8
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	431a      	orrs	r2, r3
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	4313      	orrs	r3, r2
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	4313      	orrs	r3, r2
 80096e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	697a      	ldr	r2, [r7, #20]
 80096e6:	609a      	str	r2, [r3, #8]
}
 80096e8:	bf00      	nop
 80096ea:	371c      	adds	r7, #28
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	f003 031f 	and.w	r3, r3, #31
 8009706:	2201      	movs	r2, #1
 8009708:	fa02 f303 	lsl.w	r3, r2, r3
 800970c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6a1a      	ldr	r2, [r3, #32]
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	43db      	mvns	r3, r3
 8009716:	401a      	ands	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6a1a      	ldr	r2, [r3, #32]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	f003 031f 	and.w	r3, r3, #31
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	fa01 f303 	lsl.w	r3, r1, r3
 800972c:	431a      	orrs	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	621a      	str	r2, [r3, #32]
}
 8009732:	bf00      	nop
 8009734:	371c      	adds	r7, #28
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
	...

08009740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009754:	2302      	movs	r3, #2
 8009756:	e05a      	b.n	800980e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800977e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	4313      	orrs	r3, r2
 8009788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a21      	ldr	r2, [pc, #132]	; (800981c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d022      	beq.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097a4:	d01d      	beq.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a1d      	ldr	r2, [pc, #116]	; (8009820 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d018      	beq.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a1b      	ldr	r2, [pc, #108]	; (8009824 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d013      	beq.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a1a      	ldr	r2, [pc, #104]	; (8009828 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d00e      	beq.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a18      	ldr	r2, [pc, #96]	; (800982c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d009      	beq.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a17      	ldr	r2, [pc, #92]	; (8009830 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d004      	beq.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a15      	ldr	r2, [pc, #84]	; (8009834 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d10c      	bne.n	80097fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3714      	adds	r7, #20
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	40010000 	.word	0x40010000
 8009820:	40000400 	.word	0x40000400
 8009824:	40000800 	.word	0x40000800
 8009828:	40000c00 	.word	0x40000c00
 800982c:	40010400 	.word	0x40010400
 8009830:	40014000 	.word	0x40014000
 8009834:	40001800 	.word	0x40001800

08009838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009860:	b084      	sub	sp, #16
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	f107 001c 	add.w	r0, r7, #28
 800986e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009874:	2b01      	cmp	r3, #1
 8009876:	d122      	bne.n	80098be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800988c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80098a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d105      	bne.n	80098b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f94a 	bl	8009b4c <USB_CoreReset>
 80098b8:	4603      	mov	r3, r0
 80098ba:	73fb      	strb	r3, [r7, #15]
 80098bc:	e01a      	b.n	80098f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f93e 	bl	8009b4c <USB_CoreReset>
 80098d0:	4603      	mov	r3, r0
 80098d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80098d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d106      	bne.n	80098e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	639a      	str	r2, [r3, #56]	; 0x38
 80098e6:	e005      	b.n	80098f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80098f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d10b      	bne.n	8009912 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	f043 0206 	orr.w	r2, r3, #6
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f043 0220 	orr.w	r2, r3, #32
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009912:	7bfb      	ldrb	r3, [r7, #15]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800991e:	b004      	add	sp, #16
 8009920:	4770      	bx	lr

08009922 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009922:	b480      	push	{r7}
 8009924:	b083      	sub	sp, #12
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f043 0201 	orr.w	r2, r3, #1
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	f023 0201 	bic.w	r2, r3, #1
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b082      	sub	sp, #8
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	460b      	mov	r3, r1
 8009970:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800997e:	78fb      	ldrb	r3, [r7, #3]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d106      	bne.n	8009992 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	60da      	str	r2, [r3, #12]
 8009990:	e00b      	b.n	80099aa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009992:	78fb      	ldrb	r3, [r7, #3]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d106      	bne.n	80099a6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	60da      	str	r2, [r3, #12]
 80099a4:	e001      	b.n	80099aa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e003      	b.n	80099b2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80099aa:	2032      	movs	r0, #50	; 0x32
 80099ac:	f7f9 ff0e 	bl	80037cc <HAL_Delay>

  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80099c6:	2300      	movs	r3, #0
 80099c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	019b      	lsls	r3, r3, #6
 80099ce:	f043 0220 	orr.w	r2, r3, #32
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	3301      	adds	r3, #1
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	4a09      	ldr	r2, [pc, #36]	; (8009a04 <USB_FlushTxFifo+0x48>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d901      	bls.n	80099e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e006      	b.n	80099f6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	f003 0320 	and.w	r3, r3, #32
 80099f0:	2b20      	cmp	r3, #32
 80099f2:	d0f0      	beq.n	80099d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3714      	adds	r7, #20
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	00030d40 	.word	0x00030d40

08009a08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2210      	movs	r2, #16
 8009a18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4a09      	ldr	r2, [pc, #36]	; (8009a48 <USB_FlushRxFifo+0x40>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d901      	bls.n	8009a2c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	e006      	b.n	8009a3a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	f003 0310 	and.w	r3, r3, #16
 8009a34:	2b10      	cmp	r3, #16
 8009a36:	d0f0      	beq.n	8009a1a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	00030d40 	.word	0x00030d40

08009a4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b089      	sub	sp, #36	; 0x24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	4611      	mov	r1, r2
 8009a58:	461a      	mov	r2, r3
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	71fb      	strb	r3, [r7, #7]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009a6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d11a      	bne.n	8009aa8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009a72:	88bb      	ldrh	r3, [r7, #4]
 8009a74:	3303      	adds	r3, #3
 8009a76:	089b      	lsrs	r3, r3, #2
 8009a78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	61bb      	str	r3, [r7, #24]
 8009a7e:	e00f      	b.n	8009aa0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009a80:	79fb      	ldrb	r3, [r7, #7]
 8009a82:	031a      	lsls	r2, r3, #12
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	3304      	adds	r3, #4
 8009a98:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	61bb      	str	r3, [r7, #24]
 8009aa0:	69ba      	ldr	r2, [r7, #24]
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d3eb      	bcc.n	8009a80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3724      	adds	r7, #36	; 0x24
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009ab6:	b480      	push	{r7}
 8009ab8:	b089      	sub	sp, #36	; 0x24
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	60f8      	str	r0, [r7, #12]
 8009abe:	60b9      	str	r1, [r7, #8]
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009acc:	88fb      	ldrh	r3, [r7, #6]
 8009ace:	3303      	adds	r3, #3
 8009ad0:	089b      	lsrs	r3, r3, #2
 8009ad2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	61bb      	str	r3, [r7, #24]
 8009ad8:	e00b      	b.n	8009af2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	3304      	adds	r3, #4
 8009aea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	3301      	adds	r3, #1
 8009af0:	61bb      	str	r3, [r7, #24]
 8009af2:	69ba      	ldr	r2, [r7, #24]
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d3ef      	bcc.n	8009ada <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009afa:	69fb      	ldr	r3, [r7, #28]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3724      	adds	r7, #36	; 0x24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	695b      	ldr	r3, [r3, #20]
 8009b14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009b20:	68fb      	ldr	r3, [r7, #12]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr

08009b2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009b2e:	b480      	push	{r7}
 8009b30:	b083      	sub	sp, #12
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	f003 0301 	and.w	r3, r3, #1
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	370c      	adds	r7, #12
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
	...

08009b4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009b54:	2300      	movs	r3, #0
 8009b56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	60fb      	str	r3, [r7, #12]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	4a13      	ldr	r2, [pc, #76]	; (8009bb0 <USB_CoreReset+0x64>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d901      	bls.n	8009b6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e01b      	b.n	8009ba2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	daf2      	bge.n	8009b58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	f043 0201 	orr.w	r2, r3, #1
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3301      	adds	r3, #1
 8009b86:	60fb      	str	r3, [r7, #12]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	4a09      	ldr	r2, [pc, #36]	; (8009bb0 <USB_CoreReset+0x64>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d901      	bls.n	8009b94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009b90:	2303      	movs	r3, #3
 8009b92:	e006      	b.n	8009ba2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d0f0      	beq.n	8009b82 <USB_CoreReset+0x36>

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	00030d40 	.word	0x00030d40

08009bb4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009bb4:	b084      	sub	sp, #16
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b084      	sub	sp, #16
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
 8009bbe:	f107 001c 	add.w	r0, r7, #28
 8009bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d018      	beq.n	8009c38 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d10a      	bne.n	8009c22 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c1a:	f043 0304 	orr.w	r3, r3, #4
 8009c1e:	6013      	str	r3, [r2, #0]
 8009c20:	e014      	b.n	8009c4c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c30:	f023 0304 	bic.w	r3, r3, #4
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	e009      	b.n	8009c4c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c46:	f023 0304 	bic.w	r3, r3, #4
 8009c4a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009c4c:	2110      	movs	r1, #16
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff feb4 	bl	80099bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f7ff fed7 	bl	8009a08 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	e015      	b.n	8009c8c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	015a      	lsls	r2, r3, #5
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	4413      	add	r3, r2
 8009c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c72:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c80:	461a      	mov	r2, r3
 8009c82:	2300      	movs	r3, #0
 8009c84:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	60fb      	str	r3, [r7, #12]
 8009c8c:	6a3b      	ldr	r3, [r7, #32]
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d3e5      	bcc.n	8009c60 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009c94:	2101      	movs	r1, #1
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f8ac 	bl	8009df4 <USB_DriveVbus>

  HAL_Delay(200U);
 8009c9c:	20c8      	movs	r0, #200	; 0xc8
 8009c9e:	f7f9 fd95 	bl	80037cc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cae:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00b      	beq.n	8009cd4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cc2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4a14      	ldr	r2, [pc, #80]	; (8009d18 <USB_HostInit+0x164>)
 8009cc8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a13      	ldr	r2, [pc, #76]	; (8009d1c <USB_HostInit+0x168>)
 8009cce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009cd2:	e009      	b.n	8009ce8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2280      	movs	r2, #128	; 0x80
 8009cd8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a10      	ldr	r2, [pc, #64]	; (8009d20 <USB_HostInit+0x16c>)
 8009cde:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a10      	ldr	r2, [pc, #64]	; (8009d24 <USB_HostInit+0x170>)
 8009ce4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d105      	bne.n	8009cfa <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	699b      	ldr	r3, [r3, #24]
 8009cf2:	f043 0210 	orr.w	r2, r3, #16
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	699a      	ldr	r2, [r3, #24]
 8009cfe:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <USB_HostInit+0x174>)
 8009d00:	4313      	orrs	r3, r2
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d12:	b004      	add	sp, #16
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	01000200 	.word	0x01000200
 8009d1c:	00e00300 	.word	0x00e00300
 8009d20:	00600080 	.word	0x00600080
 8009d24:	004000e0 	.word	0x004000e0
 8009d28:	a3200008 	.word	0xa3200008

08009d2c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d4a:	f023 0303 	bic.w	r3, r3, #3
 8009d4e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	78fb      	ldrb	r3, [r7, #3]
 8009d5a:	f003 0303 	and.w	r3, r3, #3
 8009d5e:	68f9      	ldr	r1, [r7, #12]
 8009d60:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009d64:	4313      	orrs	r3, r2
 8009d66:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009d68:	78fb      	ldrb	r3, [r7, #3]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d107      	bne.n	8009d7e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d74:	461a      	mov	r2, r3
 8009d76:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009d7a:	6053      	str	r3, [r2, #4]
 8009d7c:	e009      	b.n	8009d92 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009d7e:	78fb      	ldrb	r3, [r7, #3]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d106      	bne.n	8009d92 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	f241 7370 	movw	r3, #6000	; 0x1770
 8009d90:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009dac:	2300      	movs	r3, #0
 8009dae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009dc0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009dd0:	2064      	movs	r0, #100	; 0x64
 8009dd2:	f7f9 fcfb 	bl	80037cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009dde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009de2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009de4:	200a      	movs	r0, #10
 8009de6:	f7f9 fcf1 	bl	80037cc <HAL_Delay>

  return HAL_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009e04:	2300      	movs	r3, #0
 8009e06:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009e18:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d109      	bne.n	8009e38 <USB_DriveVbus+0x44>
 8009e24:	78fb      	ldrb	r3, [r7, #3]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d106      	bne.n	8009e38 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e36:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e42:	d109      	bne.n	8009e58 <USB_DriveVbus+0x64>
 8009e44:	78fb      	ldrb	r3, [r7, #3]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d106      	bne.n	8009e58 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e56:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3714      	adds	r7, #20
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b085      	sub	sp, #20
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009e72:	2300      	movs	r3, #0
 8009e74:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	0c5b      	lsrs	r3, r3, #17
 8009e84:	f003 0303 	and.w	r3, r3, #3
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	b29b      	uxth	r3, r3
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3714      	adds	r7, #20
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
	...

08009eb8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	4608      	mov	r0, r1
 8009ec2:	4611      	mov	r1, r2
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	70fb      	strb	r3, [r7, #3]
 8009eca:	460b      	mov	r3, r1
 8009ecc:	70bb      	strb	r3, [r7, #2]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009eda:	78fb      	ldrb	r3, [r7, #3]
 8009edc:	015a      	lsls	r2, r3, #5
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009eec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009eee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d87e      	bhi.n	8009ff4 <USB_HC_Init+0x13c>
 8009ef6:	a201      	add	r2, pc, #4	; (adr r2, 8009efc <USB_HC_Init+0x44>)
 8009ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efc:	08009f0d 	.word	0x08009f0d
 8009f00:	08009fb7 	.word	0x08009fb7
 8009f04:	08009f0d 	.word	0x08009f0d
 8009f08:	08009f79 	.word	0x08009f79
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009f0c:	78fb      	ldrb	r3, [r7, #3]
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f18:	461a      	mov	r2, r3
 8009f1a:	f240 439d 	movw	r3, #1181	; 0x49d
 8009f1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009f20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	da10      	bge.n	8009f4a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009f28:	78fb      	ldrb	r3, [r7, #3]
 8009f2a:	015a      	lsls	r2, r3, #5
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	4413      	add	r3, r2
 8009f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	78fa      	ldrb	r2, [r7, #3]
 8009f38:	0151      	lsls	r1, r2, #5
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	440a      	add	r2, r1
 8009f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f46:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009f48:	e057      	b.n	8009ffa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d051      	beq.n	8009ffa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009f56:	78fb      	ldrb	r3, [r7, #3]
 8009f58:	015a      	lsls	r2, r3, #5
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	78fa      	ldrb	r2, [r7, #3]
 8009f66:	0151      	lsls	r1, r2, #5
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	440a      	add	r2, r1
 8009f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009f74:	60d3      	str	r3, [r2, #12]
      break;
 8009f76:	e040      	b.n	8009ffa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009f78:	78fb      	ldrb	r3, [r7, #3]
 8009f7a:	015a      	lsls	r2, r3, #5
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	4413      	add	r3, r2
 8009f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f84:	461a      	mov	r2, r3
 8009f86:	f240 639d 	movw	r3, #1693	; 0x69d
 8009f8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009f8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	da34      	bge.n	8009ffe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009f94:	78fb      	ldrb	r3, [r7, #3]
 8009f96:	015a      	lsls	r2, r3, #5
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	78fa      	ldrb	r2, [r7, #3]
 8009fa4:	0151      	lsls	r1, r2, #5
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	440a      	add	r2, r1
 8009faa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fb2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009fb4:	e023      	b.n	8009ffe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009fb6:	78fb      	ldrb	r3, [r7, #3]
 8009fb8:	015a      	lsls	r2, r3, #5
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f240 2325 	movw	r3, #549	; 0x225
 8009fc8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009fca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	da17      	bge.n	800a002 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009fd2:	78fb      	ldrb	r3, [r7, #3]
 8009fd4:	015a      	lsls	r2, r3, #5
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	4413      	add	r3, r2
 8009fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	78fa      	ldrb	r2, [r7, #3]
 8009fe2:	0151      	lsls	r1, r2, #5
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	440a      	add	r2, r1
 8009fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009ff0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009ff2:	e006      	b.n	800a002 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	77fb      	strb	r3, [r7, #31]
      break;
 8009ff8:	e004      	b.n	800a004 <USB_HC_Init+0x14c>
      break;
 8009ffa:	bf00      	nop
 8009ffc:	e002      	b.n	800a004 <USB_HC_Init+0x14c>
      break;
 8009ffe:	bf00      	nop
 800a000:	e000      	b.n	800a004 <USB_HC_Init+0x14c>
      break;
 800a002:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a00a:	699a      	ldr	r2, [r3, #24]
 800a00c:	78fb      	ldrb	r3, [r7, #3]
 800a00e:	f003 030f 	and.w	r3, r3, #15
 800a012:	2101      	movs	r1, #1
 800a014:	fa01 f303 	lsl.w	r3, r1, r3
 800a018:	6939      	ldr	r1, [r7, #16]
 800a01a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a01e:	4313      	orrs	r3, r2
 800a020:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	699b      	ldr	r3, [r3, #24]
 800a026:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a02e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a032:	2b00      	cmp	r3, #0
 800a034:	da03      	bge.n	800a03e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a03a:	61bb      	str	r3, [r7, #24]
 800a03c:	e001      	b.n	800a042 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800a03e:	2300      	movs	r3, #0
 800a040:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7ff ff0f 	bl	8009e66 <USB_GetHostSpeed>
 800a048:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a04a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d106      	bne.n	800a060 <USB_HC_Init+0x1a8>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2b02      	cmp	r3, #2
 800a056:	d003      	beq.n	800a060 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a05c:	617b      	str	r3, [r7, #20]
 800a05e:	e001      	b.n	800a064 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a064:	787b      	ldrb	r3, [r7, #1]
 800a066:	059b      	lsls	r3, r3, #22
 800a068:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a06c:	78bb      	ldrb	r3, [r7, #2]
 800a06e:	02db      	lsls	r3, r3, #11
 800a070:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a074:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a076:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a07a:	049b      	lsls	r3, r3, #18
 800a07c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a080:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a082:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a084:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a088:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a08e:	78fb      	ldrb	r3, [r7, #3]
 800a090:	0159      	lsls	r1, r3, #5
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	440b      	add	r3, r1
 800a096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a09a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a0a0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800a0a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a0a6:	2b03      	cmp	r3, #3
 800a0a8:	d10f      	bne.n	800a0ca <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800a0aa:	78fb      	ldrb	r3, [r7, #3]
 800a0ac:	015a      	lsls	r2, r3, #5
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	78fa      	ldrb	r2, [r7, #3]
 800a0ba:	0151      	lsls	r1, r2, #5
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	440a      	add	r2, r1
 800a0c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0c8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a0ca:	7ffb      	ldrb	r3, [r7, #31]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3720      	adds	r7, #32
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08c      	sub	sp, #48	; 0x30
 800a0d8:	af02      	add	r7, sp, #8
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	785b      	ldrb	r3, [r3, #1]
 800a0ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a0ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0f0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d02d      	beq.n	800a15a <USB_HC_StartXfer+0x86>
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	791b      	ldrb	r3, [r3, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d129      	bne.n	800a15a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a106:	79fb      	ldrb	r3, [r7, #7]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d117      	bne.n	800a13c <USB_HC_StartXfer+0x68>
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	79db      	ldrb	r3, [r3, #7]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d003      	beq.n	800a11c <USB_HC_StartXfer+0x48>
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	79db      	ldrb	r3, [r3, #7]
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d10f      	bne.n	800a13c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	015a      	lsls	r2, r3, #5
 800a120:	6a3b      	ldr	r3, [r7, #32]
 800a122:	4413      	add	r3, r2
 800a124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	69fa      	ldr	r2, [r7, #28]
 800a12c:	0151      	lsls	r1, r2, #5
 800a12e:	6a3a      	ldr	r2, [r7, #32]
 800a130:	440a      	add	r2, r1
 800a132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a13a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a13c:	79fb      	ldrb	r3, [r7, #7]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10b      	bne.n	800a15a <USB_HC_StartXfer+0x86>
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	795b      	ldrb	r3, [r3, #5]
 800a146:	2b01      	cmp	r3, #1
 800a148:	d107      	bne.n	800a15a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	785b      	ldrb	r3, [r3, #1]
 800a14e:	4619      	mov	r1, r3
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f000 fa2f 	bl	800a5b4 <USB_DoPing>
      return HAL_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	e0f8      	b.n	800a34c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	695b      	ldr	r3, [r3, #20]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d018      	beq.n	800a194 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	68ba      	ldr	r2, [r7, #8]
 800a168:	8912      	ldrh	r2, [r2, #8]
 800a16a:	4413      	add	r3, r2
 800a16c:	3b01      	subs	r3, #1
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	8912      	ldrh	r2, [r2, #8]
 800a172:	fbb3 f3f2 	udiv	r3, r3, r2
 800a176:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a178:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a17a:	8b7b      	ldrh	r3, [r7, #26]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d90b      	bls.n	800a198 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a180:	8b7b      	ldrh	r3, [r7, #26]
 800a182:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	8912      	ldrh	r2, [r2, #8]
 800a18a:	fb02 f203 	mul.w	r2, r2, r3
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	611a      	str	r2, [r3, #16]
 800a192:	e001      	b.n	800a198 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a194:	2301      	movs	r3, #1
 800a196:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	78db      	ldrb	r3, [r3, #3]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d007      	beq.n	800a1b0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a1a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	8912      	ldrh	r2, [r2, #8]
 800a1a6:	fb02 f203 	mul.w	r2, r2, r3
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	611a      	str	r2, [r3, #16]
 800a1ae:	e003      	b.n	800a1b8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	695a      	ldr	r2, [r3, #20]
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a1c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1c2:	04d9      	lsls	r1, r3, #19
 800a1c4:	4b63      	ldr	r3, [pc, #396]	; (800a354 <USB_HC_StartXfer+0x280>)
 800a1c6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a1c8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	7a9b      	ldrb	r3, [r3, #10]
 800a1ce:	075b      	lsls	r3, r3, #29
 800a1d0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a1d4:	69f9      	ldr	r1, [r7, #28]
 800a1d6:	0148      	lsls	r0, r1, #5
 800a1d8:	6a39      	ldr	r1, [r7, #32]
 800a1da:	4401      	add	r1, r0
 800a1dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a1e0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a1e2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a1e4:	79fb      	ldrb	r3, [r7, #7]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d009      	beq.n	800a1fe <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	68d9      	ldr	r1, [r3, #12]
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	015a      	lsls	r2, r3, #5
 800a1f2:	6a3b      	ldr	r3, [r7, #32]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1fa:	460a      	mov	r2, r1
 800a1fc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a1fe:	6a3b      	ldr	r3, [r7, #32]
 800a200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	f003 0301 	and.w	r3, r3, #1
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	bf0c      	ite	eq
 800a20e:	2301      	moveq	r3, #1
 800a210:	2300      	movne	r3, #0
 800a212:	b2db      	uxtb	r3, r3
 800a214:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	015a      	lsls	r2, r3, #5
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	4413      	add	r3, r2
 800a21e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	69fa      	ldr	r2, [r7, #28]
 800a226:	0151      	lsls	r1, r2, #5
 800a228:	6a3a      	ldr	r2, [r7, #32]
 800a22a:	440a      	add	r2, r1
 800a22c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a230:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a234:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	015a      	lsls	r2, r3, #5
 800a23a:	6a3b      	ldr	r3, [r7, #32]
 800a23c:	4413      	add	r3, r2
 800a23e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	7e7b      	ldrb	r3, [r7, #25]
 800a246:	075b      	lsls	r3, r3, #29
 800a248:	69f9      	ldr	r1, [r7, #28]
 800a24a:	0148      	lsls	r0, r1, #5
 800a24c:	6a39      	ldr	r1, [r7, #32]
 800a24e:	4401      	add	r1, r0
 800a250:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a254:	4313      	orrs	r3, r2
 800a256:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	015a      	lsls	r2, r3, #5
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	4413      	add	r3, r2
 800a260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a26e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	78db      	ldrb	r3, [r3, #3]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d004      	beq.n	800a282 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a27e:	613b      	str	r3, [r7, #16]
 800a280:	e003      	b.n	800a28a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a288:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a290:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	015a      	lsls	r2, r3, #5
 800a296:	6a3b      	ldr	r3, [r7, #32]
 800a298:	4413      	add	r3, r2
 800a29a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a29e:	461a      	mov	r2, r3
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	e04e      	b.n	800a34c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	78db      	ldrb	r3, [r3, #3]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d149      	bne.n	800a34a <USB_HC_StartXfer+0x276>
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d045      	beq.n	800a34a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	79db      	ldrb	r3, [r3, #7]
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d830      	bhi.n	800a328 <USB_HC_StartXfer+0x254>
 800a2c6:	a201      	add	r2, pc, #4	; (adr r2, 800a2cc <USB_HC_StartXfer+0x1f8>)
 800a2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2cc:	0800a2dd 	.word	0x0800a2dd
 800a2d0:	0800a301 	.word	0x0800a301
 800a2d4:	0800a2dd 	.word	0x0800a2dd
 800a2d8:	0800a301 	.word	0x0800a301
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	3303      	adds	r3, #3
 800a2e2:	089b      	lsrs	r3, r3, #2
 800a2e4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a2e6:	8afa      	ldrh	r2, [r7, #22]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d91c      	bls.n	800a32c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	699b      	ldr	r3, [r3, #24]
 800a2f6:	f043 0220 	orr.w	r2, r3, #32
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	619a      	str	r2, [r3, #24]
        }
        break;
 800a2fe:	e015      	b.n	800a32c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	695b      	ldr	r3, [r3, #20]
 800a304:	3303      	adds	r3, #3
 800a306:	089b      	lsrs	r3, r3, #2
 800a308:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a30a:	8afa      	ldrh	r2, [r7, #22]
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	b29b      	uxth	r3, r3
 800a316:	429a      	cmp	r2, r3
 800a318:	d90a      	bls.n	800a330 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	699b      	ldr	r3, [r3, #24]
 800a31e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	619a      	str	r2, [r3, #24]
        }
        break;
 800a326:	e003      	b.n	800a330 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a328:	bf00      	nop
 800a32a:	e002      	b.n	800a332 <USB_HC_StartXfer+0x25e>
        break;
 800a32c:	bf00      	nop
 800a32e:	e000      	b.n	800a332 <USB_HC_StartXfer+0x25e>
        break;
 800a330:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	68d9      	ldr	r1, [r3, #12]
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	785a      	ldrb	r2, [r3, #1]
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	2000      	movs	r0, #0
 800a342:	9000      	str	r0, [sp, #0]
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f7ff fb81 	bl	8009a4c <USB_WritePacket>
  }

  return HAL_OK;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3728      	adds	r7, #40	; 0x28
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	1ff80000 	.word	0x1ff80000

0800a358 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a36a:	695b      	ldr	r3, [r3, #20]
 800a36c:	b29b      	uxth	r3, r3
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b089      	sub	sp, #36	; 0x24
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	460b      	mov	r3, r1
 800a384:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800a38a:	78fb      	ldrb	r3, [r7, #3]
 800a38c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800a38e:	2300      	movs	r3, #0
 800a390:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	015a      	lsls	r2, r3, #5
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	4413      	add	r3, r2
 800a39a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	0c9b      	lsrs	r3, r3, #18
 800a3a2:	f003 0303 	and.w	r3, r3, #3
 800a3a6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	015a      	lsls	r2, r3, #5
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	0fdb      	lsrs	r3, r3, #31
 800a3b8:	f003 0301 	and.w	r3, r3, #1
 800a3bc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	f003 0320 	and.w	r3, r3, #32
 800a3c6:	2b20      	cmp	r3, #32
 800a3c8:	d104      	bne.n	800a3d4 <USB_HC_Halt+0x5a>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d101      	bne.n	800a3d4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	e0e8      	b.n	800a5a6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <USB_HC_Halt+0x66>
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	d173      	bne.n	800a4c8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	015a      	lsls	r2, r3, #5
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	697a      	ldr	r2, [r7, #20]
 800a3f0:	0151      	lsls	r1, r2, #5
 800a3f2:	69ba      	ldr	r2, [r7, #24]
 800a3f4:	440a      	add	r2, r1
 800a3f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3fe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	f003 0320 	and.w	r3, r3, #32
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f040 80cb 	bne.w	800a5a4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a412:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a416:	2b00      	cmp	r3, #0
 800a418:	d143      	bne.n	800a4a2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	015a      	lsls	r2, r3, #5
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	4413      	add	r3, r2
 800a422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	0151      	lsls	r1, r2, #5
 800a42c:	69ba      	ldr	r2, [r7, #24]
 800a42e:	440a      	add	r2, r1
 800a430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a438:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	015a      	lsls	r2, r3, #5
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	4413      	add	r3, r2
 800a442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	0151      	lsls	r1, r2, #5
 800a44c:	69ba      	ldr	r2, [r7, #24]
 800a44e:	440a      	add	r2, r1
 800a450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a454:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a458:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	015a      	lsls	r2, r3, #5
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	4413      	add	r3, r2
 800a462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	0151      	lsls	r1, r2, #5
 800a46c:	69ba      	ldr	r2, [r7, #24]
 800a46e:	440a      	add	r2, r1
 800a470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a474:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a478:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	3301      	adds	r3, #1
 800a47e:	61fb      	str	r3, [r7, #28]
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a486:	d81d      	bhi.n	800a4c4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a49a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a49e:	d0ec      	beq.n	800a47a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a4a0:	e080      	b.n	800a5a4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	015a      	lsls	r2, r3, #5
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	0151      	lsls	r1, r2, #5
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	440a      	add	r2, r1
 800a4b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a4c0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a4c2:	e06f      	b.n	800a5a4 <USB_HC_Halt+0x22a>
            break;
 800a4c4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a4c6:	e06d      	b.n	800a5a4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	015a      	lsls	r2, r3, #5
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	0151      	lsls	r1, r2, #5
 800a4da:	69ba      	ldr	r2, [r7, #24]
 800a4dc:	440a      	add	r2, r1
 800a4de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4e6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d143      	bne.n	800a580 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	015a      	lsls	r2, r3, #5
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	4413      	add	r3, r2
 800a500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	0151      	lsls	r1, r2, #5
 800a50a:	69ba      	ldr	r2, [r7, #24]
 800a50c:	440a      	add	r2, r1
 800a50e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a512:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a516:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	0151      	lsls	r1, r2, #5
 800a52a:	69ba      	ldr	r2, [r7, #24]
 800a52c:	440a      	add	r2, r1
 800a52e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a536:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	015a      	lsls	r2, r3, #5
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	0151      	lsls	r1, r2, #5
 800a54a:	69ba      	ldr	r2, [r7, #24]
 800a54c:	440a      	add	r2, r1
 800a54e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a552:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a556:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	3301      	adds	r3, #1
 800a55c:	61fb      	str	r3, [r7, #28]
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a564:	d81d      	bhi.n	800a5a2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	015a      	lsls	r2, r3, #5
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	4413      	add	r3, r2
 800a56e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a57c:	d0ec      	beq.n	800a558 <USB_HC_Halt+0x1de>
 800a57e:	e011      	b.n	800a5a4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	015a      	lsls	r2, r3, #5
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	4413      	add	r3, r2
 800a588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	697a      	ldr	r2, [r7, #20]
 800a590:	0151      	lsls	r1, r2, #5
 800a592:	69ba      	ldr	r2, [r7, #24]
 800a594:	440a      	add	r2, r1
 800a596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a59a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a59e:	6013      	str	r3, [r2, #0]
 800a5a0:	e000      	b.n	800a5a4 <USB_HC_Halt+0x22a>
          break;
 800a5a2:	bf00      	nop
    }
  }

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3724      	adds	r7, #36	; 0x24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
	...

0800a5b4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b087      	sub	sp, #28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a5c4:	78fb      	ldrb	r3, [r7, #3]
 800a5c6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	04da      	lsls	r2, r3, #19
 800a5d0:	4b15      	ldr	r3, [pc, #84]	; (800a628 <USB_DoPing+0x74>)
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	0151      	lsls	r1, r2, #5
 800a5d8:	697a      	ldr	r2, [r7, #20]
 800a5da:	440a      	add	r2, r1
 800a5dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5e4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	015a      	lsls	r2, r3, #5
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a5fc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a604:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	015a      	lsls	r2, r3, #5
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	4413      	add	r3, r2
 800a60e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a612:	461a      	mov	r2, r3
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	1ff80000 	.word	0x1ff80000

0800a62c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b086      	sub	sp, #24
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a638:	2300      	movs	r3, #0
 800a63a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7ff f981 	bl	8009944 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a642:	2110      	movs	r1, #16
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7ff f9b9 	bl	80099bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7ff f9dc 	bl	8009a08 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a650:	2300      	movs	r3, #0
 800a652:	613b      	str	r3, [r7, #16]
 800a654:	e01f      	b.n	800a696 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	015a      	lsls	r2, r3, #5
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	4413      	add	r3, r2
 800a65e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a66c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a674:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a67c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	015a      	lsls	r2, r3, #5
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	4413      	add	r3, r2
 800a686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a68a:	461a      	mov	r2, r3
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	3301      	adds	r3, #1
 800a694:	613b      	str	r3, [r7, #16]
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	2b0f      	cmp	r3, #15
 800a69a:	d9dc      	bls.n	800a656 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a69c:	2300      	movs	r3, #0
 800a69e:	613b      	str	r3, [r7, #16]
 800a6a0:	e034      	b.n	800a70c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	015a      	lsls	r2, r3, #5
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6b8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6c0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a6c8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	015a      	lsls	r2, r3, #5
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	617b      	str	r3, [r7, #20]
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6e8:	d80c      	bhi.n	800a704 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	015a      	lsls	r2, r3, #5
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a700:	d0ec      	beq.n	800a6dc <USB_StopHost+0xb0>
 800a702:	e000      	b.n	800a706 <USB_StopHost+0xda>
        break;
 800a704:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	3301      	adds	r3, #1
 800a70a:	613b      	str	r3, [r7, #16]
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	2b0f      	cmp	r3, #15
 800a710:	d9c7      	bls.n	800a6a2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a718:	461a      	mov	r2, r3
 800a71a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a71e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a726:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7ff f8fa 	bl	8009922 <USB_EnableGlobalInt>

  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3718      	adds	r7, #24
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a738:	b590      	push	{r4, r7, lr}
 800a73a:	b089      	sub	sp, #36	; 0x24
 800a73c:	af04      	add	r7, sp, #16
 800a73e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a740:	2301      	movs	r3, #1
 800a742:	2202      	movs	r2, #2
 800a744:	2102      	movs	r1, #2
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 fc66 	bl	800b018 <USBH_FindInterface>
 800a74c:	4603      	mov	r3, r0
 800a74e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	2bff      	cmp	r3, #255	; 0xff
 800a754:	d002      	beq.n	800a75c <USBH_CDC_InterfaceInit+0x24>
 800a756:	7bfb      	ldrb	r3, [r7, #15]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d901      	bls.n	800a760 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a75c:	2302      	movs	r3, #2
 800a75e:	e13d      	b.n	800a9dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a760:	7bfb      	ldrb	r3, [r7, #15]
 800a762:	4619      	mov	r1, r3
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 fc3b 	bl	800afe0 <USBH_SelectInterface>
 800a76a:	4603      	mov	r3, r0
 800a76c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a76e:	7bbb      	ldrb	r3, [r7, #14]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a774:	2302      	movs	r3, #2
 800a776:	e131      	b.n	800a9dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a77e:	2050      	movs	r0, #80	; 0x50
 800a780:	f002 fa00 	bl	800cb84 <malloc>
 800a784:	4603      	mov	r3, r0
 800a786:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a78e:	69db      	ldr	r3, [r3, #28]
 800a790:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d101      	bne.n	800a79c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a798:	2302      	movs	r3, #2
 800a79a:	e11f      	b.n	800a9dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a79c:	2250      	movs	r2, #80	; 0x50
 800a79e:	2100      	movs	r1, #0
 800a7a0:	68b8      	ldr	r0, [r7, #8]
 800a7a2:	f002 f9ff 	bl	800cba4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a7a6:	7bfb      	ldrb	r3, [r7, #15]
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	211a      	movs	r1, #26
 800a7ac:	fb01 f303 	mul.w	r3, r1, r3
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	b25b      	sxtb	r3, r3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	da15      	bge.n	800a7ea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a7be:	7bfb      	ldrb	r3, [r7, #15]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	211a      	movs	r1, #26
 800a7c4:	fb01 f303 	mul.w	r3, r1, r3
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a7ce:	781a      	ldrb	r2, [r3, #0]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a7d4:	7bfb      	ldrb	r3, [r7, #15]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	211a      	movs	r1, #26
 800a7da:	fb01 f303 	mul.w	r3, r1, r3
 800a7de:	4413      	add	r3, r2
 800a7e0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a7e4:	881a      	ldrh	r2, [r3, #0]
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	785b      	ldrb	r3, [r3, #1]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f001 fe32 	bl	800c45a <USBH_AllocPipe>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	7819      	ldrb	r1, [r3, #0]
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	7858      	ldrb	r0, [r3, #1]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	8952      	ldrh	r2, [r2, #10]
 800a816:	9202      	str	r2, [sp, #8]
 800a818:	2203      	movs	r2, #3
 800a81a:	9201      	str	r2, [sp, #4]
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	4623      	mov	r3, r4
 800a820:	4602      	mov	r2, r0
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f001 fdea 	bl	800c3fc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	2200      	movs	r2, #0
 800a82e:	4619      	mov	r1, r3
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f002 f8f9 	bl	800ca28 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a836:	2300      	movs	r3, #0
 800a838:	2200      	movs	r2, #0
 800a83a:	210a      	movs	r1, #10
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fbeb 	bl	800b018 <USBH_FindInterface>
 800a842:	4603      	mov	r3, r0
 800a844:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a846:	7bfb      	ldrb	r3, [r7, #15]
 800a848:	2bff      	cmp	r3, #255	; 0xff
 800a84a:	d002      	beq.n	800a852 <USBH_CDC_InterfaceInit+0x11a>
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d901      	bls.n	800a856 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a852:	2302      	movs	r3, #2
 800a854:	e0c2      	b.n	800a9dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a856:	7bfb      	ldrb	r3, [r7, #15]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	211a      	movs	r1, #26
 800a85c:	fb01 f303 	mul.w	r3, r1, r3
 800a860:	4413      	add	r3, r2
 800a862:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	b25b      	sxtb	r3, r3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	da16      	bge.n	800a89c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a86e:	7bfb      	ldrb	r3, [r7, #15]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	211a      	movs	r1, #26
 800a874:	fb01 f303 	mul.w	r3, r1, r3
 800a878:	4413      	add	r3, r2
 800a87a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a87e:	781a      	ldrb	r2, [r3, #0]
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a884:	7bfb      	ldrb	r3, [r7, #15]
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	211a      	movs	r1, #26
 800a88a:	fb01 f303 	mul.w	r3, r1, r3
 800a88e:	4413      	add	r3, r2
 800a890:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a894:	881a      	ldrh	r2, [r3, #0]
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	835a      	strh	r2, [r3, #26]
 800a89a:	e015      	b.n	800a8c8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a89c:	7bfb      	ldrb	r3, [r7, #15]
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	211a      	movs	r1, #26
 800a8a2:	fb01 f303 	mul.w	r3, r1, r3
 800a8a6:	4413      	add	r3, r2
 800a8a8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a8ac:	781a      	ldrb	r2, [r3, #0]
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a8b2:	7bfb      	ldrb	r3, [r7, #15]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	211a      	movs	r1, #26
 800a8b8:	fb01 f303 	mul.w	r3, r1, r3
 800a8bc:	4413      	add	r3, r2
 800a8be:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a8c2:	881a      	ldrh	r2, [r3, #0]
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	211a      	movs	r1, #26
 800a8ce:	fb01 f303 	mul.w	r3, r1, r3
 800a8d2:	4413      	add	r3, r2
 800a8d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	b25b      	sxtb	r3, r3
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	da16      	bge.n	800a90e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a8e0:	7bfb      	ldrb	r3, [r7, #15]
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	211a      	movs	r1, #26
 800a8e6:	fb01 f303 	mul.w	r3, r1, r3
 800a8ea:	4413      	add	r3, r2
 800a8ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a8f0:	781a      	ldrb	r2, [r3, #0]
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a8f6:	7bfb      	ldrb	r3, [r7, #15]
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	211a      	movs	r1, #26
 800a8fc:	fb01 f303 	mul.w	r3, r1, r3
 800a900:	4413      	add	r3, r2
 800a902:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a906:	881a      	ldrh	r2, [r3, #0]
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	835a      	strh	r2, [r3, #26]
 800a90c:	e015      	b.n	800a93a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	211a      	movs	r1, #26
 800a914:	fb01 f303 	mul.w	r3, r1, r3
 800a918:	4413      	add	r3, r2
 800a91a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a91e:	781a      	ldrb	r2, [r3, #0]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a924:	7bfb      	ldrb	r3, [r7, #15]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	211a      	movs	r1, #26
 800a92a:	fb01 f303 	mul.w	r3, r1, r3
 800a92e:	4413      	add	r3, r2
 800a930:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a934:	881a      	ldrh	r2, [r3, #0]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	7b9b      	ldrb	r3, [r3, #14]
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f001 fd8a 	bl	800c45a <USBH_AllocPipe>
 800a946:	4603      	mov	r3, r0
 800a948:	461a      	mov	r2, r3
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	7bdb      	ldrb	r3, [r3, #15]
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f001 fd80 	bl	800c45a <USBH_AllocPipe>
 800a95a:	4603      	mov	r3, r0
 800a95c:	461a      	mov	r2, r3
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	7b59      	ldrb	r1, [r3, #13]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	7b98      	ldrb	r0, [r3, #14]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	8b12      	ldrh	r2, [r2, #24]
 800a97a:	9202      	str	r2, [sp, #8]
 800a97c:	2202      	movs	r2, #2
 800a97e:	9201      	str	r2, [sp, #4]
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	4623      	mov	r3, r4
 800a984:	4602      	mov	r2, r0
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f001 fd38 	bl	800c3fc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	7b19      	ldrb	r1, [r3, #12]
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	7bd8      	ldrb	r0, [r3, #15]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a9a0:	68ba      	ldr	r2, [r7, #8]
 800a9a2:	8b52      	ldrh	r2, [r2, #26]
 800a9a4:	9202      	str	r2, [sp, #8]
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	9201      	str	r2, [sp, #4]
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	4623      	mov	r3, r4
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f001 fd23 	bl	800c3fc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	7b5b      	ldrb	r3, [r3, #13]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f002 f82e 	bl	800ca28 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	7b1b      	ldrb	r3, [r3, #12]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f002 f827 	bl	800ca28 <USBH_LL_SetToggle>

  return USBH_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd90      	pop	{r4, r7, pc}

0800a9e4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9f2:	69db      	ldr	r3, [r3, #28]
 800a9f4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00e      	beq.n	800aa1c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f001 fd18 	bl	800c43a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	4619      	mov	r1, r3
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f001 fd43 	bl	800c49c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	7b1b      	ldrb	r3, [r3, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00e      	beq.n	800aa42 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	7b1b      	ldrb	r3, [r3, #12]
 800aa28:	4619      	mov	r1, r3
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f001 fd05 	bl	800c43a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	7b1b      	ldrb	r3, [r3, #12]
 800aa34:	4619      	mov	r1, r3
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f001 fd30 	bl	800c49c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	7b5b      	ldrb	r3, [r3, #13]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00e      	beq.n	800aa68 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	7b5b      	ldrb	r3, [r3, #13]
 800aa4e:	4619      	mov	r1, r3
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f001 fcf2 	bl	800c43a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	7b5b      	ldrb	r3, [r3, #13]
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f001 fd1d 	bl	800c49c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa6e:	69db      	ldr	r3, [r3, #28]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00b      	beq.n	800aa8c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa7a:	69db      	ldr	r3, [r3, #28]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f002 f889 	bl	800cb94 <free>
    phost->pActiveClass->pData = 0U;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa88:	2200      	movs	r2, #0
 800aa8a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b084      	sub	sp, #16
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaa4:	69db      	ldr	r3, [r3, #28]
 800aaa6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	3340      	adds	r3, #64	; 0x40
 800aaac:	4619      	mov	r1, r3
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f8b1 	bl	800ac16 <GetLineCoding>
 800aab4:	4603      	mov	r3, r0
 800aab6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800aab8:	7afb      	ldrb	r3, [r7, #11]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d105      	bne.n	800aaca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aac4:	2102      	movs	r1, #2
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800aaca:	7afb      	ldrb	r3, [r7, #11]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800aadc:	2301      	movs	r3, #1
 800aade:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaea:	69db      	ldr	r3, [r3, #28]
 800aaec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800aaf4:	2b04      	cmp	r3, #4
 800aaf6:	d877      	bhi.n	800abe8 <USBH_CDC_Process+0x114>
 800aaf8:	a201      	add	r2, pc, #4	; (adr r2, 800ab00 <USBH_CDC_Process+0x2c>)
 800aafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aafe:	bf00      	nop
 800ab00:	0800ab15 	.word	0x0800ab15
 800ab04:	0800ab1b 	.word	0x0800ab1b
 800ab08:	0800ab4b 	.word	0x0800ab4b
 800ab0c:	0800abbf 	.word	0x0800abbf
 800ab10:	0800abcd 	.word	0x0800abcd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ab14:	2300      	movs	r3, #0
 800ab16:	73fb      	strb	r3, [r7, #15]
      break;
 800ab18:	e06d      	b.n	800abf6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f897 	bl	800ac54 <SetLineCoding>
 800ab26:	4603      	mov	r3, r0
 800ab28:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ab2a:	7bbb      	ldrb	r3, [r7, #14]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d104      	bne.n	800ab3a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	2202      	movs	r2, #2
 800ab34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ab38:	e058      	b.n	800abec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ab3a:	7bbb      	ldrb	r3, [r7, #14]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d055      	beq.n	800abec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	2204      	movs	r2, #4
 800ab44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ab48:	e050      	b.n	800abec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	3340      	adds	r3, #64	; 0x40
 800ab4e:	4619      	mov	r1, r3
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f860 	bl	800ac16 <GetLineCoding>
 800ab56:	4603      	mov	r3, r0
 800ab58:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ab5a:	7bbb      	ldrb	r3, [r7, #14]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d126      	bne.n	800abae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab72:	791b      	ldrb	r3, [r3, #4]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d13b      	bne.n	800abf0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab82:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d133      	bne.n	800abf0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab92:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d12b      	bne.n	800abf0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aba0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d124      	bne.n	800abf0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 f958 	bl	800ae5c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800abac:	e020      	b.n	800abf0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800abae:	7bbb      	ldrb	r3, [r7, #14]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d01d      	beq.n	800abf0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	2204      	movs	r2, #4
 800abb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800abbc:	e018      	b.n	800abf0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 f867 	bl	800ac92 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f8da 	bl	800ad7e <CDC_ProcessReception>
      break;
 800abca:	e014      	b.n	800abf6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800abcc:	2100      	movs	r1, #0
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 ffe3 	bl	800bb9a <USBH_ClrFeature>
 800abd4:	4603      	mov	r3, r0
 800abd6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d10a      	bne.n	800abf4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800abe6:	e005      	b.n	800abf4 <USBH_CDC_Process+0x120>

    default:
      break;
 800abe8:	bf00      	nop
 800abea:	e004      	b.n	800abf6 <USBH_CDC_Process+0x122>
      break;
 800abec:	bf00      	nop
 800abee:	e002      	b.n	800abf6 <USBH_CDC_Process+0x122>
      break;
 800abf0:	bf00      	nop
 800abf2:	e000      	b.n	800abf6 <USBH_CDC_Process+0x122>
      break;
 800abf4:	bf00      	nop

  }

  return status;
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	370c      	adds	r7, #12
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr

0800ac16 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b082      	sub	sp, #8
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	22a1      	movs	r2, #161	; 0xa1
 800ac24:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2221      	movs	r2, #33	; 0x21
 800ac2a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2207      	movs	r2, #7
 800ac3c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2207      	movs	r2, #7
 800ac42:	4619      	mov	r1, r3
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f001 f988 	bl	800bf5a <USBH_CtlReq>
 800ac4a:	4603      	mov	r3, r0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2221      	movs	r2, #33	; 0x21
 800ac62:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2220      	movs	r2, #32
 800ac68:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2207      	movs	r2, #7
 800ac7a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	2207      	movs	r2, #7
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f001 f969 	bl	800bf5a <USBH_CtlReq>
 800ac88:	4603      	mov	r3, r0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b086      	sub	sp, #24
 800ac96:	af02      	add	r7, sp, #8
 800ac98:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aca0:	69db      	ldr	r3, [r3, #28]
 800aca2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aca4:	2300      	movs	r3, #0
 800aca6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d002      	beq.n	800acb8 <CDC_ProcessTransmission+0x26>
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d023      	beq.n	800acfe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800acb6:	e05e      	b.n	800ad76 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	8b12      	ldrh	r2, [r2, #24]
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d90b      	bls.n	800acdc <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	69d9      	ldr	r1, [r3, #28]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	8b1a      	ldrh	r2, [r3, #24]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	7b5b      	ldrb	r3, [r3, #13]
 800acd0:	2001      	movs	r0, #1
 800acd2:	9000      	str	r0, [sp, #0]
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f001 fb4e 	bl	800c376 <USBH_BulkSendData>
 800acda:	e00b      	b.n	800acf4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	7b5b      	ldrb	r3, [r3, #13]
 800acea:	2001      	movs	r0, #1
 800acec:	9000      	str	r0, [sp, #0]
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f001 fb41 	bl	800c376 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2202      	movs	r2, #2
 800acf8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800acfc:	e03b      	b.n	800ad76 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	7b5b      	ldrb	r3, [r3, #13]
 800ad02:	4619      	mov	r1, r3
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f001 fe65 	bl	800c9d4 <USBH_LL_GetURBState>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ad0e:	7afb      	ldrb	r3, [r7, #11]
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d128      	bne.n	800ad66 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	8b12      	ldrh	r2, [r2, #24]
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d90e      	bls.n	800ad3e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	8b12      	ldrh	r2, [r2, #24]
 800ad28:	1a9a      	subs	r2, r3, r2
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	69db      	ldr	r3, [r3, #28]
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	8b12      	ldrh	r2, [r2, #24]
 800ad36:	441a      	add	r2, r3
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	61da      	str	r2, [r3, #28]
 800ad3c:	e002      	b.n	800ad44 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d004      	beq.n	800ad56 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ad54:	e00e      	b.n	800ad74 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f868 	bl	800ae34 <USBH_CDC_TransmitCallback>
      break;
 800ad64:	e006      	b.n	800ad74 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800ad66:	7afb      	ldrb	r3, [r7, #11]
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	d103      	bne.n	800ad74 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ad74:	bf00      	nop
  }
}
 800ad76:	bf00      	nop
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b086      	sub	sp, #24
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad8c:	69db      	ldr	r3, [r3, #28]
 800ad8e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad90:	2300      	movs	r3, #0
 800ad92:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	d002      	beq.n	800ada4 <CDC_ProcessReception+0x26>
 800ad9e:	2b04      	cmp	r3, #4
 800ada0:	d00e      	beq.n	800adc0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ada2:	e043      	b.n	800ae2c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	6a19      	ldr	r1, [r3, #32]
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	8b5a      	ldrh	r2, [r3, #26]
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	7b1b      	ldrb	r3, [r3, #12]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f001 fb05 	bl	800c3c0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	2204      	movs	r2, #4
 800adba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800adbe:	e035      	b.n	800ae2c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	7b1b      	ldrb	r3, [r3, #12]
 800adc4:	4619      	mov	r1, r3
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f001 fe04 	bl	800c9d4 <USBH_LL_GetURBState>
 800adcc:	4603      	mov	r3, r0
 800adce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800add0:	7cfb      	ldrb	r3, [r7, #19]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d129      	bne.n	800ae2a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	7b1b      	ldrb	r3, [r3, #12]
 800adda:	4619      	mov	r1, r3
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f001 fd67 	bl	800c8b0 <USBH_LL_GetLastXferSize>
 800ade2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	429a      	cmp	r2, r3
 800adec:	d016      	beq.n	800ae1c <CDC_ProcessReception+0x9e>
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	8b5b      	ldrh	r3, [r3, #26]
 800adf2:	461a      	mov	r2, r3
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d910      	bls.n	800ae1c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	1ad2      	subs	r2, r2, r3
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	6a1a      	ldr	r2, [r3, #32]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	441a      	add	r2, r3
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	2203      	movs	r2, #3
 800ae16:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ae1a:	e006      	b.n	800ae2a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 f80f 	bl	800ae48 <USBH_CDC_ReceiveCallback>
      break;
 800ae2a:	bf00      	nop
  }
}
 800ae2c:	bf00      	nop
 800ae2e:	3718      	adds	r7, #24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae3c:	bf00      	nop
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d101      	bne.n	800ae88 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ae84:	2302      	movs	r3, #2
 800ae86:	e029      	b.n	800aedc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	79fa      	ldrb	r2, [r7, #7]
 800ae8c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f000 f81f 	bl	800aee4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d003      	beq.n	800aed4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f001 fc37 	bl	800c748 <USBH_LL_Init>

  return USBH_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800aeec:	2300      	movs	r3, #0
 800aeee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aef0:	2300      	movs	r3, #0
 800aef2:	60fb      	str	r3, [r7, #12]
 800aef4:	e009      	b.n	800af0a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	33e0      	adds	r3, #224	; 0xe0
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	4413      	add	r3, r2
 800af00:	2200      	movs	r2, #0
 800af02:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	3301      	adds	r3, #1
 800af08:	60fb      	str	r3, [r7, #12]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2b0e      	cmp	r3, #14
 800af0e:	d9f2      	bls.n	800aef6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800af10:	2300      	movs	r3, #0
 800af12:	60fb      	str	r3, [r7, #12]
 800af14:	e009      	b.n	800af2a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	4413      	add	r3, r2
 800af1c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800af20:	2200      	movs	r2, #0
 800af22:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	3301      	adds	r3, #1
 800af28:	60fb      	str	r3, [r7, #12]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af30:	d3f1      	bcc.n	800af16 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2201      	movs	r2, #1
 800af42:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2240      	movs	r2, #64	; 0x40
 800af56:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2201      	movs	r2, #1
 800af6a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800af96:	2300      	movs	r3, #0
 800af98:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d016      	beq.n	800afce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10e      	bne.n	800afc8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800afb0:	1c59      	adds	r1, r3, #1
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	33de      	adds	r3, #222	; 0xde
 800afbc:	6839      	ldr	r1, [r7, #0]
 800afbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	73fb      	strb	r3, [r7, #15]
 800afc6:	e004      	b.n	800afd2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800afc8:	2302      	movs	r3, #2
 800afca:	73fb      	strb	r3, [r7, #15]
 800afcc:	e001      	b.n	800afd2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800afce:	2302      	movs	r3, #2
 800afd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800afd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	460b      	mov	r3, r1
 800afea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800aff6:	78fa      	ldrb	r2, [r7, #3]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d204      	bcs.n	800b006 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	78fa      	ldrb	r2, [r7, #3]
 800b000:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b004:	e001      	b.n	800b00a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b006:	2302      	movs	r3, #2
 800b008:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3714      	adds	r7, #20
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b018:	b480      	push	{r7}
 800b01a:	b087      	sub	sp, #28
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	4608      	mov	r0, r1
 800b022:	4611      	mov	r1, r2
 800b024:	461a      	mov	r2, r3
 800b026:	4603      	mov	r3, r0
 800b028:	70fb      	strb	r3, [r7, #3]
 800b02a:	460b      	mov	r3, r1
 800b02c:	70bb      	strb	r3, [r7, #2]
 800b02e:	4613      	mov	r3, r2
 800b030:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b032:	2300      	movs	r3, #0
 800b034:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b036:	2300      	movs	r3, #0
 800b038:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b040:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b042:	e025      	b.n	800b090 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b044:	7dfb      	ldrb	r3, [r7, #23]
 800b046:	221a      	movs	r2, #26
 800b048:	fb02 f303 	mul.w	r3, r2, r3
 800b04c:	3308      	adds	r3, #8
 800b04e:	68fa      	ldr	r2, [r7, #12]
 800b050:	4413      	add	r3, r2
 800b052:	3302      	adds	r3, #2
 800b054:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	795b      	ldrb	r3, [r3, #5]
 800b05a:	78fa      	ldrb	r2, [r7, #3]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d002      	beq.n	800b066 <USBH_FindInterface+0x4e>
 800b060:	78fb      	ldrb	r3, [r7, #3]
 800b062:	2bff      	cmp	r3, #255	; 0xff
 800b064:	d111      	bne.n	800b08a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b06a:	78ba      	ldrb	r2, [r7, #2]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d002      	beq.n	800b076 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b070:	78bb      	ldrb	r3, [r7, #2]
 800b072:	2bff      	cmp	r3, #255	; 0xff
 800b074:	d109      	bne.n	800b08a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b07a:	787a      	ldrb	r2, [r7, #1]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d002      	beq.n	800b086 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b080:	787b      	ldrb	r3, [r7, #1]
 800b082:	2bff      	cmp	r3, #255	; 0xff
 800b084:	d101      	bne.n	800b08a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b086:	7dfb      	ldrb	r3, [r7, #23]
 800b088:	e006      	b.n	800b098 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b08a:	7dfb      	ldrb	r3, [r7, #23]
 800b08c:	3301      	adds	r3, #1
 800b08e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b090:	7dfb      	ldrb	r3, [r7, #23]
 800b092:	2b01      	cmp	r3, #1
 800b094:	d9d6      	bls.n	800b044 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b096:	23ff      	movs	r3, #255	; 0xff
}
 800b098:	4618      	mov	r0, r3
 800b09a:	371c      	adds	r7, #28
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f001 fb87 	bl	800c7c0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f001 fca0 	bl	800c9fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b088      	sub	sp, #32
 800b0c8:	af04      	add	r7, sp, #16
 800b0ca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b0cc:	2302      	movs	r3, #2
 800b0ce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d102      	bne.n	800b0e6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2203      	movs	r2, #3
 800b0e4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b0b      	cmp	r3, #11
 800b0ee:	f200 81b3 	bhi.w	800b458 <USBH_Process+0x394>
 800b0f2:	a201      	add	r2, pc, #4	; (adr r2, 800b0f8 <USBH_Process+0x34>)
 800b0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f8:	0800b129 	.word	0x0800b129
 800b0fc:	0800b15b 	.word	0x0800b15b
 800b100:	0800b1c3 	.word	0x0800b1c3
 800b104:	0800b3f3 	.word	0x0800b3f3
 800b108:	0800b459 	.word	0x0800b459
 800b10c:	0800b267 	.word	0x0800b267
 800b110:	0800b399 	.word	0x0800b399
 800b114:	0800b29d 	.word	0x0800b29d
 800b118:	0800b2bd 	.word	0x0800b2bd
 800b11c:	0800b2dd 	.word	0x0800b2dd
 800b120:	0800b30b 	.word	0x0800b30b
 800b124:	0800b3db 	.word	0x0800b3db
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	2b00      	cmp	r3, #0
 800b132:	f000 8193 	beq.w	800b45c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2201      	movs	r2, #1
 800b13a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b13c:	20c8      	movs	r0, #200	; 0xc8
 800b13e:	f001 fca3 	bl	800ca88 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f001 fb99 	bl	800c87a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b158:	e180      	b.n	800b45c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b160:	2b01      	cmp	r3, #1
 800b162:	d107      	bne.n	800b174 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2202      	movs	r2, #2
 800b170:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b172:	e182      	b.n	800b47a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b17a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b17e:	d914      	bls.n	800b1aa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b186:	3301      	adds	r3, #1
 800b188:	b2da      	uxtb	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b196:	2b03      	cmp	r3, #3
 800b198:	d903      	bls.n	800b1a2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	220d      	movs	r2, #13
 800b19e:	701a      	strb	r2, [r3, #0]
      break;
 800b1a0:	e16b      	b.n	800b47a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	701a      	strb	r2, [r3, #0]
      break;
 800b1a8:	e167      	b.n	800b47a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b1b0:	f103 020a 	add.w	r2, r3, #10
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b1ba:	200a      	movs	r0, #10
 800b1bc:	f001 fc64 	bl	800ca88 <USBH_Delay>
      break;
 800b1c0:	e15b      	b.n	800b47a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d005      	beq.n	800b1d8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1d2:	2104      	movs	r1, #4
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b1d8:	2064      	movs	r0, #100	; 0x64
 800b1da:	f001 fc55 	bl	800ca88 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f001 fb24 	bl	800c82c <USBH_LL_GetSpeed>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2205      	movs	r2, #5
 800b1f2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f001 f92f 	bl	800c45a <USBH_AllocPipe>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	461a      	mov	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b204:	2180      	movs	r1, #128	; 0x80
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f001 f927 	bl	800c45a <USBH_AllocPipe>
 800b20c:	4603      	mov	r3, r0
 800b20e:	461a      	mov	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	7919      	ldrb	r1, [r3, #4]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b228:	b292      	uxth	r2, r2
 800b22a:	9202      	str	r2, [sp, #8]
 800b22c:	2200      	movs	r2, #0
 800b22e:	9201      	str	r2, [sp, #4]
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	4603      	mov	r3, r0
 800b234:	2280      	movs	r2, #128	; 0x80
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f001 f8e0 	bl	800c3fc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	7959      	ldrb	r1, [r3, #5]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b250:	b292      	uxth	r2, r2
 800b252:	9202      	str	r2, [sp, #8]
 800b254:	2200      	movs	r2, #0
 800b256:	9201      	str	r2, [sp, #4]
 800b258:	9300      	str	r3, [sp, #0]
 800b25a:	4603      	mov	r3, r0
 800b25c:	2200      	movs	r2, #0
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f001 f8cc 	bl	800c3fc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b264:	e109      	b.n	800b47a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f90c 	bl	800b484 <USBH_HandleEnum>
 800b26c:	4603      	mov	r3, r0
 800b26e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b270:	7bbb      	ldrb	r3, [r7, #14]
 800b272:	b2db      	uxtb	r3, r3
 800b274:	2b00      	cmp	r3, #0
 800b276:	f040 80f3 	bne.w	800b460 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d103      	bne.n	800b294 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2208      	movs	r2, #8
 800b290:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b292:	e0e5      	b.n	800b460 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2207      	movs	r2, #7
 800b298:	701a      	strb	r2, [r3, #0]
      break;
 800b29a:	e0e1      	b.n	800b460 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f000 80de 	beq.w	800b464 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2208      	movs	r2, #8
 800b2b8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b2ba:	e0d3      	b.n	800b464 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fc20 	bl	800bb0c <USBH_SetCfg>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f040 80ca 	bne.w	800b468 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2209      	movs	r2, #9
 800b2d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b2da:	e0c5      	b.n	800b468 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b2e2:	f003 0320 	and.w	r3, r3, #32
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00b      	beq.n	800b302 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b2ea:	2101      	movs	r1, #1
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 fc30 	bl	800bb52 <USBH_SetFeature>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f040 80b9 	bne.w	800b46c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	220a      	movs	r2, #10
 800b2fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b300:	e0b4      	b.n	800b46c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	220a      	movs	r2, #10
 800b306:	701a      	strb	r2, [r3, #0]
      break;
 800b308:	e0b0      	b.n	800b46c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b310:	2b00      	cmp	r3, #0
 800b312:	f000 80ad 	beq.w	800b470 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b31e:	2300      	movs	r3, #0
 800b320:	73fb      	strb	r3, [r7, #15]
 800b322:	e016      	b.n	800b352 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b324:	7bfa      	ldrb	r2, [r7, #15]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	32de      	adds	r2, #222	; 0xde
 800b32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b32e:	791a      	ldrb	r2, [r3, #4]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b336:	429a      	cmp	r2, r3
 800b338:	d108      	bne.n	800b34c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b33a:	7bfa      	ldrb	r2, [r7, #15]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	32de      	adds	r2, #222	; 0xde
 800b340:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b34a:	e005      	b.n	800b358 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b34c:	7bfb      	ldrb	r3, [r7, #15]
 800b34e:	3301      	adds	r3, #1
 800b350:	73fb      	strb	r3, [r7, #15]
 800b352:	7bfb      	ldrb	r3, [r7, #15]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d0e5      	beq.n	800b324 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d016      	beq.n	800b390 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	4798      	blx	r3
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d109      	bne.n	800b388 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2206      	movs	r2, #6
 800b378:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b380:	2103      	movs	r1, #3
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b386:	e073      	b.n	800b470 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	220d      	movs	r2, #13
 800b38c:	701a      	strb	r2, [r3, #0]
      break;
 800b38e:	e06f      	b.n	800b470 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	220d      	movs	r2, #13
 800b394:	701a      	strb	r2, [r3, #0]
      break;
 800b396:	e06b      	b.n	800b470 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d017      	beq.n	800b3d2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	4798      	blx	r3
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b3b2:	7bbb      	ldrb	r3, [r7, #14]
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d103      	bne.n	800b3c2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	220b      	movs	r2, #11
 800b3be:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b3c0:	e058      	b.n	800b474 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800b3c2:	7bbb      	ldrb	r3, [r7, #14]
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d154      	bne.n	800b474 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	220d      	movs	r2, #13
 800b3ce:	701a      	strb	r2, [r3, #0]
      break;
 800b3d0:	e050      	b.n	800b474 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	220d      	movs	r2, #13
 800b3d6:	701a      	strb	r2, [r3, #0]
      break;
 800b3d8:	e04c      	b.n	800b474 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d049      	beq.n	800b478 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3ea:	695b      	ldr	r3, [r3, #20]
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	4798      	blx	r3
      }
      break;
 800b3f0:	e042      	b.n	800b478 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7ff fd72 	bl	800aee4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b406:	2b00      	cmp	r3, #0
 800b408:	d009      	beq.n	800b41e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b424:	2b00      	cmp	r3, #0
 800b426:	d005      	beq.n	800b434 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b42e:	2105      	movs	r1, #5
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d107      	bne.n	800b450 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f7ff fe2b 	bl	800b0a4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b44e:	e014      	b.n	800b47a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f001 f9b5 	bl	800c7c0 <USBH_LL_Start>
      break;
 800b456:	e010      	b.n	800b47a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b458:	bf00      	nop
 800b45a:	e00e      	b.n	800b47a <USBH_Process+0x3b6>
      break;
 800b45c:	bf00      	nop
 800b45e:	e00c      	b.n	800b47a <USBH_Process+0x3b6>
      break;
 800b460:	bf00      	nop
 800b462:	e00a      	b.n	800b47a <USBH_Process+0x3b6>
    break;
 800b464:	bf00      	nop
 800b466:	e008      	b.n	800b47a <USBH_Process+0x3b6>
      break;
 800b468:	bf00      	nop
 800b46a:	e006      	b.n	800b47a <USBH_Process+0x3b6>
      break;
 800b46c:	bf00      	nop
 800b46e:	e004      	b.n	800b47a <USBH_Process+0x3b6>
      break;
 800b470:	bf00      	nop
 800b472:	e002      	b.n	800b47a <USBH_Process+0x3b6>
      break;
 800b474:	bf00      	nop
 800b476:	e000      	b.n	800b47a <USBH_Process+0x3b6>
      break;
 800b478:	bf00      	nop
  }
  return USBH_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af04      	add	r7, sp, #16
 800b48a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b48c:	2301      	movs	r3, #1
 800b48e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b490:	2301      	movs	r3, #1
 800b492:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	785b      	ldrb	r3, [r3, #1]
 800b498:	2b07      	cmp	r3, #7
 800b49a:	f200 81c1 	bhi.w	800b820 <USBH_HandleEnum+0x39c>
 800b49e:	a201      	add	r2, pc, #4	; (adr r2, 800b4a4 <USBH_HandleEnum+0x20>)
 800b4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a4:	0800b4c5 	.word	0x0800b4c5
 800b4a8:	0800b583 	.word	0x0800b583
 800b4ac:	0800b5ed 	.word	0x0800b5ed
 800b4b0:	0800b67b 	.word	0x0800b67b
 800b4b4:	0800b6e5 	.word	0x0800b6e5
 800b4b8:	0800b755 	.word	0x0800b755
 800b4bc:	0800b79b 	.word	0x0800b79b
 800b4c0:	0800b7e1 	.word	0x0800b7e1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b4c4:	2108      	movs	r1, #8
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fa50 	bl	800b96c <USBH_Get_DevDesc>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b4d0:	7bbb      	ldrb	r3, [r7, #14]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d130      	bne.n	800b538 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	7919      	ldrb	r1, [r3, #4]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b4fa:	b292      	uxth	r2, r2
 800b4fc:	9202      	str	r2, [sp, #8]
 800b4fe:	2200      	movs	r2, #0
 800b500:	9201      	str	r2, [sp, #4]
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	4603      	mov	r3, r0
 800b506:	2280      	movs	r2, #128	; 0x80
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 ff77 	bl	800c3fc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	7959      	ldrb	r1, [r3, #5]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b522:	b292      	uxth	r2, r2
 800b524:	9202      	str	r2, [sp, #8]
 800b526:	2200      	movs	r2, #0
 800b528:	9201      	str	r2, [sp, #4]
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	4603      	mov	r3, r0
 800b52e:	2200      	movs	r2, #0
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 ff63 	bl	800c3fc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b536:	e175      	b.n	800b824 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b538:	7bbb      	ldrb	r3, [r7, #14]
 800b53a:	2b03      	cmp	r3, #3
 800b53c:	f040 8172 	bne.w	800b824 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b546:	3301      	adds	r3, #1
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b556:	2b03      	cmp	r3, #3
 800b558:	d903      	bls.n	800b562 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	220d      	movs	r2, #13
 800b55e:	701a      	strb	r2, [r3, #0]
      break;
 800b560:	e160      	b.n	800b824 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	795b      	ldrb	r3, [r3, #5]
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 ff97 	bl	800c49c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	791b      	ldrb	r3, [r3, #4]
 800b572:	4619      	mov	r1, r3
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 ff91 	bl	800c49c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	701a      	strb	r2, [r3, #0]
      break;
 800b580:	e150      	b.n	800b824 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b582:	2112      	movs	r1, #18
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f9f1 	bl	800b96c <USBH_Get_DevDesc>
 800b58a:	4603      	mov	r3, r0
 800b58c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b58e:	7bbb      	ldrb	r3, [r7, #14]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d103      	bne.n	800b59c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2202      	movs	r2, #2
 800b598:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b59a:	e145      	b.n	800b828 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b59c:	7bbb      	ldrb	r3, [r7, #14]
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	f040 8142 	bne.w	800b828 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	b2da      	uxtb	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b5ba:	2b03      	cmp	r3, #3
 800b5bc:	d903      	bls.n	800b5c6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	220d      	movs	r2, #13
 800b5c2:	701a      	strb	r2, [r3, #0]
      break;
 800b5c4:	e130      	b.n	800b828 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	795b      	ldrb	r3, [r3, #5]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 ff65 	bl	800c49c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	791b      	ldrb	r3, [r3, #4]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 ff5f 	bl	800c49c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	701a      	strb	r2, [r3, #0]
      break;
 800b5ea:	e11d      	b.n	800b828 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b5ec:	2101      	movs	r1, #1
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 fa68 	bl	800bac4 <USBH_SetAddress>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b5f8:	7bbb      	ldrb	r3, [r7, #14]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d132      	bne.n	800b664 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b5fe:	2002      	movs	r0, #2
 800b600:	f001 fa42 	bl	800ca88 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2201      	movs	r2, #1
 800b608:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2203      	movs	r2, #3
 800b610:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	7919      	ldrb	r1, [r3, #4]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b626:	b292      	uxth	r2, r2
 800b628:	9202      	str	r2, [sp, #8]
 800b62a:	2200      	movs	r2, #0
 800b62c:	9201      	str	r2, [sp, #4]
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	4603      	mov	r3, r0
 800b632:	2280      	movs	r2, #128	; 0x80
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 fee1 	bl	800c3fc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	7959      	ldrb	r1, [r3, #5]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b64e:	b292      	uxth	r2, r2
 800b650:	9202      	str	r2, [sp, #8]
 800b652:	2200      	movs	r2, #0
 800b654:	9201      	str	r2, [sp, #4]
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	4603      	mov	r3, r0
 800b65a:	2200      	movs	r2, #0
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fecd 	bl	800c3fc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b662:	e0e3      	b.n	800b82c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b664:	7bbb      	ldrb	r3, [r7, #14]
 800b666:	2b03      	cmp	r3, #3
 800b668:	f040 80e0 	bne.w	800b82c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	220d      	movs	r2, #13
 800b670:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	705a      	strb	r2, [r3, #1]
      break;
 800b678:	e0d8      	b.n	800b82c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b67a:	2109      	movs	r1, #9
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f99d 	bl	800b9bc <USBH_Get_CfgDesc>
 800b682:	4603      	mov	r3, r0
 800b684:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b686:	7bbb      	ldrb	r3, [r7, #14]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d103      	bne.n	800b694 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2204      	movs	r2, #4
 800b690:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b692:	e0cd      	b.n	800b830 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b694:	7bbb      	ldrb	r3, [r7, #14]
 800b696:	2b03      	cmp	r3, #3
 800b698:	f040 80ca 	bne.w	800b830 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	b2da      	uxtb	r2, r3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b6b2:	2b03      	cmp	r3, #3
 800b6b4:	d903      	bls.n	800b6be <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	220d      	movs	r2, #13
 800b6ba:	701a      	strb	r2, [r3, #0]
      break;
 800b6bc:	e0b8      	b.n	800b830 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	795b      	ldrb	r3, [r3, #5]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 fee9 	bl	800c49c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	791b      	ldrb	r3, [r3, #4]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 fee3 	bl	800c49c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	701a      	strb	r2, [r3, #0]
      break;
 800b6e2:	e0a5      	b.n	800b830 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f965 	bl	800b9bc <USBH_Get_CfgDesc>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b6f6:	7bbb      	ldrb	r3, [r7, #14]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d103      	bne.n	800b704 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2205      	movs	r2, #5
 800b700:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b702:	e097      	b.n	800b834 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b704:	7bbb      	ldrb	r3, [r7, #14]
 800b706:	2b03      	cmp	r3, #3
 800b708:	f040 8094 	bne.w	800b834 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b712:	3301      	adds	r3, #1
 800b714:	b2da      	uxtb	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b722:	2b03      	cmp	r3, #3
 800b724:	d903      	bls.n	800b72e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	220d      	movs	r2, #13
 800b72a:	701a      	strb	r2, [r3, #0]
      break;
 800b72c:	e082      	b.n	800b834 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	795b      	ldrb	r3, [r3, #5]
 800b732:	4619      	mov	r1, r3
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 feb1 	bl	800c49c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	791b      	ldrb	r3, [r3, #4]
 800b73e:	4619      	mov	r1, r3
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 feab 	bl	800c49c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	701a      	strb	r2, [r3, #0]
      break;
 800b752:	e06f      	b.n	800b834 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d019      	beq.n	800b792 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b76a:	23ff      	movs	r3, #255	; 0xff
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 f949 	bl	800ba04 <USBH_Get_StringDesc>
 800b772:	4603      	mov	r3, r0
 800b774:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b776:	7bbb      	ldrb	r3, [r7, #14]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d103      	bne.n	800b784 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2206      	movs	r2, #6
 800b780:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b782:	e059      	b.n	800b838 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b784:	7bbb      	ldrb	r3, [r7, #14]
 800b786:	2b03      	cmp	r3, #3
 800b788:	d156      	bne.n	800b838 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2206      	movs	r2, #6
 800b78e:	705a      	strb	r2, [r3, #1]
      break;
 800b790:	e052      	b.n	800b838 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2206      	movs	r2, #6
 800b796:	705a      	strb	r2, [r3, #1]
      break;
 800b798:	e04e      	b.n	800b838 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d019      	beq.n	800b7d8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b7b0:	23ff      	movs	r3, #255	; 0xff
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f926 	bl	800ba04 <USBH_Get_StringDesc>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b7bc:	7bbb      	ldrb	r3, [r7, #14]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d103      	bne.n	800b7ca <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2207      	movs	r2, #7
 800b7c6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b7c8:	e038      	b.n	800b83c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7ca:	7bbb      	ldrb	r3, [r7, #14]
 800b7cc:	2b03      	cmp	r3, #3
 800b7ce:	d135      	bne.n	800b83c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2207      	movs	r2, #7
 800b7d4:	705a      	strb	r2, [r3, #1]
      break;
 800b7d6:	e031      	b.n	800b83c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2207      	movs	r2, #7
 800b7dc:	705a      	strb	r2, [r3, #1]
      break;
 800b7de:	e02d      	b.n	800b83c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d017      	beq.n	800b81a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b7f6:	23ff      	movs	r3, #255	; 0xff
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 f903 	bl	800ba04 <USBH_Get_StringDesc>
 800b7fe:	4603      	mov	r3, r0
 800b800:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b802:	7bbb      	ldrb	r3, [r7, #14]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d102      	bne.n	800b80e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b808:	2300      	movs	r3, #0
 800b80a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b80c:	e018      	b.n	800b840 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b80e:	7bbb      	ldrb	r3, [r7, #14]
 800b810:	2b03      	cmp	r3, #3
 800b812:	d115      	bne.n	800b840 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b814:	2300      	movs	r3, #0
 800b816:	73fb      	strb	r3, [r7, #15]
      break;
 800b818:	e012      	b.n	800b840 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b81a:	2300      	movs	r3, #0
 800b81c:	73fb      	strb	r3, [r7, #15]
      break;
 800b81e:	e00f      	b.n	800b840 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b820:	bf00      	nop
 800b822:	e00e      	b.n	800b842 <USBH_HandleEnum+0x3be>
      break;
 800b824:	bf00      	nop
 800b826:	e00c      	b.n	800b842 <USBH_HandleEnum+0x3be>
      break;
 800b828:	bf00      	nop
 800b82a:	e00a      	b.n	800b842 <USBH_HandleEnum+0x3be>
      break;
 800b82c:	bf00      	nop
 800b82e:	e008      	b.n	800b842 <USBH_HandleEnum+0x3be>
      break;
 800b830:	bf00      	nop
 800b832:	e006      	b.n	800b842 <USBH_HandleEnum+0x3be>
      break;
 800b834:	bf00      	nop
 800b836:	e004      	b.n	800b842 <USBH_HandleEnum+0x3be>
      break;
 800b838:	bf00      	nop
 800b83a:	e002      	b.n	800b842 <USBH_HandleEnum+0x3be>
      break;
 800b83c:	bf00      	nop
 800b83e:	e000      	b.n	800b842 <USBH_HandleEnum+0x3be>
      break;
 800b840:	bf00      	nop
  }
  return Status;
 800b842:	7bfb      	ldrb	r3, [r7, #15]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	683a      	ldr	r2, [r7, #0]
 800b85a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b85e:	bf00      	nop
 800b860:	370c      	adds	r7, #12
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b878:	1c5a      	adds	r2, r3, #1
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f804 	bl	800b88e <USBH_HandleSof>
}
 800b886:	bf00      	nop
 800b888:	3708      	adds	r7, #8
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b88e:	b580      	push	{r7, lr}
 800b890:	b082      	sub	sp, #8
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	2b0b      	cmp	r3, #11
 800b89e:	d10a      	bne.n	800b8b6 <USBH_HandleSof+0x28>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d005      	beq.n	800b8b6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8b0:	699b      	ldr	r3, [r3, #24]
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	4798      	blx	r3
  }
}
 800b8b6:	bf00      	nop
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b8be:	b480      	push	{r7}
 800b8c0:	b083      	sub	sp, #12
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b8ce:	bf00      	nop
}
 800b8d0:	370c      	adds	r7, #12
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr

0800b8da <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b8da:	b480      	push	{r7}
 800b8dc:	b083      	sub	sp, #12
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b8ea:	bf00      	nop
}
 800b8ec:	370c      	adds	r7, #12
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b8f6:	b480      	push	{r7}
 800b8f8:	b083      	sub	sp, #12
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 ff56 	bl	800c7f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	791b      	ldrb	r3, [r3, #4]
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fda3 	bl	800c49c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	795b      	ldrb	r3, [r3, #5]
 800b95a:	4619      	mov	r1, r3
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 fd9d 	bl	800c49c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af02      	add	r7, sp, #8
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	460b      	mov	r3, r1
 800b976:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b97e:	78fb      	ldrb	r3, [r7, #3]
 800b980:	b29b      	uxth	r3, r3
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	4613      	mov	r3, r2
 800b986:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b98a:	2100      	movs	r1, #0
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 f864 	bl	800ba5a <USBH_GetDescriptor>
 800b992:	4603      	mov	r3, r0
 800b994:	73fb      	strb	r3, [r7, #15]
 800b996:	7bfb      	ldrb	r3, [r7, #15]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d10a      	bne.n	800b9b2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b9a8:	78fa      	ldrb	r2, [r7, #3]
 800b9aa:	b292      	uxth	r2, r2
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	f000 f918 	bl	800bbe2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af02      	add	r7, sp, #8
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	331c      	adds	r3, #28
 800b9cc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b9ce:	887b      	ldrh	r3, [r7, #2]
 800b9d0:	9300      	str	r3, [sp, #0]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9d8:	2100      	movs	r1, #0
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 f83d 	bl	800ba5a <USBH_GetDescriptor>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	72fb      	strb	r3, [r7, #11]
 800b9e4:	7afb      	ldrb	r3, [r7, #11]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d107      	bne.n	800b9fa <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b9f0:	887a      	ldrh	r2, [r7, #2]
 800b9f2:	68f9      	ldr	r1, [r7, #12]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f000 f964 	bl	800bcc2 <USBH_ParseCfgDesc>
  }

  return status;
 800b9fa:	7afb      	ldrb	r3, [r7, #11]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b088      	sub	sp, #32
 800ba08:	af02      	add	r7, sp, #8
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	607a      	str	r2, [r7, #4]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	460b      	mov	r3, r1
 800ba12:	72fb      	strb	r3, [r7, #11]
 800ba14:	4613      	mov	r3, r2
 800ba16:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ba18:	7afb      	ldrb	r3, [r7, #11]
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ba20:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ba28:	893b      	ldrh	r3, [r7, #8]
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	2100      	movs	r1, #0
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f000 f812 	bl	800ba5a <USBH_GetDescriptor>
 800ba36:	4603      	mov	r3, r0
 800ba38:	75fb      	strb	r3, [r7, #23]
 800ba3a:	7dfb      	ldrb	r3, [r7, #23]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d107      	bne.n	800ba50 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ba46:	893a      	ldrh	r2, [r7, #8]
 800ba48:	6879      	ldr	r1, [r7, #4]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 fa37 	bl	800bebe <USBH_ParseStringDesc>
  }

  return status;
 800ba50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3718      	adds	r7, #24
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b084      	sub	sp, #16
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	60f8      	str	r0, [r7, #12]
 800ba62:	607b      	str	r3, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	72fb      	strb	r3, [r7, #11]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	789b      	ldrb	r3, [r3, #2]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d11c      	bne.n	800baae <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ba74:	7afb      	ldrb	r3, [r7, #11]
 800ba76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba7a:	b2da      	uxtb	r2, r3
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2206      	movs	r2, #6
 800ba84:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	893a      	ldrh	r2, [r7, #8]
 800ba8a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ba8c:	893b      	ldrh	r3, [r7, #8]
 800ba8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ba92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba96:	d104      	bne.n	800baa2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f240 4209 	movw	r2, #1033	; 0x409
 800ba9e:	829a      	strh	r2, [r3, #20]
 800baa0:	e002      	b.n	800baa8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2200      	movs	r2, #0
 800baa6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	8b3a      	ldrh	r2, [r7, #24]
 800baac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800baae:	8b3b      	ldrh	r3, [r7, #24]
 800bab0:	461a      	mov	r2, r3
 800bab2:	6879      	ldr	r1, [r7, #4]
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f000 fa50 	bl	800bf5a <USBH_CtlReq>
 800baba:	4603      	mov	r3, r0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	460b      	mov	r3, r1
 800bace:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	789b      	ldrb	r3, [r3, #2]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d10f      	bne.n	800baf8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2205      	movs	r2, #5
 800bae2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bae4:	78fb      	ldrb	r3, [r7, #3]
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800baf8:	2200      	movs	r2, #0
 800bafa:	2100      	movs	r1, #0
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 fa2c 	bl	800bf5a <USBH_CtlReq>
 800bb02:	4603      	mov	r3, r0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	460b      	mov	r3, r1
 800bb16:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	789b      	ldrb	r3, [r3, #2]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d10e      	bne.n	800bb3e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2209      	movs	r2, #9
 800bb2a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	887a      	ldrh	r2, [r7, #2]
 800bb30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bb3e:	2200      	movs	r2, #0
 800bb40:	2100      	movs	r1, #0
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fa09 	bl	800bf5a <USBH_CtlReq>
 800bb48:	4603      	mov	r3, r0
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3708      	adds	r7, #8
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	789b      	ldrb	r3, [r3, #2]
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d10f      	bne.n	800bb86 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2203      	movs	r2, #3
 800bb70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bb72:	78fb      	ldrb	r3, [r7, #3]
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bb86:	2200      	movs	r2, #0
 800bb88:	2100      	movs	r1, #0
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f9e5 	bl	800bf5a <USBH_CtlReq>
 800bb90:	4603      	mov	r3, r0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b082      	sub	sp, #8
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	460b      	mov	r3, r1
 800bba4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	789b      	ldrb	r3, [r3, #2]
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d10f      	bne.n	800bbce <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2202      	movs	r2, #2
 800bbb2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bbc0:	78fb      	ldrb	r3, [r7, #3]
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800bbce:	2200      	movs	r2, #0
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 f9c1 	bl	800bf5a <USBH_CtlReq>
 800bbd8:	4603      	mov	r3, r0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b085      	sub	sp, #20
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	60f8      	str	r0, [r7, #12]
 800bbea:	60b9      	str	r1, [r7, #8]
 800bbec:	4613      	mov	r3, r2
 800bbee:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	781a      	ldrb	r2, [r3, #0]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	785a      	ldrb	r2, [r3, #1]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	3302      	adds	r3, #2
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	3303      	adds	r3, #3
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	021b      	lsls	r3, r3, #8
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	4313      	orrs	r3, r2
 800bc16:	b29a      	uxth	r2, r3
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	791a      	ldrb	r2, [r3, #4]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	795a      	ldrb	r2, [r3, #5]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	799a      	ldrb	r2, [r3, #6]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	79da      	ldrb	r2, [r3, #7]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800bc3c:	88fb      	ldrh	r3, [r7, #6]
 800bc3e:	2b08      	cmp	r3, #8
 800bc40:	d939      	bls.n	800bcb6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	3308      	adds	r3, #8
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	3309      	adds	r3, #9
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	021b      	lsls	r3, r3, #8
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	4313      	orrs	r3, r2
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	330a      	adds	r3, #10
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	330b      	adds	r3, #11
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	021b      	lsls	r3, r3, #8
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	4313      	orrs	r3, r2
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	330c      	adds	r3, #12
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	330d      	adds	r3, #13
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	021b      	lsls	r3, r3, #8
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	b29a      	uxth	r2, r3
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	7b9a      	ldrb	r2, [r3, #14]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	7bda      	ldrb	r2, [r3, #15]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	7c1a      	ldrb	r2, [r3, #16]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	7c5a      	ldrb	r2, [r3, #17]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	745a      	strb	r2, [r3, #17]
  }
}
 800bcb6:	bf00      	nop
 800bcb8:	3714      	adds	r7, #20
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr

0800bcc2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800bcc2:	b580      	push	{r7, lr}
 800bcc4:	b08a      	sub	sp, #40	; 0x28
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	60f8      	str	r0, [r7, #12]
 800bcca:	60b9      	str	r1, [r7, #8]
 800bccc:	4613      	mov	r3, r2
 800bcce:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	781a      	ldrb	r2, [r3, #0]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	785a      	ldrb	r2, [r3, #1]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	3302      	adds	r3, #2
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	3303      	adds	r3, #3
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	021b      	lsls	r3, r3, #8
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	791a      	ldrb	r2, [r3, #4]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	795a      	ldrb	r2, [r3, #5]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	799a      	ldrb	r2, [r3, #6]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	79da      	ldrb	r2, [r3, #7]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	7a1a      	ldrb	r2, [r3, #8]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bd38:	88fb      	ldrh	r3, [r7, #6]
 800bd3a:	2b09      	cmp	r3, #9
 800bd3c:	d95f      	bls.n	800bdfe <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800bd3e:	2309      	movs	r3, #9
 800bd40:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bd46:	e051      	b.n	800bdec <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bd48:	f107 0316 	add.w	r3, r7, #22
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd50:	f000 f8e8 	bl	800bf24 <USBH_GetNextDesc>
 800bd54:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800bd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd58:	785b      	ldrb	r3, [r3, #1]
 800bd5a:	2b04      	cmp	r3, #4
 800bd5c:	d146      	bne.n	800bdec <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800bd5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd62:	221a      	movs	r2, #26
 800bd64:	fb02 f303 	mul.w	r3, r2, r3
 800bd68:	3308      	adds	r3, #8
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	3302      	adds	r3, #2
 800bd70:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bd72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd74:	69f8      	ldr	r0, [r7, #28]
 800bd76:	f000 f846 	bl	800be06 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800bd80:	2300      	movs	r3, #0
 800bd82:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bd84:	e022      	b.n	800bdcc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bd86:	f107 0316 	add.w	r3, r7, #22
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd8e:	f000 f8c9 	bl	800bf24 <USBH_GetNextDesc>
 800bd92:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800bd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd96:	785b      	ldrb	r3, [r3, #1]
 800bd98:	2b05      	cmp	r3, #5
 800bd9a:	d117      	bne.n	800bdcc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bd9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bda0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bda4:	3201      	adds	r2, #1
 800bda6:	00d2      	lsls	r2, r2, #3
 800bda8:	211a      	movs	r1, #26
 800bdaa:	fb01 f303 	mul.w	r3, r1, r3
 800bdae:	4413      	add	r3, r2
 800bdb0:	3308      	adds	r3, #8
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	3304      	adds	r3, #4
 800bdb8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800bdba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdbc:	69b8      	ldr	r0, [r7, #24]
 800bdbe:	f000 f851 	bl	800be64 <USBH_ParseEPDesc>
            ep_ix++;
 800bdc2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	791b      	ldrb	r3, [r3, #4]
 800bdd0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d204      	bcs.n	800bde2 <USBH_ParseCfgDesc+0x120>
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	885a      	ldrh	r2, [r3, #2]
 800bddc:	8afb      	ldrh	r3, [r7, #22]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d8d1      	bhi.n	800bd86 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800bde2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bde6:	3301      	adds	r3, #1
 800bde8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bdec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d804      	bhi.n	800bdfe <USBH_ParseCfgDesc+0x13c>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	885a      	ldrh	r2, [r3, #2]
 800bdf8:	8afb      	ldrh	r3, [r7, #22]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d8a4      	bhi.n	800bd48 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800bdfe:	bf00      	nop
 800be00:	3728      	adds	r7, #40	; 0x28
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800be06:	b480      	push	{r7}
 800be08:	b083      	sub	sp, #12
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
 800be0e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	781a      	ldrb	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	785a      	ldrb	r2, [r3, #1]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	789a      	ldrb	r2, [r3, #2]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	78da      	ldrb	r2, [r3, #3]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	791a      	ldrb	r2, [r3, #4]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	795a      	ldrb	r2, [r3, #5]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	799a      	ldrb	r2, [r3, #6]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	79da      	ldrb	r2, [r3, #7]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	7a1a      	ldrb	r2, [r3, #8]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	721a      	strb	r2, [r3, #8]
}
 800be58:	bf00      	nop
 800be5a:	370c      	adds	r7, #12
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	781a      	ldrb	r2, [r3, #0]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	785a      	ldrb	r2, [r3, #1]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	789a      	ldrb	r2, [r3, #2]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	78da      	ldrb	r2, [r3, #3]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	3304      	adds	r3, #4
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	b29a      	uxth	r2, r3
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	3305      	adds	r3, #5
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	021b      	lsls	r3, r3, #8
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	4313      	orrs	r3, r2
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	799a      	ldrb	r2, [r3, #6]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	719a      	strb	r2, [r3, #6]
}
 800beb2:	bf00      	nop
 800beb4:	370c      	adds	r7, #12
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bebe:	b480      	push	{r7}
 800bec0:	b087      	sub	sp, #28
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	60f8      	str	r0, [r7, #12]
 800bec6:	60b9      	str	r1, [r7, #8]
 800bec8:	4613      	mov	r3, r2
 800beca:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	3301      	adds	r3, #1
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	2b03      	cmp	r3, #3
 800bed4:	d120      	bne.n	800bf18 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	1e9a      	subs	r2, r3, #2
 800bedc:	88fb      	ldrh	r3, [r7, #6]
 800bede:	4293      	cmp	r3, r2
 800bee0:	bf28      	it	cs
 800bee2:	4613      	movcs	r3, r2
 800bee4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	3302      	adds	r3, #2
 800beea:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800beec:	2300      	movs	r3, #0
 800beee:	82fb      	strh	r3, [r7, #22]
 800bef0:	e00b      	b.n	800bf0a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bef2:	8afb      	ldrh	r3, [r7, #22]
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	4413      	add	r3, r2
 800bef8:	781a      	ldrb	r2, [r3, #0]
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	3301      	adds	r3, #1
 800bf02:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bf04:	8afb      	ldrh	r3, [r7, #22]
 800bf06:	3302      	adds	r3, #2
 800bf08:	82fb      	strh	r3, [r7, #22]
 800bf0a:	8afa      	ldrh	r2, [r7, #22]
 800bf0c:	8abb      	ldrh	r3, [r7, #20]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d3ef      	bcc.n	800bef2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	2200      	movs	r2, #0
 800bf16:	701a      	strb	r2, [r3, #0]
  }
}
 800bf18:	bf00      	nop
 800bf1a:	371c      	adds	r7, #28
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr

0800bf24 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b085      	sub	sp, #20
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	881a      	ldrh	r2, [r3, #0]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	4413      	add	r3, r2
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4413      	add	r3, r2
 800bf4a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3714      	adds	r7, #20
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr

0800bf5a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b086      	sub	sp, #24
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	60f8      	str	r0, [r7, #12]
 800bf62:	60b9      	str	r1, [r7, #8]
 800bf64:	4613      	mov	r3, r2
 800bf66:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	789b      	ldrb	r3, [r3, #2]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d002      	beq.n	800bf7a <USBH_CtlReq+0x20>
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d00f      	beq.n	800bf98 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bf78:	e027      	b.n	800bfca <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	88fa      	ldrh	r2, [r7, #6]
 800bf84:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2202      	movs	r2, #2
 800bf90:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bf92:	2301      	movs	r3, #1
 800bf94:	75fb      	strb	r3, [r7, #23]
      break;
 800bf96:	e018      	b.n	800bfca <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f000 f81b 	bl	800bfd4 <USBH_HandleControl>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bfa2:	7dfb      	ldrb	r3, [r7, #23]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d002      	beq.n	800bfae <USBH_CtlReq+0x54>
 800bfa8:	7dfb      	ldrb	r3, [r7, #23]
 800bfaa:	2b03      	cmp	r3, #3
 800bfac:	d106      	bne.n	800bfbc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	761a      	strb	r2, [r3, #24]
      break;
 800bfba:	e005      	b.n	800bfc8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bfbc:	7dfb      	ldrb	r3, [r7, #23]
 800bfbe:	2b02      	cmp	r3, #2
 800bfc0:	d102      	bne.n	800bfc8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	709a      	strb	r2, [r3, #2]
      break;
 800bfc8:	bf00      	nop
  }
  return status;
 800bfca:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3718      	adds	r7, #24
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b086      	sub	sp, #24
 800bfd8:	af02      	add	r7, sp, #8
 800bfda:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	7e1b      	ldrb	r3, [r3, #24]
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	2b0a      	cmp	r3, #10
 800bfec:	f200 8156 	bhi.w	800c29c <USBH_HandleControl+0x2c8>
 800bff0:	a201      	add	r2, pc, #4	; (adr r2, 800bff8 <USBH_HandleControl+0x24>)
 800bff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff6:	bf00      	nop
 800bff8:	0800c025 	.word	0x0800c025
 800bffc:	0800c03f 	.word	0x0800c03f
 800c000:	0800c0a9 	.word	0x0800c0a9
 800c004:	0800c0cf 	.word	0x0800c0cf
 800c008:	0800c107 	.word	0x0800c107
 800c00c:	0800c131 	.word	0x0800c131
 800c010:	0800c183 	.word	0x0800c183
 800c014:	0800c1a5 	.word	0x0800c1a5
 800c018:	0800c1e1 	.word	0x0800c1e1
 800c01c:	0800c207 	.word	0x0800c207
 800c020:	0800c245 	.word	0x0800c245
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f103 0110 	add.w	r1, r3, #16
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	795b      	ldrb	r3, [r3, #5]
 800c02e:	461a      	mov	r2, r3
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 f943 	bl	800c2bc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2202      	movs	r2, #2
 800c03a:	761a      	strb	r2, [r3, #24]
      break;
 800c03c:	e139      	b.n	800c2b2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	795b      	ldrb	r3, [r3, #5]
 800c042:	4619      	mov	r1, r3
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 fcc5 	bl	800c9d4 <USBH_LL_GetURBState>
 800c04a:	4603      	mov	r3, r0
 800c04c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c04e:	7bbb      	ldrb	r3, [r7, #14]
 800c050:	2b01      	cmp	r3, #1
 800c052:	d11e      	bne.n	800c092 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	7c1b      	ldrb	r3, [r3, #16]
 800c058:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c05c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	8adb      	ldrh	r3, [r3, #22]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00a      	beq.n	800c07c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c066:	7b7b      	ldrb	r3, [r7, #13]
 800c068:	2b80      	cmp	r3, #128	; 0x80
 800c06a:	d103      	bne.n	800c074 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2203      	movs	r2, #3
 800c070:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c072:	e115      	b.n	800c2a0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2205      	movs	r2, #5
 800c078:	761a      	strb	r2, [r3, #24]
      break;
 800c07a:	e111      	b.n	800c2a0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c07c:	7b7b      	ldrb	r3, [r7, #13]
 800c07e:	2b80      	cmp	r3, #128	; 0x80
 800c080:	d103      	bne.n	800c08a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2209      	movs	r2, #9
 800c086:	761a      	strb	r2, [r3, #24]
      break;
 800c088:	e10a      	b.n	800c2a0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2207      	movs	r2, #7
 800c08e:	761a      	strb	r2, [r3, #24]
      break;
 800c090:	e106      	b.n	800c2a0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c092:	7bbb      	ldrb	r3, [r7, #14]
 800c094:	2b04      	cmp	r3, #4
 800c096:	d003      	beq.n	800c0a0 <USBH_HandleControl+0xcc>
 800c098:	7bbb      	ldrb	r3, [r7, #14]
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	f040 8100 	bne.w	800c2a0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	220b      	movs	r2, #11
 800c0a4:	761a      	strb	r2, [r3, #24]
      break;
 800c0a6:	e0fb      	b.n	800c2a0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6899      	ldr	r1, [r3, #8]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	899a      	ldrh	r2, [r3, #12]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	791b      	ldrb	r3, [r3, #4]
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 f93a 	bl	800c33a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2204      	movs	r2, #4
 800c0ca:	761a      	strb	r2, [r3, #24]
      break;
 800c0cc:	e0f1      	b.n	800c2b2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	791b      	ldrb	r3, [r3, #4]
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 fc7d 	bl	800c9d4 <USBH_LL_GetURBState>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c0de:	7bbb      	ldrb	r3, [r7, #14]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d102      	bne.n	800c0ea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2209      	movs	r2, #9
 800c0e8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c0ea:	7bbb      	ldrb	r3, [r7, #14]
 800c0ec:	2b05      	cmp	r3, #5
 800c0ee:	d102      	bne.n	800c0f6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c0f0:	2303      	movs	r3, #3
 800c0f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c0f4:	e0d6      	b.n	800c2a4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c0f6:	7bbb      	ldrb	r3, [r7, #14]
 800c0f8:	2b04      	cmp	r3, #4
 800c0fa:	f040 80d3 	bne.w	800c2a4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	220b      	movs	r2, #11
 800c102:	761a      	strb	r2, [r3, #24]
      break;
 800c104:	e0ce      	b.n	800c2a4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6899      	ldr	r1, [r3, #8]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	899a      	ldrh	r2, [r3, #12]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	795b      	ldrb	r3, [r3, #5]
 800c112:	2001      	movs	r0, #1
 800c114:	9000      	str	r0, [sp, #0]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 f8ea 	bl	800c2f0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c122:	b29a      	uxth	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2206      	movs	r2, #6
 800c12c:	761a      	strb	r2, [r3, #24]
      break;
 800c12e:	e0c0      	b.n	800c2b2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	795b      	ldrb	r3, [r3, #5]
 800c134:	4619      	mov	r1, r3
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 fc4c 	bl	800c9d4 <USBH_LL_GetURBState>
 800c13c:	4603      	mov	r3, r0
 800c13e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c140:	7bbb      	ldrb	r3, [r7, #14]
 800c142:	2b01      	cmp	r3, #1
 800c144:	d103      	bne.n	800c14e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2207      	movs	r2, #7
 800c14a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c14c:	e0ac      	b.n	800c2a8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c14e:	7bbb      	ldrb	r3, [r7, #14]
 800c150:	2b05      	cmp	r3, #5
 800c152:	d105      	bne.n	800c160 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	220c      	movs	r2, #12
 800c158:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c15a:	2303      	movs	r3, #3
 800c15c:	73fb      	strb	r3, [r7, #15]
      break;
 800c15e:	e0a3      	b.n	800c2a8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c160:	7bbb      	ldrb	r3, [r7, #14]
 800c162:	2b02      	cmp	r3, #2
 800c164:	d103      	bne.n	800c16e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2205      	movs	r2, #5
 800c16a:	761a      	strb	r2, [r3, #24]
      break;
 800c16c:	e09c      	b.n	800c2a8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c16e:	7bbb      	ldrb	r3, [r7, #14]
 800c170:	2b04      	cmp	r3, #4
 800c172:	f040 8099 	bne.w	800c2a8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	220b      	movs	r2, #11
 800c17a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c17c:	2302      	movs	r3, #2
 800c17e:	73fb      	strb	r3, [r7, #15]
      break;
 800c180:	e092      	b.n	800c2a8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	791b      	ldrb	r3, [r3, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	2100      	movs	r1, #0
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f8d5 	bl	800c33a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c196:	b29a      	uxth	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2208      	movs	r2, #8
 800c1a0:	761a      	strb	r2, [r3, #24]

      break;
 800c1a2:	e086      	b.n	800c2b2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	791b      	ldrb	r3, [r3, #4]
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 fc12 	bl	800c9d4 <USBH_LL_GetURBState>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c1b4:	7bbb      	ldrb	r3, [r7, #14]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d105      	bne.n	800c1c6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	220d      	movs	r2, #13
 800c1be:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c1c4:	e072      	b.n	800c2ac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c1c6:	7bbb      	ldrb	r3, [r7, #14]
 800c1c8:	2b04      	cmp	r3, #4
 800c1ca:	d103      	bne.n	800c1d4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	220b      	movs	r2, #11
 800c1d0:	761a      	strb	r2, [r3, #24]
      break;
 800c1d2:	e06b      	b.n	800c2ac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c1d4:	7bbb      	ldrb	r3, [r7, #14]
 800c1d6:	2b05      	cmp	r3, #5
 800c1d8:	d168      	bne.n	800c2ac <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c1da:	2303      	movs	r3, #3
 800c1dc:	73fb      	strb	r3, [r7, #15]
      break;
 800c1de:	e065      	b.n	800c2ac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	795b      	ldrb	r3, [r3, #5]
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	9200      	str	r2, [sp, #0]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 f87f 	bl	800c2f0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	220a      	movs	r2, #10
 800c202:	761a      	strb	r2, [r3, #24]
      break;
 800c204:	e055      	b.n	800c2b2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	795b      	ldrb	r3, [r3, #5]
 800c20a:	4619      	mov	r1, r3
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 fbe1 	bl	800c9d4 <USBH_LL_GetURBState>
 800c212:	4603      	mov	r3, r0
 800c214:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c216:	7bbb      	ldrb	r3, [r7, #14]
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d105      	bne.n	800c228 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c21c:	2300      	movs	r3, #0
 800c21e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	220d      	movs	r2, #13
 800c224:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c226:	e043      	b.n	800c2b0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c228:	7bbb      	ldrb	r3, [r7, #14]
 800c22a:	2b02      	cmp	r3, #2
 800c22c:	d103      	bne.n	800c236 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2209      	movs	r2, #9
 800c232:	761a      	strb	r2, [r3, #24]
      break;
 800c234:	e03c      	b.n	800c2b0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c236:	7bbb      	ldrb	r3, [r7, #14]
 800c238:	2b04      	cmp	r3, #4
 800c23a:	d139      	bne.n	800c2b0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	220b      	movs	r2, #11
 800c240:	761a      	strb	r2, [r3, #24]
      break;
 800c242:	e035      	b.n	800c2b0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	7e5b      	ldrb	r3, [r3, #25]
 800c248:	3301      	adds	r3, #1
 800c24a:	b2da      	uxtb	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	765a      	strb	r2, [r3, #25]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	7e5b      	ldrb	r3, [r3, #25]
 800c254:	2b02      	cmp	r3, #2
 800c256:	d806      	bhi.n	800c266 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2201      	movs	r2, #1
 800c262:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c264:	e025      	b.n	800c2b2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c26c:	2106      	movs	r1, #6
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	795b      	ldrb	r3, [r3, #5]
 800c27c:	4619      	mov	r1, r3
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f90c 	bl	800c49c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	791b      	ldrb	r3, [r3, #4]
 800c288:	4619      	mov	r1, r3
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f906 	bl	800c49c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c296:	2302      	movs	r3, #2
 800c298:	73fb      	strb	r3, [r7, #15]
      break;
 800c29a:	e00a      	b.n	800c2b2 <USBH_HandleControl+0x2de>

    default:
      break;
 800c29c:	bf00      	nop
 800c29e:	e008      	b.n	800c2b2 <USBH_HandleControl+0x2de>
      break;
 800c2a0:	bf00      	nop
 800c2a2:	e006      	b.n	800c2b2 <USBH_HandleControl+0x2de>
      break;
 800c2a4:	bf00      	nop
 800c2a6:	e004      	b.n	800c2b2 <USBH_HandleControl+0x2de>
      break;
 800c2a8:	bf00      	nop
 800c2aa:	e002      	b.n	800c2b2 <USBH_HandleControl+0x2de>
      break;
 800c2ac:	bf00      	nop
 800c2ae:	e000      	b.n	800c2b2 <USBH_HandleControl+0x2de>
      break;
 800c2b0:	bf00      	nop
  }

  return status;
 800c2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3710      	adds	r7, #16
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b088      	sub	sp, #32
 800c2c0:	af04      	add	r7, sp, #16
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c2ca:	79f9      	ldrb	r1, [r7, #7]
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	9303      	str	r3, [sp, #12]
 800c2d0:	2308      	movs	r3, #8
 800c2d2:	9302      	str	r3, [sp, #8]
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	9301      	str	r3, [sp, #4]
 800c2d8:	2300      	movs	r3, #0
 800c2da:	9300      	str	r3, [sp, #0]
 800c2dc:	2300      	movs	r3, #0
 800c2de:	2200      	movs	r2, #0
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f000 fb46 	bl	800c972 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c2e6:	2300      	movs	r3, #0
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b088      	sub	sp, #32
 800c2f4:	af04      	add	r7, sp, #16
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	4611      	mov	r1, r2
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	460b      	mov	r3, r1
 800c300:	80fb      	strh	r3, [r7, #6]
 800c302:	4613      	mov	r3, r2
 800c304:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d001      	beq.n	800c314 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c310:	2300      	movs	r3, #0
 800c312:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c314:	7979      	ldrb	r1, [r7, #5]
 800c316:	7e3b      	ldrb	r3, [r7, #24]
 800c318:	9303      	str	r3, [sp, #12]
 800c31a:	88fb      	ldrh	r3, [r7, #6]
 800c31c:	9302      	str	r3, [sp, #8]
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	9301      	str	r3, [sp, #4]
 800c322:	2301      	movs	r3, #1
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	2300      	movs	r3, #0
 800c328:	2200      	movs	r2, #0
 800c32a:	68f8      	ldr	r0, [r7, #12]
 800c32c:	f000 fb21 	bl	800c972 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c330:	2300      	movs	r3, #0
}
 800c332:	4618      	mov	r0, r3
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b088      	sub	sp, #32
 800c33e:	af04      	add	r7, sp, #16
 800c340:	60f8      	str	r0, [r7, #12]
 800c342:	60b9      	str	r1, [r7, #8]
 800c344:	4611      	mov	r1, r2
 800c346:	461a      	mov	r2, r3
 800c348:	460b      	mov	r3, r1
 800c34a:	80fb      	strh	r3, [r7, #6]
 800c34c:	4613      	mov	r3, r2
 800c34e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c350:	7979      	ldrb	r1, [r7, #5]
 800c352:	2300      	movs	r3, #0
 800c354:	9303      	str	r3, [sp, #12]
 800c356:	88fb      	ldrh	r3, [r7, #6]
 800c358:	9302      	str	r3, [sp, #8]
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	9301      	str	r3, [sp, #4]
 800c35e:	2301      	movs	r3, #1
 800c360:	9300      	str	r3, [sp, #0]
 800c362:	2300      	movs	r3, #0
 800c364:	2201      	movs	r2, #1
 800c366:	68f8      	ldr	r0, [r7, #12]
 800c368:	f000 fb03 	bl	800c972 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c36c:	2300      	movs	r3, #0

}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b088      	sub	sp, #32
 800c37a:	af04      	add	r7, sp, #16
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	60b9      	str	r1, [r7, #8]
 800c380:	4611      	mov	r1, r2
 800c382:	461a      	mov	r2, r3
 800c384:	460b      	mov	r3, r1
 800c386:	80fb      	strh	r3, [r7, #6]
 800c388:	4613      	mov	r3, r2
 800c38a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c392:	2b00      	cmp	r3, #0
 800c394:	d001      	beq.n	800c39a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c396:	2300      	movs	r3, #0
 800c398:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c39a:	7979      	ldrb	r1, [r7, #5]
 800c39c:	7e3b      	ldrb	r3, [r7, #24]
 800c39e:	9303      	str	r3, [sp, #12]
 800c3a0:	88fb      	ldrh	r3, [r7, #6]
 800c3a2:	9302      	str	r3, [sp, #8]
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	2302      	movs	r3, #2
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	f000 fade 	bl	800c972 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3710      	adds	r7, #16
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b088      	sub	sp, #32
 800c3c4:	af04      	add	r7, sp, #16
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	80fb      	strh	r3, [r7, #6]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c3d6:	7979      	ldrb	r1, [r7, #5]
 800c3d8:	2300      	movs	r3, #0
 800c3da:	9303      	str	r3, [sp, #12]
 800c3dc:	88fb      	ldrh	r3, [r7, #6]
 800c3de:	9302      	str	r3, [sp, #8]
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	9301      	str	r3, [sp, #4]
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	9300      	str	r3, [sp, #0]
 800c3e8:	2302      	movs	r3, #2
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	68f8      	ldr	r0, [r7, #12]
 800c3ee:	f000 fac0 	bl	800c972 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b086      	sub	sp, #24
 800c400:	af04      	add	r7, sp, #16
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	4608      	mov	r0, r1
 800c406:	4611      	mov	r1, r2
 800c408:	461a      	mov	r2, r3
 800c40a:	4603      	mov	r3, r0
 800c40c:	70fb      	strb	r3, [r7, #3]
 800c40e:	460b      	mov	r3, r1
 800c410:	70bb      	strb	r3, [r7, #2]
 800c412:	4613      	mov	r3, r2
 800c414:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c416:	7878      	ldrb	r0, [r7, #1]
 800c418:	78ba      	ldrb	r2, [r7, #2]
 800c41a:	78f9      	ldrb	r1, [r7, #3]
 800c41c:	8b3b      	ldrh	r3, [r7, #24]
 800c41e:	9302      	str	r3, [sp, #8]
 800c420:	7d3b      	ldrb	r3, [r7, #20]
 800c422:	9301      	str	r3, [sp, #4]
 800c424:	7c3b      	ldrb	r3, [r7, #16]
 800c426:	9300      	str	r3, [sp, #0]
 800c428:	4603      	mov	r3, r0
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 fa53 	bl	800c8d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b082      	sub	sp, #8
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	460b      	mov	r3, r1
 800c444:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c446:	78fb      	ldrb	r3, [r7, #3]
 800c448:	4619      	mov	r1, r3
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 fa72 	bl	800c934 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3708      	adds	r7, #8
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b084      	sub	sp, #16
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
 800c462:	460b      	mov	r3, r1
 800c464:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 f836 	bl	800c4d8 <USBH_GetFreePipe>
 800c46c:	4603      	mov	r3, r0
 800c46e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c470:	89fb      	ldrh	r3, [r7, #14]
 800c472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c476:	4293      	cmp	r3, r2
 800c478:	d00a      	beq.n	800c490 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c47a:	78fa      	ldrb	r2, [r7, #3]
 800c47c:	89fb      	ldrh	r3, [r7, #14]
 800c47e:	f003 030f 	and.w	r3, r3, #15
 800c482:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c486:	6879      	ldr	r1, [r7, #4]
 800c488:	33e0      	adds	r3, #224	; 0xe0
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	440b      	add	r3, r1
 800c48e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c490:	89fb      	ldrh	r3, [r7, #14]
 800c492:	b2db      	uxtb	r3, r3
}
 800c494:	4618      	mov	r0, r3
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c4a8:	78fb      	ldrb	r3, [r7, #3]
 800c4aa:	2b0a      	cmp	r3, #10
 800c4ac:	d80d      	bhi.n	800c4ca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c4ae:	78fb      	ldrb	r3, [r7, #3]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	33e0      	adds	r3, #224	; 0xe0
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	4413      	add	r3, r2
 800c4b8:	685a      	ldr	r2, [r3, #4]
 800c4ba:	78fb      	ldrb	r3, [r7, #3]
 800c4bc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c4c0:	6879      	ldr	r1, [r7, #4]
 800c4c2:	33e0      	adds	r3, #224	; 0xe0
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	440b      	add	r3, r1
 800c4c8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c4ca:	2300      	movs	r3, #0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	73fb      	strb	r3, [r7, #15]
 800c4e8:	e00f      	b.n	800c50a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c4ea:	7bfb      	ldrb	r3, [r7, #15]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	33e0      	adds	r3, #224	; 0xe0
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	4413      	add	r3, r2
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d102      	bne.n	800c504 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c4fe:	7bfb      	ldrb	r3, [r7, #15]
 800c500:	b29b      	uxth	r3, r3
 800c502:	e007      	b.n	800c514 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c504:	7bfb      	ldrb	r3, [r7, #15]
 800c506:	3301      	adds	r3, #1
 800c508:	73fb      	strb	r3, [r7, #15]
 800c50a:	7bfb      	ldrb	r3, [r7, #15]
 800c50c:	2b0a      	cmp	r3, #10
 800c50e:	d9ec      	bls.n	800c4ea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c510:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c514:	4618      	mov	r0, r3
 800c516:	3714      	adds	r7, #20
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c524:	2201      	movs	r2, #1
 800c526:	490e      	ldr	r1, [pc, #56]	; (800c560 <MX_USB_HOST_Init+0x40>)
 800c528:	480e      	ldr	r0, [pc, #56]	; (800c564 <MX_USB_HOST_Init+0x44>)
 800c52a:	f7fe fca1 	bl	800ae70 <USBH_Init>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d001      	beq.n	800c538 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c534:	f7f5 faf8 	bl	8001b28 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c538:	490b      	ldr	r1, [pc, #44]	; (800c568 <MX_USB_HOST_Init+0x48>)
 800c53a:	480a      	ldr	r0, [pc, #40]	; (800c564 <MX_USB_HOST_Init+0x44>)
 800c53c:	f7fe fd26 	bl	800af8c <USBH_RegisterClass>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d001      	beq.n	800c54a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c546:	f7f5 faef 	bl	8001b28 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c54a:	4806      	ldr	r0, [pc, #24]	; (800c564 <MX_USB_HOST_Init+0x44>)
 800c54c:	f7fe fdaa 	bl	800b0a4 <USBH_Start>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d001      	beq.n	800c55a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c556:	f7f5 fae7 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c55a:	bf00      	nop
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	0800c581 	.word	0x0800c581
 800c564:	20000670 	.word	0x20000670
 800c568:	200000a8 	.word	0x200000a8

0800c56c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c570:	4802      	ldr	r0, [pc, #8]	; (800c57c <MX_USB_HOST_Process+0x10>)
 800c572:	f7fe fda7 	bl	800b0c4 <USBH_Process>
}
 800c576:	bf00      	nop
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	20000670 	.word	0x20000670

0800c580 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	460b      	mov	r3, r1
 800c58a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c58c:	78fb      	ldrb	r3, [r7, #3]
 800c58e:	3b01      	subs	r3, #1
 800c590:	2b04      	cmp	r3, #4
 800c592:	d819      	bhi.n	800c5c8 <USBH_UserProcess+0x48>
 800c594:	a201      	add	r2, pc, #4	; (adr r2, 800c59c <USBH_UserProcess+0x1c>)
 800c596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c59a:	bf00      	nop
 800c59c:	0800c5c9 	.word	0x0800c5c9
 800c5a0:	0800c5b9 	.word	0x0800c5b9
 800c5a4:	0800c5c9 	.word	0x0800c5c9
 800c5a8:	0800c5c1 	.word	0x0800c5c1
 800c5ac:	0800c5b1 	.word	0x0800c5b1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c5b0:	4b09      	ldr	r3, [pc, #36]	; (800c5d8 <USBH_UserProcess+0x58>)
 800c5b2:	2203      	movs	r2, #3
 800c5b4:	701a      	strb	r2, [r3, #0]
  break;
 800c5b6:	e008      	b.n	800c5ca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c5b8:	4b07      	ldr	r3, [pc, #28]	; (800c5d8 <USBH_UserProcess+0x58>)
 800c5ba:	2202      	movs	r2, #2
 800c5bc:	701a      	strb	r2, [r3, #0]
  break;
 800c5be:	e004      	b.n	800c5ca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c5c0:	4b05      	ldr	r3, [pc, #20]	; (800c5d8 <USBH_UserProcess+0x58>)
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	701a      	strb	r2, [r3, #0]
  break;
 800c5c6:	e000      	b.n	800c5ca <USBH_UserProcess+0x4a>

  default:
  break;
 800c5c8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c5ca:	bf00      	nop
 800c5cc:	370c      	adds	r7, #12
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	20000154 	.word	0x20000154

0800c5dc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b08a      	sub	sp, #40	; 0x28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5e4:	f107 0314 	add.w	r3, r7, #20
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	601a      	str	r2, [r3, #0]
 800c5ec:	605a      	str	r2, [r3, #4]
 800c5ee:	609a      	str	r2, [r3, #8]
 800c5f0:	60da      	str	r2, [r3, #12]
 800c5f2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c5fc:	d147      	bne.n	800c68e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5fe:	2300      	movs	r3, #0
 800c600:	613b      	str	r3, [r7, #16]
 800c602:	4b25      	ldr	r3, [pc, #148]	; (800c698 <HAL_HCD_MspInit+0xbc>)
 800c604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c606:	4a24      	ldr	r2, [pc, #144]	; (800c698 <HAL_HCD_MspInit+0xbc>)
 800c608:	f043 0301 	orr.w	r3, r3, #1
 800c60c:	6313      	str	r3, [r2, #48]	; 0x30
 800c60e:	4b22      	ldr	r3, [pc, #136]	; (800c698 <HAL_HCD_MspInit+0xbc>)
 800c610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c612:	f003 0301 	and.w	r3, r3, #1
 800c616:	613b      	str	r3, [r7, #16]
 800c618:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c61a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c61e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c620:	2300      	movs	r3, #0
 800c622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c624:	2300      	movs	r3, #0
 800c626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c628:	f107 0314 	add.w	r3, r7, #20
 800c62c:	4619      	mov	r1, r3
 800c62e:	481b      	ldr	r0, [pc, #108]	; (800c69c <HAL_HCD_MspInit+0xc0>)
 800c630:	f7f7 fa02 	bl	8003a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c634:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c63a:	2302      	movs	r3, #2
 800c63c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c63e:	2300      	movs	r3, #0
 800c640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c642:	2300      	movs	r3, #0
 800c644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c646:	230a      	movs	r3, #10
 800c648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c64a:	f107 0314 	add.w	r3, r7, #20
 800c64e:	4619      	mov	r1, r3
 800c650:	4812      	ldr	r0, [pc, #72]	; (800c69c <HAL_HCD_MspInit+0xc0>)
 800c652:	f7f7 f9f1 	bl	8003a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c656:	4b10      	ldr	r3, [pc, #64]	; (800c698 <HAL_HCD_MspInit+0xbc>)
 800c658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c65a:	4a0f      	ldr	r2, [pc, #60]	; (800c698 <HAL_HCD_MspInit+0xbc>)
 800c65c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c660:	6353      	str	r3, [r2, #52]	; 0x34
 800c662:	2300      	movs	r3, #0
 800c664:	60fb      	str	r3, [r7, #12]
 800c666:	4b0c      	ldr	r3, [pc, #48]	; (800c698 <HAL_HCD_MspInit+0xbc>)
 800c668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c66a:	4a0b      	ldr	r2, [pc, #44]	; (800c698 <HAL_HCD_MspInit+0xbc>)
 800c66c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c670:	6453      	str	r3, [r2, #68]	; 0x44
 800c672:	4b09      	ldr	r3, [pc, #36]	; (800c698 <HAL_HCD_MspInit+0xbc>)
 800c674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c67a:	60fb      	str	r3, [r7, #12]
 800c67c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c67e:	2200      	movs	r2, #0
 800c680:	2100      	movs	r1, #0
 800c682:	2043      	movs	r0, #67	; 0x43
 800c684:	f7f7 f9a1 	bl	80039ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c688:	2043      	movs	r0, #67	; 0x43
 800c68a:	f7f7 f9ba 	bl	8003a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c68e:	bf00      	nop
 800c690:	3728      	adds	r7, #40	; 0x28
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	40023800 	.word	0x40023800
 800c69c:	40020000 	.word	0x40020000

0800c6a0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7ff f8db 	bl	800b86a <USBH_LL_IncTimer>
}
 800c6b4:	bf00      	nop
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7ff f913 	bl	800b8f6 <USBH_LL_Connect>
}
 800c6d0:	bf00      	nop
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff f91c 	bl	800b924 <USBH_LL_Disconnect>
}
 800c6ec:	bf00      	nop
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	70fb      	strb	r3, [r7, #3]
 800c700:	4613      	mov	r3, r2
 800c702:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c704:	bf00      	nop
 800c706:	370c      	adds	r7, #12
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr

0800c710 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c71e:	4618      	mov	r0, r3
 800c720:	f7ff f8cd 	bl	800b8be <USBH_LL_PortEnabled>
}
 800c724:	bf00      	nop
 800c726:	3708      	adds	r7, #8
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7ff f8cd 	bl	800b8da <USBH_LL_PortDisabled>
}
 800c740:	bf00      	nop
 800c742:	3708      	adds	r7, #8
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c756:	2b01      	cmp	r3, #1
 800c758:	d12a      	bne.n	800c7b0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c75a:	4a18      	ldr	r2, [pc, #96]	; (800c7bc <USBH_LL_Init+0x74>)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	4a15      	ldr	r2, [pc, #84]	; (800c7bc <USBH_LL_Init+0x74>)
 800c766:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c76a:	4b14      	ldr	r3, [pc, #80]	; (800c7bc <USBH_LL_Init+0x74>)
 800c76c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c770:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c772:	4b12      	ldr	r3, [pc, #72]	; (800c7bc <USBH_LL_Init+0x74>)
 800c774:	2208      	movs	r2, #8
 800c776:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c778:	4b10      	ldr	r3, [pc, #64]	; (800c7bc <USBH_LL_Init+0x74>)
 800c77a:	2201      	movs	r2, #1
 800c77c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c77e:	4b0f      	ldr	r3, [pc, #60]	; (800c7bc <USBH_LL_Init+0x74>)
 800c780:	2200      	movs	r2, #0
 800c782:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c784:	4b0d      	ldr	r3, [pc, #52]	; (800c7bc <USBH_LL_Init+0x74>)
 800c786:	2202      	movs	r2, #2
 800c788:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c78a:	4b0c      	ldr	r3, [pc, #48]	; (800c7bc <USBH_LL_Init+0x74>)
 800c78c:	2200      	movs	r2, #0
 800c78e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c790:	480a      	ldr	r0, [pc, #40]	; (800c7bc <USBH_LL_Init+0x74>)
 800c792:	f7f7 fb38 	bl	8003e06 <HAL_HCD_Init>
 800c796:	4603      	mov	r3, r0
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d001      	beq.n	800c7a0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c79c:	f7f5 f9c4 	bl	8001b28 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c7a0:	4806      	ldr	r0, [pc, #24]	; (800c7bc <USBH_LL_Init+0x74>)
 800c7a2:	f7f7 ff15 	bl	80045d0 <HAL_HCD_GetCurrentFrame>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f7ff f84e 	bl	800b84c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	20000a48 	.word	0x20000a48

0800c7c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7f7 fe84 	bl	80044e4 <HAL_HCD_Start>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 f95c 	bl	800caa0 <USBH_Get_USB_Status>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b084      	sub	sp, #16
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7fe:	2300      	movs	r3, #0
 800c800:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7f7 fe8c 	bl	800452a <HAL_HCD_Stop>
 800c812:	4603      	mov	r3, r0
 800c814:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c816:	7bfb      	ldrb	r3, [r7, #15]
 800c818:	4618      	mov	r0, r3
 800c81a:	f000 f941 	bl	800caa0 <USBH_Get_USB_Status>
 800c81e:	4603      	mov	r3, r0
 800c820:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c822:	7bbb      	ldrb	r3, [r7, #14]
}
 800c824:	4618      	mov	r0, r3
 800c826:	3710      	adds	r7, #16
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c834:	2301      	movs	r3, #1
 800c836:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c83e:	4618      	mov	r0, r3
 800c840:	f7f7 fed4 	bl	80045ec <HAL_HCD_GetCurrentSpeed>
 800c844:	4603      	mov	r3, r0
 800c846:	2b02      	cmp	r3, #2
 800c848:	d00c      	beq.n	800c864 <USBH_LL_GetSpeed+0x38>
 800c84a:	2b02      	cmp	r3, #2
 800c84c:	d80d      	bhi.n	800c86a <USBH_LL_GetSpeed+0x3e>
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d002      	beq.n	800c858 <USBH_LL_GetSpeed+0x2c>
 800c852:	2b01      	cmp	r3, #1
 800c854:	d003      	beq.n	800c85e <USBH_LL_GetSpeed+0x32>
 800c856:	e008      	b.n	800c86a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c858:	2300      	movs	r3, #0
 800c85a:	73fb      	strb	r3, [r7, #15]
    break;
 800c85c:	e008      	b.n	800c870 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c85e:	2301      	movs	r3, #1
 800c860:	73fb      	strb	r3, [r7, #15]
    break;
 800c862:	e005      	b.n	800c870 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c864:	2302      	movs	r3, #2
 800c866:	73fb      	strb	r3, [r7, #15]
    break;
 800c868:	e002      	b.n	800c870 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c86a:	2301      	movs	r3, #1
 800c86c:	73fb      	strb	r3, [r7, #15]
    break;
 800c86e:	bf00      	nop
  }
  return  speed;
 800c870:	7bfb      	ldrb	r3, [r7, #15]
}
 800c872:	4618      	mov	r0, r3
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b084      	sub	sp, #16
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c882:	2300      	movs	r3, #0
 800c884:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c886:	2300      	movs	r3, #0
 800c888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c890:	4618      	mov	r0, r3
 800c892:	f7f7 fe67 	bl	8004564 <HAL_HCD_ResetPort>
 800c896:	4603      	mov	r3, r0
 800c898:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c89a:	7bfb      	ldrb	r3, [r7, #15]
 800c89c:	4618      	mov	r0, r3
 800c89e:	f000 f8ff 	bl	800caa0 <USBH_Get_USB_Status>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3710      	adds	r7, #16
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8c2:	78fa      	ldrb	r2, [r7, #3]
 800c8c4:	4611      	mov	r1, r2
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7f7 fe6e 	bl	80045a8 <HAL_HCD_HC_GetXferCount>
 800c8cc:	4603      	mov	r3, r0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c8d6:	b590      	push	{r4, r7, lr}
 800c8d8:	b089      	sub	sp, #36	; 0x24
 800c8da:	af04      	add	r7, sp, #16
 800c8dc:	6078      	str	r0, [r7, #4]
 800c8de:	4608      	mov	r0, r1
 800c8e0:	4611      	mov	r1, r2
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	70fb      	strb	r3, [r7, #3]
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	70bb      	strb	r3, [r7, #2]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c8fe:	787c      	ldrb	r4, [r7, #1]
 800c900:	78ba      	ldrb	r2, [r7, #2]
 800c902:	78f9      	ldrb	r1, [r7, #3]
 800c904:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c906:	9302      	str	r3, [sp, #8]
 800c908:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c90c:	9301      	str	r3, [sp, #4]
 800c90e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c912:	9300      	str	r3, [sp, #0]
 800c914:	4623      	mov	r3, r4
 800c916:	f7f7 fad8 	bl	8003eca <HAL_HCD_HC_Init>
 800c91a:	4603      	mov	r3, r0
 800c91c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c91e:	7bfb      	ldrb	r3, [r7, #15]
 800c920:	4618      	mov	r0, r3
 800c922:	f000 f8bd 	bl	800caa0 <USBH_Get_USB_Status>
 800c926:	4603      	mov	r3, r0
 800c928:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c92a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3714      	adds	r7, #20
 800c930:	46bd      	mov	sp, r7
 800c932:	bd90      	pop	{r4, r7, pc}

0800c934 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	460b      	mov	r3, r1
 800c93e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c940:	2300      	movs	r3, #0
 800c942:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c944:	2300      	movs	r3, #0
 800c946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c94e:	78fa      	ldrb	r2, [r7, #3]
 800c950:	4611      	mov	r1, r2
 800c952:	4618      	mov	r0, r3
 800c954:	f7f7 fb48 	bl	8003fe8 <HAL_HCD_HC_Halt>
 800c958:	4603      	mov	r3, r0
 800c95a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c95c:	7bfb      	ldrb	r3, [r7, #15]
 800c95e:	4618      	mov	r0, r3
 800c960:	f000 f89e 	bl	800caa0 <USBH_Get_USB_Status>
 800c964:	4603      	mov	r3, r0
 800c966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c968:	7bbb      	ldrb	r3, [r7, #14]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c972:	b590      	push	{r4, r7, lr}
 800c974:	b089      	sub	sp, #36	; 0x24
 800c976:	af04      	add	r7, sp, #16
 800c978:	6078      	str	r0, [r7, #4]
 800c97a:	4608      	mov	r0, r1
 800c97c:	4611      	mov	r1, r2
 800c97e:	461a      	mov	r2, r3
 800c980:	4603      	mov	r3, r0
 800c982:	70fb      	strb	r3, [r7, #3]
 800c984:	460b      	mov	r3, r1
 800c986:	70bb      	strb	r3, [r7, #2]
 800c988:	4613      	mov	r3, r2
 800c98a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c98c:	2300      	movs	r3, #0
 800c98e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c990:	2300      	movs	r3, #0
 800c992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c99a:	787c      	ldrb	r4, [r7, #1]
 800c99c:	78ba      	ldrb	r2, [r7, #2]
 800c99e:	78f9      	ldrb	r1, [r7, #3]
 800c9a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c9a4:	9303      	str	r3, [sp, #12]
 800c9a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c9a8:	9302      	str	r3, [sp, #8]
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ac:	9301      	str	r3, [sp, #4]
 800c9ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c9b2:	9300      	str	r3, [sp, #0]
 800c9b4:	4623      	mov	r3, r4
 800c9b6:	f7f7 fb3b 	bl	8004030 <HAL_HCD_HC_SubmitRequest>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c9be:	7bfb      	ldrb	r3, [r7, #15]
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f000 f86d 	bl	800caa0 <USBH_Get_USB_Status>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3714      	adds	r7, #20
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd90      	pop	{r4, r7, pc}

0800c9d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	460b      	mov	r3, r1
 800c9de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c9e6:	78fa      	ldrb	r2, [r7, #3]
 800c9e8:	4611      	mov	r1, r2
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7f7 fdc8 	bl	8004580 <HAL_HCD_HC_GetURBState>
 800c9f0:	4603      	mov	r3, r0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3708      	adds	r7, #8
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}

0800c9fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b082      	sub	sp, #8
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
 800ca02:	460b      	mov	r3, r1
 800ca04:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d103      	bne.n	800ca18 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ca10:	78fb      	ldrb	r3, [r7, #3]
 800ca12:	4618      	mov	r0, r3
 800ca14:	f000 f870 	bl	800caf8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ca18:	20c8      	movs	r0, #200	; 0xc8
 800ca1a:	f7f6 fed7 	bl	80037cc <HAL_Delay>
  return USBH_OK;
 800ca1e:	2300      	movs	r3, #0
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	460b      	mov	r3, r1
 800ca32:	70fb      	strb	r3, [r7, #3]
 800ca34:	4613      	mov	r3, r2
 800ca36:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca3e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ca40:	78fb      	ldrb	r3, [r7, #3]
 800ca42:	68fa      	ldr	r2, [r7, #12]
 800ca44:	212c      	movs	r1, #44	; 0x2c
 800ca46:	fb01 f303 	mul.w	r3, r1, r3
 800ca4a:	4413      	add	r3, r2
 800ca4c:	333b      	adds	r3, #59	; 0x3b
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d009      	beq.n	800ca68 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ca54:	78fb      	ldrb	r3, [r7, #3]
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	212c      	movs	r1, #44	; 0x2c
 800ca5a:	fb01 f303 	mul.w	r3, r1, r3
 800ca5e:	4413      	add	r3, r2
 800ca60:	3354      	adds	r3, #84	; 0x54
 800ca62:	78ba      	ldrb	r2, [r7, #2]
 800ca64:	701a      	strb	r2, [r3, #0]
 800ca66:	e008      	b.n	800ca7a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ca68:	78fb      	ldrb	r3, [r7, #3]
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	212c      	movs	r1, #44	; 0x2c
 800ca6e:	fb01 f303 	mul.w	r3, r1, r3
 800ca72:	4413      	add	r3, r2
 800ca74:	3355      	adds	r3, #85	; 0x55
 800ca76:	78ba      	ldrb	r2, [r7, #2]
 800ca78:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ca7a:	2300      	movs	r3, #0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f7f6 fe9b 	bl	80037cc <HAL_Delay>
}
 800ca96:	bf00      	nop
 800ca98:	3708      	adds	r7, #8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
	...

0800caa0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b085      	sub	sp, #20
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	4603      	mov	r3, r0
 800caa8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800caaa:	2300      	movs	r3, #0
 800caac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800caae:	79fb      	ldrb	r3, [r7, #7]
 800cab0:	2b03      	cmp	r3, #3
 800cab2:	d817      	bhi.n	800cae4 <USBH_Get_USB_Status+0x44>
 800cab4:	a201      	add	r2, pc, #4	; (adr r2, 800cabc <USBH_Get_USB_Status+0x1c>)
 800cab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caba:	bf00      	nop
 800cabc:	0800cacd 	.word	0x0800cacd
 800cac0:	0800cad3 	.word	0x0800cad3
 800cac4:	0800cad9 	.word	0x0800cad9
 800cac8:	0800cadf 	.word	0x0800cadf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cacc:	2300      	movs	r3, #0
 800cace:	73fb      	strb	r3, [r7, #15]
    break;
 800cad0:	e00b      	b.n	800caea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cad2:	2302      	movs	r3, #2
 800cad4:	73fb      	strb	r3, [r7, #15]
    break;
 800cad6:	e008      	b.n	800caea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cad8:	2301      	movs	r3, #1
 800cada:	73fb      	strb	r3, [r7, #15]
    break;
 800cadc:	e005      	b.n	800caea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cade:	2302      	movs	r3, #2
 800cae0:	73fb      	strb	r3, [r7, #15]
    break;
 800cae2:	e002      	b.n	800caea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cae4:	2302      	movs	r3, #2
 800cae6:	73fb      	strb	r3, [r7, #15]
    break;
 800cae8:	bf00      	nop
  }
  return usb_status;
 800caea:	7bfb      	ldrb	r3, [r7, #15]
}
 800caec:	4618      	mov	r0, r3
 800caee:	3714      	adds	r7, #20
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	4603      	mov	r3, r0
 800cb00:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cb02:	79fb      	ldrb	r3, [r7, #7]
 800cb04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cb06:	79fb      	ldrb	r3, [r7, #7]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d102      	bne.n	800cb12 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	73fb      	strb	r3, [r7, #15]
 800cb10:	e001      	b.n	800cb16 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cb12:	2300      	movs	r3, #0
 800cb14:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800cb16:	7bfb      	ldrb	r3, [r7, #15]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	2101      	movs	r1, #1
 800cb1c:	4803      	ldr	r0, [pc, #12]	; (800cb2c <MX_DriverVbusFS+0x34>)
 800cb1e:	f7f7 f93f 	bl	8003da0 <HAL_GPIO_WritePin>
}
 800cb22:	bf00      	nop
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	40020800 	.word	0x40020800

0800cb30 <__errno>:
 800cb30:	4b01      	ldr	r3, [pc, #4]	; (800cb38 <__errno+0x8>)
 800cb32:	6818      	ldr	r0, [r3, #0]
 800cb34:	4770      	bx	lr
 800cb36:	bf00      	nop
 800cb38:	200000c8 	.word	0x200000c8

0800cb3c <__libc_init_array>:
 800cb3c:	b570      	push	{r4, r5, r6, lr}
 800cb3e:	4d0d      	ldr	r5, [pc, #52]	; (800cb74 <__libc_init_array+0x38>)
 800cb40:	4c0d      	ldr	r4, [pc, #52]	; (800cb78 <__libc_init_array+0x3c>)
 800cb42:	1b64      	subs	r4, r4, r5
 800cb44:	10a4      	asrs	r4, r4, #2
 800cb46:	2600      	movs	r6, #0
 800cb48:	42a6      	cmp	r6, r4
 800cb4a:	d109      	bne.n	800cb60 <__libc_init_array+0x24>
 800cb4c:	4d0b      	ldr	r5, [pc, #44]	; (800cb7c <__libc_init_array+0x40>)
 800cb4e:	4c0c      	ldr	r4, [pc, #48]	; (800cb80 <__libc_init_array+0x44>)
 800cb50:	f000 fc58 	bl	800d404 <_init>
 800cb54:	1b64      	subs	r4, r4, r5
 800cb56:	10a4      	asrs	r4, r4, #2
 800cb58:	2600      	movs	r6, #0
 800cb5a:	42a6      	cmp	r6, r4
 800cb5c:	d105      	bne.n	800cb6a <__libc_init_array+0x2e>
 800cb5e:	bd70      	pop	{r4, r5, r6, pc}
 800cb60:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb64:	4798      	blx	r3
 800cb66:	3601      	adds	r6, #1
 800cb68:	e7ee      	b.n	800cb48 <__libc_init_array+0xc>
 800cb6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb6e:	4798      	blx	r3
 800cb70:	3601      	adds	r6, #1
 800cb72:	e7f2      	b.n	800cb5a <__libc_init_array+0x1e>
 800cb74:	0800f928 	.word	0x0800f928
 800cb78:	0800f928 	.word	0x0800f928
 800cb7c:	0800f928 	.word	0x0800f928
 800cb80:	0800f92c 	.word	0x0800f92c

0800cb84 <malloc>:
 800cb84:	4b02      	ldr	r3, [pc, #8]	; (800cb90 <malloc+0xc>)
 800cb86:	4601      	mov	r1, r0
 800cb88:	6818      	ldr	r0, [r3, #0]
 800cb8a:	f000 b863 	b.w	800cc54 <_malloc_r>
 800cb8e:	bf00      	nop
 800cb90:	200000c8 	.word	0x200000c8

0800cb94 <free>:
 800cb94:	4b02      	ldr	r3, [pc, #8]	; (800cba0 <free+0xc>)
 800cb96:	4601      	mov	r1, r0
 800cb98:	6818      	ldr	r0, [r3, #0]
 800cb9a:	f000 b80b 	b.w	800cbb4 <_free_r>
 800cb9e:	bf00      	nop
 800cba0:	200000c8 	.word	0x200000c8

0800cba4 <memset>:
 800cba4:	4402      	add	r2, r0
 800cba6:	4603      	mov	r3, r0
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d100      	bne.n	800cbae <memset+0xa>
 800cbac:	4770      	bx	lr
 800cbae:	f803 1b01 	strb.w	r1, [r3], #1
 800cbb2:	e7f9      	b.n	800cba8 <memset+0x4>

0800cbb4 <_free_r>:
 800cbb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbb6:	2900      	cmp	r1, #0
 800cbb8:	d048      	beq.n	800cc4c <_free_r+0x98>
 800cbba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbbe:	9001      	str	r0, [sp, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f1a1 0404 	sub.w	r4, r1, #4
 800cbc6:	bfb8      	it	lt
 800cbc8:	18e4      	addlt	r4, r4, r3
 800cbca:	f000 f8ad 	bl	800cd28 <__malloc_lock>
 800cbce:	4a20      	ldr	r2, [pc, #128]	; (800cc50 <_free_r+0x9c>)
 800cbd0:	9801      	ldr	r0, [sp, #4]
 800cbd2:	6813      	ldr	r3, [r2, #0]
 800cbd4:	4615      	mov	r5, r2
 800cbd6:	b933      	cbnz	r3, 800cbe6 <_free_r+0x32>
 800cbd8:	6063      	str	r3, [r4, #4]
 800cbda:	6014      	str	r4, [r2, #0]
 800cbdc:	b003      	add	sp, #12
 800cbde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbe2:	f000 b8a7 	b.w	800cd34 <__malloc_unlock>
 800cbe6:	42a3      	cmp	r3, r4
 800cbe8:	d90b      	bls.n	800cc02 <_free_r+0x4e>
 800cbea:	6821      	ldr	r1, [r4, #0]
 800cbec:	1862      	adds	r2, r4, r1
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	bf04      	itt	eq
 800cbf2:	681a      	ldreq	r2, [r3, #0]
 800cbf4:	685b      	ldreq	r3, [r3, #4]
 800cbf6:	6063      	str	r3, [r4, #4]
 800cbf8:	bf04      	itt	eq
 800cbfa:	1852      	addeq	r2, r2, r1
 800cbfc:	6022      	streq	r2, [r4, #0]
 800cbfe:	602c      	str	r4, [r5, #0]
 800cc00:	e7ec      	b.n	800cbdc <_free_r+0x28>
 800cc02:	461a      	mov	r2, r3
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	b10b      	cbz	r3, 800cc0c <_free_r+0x58>
 800cc08:	42a3      	cmp	r3, r4
 800cc0a:	d9fa      	bls.n	800cc02 <_free_r+0x4e>
 800cc0c:	6811      	ldr	r1, [r2, #0]
 800cc0e:	1855      	adds	r5, r2, r1
 800cc10:	42a5      	cmp	r5, r4
 800cc12:	d10b      	bne.n	800cc2c <_free_r+0x78>
 800cc14:	6824      	ldr	r4, [r4, #0]
 800cc16:	4421      	add	r1, r4
 800cc18:	1854      	adds	r4, r2, r1
 800cc1a:	42a3      	cmp	r3, r4
 800cc1c:	6011      	str	r1, [r2, #0]
 800cc1e:	d1dd      	bne.n	800cbdc <_free_r+0x28>
 800cc20:	681c      	ldr	r4, [r3, #0]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	6053      	str	r3, [r2, #4]
 800cc26:	4421      	add	r1, r4
 800cc28:	6011      	str	r1, [r2, #0]
 800cc2a:	e7d7      	b.n	800cbdc <_free_r+0x28>
 800cc2c:	d902      	bls.n	800cc34 <_free_r+0x80>
 800cc2e:	230c      	movs	r3, #12
 800cc30:	6003      	str	r3, [r0, #0]
 800cc32:	e7d3      	b.n	800cbdc <_free_r+0x28>
 800cc34:	6825      	ldr	r5, [r4, #0]
 800cc36:	1961      	adds	r1, r4, r5
 800cc38:	428b      	cmp	r3, r1
 800cc3a:	bf04      	itt	eq
 800cc3c:	6819      	ldreq	r1, [r3, #0]
 800cc3e:	685b      	ldreq	r3, [r3, #4]
 800cc40:	6063      	str	r3, [r4, #4]
 800cc42:	bf04      	itt	eq
 800cc44:	1949      	addeq	r1, r1, r5
 800cc46:	6021      	streq	r1, [r4, #0]
 800cc48:	6054      	str	r4, [r2, #4]
 800cc4a:	e7c7      	b.n	800cbdc <_free_r+0x28>
 800cc4c:	b003      	add	sp, #12
 800cc4e:	bd30      	pop	{r4, r5, pc}
 800cc50:	20000158 	.word	0x20000158

0800cc54 <_malloc_r>:
 800cc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc56:	1ccd      	adds	r5, r1, #3
 800cc58:	f025 0503 	bic.w	r5, r5, #3
 800cc5c:	3508      	adds	r5, #8
 800cc5e:	2d0c      	cmp	r5, #12
 800cc60:	bf38      	it	cc
 800cc62:	250c      	movcc	r5, #12
 800cc64:	2d00      	cmp	r5, #0
 800cc66:	4606      	mov	r6, r0
 800cc68:	db01      	blt.n	800cc6e <_malloc_r+0x1a>
 800cc6a:	42a9      	cmp	r1, r5
 800cc6c:	d903      	bls.n	800cc76 <_malloc_r+0x22>
 800cc6e:	230c      	movs	r3, #12
 800cc70:	6033      	str	r3, [r6, #0]
 800cc72:	2000      	movs	r0, #0
 800cc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc76:	f000 f857 	bl	800cd28 <__malloc_lock>
 800cc7a:	4921      	ldr	r1, [pc, #132]	; (800cd00 <_malloc_r+0xac>)
 800cc7c:	680a      	ldr	r2, [r1, #0]
 800cc7e:	4614      	mov	r4, r2
 800cc80:	b99c      	cbnz	r4, 800ccaa <_malloc_r+0x56>
 800cc82:	4f20      	ldr	r7, [pc, #128]	; (800cd04 <_malloc_r+0xb0>)
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	b923      	cbnz	r3, 800cc92 <_malloc_r+0x3e>
 800cc88:	4621      	mov	r1, r4
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	f000 f83c 	bl	800cd08 <_sbrk_r>
 800cc90:	6038      	str	r0, [r7, #0]
 800cc92:	4629      	mov	r1, r5
 800cc94:	4630      	mov	r0, r6
 800cc96:	f000 f837 	bl	800cd08 <_sbrk_r>
 800cc9a:	1c43      	adds	r3, r0, #1
 800cc9c:	d123      	bne.n	800cce6 <_malloc_r+0x92>
 800cc9e:	230c      	movs	r3, #12
 800cca0:	6033      	str	r3, [r6, #0]
 800cca2:	4630      	mov	r0, r6
 800cca4:	f000 f846 	bl	800cd34 <__malloc_unlock>
 800cca8:	e7e3      	b.n	800cc72 <_malloc_r+0x1e>
 800ccaa:	6823      	ldr	r3, [r4, #0]
 800ccac:	1b5b      	subs	r3, r3, r5
 800ccae:	d417      	bmi.n	800cce0 <_malloc_r+0x8c>
 800ccb0:	2b0b      	cmp	r3, #11
 800ccb2:	d903      	bls.n	800ccbc <_malloc_r+0x68>
 800ccb4:	6023      	str	r3, [r4, #0]
 800ccb6:	441c      	add	r4, r3
 800ccb8:	6025      	str	r5, [r4, #0]
 800ccba:	e004      	b.n	800ccc6 <_malloc_r+0x72>
 800ccbc:	6863      	ldr	r3, [r4, #4]
 800ccbe:	42a2      	cmp	r2, r4
 800ccc0:	bf0c      	ite	eq
 800ccc2:	600b      	streq	r3, [r1, #0]
 800ccc4:	6053      	strne	r3, [r2, #4]
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	f000 f834 	bl	800cd34 <__malloc_unlock>
 800cccc:	f104 000b 	add.w	r0, r4, #11
 800ccd0:	1d23      	adds	r3, r4, #4
 800ccd2:	f020 0007 	bic.w	r0, r0, #7
 800ccd6:	1ac2      	subs	r2, r0, r3
 800ccd8:	d0cc      	beq.n	800cc74 <_malloc_r+0x20>
 800ccda:	1a1b      	subs	r3, r3, r0
 800ccdc:	50a3      	str	r3, [r4, r2]
 800ccde:	e7c9      	b.n	800cc74 <_malloc_r+0x20>
 800cce0:	4622      	mov	r2, r4
 800cce2:	6864      	ldr	r4, [r4, #4]
 800cce4:	e7cc      	b.n	800cc80 <_malloc_r+0x2c>
 800cce6:	1cc4      	adds	r4, r0, #3
 800cce8:	f024 0403 	bic.w	r4, r4, #3
 800ccec:	42a0      	cmp	r0, r4
 800ccee:	d0e3      	beq.n	800ccb8 <_malloc_r+0x64>
 800ccf0:	1a21      	subs	r1, r4, r0
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	f000 f808 	bl	800cd08 <_sbrk_r>
 800ccf8:	3001      	adds	r0, #1
 800ccfa:	d1dd      	bne.n	800ccb8 <_malloc_r+0x64>
 800ccfc:	e7cf      	b.n	800cc9e <_malloc_r+0x4a>
 800ccfe:	bf00      	nop
 800cd00:	20000158 	.word	0x20000158
 800cd04:	2000015c 	.word	0x2000015c

0800cd08 <_sbrk_r>:
 800cd08:	b538      	push	{r3, r4, r5, lr}
 800cd0a:	4d06      	ldr	r5, [pc, #24]	; (800cd24 <_sbrk_r+0x1c>)
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	4604      	mov	r4, r0
 800cd10:	4608      	mov	r0, r1
 800cd12:	602b      	str	r3, [r5, #0]
 800cd14:	f7f5 fa1c 	bl	8002150 <_sbrk>
 800cd18:	1c43      	adds	r3, r0, #1
 800cd1a:	d102      	bne.n	800cd22 <_sbrk_r+0x1a>
 800cd1c:	682b      	ldr	r3, [r5, #0]
 800cd1e:	b103      	cbz	r3, 800cd22 <_sbrk_r+0x1a>
 800cd20:	6023      	str	r3, [r4, #0]
 800cd22:	bd38      	pop	{r3, r4, r5, pc}
 800cd24:	20000d4c 	.word	0x20000d4c

0800cd28 <__malloc_lock>:
 800cd28:	4801      	ldr	r0, [pc, #4]	; (800cd30 <__malloc_lock+0x8>)
 800cd2a:	f000 b809 	b.w	800cd40 <__retarget_lock_acquire_recursive>
 800cd2e:	bf00      	nop
 800cd30:	20000d54 	.word	0x20000d54

0800cd34 <__malloc_unlock>:
 800cd34:	4801      	ldr	r0, [pc, #4]	; (800cd3c <__malloc_unlock+0x8>)
 800cd36:	f000 b804 	b.w	800cd42 <__retarget_lock_release_recursive>
 800cd3a:	bf00      	nop
 800cd3c:	20000d54 	.word	0x20000d54

0800cd40 <__retarget_lock_acquire_recursive>:
 800cd40:	4770      	bx	lr

0800cd42 <__retarget_lock_release_recursive>:
 800cd42:	4770      	bx	lr
 800cd44:	0000      	movs	r0, r0
	...

0800cd48 <atan>:
 800cd48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4c:	ec55 4b10 	vmov	r4, r5, d0
 800cd50:	4bc3      	ldr	r3, [pc, #780]	; (800d060 <atan+0x318>)
 800cd52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cd56:	429e      	cmp	r6, r3
 800cd58:	46ab      	mov	fp, r5
 800cd5a:	dd18      	ble.n	800cd8e <atan+0x46>
 800cd5c:	4bc1      	ldr	r3, [pc, #772]	; (800d064 <atan+0x31c>)
 800cd5e:	429e      	cmp	r6, r3
 800cd60:	dc01      	bgt.n	800cd66 <atan+0x1e>
 800cd62:	d109      	bne.n	800cd78 <atan+0x30>
 800cd64:	b144      	cbz	r4, 800cd78 <atan+0x30>
 800cd66:	4622      	mov	r2, r4
 800cd68:	462b      	mov	r3, r5
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	f7f3 fa31 	bl	80001d4 <__adddf3>
 800cd72:	4604      	mov	r4, r0
 800cd74:	460d      	mov	r5, r1
 800cd76:	e006      	b.n	800cd86 <atan+0x3e>
 800cd78:	f1bb 0f00 	cmp.w	fp, #0
 800cd7c:	f300 8131 	bgt.w	800cfe2 <atan+0x29a>
 800cd80:	a59b      	add	r5, pc, #620	; (adr r5, 800cff0 <atan+0x2a8>)
 800cd82:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cd86:	ec45 4b10 	vmov	d0, r4, r5
 800cd8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd8e:	4bb6      	ldr	r3, [pc, #728]	; (800d068 <atan+0x320>)
 800cd90:	429e      	cmp	r6, r3
 800cd92:	dc14      	bgt.n	800cdbe <atan+0x76>
 800cd94:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cd98:	429e      	cmp	r6, r3
 800cd9a:	dc0d      	bgt.n	800cdb8 <atan+0x70>
 800cd9c:	a396      	add	r3, pc, #600	; (adr r3, 800cff8 <atan+0x2b0>)
 800cd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda2:	ee10 0a10 	vmov	r0, s0
 800cda6:	4629      	mov	r1, r5
 800cda8:	f7f3 fa14 	bl	80001d4 <__adddf3>
 800cdac:	4baf      	ldr	r3, [pc, #700]	; (800d06c <atan+0x324>)
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f7f3 fe56 	bl	8000a60 <__aeabi_dcmpgt>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d1e6      	bne.n	800cd86 <atan+0x3e>
 800cdb8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cdbc:	e02b      	b.n	800ce16 <atan+0xce>
 800cdbe:	f000 f963 	bl	800d088 <fabs>
 800cdc2:	4bab      	ldr	r3, [pc, #684]	; (800d070 <atan+0x328>)
 800cdc4:	429e      	cmp	r6, r3
 800cdc6:	ec55 4b10 	vmov	r4, r5, d0
 800cdca:	f300 80bf 	bgt.w	800cf4c <atan+0x204>
 800cdce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cdd2:	429e      	cmp	r6, r3
 800cdd4:	f300 80a0 	bgt.w	800cf18 <atan+0x1d0>
 800cdd8:	ee10 2a10 	vmov	r2, s0
 800cddc:	ee10 0a10 	vmov	r0, s0
 800cde0:	462b      	mov	r3, r5
 800cde2:	4629      	mov	r1, r5
 800cde4:	f7f3 f9f6 	bl	80001d4 <__adddf3>
 800cde8:	4ba0      	ldr	r3, [pc, #640]	; (800d06c <atan+0x324>)
 800cdea:	2200      	movs	r2, #0
 800cdec:	f7f3 f9f0 	bl	80001d0 <__aeabi_dsub>
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	4606      	mov	r6, r0
 800cdf4:	460f      	mov	r7, r1
 800cdf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	4629      	mov	r1, r5
 800cdfe:	f7f3 f9e9 	bl	80001d4 <__adddf3>
 800ce02:	4602      	mov	r2, r0
 800ce04:	460b      	mov	r3, r1
 800ce06:	4630      	mov	r0, r6
 800ce08:	4639      	mov	r1, r7
 800ce0a:	f7f3 fcc3 	bl	8000794 <__aeabi_ddiv>
 800ce0e:	f04f 0a00 	mov.w	sl, #0
 800ce12:	4604      	mov	r4, r0
 800ce14:	460d      	mov	r5, r1
 800ce16:	4622      	mov	r2, r4
 800ce18:	462b      	mov	r3, r5
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	f7f3 fb8f 	bl	8000540 <__aeabi_dmul>
 800ce22:	4602      	mov	r2, r0
 800ce24:	460b      	mov	r3, r1
 800ce26:	4680      	mov	r8, r0
 800ce28:	4689      	mov	r9, r1
 800ce2a:	f7f3 fb89 	bl	8000540 <__aeabi_dmul>
 800ce2e:	a374      	add	r3, pc, #464	; (adr r3, 800d000 <atan+0x2b8>)
 800ce30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce34:	4606      	mov	r6, r0
 800ce36:	460f      	mov	r7, r1
 800ce38:	f7f3 fb82 	bl	8000540 <__aeabi_dmul>
 800ce3c:	a372      	add	r3, pc, #456	; (adr r3, 800d008 <atan+0x2c0>)
 800ce3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce42:	f7f3 f9c7 	bl	80001d4 <__adddf3>
 800ce46:	4632      	mov	r2, r6
 800ce48:	463b      	mov	r3, r7
 800ce4a:	f7f3 fb79 	bl	8000540 <__aeabi_dmul>
 800ce4e:	a370      	add	r3, pc, #448	; (adr r3, 800d010 <atan+0x2c8>)
 800ce50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce54:	f7f3 f9be 	bl	80001d4 <__adddf3>
 800ce58:	4632      	mov	r2, r6
 800ce5a:	463b      	mov	r3, r7
 800ce5c:	f7f3 fb70 	bl	8000540 <__aeabi_dmul>
 800ce60:	a36d      	add	r3, pc, #436	; (adr r3, 800d018 <atan+0x2d0>)
 800ce62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce66:	f7f3 f9b5 	bl	80001d4 <__adddf3>
 800ce6a:	4632      	mov	r2, r6
 800ce6c:	463b      	mov	r3, r7
 800ce6e:	f7f3 fb67 	bl	8000540 <__aeabi_dmul>
 800ce72:	a36b      	add	r3, pc, #428	; (adr r3, 800d020 <atan+0x2d8>)
 800ce74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce78:	f7f3 f9ac 	bl	80001d4 <__adddf3>
 800ce7c:	4632      	mov	r2, r6
 800ce7e:	463b      	mov	r3, r7
 800ce80:	f7f3 fb5e 	bl	8000540 <__aeabi_dmul>
 800ce84:	a368      	add	r3, pc, #416	; (adr r3, 800d028 <atan+0x2e0>)
 800ce86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8a:	f7f3 f9a3 	bl	80001d4 <__adddf3>
 800ce8e:	4642      	mov	r2, r8
 800ce90:	464b      	mov	r3, r9
 800ce92:	f7f3 fb55 	bl	8000540 <__aeabi_dmul>
 800ce96:	a366      	add	r3, pc, #408	; (adr r3, 800d030 <atan+0x2e8>)
 800ce98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9c:	4680      	mov	r8, r0
 800ce9e:	4689      	mov	r9, r1
 800cea0:	4630      	mov	r0, r6
 800cea2:	4639      	mov	r1, r7
 800cea4:	f7f3 fb4c 	bl	8000540 <__aeabi_dmul>
 800cea8:	a363      	add	r3, pc, #396	; (adr r3, 800d038 <atan+0x2f0>)
 800ceaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceae:	f7f3 f98f 	bl	80001d0 <__aeabi_dsub>
 800ceb2:	4632      	mov	r2, r6
 800ceb4:	463b      	mov	r3, r7
 800ceb6:	f7f3 fb43 	bl	8000540 <__aeabi_dmul>
 800ceba:	a361      	add	r3, pc, #388	; (adr r3, 800d040 <atan+0x2f8>)
 800cebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec0:	f7f3 f986 	bl	80001d0 <__aeabi_dsub>
 800cec4:	4632      	mov	r2, r6
 800cec6:	463b      	mov	r3, r7
 800cec8:	f7f3 fb3a 	bl	8000540 <__aeabi_dmul>
 800cecc:	a35e      	add	r3, pc, #376	; (adr r3, 800d048 <atan+0x300>)
 800cece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced2:	f7f3 f97d 	bl	80001d0 <__aeabi_dsub>
 800ced6:	4632      	mov	r2, r6
 800ced8:	463b      	mov	r3, r7
 800ceda:	f7f3 fb31 	bl	8000540 <__aeabi_dmul>
 800cede:	a35c      	add	r3, pc, #368	; (adr r3, 800d050 <atan+0x308>)
 800cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee4:	f7f3 f974 	bl	80001d0 <__aeabi_dsub>
 800cee8:	4632      	mov	r2, r6
 800ceea:	463b      	mov	r3, r7
 800ceec:	f7f3 fb28 	bl	8000540 <__aeabi_dmul>
 800cef0:	4602      	mov	r2, r0
 800cef2:	460b      	mov	r3, r1
 800cef4:	4640      	mov	r0, r8
 800cef6:	4649      	mov	r1, r9
 800cef8:	f7f3 f96c 	bl	80001d4 <__adddf3>
 800cefc:	4622      	mov	r2, r4
 800cefe:	462b      	mov	r3, r5
 800cf00:	f7f3 fb1e 	bl	8000540 <__aeabi_dmul>
 800cf04:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800cf08:	4602      	mov	r2, r0
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	d14b      	bne.n	800cfa6 <atan+0x25e>
 800cf0e:	4620      	mov	r0, r4
 800cf10:	4629      	mov	r1, r5
 800cf12:	f7f3 f95d 	bl	80001d0 <__aeabi_dsub>
 800cf16:	e72c      	b.n	800cd72 <atan+0x2a>
 800cf18:	ee10 0a10 	vmov	r0, s0
 800cf1c:	4b53      	ldr	r3, [pc, #332]	; (800d06c <atan+0x324>)
 800cf1e:	2200      	movs	r2, #0
 800cf20:	4629      	mov	r1, r5
 800cf22:	f7f3 f955 	bl	80001d0 <__aeabi_dsub>
 800cf26:	4b51      	ldr	r3, [pc, #324]	; (800d06c <atan+0x324>)
 800cf28:	4606      	mov	r6, r0
 800cf2a:	460f      	mov	r7, r1
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	4620      	mov	r0, r4
 800cf30:	4629      	mov	r1, r5
 800cf32:	f7f3 f94f 	bl	80001d4 <__adddf3>
 800cf36:	4602      	mov	r2, r0
 800cf38:	460b      	mov	r3, r1
 800cf3a:	4630      	mov	r0, r6
 800cf3c:	4639      	mov	r1, r7
 800cf3e:	f7f3 fc29 	bl	8000794 <__aeabi_ddiv>
 800cf42:	f04f 0a01 	mov.w	sl, #1
 800cf46:	4604      	mov	r4, r0
 800cf48:	460d      	mov	r5, r1
 800cf4a:	e764      	b.n	800ce16 <atan+0xce>
 800cf4c:	4b49      	ldr	r3, [pc, #292]	; (800d074 <atan+0x32c>)
 800cf4e:	429e      	cmp	r6, r3
 800cf50:	da1d      	bge.n	800cf8e <atan+0x246>
 800cf52:	ee10 0a10 	vmov	r0, s0
 800cf56:	4b48      	ldr	r3, [pc, #288]	; (800d078 <atan+0x330>)
 800cf58:	2200      	movs	r2, #0
 800cf5a:	4629      	mov	r1, r5
 800cf5c:	f7f3 f938 	bl	80001d0 <__aeabi_dsub>
 800cf60:	4b45      	ldr	r3, [pc, #276]	; (800d078 <atan+0x330>)
 800cf62:	4606      	mov	r6, r0
 800cf64:	460f      	mov	r7, r1
 800cf66:	2200      	movs	r2, #0
 800cf68:	4620      	mov	r0, r4
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	f7f3 fae8 	bl	8000540 <__aeabi_dmul>
 800cf70:	4b3e      	ldr	r3, [pc, #248]	; (800d06c <atan+0x324>)
 800cf72:	2200      	movs	r2, #0
 800cf74:	f7f3 f92e 	bl	80001d4 <__adddf3>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	4639      	mov	r1, r7
 800cf80:	f7f3 fc08 	bl	8000794 <__aeabi_ddiv>
 800cf84:	f04f 0a02 	mov.w	sl, #2
 800cf88:	4604      	mov	r4, r0
 800cf8a:	460d      	mov	r5, r1
 800cf8c:	e743      	b.n	800ce16 <atan+0xce>
 800cf8e:	462b      	mov	r3, r5
 800cf90:	ee10 2a10 	vmov	r2, s0
 800cf94:	4939      	ldr	r1, [pc, #228]	; (800d07c <atan+0x334>)
 800cf96:	2000      	movs	r0, #0
 800cf98:	f7f3 fbfc 	bl	8000794 <__aeabi_ddiv>
 800cf9c:	f04f 0a03 	mov.w	sl, #3
 800cfa0:	4604      	mov	r4, r0
 800cfa2:	460d      	mov	r5, r1
 800cfa4:	e737      	b.n	800ce16 <atan+0xce>
 800cfa6:	4b36      	ldr	r3, [pc, #216]	; (800d080 <atan+0x338>)
 800cfa8:	4e36      	ldr	r6, [pc, #216]	; (800d084 <atan+0x33c>)
 800cfaa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cfae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800cfb2:	e9da 2300 	ldrd	r2, r3, [sl]
 800cfb6:	f7f3 f90b 	bl	80001d0 <__aeabi_dsub>
 800cfba:	4622      	mov	r2, r4
 800cfbc:	462b      	mov	r3, r5
 800cfbe:	f7f3 f907 	bl	80001d0 <__aeabi_dsub>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cfca:	f7f3 f901 	bl	80001d0 <__aeabi_dsub>
 800cfce:	f1bb 0f00 	cmp.w	fp, #0
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	460d      	mov	r5, r1
 800cfd6:	f6bf aed6 	bge.w	800cd86 <atan+0x3e>
 800cfda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cfde:	461d      	mov	r5, r3
 800cfe0:	e6d1      	b.n	800cd86 <atan+0x3e>
 800cfe2:	a51d      	add	r5, pc, #116	; (adr r5, 800d058 <atan+0x310>)
 800cfe4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cfe8:	e6cd      	b.n	800cd86 <atan+0x3e>
 800cfea:	bf00      	nop
 800cfec:	f3af 8000 	nop.w
 800cff0:	54442d18 	.word	0x54442d18
 800cff4:	bff921fb 	.word	0xbff921fb
 800cff8:	8800759c 	.word	0x8800759c
 800cffc:	7e37e43c 	.word	0x7e37e43c
 800d000:	e322da11 	.word	0xe322da11
 800d004:	3f90ad3a 	.word	0x3f90ad3a
 800d008:	24760deb 	.word	0x24760deb
 800d00c:	3fa97b4b 	.word	0x3fa97b4b
 800d010:	a0d03d51 	.word	0xa0d03d51
 800d014:	3fb10d66 	.word	0x3fb10d66
 800d018:	c54c206e 	.word	0xc54c206e
 800d01c:	3fb745cd 	.word	0x3fb745cd
 800d020:	920083ff 	.word	0x920083ff
 800d024:	3fc24924 	.word	0x3fc24924
 800d028:	5555550d 	.word	0x5555550d
 800d02c:	3fd55555 	.word	0x3fd55555
 800d030:	2c6a6c2f 	.word	0x2c6a6c2f
 800d034:	bfa2b444 	.word	0xbfa2b444
 800d038:	52defd9a 	.word	0x52defd9a
 800d03c:	3fadde2d 	.word	0x3fadde2d
 800d040:	af749a6d 	.word	0xaf749a6d
 800d044:	3fb3b0f2 	.word	0x3fb3b0f2
 800d048:	fe231671 	.word	0xfe231671
 800d04c:	3fbc71c6 	.word	0x3fbc71c6
 800d050:	9998ebc4 	.word	0x9998ebc4
 800d054:	3fc99999 	.word	0x3fc99999
 800d058:	54442d18 	.word	0x54442d18
 800d05c:	3ff921fb 	.word	0x3ff921fb
 800d060:	440fffff 	.word	0x440fffff
 800d064:	7ff00000 	.word	0x7ff00000
 800d068:	3fdbffff 	.word	0x3fdbffff
 800d06c:	3ff00000 	.word	0x3ff00000
 800d070:	3ff2ffff 	.word	0x3ff2ffff
 800d074:	40038000 	.word	0x40038000
 800d078:	3ff80000 	.word	0x3ff80000
 800d07c:	bff00000 	.word	0xbff00000
 800d080:	0800f8d0 	.word	0x0800f8d0
 800d084:	0800f8b0 	.word	0x0800f8b0

0800d088 <fabs>:
 800d088:	ec51 0b10 	vmov	r0, r1, d0
 800d08c:	ee10 2a10 	vmov	r2, s0
 800d090:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d094:	ec43 2b10 	vmov	d0, r2, r3
 800d098:	4770      	bx	lr

0800d09a <atan2>:
 800d09a:	f000 b835 	b.w	800d108 <__ieee754_atan2>
	...

0800d0a0 <sqrt>:
 800d0a0:	b538      	push	{r3, r4, r5, lr}
 800d0a2:	ed2d 8b02 	vpush	{d8}
 800d0a6:	ec55 4b10 	vmov	r4, r5, d0
 800d0aa:	f000 f8f7 	bl	800d29c <__ieee754_sqrt>
 800d0ae:	4b15      	ldr	r3, [pc, #84]	; (800d104 <sqrt+0x64>)
 800d0b0:	eeb0 8a40 	vmov.f32	s16, s0
 800d0b4:	eef0 8a60 	vmov.f32	s17, s1
 800d0b8:	f993 3000 	ldrsb.w	r3, [r3]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	d019      	beq.n	800d0f4 <sqrt+0x54>
 800d0c0:	4622      	mov	r2, r4
 800d0c2:	462b      	mov	r3, r5
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	4629      	mov	r1, r5
 800d0c8:	f7f3 fcd4 	bl	8000a74 <__aeabi_dcmpun>
 800d0cc:	b990      	cbnz	r0, 800d0f4 <sqrt+0x54>
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	4629      	mov	r1, r5
 800d0d6:	f7f3 fca5 	bl	8000a24 <__aeabi_dcmplt>
 800d0da:	b158      	cbz	r0, 800d0f4 <sqrt+0x54>
 800d0dc:	f7ff fd28 	bl	800cb30 <__errno>
 800d0e0:	2321      	movs	r3, #33	; 0x21
 800d0e2:	6003      	str	r3, [r0, #0]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	f7f3 fb52 	bl	8000794 <__aeabi_ddiv>
 800d0f0:	ec41 0b18 	vmov	d8, r0, r1
 800d0f4:	eeb0 0a48 	vmov.f32	s0, s16
 800d0f8:	eef0 0a68 	vmov.f32	s1, s17
 800d0fc:	ecbd 8b02 	vpop	{d8}
 800d100:	bd38      	pop	{r3, r4, r5, pc}
 800d102:	bf00      	nop
 800d104:	2000012c 	.word	0x2000012c

0800d108 <__ieee754_atan2>:
 800d108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d10c:	ec57 6b11 	vmov	r6, r7, d1
 800d110:	4273      	negs	r3, r6
 800d112:	f8df e184 	ldr.w	lr, [pc, #388]	; 800d298 <__ieee754_atan2+0x190>
 800d116:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d11a:	4333      	orrs	r3, r6
 800d11c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d120:	4573      	cmp	r3, lr
 800d122:	ec51 0b10 	vmov	r0, r1, d0
 800d126:	ee11 8a10 	vmov	r8, s2
 800d12a:	d80a      	bhi.n	800d142 <__ieee754_atan2+0x3a>
 800d12c:	4244      	negs	r4, r0
 800d12e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d132:	4304      	orrs	r4, r0
 800d134:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d138:	4574      	cmp	r4, lr
 800d13a:	ee10 9a10 	vmov	r9, s0
 800d13e:	468c      	mov	ip, r1
 800d140:	d907      	bls.n	800d152 <__ieee754_atan2+0x4a>
 800d142:	4632      	mov	r2, r6
 800d144:	463b      	mov	r3, r7
 800d146:	f7f3 f845 	bl	80001d4 <__adddf3>
 800d14a:	ec41 0b10 	vmov	d0, r0, r1
 800d14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d152:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d156:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d15a:	4334      	orrs	r4, r6
 800d15c:	d103      	bne.n	800d166 <__ieee754_atan2+0x5e>
 800d15e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d162:	f7ff bdf1 	b.w	800cd48 <atan>
 800d166:	17bc      	asrs	r4, r7, #30
 800d168:	f004 0402 	and.w	r4, r4, #2
 800d16c:	ea53 0909 	orrs.w	r9, r3, r9
 800d170:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d174:	d107      	bne.n	800d186 <__ieee754_atan2+0x7e>
 800d176:	2c02      	cmp	r4, #2
 800d178:	d060      	beq.n	800d23c <__ieee754_atan2+0x134>
 800d17a:	2c03      	cmp	r4, #3
 800d17c:	d1e5      	bne.n	800d14a <__ieee754_atan2+0x42>
 800d17e:	a142      	add	r1, pc, #264	; (adr r1, 800d288 <__ieee754_atan2+0x180>)
 800d180:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d184:	e7e1      	b.n	800d14a <__ieee754_atan2+0x42>
 800d186:	ea52 0808 	orrs.w	r8, r2, r8
 800d18a:	d106      	bne.n	800d19a <__ieee754_atan2+0x92>
 800d18c:	f1bc 0f00 	cmp.w	ip, #0
 800d190:	da5f      	bge.n	800d252 <__ieee754_atan2+0x14a>
 800d192:	a13f      	add	r1, pc, #252	; (adr r1, 800d290 <__ieee754_atan2+0x188>)
 800d194:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d198:	e7d7      	b.n	800d14a <__ieee754_atan2+0x42>
 800d19a:	4572      	cmp	r2, lr
 800d19c:	d10f      	bne.n	800d1be <__ieee754_atan2+0xb6>
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d1a4:	d107      	bne.n	800d1b6 <__ieee754_atan2+0xae>
 800d1a6:	2c02      	cmp	r4, #2
 800d1a8:	d84c      	bhi.n	800d244 <__ieee754_atan2+0x13c>
 800d1aa:	4b35      	ldr	r3, [pc, #212]	; (800d280 <__ieee754_atan2+0x178>)
 800d1ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d1b0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d1b4:	e7c9      	b.n	800d14a <__ieee754_atan2+0x42>
 800d1b6:	2c02      	cmp	r4, #2
 800d1b8:	d848      	bhi.n	800d24c <__ieee754_atan2+0x144>
 800d1ba:	4b32      	ldr	r3, [pc, #200]	; (800d284 <__ieee754_atan2+0x17c>)
 800d1bc:	e7f6      	b.n	800d1ac <__ieee754_atan2+0xa4>
 800d1be:	4573      	cmp	r3, lr
 800d1c0:	d0e4      	beq.n	800d18c <__ieee754_atan2+0x84>
 800d1c2:	1a9b      	subs	r3, r3, r2
 800d1c4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d1c8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d1cc:	da1e      	bge.n	800d20c <__ieee754_atan2+0x104>
 800d1ce:	2f00      	cmp	r7, #0
 800d1d0:	da01      	bge.n	800d1d6 <__ieee754_atan2+0xce>
 800d1d2:	323c      	adds	r2, #60	; 0x3c
 800d1d4:	db1e      	blt.n	800d214 <__ieee754_atan2+0x10c>
 800d1d6:	4632      	mov	r2, r6
 800d1d8:	463b      	mov	r3, r7
 800d1da:	f7f3 fadb 	bl	8000794 <__aeabi_ddiv>
 800d1de:	ec41 0b10 	vmov	d0, r0, r1
 800d1e2:	f7ff ff51 	bl	800d088 <fabs>
 800d1e6:	f7ff fdaf 	bl	800cd48 <atan>
 800d1ea:	ec51 0b10 	vmov	r0, r1, d0
 800d1ee:	2c01      	cmp	r4, #1
 800d1f0:	d013      	beq.n	800d21a <__ieee754_atan2+0x112>
 800d1f2:	2c02      	cmp	r4, #2
 800d1f4:	d015      	beq.n	800d222 <__ieee754_atan2+0x11a>
 800d1f6:	2c00      	cmp	r4, #0
 800d1f8:	d0a7      	beq.n	800d14a <__ieee754_atan2+0x42>
 800d1fa:	a319      	add	r3, pc, #100	; (adr r3, 800d260 <__ieee754_atan2+0x158>)
 800d1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d200:	f7f2 ffe6 	bl	80001d0 <__aeabi_dsub>
 800d204:	a318      	add	r3, pc, #96	; (adr r3, 800d268 <__ieee754_atan2+0x160>)
 800d206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20a:	e014      	b.n	800d236 <__ieee754_atan2+0x12e>
 800d20c:	a118      	add	r1, pc, #96	; (adr r1, 800d270 <__ieee754_atan2+0x168>)
 800d20e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d212:	e7ec      	b.n	800d1ee <__ieee754_atan2+0xe6>
 800d214:	2000      	movs	r0, #0
 800d216:	2100      	movs	r1, #0
 800d218:	e7e9      	b.n	800d1ee <__ieee754_atan2+0xe6>
 800d21a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d21e:	4619      	mov	r1, r3
 800d220:	e793      	b.n	800d14a <__ieee754_atan2+0x42>
 800d222:	a30f      	add	r3, pc, #60	; (adr r3, 800d260 <__ieee754_atan2+0x158>)
 800d224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d228:	f7f2 ffd2 	bl	80001d0 <__aeabi_dsub>
 800d22c:	4602      	mov	r2, r0
 800d22e:	460b      	mov	r3, r1
 800d230:	a10d      	add	r1, pc, #52	; (adr r1, 800d268 <__ieee754_atan2+0x160>)
 800d232:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d236:	f7f2 ffcb 	bl	80001d0 <__aeabi_dsub>
 800d23a:	e786      	b.n	800d14a <__ieee754_atan2+0x42>
 800d23c:	a10a      	add	r1, pc, #40	; (adr r1, 800d268 <__ieee754_atan2+0x160>)
 800d23e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d242:	e782      	b.n	800d14a <__ieee754_atan2+0x42>
 800d244:	a10c      	add	r1, pc, #48	; (adr r1, 800d278 <__ieee754_atan2+0x170>)
 800d246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d24a:	e77e      	b.n	800d14a <__ieee754_atan2+0x42>
 800d24c:	2000      	movs	r0, #0
 800d24e:	2100      	movs	r1, #0
 800d250:	e77b      	b.n	800d14a <__ieee754_atan2+0x42>
 800d252:	a107      	add	r1, pc, #28	; (adr r1, 800d270 <__ieee754_atan2+0x168>)
 800d254:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d258:	e777      	b.n	800d14a <__ieee754_atan2+0x42>
 800d25a:	bf00      	nop
 800d25c:	f3af 8000 	nop.w
 800d260:	33145c07 	.word	0x33145c07
 800d264:	3ca1a626 	.word	0x3ca1a626
 800d268:	54442d18 	.word	0x54442d18
 800d26c:	400921fb 	.word	0x400921fb
 800d270:	54442d18 	.word	0x54442d18
 800d274:	3ff921fb 	.word	0x3ff921fb
 800d278:	54442d18 	.word	0x54442d18
 800d27c:	3fe921fb 	.word	0x3fe921fb
 800d280:	0800f8f0 	.word	0x0800f8f0
 800d284:	0800f908 	.word	0x0800f908
 800d288:	54442d18 	.word	0x54442d18
 800d28c:	c00921fb 	.word	0xc00921fb
 800d290:	54442d18 	.word	0x54442d18
 800d294:	bff921fb 	.word	0xbff921fb
 800d298:	7ff00000 	.word	0x7ff00000

0800d29c <__ieee754_sqrt>:
 800d29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a0:	ec55 4b10 	vmov	r4, r5, d0
 800d2a4:	4e56      	ldr	r6, [pc, #344]	; (800d400 <__ieee754_sqrt+0x164>)
 800d2a6:	43ae      	bics	r6, r5
 800d2a8:	ee10 0a10 	vmov	r0, s0
 800d2ac:	ee10 3a10 	vmov	r3, s0
 800d2b0:	4629      	mov	r1, r5
 800d2b2:	462a      	mov	r2, r5
 800d2b4:	d110      	bne.n	800d2d8 <__ieee754_sqrt+0x3c>
 800d2b6:	ee10 2a10 	vmov	r2, s0
 800d2ba:	462b      	mov	r3, r5
 800d2bc:	f7f3 f940 	bl	8000540 <__aeabi_dmul>
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	4629      	mov	r1, r5
 800d2c8:	f7f2 ff84 	bl	80001d4 <__adddf3>
 800d2cc:	4604      	mov	r4, r0
 800d2ce:	460d      	mov	r5, r1
 800d2d0:	ec45 4b10 	vmov	d0, r4, r5
 800d2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2d8:	2d00      	cmp	r5, #0
 800d2da:	dc10      	bgt.n	800d2fe <__ieee754_sqrt+0x62>
 800d2dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d2e0:	4330      	orrs	r0, r6
 800d2e2:	d0f5      	beq.n	800d2d0 <__ieee754_sqrt+0x34>
 800d2e4:	b15d      	cbz	r5, 800d2fe <__ieee754_sqrt+0x62>
 800d2e6:	ee10 2a10 	vmov	r2, s0
 800d2ea:	462b      	mov	r3, r5
 800d2ec:	ee10 0a10 	vmov	r0, s0
 800d2f0:	f7f2 ff6e 	bl	80001d0 <__aeabi_dsub>
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	f7f3 fa4c 	bl	8000794 <__aeabi_ddiv>
 800d2fc:	e7e6      	b.n	800d2cc <__ieee754_sqrt+0x30>
 800d2fe:	1509      	asrs	r1, r1, #20
 800d300:	d076      	beq.n	800d3f0 <__ieee754_sqrt+0x154>
 800d302:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d306:	07ce      	lsls	r6, r1, #31
 800d308:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800d30c:	bf5e      	ittt	pl
 800d30e:	0fda      	lsrpl	r2, r3, #31
 800d310:	005b      	lslpl	r3, r3, #1
 800d312:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800d316:	0fda      	lsrs	r2, r3, #31
 800d318:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800d31c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800d320:	2000      	movs	r0, #0
 800d322:	106d      	asrs	r5, r5, #1
 800d324:	005b      	lsls	r3, r3, #1
 800d326:	f04f 0e16 	mov.w	lr, #22
 800d32a:	4684      	mov	ip, r0
 800d32c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d330:	eb0c 0401 	add.w	r4, ip, r1
 800d334:	4294      	cmp	r4, r2
 800d336:	bfde      	ittt	le
 800d338:	1b12      	suble	r2, r2, r4
 800d33a:	eb04 0c01 	addle.w	ip, r4, r1
 800d33e:	1840      	addle	r0, r0, r1
 800d340:	0052      	lsls	r2, r2, #1
 800d342:	f1be 0e01 	subs.w	lr, lr, #1
 800d346:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d34a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d34e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d352:	d1ed      	bne.n	800d330 <__ieee754_sqrt+0x94>
 800d354:	4671      	mov	r1, lr
 800d356:	2720      	movs	r7, #32
 800d358:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d35c:	4562      	cmp	r2, ip
 800d35e:	eb04 060e 	add.w	r6, r4, lr
 800d362:	dc02      	bgt.n	800d36a <__ieee754_sqrt+0xce>
 800d364:	d113      	bne.n	800d38e <__ieee754_sqrt+0xf2>
 800d366:	429e      	cmp	r6, r3
 800d368:	d811      	bhi.n	800d38e <__ieee754_sqrt+0xf2>
 800d36a:	2e00      	cmp	r6, #0
 800d36c:	eb06 0e04 	add.w	lr, r6, r4
 800d370:	da43      	bge.n	800d3fa <__ieee754_sqrt+0x15e>
 800d372:	f1be 0f00 	cmp.w	lr, #0
 800d376:	db40      	blt.n	800d3fa <__ieee754_sqrt+0x15e>
 800d378:	f10c 0801 	add.w	r8, ip, #1
 800d37c:	eba2 020c 	sub.w	r2, r2, ip
 800d380:	429e      	cmp	r6, r3
 800d382:	bf88      	it	hi
 800d384:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800d388:	1b9b      	subs	r3, r3, r6
 800d38a:	4421      	add	r1, r4
 800d38c:	46c4      	mov	ip, r8
 800d38e:	0052      	lsls	r2, r2, #1
 800d390:	3f01      	subs	r7, #1
 800d392:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d396:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d39a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d39e:	d1dd      	bne.n	800d35c <__ieee754_sqrt+0xc0>
 800d3a0:	4313      	orrs	r3, r2
 800d3a2:	d006      	beq.n	800d3b2 <__ieee754_sqrt+0x116>
 800d3a4:	1c4c      	adds	r4, r1, #1
 800d3a6:	bf13      	iteet	ne
 800d3a8:	3101      	addne	r1, #1
 800d3aa:	3001      	addeq	r0, #1
 800d3ac:	4639      	moveq	r1, r7
 800d3ae:	f021 0101 	bicne.w	r1, r1, #1
 800d3b2:	1043      	asrs	r3, r0, #1
 800d3b4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d3b8:	0849      	lsrs	r1, r1, #1
 800d3ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d3be:	07c2      	lsls	r2, r0, #31
 800d3c0:	bf48      	it	mi
 800d3c2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d3c6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	463d      	mov	r5, r7
 800d3ce:	e77f      	b.n	800d2d0 <__ieee754_sqrt+0x34>
 800d3d0:	0ada      	lsrs	r2, r3, #11
 800d3d2:	3815      	subs	r0, #21
 800d3d4:	055b      	lsls	r3, r3, #21
 800d3d6:	2a00      	cmp	r2, #0
 800d3d8:	d0fa      	beq.n	800d3d0 <__ieee754_sqrt+0x134>
 800d3da:	02d7      	lsls	r7, r2, #11
 800d3dc:	d50a      	bpl.n	800d3f4 <__ieee754_sqrt+0x158>
 800d3de:	f1c1 0420 	rsb	r4, r1, #32
 800d3e2:	fa23 f404 	lsr.w	r4, r3, r4
 800d3e6:	1e4d      	subs	r5, r1, #1
 800d3e8:	408b      	lsls	r3, r1
 800d3ea:	4322      	orrs	r2, r4
 800d3ec:	1b41      	subs	r1, r0, r5
 800d3ee:	e788      	b.n	800d302 <__ieee754_sqrt+0x66>
 800d3f0:	4608      	mov	r0, r1
 800d3f2:	e7f0      	b.n	800d3d6 <__ieee754_sqrt+0x13a>
 800d3f4:	0052      	lsls	r2, r2, #1
 800d3f6:	3101      	adds	r1, #1
 800d3f8:	e7ef      	b.n	800d3da <__ieee754_sqrt+0x13e>
 800d3fa:	46e0      	mov	r8, ip
 800d3fc:	e7be      	b.n	800d37c <__ieee754_sqrt+0xe0>
 800d3fe:	bf00      	nop
 800d400:	7ff00000 	.word	0x7ff00000

0800d404 <_init>:
 800d404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d406:	bf00      	nop
 800d408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d40a:	bc08      	pop	{r3}
 800d40c:	469e      	mov	lr, r3
 800d40e:	4770      	bx	lr

0800d410 <_fini>:
 800d410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d412:	bf00      	nop
 800d414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d416:	bc08      	pop	{r3}
 800d418:	469e      	mov	lr, r3
 800d41a:	4770      	bx	lr
